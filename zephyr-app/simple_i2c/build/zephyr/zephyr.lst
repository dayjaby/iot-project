
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 38 00 20 3d 3d 00 08 c9 73 00 08 69 3d 00 08     .8. ==...s..i=..
 8000010:	69 3d 00 08 69 3d 00 08 69 3d 00 08 00 00 00 00     i=..i=..i=......
	...
 800002c:	e1 39 00 08 69 3d 00 08 00 00 00 00 51 39 00 08     .9..i=......Q9..
 800003c:	5d 37 00 08                                         ]7..

08000040 <_irq_vector_table>:
 8000040:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000050:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000060:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000070:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000080:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000090:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 80000a0:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 80000b0:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 80000c0:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 80000d0:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 80000e0:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 80000f0:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000100:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000110:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000120:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000130:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000140:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000150:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000160:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000170:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000180:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 8000190:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 80001a0:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 80001b0:	15 3d 00 08 15 3d 00 08 15 3d 00 08 15 3d 00 08     .=...=...=...=..
 80001c0:	15 3d 00 08                                         .=..

Disassembly of section text:

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 b978 	b.w	8000d0c <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460e      	mov	r6, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	468e      	mov	lr, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14c      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4694      	mov	ip, r2
 8000a48:	d967      	bls.n	8000b1a <__udivmoddi4+0xe6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b152      	cbz	r2, 8000a66 <__udivmoddi4+0x32>
 8000a50:	fa01 f302 	lsl.w	r3, r1, r2
 8000a54:	f1c2 0120 	rsb	r1, r2, #32
 8000a58:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a60:	ea41 0e03 	orr.w	lr, r1, r3
 8000a64:	4094      	lsls	r4, r2
 8000a66:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a6a:	0c21      	lsrs	r1, r4, #16
 8000a6c:	fbbe f6f8 	udiv	r6, lr, r8
 8000a70:	fa1f f78c 	uxth.w	r7, ip
 8000a74:	fb08 e316 	mls	r3, r8, r6, lr
 8000a78:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7c:	fb06 f107 	mul.w	r1, r6, r7
 8000a80:	4299      	cmp	r1, r3
 8000a82:	d90a      	bls.n	8000a9a <__udivmoddi4+0x66>
 8000a84:	eb1c 0303 	adds.w	r3, ip, r3
 8000a88:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a8c:	f080 811e 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a90:	4299      	cmp	r1, r3
 8000a92:	f240 811b 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a96:	3e02      	subs	r6, #2
 8000a98:	4463      	add	r3, ip
 8000a9a:	1a5b      	subs	r3, r3, r1
 8000a9c:	b2a4      	uxth	r4, r4
 8000a9e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa2:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aaa:	fb00 f707 	mul.w	r7, r0, r7
 8000aae:	42a7      	cmp	r7, r4
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aba:	f080 8109 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abe:	42a7      	cmp	r7, r4
 8000ac0:	f240 8106 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac4:	4464      	add	r4, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1be4      	subs	r4, r4, r7
 8000aca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d4      	lsrs	r4, r2
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e9c5 4300 	strd	r4, r3, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d908      	bls.n	8000af4 <__udivmoddi4+0xc0>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2100      	movs	r1, #0
 8000aea:	e9c5 0600 	strd	r0, r6, [r5]
 8000aee:	4608      	mov	r0, r1
 8000af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af4:	fab3 f183 	clz	r1, r3
 8000af8:	2900      	cmp	r1, #0
 8000afa:	d149      	bne.n	8000b90 <__udivmoddi4+0x15c>
 8000afc:	42b3      	cmp	r3, r6
 8000afe:	d302      	bcc.n	8000b06 <__udivmoddi4+0xd2>
 8000b00:	4282      	cmp	r2, r0
 8000b02:	f200 80ff 	bhi.w	8000d04 <__udivmoddi4+0x2d0>
 8000b06:	1a84      	subs	r4, r0, r2
 8000b08:	eb66 0303 	sbc.w	r3, r6, r3
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	469e      	mov	lr, r3
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d0e2      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b14:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b18:	e7df      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b1a:	b902      	cbnz	r2, 8000b1e <__udivmoddi4+0xea>
 8000b1c:	deff      	udf	#255	; 0xff
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	f040 808e 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b28:	eba1 060c 	sub.w	r6, r1, ip
 8000b2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b30:	fa1f f38c 	uxth.w	r3, ip
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb6 fef7 	udiv	lr, r6, r7
 8000b3a:	fb07 601e 	mls	r0, r7, lr, r6
 8000b3e:	0c26      	lsrs	r6, r4, #16
 8000b40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b44:	fb03 f00e 	mul.w	r0, r3, lr
 8000b48:	42b0      	cmp	r0, r6
 8000b4a:	d908      	bls.n	8000b5e <__udivmoddi4+0x12a>
 8000b4c:	eb1c 0606 	adds.w	r6, ip, r6
 8000b50:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8000b54:	d202      	bcs.n	8000b5c <__udivmoddi4+0x128>
 8000b56:	42b0      	cmp	r0, r6
 8000b58:	f200 80d0 	bhi.w	8000cfc <__udivmoddi4+0x2c8>
 8000b5c:	46c6      	mov	lr, r8
 8000b5e:	1a36      	subs	r6, r6, r0
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	fbb6 f0f7 	udiv	r0, r6, r7
 8000b66:	fb07 6610 	mls	r6, r7, r0, r6
 8000b6a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b6e:	fb00 f303 	mul.w	r3, r0, r3
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0x154>
 8000b76:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7a:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x152>
 8000b80:	42a3      	cmp	r3, r4
 8000b82:	f200 80b8 	bhi.w	8000cf6 <__udivmoddi4+0x2c2>
 8000b86:	4630      	mov	r0, r6
 8000b88:	1ae4      	subs	r4, r4, r3
 8000b8a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000b8e:	e79f      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b90:	f1c1 0720 	rsb	r7, r1, #32
 8000b94:	fa22 f407 	lsr.w	r4, r2, r7
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	4323      	orrs	r3, r4
 8000b9c:	fa06 fc01 	lsl.w	ip, r6, r1
 8000ba0:	fa26 f407 	lsr.w	r4, r6, r7
 8000ba4:	fa20 f607 	lsr.w	r6, r0, r7
 8000ba8:	ea46 060c 	orr.w	r6, r6, ip
 8000bac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb0:	fa00 f801 	lsl.w	r8, r0, r1
 8000bb4:	fbb4 fef9 	udiv	lr, r4, r9
 8000bb8:	0c30      	lsrs	r0, r6, #16
 8000bba:	fa1f fc83 	uxth.w	ip, r3
 8000bbe:	fb09 441e 	mls	r4, r9, lr, r4
 8000bc2:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000bc6:	fb0e f00c 	mul.w	r0, lr, ip
 8000bca:	42a0      	cmp	r0, r4
 8000bcc:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x1b4>
 8000bd2:	191c      	adds	r4, r3, r4
 8000bd4:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000bd8:	f080 808b 	bcs.w	8000cf2 <__udivmoddi4+0x2be>
 8000bdc:	42a0      	cmp	r0, r4
 8000bde:	f240 8088 	bls.w	8000cf2 <__udivmoddi4+0x2be>
 8000be2:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be6:	441c      	add	r4, r3
 8000be8:	1a24      	subs	r4, r4, r0
 8000bea:	b2b6      	uxth	r6, r6
 8000bec:	fbb4 f0f9 	udiv	r0, r4, r9
 8000bf0:	fb09 4410 	mls	r4, r9, r0, r4
 8000bf4:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x1dc>
 8000c00:	191c      	adds	r4, r3, r4
 8000c02:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
 8000c06:	d270      	bcs.n	8000cea <__udivmoddi4+0x2b6>
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d96e      	bls.n	8000cea <__udivmoddi4+0x2b6>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	441c      	add	r4, r3
 8000c10:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c14:	fba0 e602 	umull	lr, r6, r0, r2
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	42b4      	cmp	r4, r6
 8000c1e:	46f4      	mov	ip, lr
 8000c20:	46b1      	mov	r9, r6
 8000c22:	d359      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c24:	d056      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d06e      	beq.n	8000d08 <__udivmoddi4+0x2d4>
 8000c2a:	ebb8 030c 	subs.w	r3, r8, ip
 8000c2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c32:	40cb      	lsrs	r3, r1
 8000c34:	fa04 f707 	lsl.w	r7, r4, r7
 8000c38:	431f      	orrs	r7, r3
 8000c3a:	40cc      	lsrs	r4, r1
 8000c3c:	e9c5 7400 	strd	r7, r4, [r5]
 8000c40:	2100      	movs	r1, #0
 8000c42:	e74a      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f100 	lsr.w	r1, r4, r0
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	fa06 f302 	lsl.w	r3, r6, r2
 8000c54:	fa26 f000 	lsr.w	r0, r6, r0
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	ea41 0603 	orr.w	r6, r1, r3
 8000c60:	fbb0 f1f7 	udiv	r1, r0, r7
 8000c64:	fa1f f38c 	uxth.w	r3, ip
 8000c68:	fb07 0e11 	mls	lr, r7, r1, r0
 8000c6c:	0c30      	lsrs	r0, r6, #16
 8000c6e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c72:	fb01 fe03 	mul.w	lr, r1, r3
 8000c76:	4586      	cmp	lr, r0
 8000c78:	fa04 f402 	lsl.w	r4, r4, r2
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x25c>
 8000c7e:	eb1c 0000 	adds.w	r0, ip, r0
 8000c82:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000c86:	d232      	bcs.n	8000cee <__udivmoddi4+0x2ba>
 8000c88:	4586      	cmp	lr, r0
 8000c8a:	d930      	bls.n	8000cee <__udivmoddi4+0x2ba>
 8000c8c:	3902      	subs	r1, #2
 8000c8e:	4460      	add	r0, ip
 8000c90:	eba0 000e 	sub.w	r0, r0, lr
 8000c94:	b2b6      	uxth	r6, r6
 8000c96:	fbb0 fef7 	udiv	lr, r0, r7
 8000c9a:	fb07 001e 	mls	r0, r7, lr, r0
 8000c9e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca2:	fb0e f003 	mul.w	r0, lr, r3
 8000ca6:	42b0      	cmp	r0, r6
 8000ca8:	d909      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000caa:	eb1c 0606 	adds.w	r6, ip, r6
 8000cae:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8000cb2:	d218      	bcs.n	8000ce6 <__udivmoddi4+0x2b2>
 8000cb4:	42b0      	cmp	r0, r6
 8000cb6:	d916      	bls.n	8000ce6 <__udivmoddi4+0x2b2>
 8000cb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cbc:	4466      	add	r6, ip
 8000cbe:	1a36      	subs	r6, r6, r0
 8000cc0:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
 8000cc4:	e737      	b.n	8000b36 <__udivmoddi4+0x102>
 8000cc6:	4629      	mov	r1, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e706      	b.n	8000ada <__udivmoddi4+0xa6>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e4      	b.n	8000a9a <__udivmoddi4+0x66>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f9      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cd4:	45f0      	cmp	r8, lr
 8000cd6:	d2a6      	bcs.n	8000c26 <__udivmoddi4+0x1f2>
 8000cd8:	ebbe 0c02 	subs.w	ip, lr, r2
 8000cdc:	eb66 0303 	sbc.w	r3, r6, r3
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	4699      	mov	r9, r3
 8000ce4:	e79f      	b.n	8000c26 <__udivmoddi4+0x1f2>
 8000ce6:	46c6      	mov	lr, r8
 8000ce8:	e7e9      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000cea:	4630      	mov	r0, r6
 8000cec:	e790      	b.n	8000c10 <__udivmoddi4+0x1dc>
 8000cee:	4641      	mov	r1, r8
 8000cf0:	e7ce      	b.n	8000c90 <__udivmoddi4+0x25c>
 8000cf2:	46d6      	mov	lr, sl
 8000cf4:	e778      	b.n	8000be8 <__udivmoddi4+0x1b4>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e745      	b.n	8000b88 <__udivmoddi4+0x154>
 8000cfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d00:	4466      	add	r6, ip
 8000d02:	e72c      	b.n	8000b5e <__udivmoddi4+0x12a>
 8000d04:	4608      	mov	r0, r1
 8000d06:	e703      	b.n	8000b10 <__udivmoddi4+0xdc>
 8000d08:	4629      	mov	r1, r5
 8000d0a:	e6e6      	b.n	8000ada <__udivmoddi4+0xa6>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <strcmp>:
 8000d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d18:	2a01      	cmp	r2, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	429a      	cmpcs	r2, r3
 8000d1e:	d0f7      	beq.n	8000d10 <strcmp>
 8000d20:	1ad0      	subs	r0, r2, r3
 8000d22:	4770      	bx	lr

08000d24 <strlen>:
 8000d24:	4603      	mov	r3, r0
 8000d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d1fb      	bne.n	8000d26 <strlen+0x2>
 8000d2e:	1a18      	subs	r0, r3, r0
 8000d30:	3801      	subs	r0, #1
 8000d32:	4770      	bx	lr
 8000d34:	0000      	movs	r0, r0
	...

08000d38 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t>:
		mavlink_msg_gps_raw_int_decode(&msg, &gps_raw_int);
		handle_gps_raw_int(msg.sysid, gps_raw_int);
	}
}

void handle_gps_raw_int(uint8_t sys_id, mavlink_gps_raw_int_t& gps_raw_int) {
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	ed2d 8b02 	vpush	{d8}
	if (OUR_ID == 0 && sys_id <= SYS_IDS) {
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x80>)
 8000d40:	781a      	ldrb	r2, [r3, #0]
void handle_gps_raw_int(uint8_t sys_id, mavlink_gps_raw_int_t& gps_raw_int) {
 8000d42:	4604      	mov	r4, r0
 8000d44:	460d      	mov	r5, r1
	if (OUR_ID == 0 && sys_id <= SYS_IDS) {
 8000d46:	b922      	cbnz	r2, 8000d52 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x1a>
 8000d48:	2802      	cmp	r0, #2
		// now we know who we are
		OUR_ID = sys_id;
 8000d4a:	bf9e      	ittt	ls
 8000d4c:	7018      	strbls	r0, [r3, #0]
		mac_addr[1] = sys_id;
 8000d4e:	4b1b      	ldrls	r3, [pc, #108]	; (8000dbc <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x84>)
 8000d50:	7058      	strbls	r0, [r3, #1]
	}
	queue_coords(sys_id,
		gps_raw_int.lat / 1e7,
		gps_raw_int.lon / 1e7,
		gps_raw_int.alt / 1e3
 8000d52:	6928      	ldr	r0, [r5, #16]
 8000d54:	f7ff fb8a 	bl	800046c <__aeabi_i2d>
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x88>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f7ff fd1a 	bl	8000794 <__aeabi_ddiv>
	queue_coords(sys_id,
 8000d60:	f7ff fe00 	bl	8000964 <__aeabi_d2f>
 8000d64:	ee08 0a90 	vmov	s17, r0
		gps_raw_int.lon / 1e7,
 8000d68:	68e8      	ldr	r0, [r5, #12]
 8000d6a:	f7ff fb7f 	bl	800046c <__aeabi_i2d>
 8000d6e:	a310      	add	r3, pc, #64	; (adr r3, 8000db0 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x78>)
 8000d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d74:	f7ff fd0e 	bl	8000794 <__aeabi_ddiv>
	queue_coords(sys_id,
 8000d78:	f7ff fdf4 	bl	8000964 <__aeabi_d2f>
 8000d7c:	ee08 0a10 	vmov	s16, r0
		gps_raw_int.lat / 1e7,
 8000d80:	68a8      	ldr	r0, [r5, #8]
 8000d82:	f7ff fb73 	bl	800046c <__aeabi_i2d>
 8000d86:	a30a      	add	r3, pc, #40	; (adr r3, 8000db0 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x78>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	f7ff fd02 	bl	8000794 <__aeabi_ddiv>
	queue_coords(sys_id,
 8000d90:	f7ff fde8 	bl	8000964 <__aeabi_d2f>
 8000d94:	eeb0 1a68 	vmov.f32	s2, s17
 8000d98:	eef0 0a48 	vmov.f32	s1, s16
	);
}
 8000d9c:	ecbd 8b02 	vpop	{d8}
	queue_coords(sys_id,
 8000da0:	ee00 0a10 	vmov	s0, r0
 8000da4:	4620      	mov	r0, r4
}
 8000da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	queue_coords(sys_id,
 8000daa:	f001 b853 	b.w	8001e54 <_Z12queue_coordshfff>
 8000dae:	bf00      	nop
 8000db0:	00000000 	.word	0x00000000
 8000db4:	416312d0 	.word	0x416312d0
 8000db8:	20001a71 	.word	0x20001a71
 8000dbc:	20001efe 	.word	0x20001efe
 8000dc0:	408f4000 	.word	0x408f4000
 8000dc4:	00000000 	.word	0x00000000

08000dc8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8000dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dcc:	ed2d 8b02 	vpush	{d8}
	uint64_t round = BIT64(59); /* 0.5 */
 8000dd0:	ed9f 8bab 	vldr	d8, [pc, #684]	; 8001080 <cbvprintf+0x2b8>
{
 8000dd4:	b09b      	sub	sp, #108	; 0x6c
 8000dd6:	4681      	mov	r9, r0
 8000dd8:	468a      	mov	sl, r1
 8000dda:	4615      	mov	r5, r2
 8000ddc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000dde:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000de0:	7828      	ldrb	r0, [r5, #0]
 8000de2:	b910      	cbnz	r0, 8000dea <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000de4:	4630      	mov	r0, r6
 8000de6:	f000 bdc9 	b.w	800197c <cbvprintf+0xbb4>
			OUTC(*fp++);
 8000dea:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
 8000dec:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000dee:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
 8000df0:	d006      	beq.n	8000e00 <cbvprintf+0x38>
			OUTC(*fp++);
 8000df2:	4651      	mov	r1, sl
			OUTC('%');
 8000df4:	47c8      	blx	r9
 8000df6:	2800      	cmp	r0, #0
 8000df8:	f2c0 85c0 	blt.w	800197c <cbvprintf+0xbb4>
 8000dfc:	3601      	adds	r6, #1
		if (bps == NULL) {
 8000dfe:	e22e      	b.n	800125e <cbvprintf+0x496>
		} state = {
 8000e00:	2218      	movs	r2, #24
 8000e02:	2100      	movs	r1, #0
 8000e04:	a80c      	add	r0, sp, #48	; 0x30
 8000e06:	f007 fbaa 	bl	800855e <memset>
	if (*sp == '%') {
 8000e0a:	786b      	ldrb	r3, [r5, #1]
 8000e0c:	2b25      	cmp	r3, #37	; 0x25
 8000e0e:	d059      	beq.n	8000ec4 <cbvprintf+0xfc>
 8000e10:	1c6a      	adds	r2, r5, #1
 8000e12:	4617      	mov	r7, r2
		switch (*sp) {
 8000e14:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000e18:	2b2b      	cmp	r3, #43	; 0x2b
 8000e1a:	f000 808b 	beq.w	8000f34 <cbvprintf+0x16c>
 8000e1e:	d879      	bhi.n	8000f14 <cbvprintf+0x14c>
 8000e20:	2b20      	cmp	r3, #32
 8000e22:	f000 808c 	beq.w	8000f3e <cbvprintf+0x176>
 8000e26:	2b23      	cmp	r3, #35	; 0x23
 8000e28:	f000 808e 	beq.w	8000f48 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
 8000e2c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000e30:	f003 0244 	and.w	r2, r3, #68	; 0x44
 8000e34:	2a44      	cmp	r2, #68	; 0x44
 8000e36:	d103      	bne.n	8000e40 <cbvprintf+0x78>
		conv->flag_zero = false;
 8000e38:	f36f 1386 	bfc	r3, #6, #1
 8000e3c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
 8000e40:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000e44:	970a      	str	r7, [sp, #40]	; 0x28
 8000e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
 8000e4e:	783b      	ldrb	r3, [r7, #0]
 8000e50:	2b2a      	cmp	r3, #42	; 0x2a
 8000e52:	d17e      	bne.n	8000f52 <cbvprintf+0x18a>
		conv->width_star = true;
 8000e54:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
 8000e60:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
 8000e62:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	2a2e      	cmp	r2, #46	; 0x2e
 8000e68:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000e6c:	bf0c      	ite	eq
 8000e6e:	2101      	moveq	r1, #1
 8000e70:	2100      	movne	r1, #0
 8000e72:	f361 0241 	bfi	r2, r1, #1, #1
 8000e76:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
 8000e7a:	d10b      	bne.n	8000e94 <cbvprintf+0xcc>
	++sp;
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
 8000e80:	785a      	ldrb	r2, [r3, #1]
 8000e82:	2a2a      	cmp	r2, #42	; 0x2a
 8000e84:	d17b      	bne.n	8000f7e <cbvprintf+0x1b6>
		conv->prec_star = true;
 8000e86:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000e8a:	f042 0204 	orr.w	r2, r2, #4
 8000e8e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
 8000e92:	3302      	adds	r3, #2
	switch (*sp) {
 8000e94:	4619      	mov	r1, r3
 8000e96:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000e9a:	286c      	cmp	r0, #108	; 0x6c
 8000e9c:	f000 80cf 	beq.w	800103e <cbvprintf+0x276>
 8000ea0:	d87d      	bhi.n	8000f9e <cbvprintf+0x1d6>
 8000ea2:	2868      	cmp	r0, #104	; 0x68
 8000ea4:	f000 8084 	beq.w	8000fb0 <cbvprintf+0x1e8>
 8000ea8:	286a      	cmp	r0, #106	; 0x6a
 8000eaa:	f000 80d2 	beq.w	8001052 <cbvprintf+0x28a>
 8000eae:	284c      	cmp	r0, #76	; 0x4c
 8000eb0:	f000 80d6 	beq.w	8001060 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
 8000eb4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000eb8:	f36f 02c6 	bfc	r2, #3, #4
 8000ebc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	e080      	b.n	8000fc6 <cbvprintf+0x1fe>
		conv->specifier = *sp++;
 8000ec4:	1caa      	adds	r2, r5, #2
 8000ec6:	9202      	str	r2, [sp, #8]
 8000ec8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
 8000ecc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000ed0:	07df      	lsls	r7, r3, #31
 8000ed2:	f140 8178 	bpl.w	80011c6 <cbvprintf+0x3fe>
			width = va_arg(ap, int);
 8000ed6:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
 8000eda:	f1bb 0f00 	cmp.w	fp, #0
 8000ede:	da07      	bge.n	8000ef0 <cbvprintf+0x128>
				conv->flag_dash = true;
 8000ee0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8000ee4:	f042 0204 	orr.w	r2, r2, #4
 8000ee8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
 8000eec:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
 8000ef0:	0758      	lsls	r0, r3, #29
 8000ef2:	f140 8171 	bpl.w	80011d8 <cbvprintf+0x410>
			int arg = va_arg(ap, int);
 8000ef6:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 8000efa:	f1b8 0f00 	cmp.w	r8, #0
 8000efe:	f280 8170 	bge.w	80011e2 <cbvprintf+0x41a>
				conv->prec_present = false;
 8000f02:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000f06:	f36f 0341 	bfc	r3, #1, #1
 8000f0a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
 8000f0e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8000f12:	e166      	b.n	80011e2 <cbvprintf+0x41a>
		switch (*sp) {
 8000f14:	2b2d      	cmp	r3, #45	; 0x2d
 8000f16:	d006      	beq.n	8000f26 <cbvprintf+0x15e>
 8000f18:	2b30      	cmp	r3, #48	; 0x30
 8000f1a:	d187      	bne.n	8000e2c <cbvprintf+0x64>
			conv->flag_zero = true;
 8000f1c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f24:	e003      	b.n	8000f2e <cbvprintf+0x166>
			conv->flag_dash = true;
 8000f26:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
 8000f2e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
 8000f32:	e76e      	b.n	8000e12 <cbvprintf+0x4a>
			conv->flag_plus = true;
 8000f34:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	e7f7      	b.n	8000f2e <cbvprintf+0x166>
			conv->flag_space = true;
 8000f3e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000f42:	f043 0310 	orr.w	r3, r3, #16
 8000f46:	e7f2      	b.n	8000f2e <cbvprintf+0x166>
			conv->flag_hash = true;
 8000f48:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000f4c:	f043 0320 	orr.w	r3, r3, #32
 8000f50:	e7ed      	b.n	8000f2e <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
 8000f52:	a80a      	add	r0, sp, #40	; 0x28
 8000f54:	f001 fc06 	bl	8002764 <extract_decimal>
	if (sp != wp) {
 8000f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f5a:	42bb      	cmp	r3, r7
 8000f5c:	d081      	beq.n	8000e62 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
 8000f5e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
		conv->width_value = width;
 8000f62:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
 8000f64:	f3c7 0140 	ubfx	r1, r7, #1, #1
 8000f68:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
 8000f6c:	0052      	lsls	r2, r2, #1
 8000f6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f72:	f007 017d 	and.w	r1, r7, #125	; 0x7d
 8000f76:	430a      	orrs	r2, r1
 8000f78:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8000f7c:	e771      	b.n	8000e62 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
 8000f7e:	a80a      	add	r0, sp, #40	; 0x28
 8000f80:	f001 fbf0 	bl	8002764 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8000f84:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
 8000f88:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
 8000f8a:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8000f8e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
 8000f92:	f360 0341 	bfi	r3, r0, #1, #1
 8000f96:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
 8000f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f9c:	e77a      	b.n	8000e94 <cbvprintf+0xcc>
	switch (*sp) {
 8000f9e:	2874      	cmp	r0, #116	; 0x74
 8000fa0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000fa4:	d059      	beq.n	800105a <cbvprintf+0x292>
 8000fa6:	287a      	cmp	r0, #122	; 0x7a
 8000fa8:	d184      	bne.n	8000eb4 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
 8000faa:	4613      	mov	r3, r2
 8000fac:	2206      	movs	r2, #6
 8000fae:	e041      	b.n	8001034 <cbvprintf+0x26c>
		if (*++sp == 'h') {
 8000fb0:	785a      	ldrb	r2, [r3, #1]
 8000fb2:	2a68      	cmp	r2, #104	; 0x68
 8000fb4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000fb8:	d13a      	bne.n	8001030 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
 8000fba:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000fbc:	f361 02c6 	bfi	r2, r1, #3, #4
 8000fc0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
 8000fc4:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fcc:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
 8000fce:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 8000fd0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
 8000fd4:	f200 80cd 	bhi.w	8001172 <cbvprintf+0x3aa>
 8000fd8:	2a57      	cmp	r2, #87	; 0x57
 8000fda:	d855      	bhi.n	8001088 <cbvprintf+0x2c0>
 8000fdc:	2a41      	cmp	r2, #65	; 0x41
 8000fde:	d004      	beq.n	8000fea <cbvprintf+0x222>
 8000fe0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	f200 80c4 	bhi.w	8001172 <cbvprintf+0x3aa>
		conv->specifier_cat = SPECIFIER_FP;
 8000fea:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8000fee:	2104      	movs	r1, #4
 8000ff0:	f361 0302 	bfi	r3, r1, #0, #3
 8000ff4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 8000ff8:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8000ffc:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
 8001000:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
 8001004:	f1d8 0300 	rsbs	r3, r8, #0
 8001008:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
 800100c:	f363 12c7 	bfi	r2, r3, #7, #1
 8001010:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
 8001014:	b2d3      	uxtb	r3, r2
 8001016:	0612      	lsls	r2, r2, #24
 8001018:	f100 80d3 	bmi.w	80011c2 <cbvprintf+0x3fa>
		if (conv->length_mod == LENGTH_L) {
 800101c:	f003 0278 	and.w	r2, r3, #120	; 0x78
 8001020:	2a18      	cmp	r2, #24
 8001022:	f040 80a3 	bne.w	800116c <cbvprintf+0x3a4>
			conv->length_mod = LENGTH_NONE;
 8001026:	f36f 03c6 	bfc	r3, #3, #4
 800102a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 800102e:	e08a      	b.n	8001146 <cbvprintf+0x37e>
			conv->length_mod = LENGTH_H;
 8001030:	4613      	mov	r3, r2
 8001032:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
 8001034:	f362 03c6 	bfi	r3, r2, #3, #4
 8001038:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 800103c:	e7c3      	b.n	8000fc6 <cbvprintf+0x1fe>
		if (*++sp == 'l') {
 800103e:	785a      	ldrb	r2, [r3, #1]
 8001040:	2a6c      	cmp	r2, #108	; 0x6c
 8001042:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8001046:	d101      	bne.n	800104c <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
 8001048:	2104      	movs	r1, #4
 800104a:	e7b7      	b.n	8000fbc <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
 800104c:	4613      	mov	r3, r2
 800104e:	2203      	movs	r2, #3
 8001050:	e7f0      	b.n	8001034 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
 8001052:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001056:	2205      	movs	r2, #5
 8001058:	e7ec      	b.n	8001034 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
 800105a:	4613      	mov	r3, r2
 800105c:	2207      	movs	r2, #7
 800105e:	e7e9      	b.n	8001034 <cbvprintf+0x26c>
		conv->unsupported = true;
 8001060:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8001064:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001068:	f023 0302 	bic.w	r3, r3, #2
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
 8001078:	e7a5      	b.n	8000fc6 <cbvprintf+0x1fe>
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w
 8001080:	00000000 	.word	0x00000000
 8001084:	08000000 	.word	0x08000000
 8001088:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 800108c:	2b20      	cmp	r3, #32
 800108e:	d870      	bhi.n	8001172 <cbvprintf+0x3aa>
 8001090:	a101      	add	r1, pc, #4	; (adr r1, 8001098 <cbvprintf+0x2d0>)
 8001092:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001096:	bf00      	nop
 8001098:	0800114b 	.word	0x0800114b
 800109c:	08001173 	.word	0x08001173
 80010a0:	08001173 	.word	0x08001173
 80010a4:	08001173 	.word	0x08001173
 80010a8:	08001173 	.word	0x08001173
 80010ac:	08001173 	.word	0x08001173
 80010b0:	08001173 	.word	0x08001173
 80010b4:	08001173 	.word	0x08001173
 80010b8:	08001173 	.word	0x08001173
 80010bc:	08000feb 	.word	0x08000feb
 80010c0:	08001173 	.word	0x08001173
 80010c4:	0800114b 	.word	0x0800114b
 80010c8:	0800111d 	.word	0x0800111d
 80010cc:	08000feb 	.word	0x08000feb
 80010d0:	08000feb 	.word	0x08000feb
 80010d4:	08000feb 	.word	0x08000feb
 80010d8:	08001173 	.word	0x08001173
 80010dc:	0800111d 	.word	0x0800111d
 80010e0:	08001173 	.word	0x08001173
 80010e4:	08001173 	.word	0x08001173
 80010e8:	08001173 	.word	0x08001173
 80010ec:	08001173 	.word	0x08001173
 80010f0:	08001181 	.word	0x08001181
 80010f4:	0800114b 	.word	0x0800114b
 80010f8:	080011a5 	.word	0x080011a5
 80010fc:	08001173 	.word	0x08001173
 8001100:	08001173 	.word	0x08001173
 8001104:	080011a5 	.word	0x080011a5
 8001108:	08001173 	.word	0x08001173
 800110c:	0800114b 	.word	0x0800114b
 8001110:	08001173 	.word	0x08001173
 8001114:	08001173 	.word	0x08001173
 8001118:	0800114b 	.word	0x0800114b
		conv->specifier_cat = SPECIFIER_SINT;
 800111c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001120:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
 8001122:	f361 0302 	bfi	r3, r1, #0, #3
 8001126:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 800112a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800112e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001132:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
 8001134:	bf02      	ittt	eq
 8001136:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
 800113a:	f041 0101 	orreq.w	r1, r1, #1
 800113e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
 8001142:	2a63      	cmp	r2, #99	; 0x63
 8001144:	d005      	beq.n	8001152 <cbvprintf+0x38a>
	bool unsupported = false;
 8001146:	2300      	movs	r3, #0
 8001148:	e006      	b.n	8001158 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_UINT;
 800114a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800114e:	2102      	movs	r1, #2
 8001150:	e7e7      	b.n	8001122 <cbvprintf+0x35a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8001152:	3b00      	subs	r3, #0
 8001154:	bf18      	it	ne
 8001156:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8001158:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800115c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8001160:	430b      	orrs	r3, r1
 8001162:	f363 0241 	bfi	r2, r3, #1, #1
 8001166:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
 800116a:	e6af      	b.n	8000ecc <cbvprintf+0x104>
		} else if ((conv->length_mod != LENGTH_NONE)
 800116c:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001170:	d0e9      	beq.n	8001146 <cbvprintf+0x37e>
			conv->invalid = true;
 8001172:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 800117e:	e7e2      	b.n	8001146 <cbvprintf+0x37e>
		conv->specifier_cat = SPECIFIER_PTR;
 8001180:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001184:	2203      	movs	r2, #3
 8001186:	f362 0302 	bfi	r3, r2, #0, #3
 800118a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 800118e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001192:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001196:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
 800119a:	f1dc 0300 	rsbs	r3, ip, #0
 800119e:	eb43 030c 	adc.w	r3, r3, ip
 80011a2:	e7d9      	b.n	8001158 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_PTR;
 80011a4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80011a8:	2203      	movs	r2, #3
 80011aa:	f362 0302 	bfi	r3, r2, #0, #3
 80011ae:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
 80011b2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80011b6:	f013 0f78 	tst.w	r3, #120	; 0x78
 80011ba:	bf14      	ite	ne
 80011bc:	2301      	movne	r3, #1
 80011be:	2300      	moveq	r3, #0
 80011c0:	e7ca      	b.n	8001158 <cbvprintf+0x390>
			unsupported = true;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e7c8      	b.n	8001158 <cbvprintf+0x390>
		} else if (conv->width_present) {
 80011c6:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
 80011ca:	2a00      	cmp	r2, #0
			width = conv->width_value;
 80011cc:	bfb4      	ite	lt
 80011ce:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
 80011d2:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
 80011d6:	e68b      	b.n	8000ef0 <cbvprintf+0x128>
		} else if (conv->prec_present) {
 80011d8:	0799      	lsls	r1, r3, #30
 80011da:	f57f ae98 	bpl.w	8000f0e <cbvprintf+0x146>
			precision = conv->prec_value;
 80011de:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
 80011e2:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 80011e6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 80011e8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
 80011ec:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 80011f0:	f003 0207 	and.w	r2, r3, #7
 80011f4:	2a04      	cmp	r2, #4
 80011f6:	d109      	bne.n	800120c <cbvprintf+0x444>
		    && !conv->prec_present) {
 80011f8:	078a      	lsls	r2, r1, #30
 80011fa:	d407      	bmi.n	800120c <cbvprintf+0x444>
			if (conv->specifier_a) {
 80011fc:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
 8001200:	2a00      	cmp	r2, #0
 8001202:	bfb4      	ite	lt
 8001204:	f04f 080d 	movlt.w	r8, #13
 8001208:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
 800120c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8001210:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8001212:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8001216:	d137      	bne.n	8001288 <cbvprintf+0x4c0>
			switch (length_mod) {
 8001218:	1ecb      	subs	r3, r1, #3
 800121a:	2b04      	cmp	r3, #4
 800121c:	d821      	bhi.n	8001262 <cbvprintf+0x49a>
 800121e:	e8df f003 	tbb	[pc, r3]
 8001222:	0903      	.short	0x0903
 8001224:	2009      	.short	0x2009
 8001226:	20          	.byte	0x20
 8001227:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8001228:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 800122c:	17da      	asrs	r2, r3, #31
 800122e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8001232:	e006      	b.n	8001242 <cbvprintf+0x47a>
					(sint_value_type)va_arg(ap, intmax_t);
 8001234:	3407      	adds	r4, #7
 8001236:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 800123a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 800123e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
 8001242:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8001246:	07bb      	lsls	r3, r7, #30
 8001248:	d054      	beq.n	80012f4 <cbvprintf+0x52c>
			OUTS(sp, fp);
 800124a:	9b02      	ldr	r3, [sp, #8]
 800124c:	462a      	mov	r2, r5
 800124e:	4651      	mov	r1, sl
 8001250:	4648      	mov	r0, r9
 8001252:	f005 fcfb 	bl	8006c4c <outs>
 8001256:	2800      	cmp	r0, #0
 8001258:	f2c0 8390 	blt.w	800197c <cbvprintf+0xbb4>
 800125c:	4406      	add	r6, r0
			while (pad_len-- > 0) {
 800125e:	9d02      	ldr	r5, [sp, #8]
 8001260:	e5be      	b.n	8000de0 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8001262:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8001266:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8001268:	ea4f 72e3 	mov.w	r2, r3, asr #31
 800126c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8001270:	d105      	bne.n	800127e <cbvprintf+0x4b6>
				value->uint = (unsigned char)value->uint;
 8001272:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
 8001276:	930c      	str	r3, [sp, #48]	; 0x30
 8001278:	2300      	movs	r3, #0
 800127a:	930d      	str	r3, [sp, #52]	; 0x34
 800127c:	e7e1      	b.n	8001242 <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
 800127e:	2902      	cmp	r1, #2
 8001280:	d1df      	bne.n	8001242 <cbvprintf+0x47a>
				value->sint = (short)value->sint;
 8001282:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8001286:	e7d1      	b.n	800122c <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <cbvprintf+0x50c>
			switch (length_mod) {
 800128c:	1ecb      	subs	r3, r1, #3
 800128e:	2b04      	cmp	r3, #4
 8001290:	d813      	bhi.n	80012ba <cbvprintf+0x4f2>
 8001292:	e8df f003 	tbb	[pc, r3]
 8001296:	0a03      	.short	0x0a03
 8001298:	120a      	.short	0x120a
 800129a:	12          	.byte	0x12
 800129b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 800129c:	6820      	ldr	r0, [r4, #0]
 800129e:	900c      	str	r0, [sp, #48]	; 0x30
 80012a0:	2200      	movs	r2, #0
				value->sint = va_arg(ap, int);
 80012a2:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 80012a4:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
 80012a6:	461c      	mov	r4, r3
 80012a8:	e7cb      	b.n	8001242 <cbvprintf+0x47a>
					(uint_value_type)va_arg(ap,
 80012aa:	1de3      	adds	r3, r4, #7
 80012ac:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
 80012b0:	ecb3 7b02 	vldmia	r3!, {d7}
 80012b4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
 80012b8:	e7f5      	b.n	80012a6 <cbvprintf+0x4de>
					(uint_value_type)va_arg(ap, size_t);
 80012ba:	f854 3b04 	ldr.w	r3, [r4], #4
 80012be:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 80012c0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
 80012c8:	d0d3      	beq.n	8001272 <cbvprintf+0x4aa>
			} else if (length_mod == LENGTH_H) {
 80012ca:	2902      	cmp	r1, #2
 80012cc:	d1b9      	bne.n	8001242 <cbvprintf+0x47a>
				value->uint = (unsigned short)value->uint;
 80012ce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80012d2:	e7d0      	b.n	8001276 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_FP) {
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d107      	bne.n	80012e8 <cbvprintf+0x520>
					(sint_value_type)va_arg(ap, long long);
 80012d8:	3407      	adds	r4, #7
 80012da:	f024 0407 	bic.w	r4, r4, #7
 80012de:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
 80012e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80012e6:	e7ac      	b.n	8001242 <cbvprintf+0x47a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 80012e8:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 80012ea:	bf04      	itt	eq
 80012ec:	f854 3b04 	ldreq.w	r3, [r4], #4
 80012f0:	930c      	streq	r3, [sp, #48]	; 0x30
 80012f2:	e7a6      	b.n	8001242 <cbvprintf+0x47a>
		switch (conv->specifier) {
 80012f4:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80012f8:	2a78      	cmp	r2, #120	; 0x78
 80012fa:	d8b0      	bhi.n	800125e <cbvprintf+0x496>
 80012fc:	2a57      	cmp	r2, #87	; 0x57
 80012fe:	f200 808c 	bhi.w	800141a <cbvprintf+0x652>
 8001302:	2a25      	cmp	r2, #37	; 0x25
 8001304:	f000 80d4 	beq.w	80014b0 <cbvprintf+0x6e8>
 8001308:	2a24      	cmp	r2, #36	; 0x24
 800130a:	d9a8      	bls.n	800125e <cbvprintf+0x496>
 800130c:	2a41      	cmp	r2, #65	; 0x41
 800130e:	d003      	beq.n	8001318 <cbvprintf+0x550>
 8001310:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8001314:	2b02      	cmp	r3, #2
 8001316:	d8a2      	bhi.n	800125e <cbvprintf+0x496>
	} u = {
 8001318:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
 800131c:	2b00      	cmp	r3, #0
 800131e:	f2c0 81b7 	blt.w	8001690 <cbvprintf+0x8c8>
	} else if (conv->flag_plus) {
 8001322:	0738      	lsls	r0, r7, #28
 8001324:	f100 81b6 	bmi.w	8001694 <cbvprintf+0x8cc>
		*sign = ' ';
 8001328:	f017 0710 	ands.w	r7, r7, #16
 800132c:	bf18      	it	ne
 800132e:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8001330:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 8001334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001338:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
 800133c:	2d00      	cmp	r5, #0
 800133e:	f040 81ab 	bne.w	8001698 <cbvprintf+0x8d0>
 8001342:	ea51 0003 	orrs.w	r0, r1, r3
 8001346:	bf14      	ite	ne
 8001348:	2001      	movne	r0, #1
 800134a:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
 800134c:	02db      	lsls	r3, r3, #11
 800134e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8001352:	02c9      	lsls	r1, r1, #11
		c = 'f';
 8001354:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
 8001356:	ea45 0e01 	orr.w	lr, r5, r1
 800135a:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
 800135e:	bf08      	it	eq
 8001360:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
 8001362:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 8001366:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
 800136a:	f000 8203 	beq.w	8001774 <cbvprintf+0x9ac>
		if (is_subnormal) {
 800136e:	2800      	cmp	r0, #0
 8001370:	f040 81cb 	bne.w	800170a <cbvprintf+0x942>
		fract |= BIT_63;
 8001374:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001378:	f04f 0c00 	mov.w	ip, #0
 800137c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8001380:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
 8001384:	9109      	str	r1, [sp, #36]	; 0x24
 8001386:	4663      	mov	r3, ip
		fract *= 5U;
 8001388:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
 800138c:	f115 0f02 	cmn.w	r5, #2
 8001390:	f2c0 81c2 	blt.w	8001718 <cbvprintf+0x950>
 8001394:	f1bc 0f00 	cmp.w	ip, #0
 8001398:	d001      	beq.n	800139e <cbvprintf+0x5d6>
 800139a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
 800139e:	2d00      	cmp	r5, #0
		fract += 2;
 80013a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
 80013a4:	f300 81cd 	bgt.w	8001742 <cbvprintf+0x97a>
	fract >>= (4 - expo);
 80013a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80013aa:	9908      	ldr	r1, [sp, #32]
 80013ac:	f1c5 0c04 	rsb	ip, r5, #4
 80013b0:	351c      	adds	r5, #28
 80013b2:	fa00 f505 	lsl.w	r5, r0, r5
 80013b6:	f1ac 0e20 	sub.w	lr, ip, #32
 80013ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80013be:	fa20 fe0e 	lsr.w	lr, r0, lr
 80013c2:	4329      	orrs	r1, r5
 80013c4:	ea41 010e 	orr.w	r1, r1, lr
 80013c8:	fa20 f00c 	lsr.w	r0, r0, ip
 80013cc:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
 80013d0:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 80013d4:	2947      	cmp	r1, #71	; 0x47
 80013d6:	f040 81d4 	bne.w	8001782 <cbvprintf+0x9ba>
		if (decexp < (-4 + 1) || decexp > precision) {
 80013da:	1cdd      	adds	r5, r3, #3
 80013dc:	db02      	blt.n	80013e4 <cbvprintf+0x61c>
 80013de:	4598      	cmp	r8, r3
 80013e0:	f280 81cb 	bge.w	800177a <cbvprintf+0x9b2>
			c += 'e' - 'g';  /* e or E */
 80013e4:	3a02      	subs	r2, #2
			if (precision > 0) {
 80013e6:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
 80013ea:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
 80013ec:	dd01      	ble.n	80013f2 <cbvprintf+0x62a>
				precision--;
 80013ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
 80013f2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80013f6:	0688      	lsls	r0, r1, #26
 80013f8:	f100 81c3 	bmi.w	8001782 <cbvprintf+0x9ba>
 80013fc:	f1b8 0f00 	cmp.w	r8, #0
 8001400:	bfd4      	ite	le
 8001402:	2100      	movle	r1, #0
 8001404:	2101      	movgt	r1, #1
	if (c == 'f') {
 8001406:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
 8001408:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
 800140a:	f040 81bc 	bne.w	8001786 <cbvprintf+0x9be>
		if (decimals < 0) {
 800140e:	eb13 0108 	adds.w	r1, r3, r8
 8001412:	f140 81ba 	bpl.w	800178a <cbvprintf+0x9c2>
			decimals = 0;
 8001416:	2100      	movs	r1, #0
 8001418:	e1ba      	b.n	8001790 <cbvprintf+0x9c8>
 800141a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 800141e:	2b20      	cmp	r3, #32
 8001420:	f63f af1d 	bhi.w	800125e <cbvprintf+0x496>
 8001424:	a001      	add	r0, pc, #4	; (adr r0, 800142c <cbvprintf+0x664>)
 8001426:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	08001633 	.word	0x08001633
 8001430:	0800125f 	.word	0x0800125f
 8001434:	0800125f 	.word	0x0800125f
 8001438:	0800125f 	.word	0x0800125f
 800143c:	0800125f 	.word	0x0800125f
 8001440:	0800125f 	.word	0x0800125f
 8001444:	0800125f 	.word	0x0800125f
 8001448:	0800125f 	.word	0x0800125f
 800144c:	0800125f 	.word	0x0800125f
 8001450:	08001319 	.word	0x08001319
 8001454:	0800125f 	.word	0x0800125f
 8001458:	080014dd 	.word	0x080014dd
 800145c:	080015d3 	.word	0x080015d3
 8001460:	08001319 	.word	0x08001319
 8001464:	08001319 	.word	0x08001319
 8001468:	08001319 	.word	0x08001319
 800146c:	0800125f 	.word	0x0800125f
 8001470:	080015d3 	.word	0x080015d3
 8001474:	0800125f 	.word	0x0800125f
 8001478:	0800125f 	.word	0x0800125f
 800147c:	0800125f 	.word	0x0800125f
 8001480:	0800125f 	.word	0x0800125f
 8001484:	08001669 	.word	0x08001669
 8001488:	08001633 	.word	0x08001633
 800148c:	08001637 	.word	0x08001637
 8001490:	0800125f 	.word	0x0800125f
 8001494:	0800125f 	.word	0x0800125f
 8001498:	080014b7 	.word	0x080014b7
 800149c:	0800125f 	.word	0x0800125f
 80014a0:	08001633 	.word	0x08001633
 80014a4:	0800125f 	.word	0x0800125f
 80014a8:	0800125f 	.word	0x0800125f
 80014ac:	08001633 	.word	0x08001633
			OUTC('%');
 80014b0:	4651      	mov	r1, sl
 80014b2:	4610      	mov	r0, r2
 80014b4:	e49e      	b.n	8000df4 <cbvprintf+0x2c>
			if (precision >= 0) {
 80014b6:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 80014ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
 80014bc:	db09      	blt.n	80014d2 <cbvprintf+0x70a>
				len = strnlen(bps, precision);
 80014be:	4641      	mov	r1, r8
 80014c0:	4610      	mov	r0, r2
 80014c2:	9203      	str	r2, [sp, #12]
 80014c4:	f007 f866 	bl	8008594 <strnlen>
				len = strlen(bps);
 80014c8:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
 80014ca:	2700      	movs	r7, #0
			bpe = bps + len;
 80014cc:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
 80014ce:	b962      	cbnz	r2, 80014ea <cbvprintf+0x722>
 80014d0:	e6c5      	b.n	800125e <cbvprintf+0x496>
				len = strlen(bps);
 80014d2:	4610      	mov	r0, r2
 80014d4:	9203      	str	r2, [sp, #12]
 80014d6:	f7ff fc25 	bl	8000d24 <strlen>
 80014da:	e7f5      	b.n	80014c8 <cbvprintf+0x700>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 80014dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014de:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
 80014e2:	2700      	movs	r7, #0
			bpe = buf + 1;
 80014e4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
 80014e8:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
 80014ea:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
 80014ec:	b107      	cbz	r7, 80014f0 <cbvprintf+0x728>
			nj_len += 1U;
 80014ee:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 80014f0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
 80014f4:	06c1      	lsls	r1, r0, #27
 80014f6:	f140 8235 	bpl.w	8001964 <cbvprintf+0xb9c>
			nj_len += 2U;
 80014fa:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
 80014fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
 80014fe:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
 8001500:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8001502:	bf44      	itt	mi
 8001504:	9910      	ldrmi	r1, [sp, #64]	; 0x40
 8001506:	185b      	addmi	r3, r3, r1
		if (width > 0) {
 8001508:	f1bb 0f00 	cmp.w	fp, #0
 800150c:	dd23      	ble.n	8001556 <cbvprintf+0x78e>
			width -= (int)nj_len;
 800150e:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
 8001512:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001516:	0759      	lsls	r1, r3, #29
 8001518:	f3c3 0880 	ubfx	r8, r3, #2, #1
 800151c:	d41b      	bmi.n	8001556 <cbvprintf+0x78e>
				if (conv->flag_zero) {
 800151e:	0658      	lsls	r0, r3, #25
 8001520:	f140 8236 	bpl.w	8001990 <cbvprintf+0xbc8>
					if (sign != 0) {
 8001524:	2f00      	cmp	r7, #0
 8001526:	f000 8236 	beq.w	8001996 <cbvprintf+0xbce>
						OUTC(sign);
 800152a:	4651      	mov	r1, sl
 800152c:	4638      	mov	r0, r7
 800152e:	9203      	str	r2, [sp, #12]
 8001530:	47c8      	blx	r9
 8001532:	2800      	cmp	r0, #0
 8001534:	f2c0 8222 	blt.w	800197c <cbvprintf+0xbb4>
 8001538:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
 800153a:	4647      	mov	r7, r8
						OUTC(sign);
 800153c:	3601      	adds	r6, #1
					pad = '0';
 800153e:	f04f 0830 	mov.w	r8, #48	; 0x30
 8001542:	445e      	add	r6, fp
 8001544:	465b      	mov	r3, fp
				while (width-- > 0) {
 8001546:	2b00      	cmp	r3, #0
 8001548:	eba6 000b 	sub.w	r0, r6, fp
 800154c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8001550:	f300 820c 	bgt.w	800196c <cbvprintf+0xba4>
 8001554:	4606      	mov	r6, r0
		if (sign != 0) {
 8001556:	b147      	cbz	r7, 800156a <cbvprintf+0x7a2>
			OUTC(sign);
 8001558:	4651      	mov	r1, sl
 800155a:	4638      	mov	r0, r7
 800155c:	9203      	str	r2, [sp, #12]
 800155e:	47c8      	blx	r9
 8001560:	2800      	cmp	r0, #0
 8001562:	f2c0 820b 	blt.w	800197c <cbvprintf+0xbb4>
 8001566:	9a03      	ldr	r2, [sp, #12]
 8001568:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 800156a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800156e:	0659      	lsls	r1, r3, #25
 8001570:	f140 8265 	bpl.w	8001a3e <cbvprintf+0xc76>
			if (conv->specifier_a) {
 8001574:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8001578:	2b00      	cmp	r3, #0
 800157a:	eba6 0602 	sub.w	r6, r6, r2
 800157e:	f280 8219 	bge.w	80019b4 <cbvprintf+0xbec>
 8001582:	4617      	mov	r7, r2
 8001584:	46b8      	mov	r8, r7
 8001586:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
 8001588:	f817 0b01 	ldrb.w	r0, [r7], #1
 800158c:	2870      	cmp	r0, #112	; 0x70
 800158e:	f040 8205 	bne.w	800199c <cbvprintf+0xbd4>
			while (pad_len-- > 0) {
 8001592:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001594:	461e      	mov	r6, r3
 8001596:	441f      	add	r7, r3
 8001598:	1bbb      	subs	r3, r7, r6
 800159a:	2b00      	cmp	r3, #0
 800159c:	f300 8248 	bgt.w	8001a30 <cbvprintf+0xc68>
			OUTS(cp, bpe);
 80015a0:	462b      	mov	r3, r5
 80015a2:	4642      	mov	r2, r8
			OUTS(bps, bpe);
 80015a4:	4651      	mov	r1, sl
 80015a6:	4648      	mov	r0, r9
 80015a8:	f005 fb50 	bl	8006c4c <outs>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	f2c0 81e5 	blt.w	800197c <cbvprintf+0xbb4>
 80015b2:	4430      	add	r0, r6
			while (pad_len-- > 0) {
 80015b4:	4606      	mov	r6, r0
 80015b6:	4483      	add	fp, r0
		while (width > 0) {
 80015b8:	ebab 0306 	sub.w	r3, fp, r6
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f77f ae4e 	ble.w	800125e <cbvprintf+0x496>
			OUTC(' ');
 80015c2:	4651      	mov	r1, sl
 80015c4:	2020      	movs	r0, #32
 80015c6:	47c8      	blx	r9
 80015c8:	2800      	cmp	r0, #0
 80015ca:	f2c0 81d7 	blt.w	800197c <cbvprintf+0xbb4>
 80015ce:	3601      	adds	r6, #1
			--width;
 80015d0:	e7f2      	b.n	80015b8 <cbvprintf+0x7f0>
			if (conv->flag_plus) {
 80015d2:	073d      	lsls	r5, r7, #28
 80015d4:	d42b      	bmi.n	800162e <cbvprintf+0x866>
				sign = ' ';
 80015d6:	f017 0710 	ands.w	r7, r7, #16
 80015da:	bf18      	it	ne
 80015dc:	2720      	movne	r7, #32
			sint = value->sint;
 80015de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da05      	bge.n	80015f2 <cbvprintf+0x82a>
				value->uint = (uint_value_type)-sint;
 80015e6:	4252      	negs	r2, r2
 80015e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80015ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
 80015f0:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 80015f2:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	aa0e      	add	r2, sp, #56	; 0x38
 80015fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80015fe:	ab13      	add	r3, sp, #76	; 0x4c
 8001600:	f001 f8c6 	bl	8002790 <encode_uint>
 8001604:	4602      	mov	r2, r0
			if (precision >= 0) {
 8001606:	f1b8 0f00 	cmp.w	r8, #0
 800160a:	f10d 0565 	add.w	r5, sp, #101	; 0x65
 800160e:	f6ff af5e 	blt.w	80014ce <cbvprintf+0x706>
				conv->flag_zero = false;
 8001612:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
 8001616:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
 8001618:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
 800161c:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 800161e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
 8001622:	f67f af54 	bls.w	80014ce <cbvprintf+0x706>
					conv->pad0_value = precision - (int)len;
 8001626:	eba8 0303 	sub.w	r3, r8, r3
 800162a:	930f      	str	r3, [sp, #60]	; 0x3c
 800162c:	e74f      	b.n	80014ce <cbvprintf+0x706>
				sign = '+';
 800162e:	272b      	movs	r7, #43	; 0x2b
 8001630:	e7d5      	b.n	80015de <cbvprintf+0x816>
		switch (conv->specifier) {
 8001632:	2700      	movs	r7, #0
 8001634:	e7dd      	b.n	80015f2 <cbvprintf+0x82a>
			if (value->ptr != NULL) {
 8001636:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001638:	2800      	cmp	r0, #0
 800163a:	f000 818f 	beq.w	800195c <cbvprintf+0xb94>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 800163e:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	aa0e      	add	r2, sp, #56	; 0x38
 8001646:	ab13      	add	r3, sp, #76	; 0x4c
 8001648:	2100      	movs	r1, #0
 800164a:	f001 f8a1 	bl	8002790 <encode_uint>
				conv->altform_0c = true;
 800164e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8001652:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8001656:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 800165a:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 800165e:	4602      	mov	r2, r0
				conv->altform_0c = true;
 8001660:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
 8001664:	2700      	movs	r7, #0
				goto prec_int_pad0;
 8001666:	e7ce      	b.n	8001606 <cbvprintf+0x83e>
				store_count(conv, value->ptr, count);
 8001668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
 800166a:	2907      	cmp	r1, #7
 800166c:	f63f adf7 	bhi.w	800125e <cbvprintf+0x496>
 8001670:	e8df f001 	tbb	[pc, r1]
 8001674:	0c06040c 	.word	0x0c06040c
 8001678:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 800167c:	701e      	strb	r6, [r3, #0]
		break;
 800167e:	e5ee      	b.n	800125e <cbvprintf+0x496>
		*(short *)dp = (short)count;
 8001680:	801e      	strh	r6, [r3, #0]
		break;
 8001682:	e5ec      	b.n	800125e <cbvprintf+0x496>
		*(intmax_t *)dp = (intmax_t)count;
 8001684:	17f2      	asrs	r2, r6, #31
 8001686:	e9c3 6200 	strd	r6, r2, [r3]
		break;
 800168a:	e5e8      	b.n	800125e <cbvprintf+0x496>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 800168c:	601e      	str	r6, [r3, #0]
		break;
 800168e:	e5e6      	b.n	800125e <cbvprintf+0x496>
		*sign = '-';
 8001690:	272d      	movs	r7, #45	; 0x2d
 8001692:	e64d      	b.n	8001330 <cbvprintf+0x568>
		*sign = '+';
 8001694:	272b      	movs	r7, #43	; 0x2b
 8001696:	e64b      	b.n	8001330 <cbvprintf+0x568>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8001698:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800169c:	4285      	cmp	r5, r0
 800169e:	d131      	bne.n	8001704 <cbvprintf+0x93c>
			if (isupper((int)c)) {
 80016a0:	3201      	adds	r2, #1
 80016a2:	48b9      	ldr	r0, [pc, #740]	; (8001988 <cbvprintf+0xbc0>)
 80016a4:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
 80016a6:	430b      	orrs	r3, r1
 80016a8:	5c12      	ldrb	r2, [r2, r0]
 80016aa:	f002 0203 	and.w	r2, r2, #3
 80016ae:	d11b      	bne.n	80016e8 <cbvprintf+0x920>
			if (isupper((int)c)) {
 80016b0:	2a01      	cmp	r2, #1
 80016b2:	d111      	bne.n	80016d8 <cbvprintf+0x910>
				*buf++ = 'I';
 80016b4:	2349      	movs	r3, #73	; 0x49
 80016b6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
 80016ba:	234e      	movs	r3, #78	; 0x4e
 80016bc:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
 80016c0:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
 80016c2:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
 80016c6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80016ca:	f36f 1386 	bfc	r3, #6, #1
 80016ce:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
 80016d2:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
 80016d6:	e707      	b.n	80014e8 <cbvprintf+0x720>
				*buf++ = 'i';
 80016d8:	2369      	movs	r3, #105	; 0x69
 80016da:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 80016de:	236e      	movs	r3, #110	; 0x6e
 80016e0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
 80016e4:	2366      	movs	r3, #102	; 0x66
 80016e6:	e7ec      	b.n	80016c2 <cbvprintf+0x8fa>
			if (isupper((int)c)) {
 80016e8:	2a01      	cmp	r2, #1
				*buf++ = 'N';
 80016ea:	bf07      	ittee	eq
 80016ec:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
 80016ee:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
 80016f0:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
 80016f2:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
 80016f4:	bf0c      	ite	eq
 80016f6:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 80016fa:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
 80016fe:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 8001702:	e7de      	b.n	80016c2 <cbvprintf+0x8fa>
	bool is_subnormal = (expo == 0) && (fract != 0);
 8001704:	2000      	movs	r0, #0
 8001706:	e621      	b.n	800134c <cbvprintf+0x584>
				expo--;
 8001708:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 800170a:	1849      	adds	r1, r1, r1
 800170c:	415b      	adcs	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	dafa      	bge.n	8001708 <cbvprintf+0x940>
 8001712:	e9cd 1308 	strd	r1, r3, [sp, #32]
 8001716:	e62d      	b.n	8001374 <cbvprintf+0x5ac>
			fract >>= 1;
 8001718:	0840      	lsrs	r0, r0, #1
 800171a:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 800171e:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8001720:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
 8001724:	46ac      	mov	ip, r5
			expo++;
 8001726:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 800172a:	d2f5      	bcs.n	8001718 <cbvprintf+0x950>
		fract *= 5U;
 800172c:	fb0e f501 	mul.w	r5, lr, r1
 8001730:	fba0 010e 	umull	r0, r1, r0, lr
 8001734:	4429      	add	r1, r5
		decexp--;
 8001736:	3b01      	subs	r3, #1
		expo++;
 8001738:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
 800173c:	f04f 0c01 	mov.w	ip, #1
 8001740:	e624      	b.n	800138c <cbvprintf+0x5c4>
		fract += 2;
 8001742:	3002      	adds	r0, #2
 8001744:	f141 0100 	adc.w	r1, r1, #0
 8001748:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
 800174c:	a808      	add	r0, sp, #32
 800174e:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8001752:	f005 fa4c 	bl	8006bee <_ldiv5>
		decexp++;
 8001756:	9b04      	ldr	r3, [sp, #16]
 8001758:	9a03      	ldr	r2, [sp, #12]
 800175a:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
 800175e:	3d01      	subs	r5, #1
		decexp++;
 8001760:	3301      	adds	r3, #1
			fract <<= 1;
 8001762:	1849      	adds	r1, r1, r1
 8001764:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
 8001766:	2800      	cmp	r0, #0
			expo--;
 8001768:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
 800176c:	daf9      	bge.n	8001762 <cbvprintf+0x99a>
 800176e:	e9cd 1008 	strd	r1, r0, [sp, #32]
 8001772:	e614      	b.n	800139e <cbvprintf+0x5d6>
 8001774:	2300      	movs	r3, #0
 8001776:	461d      	mov	r5, r3
 8001778:	e616      	b.n	80013a8 <cbvprintf+0x5e0>
			precision -= decexp;
 800177a:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
 800177e:	2266      	movs	r2, #102	; 0x66
 8001780:	e637      	b.n	80013f2 <cbvprintf+0x62a>
	bool prune_zero = false;
 8001782:	2100      	movs	r1, #0
 8001784:	e63f      	b.n	8001406 <cbvprintf+0x63e>
		decimals = precision + 1;
 8001786:	f108 0101 	add.w	r1, r8, #1
	if (decimals > 16) {
 800178a:	2910      	cmp	r1, #16
 800178c:	bfa8      	it	ge
 800178e:	2110      	movge	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
 8001790:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8001794:	2010      	movs	r0, #16
 8001796:	9007      	str	r0, [sp, #28]
	while (decimals--) {
 8001798:	460d      	mov	r5, r1
	*v >>= 1;
 800179a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	while (decimals--) {
 800179e:	b9a5      	cbnz	r5, 80017ca <cbvprintf+0xa02>
	fract += round;
 80017a0:	9d08      	ldr	r5, [sp, #32]
 80017a2:	1940      	adds	r0, r0, r5
 80017a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80017a6:	eb41 0105 	adc.w	r1, r1, r5
	if (fract >= BIT64(60)) {
 80017aa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80017ae:	d21b      	bcs.n	80017e8 <cbvprintf+0xa20>
	fract += round;
 80017b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
	if (c == 'f') {
 80017b4:	2a66      	cmp	r2, #102	; 0x66
 80017b6:	f040 8099 	bne.w	80018ec <cbvprintf+0xb24>
		if (decexp > 0) {
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	dc23      	bgt.n	8001806 <cbvprintf+0xa3e>
			*buf++ = '0';
 80017be:	2130      	movs	r1, #48	; 0x30
 80017c0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 80017c4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 80017c8:	e02f      	b.n	800182a <cbvprintf+0xa62>
	*v >>= 1;
 80017ca:	0840      	lsrs	r0, r0, #1
 80017cc:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 80017d0:	0849      	lsrs	r1, r1, #1
 80017d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	_ldiv5(v);
 80017d6:	a80a      	add	r0, sp, #40	; 0x28
 80017d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017dc:	3d01      	subs	r5, #1
 80017de:	f005 fa06 	bl	8006bee <_ldiv5>
 80017e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
 80017e6:	e7d8      	b.n	800179a <cbvprintf+0x9d2>
	*v >>= 1;
 80017e8:	0840      	lsrs	r0, r0, #1
 80017ea:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 80017ee:	0849      	lsrs	r1, r1, #1
 80017f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
	_ldiv5(v);
 80017f4:	a808      	add	r0, sp, #32
 80017f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017fa:	f005 f9f8 	bl	8006bee <_ldiv5>
		decexp++;
 80017fe:	9b05      	ldr	r3, [sp, #20]
 8001800:	9a04      	ldr	r2, [sp, #16]
 8001802:	3301      	adds	r3, #1
 8001804:	e7d6      	b.n	80017b4 <cbvprintf+0x9ec>
	char *buf = bps;
 8001806:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
 8001808:	9907      	ldr	r1, [sp, #28]
 800180a:	2900      	cmp	r1, #0
 800180c:	dd0b      	ble.n	8001826 <cbvprintf+0xa5e>
				*buf++ = _get_digit(&fract, &digit_count);
 800180e:	a907      	add	r1, sp, #28
 8001810:	a808      	add	r0, sp, #32
 8001812:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001816:	f005 fa02 	bl	8006c1e <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 800181a:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
 800181c:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
 8001820:	3b01      	subs	r3, #1
 8001822:	9a04      	ldr	r2, [sp, #16]
 8001824:	d1f0      	bne.n	8001808 <cbvprintf+0xa40>
			conv->pad0_value = decexp;
 8001826:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
 8001828:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
 800182a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800182e:	0689      	lsls	r1, r1, #26
 8001830:	d402      	bmi.n	8001838 <cbvprintf+0xa70>
 8001832:	f1b8 0f00 	cmp.w	r8, #0
 8001836:	dd1d      	ble.n	8001874 <cbvprintf+0xaac>
			*buf++ = '.';
 8001838:	212e      	movs	r1, #46	; 0x2e
 800183a:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
 800183e:	b19b      	cbz	r3, 8001868 <cbvprintf+0xaa0>
 8001840:	f1b8 0f00 	cmp.w	r8, #0
 8001844:	dd16      	ble.n	8001874 <cbvprintf+0xaac>
			conv->pad0_value = -decexp;
 8001846:	4259      	negs	r1, r3
 8001848:	4541      	cmp	r1, r8
 800184a:	bfa8      	it	ge
 800184c:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
 800184e:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
 8001852:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
 8001854:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
 8001856:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
 800185a:	bfd4      	ite	le
 800185c:	2100      	movle	r1, #0
 800185e:	2101      	movgt	r1, #1
 8001860:	f361 1045 	bfi	r0, r1, #5, #1
 8001864:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
 8001868:	f1b8 0f00 	cmp.w	r8, #0
 800186c:	dd02      	ble.n	8001874 <cbvprintf+0xaac>
 800186e:	9907      	ldr	r1, [sp, #28]
 8001870:	2900      	cmp	r1, #0
 8001872:	dc56      	bgt.n	8001922 <cbvprintf+0xb5a>
	if (prune_zero) {
 8001874:	9903      	ldr	r1, [sp, #12]
 8001876:	2900      	cmp	r1, #0
 8001878:	d163      	bne.n	8001942 <cbvprintf+0xb7a>
	conv->pad0_pre_exp = precision;
 800187a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
 800187e:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8001882:	2945      	cmp	r1, #69	; 0x45
 8001884:	d121      	bne.n	80018ca <cbvprintf+0xb02>
		if (decexp < 0) {
 8001886:	2b00      	cmp	r3, #0
		*buf++ = c;
 8001888:	4629      	mov	r1, r5
			decexp = -decexp;
 800188a:	bfb8      	it	lt
 800188c:	425b      	neglt	r3, r3
		*buf++ = c;
 800188e:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
 8001892:	bfb4      	ite	lt
 8001894:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
 8001896:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
 8001898:	2b63      	cmp	r3, #99	; 0x63
 800189a:	706a      	strb	r2, [r5, #1]
 800189c:	dd09      	ble.n	80018b2 <cbvprintf+0xaea>
			*buf++ = (decexp / 100) + '0';
 800189e:	2064      	movs	r0, #100	; 0x64
 80018a0:	fb93 f2f0 	sdiv	r2, r3, r0
 80018a4:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 80018a8:	1ce9      	adds	r1, r5, #3
 80018aa:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
 80018ae:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 80018b2:	200a      	movs	r0, #10
 80018b4:	460d      	mov	r5, r1
 80018b6:	fb93 f2f0 	sdiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
 80018ba:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 80018be:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 80018c2:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 80018c4:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
 80018c8:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
 80018ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	dc43      	bgt.n	8001958 <cbvprintf+0xb90>
 80018d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bfd4      	ite	le
 80018d6:	2300      	movle	r3, #0
 80018d8:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 80018da:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 80018de:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 80018e2:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 80018e4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
 80018e8:	702b      	strb	r3, [r5, #0]
	return bps;
 80018ea:	e5fd      	b.n	80014e8 <cbvprintf+0x720>
		*buf = _get_digit(&fract, &digit_count);
 80018ec:	a907      	add	r1, sp, #28
 80018ee:	a808      	add	r0, sp, #32
 80018f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018f4:	f005 f993 	bl	8006c1e <_get_digit>
		if (*buf++ != '0') {
 80018f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
 80018fc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
 8001900:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
 8001904:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8001906:	bf18      	it	ne
 8001908:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
 800190c:	0688      	lsls	r0, r1, #26
 800190e:	d402      	bmi.n	8001916 <cbvprintf+0xb4e>
 8001910:	f1b8 0f00 	cmp.w	r8, #0
 8001914:	dd12      	ble.n	800193c <cbvprintf+0xb74>
			*buf++ = '.';
 8001916:	212e      	movs	r1, #46	; 0x2e
 8001918:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
 800191c:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
 8001920:	e7a2      	b.n	8001868 <cbvprintf+0xaa0>
		*buf++ = _get_digit(&fract, &digit_count);
 8001922:	a907      	add	r1, sp, #28
 8001924:	a808      	add	r0, sp, #32
 8001926:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800192a:	f005 f978 	bl	8006c1e <_get_digit>
		precision--;
 800192e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8001932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
 8001936:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
 800193a:	e795      	b.n	8001868 <cbvprintf+0xaa0>
		if (*buf++ != '0') {
 800193c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8001940:	e798      	b.n	8001874 <cbvprintf+0xaac>
		conv->pad0_pre_exp = 0;
 8001942:	2100      	movs	r1, #0
 8001944:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
 8001946:	4628      	mov	r0, r5
 8001948:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800194c:	2930      	cmp	r1, #48	; 0x30
 800194e:	d0fa      	beq.n	8001946 <cbvprintf+0xb7e>
		if (*buf != '.') {
 8001950:	292e      	cmp	r1, #46	; 0x2e
 8001952:	bf18      	it	ne
 8001954:	4605      	movne	r5, r0
 8001956:	e792      	b.n	800187e <cbvprintf+0xab6>
		|| (conv->pad0_pre_exp > 0);
 8001958:	2301      	movs	r3, #1
 800195a:	e7be      	b.n	80018da <cbvprintf+0xb12>
			bpe = bps + 5;
 800195c:	4d0b      	ldr	r5, [pc, #44]	; (800198c <cbvprintf+0xbc4>)
		char sign = 0;
 800195e:	4607      	mov	r7, r0
			bps = "(nil)";
 8001960:	1f6a      	subs	r2, r5, #5
 8001962:	e5c2      	b.n	80014ea <cbvprintf+0x722>
		} else if (conv->altform_0) {
 8001964:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
 8001966:	bf48      	it	mi
 8001968:	3301      	addmi	r3, #1
 800196a:	e5c7      	b.n	80014fc <cbvprintf+0x734>
					OUTC(pad);
 800196c:	4651      	mov	r1, sl
 800196e:	4640      	mov	r0, r8
 8001970:	9203      	str	r2, [sp, #12]
 8001972:	47c8      	blx	r9
 8001974:	2800      	cmp	r0, #0
 8001976:	9a03      	ldr	r2, [sp, #12]
 8001978:	f6bf ade4 	bge.w	8001544 <cbvprintf+0x77c>
#undef OUTS
#undef OUTC
}
 800197c:	b01b      	add	sp, #108	; 0x6c
 800197e:	ecbd 8b02 	vpop	{d8}
 8001982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001986:	bf00      	nop
 8001988:	0800a252 	.word	0x0800a252
 800198c:	08009983 	.word	0x08009983
				char pad = ' ';
 8001990:	f04f 0820 	mov.w	r8, #32
 8001994:	e5d5      	b.n	8001542 <cbvprintf+0x77a>
					pad = '0';
 8001996:	f04f 0830 	mov.w	r8, #48	; 0x30
 800199a:	e5d2      	b.n	8001542 <cbvprintf+0x77a>
					OUTC(*cp++);
 800199c:	4651      	mov	r1, sl
 800199e:	47c8      	blx	r9
 80019a0:	2800      	cmp	r0, #0
 80019a2:	f6bf adef 	bge.w	8001584 <cbvprintf+0x7bc>
 80019a6:	e7e9      	b.n	800197c <cbvprintf+0xbb4>
					OUTC(*cp++);
 80019a8:	4651      	mov	r1, sl
 80019aa:	9203      	str	r2, [sp, #12]
 80019ac:	47c8      	blx	r9
 80019ae:	2800      	cmp	r0, #0
 80019b0:	9a03      	ldr	r2, [sp, #12]
 80019b2:	dbe3      	blt.n	800197c <cbvprintf+0xbb4>
				while (isdigit((int)*cp)) {
 80019b4:	7810      	ldrb	r0, [r2, #0]
 80019b6:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <cbvprintf+0xccc>)
 80019b8:	5cc3      	ldrb	r3, [r0, r3]
 80019ba:	075b      	lsls	r3, r3, #29
 80019bc:	4617      	mov	r7, r2
 80019be:	eb06 0802 	add.w	r8, r6, r2
 80019c2:	f102 0201 	add.w	r2, r2, #1
 80019c6:	d4ef      	bmi.n	80019a8 <cbvprintf+0xbe0>
				if (!conv->pad_postdp) {
 80019c8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
 80019cc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
 80019ce:	0699      	lsls	r1, r3, #26
 80019d0:	d407      	bmi.n	80019e2 <cbvprintf+0xc1a>
 80019d2:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
 80019d4:	2e00      	cmp	r6, #0
 80019d6:	eba8 0206 	sub.w	r2, r8, r6
 80019da:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80019de:	dc0f      	bgt.n	8001a00 <cbvprintf+0xc38>
 80019e0:	4690      	mov	r8, r2
				if (*cp == '.') {
 80019e2:	7838      	ldrb	r0, [r7, #0]
 80019e4:	282e      	cmp	r0, #46	; 0x2e
 80019e6:	d108      	bne.n	80019fa <cbvprintf+0xc32>
					OUTC(*cp++);
 80019e8:	4651      	mov	r1, sl
 80019ea:	47c8      	blx	r9
						OUTC('0');
 80019ec:	2800      	cmp	r0, #0
 80019ee:	dbc5      	blt.n	800197c <cbvprintf+0xbb4>
					while (pad_len-- > 0) {
 80019f0:	2e00      	cmp	r6, #0
						OUTC('0');
 80019f2:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
 80019f6:	dc09      	bgt.n	8001a0c <cbvprintf+0xc44>
					OUTC(*cp++);
 80019f8:	3701      	adds	r7, #1
 80019fa:	eba8 0607 	sub.w	r6, r8, r7
 80019fe:	e00e      	b.n	8001a1e <cbvprintf+0xc56>
						OUTC('0');
 8001a00:	4651      	mov	r1, sl
 8001a02:	2030      	movs	r0, #48	; 0x30
 8001a04:	47c8      	blx	r9
 8001a06:	2800      	cmp	r0, #0
 8001a08:	dae4      	bge.n	80019d4 <cbvprintf+0xc0c>
 8001a0a:	e7b7      	b.n	800197c <cbvprintf+0xbb4>
						OUTC('0');
 8001a0c:	4651      	mov	r1, sl
 8001a0e:	2030      	movs	r0, #48	; 0x30
 8001a10:	47c8      	blx	r9
 8001a12:	3e01      	subs	r6, #1
 8001a14:	e7ea      	b.n	80019ec <cbvprintf+0xc24>
					OUTC(*cp++);
 8001a16:	4651      	mov	r1, sl
 8001a18:	47c8      	blx	r9
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	dbae      	blt.n	800197c <cbvprintf+0xbb4>
				while (isdigit((int)*cp)) {
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <cbvprintf+0xccc>)
 8001a20:	46b8      	mov	r8, r7
 8001a22:	19f3      	adds	r3, r6, r7
 8001a24:	f817 0b01 	ldrb.w	r0, [r7], #1
 8001a28:	5c12      	ldrb	r2, [r2, r0]
 8001a2a:	0752      	lsls	r2, r2, #29
 8001a2c:	d4f3      	bmi.n	8001a16 <cbvprintf+0xc4e>
 8001a2e:	e5b0      	b.n	8001592 <cbvprintf+0x7ca>
				OUTC('0');
 8001a30:	4651      	mov	r1, sl
 8001a32:	2030      	movs	r0, #48	; 0x30
 8001a34:	47c8      	blx	r9
 8001a36:	2800      	cmp	r0, #0
 8001a38:	dba0      	blt.n	800197c <cbvprintf+0xbb4>
 8001a3a:	3601      	adds	r6, #1
 8001a3c:	e5ac      	b.n	8001598 <cbvprintf+0x7d0>
			if (conv->altform_0c | conv->altform_0) {
 8001a3e:	06d8      	lsls	r0, r3, #27
 8001a40:	d401      	bmi.n	8001a46 <cbvprintf+0xc7e>
 8001a42:	0719      	lsls	r1, r3, #28
 8001a44:	d507      	bpl.n	8001a56 <cbvprintf+0xc8e>
				OUTC('0');
 8001a46:	4651      	mov	r1, sl
 8001a48:	2030      	movs	r0, #48	; 0x30
 8001a4a:	9203      	str	r2, [sp, #12]
 8001a4c:	47c8      	blx	r9
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	db94      	blt.n	800197c <cbvprintf+0xbb4>
 8001a52:	9a03      	ldr	r2, [sp, #12]
 8001a54:	3601      	adds	r6, #1
			if (conv->altform_0c) {
 8001a56:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001a5a:	06db      	lsls	r3, r3, #27
 8001a5c:	d508      	bpl.n	8001a70 <cbvprintf+0xca8>
				OUTC(conv->specifier);
 8001a5e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8001a62:	9203      	str	r2, [sp, #12]
 8001a64:	4651      	mov	r1, sl
 8001a66:	47c8      	blx	r9
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	db87      	blt.n	800197c <cbvprintf+0xbb4>
 8001a6c:	9a03      	ldr	r2, [sp, #12]
 8001a6e:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
 8001a70:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8001a72:	4437      	add	r7, r6
 8001a74:	1bbb      	subs	r3, r7, r6
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	dc01      	bgt.n	8001a7e <cbvprintf+0xcb6>
			OUTS(bps, bpe);
 8001a7a:	462b      	mov	r3, r5
 8001a7c:	e592      	b.n	80015a4 <cbvprintf+0x7dc>
				OUTC('0');
 8001a7e:	4651      	mov	r1, sl
 8001a80:	2030      	movs	r0, #48	; 0x30
 8001a82:	9203      	str	r2, [sp, #12]
 8001a84:	47c8      	blx	r9
 8001a86:	2800      	cmp	r0, #0
 8001a88:	f6ff af78 	blt.w	800197c <cbvprintf+0xbb4>
 8001a8c:	9a03      	ldr	r2, [sp, #12]
 8001a8e:	3601      	adds	r6, #1
 8001a90:	e7f0      	b.n	8001a74 <cbvprintf+0xcac>
 8001a92:	bf00      	nop
 8001a94:	0800a253 	.word	0x0800a253

08001a98 <mavlink_sha256_update>:
    G += GG;
    H += HH;
}

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8001a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *p = (const unsigned char *)v;
    uint32_t old_sz = m->sz[0];
 8001a9c:	6805      	ldr	r5, [r0, #0]
    uint32_t offset;

    m->sz[0] += len * 8;
 8001a9e:	00d3      	lsls	r3, r2, #3
 8001aa0:	195b      	adds	r3, r3, r5
 8001aa2:	6003      	str	r3, [r0, #0]
    if (m->sz[0] < old_sz)
	++m->sz[1];
 8001aa4:	bf28      	it	cs
 8001aa6:	6843      	ldrcs	r3, [r0, #4]
{
 8001aa8:	b0df      	sub	sp, #380	; 0x17c
	++m->sz[1];
 8001aaa:	bf24      	itt	cs
 8001aac:	3301      	addcs	r3, #1
 8001aae:	6043      	strcs	r3, [r0, #4]
    while(len > 0){
	uint32_t l = 64 - offset;
        if (len < l) {
            l = len;
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8001ab0:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001ab4:	930c      	str	r3, [sp, #48]	; 0x30
 8001ab6:	f100 0340 	add.w	r3, r0, #64	; 0x40
{
 8001aba:	4604      	mov	r4, r0
 8001abc:	4689      	mov	r9, r1
 8001abe:	4616      	mov	r6, r2
    offset = (old_sz / 8) % 64;
 8001ac0:	f3c5 05c5 	ubfx	r5, r5, #3, #6
 8001ac4:	930d      	str	r3, [sp, #52]	; 0x34
    while(len > 0){
 8001ac6:	2e00      	cmp	r6, #0
 8001ac8:	f000 80ba 	beq.w	8001c40 <mavlink_sha256_update+0x1a8>
	uint32_t l = 64 - offset;
 8001acc:	f1c5 0740 	rsb	r7, r5, #64	; 0x40
        if (len < l) {
 8001ad0:	42b7      	cmp	r7, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8001ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ad4:	bf28      	it	cs
 8001ad6:	4637      	movcs	r7, r6
 8001ad8:	4649      	mov	r1, r9
 8001ada:	1958      	adds	r0, r3, r5
 8001adc:	463a      	mov	r2, r7
	offset += l;
 8001ade:	443d      	add	r5, r7
	memcpy(m->u.save_bytes + offset, p, l);
 8001ae0:	f006 fd2f 	bl	8008542 <memcpy>
	p += l;
	len -= l;
	if(offset == 64){
 8001ae4:	2d40      	cmp	r5, #64	; 0x40
	p += l;
 8001ae6:	44b9      	add	r9, r7
	len -= l;
 8001ae8:	eba6 0607 	sub.w	r6, r6, r7
	if(offset == 64){
 8001aec:	d1eb      	bne.n	8001ac6 <mavlink_sha256_update+0x2e>
 8001aee:	ab0e      	add	r3, sp, #56	; 0x38
 8001af0:	4622      	mov	r2, r4
 8001af2:	4619      	mov	r1, r3
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
	    for (i = 0; i < 16; i++){
                const uint8_t *p1 = (const uint8_t *)&u[i];
                uint8_t *p2 = (uint8_t *)&current[i];
                p2[0] = p1[3];
 8001af4:	f892 002b 	ldrb.w	r0, [r2, #43]	; 0x2b
 8001af8:	7008      	strb	r0, [r1, #0]
                p2[1] = p1[2];
 8001afa:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
 8001afe:	7048      	strb	r0, [r1, #1]
                p2[2] = p1[1];
 8001b00:	f892 0029 	ldrb.w	r0, [r2, #41]	; 0x29
 8001b04:	7088      	strb	r0, [r1, #2]
                p2[3] = p1[0];
 8001b06:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8001b0a:	70c8      	strb	r0, [r1, #3]
	    for (i = 0; i < 16; i++){
 8001b0c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001b0e:	3204      	adds	r2, #4
 8001b10:	4290      	cmp	r0, r2
 8001b12:	f101 0104 	add.w	r1, r1, #4
 8001b16:	d1ed      	bne.n	8001af4 <mavlink_sha256_update+0x5c>
    AA = A;
 8001b18:	68a2      	ldr	r2, [r4, #8]
 8001b1a:	9201      	str	r2, [sp, #4]
    BB = B;
 8001b1c:	68e2      	ldr	r2, [r4, #12]
 8001b1e:	9202      	str	r2, [sp, #8]
    CC = C;
 8001b20:	6922      	ldr	r2, [r4, #16]
 8001b22:	9203      	str	r2, [sp, #12]
    DD = D;
 8001b24:	6962      	ldr	r2, [r4, #20]
 8001b26:	9204      	str	r2, [sp, #16]
    EE = E;
 8001b28:	69a2      	ldr	r2, [r4, #24]
 8001b2a:	9205      	str	r2, [sp, #20]
    FF = F;
 8001b2c:	69e2      	ldr	r2, [r4, #28]
 8001b2e:	9206      	str	r2, [sp, #24]
    GG = G;
 8001b30:	6a22      	ldr	r2, [r4, #32]
 8001b32:	9207      	str	r2, [sp, #28]
    HH = H;
 8001b34:	a91e      	add	r1, sp, #120	; 0x78
 8001b36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b38:	9208      	str	r2, [sp, #32]
 8001b3a:	4608      	mov	r0, r1
    for (i = 0; i < 16; ++i)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	3201      	adds	r2, #1
	data[i] = in[i];
 8001b40:	f853 5b04 	ldr.w	r5, [r3], #4
 8001b44:	f840 5b04 	str.w	r5, [r0], #4
    for (i = 0; i < 16; ++i)
 8001b48:	2a10      	cmp	r2, #16
 8001b4a:	d1f8      	bne.n	8001b3e <mavlink_sha256_update+0xa6>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001b4c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001b4e:	460f      	mov	r7, r1
 8001b50:	ea4f 40f3 	mov.w	r0, r3, ror #19
 8001b54:	ea80 4073 	eor.w	r0, r0, r3, ror #17
 8001b58:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	683f      	ldr	r7, [r7, #0]
 8001b60:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8001b64:	443b      	add	r3, r7
 8001b66:	4418      	add	r0, r3
 8001b68:	ea4f 43b5 	mov.w	r3, r5, ror #18
 8001b6c:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 8001b70:	ea83 03d5 	eor.w	r3, r3, r5, lsr #3
    for (i = 16; i < 64; ++i)
 8001b74:	3201      	adds	r2, #1
	    sigma0(data[i-15]) + data[i - 16];
 8001b76:	4403      	add	r3, r0
    for (i = 16; i < 64; ++i)
 8001b78:	2a40      	cmp	r2, #64	; 0x40
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001b7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8001b7c:	d1e6      	bne.n	8001b4c <mavlink_sha256_update+0xb4>
 8001b7e:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <mavlink_sha256_update+0x1b0>)
 8001b80:	930b      	str	r3, [sp, #44]	; 0x2c
    BB = B;
 8001b82:	e9dd 7202 	ldrd	r7, r2, [sp, #8]
    FF = F;
 8001b86:	e9dd ec06 	ldrd	lr, ip, [sp, #24]
    DD = D;
 8001b8a:	9b04      	ldr	r3, [sp, #16]
    AA = A;
 8001b8c:	9d01      	ldr	r5, [sp, #4]
    HH = H;
 8001b8e:	f8dd b020 	ldr.w	fp, [sp, #32]
    EE = E;
 8001b92:	9805      	ldr	r0, [sp, #20]
    DD = D;
 8001b94:	930a      	str	r3, [sp, #40]	; 0x28
    for (i = 0; i < 64; i++) {
 8001b96:	f04f 0800 	mov.w	r8, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b9c:	f853 1b04 	ldr.w	r1, [r3], #4
 8001ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ba2:	ea4f 23f0 	mov.w	r3, r0, ror #11
 8001ba6:	ea83 13b0 	eor.w	r3, r3, r0, ror #6
 8001baa:	ea83 6a70 	eor.w	sl, r3, r0, ror #25
 8001bae:	ab1e      	add	r3, sp, #120	; 0x78
 8001bb0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8001bb4:	4419      	add	r1, r3
 8001bb6:	eb0a 0301 	add.w	r3, sl, r1
 8001bba:	ea2c 0a00 	bic.w	sl, ip, r0
 8001bbe:	ea00 010e 	and.w	r1, r0, lr
 8001bc2:	ea8a 0101 	eor.w	r1, sl, r1
 8001bc6:	4419      	add	r1, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001bc8:	ea87 0302 	eor.w	r3, r7, r2
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001bcc:	4459      	add	r1, fp
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001bce:	402b      	ands	r3, r5
 8001bd0:	ea4f 3a75 	mov.w	sl, r5, ror #13
 8001bd4:	ea07 0b02 	and.w	fp, r7, r2
 8001bd8:	ea83 0b0b 	eor.w	fp, r3, fp
 8001bdc:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
	EE = DD + T1;
 8001be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001be2:	920a      	str	r2, [sp, #40]	; 0x28
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001be4:	ea8a 5ab5 	eor.w	sl, sl, r5, ror #22
    for (i = 0; i < 64; i++) {
 8001be8:	f108 0801 	add.w	r8, r8, #1
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001bec:	44da      	add	sl, fp
	EE = DD + T1;
 8001bee:	440b      	add	r3, r1
    for (i = 0; i < 64; i++) {
 8001bf0:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
	EE = DD + T1;
 8001bf4:	9309      	str	r3, [sp, #36]	; 0x24
	AA = T1 + T2;
 8001bf6:	4451      	add	r1, sl
    for (i = 0; i < 64; i++) {
 8001bf8:	46e3      	mov	fp, ip
 8001bfa:	d11a      	bne.n	8001c32 <mavlink_sha256_update+0x19a>
    A += AA;
 8001bfc:	9b01      	ldr	r3, [sp, #4]
 8001bfe:	440b      	add	r3, r1
 8001c00:	60a3      	str	r3, [r4, #8]
    B += BB;
 8001c02:	9b02      	ldr	r3, [sp, #8]
 8001c04:	442b      	add	r3, r5
 8001c06:	60e3      	str	r3, [r4, #12]
    C += CC;
 8001c08:	9b03      	ldr	r3, [sp, #12]
 8001c0a:	443b      	add	r3, r7
 8001c0c:	6123      	str	r3, [r4, #16]
    D += DD;
 8001c0e:	9b04      	ldr	r3, [sp, #16]
 8001c10:	4413      	add	r3, r2
 8001c12:	6163      	str	r3, [r4, #20]
    E += EE;
 8001c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c16:	9b05      	ldr	r3, [sp, #20]
 8001c18:	4413      	add	r3, r2
 8001c1a:	61a3      	str	r3, [r4, #24]
    F += FF;
 8001c1c:	9b06      	ldr	r3, [sp, #24]
 8001c1e:	4403      	add	r3, r0
 8001c20:	61e3      	str	r3, [r4, #28]
    G += GG;
 8001c22:	9b07      	ldr	r3, [sp, #28]
 8001c24:	4473      	add	r3, lr
 8001c26:	6223      	str	r3, [r4, #32]
    H += HH;
 8001c28:	9b08      	ldr	r3, [sp, #32]
 8001c2a:	4463      	add	r3, ip
 8001c2c:	6263      	str	r3, [r4, #36]	; 0x24
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
 8001c2e:	2500      	movs	r5, #0
 8001c30:	e749      	b.n	8001ac6 <mavlink_sha256_update+0x2e>
 8001c32:	463a      	mov	r2, r7
 8001c34:	46f4      	mov	ip, lr
 8001c36:	462f      	mov	r7, r5
 8001c38:	4686      	mov	lr, r0
	AA = T1 + T2;
 8001c3a:	460d      	mov	r5, r1
	EE = DD + T1;
 8001c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c3e:	e7ac      	b.n	8001b9a <mavlink_sha256_update+0x102>
	}
    }
}
 8001c40:	b05f      	add	sp, #380	; 0x17c
 8001c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c46:	bf00      	nop
 8001c48:	08008ab8 	.word	0x08008ab8

08001c4c <mavlink_finalize_message_buffer.constprop.0.isra.0>:
 *
 * @param msg Message to finalize
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
 8001c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001c50:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8001e50 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x204>
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
 8001c54:	4604      	mov	r4, r0
 8001c56:	f899 000c 	ldrb.w	r0, [r9, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001c5a:	f010 0002 	ands.w	r0, r0, #2
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
 8001c5e:	b0a3      	sub	sp, #140	; 0x8c
 8001c60:	4690      	mov	r8, r2
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001c62:	d114      	bne.n	8001c8e <mavlink_finalize_message_buffer.constprop.0.isra.0+0x42>
 8001c64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d05f      	beq.n	8001d2c <mavlink_finalize_message_buffer.constprop.0.isra.0+0xe0>
 8001c6c:	781d      	ldrb	r5, [r3, #0]
 8001c6e:	f005 0501 	and.w	r5, r5, #1
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
		msg->magic = MAVLINK_STX_MAVLINK1;
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
	} else {
		msg->magic = MAVLINK_STX;
 8001c72:	23fd      	movs	r3, #253	; 0xfd
 8001c74:	70a3      	strb	r3, [r4, #2]
	while (length > 1 && payload[length-1] == 0) {
 8001c76:	f104 021e 	add.w	r2, r4, #30
		msg->magic = MAVLINK_STX;
 8001c7a:	2312      	movs	r3, #18
	while (length > 1 && payload[length-1] == 0) {
 8001c7c:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
 8001c80:	b91e      	cbnz	r6, 8001c8a <mavlink_finalize_message_buffer.constprop.0.isra.0+0x3e>
		length--;
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d1f8      	bne.n	8001c7c <mavlink_finalize_message_buffer.constprop.0.isra.0+0x30>
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001c8a:	270a      	movs	r7, #10
 8001c8c:	e004      	b.n	8001c98 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x4c>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001c8e:	23fe      	movs	r3, #254	; 0xfe
 8001c90:	70a3      	strb	r3, [r4, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001c92:	2706      	movs	r7, #6
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001c94:	2500      	movs	r5, #0
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001c96:	2312      	movs	r3, #18
 8001c98:	70e3      	strb	r3, [r4, #3]
	msg->sysid = system_id;
	msg->compid = component_id;
 8001c9a:	2319      	movs	r3, #25
	msg->sysid = system_id;
 8001c9c:	71e1      	strb	r1, [r4, #7]
	msg->compid = component_id;
 8001c9e:	7223      	strb	r3, [r4, #8]
	msg->incompat_flags = 0;
	if (signing) {
 8001ca0:	2d00      	cmp	r5, #0
 8001ca2:	d145      	bne.n	8001d30 <mavlink_finalize_message_buffer.constprop.0.isra.0+0xe4>
	msg->incompat_flags = 0;
 8001ca4:	7125      	strb	r5, [r4, #4]
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
	}
	msg->compat_flags = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	7163      	strb	r3, [r4, #5]
	msg->seq = status->current_tx_seq;
 8001caa:	f899 3006 	ldrb.w	r3, [r9, #6]
 8001cae:	71a3      	strb	r3, [r4, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f889 3006 	strb.w	r3, [r9, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001cb6:	78a3      	ldrb	r3, [r4, #2]
 8001cb8:	f88d 3014 	strb.w	r3, [sp, #20]
	buf[1] = msg->len;
 8001cbc:	78e3      	ldrb	r3, [r4, #3]
	if (mavlink1) {
		buf[2] = msg->seq;
		buf[3] = msg->sysid;
		buf[4] = msg->compid;
		buf[5] = msg->msgid & 0xFF;
 8001cbe:	7aa2      	ldrb	r2, [r4, #10]
	buf[1] = msg->len;
 8001cc0:	f88d 3015 	strb.w	r3, [sp, #21]
		buf[5] = msg->msgid & 0xFF;
 8001cc4:	7a63      	ldrb	r3, [r4, #9]
 8001cc6:	79a6      	ldrb	r6, [r4, #6]
 8001cc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ccc:	7ae2      	ldrb	r2, [r4, #11]
 8001cce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8001cd2:	b2db      	uxtb	r3, r3
	if (mavlink1) {
 8001cd4:	b378      	cbz	r0, 8001d36 <mavlink_finalize_message_buffer.constprop.0.isra.0+0xea>
		buf[4] = msg->compid;
 8001cd6:	2219      	movs	r2, #25
		buf[2] = msg->seq;
 8001cd8:	f88d 6016 	strb.w	r6, [sp, #22]
		buf[3] = msg->sysid;
 8001cdc:	f88d 1017 	strb.w	r1, [sp, #23]
		buf[4] = msg->compid;
 8001ce0:	f88d 2018 	strb.w	r2, [sp, #24]
		buf[5] = msg->msgid & 0xFF;
 8001ce4:	f88d 3019 	strb.w	r3, [sp, #25]
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = X25_INIT_CRC;
 8001ce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cec:	f8ad 3020 	strh.w	r3, [sp, #32]
 8001cf0:	b2be      	uxth	r6, r7
 8001cf2:	f10d 0a15 	add.w	sl, sp, #21
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
                crc_accumulate(*pBuffer++, &crcTmp);
 8001cf6:	3e01      	subs	r6, #1
 8001cf8:	f81a 0b01 	ldrb.w	r0, [sl], #1
 8001cfc:	a908      	add	r1, sp, #32
 8001cfe:	b2b6      	uxth	r6, r6
 8001d00:	f004 fb73 	bl	80063ea <crc_accumulate>
	while (length--) {
 8001d04:	2e01      	cmp	r6, #1
 8001d06:	d1f6      	bne.n	8001cf6 <mavlink_finalize_message_buffer.constprop.0.isra.0+0xaa>
        }
        return crcTmp;
 8001d08:	f8bd 3020 	ldrh.w	r3, [sp, #32]
		buf[8] = (msg->msgid >> 8) & 0xFF;
		buf[9] = (msg->msgid >> 16) & 0xFF;
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001d0c:	78e6      	ldrb	r6, [r4, #3]
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8001d0e:	f8ad 3006 	strh.w	r3, [sp, #6]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001d12:	f104 0a0c 	add.w	sl, r4, #12
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
 8001d16:	46d3      	mov	fp, sl
	while (length--) {
                crc_accumulate(*p++, crcAccum);
 8001d18:	f10d 0106 	add.w	r1, sp, #6
	while (length--) {
 8001d1c:	b30e      	cbz	r6, 8001d62 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x116>
                crc_accumulate(*p++, crcAccum);
 8001d1e:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8001d22:	3e01      	subs	r6, #1
 8001d24:	f004 fb61 	bl	80063ea <crc_accumulate>
 8001d28:	b2b6      	uxth	r6, r6
	while (length--) {
 8001d2a:	e7f5      	b.n	8001d18 <mavlink_finalize_message_buffer.constprop.0.isra.0+0xcc>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001d2c:	4605      	mov	r5, r0
 8001d2e:	e7a0      	b.n	8001c72 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x26>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001d30:	2301      	movs	r3, #1
 8001d32:	7123      	strb	r3, [r4, #4]
 8001d34:	e7b7      	b.n	8001ca6 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x5a>
		buf[2] = msg->incompat_flags;
 8001d36:	7920      	ldrb	r0, [r4, #4]
 8001d38:	f88d 0016 	strb.w	r0, [sp, #22]
		buf[5] = msg->sysid;
 8001d3c:	f88d 1019 	strb.w	r1, [sp, #25]
		buf[3] = msg->compat_flags;
 8001d40:	7960      	ldrb	r0, [r4, #5]
		buf[7] = msg->msgid & 0xFF;
 8001d42:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[6] = msg->compid;
 8001d46:	2119      	movs	r1, #25
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001d48:	1213      	asrs	r3, r2, #8
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001d4a:	1412      	asrs	r2, r2, #16
		buf[3] = msg->compat_flags;
 8001d4c:	f88d 0017 	strb.w	r0, [sp, #23]
		buf[4] = msg->seq;
 8001d50:	f88d 6018 	strb.w	r6, [sp, #24]
		buf[6] = msg->compid;
 8001d54:	f88d 101a 	strb.w	r1, [sp, #26]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001d58:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001d5c:	f88d 201d 	strb.w	r2, [sp, #29]
 8001d60:	e7c2      	b.n	8001ce8 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x9c>
	crc_accumulate(crc_extra, &checksum);
 8001d62:	4640      	mov	r0, r8
 8001d64:	f004 fb41 	bl	80063ea <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001d68:	78e2      	ldrb	r2, [r4, #3]
 8001d6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001d6e:	f80a 3002 	strb.w	r3, [sl, r2]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001d72:	78e2      	ldrb	r2, [r4, #3]
 8001d74:	4452      	add	r2, sl
 8001d76:	0a19      	lsrs	r1, r3, #8
 8001d78:	7051      	strb	r1, [r2, #1]

	msg->checksum = checksum;
 8001d7a:	8023      	strh	r3, [r4, #0]

	if (signing) {
 8001d7c:	2d00      	cmp	r5, #0
 8001d7e:	d055      	beq.n	8001e2c <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1e0>
		mavlink_sign_packet(status->signing,
 8001d80:	f8d9 5010 	ldr.w	r5, [r9, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8001d84:	2d00      	cmp	r5, #0
 8001d86:	d051      	beq.n	8001e2c <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1e0>
 8001d88:	782b      	ldrb	r3, [r5, #0]
 8001d8a:	07db      	lsls	r3, r3, #31
 8001d8c:	d54e      	bpl.n	8001e2c <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1e0>
	signature[0] = signing->link_id;
 8001d8e:	786b      	ldrb	r3, [r5, #1]
 8001d90:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
	tstamp.t64 = signing->timestamp;
 8001d94:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
	memcpy(&signature[1], tstamp.t8, 6);
 8001d98:	a902      	add	r1, sp, #8
	tstamp.t64 = signing->timestamp;
 8001d9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	memcpy(&signature[1], tstamp.t8, 6);
 8001d9e:	f204 1017 	addw	r0, r4, #279	; 0x117
 8001da2:	2206      	movs	r2, #6
				    msg->signature,
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001da4:	f894 8003 	ldrb.w	r8, [r4, #3]
	memcpy(&signature[1], tstamp.t8, 6);
 8001da8:	f006 fbcb 	bl	8008542 <memcpy>
	signing->timestamp++;
 8001dac:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8001db0:	3301      	adds	r3, #1
 8001db2:	f142 0200 	adc.w	r2, r2, #0
 8001db6:	e9c5 3202 	strd	r3, r2, [r5, #8]
    B = 0xbb67ae85;
 8001dba:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1e8>)
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1ec>)
    D = 0xa54ff53a;
 8001dbe:	491f      	ldr	r1, [pc, #124]	; (8001e3c <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1f0>)
    F = 0x9b05688c;
 8001dc0:	481f      	ldr	r0, [pc, #124]	; (8001e40 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1f4>)
    B = 0xbb67ae85;
 8001dc2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    D = 0xa54ff53a;
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1f8>)
 8001dc8:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
    F = 0x9b05688c;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1fc>)
 8001dce:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
    G = 0x1f83d9ab;
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <mavlink_finalize_message_buffer.constprop.0.isra.0+0x200>)
 8001dd4:	9310      	str	r3, [sp, #64]	; 0x40
    H = 0x5be0cd19;
 8001dd6:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8001de0:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8001de4:	eb0d 0002 	add.w	r0, sp, r2
 8001de8:	f105 0110 	add.w	r1, r5, #16
 8001dec:	9311      	str	r3, [sp, #68]	; 0x44
    m->sz[1] = 0;
 8001dee:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8001df2:	f7ff fe51 	bl	8001a98 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001df6:	463a      	mov	r2, r7
 8001df8:	a905      	add	r1, sp, #20
 8001dfa:	a808      	add	r0, sp, #32
 8001dfc:	f7ff fe4c 	bl	8001a98 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001e00:	4642      	mov	r2, r8
 8001e02:	4651      	mov	r1, sl
 8001e04:	a808      	add	r0, sp, #32
 8001e06:	f7ff fe47 	bl	8001a98 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	eb0a 0108 	add.w	r1, sl, r8
 8001e10:	a808      	add	r0, sp, #32
 8001e12:	f7ff fe41 	bl	8001a98 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001e16:	f504 718b 	add.w	r1, r4, #278	; 0x116
 8001e1a:	a808      	add	r0, sp, #32
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	f7ff fe3b 	bl	8001a98 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8001e22:	f204 111d 	addw	r1, r4, #285	; 0x11d
 8001e26:	a808      	add	r0, sp, #32
 8001e28:	f004 fb58 	bl	80064dc <mavlink_sha256_final_48>
	}
	
	return msg->len + header_len + 2 + signature_len;
}
 8001e2c:	b023      	add	sp, #140	; 0x8c
 8001e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e32:	bf00      	nop
 8001e34:	6a09e667 	.word	0x6a09e667
 8001e38:	bb67ae85 	.word	0xbb67ae85
 8001e3c:	3c6ef372 	.word	0x3c6ef372
 8001e40:	510e527f 	.word	0x510e527f
 8001e44:	a54ff53a 	.word	0xa54ff53a
 8001e48:	9b05688c 	.word	0x9b05688c
 8001e4c:	1f83d9ab 	.word	0x1f83d9ab
 8001e50:	200015cc 	.word	0x200015cc

08001e54 <_Z12queue_coordshfff>:
void queue_coords(uint8_t sys_id, float latitude, float longitude, float altitude) {
 8001e54:	b510      	push	{r4, lr}
 8001e56:	4604      	mov	r4, r0
 8001e58:	ed2d 8b04 	vpush	{d8-d9}
        void* mem_ptr = k_malloc(size);
 8001e5c:	2014      	movs	r0, #20
void queue_coords(uint8_t sys_id, float latitude, float longitude, float altitude) {
 8001e5e:	eeb0 9a40 	vmov.f32	s18, s0
 8001e62:	eef0 8a60 	vmov.f32	s17, s1
 8001e66:	eeb0 8a41 	vmov.f32	s16, s2
        void* mem_ptr = k_malloc(size);
 8001e6a:	f006 faee 	bl	800844a <k_malloc>
	coords->sys_id = sys_id;
 8001e6e:	7104      	strb	r4, [r0, #4]
	coords->latitude = latitude;
 8001e70:	ed80 9a02 	vstr	s18, [r0, #8]
	coords->longitude = longitude;
 8001e74:	edc0 8a03 	vstr	s17, [r0, #12]
	coords->altitude = altitude;
 8001e78:	ed80 8a04 	vstr	s16, [r0, #16]
}
 8001e7c:	ecbd 8b04 	vpop	{d8-d9}
        void* mem_ptr = k_malloc(size);
 8001e80:	4601      	mov	r1, r0
}
 8001e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&coords_fifo, mem_ptr);
 8001e86:	4801      	ldr	r0, [pc, #4]	; (8001e8c <_Z12queue_coordshfff+0x38>)
 8001e88:	f006 b935 	b.w	80080f6 <k_queue_append>
 8001e8c:	20000254 	.word	0x20000254

08001e90 <_Z17queue_named_valuePKci>:
void queue_named_value(const char* name, int value) {
 8001e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e94:	460f      	mov	r7, r1
 8001e96:	4680      	mov	r8, r0
	int len = strlen(name);
 8001e98:	f7fe ff44 	bl	8000d24 <strlen>
 8001e9c:	4605      	mov	r5, r0
 8001e9e:	280a      	cmp	r0, #10
 8001ea0:	4606      	mov	r6, r0
        void* mem_ptr = k_malloc(size);
 8001ea2:	f04f 0014 	mov.w	r0, #20
 8001ea6:	bfa8      	it	ge
 8001ea8:	250a      	movge	r5, #10
 8001eaa:	f006 face 	bl	800844a <k_malloc>
	memcpy(named_value->name, name, len);
 8001eae:	462a      	mov	r2, r5
        void* mem_ptr = k_malloc(size);
 8001eb0:	4604      	mov	r4, r0
	memcpy(named_value->name, name, len);
 8001eb2:	4641      	mov	r1, r8
 8001eb4:	3004      	adds	r0, #4
 8001eb6:	f006 fb44 	bl	8008542 <memcpy>
	if (len < named_value_name_length) named_value->name[len] = '\0';
 8001eba:	2e09      	cmp	r6, #9
 8001ebc:	bfde      	ittt	le
 8001ebe:	192d      	addle	r5, r5, r4
 8001ec0:	2300      	movle	r3, #0
 8001ec2:	712b      	strble	r3, [r5, #4]
	k_fifo_put(&named_values_fifo, mem_ptr);
 8001ec4:	4621      	mov	r1, r4
	named_value->value = value;
 8001ec6:	6127      	str	r7, [r4, #16]
	k_fifo_put(&named_values_fifo, mem_ptr);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <_Z17queue_named_valuePKci+0x44>)
}
 8001eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&named_values_fifo, mem_ptr);
 8001ece:	f006 b912 	b.w	80080f6 <k_queue_append>
 8001ed2:	bf00      	nop
 8001ed4:	20000268 	.word	0x20000268

08001ed8 <_ZL8uart_isrPK6devicePv>:
static uint8_t uart_tx_buf[UART_BUF_MAXSIZE];
static uint8_t* uart_tx_ptr = uart_tx_buf;
static uint16_t uart_tx_ctr = 0;
static const struct device* uart_dev;

static void uart_isr(const struct device* dev, void* userdata) {
 8001ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001edc:	4680      	mov	r8, r0
 8001ede:	b0a3      	sub	sp, #140	; 0x8c
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
 8001ee0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	bb83      	cbnz	r3, 8001f4a <_ZL8uart_isrPK6devicePv+0x72>
	if (api->irq_is_pending == NULL) {
 8001ee8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d132      	bne.n	8001f58 <_ZL8uart_isrPK6devicePv+0x80>
	if (api->irq_rx_ready == NULL) {
 8001ef2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d132      	bne.n	8001f62 <_ZL8uart_isrPK6devicePv+0x8a>
	if (api->fifo_read != NULL) {
 8001efc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	b333      	cbz	r3, 8001f52 <_ZL8uart_isrPK6devicePv+0x7a>
		return api->fifo_read(dev, rx_data, size);
 8001f04:	2201      	movs	r2, #1
 8001f06:	f10d 0107 	add.w	r1, sp, #7
 8001f0a:	4640      	mov	r0, r8
 8001f0c:	4798      	blx	r3
	
	while (uart_irq_update(dev)
		&& uart_irq_is_pending(dev)
	) {
        	if (uart_irq_rx_ready(dev)) {
                        if (uart_fifo_read(dev, &c, 1) == 0) {
 8001f0e:	b300      	cbz	r0, 8001f52 <_ZL8uart_isrPK6devicePv+0x7a>
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001f10:	4dab      	ldr	r5, [pc, #684]	; (80021c0 <_ZL8uart_isrPK6devicePv+0x2e8>)
                                break;   
                        }
			if (mavlink_parse_char(MAVLINK_MAIN_CHANNEL, c, &mavlink_msg, &mavlink_status)) {
 8001f12:	f89d 6007 	ldrb.w	r6, [sp, #7]

	switch (status->parse_state)
 8001f16:	78eb      	ldrb	r3, [r5, #3]
 8001f18:	4caa      	ldr	r4, [pc, #680]	; (80021c4 <_ZL8uart_isrPK6devicePv+0x2ec>)
	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001f1a:	2700      	movs	r7, #0
 8001f1c:	702f      	strb	r7, [r5, #0]
	switch (status->parse_state)
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	d851      	bhi.n	8001fc6 <_ZL8uart_isrPK6devicePv+0xee>
 8001f22:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001f26:	0041      	.short	0x0041
 8001f28:	008c0041 	.word	0x008c0041
 8001f2c:	00ab009c 	.word	0x00ab009c
 8001f30:	00b800b1 	.word	0x00b800b1
 8001f34:	00c600bf 	.word	0x00c600bf
 8001f38:	00ed00d8 	.word	0x00ed00d8
 8001f3c:	01110101 	.word	0x01110101
 8001f40:	01600160 	.word	0x01600160
 8001f44:	0198      	.short	0x0198
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    _mav_parse_error(status);
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001f46:	70ea      	strb	r2, [r5, #3]
 8001f48:	e7ca      	b.n	8001ee0 <_ZL8uart_isrPK6devicePv+0x8>
		return -ENOSYS;
	}
	return api->irq_update(dev);
 8001f4a:	4640      	mov	r0, r8
 8001f4c:	4798      	blx	r3
		&& uart_irq_is_pending(dev)
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d1ca      	bne.n	8001ee8 <_ZL8uart_isrPK6devicePv+0x10>
			}
                } else {
			break;
		}
        }
}
 8001f52:	b023      	add	sp, #140	; 0x8c
 8001f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return api->irq_is_pending(dev);
 8001f58:	4640      	mov	r0, r8
 8001f5a:	4798      	blx	r3
		&& uart_irq_is_pending(dev)
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d1c8      	bne.n	8001ef2 <_ZL8uart_isrPK6devicePv+0x1a>
 8001f60:	e7f7      	b.n	8001f52 <_ZL8uart_isrPK6devicePv+0x7a>
	return api->irq_rx_ready(dev);
 8001f62:	4640      	mov	r0, r8
 8001f64:	4798      	blx	r3
        	if (uart_irq_rx_ready(dev)) {
 8001f66:	4604      	mov	r4, r0
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d1c7      	bne.n	8001efc <_ZL8uart_isrPK6devicePv+0x24>
	if (api->irq_tx_ready != NULL) {
 8001f6c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0ed      	beq.n	8001f52 <_ZL8uart_isrPK6devicePv+0x7a>
		return api->irq_tx_ready(dev);
 8001f76:	4640      	mov	r0, r8
 8001f78:	4798      	blx	r3
		} else if (uart_irq_tx_ready(dev)) {
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d0e9      	beq.n	8001f52 <_ZL8uart_isrPK6devicePv+0x7a>
			if (uart_tx_ctr > 0) {
 8001f7e:	4d92      	ldr	r5, [pc, #584]	; (80021c8 <_ZL8uart_isrPK6devicePv+0x2f0>)
 8001f80:	4e92      	ldr	r6, [pc, #584]	; (80021cc <_ZL8uart_isrPK6devicePv+0x2f4>)
 8001f82:	882a      	ldrh	r2, [r5, #0]
 8001f84:	2a00      	cmp	r2, #0
 8001f86:	f000 8231 	beq.w	80023ec <_ZL8uart_isrPK6devicePv+0x514>
	if (api->fifo_fill != NULL) {
 8001f8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	b11b      	cbz	r3, 8001f9a <_ZL8uart_isrPK6devicePv+0xc2>
		return api->fifo_fill(dev, tx_data, size);
 8001f92:	6831      	ldr	r1, [r6, #0]
 8001f94:	4640      	mov	r0, r8
 8001f96:	4798      	blx	r3
 8001f98:	4604      	mov	r4, r0
				uart_tx_ptr += n;
 8001f9a:	6833      	ldr	r3, [r6, #0]
				uart_tx_ctr -= n;
 8001f9c:	8828      	ldrh	r0, [r5, #0]
				uart_tx_ptr += n;
 8001f9e:	4423      	add	r3, r4
				uart_tx_ctr -= n;
 8001fa0:	1b04      	subs	r4, r0, r4
				uart_tx_ptr += n;
 8001fa2:	6033      	str	r3, [r6, #0]
				uart_tx_ctr -= n;
 8001fa4:	802c      	strh	r4, [r5, #0]
 8001fa6:	e79b      	b.n	8001ee0 <_ZL8uart_isrPK6devicePv+0x8>
		if (c == MAVLINK_STX)
 8001fa8:	2efd      	cmp	r6, #253	; 0xfd
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001faa:	7b2b      	ldrb	r3, [r5, #12]
		if (c == MAVLINK_STX)
 8001fac:	d13d      	bne.n	800202a <_ZL8uart_isrPK6devicePv+0x152>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001fae:	2202      	movs	r2, #2
 8001fb0:	70ea      	strb	r2, [r5, #3]
			rxmsg->len = 0;
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	70e2      	strb	r2, [r4, #3]
			rxmsg->magic = c;
 8001fb6:	70a6      	strb	r6, [r4, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001fbc:	732b      	strb	r3, [r5, #12]
	msg->checksum = crcTmp;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fc2:	7023      	strb	r3, [r4, #0]
 8001fc4:	7063      	strb	r3, [r4, #1]
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8001fc6:	7829      	ldrb	r1, [r5, #0]
 8001fc8:	2901      	cmp	r1, #1
 8001fca:	d106      	bne.n	8001fda <_ZL8uart_isrPK6devicePv+0x102>
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8001fcc:	892b      	ldrh	r3, [r5, #8]
		status->current_rx_seq = rxmsg->seq;
 8001fce:	79a2      	ldrb	r2, [r4, #6]
 8001fd0:	716a      	strb	r2, [r5, #5]
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8001fd2:	b903      	cbnz	r3, 8001fd6 <_ZL8uart_isrPK6devicePv+0xfe>
 8001fd4:	816b      	strh	r3, [r5, #10]
		status->packet_rx_success_count++;
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	812b      	strh	r3, [r5, #8]
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8001fda:	487d      	ldr	r0, [pc, #500]	; (80021d0 <_ZL8uart_isrPK6devicePv+0x2f8>)
           r_mavlink_status->parse_state = status->parse_state;
 8001fdc:	4a7d      	ldr	r2, [pc, #500]	; (80021d4 <_ZL8uart_isrPK6devicePv+0x2fc>)
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8001fde:	78e3      	ldrb	r3, [r4, #3]
 8001fe0:	70c3      	strb	r3, [r0, #3]
           r_mavlink_status->parse_state = status->parse_state;
 8001fe2:	78eb      	ldrb	r3, [r5, #3]
 8001fe4:	70d3      	strb	r3, [r2, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8001fe6:	792b      	ldrb	r3, [r5, #4]
 8001fe8:	7113      	strb	r3, [r2, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8001fea:	796b      	ldrb	r3, [r5, #5]
 8001fec:	3301      	adds	r3, #1
 8001fee:	7153      	strb	r3, [r2, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8001ff0:	892b      	ldrh	r3, [r5, #8]
 8001ff2:	8113      	strh	r3, [r2, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8001ff4:	78ab      	ldrb	r3, [r5, #2]
 8001ff6:	8153      	strh	r3, [r2, #10]
           r_mavlink_status->flags = status->flags;
 8001ff8:	7b2b      	ldrb	r3, [r5, #12]
 8001ffa:	7313      	strb	r3, [r2, #12]
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8001ffc:	2902      	cmp	r1, #2
       status->parse_error = 0;
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	70ab      	strb	r3, [r5, #2]
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8002004:	f040 81e9 	bne.w	80023da <_ZL8uart_isrPK6devicePv+0x502>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8002008:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
 800200c:	8003      	strh	r3, [r0, #0]
    status->parse_error++;
 800200e:	2201      	movs	r2, #1
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002010:	2300      	movs	r3, #0
	    if (c == MAVLINK_STX)
 8002012:	2efd      	cmp	r6, #253	; 0xfd
    status->parse_error++;
 8002014:	70aa      	strb	r2, [r5, #2]
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002016:	702b      	strb	r3, [r5, #0]
	    if (c == MAVLINK_STX)
 8002018:	d195      	bne.n	8001f46 <_ZL8uart_isrPK6devicePv+0x6e>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800201a:	2202      	movs	r2, #2
		    rxmsg->len = 0;
 800201c:	70e3      	strb	r3, [r4, #3]
	msg->checksum = crcTmp;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002022:	70ea      	strb	r2, [r5, #3]
	msg->checksum = crcTmp;
 8002024:	7023      	strb	r3, [r4, #0]
 8002026:	7063      	strb	r3, [r4, #1]
 8002028:	e75a      	b.n	8001ee0 <_ZL8uart_isrPK6devicePv+0x8>
		} else if (c == MAVLINK_STX_MAVLINK1)
 800202a:	2efe      	cmp	r6, #254	; 0xfe
 800202c:	d1cb      	bne.n	8001fc6 <_ZL8uart_isrPK6devicePv+0xee>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800202e:	2202      	movs	r2, #2
 8002030:	70ea      	strb	r2, [r5, #3]
			rxmsg->len = 0;
 8002032:	2200      	movs	r2, #0
 8002034:	70e2      	strb	r2, [r4, #3]
			rxmsg->magic = c;
 8002036:	70a6      	strb	r6, [r4, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	e7be      	b.n	8001fbc <_ZL8uart_isrPK6devicePv+0xe4>
			mavlink_update_checksum(rxmsg, c);
 800203e:	4861      	ldr	r0, [pc, #388]	; (80021c4 <_ZL8uart_isrPK6devicePv+0x2ec>)
			rxmsg->len = c;
 8002040:	70e6      	strb	r6, [r4, #3]
			status->packet_idx = 0;
 8002042:	712f      	strb	r7, [r5, #4]
			mavlink_update_checksum(rxmsg, c);
 8002044:	4631      	mov	r1, r6
 8002046:	f004 f9de 	bl	8006406 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800204a:	7b2b      	ldrb	r3, [r5, #12]
 800204c:	07da      	lsls	r2, r3, #31
 800204e:	d503      	bpl.n	8002058 <_ZL8uart_isrPK6devicePv+0x180>
                            rxmsg->incompat_flags = 0;
 8002050:	7127      	strb	r7, [r4, #4]
                            rxmsg->compat_flags = 0;
 8002052:	7167      	strb	r7, [r4, #5]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002054:	2305      	movs	r3, #5
 8002056:	e000      	b.n	800205a <_ZL8uart_isrPK6devicePv+0x182>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8002058:	2303      	movs	r3, #3
 800205a:	70eb      	strb	r3, [r5, #3]
 800205c:	e7b3      	b.n	8001fc6 <_ZL8uart_isrPK6devicePv+0xee>
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 800205e:	f016 0ffe 	tst.w	r6, #254	; 0xfe
		rxmsg->incompat_flags = c;
 8002062:	7126      	strb	r6, [r4, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8002064:	d004      	beq.n	8002070 <_ZL8uart_isrPK6devicePv+0x198>
    status->parse_error++;
 8002066:	78ab      	ldrb	r3, [r5, #2]
 8002068:	3301      	adds	r3, #1
 800206a:	70ab      	strb	r3, [r5, #2]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800206c:	2301      	movs	r3, #1
 800206e:	e7f4      	b.n	800205a <_ZL8uart_isrPK6devicePv+0x182>
		mavlink_update_checksum(rxmsg, c);
 8002070:	4854      	ldr	r0, [pc, #336]	; (80021c4 <_ZL8uart_isrPK6devicePv+0x2ec>)
 8002072:	4631      	mov	r1, r6
 8002074:	f004 f9c7 	bl	8006406 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8002078:	2304      	movs	r3, #4
 800207a:	e7ee      	b.n	800205a <_ZL8uart_isrPK6devicePv+0x182>
		mavlink_update_checksum(rxmsg, c);
 800207c:	4851      	ldr	r0, [pc, #324]	; (80021c4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->compat_flags = c;
 800207e:	7166      	strb	r6, [r4, #5]
		mavlink_update_checksum(rxmsg, c);
 8002080:	4631      	mov	r1, r6
 8002082:	f004 f9c0 	bl	8006406 <mavlink_update_checksum>
 8002086:	e7e5      	b.n	8002054 <_ZL8uart_isrPK6devicePv+0x17c>
		mavlink_update_checksum(rxmsg, c);
 8002088:	484e      	ldr	r0, [pc, #312]	; (80021c4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->seq = c;
 800208a:	71a6      	strb	r6, [r4, #6]
		mavlink_update_checksum(rxmsg, c);
 800208c:	4631      	mov	r1, r6
 800208e:	f004 f9ba 	bl	8006406 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8002092:	2306      	movs	r3, #6
 8002094:	e7e1      	b.n	800205a <_ZL8uart_isrPK6devicePv+0x182>
		mavlink_update_checksum(rxmsg, c);
 8002096:	484b      	ldr	r0, [pc, #300]	; (80021c4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->sysid = c;
 8002098:	71e6      	strb	r6, [r4, #7]
		mavlink_update_checksum(rxmsg, c);
 800209a:	4631      	mov	r1, r6
 800209c:	f004 f9b3 	bl	8006406 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 80020a0:	2307      	movs	r3, #7
 80020a2:	e7da      	b.n	800205a <_ZL8uart_isrPK6devicePv+0x182>
		mavlink_update_checksum(rxmsg, c);
 80020a4:	4847      	ldr	r0, [pc, #284]	; (80021c4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->compid = c;
 80020a6:	7226      	strb	r6, [r4, #8]
		mavlink_update_checksum(rxmsg, c);
 80020a8:	4631      	mov	r1, r6
 80020aa:	f004 f9ac 	bl	8006406 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80020ae:	2308      	movs	r3, #8
 80020b0:	e7d3      	b.n	800205a <_ZL8uart_isrPK6devicePv+0x182>
		rxmsg->msgid = c;
 80020b2:	2300      	movs	r3, #0
 80020b4:	72a3      	strb	r3, [r4, #10]
 80020b6:	72e3      	strb	r3, [r4, #11]
		mavlink_update_checksum(rxmsg, c);
 80020b8:	4842      	ldr	r0, [pc, #264]	; (80021c4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->msgid = c;
 80020ba:	7266      	strb	r6, [r4, #9]
		mavlink_update_checksum(rxmsg, c);
 80020bc:	4631      	mov	r1, r6
 80020be:	f004 f9a2 	bl	8006406 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80020c2:	7b2b      	ldrb	r3, [r5, #12]
 80020c4:	07db      	lsls	r3, r3, #31
 80020c6:	d504      	bpl.n	80020d2 <_ZL8uart_isrPK6devicePv+0x1fa>
			if(rxmsg->len > 0) {
 80020c8:	78e3      	ldrb	r3, [r4, #3]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d03a      	beq.n	8002144 <_ZL8uart_isrPK6devicePv+0x26c>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80020ce:	230b      	movs	r3, #11
 80020d0:	e7c3      	b.n	800205a <_ZL8uart_isrPK6devicePv+0x182>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 80020d2:	2309      	movs	r3, #9
 80020d4:	e7c1      	b.n	800205a <_ZL8uart_isrPK6devicePv+0x182>
		rxmsg->msgid |= c<<8;
 80020d6:	7aa2      	ldrb	r2, [r4, #10]
 80020d8:	7a63      	ldrb	r3, [r4, #9]
		mavlink_update_checksum(rxmsg, c);
 80020da:	483a      	ldr	r0, [pc, #232]	; (80021c4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->msgid |= c<<8;
 80020dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020e0:	7ae2      	ldrb	r2, [r4, #11]
 80020e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80020e6:	ea43 2206 	orr.w	r2, r3, r6, lsl #8
 80020ea:	7263      	strb	r3, [r4, #9]
 80020ec:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80020f0:	0c12      	lsrs	r2, r2, #16
 80020f2:	72a3      	strb	r3, [r4, #10]
 80020f4:	72e2      	strb	r2, [r4, #11]
		mavlink_update_checksum(rxmsg, c);
 80020f6:	4631      	mov	r1, r6
 80020f8:	f004 f985 	bl	8006406 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 80020fc:	230a      	movs	r3, #10
 80020fe:	e7ac      	b.n	800205a <_ZL8uart_isrPK6devicePv+0x182>
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8002100:	7aa2      	ldrb	r2, [r4, #10]
 8002102:	7a63      	ldrb	r3, [r4, #9]
		mavlink_update_checksum(rxmsg, c);
 8002104:	482f      	ldr	r0, [pc, #188]	; (80021c4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8002106:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800210a:	7ae2      	ldrb	r2, [r4, #11]
 800210c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002110:	ea43 4206 	orr.w	r2, r3, r6, lsl #16
 8002114:	7263      	strb	r3, [r4, #9]
 8002116:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800211a:	72a3      	strb	r3, [r4, #10]
 800211c:	0c13      	lsrs	r3, r2, #16
 800211e:	72e3      	strb	r3, [r4, #11]
		mavlink_update_checksum(rxmsg, c);
 8002120:	4631      	mov	r1, r6
 8002122:	f004 f970 	bl	8006406 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8002126:	e7cf      	b.n	80020c8 <_ZL8uart_isrPK6devicePv+0x1f0>
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8002128:	792b      	ldrb	r3, [r5, #4]
		mavlink_update_checksum(rxmsg, c);
 800212a:	4826      	ldr	r0, [pc, #152]	; (80021c4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	4423      	add	r3, r4
 8002130:	712a      	strb	r2, [r5, #4]
 8002132:	731e      	strb	r6, [r3, #12]
		mavlink_update_checksum(rxmsg, c);
 8002134:	4631      	mov	r1, r6
 8002136:	f004 f966 	bl	8006406 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 800213a:	792a      	ldrb	r2, [r5, #4]
 800213c:	78e3      	ldrb	r3, [r4, #3]
 800213e:	429a      	cmp	r2, r3
 8002140:	f47f af41 	bne.w	8001fc6 <_ZL8uart_isrPK6devicePv+0xee>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002144:	230c      	movs	r3, #12
 8002146:	e788      	b.n	800205a <_ZL8uart_isrPK6devicePv+0x182>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8002148:	7aa3      	ldrb	r3, [r4, #10]
 800214a:	7a61      	ldrb	r1, [r4, #9]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 800214c:	4822      	ldr	r0, [pc, #136]	; (80021d8 <_ZL8uart_isrPK6devicePv+0x300>)
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 800214e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8002152:	7ae3      	ldrb	r3, [r4, #11]
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8002154:	27d6      	movs	r7, #214	; 0xd6
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8002156:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
            if (msgid < mavlink_message_crcs[mid].msgid) {
 800215a:	f04f 0c0c 	mov.w	ip, #12
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 800215e:	2300      	movs	r3, #0
            uint32_t mid = (low+1+high)/2;
 8002160:	19da      	adds	r2, r3, r7
 8002162:	3201      	adds	r2, #1
 8002164:	0852      	lsrs	r2, r2, #1
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8002166:	fb0c fe02 	mul.w	lr, ip, r2
 800216a:	f850 e00e 	ldr.w	lr, [r0, lr]
 800216e:	4571      	cmp	r1, lr
 8002170:	d236      	bcs.n	80021e0 <_ZL8uart_isrPK6devicePv+0x308>
                high = mid-1;
 8002172:	1e57      	subs	r7, r2, #1
        while (low < high) {
 8002174:	429f      	cmp	r7, r3
 8002176:	d8f3      	bhi.n	8002160 <_ZL8uart_isrPK6devicePv+0x288>
        if (mavlink_message_crcs[low].msgid != msgid) {
 8002178:	220c      	movs	r2, #12
 800217a:	4353      	muls	r3, r2
 800217c:	18c7      	adds	r7, r0, r3
 800217e:	58c3      	ldr	r3, [r0, r3]
		mavlink_update_checksum(rxmsg, crc_extra);
 8002180:	4810      	ldr	r0, [pc, #64]	; (80021c4 <_ZL8uart_isrPK6devicePv+0x2ec>)
        if (mavlink_message_crcs[low].msgid != msgid) {
 8002182:	4299      	cmp	r1, r3
            return NULL;
 8002184:	bf16      	itet	ne
 8002186:	2700      	movne	r7, #0
		uint8_t crc_extra = e?e->crc_extra:0;
 8002188:	7939      	ldrbeq	r1, [r7, #4]
 800218a:	4639      	movne	r1, r7
		mavlink_update_checksum(rxmsg, crc_extra);
 800218c:	f004 f93b 	bl	8006406 <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8002190:	8823      	ldrh	r3, [r4, #0]
                rxmsg->ck[0] = c;
 8002192:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
		if (c != (rxmsg->checksum & 0xFF)) {
 8002196:	b2db      	uxtb	r3, r3
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8002198:	429e      	cmp	r6, r3
 800219a:	bf14      	ite	ne
 800219c:	230e      	movne	r3, #14
 800219e:	230d      	moveq	r3, #13
 80021a0:	70eb      	strb	r3, [r5, #3]
                if (e && status->packet_idx < e->max_msg_len) {
 80021a2:	2f00      	cmp	r7, #0
 80021a4:	f43f af0f 	beq.w	8001fc6 <_ZL8uart_isrPK6devicePv+0xee>
 80021a8:	792b      	ldrb	r3, [r5, #4]
 80021aa:	79ba      	ldrb	r2, [r7, #6]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	f67f af0a 	bls.w	8001fc6 <_ZL8uart_isrPK6devicePv+0xee>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 80021b2:	480a      	ldr	r0, [pc, #40]	; (80021dc <_ZL8uart_isrPK6devicePv+0x304>)
 80021b4:	1ad2      	subs	r2, r2, r3
 80021b6:	2100      	movs	r1, #0
 80021b8:	4418      	add	r0, r3
 80021ba:	f006 f9d0 	bl	800855e <memset>
 80021be:	e702      	b.n	8001fc6 <_ZL8uart_isrPK6devicePv+0xee>
 80021c0:	200015cc 	.word	0x200015cc
 80021c4:	20001a72 	.word	0x20001a72
 80021c8:	20001958 	.word	0x20001958
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20001f06 	.word	0x20001f06
 80021d4:	2000162c 	.word	0x2000162c
 80021d8:	08008bb8 	.word	0x08008bb8
 80021dc:	20001a7e 	.word	0x20001a7e
                low = mid;
 80021e0:	4613      	mov	r3, r2
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80021e2:	d9c9      	bls.n	8002178 <_ZL8uart_isrPK6devicePv+0x2a0>
 80021e4:	e7c6      	b.n	8002174 <_ZL8uart_isrPK6devicePv+0x29c>
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 80021e6:	2b0e      	cmp	r3, #14
 80021e8:	d016      	beq.n	8002218 <_ZL8uart_isrPK6devicePv+0x340>
 80021ea:	8823      	ldrh	r3, [r4, #0]
			status->msg_received = MAVLINK_FRAMING_OK;
 80021ec:	ebb6 2f13 	cmp.w	r6, r3, lsr #8
 80021f0:	bf14      	ite	ne
 80021f2:	2302      	movne	r3, #2
 80021f4:	2301      	moveq	r3, #1
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80021f6:	7922      	ldrb	r2, [r4, #4]
 80021f8:	702b      	strb	r3, [r5, #0]
 80021fa:	07d7      	lsls	r7, r2, #31
		rxmsg->ck[1] = c;
 80021fc:	f884 6115 	strb.w	r6, [r4, #277]	; 0x115
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8002200:	d50c      	bpl.n	800221c <_ZL8uart_isrPK6devicePv+0x344>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8002202:	220f      	movs	r2, #15
 8002204:	70ea      	strb	r2, [r5, #3]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002206:	2b02      	cmp	r3, #2
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8002208:	f04f 020d 	mov.w	r2, #13
 800220c:	736a      	strb	r2, [r5, #13]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800220e:	f43f aeda 	beq.w	8001fc6 <_ZL8uart_isrPK6devicePv+0xee>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002212:	2300      	movs	r3, #0
 8002214:	702b      	strb	r3, [r5, #0]
 8002216:	e6d6      	b.n	8001fc6 <_ZL8uart_isrPK6devicePv+0xee>
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8002218:	2302      	movs	r3, #2
 800221a:	e7ec      	b.n	80021f6 <_ZL8uart_isrPK6devicePv+0x31e>
			if (status->signing &&
 800221c:	692b      	ldr	r3, [r5, #16]
 800221e:	b12b      	cbz	r3, 800222c <_ZL8uart_isrPK6devicePv+0x354>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			if (status->signing &&
 8002222:	b962      	cbnz	r2, 800223e <_ZL8uart_isrPK6devicePv+0x366>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002224:	782b      	ldrb	r3, [r5, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	f040 80d4 	bne.w	80023d4 <_ZL8uart_isrPK6devicePv+0x4fc>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800222c:	2301      	movs	r3, #1
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800222e:	4973      	ldr	r1, [pc, #460]	; (80023fc <_ZL8uart_isrPK6devicePv+0x524>)
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002230:	70eb      	strb	r3, [r5, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002232:	f240 1223 	movw	r2, #291	; 0x123
 8002236:	4872      	ldr	r0, [pc, #456]	; (8002400 <_ZL8uart_isrPK6devicePv+0x528>)
 8002238:	f006 f983 	bl	8008542 <memcpy>
 800223c:	e6c3      	b.n	8001fc6 <_ZL8uart_isrPK6devicePv+0xee>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800223e:	7aa1      	ldrb	r1, [r4, #10]
 8002240:	7a63      	ldrb	r3, [r4, #9]
 8002242:	4870      	ldr	r0, [pc, #448]	; (8002404 <_ZL8uart_isrPK6devicePv+0x52c>)
 8002244:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002248:	7ae1      	ldrb	r1, [r4, #11]
 800224a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800224e:	4790      	blx	r2
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002250:	2800      	cmp	r0, #0
 8002252:	d1eb      	bne.n	800222c <_ZL8uart_isrPK6devicePv+0x354>
 8002254:	e7e6      	b.n	8002224 <_ZL8uart_isrPK6devicePv+0x34c>
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8002256:	7b6b      	ldrb	r3, [r5, #13]
 8002258:	1ae2      	subs	r2, r4, r3
		status->signature_wait--;
 800225a:	3b01      	subs	r3, #1
 800225c:	b2db      	uxtb	r3, r3
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 800225e:	f882 6123 	strb.w	r6, [r2, #291]	; 0x123
		status->signature_wait--;
 8002262:	736b      	strb	r3, [r5, #13]
		if (status->signature_wait == 0) {
 8002264:	2b00      	cmp	r3, #0
 8002266:	f47f aeae 	bne.w	8001fc6 <_ZL8uart_isrPK6devicePv+0xee>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 800226a:	f8d5 9010 	ldr.w	r9, [r5, #16]
	if (signing == NULL) {
 800226e:	f1b9 0f00 	cmp.w	r9, #0
 8002272:	f000 808b 	beq.w	800238c <_ZL8uart_isrPK6devicePv+0x4b4>
 8002276:	e9cd 3308 	strd	r3, r3, [sp, #32]
    B = 0xbb67ae85;
 800227a:	4a63      	ldr	r2, [pc, #396]	; (8002408 <_ZL8uart_isrPK6devicePv+0x530>)
 800227c:	4b63      	ldr	r3, [pc, #396]	; (800240c <_ZL8uart_isrPK6devicePv+0x534>)
    D = 0xa54ff53a;
 800227e:	4964      	ldr	r1, [pc, #400]	; (8002410 <_ZL8uart_isrPK6devicePv+0x538>)
    F = 0x9b05688c;
 8002280:	4864      	ldr	r0, [pc, #400]	; (8002414 <_ZL8uart_isrPK6devicePv+0x53c>)
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8002282:	f8d5 a014 	ldr.w	sl, [r5, #20]
    B = 0xbb67ae85;
 8002286:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    D = 0xa54ff53a;
 800228a:	4b63      	ldr	r3, [pc, #396]	; (8002418 <_ZL8uart_isrPK6devicePv+0x540>)
 800228c:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
    F = 0x9b05688c;
 8002290:	4b62      	ldr	r3, [pc, #392]	; (800241c <_ZL8uart_isrPK6devicePv+0x544>)
 8002292:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
    G = 0x1f83d9ab;
 8002296:	4b62      	ldr	r3, [pc, #392]	; (8002420 <_ZL8uart_isrPK6devicePv+0x548>)
 8002298:	9310      	str	r3, [sp, #64]	; 0x40
    H = 0x5be0cd19;
 800229a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 800229e:	2220      	movs	r2, #32
 80022a0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80022a4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 80022a8:	eb0d 0002 	add.w	r0, sp, r2
 80022ac:	f109 0110 	add.w	r1, r9, #16
 80022b0:	9311      	str	r3, [sp, #68]	; 0x44
 80022b2:	f7ff fbf1 	bl	8001a98 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 80022b6:	78e2      	ldrb	r2, [r4, #3]
 80022b8:	495a      	ldr	r1, [pc, #360]	; (8002424 <_ZL8uart_isrPK6devicePv+0x54c>)
 80022ba:	320a      	adds	r2, #10
 80022bc:	a808      	add	r0, sp, #32
 80022be:	f7ff fbeb 	bl	8001a98 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 80022c2:	4959      	ldr	r1, [pc, #356]	; (8002428 <_ZL8uart_isrPK6devicePv+0x550>)
 80022c4:	2202      	movs	r2, #2
 80022c6:	a808      	add	r0, sp, #32
 80022c8:	f7ff fbe6 	bl	8001a98 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 80022cc:	2207      	movs	r2, #7
 80022ce:	4957      	ldr	r1, [pc, #348]	; (800242c <_ZL8uart_isrPK6devicePv+0x554>)
 80022d0:	a808      	add	r0, sp, #32
 80022d2:	f7ff fbe1 	bl	8001a98 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 80022d6:	a902      	add	r1, sp, #8
 80022d8:	a808      	add	r0, sp, #32
 80022da:	f004 f8ff 	bl	80064dc <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 80022de:	4954      	ldr	r1, [pc, #336]	; (8002430 <_ZL8uart_isrPK6devicePv+0x558>)
 80022e0:	2206      	movs	r2, #6
 80022e2:	a802      	add	r0, sp, #8
 80022e4:	f006 f91d 	bl	8008522 <memcmp>
 80022e8:	4607      	mov	r7, r0
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d164      	bne.n	80023b8 <_ZL8uart_isrPK6devicePv+0x4e0>
	tstamp.t64 = 0;
 80022ee:	2200      	movs	r2, #0
 80022f0:	2300      	movs	r3, #0
 80022f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
	memcpy(tstamp.t8, psig+1, 6);
 80022f6:	494f      	ldr	r1, [pc, #316]	; (8002434 <_ZL8uart_isrPK6devicePv+0x55c>)
	uint8_t link_id = psig[0];
 80022f8:	f894 b116 	ldrb.w	fp, [r4, #278]	; 0x116
	memcpy(tstamp.t8, psig+1, 6);
 80022fc:	2206      	movs	r2, #6
 80022fe:	a804      	add	r0, sp, #16
 8002300:	f006 f91f 	bl	8008542 <memcpy>
	if (signing_streams == NULL) {
 8002304:	f1ba 0f00 	cmp.w	sl, #0
 8002308:	d056      	beq.n	80023b8 <_ZL8uart_isrPK6devicePv+0x4e0>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800230a:	f8ba 3000 	ldrh.w	r3, [sl]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 800230e:	f894 c007 	ldrb.w	ip, [r4, #7]
		    msg->compid == signing_streams->stream[i].compid &&
 8002312:	7a21      	ldrb	r1, [r4, #8]
 8002314:	4652      	mov	r2, sl
 8002316:	b2b8      	uxth	r0, r7
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8002318:	4283      	cmp	r3, r0
 800231a:	d90b      	bls.n	8002334 <_ZL8uart_isrPK6devicePv+0x45c>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 800231c:	78d0      	ldrb	r0, [r2, #3]
 800231e:	4560      	cmp	r0, ip
 8002320:	d105      	bne.n	800232e <_ZL8uart_isrPK6devicePv+0x456>
 8002322:	7910      	ldrb	r0, [r2, #4]
 8002324:	4288      	cmp	r0, r1
 8002326:	d102      	bne.n	800232e <_ZL8uart_isrPK6devicePv+0x456>
		    msg->compid == signing_streams->stream[i].compid &&
 8002328:	7890      	ldrb	r0, [r2, #2]
 800232a:	4558      	cmp	r0, fp
 800232c:	d030      	beq.n	8002390 <_ZL8uart_isrPK6devicePv+0x4b8>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800232e:	3701      	adds	r7, #1
 8002330:	3209      	adds	r2, #9
 8002332:	e7f0      	b.n	8002316 <_ZL8uart_isrPK6devicePv+0x43e>
	if (i == signing_streams->num_signing_streams) {
 8002334:	d12c      	bne.n	8002390 <_ZL8uart_isrPK6devicePv+0x4b8>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8002336:	2b0f      	cmp	r3, #15
 8002338:	d83e      	bhi.n	80023b8 <_ZL8uart_isrPK6devicePv+0x4e0>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 800233a:	9a04      	ldr	r2, [sp, #16]
 800233c:	493e      	ldr	r1, [pc, #248]	; (8002438 <_ZL8uart_isrPK6devicePv+0x560>)
 800233e:	eb12 0e01 	adds.w	lr, r2, r1
 8002342:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
 8002346:	9a05      	ldr	r2, [sp, #20]
 8002348:	f142 0200 	adc.w	r2, r2, #0
 800234c:	4586      	cmp	lr, r0
 800234e:	418a      	sbcs	r2, r1
 8002350:	d332      	bcc.n	80023b8 <_ZL8uart_isrPK6devicePv+0x4e0>
		signing_streams->stream[i].sysid = msg->sysid;
 8002352:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
 8002356:	4452      	add	r2, sl
		signing_streams->num_signing_streams++;
 8002358:	3301      	adds	r3, #1
		signing_streams->stream[i].sysid = msg->sysid;
 800235a:	f882 c003 	strb.w	ip, [r2, #3]
		signing_streams->stream[i].compid = msg->compid;
 800235e:	7a21      	ldrb	r1, [r4, #8]
 8002360:	7111      	strb	r1, [r2, #4]
		signing_streams->stream[i].link_id = link_id;
 8002362:	f882 b002 	strb.w	fp, [r2, #2]
		signing_streams->num_signing_streams++;
 8002366:	f8aa 3000 	strh.w	r3, [sl]
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 800236a:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 800236e:	1d78      	adds	r0, r7, #5
 8002370:	4930      	ldr	r1, [pc, #192]	; (8002434 <_ZL8uart_isrPK6devicePv+0x55c>)
 8002372:	2206      	movs	r2, #6
 8002374:	4450      	add	r0, sl
 8002376:	f006 f8e4 	bl	8008542 <memcpy>
	if (tstamp.t64 > signing->timestamp) {
 800237a:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 800237e:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 8002382:	4281      	cmp	r1, r0
 8002384:	419a      	sbcs	r2, r3
 8002386:	d201      	bcs.n	800238c <_ZL8uart_isrPK6devicePv+0x4b4>
		signing->timestamp = tstamp.t64;
 8002388:	e9c9 0302 	strd	r0, r3, [r9, #8]
				status->msg_received = MAVLINK_FRAMING_OK;
 800238c:	2301      	movs	r3, #1
 800238e:	e022      	b.n	80023d6 <_ZL8uart_isrPK6devicePv+0x4fe>
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8002390:	eb07 01c7 	add.w	r1, r7, r7, lsl #3
		last_tstamp.t64 = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	2200      	movs	r2, #0
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8002398:	3105      	adds	r1, #5
		last_tstamp.t64 = 0;
 800239a:	e9cd 2306 	strd	r2, r3, [sp, #24]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 800239e:	4451      	add	r1, sl
 80023a0:	2206      	movs	r2, #6
 80023a2:	a806      	add	r0, sp, #24
 80023a4:	f006 f8cd 	bl	8008542 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 80023a8:	9b04      	ldr	r3, [sp, #16]
 80023aa:	9a06      	ldr	r2, [sp, #24]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	9b05      	ldr	r3, [sp, #20]
 80023b0:	9a07      	ldr	r2, [sp, #28]
 80023b2:	eb72 0303 	sbcs.w	r3, r2, r3
 80023b6:	d3d8      	bcc.n	800236a <_ZL8uart_isrPK6devicePv+0x492>
			   	(status->signing->accept_unsigned_callback &&
 80023b8:	692b      	ldr	r3, [r5, #16]
 80023ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			if (!sig_ok &&
 80023bc:	b152      	cbz	r2, 80023d4 <_ZL8uart_isrPK6devicePv+0x4fc>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80023be:	7aa1      	ldrb	r1, [r4, #10]
 80023c0:	7a63      	ldrb	r3, [r4, #9]
 80023c2:	4810      	ldr	r0, [pc, #64]	; (8002404 <_ZL8uart_isrPK6devicePv+0x52c>)
 80023c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023c8:	7ae1      	ldrb	r1, [r4, #11]
 80023ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80023ce:	4790      	blx	r2
			   	(status->signing->accept_unsigned_callback &&
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d1db      	bne.n	800238c <_ZL8uart_isrPK6devicePv+0x4b4>
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80023d4:	2303      	movs	r3, #3
 80023d6:	702b      	strb	r3, [r5, #0]
 80023d8:	e728      	b.n	800222c <_ZL8uart_isrPK6devicePv+0x354>
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 80023da:	2903      	cmp	r1, #3
 80023dc:	f43f ae17 	beq.w	800200e <_ZL8uart_isrPK6devicePv+0x136>
			if (mavlink_parse_char(MAVLINK_MAIN_CHANNEL, c, &mavlink_msg, &mavlink_status)) {
 80023e0:	2900      	cmp	r1, #0
 80023e2:	f43f ad7d 	beq.w	8001ee0 <_ZL8uart_isrPK6devicePv+0x8>
				handle_message(mavlink_msg);
 80023e6:	f004 f8ba 	bl	800655e <_Z14handle_messageR17__mavlink_message>
 80023ea:	e579      	b.n	8001ee0 <_ZL8uart_isrPK6devicePv+0x8>
				uart_tx_ptr = uart_tx_buf;
 80023ec:	4b13      	ldr	r3, [pc, #76]	; (800243c <_ZL8uart_isrPK6devicePv+0x564>)
 80023ee:	6033      	str	r3, [r6, #0]
				uart_irq_tx_disable(uart_dev);
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <_ZL8uart_isrPK6devicePv+0x568>)
 80023f2:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
 80023f4:	f003 fff4 	bl	80063e0 <z_impl_uart_irq_tx_disable>
}
 80023f8:	e572      	b.n	8001ee0 <_ZL8uart_isrPK6devicePv+0x8>
 80023fa:	bf00      	nop
 80023fc:	20001a72 	.word	0x20001a72
 8002400:	20001f06 	.word	0x20001f06
 8002404:	200015cc 	.word	0x200015cc
 8002408:	6a09e667 	.word	0x6a09e667
 800240c:	bb67ae85 	.word	0xbb67ae85
 8002410:	3c6ef372 	.word	0x3c6ef372
 8002414:	510e527f 	.word	0x510e527f
 8002418:	a54ff53a 	.word	0xa54ff53a
 800241c:	9b05688c 	.word	0x9b05688c
 8002420:	1f83d9ab 	.word	0x1f83d9ab
 8002424:	20001a74 	.word	0x20001a74
 8002428:	20001b86 	.word	0x20001b86
 800242c:	20001b88 	.word	0x20001b88
 8002430:	20001b8f 	.word	0x20001b8f
 8002434:	20001b89 	.word	0x20001b89
 8002438:	005b8d80 	.word	0x005b8d80
 800243c:	2000195a 	.word	0x2000195a
 8002440:	200015c8 	.word	0x200015c8

08002444 <_Z23mavlink_send_uart_bytesPKhi>:
	uart_irq_callback_set(uart_dev, uart_isr);
	uart_irq_rx_enable(uart_dev);
}

void mavlink_send_uart_bytes(const uint8_t *ch, int length)
{
 8002444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while(uart_tx_ctr > 0) {
 8002448:	4e0e      	ldr	r6, [pc, #56]	; (8002484 <_Z23mavlink_send_uart_bytesPKhi+0x40>)
{
 800244a:	4605      	mov	r5, r0
 800244c:	460c      	mov	r4, r1
	while(uart_tx_ctr > 0) {
 800244e:	8833      	ldrh	r3, [r6, #0]
 8002450:	b123      	cbz	r3, 800245c <_Z23mavlink_send_uart_bytesPKhi+0x18>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8002452:	2100      	movs	r1, #0
 8002454:	2032      	movs	r0, #50	; 0x32
 8002456:	f003 fd05 	bl	8005e64 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 800245a:	e7f8      	b.n	800244e <_Z23mavlink_send_uart_bytesPKhi+0xa>
		// another message being processed
		// let's wait for 5 milliseconds as sending a DISTANCE_SENSOR message at 115200 baudrate
		// should take around 4.43 milliseconds
		k_msleep(5);
	}
	memcpy(uart_tx_buf, ch, length);
 800245c:	4f0a      	ldr	r7, [pc, #40]	; (8002488 <_Z23mavlink_send_uart_bytesPKhi+0x44>)
 800245e:	4622      	mov	r2, r4
 8002460:	4629      	mov	r1, r5
 8002462:	4638      	mov	r0, r7
 8002464:	f006 f86d 	bl	8008542 <memcpy>
	uart_tx_ptr = uart_tx_buf;
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <_Z23mavlink_send_uart_bytesPKhi+0x48>)
	uart_tx_ctr = length;
 800246a:	8034      	strh	r4, [r6, #0]
	uart_tx_ptr = uart_tx_buf;
 800246c:	601f      	str	r7, [r3, #0]
	uart_irq_tx_enable(uart_dev);
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <_Z23mavlink_send_uart_bytesPKhi+0x4c>)
 8002470:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
 8002472:	6883      	ldr	r3, [r0, #8]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	b113      	cbz	r3, 800247e <_Z23mavlink_send_uart_bytesPKhi+0x3a>
}
 8002478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		api->irq_tx_enable(dev);
 800247c:	4718      	bx	r3
 800247e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002482:	bf00      	nop
 8002484:	20001958 	.word	0x20001958
 8002488:	2000195a 	.word	0x2000195a
 800248c:	20000000 	.word	0x20000000
 8002490:	200015c8 	.word	0x200015c8

08002494 <_Z20send_named_value_intPKci>:

void send_named_value_int(const char* name, int32_t value) {
 8002494:	b530      	push	{r4, r5, lr}
 8002496:	b0d7      	sub	sp, #348	; 0x15c
 8002498:	4605      	mov	r5, r0
 800249a:	460c      	mov	r4, r1
	uint8_t send_buf[30];
	mavlink_message_t mav_msg;
	mavlink_named_value_int_t msg = {};
 800249c:	2214      	movs	r2, #20
 800249e:	2100      	movs	r1, #0
 80024a0:	4668      	mov	r0, sp
 80024a2:	f006 f85c 	bl	800855e <memset>
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
 80024a6:	f005 ff5d 	bl	8008364 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / (from_hz / to_hz);
 80024aa:	220a      	movs	r2, #10
 80024ac:	2300      	movs	r3, #0
 80024ae:	f7fe faa9 	bl	8000a04 <__aeabi_uldivmod>
static inline int64_t k_uptime_delta(int64_t *reftime)
{
	int64_t uptime, delta;

	uptime = k_uptime_get();
	delta = uptime - *reftime;
 80024b2:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <_Z20send_named_value_intPKci+0x90>)
 80024b4:	6813      	ldr	r3, [r2, #0]
	*reftime = uptime;
 80024b6:	e9c2 0100 	strd	r0, r1, [r2]
	delta = uptime - *reftime;
 80024ba:	1ac3      	subs	r3, r0, r3
	msg.time_boot_ms = k_uptime_delta(&time_stamp);
	int len = strlen(name);
 80024bc:	4628      	mov	r0, r5
	msg.time_boot_ms = k_uptime_delta(&time_stamp);
 80024be:	9300      	str	r3, [sp, #0]
	int len = strlen(name);
 80024c0:	f7fe fc30 	bl	8000d24 <strlen>
	if (len > 10) len = 10;
	memcpy(msg.name, name, len);
 80024c4:	280a      	cmp	r0, #10
 80024c6:	4602      	mov	r2, r0
 80024c8:	4629      	mov	r1, r5
 80024ca:	bfa8      	it	ge
 80024cc:	220a      	movge	r2, #10
 80024ce:	a802      	add	r0, sp, #8
 80024d0:	f006 f837 	bl	8008542 <memcpy>
	msg.value = value;
	mavlink_msg_named_value_int_encode(OUR_ID, UWB_COMPONENT_ID, &mav_msg, &msg);
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <_Z20send_named_value_intPKci+0x94>)
	msg.value = value;
 80024d6:	9401      	str	r4, [sp, #4]
	mavlink_msg_named_value_int_encode(OUR_ID, UWB_COMPONENT_ID, &mav_msg, &msg);
 80024d8:	781d      	ldrb	r5, [r3, #0]
    _mav_put_int32_t(buf, 4, value);
    _mav_put_char_array(buf, 8, name, 10);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#else
    mavlink_named_value_int_t packet;
    packet.time_boot_ms = time_boot_ms;
 80024da:	9b00      	ldr	r3, [sp, #0]
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
	if (src == NULL) {
		memset(dest, 0, n);
	} else {
		memcpy(dest, src, n);
 80024dc:	a902      	add	r1, sp, #8
 80024de:	220a      	movs	r2, #10
 80024e0:	a807      	add	r0, sp, #28
    packet.value = value;
 80024e2:	e9cd 3405 	strd	r3, r4, [sp, #20]
 80024e6:	f006 f82c 	bl	8008542 <memcpy>
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
 80024ea:	a905      	add	r1, sp, #20
 80024ec:	2212      	movs	r2, #18
 80024ee:	a810      	add	r0, sp, #64	; 0x40
 80024f0:	f006 f827 	bl	8008542 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_NAMED_VALUE_INT;
 80024f4:	f06f 0203 	mvn.w	r2, #3
 80024f8:	2300      	movs	r3, #0
 80024fa:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 80024fe:	4629      	mov	r1, r5
 8002500:	222c      	movs	r2, #44	; 0x2c
 8002502:	a80d      	add	r0, sp, #52	; 0x34
 8002504:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 8002508:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800250c:	f7ff fb9e 	bl	8001c4c <mavlink_finalize_message_buffer.constprop.0.isra.0>
	int n = mavlink_msg_to_send_buffer(send_buf, &mav_msg);
 8002510:	a90d      	add	r1, sp, #52	; 0x34
 8002512:	a805      	add	r0, sp, #20
 8002514:	f003 ff89 	bl	800642a <mavlink_msg_to_send_buffer>
 8002518:	4601      	mov	r1, r0
	mavlink_send_uart_bytes(send_buf, n);
 800251a:	a805      	add	r0, sp, #20
 800251c:	f7ff ff92 	bl	8002444 <_Z23mavlink_send_uart_bytesPKhi>
}
 8002520:	b057      	add	sp, #348	; 0x15c
 8002522:	bd30      	pop	{r4, r5, pc}
 8002524:	20000340 	.word	0x20000340
 8002528:	20001a71 	.word	0x20001a71

0800252c <_Z32distance_calculator_thread_entryv>:
		} */
		k_timer_status_sync(&timer);
	}
}

void distance_calculator_thread_entry(void) {
 800252c:	b5f0      	push	{r4, r5, r6, r7, lr}
	coords[THEIR_ID].latitude = 53.541350;
	coords[THEIR_ID].longitude = 9.985102;
	coords[THEIR_ID].altitude = 10.0;
	struct k_timer timer;

	k_timer_init(&timer, NULL, NULL);
 800252e:	2200      	movs	r2, #0
void distance_calculator_thread_entry(void) {
 8002530:	b091      	sub	sp, #68	; 0x44
	k_timer_init(&timer, NULL, NULL);
 8002532:	4611      	mov	r1, r2
 8002534:	a802      	add	r0, sp, #8
 8002536:	f005 ff45 	bl	80083c4 <k_timer_init>
		/* coverity[OVERRUN] */
		return (void *) arch_syscall_invoke3(*(uintptr_t *)&queue, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
 800253a:	4d0f      	ldr	r5, [pc, #60]	; (8002578 <_Z32distance_calculator_thread_entryv+0x4c>)
 800253c:	2600      	movs	r6, #0
 800253e:	2700      	movs	r7, #0
	z_impl_k_timer_start(timer, duration, period);
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	e9cd 6700 	strd	r6, r7, [sp]
 8002548:	2300      	movs	r3, #0
 800254a:	a802      	add	r0, sp, #8
 800254c:	f003 fe8e 	bl	800626c <z_impl_k_timer_start>
	return z_impl_k_queue_get(queue, timeout);
 8002550:	2200      	movs	r2, #0
 8002552:	2300      	movs	r3, #0
 8002554:	4628      	mov	r0, r5
 8002556:	f003 f967 	bl	8005828 <z_impl_k_queue_get>
	struct named_values* new_named_value;
	while (1) {
		bool new_data = false;
		// we publish distances twice a second
		k_timer_start(&timer, K_MSEC(500), K_NO_WAIT);
		while((new_named_value = reinterpret_cast<struct named_values*>(k_fifo_get(&named_values_fifo, K_NO_WAIT)))) {
 800255a:	4604      	mov	r4, r0
 800255c:	b138      	cbz	r0, 800256e <_Z32distance_calculator_thread_entryv+0x42>
			send_named_value_int(new_named_value->name, new_named_value->value);
 800255e:	6901      	ldr	r1, [r0, #16]
 8002560:	3004      	adds	r0, #4
 8002562:	f7ff ff97 	bl	8002494 <_Z20send_named_value_intPKci>
			k_free(new_named_value);
 8002566:	4620      	mov	r0, r4
 8002568:	f005 ff68 	bl	800843c <k_free>
		while((new_named_value = reinterpret_cast<struct named_values*>(k_fifo_get(&named_values_fifo, K_NO_WAIT)))) {
 800256c:	e7f0      	b.n	8002550 <_Z32distance_calculator_thread_entryv+0x24>
	return z_impl_k_timer_status_sync(timer);
 800256e:	a802      	add	r0, sp, #8
 8002570:	f003 feca 	bl	8006308 <z_impl_k_timer_status_sync>
 8002574:	e7e4      	b.n	8002540 <_Z32distance_calculator_thread_entryv+0x14>
 8002576:	bf00      	nop
 8002578:	20000268 	.word	0x20000268

0800257c <_Z23read_range_thread_entryv>:
void read_range_thread_entry(void) {
 800257c:	b530      	push	{r4, r5, lr}
 800257e:	b093      	sub	sp, #76	; 0x4c
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8002580:	4829      	ldr	r0, [pc, #164]	; (8002628 <_Z23read_range_thread_entryv+0xac>)
 8002582:	f002 ff05 	bl	8005390 <z_impl_device_get_binding>
	if (!i2c_dev) {
 8002586:	4604      	mov	r4, r0
 8002588:	b928      	cbnz	r0, 8002596 <_Z23read_range_thread_entryv+0x1a>
		printk("I2C device driver not found\n");
 800258a:	4828      	ldr	r0, [pc, #160]	; (800262c <_Z23read_range_thread_entryv+0xb0>)
}
 800258c:	b013      	add	sp, #76	; 0x4c
 800258e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("I2C device driver not found\n");
 8002592:	f004 b857 	b.w	8006644 <printk>
		printk("I2C device driver found\n");
 8002596:	4826      	ldr	r0, [pc, #152]	; (8002630 <_Z23read_range_thread_entryv+0xb4>)
 8002598:	f004 f854 	bl	8006644 <printk>
	queue_named_value("test", 1);
 800259c:	4825      	ldr	r0, [pc, #148]	; (8002634 <_Z23read_range_thread_entryv+0xb8>)
 800259e:	2101      	movs	r1, #1
 80025a0:	f7ff fc76 	bl	8001e90 <_Z17queue_named_valuePKci>
		i2c_addr(PozyxConstants::I2C_ADDRESS)
 80025a4:	234b      	movs	r3, #75	; 0x4b
		write_byte(PozyxRegisters::RANGE_PROTOCOL, static_cast<uint8_t>(protocol));
 80025a6:	2201      	movs	r2, #1
 80025a8:	2121      	movs	r1, #33	; 0x21
 80025aa:	a802      	add	r0, sp, #8
		i2c_addr(PozyxConstants::I2C_ADDRESS)
 80025ac:	9402      	str	r4, [sp, #8]
 80025ae:	f8ad 300c 	strh.w	r3, [sp, #12]
		write_byte(PozyxRegisters::RANGE_PROTOCOL, static_cast<uint8_t>(protocol));
 80025b2:	f003 fff5 	bl	80065a0 <_ZN8PozyxDev10write_byteEhh>
	k_timer_init(&timer, NULL, NULL);
 80025b6:	2200      	movs	r2, #0
 80025b8:	4611      	mov	r1, r2
 80025ba:	a804      	add	r0, sp, #16
 80025bc:	f005 ff02 	bl	80083c4 <k_timer_init>
 80025c0:	2400      	movs	r4, #0
 80025c2:	2500      	movs	r5, #0
	z_impl_k_timer_start(timer, duration, period);
 80025c4:	2300      	movs	r3, #0
 80025c6:	a804      	add	r0, sp, #16
 80025c8:	e9cd 4500 	strd	r4, r5, [sp]
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	f003 fe4c 	bl	800626c <z_impl_k_timer_start>
		write_byte(PozyxRegisters::RANGE_PROTOCOL, static_cast<uint8_t>(protocol));
 80025d4:	2201      	movs	r2, #1
 80025d6:	a802      	add	r0, sp, #8
 80025d8:	2121      	movs	r1, #33	; 0x21
 80025da:	f003 ffe1 	bl	80065a0 <_ZN8PozyxDev10write_byteEhh>
		return read_byte(PozyxRegisters::WHO_AM_I);
 80025de:	2100      	movs	r1, #0
 80025e0:	a802      	add	r0, sp, #8
 80025e2:	f003 fffb 	bl	80065dc <_ZN8PozyxDev9read_byteEh>
 80025e6:	4601      	mov	r1, r0
		queue_named_value("whoami", pozyx.who_am_i());
 80025e8:	4813      	ldr	r0, [pc, #76]	; (8002638 <_Z23read_range_thread_entryv+0xbc>)
 80025ea:	f7ff fc51 	bl	8001e90 <_Z17queue_named_valuePKci>
		return read_byte(PozyxRegisters::FIRMWARE_VERSION);
 80025ee:	2101      	movs	r1, #1
 80025f0:	a802      	add	r0, sp, #8
 80025f2:	f003 fff3 	bl	80065dc <_ZN8PozyxDev9read_byteEh>
 80025f6:	4601      	mov	r1, r0
		queue_named_value("firmware", pozyx.firmware_version());
 80025f8:	4810      	ldr	r0, [pc, #64]	; (800263c <_Z23read_range_thread_entryv+0xc0>)
 80025fa:	f7ff fc49 	bl	8001e90 <_Z17queue_named_valuePKci>
		return read_byte(PozyxRegisters::HARDWARE_VERSION);
 80025fe:	2102      	movs	r1, #2
 8002600:	a802      	add	r0, sp, #8
 8002602:	f003 ffeb 	bl	80065dc <_ZN8PozyxDev9read_byteEh>
 8002606:	4601      	mov	r1, r0
		queue_named_value("hardware", pozyx.hardware_version());
 8002608:	480d      	ldr	r0, [pc, #52]	; (8002640 <_Z23read_range_thread_entryv+0xc4>)
 800260a:	f7ff fc41 	bl	8001e90 <_Z17queue_named_valuePKci>
		return PozyxConstants::RangeProtocol(read_byte(PozyxRegisters::RANGE_PROTOCOL));
 800260e:	2121      	movs	r1, #33	; 0x21
 8002610:	a802      	add	r0, sp, #8
 8002612:	f003 ffe3 	bl	80065dc <_ZN8PozyxDev9read_byteEh>
 8002616:	4601      	mov	r1, r0
		queue_named_value("rngproto", static_cast<uint8_t>(pozyx.range_protocol()));
 8002618:	480a      	ldr	r0, [pc, #40]	; (8002644 <_Z23read_range_thread_entryv+0xc8>)
 800261a:	f7ff fc39 	bl	8001e90 <_Z17queue_named_valuePKci>
	return z_impl_k_timer_status_sync(timer);
 800261e:	a804      	add	r0, sp, #16
 8002620:	f003 fe72 	bl	8006308 <z_impl_k_timer_status_sync>
 8002624:	e7ce      	b.n	80025c4 <_Z23read_range_thread_entryv+0x48>
 8002626:	bf00      	nop
 8002628:	08009902 	.word	0x08009902
 800262c:	08009908 	.word	0x08009908
 8002630:	08009925 	.word	0x08009925
 8002634:	0800993e 	.word	0x0800993e
 8002638:	08009943 	.word	0x08009943
 800263c:	0800994a 	.word	0x0800994a
 8002640:	08009953 	.word	0x08009953
 8002644:	0800995c 	.word	0x0800995c

08002648 <main>:
	// radio_api = (struct ieee802154_radio_api *)ieee802154_dev->api;
	// get_mac(ieee802154_dev);
}

void main(void)
{
 8002648:	b510      	push	{r4, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
	return z_impl_k_uptime_ticks();
 800264c:	f005 fe8a 	bl	8008364 <z_impl_k_uptime_ticks>
 8002650:	220a      	movs	r2, #10
 8002652:	2300      	movs	r3, #0
 8002654:	f7fe f9d6 	bl	8000a04 <__aeabi_uldivmod>
	time_stamp = k_uptime_get();
 8002658:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <main+0x9c>)
 800265a:	e9c3 0100 	strd	r0, r1, [r3]
 800265e:	4822      	ldr	r0, [pc, #136]	; (80026e8 <main+0xa0>)
	uart_dev = device_get_binding("UART_3");
 8002660:	4c22      	ldr	r4, [pc, #136]	; (80026ec <main+0xa4>)
 8002662:	f002 fe95 	bl	8005390 <z_impl_device_get_binding>
 8002666:	6020      	str	r0, [r4, #0]
	if (api->config_get == NULL) {
 8002668:	6883      	ldr	r3, [r0, #8]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	b10b      	cbz	r3, 8002672 <main+0x2a>
	return api->config_get(dev, cfg);
 800266e:	a908      	add	r1, sp, #32
 8002670:	4798      	blx	r3
	cfg.baudrate = 115200;
 8002672:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	uart_configure(uart_dev, &cfg);
 8002676:	6820      	ldr	r0, [r4, #0]
	cfg.baudrate = 115200;
 8002678:	9308      	str	r3, [sp, #32]
	if (api->configure == NULL) {
 800267a:	6883      	ldr	r3, [r0, #8]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	b10b      	cbz	r3, 8002684 <main+0x3c>
	return api->configure(dev, cfg);
 8002680:	a908      	add	r1, sp, #32
 8002682:	4798      	blx	r3
	uart_irq_rx_disable(uart_dev);
 8002684:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_disable != NULL) {
 8002686:	6883      	ldr	r3, [r0, #8]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	b103      	cbz	r3, 800268e <main+0x46>
		api->irq_rx_disable(dev);
 800268c:	4798      	blx	r3
	uart_irq_tx_disable(uart_dev);
 800268e:	6820      	ldr	r0, [r4, #0]
	z_impl_uart_irq_tx_disable(dev);
 8002690:	f003 fea6 	bl	80063e0 <z_impl_uart_irq_tx_disable>
	uart_irq_callback_set(uart_dev, uart_isr);
 8002694:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 8002696:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8002698:	b123      	cbz	r3, 80026a4 <main+0x5c>
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	b113      	cbz	r3, 80026a4 <main+0x5c>
		api->irq_callback_set(dev, cb, user_data);
 800269e:	4914      	ldr	r1, [pc, #80]	; (80026f0 <main+0xa8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	4798      	blx	r3
	uart_irq_rx_enable(uart_dev);
 80026a4:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable != NULL) {
 80026a6:	6883      	ldr	r3, [r0, #8]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	b103      	cbz	r3, 80026ae <main+0x66>
		api->irq_rx_enable(dev);
 80026ac:	4798      	blx	r3
	uart_init();
	// init_ieee802154();

	printk("Creating threads\n");
 80026ae:	4811      	ldr	r0, [pc, #68]	; (80026f4 <main+0xac>)
 80026b0:	f003 ffc8 	bl	8006644 <printk>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2300      	movs	r3, #0
 80026b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80026bc:	2300      	movs	r3, #0
 80026be:	f06f 0207 	mvn.w	r2, #7
 80026c2:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80026c6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	490a      	ldr	r1, [pc, #40]	; (80026f8 <main+0xb0>)
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <main+0xb4>)
 80026d0:	480b      	ldr	r0, [pc, #44]	; (8002700 <main+0xb8>)
 80026d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026d6:	f003 f82f 	bl	8005738 <z_impl_k_thread_create>
	while (1) {
		// doing nothing here
		k_timer_start(&timer, K_MSEC(1000), K_NO_WAIT);
		k_timer_status_sync(&timer);
	}*/
}
 80026da:	b00a      	add	sp, #40	; 0x28
 80026dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	read_range_thread_entry();
 80026e0:	f7ff bf4c 	b.w	800257c <_Z23read_range_thread_entryv>
 80026e4:	20000340 	.word	0x20000340
 80026e8:	08009965 	.word	0x08009965
 80026ec:	200015c8 	.word	0x200015c8
 80026f0:	08001ed9 	.word	0x08001ed9
 80026f4:	0800996c 	.word	0x0800996c
 80026f8:	20002080 	.word	0x20002080
 80026fc:	0800252d 	.word	0x0800252d
 8002700:	20000280 	.word	0x20000280

08002704 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8002704:	680b      	ldr	r3, [r1, #0]
 8002706:	3301      	adds	r3, #1
 8002708:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 800270a:	4b01      	ldr	r3, [pc, #4]	; (8002710 <char_out+0xc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4718      	bx	r3
 8002710:	20000004 	.word	0x20000004

08002714 <__printk_hook_install>:
	_char_out = fn;
 8002714:	4b01      	ldr	r3, [pc, #4]	; (800271c <__printk_hook_install+0x8>)
 8002716:	6018      	str	r0, [r3, #0]
}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000004 	.word	0x20000004

08002720 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 8002720:	b507      	push	{r0, r1, r2, lr}
 8002722:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8002724:	2100      	movs	r1, #0
{
 8002726:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 8002728:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 800272a:	4803      	ldr	r0, [pc, #12]	; (8002738 <vprintk+0x18>)
 800272c:	a901      	add	r1, sp, #4
 800272e:	f7fe fb4b 	bl	8000dc8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 8002732:	b003      	add	sp, #12
 8002734:	f85d fb04 	ldr.w	pc, [sp], #4
 8002738:	08002705 	.word	0x08002705

0800273c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 800273c:	b530      	push	{r4, r5, lr}
 800273e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 8002740:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
 8002744:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8002746:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
 8002748:	a901      	add	r1, sp, #4
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
 800274c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
 800274e:	f7fe fb3b 	bl	8000dc8 <cbvprintf>

	if (ctx.count < ctx.max) {
 8002752:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8002756:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 8002758:	bfb8      	it	lt
 800275a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 800275c:	b005      	add	sp, #20
 800275e:	bd30      	pop	{r4, r5, pc}
 8002760:	0800661f 	.word	0x0800661f

08002764 <extract_decimal>:
{
 8002764:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (isdigit((int)(unsigned char)*sp)) {
 8002766:	4e09      	ldr	r6, [pc, #36]	; (800278c <extract_decimal+0x28>)
 8002768:	6801      	ldr	r1, [r0, #0]
{
 800276a:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
 800276c:	270a      	movs	r7, #10
	size_t val = 0;
 800276e:	2000      	movs	r0, #0
 8002770:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
 8002772:	3101      	adds	r1, #1
 8002774:	7823      	ldrb	r3, [r4, #0]
 8002776:	5d9d      	ldrb	r5, [r3, r6]
 8002778:	076d      	lsls	r5, r5, #29
 800277a:	d401      	bmi.n	8002780 <extract_decimal+0x1c>
	*str = sp;
 800277c:	6014      	str	r4, [r2, #0]
}
 800277e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 8002780:	fb07 3300 	mla	r3, r7, r0, r3
 8002784:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002788:	e7f2      	b.n	8002770 <extract_decimal+0xc>
 800278a:	bf00      	nop
 800278c:	0800a253 	.word	0x0800a253

08002790 <encode_uint>:
{
 8002790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002794:	4615      	mov	r5, r2
 8002796:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8002798:	78d3      	ldrb	r3, [r2, #3]
 800279a:	4a22      	ldr	r2, [pc, #136]	; (8002824 <encode_uint+0x94>)
 800279c:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
 80027a0:	2b6f      	cmp	r3, #111	; 0x6f
{
 80027a2:	4680      	mov	r8, r0
 80027a4:	460f      	mov	r7, r1
 80027a6:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 80027aa:	d029      	beq.n	8002800 <encode_uint+0x70>
 80027ac:	d824      	bhi.n	80027f8 <encode_uint+0x68>
		return 16;
 80027ae:	2b58      	cmp	r3, #88	; 0x58
 80027b0:	bf14      	ite	ne
 80027b2:	260a      	movne	r6, #10
 80027b4:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 80027b6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 80027ba:	4632      	mov	r2, r6
 80027bc:	2300      	movs	r3, #0
 80027be:	4640      	mov	r0, r8
 80027c0:	4639      	mov	r1, r7
 80027c2:	f7fe f91f 	bl	8000a04 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80027c6:	2a09      	cmp	r2, #9
 80027c8:	b2d4      	uxtb	r4, r2
 80027ca:	d81e      	bhi.n	800280a <encode_uint+0x7a>
 80027cc:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 80027ce:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80027d0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 80027d2:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80027d6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 80027da:	d301      	bcc.n	80027e0 <encode_uint+0x50>
 80027dc:	45d1      	cmp	r9, sl
 80027de:	d811      	bhi.n	8002804 <encode_uint+0x74>
	if (conv->flag_hash) {
 80027e0:	782b      	ldrb	r3, [r5, #0]
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	d505      	bpl.n	80027f2 <encode_uint+0x62>
		if (radix == 8) {
 80027e6:	2e08      	cmp	r6, #8
 80027e8:	d115      	bne.n	8002816 <encode_uint+0x86>
			conv->altform_0 = true;
 80027ea:	78ab      	ldrb	r3, [r5, #2]
 80027ec:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 80027f0:	70ab      	strb	r3, [r5, #2]
}
 80027f2:	4648      	mov	r0, r9
 80027f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 80027f8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 80027fc:	2b70      	cmp	r3, #112	; 0x70
 80027fe:	e7d7      	b.n	80027b0 <encode_uint+0x20>
	switch (specifier) {
 8002800:	2608      	movs	r6, #8
 8002802:	e7d8      	b.n	80027b6 <encode_uint+0x26>
		value /= radix;
 8002804:	4680      	mov	r8, r0
 8002806:	460f      	mov	r7, r1
 8002808:	e7d7      	b.n	80027ba <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800280a:	f1bb 0f01 	cmp.w	fp, #1
 800280e:	bf0c      	ite	eq
 8002810:	3437      	addeq	r4, #55	; 0x37
 8002812:	3457      	addne	r4, #87	; 0x57
 8002814:	e7db      	b.n	80027ce <encode_uint+0x3e>
		} else if (radix == 16) {
 8002816:	2e10      	cmp	r6, #16
 8002818:	d1eb      	bne.n	80027f2 <encode_uint+0x62>
			conv->altform_0c = true;
 800281a:	78ab      	ldrb	r3, [r5, #2]
 800281c:	f043 0310 	orr.w	r3, r3, #16
 8002820:	e7e6      	b.n	80027f0 <encode_uint+0x60>
 8002822:	bf00      	nop
 8002824:	0800a253 	.word	0x0800a253

08002828 <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002828:	f04f 0210 	mov.w	r2, #16
 800282c:	f3ef 8311 	mrs	r3, BASEPRI
 8002830:	f382 8811 	msr	BASEPRI, r2
 8002834:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <st_stm32f4_init+0x24>)
 8002842:	4a03      	ldr	r2, [pc, #12]	; (8002850 <st_stm32f4_init+0x28>)
 8002844:	601a      	str	r2, [r3, #0]

	return 0;
}
 8002846:	2000      	movs	r0, #0
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	200000a0 	.word	0x200000a0
 8002850:	00f42400 	.word	0x00f42400

08002854 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8002854:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8002856:	4910      	ldr	r1, [pc, #64]	; (8002898 <enable_logger+0x44>)
 8002858:	4810      	ldr	r0, [pc, #64]	; (800289c <enable_logger+0x48>)
{
 800285a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 800285c:	2200      	movs	r2, #0
 800285e:	f005 fdb1 	bl	80083c4 <k_timer_init>
 8002862:	4d0f      	ldr	r5, [pc, #60]	; (80028a0 <enable_logger+0x4c>)
 8002864:	490f      	ldr	r1, [pc, #60]	; (80028a4 <enable_logger+0x50>)
 8002866:	2200      	movs	r2, #0
 8002868:	2300      	movs	r3, #0
 800286a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800286e:	2400      	movs	r4, #0
 8002870:	230e      	movs	r3, #14
 8002872:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8002876:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <enable_logger+0x54>)
 800287c:	9400      	str	r4, [sp, #0]
 800287e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002882:	4628      	mov	r0, r5
 8002884:	f002 ff58 	bl	8005738 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8002888:	4908      	ldr	r1, [pc, #32]	; (80028ac <enable_logger+0x58>)
 800288a:	4628      	mov	r0, r5
 800288c:	f005 fbb5 	bl	8007ffa <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8002890:	4620      	mov	r0, r4
 8002892:	b009      	add	sp, #36	; 0x24
 8002894:	bd30      	pop	{r4, r5, pc}
 8002896:	bf00      	nop
 8002898:	080028b1 	.word	0x080028b1
 800289c:	20000348 	.word	0x20000348
 80028a0:	20000380 	.word	0x20000380
 80028a4:	20003100 	.word	0x20003100
 80028a8:	08002c7d 	.word	0x08002c7d
 80028ac:	08009984 	.word	0x08009984

080028b0 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 80028b0:	4801      	ldr	r0, [pc, #4]	; (80028b8 <log_process_thread_timer_expiry_fn+0x8>)
 80028b2:	f002 bfeb 	b.w	800588c <z_impl_k_sem_give>
 80028b6:	bf00      	nop
 80028b8:	20000244 	.word	0x20000244

080028bc <z_log_get_s_mask>:
{
 80028bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028be:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
 80028c0:	4e0f      	ldr	r6, [pc, #60]	; (8002900 <z_log_get_s_mask+0x44>)
	uint32_t mask = 0U;
 80028c2:	2000      	movs	r0, #0
	uint32_t arg = 0U;
 80028c4:	4603      	mov	r3, r0
	bool arm = false;
 80028c6:	4602      	mov	r2, r0
				mask |= BIT(arg);
 80028c8:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
 80028ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80028ce:	b10c      	cbz	r4, 80028d4 <z_log_get_s_mask+0x18>
 80028d0:	428b      	cmp	r3, r1
 80028d2:	d300      	bcc.n	80028d6 <z_log_get_s_mask+0x1a>
}
 80028d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
 80028d6:	2c25      	cmp	r4, #37	; 0x25
 80028d8:	d102      	bne.n	80028e0 <z_log_get_s_mask+0x24>
			arm = !arm;
 80028da:	f082 0201 	eor.w	r2, r2, #1
 80028de:	e7f4      	b.n	80028ca <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
 80028e0:	2a00      	cmp	r2, #0
 80028e2:	d0f2      	beq.n	80028ca <z_log_get_s_mask+0xe>
 80028e4:	f814 c006 	ldrb.w	ip, [r4, r6]
 80028e8:	f01c 0f03 	tst.w	ip, #3
 80028ec:	d0ed      	beq.n	80028ca <z_log_get_s_mask+0xe>
			if (curr == 's') {
 80028ee:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
 80028f0:	bf04      	itt	eq
 80028f2:	fa07 f203 	lsleq.w	r2, r7, r3
 80028f6:	4310      	orreq	r0, r2
			arg++;
 80028f8:	3301      	adds	r3, #1
			arm = false;
 80028fa:	2200      	movs	r2, #0
 80028fc:	e7e5      	b.n	80028ca <z_log_get_s_mask+0xe>
 80028fe:	bf00      	nop
 8002900:	0800a253 	.word	0x0800a253

08002904 <log_core_init>:
{
 8002904:	b510      	push	{r4, lr}
	panic_mode = false;
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <log_core_init+0x30>)
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_lf_get_timestamp;
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <log_core_init+0x34>)
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <log_core_init+0x38>)
 8002910:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8002912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002916:	f000 fcc5 	bl	80032a4 <log_output_timestamp_freq_set>
		log_msg_pool_init();
 800291a:	f000 fa73 	bl	8002e04 <log_msg_pool_init>
		log_list_init(&list);
 800291e:	4808      	ldr	r0, [pc, #32]	; (8002940 <log_core_init+0x3c>)
 8002920:	f004 f9b0 	bl	8006c84 <log_list_init>
}
 8002924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8002928:	4906      	ldr	r1, [pc, #24]	; (8002944 <log_core_init+0x40>)
 800292a:	4807      	ldr	r0, [pc, #28]	; (8002948 <log_core_init+0x44>)
 800292c:	2304      	movs	r3, #4
 800292e:	2228      	movs	r2, #40	; 0x28
 8002930:	f005 bb18 	b.w	8007f64 <k_mem_slab_init>
 8002934:	2000202a 	.word	0x2000202a
 8002938:	20000008 	.word	0x20000008
 800293c:	08006cc3 	.word	0x08006cc3
 8002940:	20001650 	.word	0x20001650
 8002944:	20004300 	.word	0x20004300
 8002948:	20001658 	.word	0x20001658

0800294c <get_msg>:
{
 800294c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800294e:	f04f 0310 	mov.w	r3, #16
 8002952:	f3ef 8411 	mrs	r4, BASEPRI
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
 800295e:	4804      	ldr	r0, [pc, #16]	; (8002970 <get_msg+0x24>)
 8002960:	f004 f9a0 	bl	8006ca4 <log_list_head_get>
	__asm__ volatile(
 8002964:	f384 8811 	msr	BASEPRI, r4
 8002968:	f3bf 8f6f 	isb	sy
}
 800296c:	bd10      	pop	{r4, pc}
 800296e:	bf00      	nop
 8002970:	20001650 	.word	0x20001650

08002974 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <z_log_dropped+0x1c>)
 8002976:	f3bf 8f5b 	dmb	ish
 800297a:	e853 2f00 	ldrex	r2, [r3]
 800297e:	3201      	adds	r2, #1
 8002980:	e843 2100 	strex	r1, r2, [r3]
 8002984:	2900      	cmp	r1, #0
 8002986:	d1f8      	bne.n	800297a <z_log_dropped+0x6>
 8002988:	f3bf 8f5b 	dmb	ish
}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20001648 	.word	0x20001648

08002994 <z_log_dropped_read_and_clear>:
}
 8002994:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <z_log_dropped_read_and_clear+0x1c>)
 8002998:	f3bf 8f5b 	dmb	ish
 800299c:	4602      	mov	r2, r0
 800299e:	e853 0f00 	ldrex	r0, [r3]
 80029a2:	e843 2100 	strex	r1, r2, [r3]
 80029a6:	2900      	cmp	r1, #0
 80029a8:	d1f9      	bne.n	800299e <z_log_dropped_read_and_clear+0xa>
 80029aa:	f3bf 8f5b 	dmb	ish
 80029ae:	4770      	bx	lr
 80029b0:	20001648 	.word	0x20001648

080029b4 <dropped_notify>:
{
 80029b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 80029b6:	f7ff ffed 	bl	8002994 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 80029ba:	4c0a      	ldr	r4, [pc, #40]	; (80029e4 <dropped_notify+0x30>)
 80029bc:	4d0a      	ldr	r5, [pc, #40]	; (80029e8 <dropped_notify+0x34>)
 80029be:	1b2d      	subs	r5, r5, r4
 80029c0:	4607      	mov	r7, r0
 80029c2:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 80029c4:	2600      	movs	r6, #0
 80029c6:	42ae      	cmp	r6, r5
 80029c8:	db00      	blt.n	80029cc <dropped_notify+0x18>
}
 80029ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 80029cc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 80029ce:	795b      	ldrb	r3, [r3, #5]
 80029d0:	b12b      	cbz	r3, 80029de <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	b113      	cbz	r3, 80029de <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
 80029d8:	4639      	mov	r1, r7
 80029da:	4620      	mov	r0, r4
 80029dc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 80029de:	3601      	adds	r6, #1
 80029e0:	3410      	adds	r4, #16
 80029e2:	e7f0      	b.n	80029c6 <dropped_notify+0x12>
 80029e4:	080089b4 	.word	0x080089b4
 80029e8:	080089c4 	.word	0x080089c4

080029ec <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 80029ec:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <log_source_name_get+0x14>)
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <log_source_name_get+0x18>)
 80029f0:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 80029f2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 80029f6:	bf34      	ite	cc
 80029f8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
 80029fc:	2000      	movcs	r0, #0
}
 80029fe:	4770      	bx	lr
 8002a00:	08008974 	.word	0x08008974
 8002a04:	080089b4 	.word	0x080089b4

08002a08 <log_backend_enable>:
	id += backend - log_backend_get(0);
 8002a08:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <log_backend_enable+0x28>)
	backend->cb->id = id;
 8002a0a:	6843      	ldr	r3, [r0, #4]
 8002a0c:	1a80      	subs	r0, r0, r2
{
 8002a0e:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
 8002a10:	1100      	asrs	r0, r0, #4
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8002a12:	4c08      	ldr	r4, [pc, #32]	; (8002a34 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
 8002a14:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
 8002a16:	3001      	adds	r0, #1
	backend->cb->active = true;
 8002a18:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
 8002a1a:	7118      	strb	r0, [r3, #4]
 8002a1c:	715a      	strb	r2, [r3, #5]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8002a1e:	7823      	ldrb	r3, [r4, #0]
 8002a20:	b913      	cbnz	r3, 8002a28 <log_backend_enable+0x20>
 8002a22:	4805      	ldr	r0, [pc, #20]	; (8002a38 <log_backend_enable+0x30>)
 8002a24:	f002 ff32 	bl	800588c <z_impl_k_sem_give>
	backend_attached = true;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	7023      	strb	r3, [r4, #0]
}
 8002a2c:	bd10      	pop	{r4, pc}
 8002a2e:	bf00      	nop
 8002a30:	080089b4 	.word	0x080089b4
 8002a34:	20002029 	.word	0x20002029
 8002a38:	20000244 	.word	0x20000244

08002a3c <log_init>:
{
 8002a3c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <log_init+0x4c>)
 8002a40:	f3bf 8f5b 	dmb	ish
 8002a44:	e853 5f00 	ldrex	r5, [r3]
 8002a48:	1c6a      	adds	r2, r5, #1
 8002a4a:	e843 2100 	strex	r1, r2, [r3]
 8002a4e:	2900      	cmp	r1, #0
 8002a50:	d1f8      	bne.n	8002a44 <log_init+0x8>
 8002a52:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8002a56:	b92d      	cbnz	r5, 8002a64 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
 8002a58:	4c0c      	ldr	r4, [pc, #48]	; (8002a8c <log_init+0x50>)
 8002a5a:	4e0d      	ldr	r6, [pc, #52]	; (8002a90 <log_init+0x54>)
 8002a5c:	1b36      	subs	r6, r6, r4
 8002a5e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8002a60:	42b5      	cmp	r5, r6
 8002a62:	db00      	blt.n	8002a66 <log_init+0x2a>
}
 8002a64:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 8002a66:	7b23      	ldrb	r3, [r4, #12]
 8002a68:	b153      	cbz	r3, 8002a80 <log_init+0x44>
			if (backend->api->init != NULL) {
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	b10b      	cbz	r3, 8002a74 <log_init+0x38>
				backend->api->init(backend);
 8002a70:	4620      	mov	r0, r4
 8002a72:	4798      	blx	r3
			log_backend_enable(backend,
 8002a74:	6863      	ldr	r3, [r4, #4]
 8002a76:	2204      	movs	r2, #4
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f7ff ffc4 	bl	8002a08 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8002a80:	3501      	adds	r5, #1
 8002a82:	3410      	adds	r4, #16
 8002a84:	e7ec      	b.n	8002a60 <log_init+0x24>
 8002a86:	bf00      	nop
 8002a88:	2000164c 	.word	0x2000164c
 8002a8c:	080089b4 	.word	0x080089b4
 8002a90:	080089c4 	.word	0x080089c4

08002a94 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <z_log_strdup+0x60>)
 8002a96:	4298      	cmp	r0, r3
{
 8002a98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a9a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8002a9c:	d302      	bcc.n	8002aa4 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <z_log_strdup+0x64>)
 8002aa0:	4298      	cmp	r0, r3
 8002aa2:	d321      	bcc.n	8002ae8 <z_log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8002aa4:	4815      	ldr	r0, [pc, #84]	; (8002afc <z_log_strdup+0x68>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	a901      	add	r1, sp, #4
 8002aac:	f002 fde4 	bl	8005678 <k_mem_slab_alloc>
	if (err != 0) {
 8002ab0:	4605      	mov	r5, r0
 8002ab2:	b9e0      	cbnz	r0, 8002aee <z_log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	9b01      	ldr	r3, [sp, #4]
 8002ab8:	f3bf 8f5b 	dmb	ish
 8002abc:	e853 1f00 	ldrex	r1, [r3]
 8002ac0:	e843 2000 	strex	r0, r2, [r3]
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d1f9      	bne.n	8002abc <z_log_strdup+0x28>
 8002ac8:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 8002acc:	9e01      	ldr	r6, [sp, #4]
 8002ace:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8002ad0:	221f      	movs	r2, #31
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	f005 fd4a 	bl	800856e <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8002ada:	227e      	movs	r2, #126	; 0x7e
 8002adc:	4603      	mov	r3, r0
 8002ade:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 8002ae2:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
 8002ae6:	461c      	mov	r4, r3
}
 8002ae8:	4620      	mov	r0, r4
 8002aea:	b002      	add	sp, #8
 8002aec:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <z_log_strdup+0x6c>)
 8002af0:	e7f9      	b.n	8002ae6 <z_log_strdup+0x52>
 8002af2:	bf00      	nop
 8002af4:	080085b4 	.word	0x080085b4
 8002af8:	0800a354 	.word	0x0800a354
 8002afc:	20001658 	.word	0x20001658
 8002b00:	0800998c 	.word	0x0800998c

08002b04 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 8002b04:	b148      	cbz	r0, 8002b1a <log_is_strdup+0x16>
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <log_is_strdup+0x18>)
 8002b08:	4298      	cmp	r0, r3
 8002b0a:	d305      	bcc.n	8002b18 <log_is_strdup+0x14>
 8002b0c:	33a0      	adds	r3, #160	; 0xa0
 8002b0e:	4298      	cmp	r0, r3
 8002b10:	bf2c      	ite	cs
 8002b12:	2000      	movcs	r0, #0
 8002b14:	2001      	movcc	r0, #1
 8002b16:	4770      	bx	lr
 8002b18:	2000      	movs	r0, #0
}
 8002b1a:	4770      	bx	lr
 8002b1c:	20004300 	.word	0x20004300

08002b20 <z_impl_log_process>:
{
 8002b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
 8002b24:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <z_impl_log_process+0x124>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
{
 8002b28:	b085      	sub	sp, #20
 8002b2a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8002b2c:	b903      	cbnz	r3, 8002b30 <z_impl_log_process+0x10>
 8002b2e:	b300      	cbz	r0, 8002b72 <z_impl_log_process+0x52>
	msg = get_msg();
 8002b30:	f7ff ff0c 	bl	800294c <get_msg>
	if (msg.msg) {
 8002b34:	4605      	mov	r5, r0
 8002b36:	b178      	cbz	r0, 8002b58 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8002b38:	f3bf 8f5b 	dmb	ish
 8002b3c:	4b42      	ldr	r3, [pc, #264]	; (8002c48 <z_impl_log_process+0x128>)
 8002b3e:	e853 2f00 	ldrex	r2, [r3]
 8002b42:	3a01      	subs	r2, #1
 8002b44:	e843 2100 	strex	r1, r2, [r3]
 8002b48:	2900      	cmp	r1, #0
 8002b4a:	d1f8      	bne.n	8002b3e <z_impl_log_process+0x1e>
 8002b4c:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
 8002b50:	b19c      	cbz	r4, 8002b7a <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
 8002b52:	4628      	mov	r0, r5
 8002b54:	f004 f9ad 	bl	8006eb2 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
 8002b58:	b92c      	cbnz	r4, 8002b66 <z_impl_log_process+0x46>
	return dropped_cnt > 0;
 8002b5a:	4b3c      	ldr	r3, [pc, #240]	; (8002c4c <z_impl_log_process+0x12c>)
	if (!bypass && z_log_dropped_pending()) {
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	dd01      	ble.n	8002b66 <z_impl_log_process+0x46>
		dropped_notify();
 8002b62:	f7ff ff27 	bl	80029b4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
 8002b66:	483a      	ldr	r0, [pc, #232]	; (8002c50 <z_impl_log_process+0x130>)
 8002b68:	f004 f89a 	bl	8006ca0 <log_list_head_peek>
 8002b6c:	1e04      	subs	r4, r0, #0
 8002b6e:	bf18      	it	ne
 8002b70:	2401      	movne	r4, #1
}
 8002b72:	4620      	mov	r0, r4
 8002b74:	b005      	add	sp, #20
 8002b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <z_impl_log_process+0x134>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b9e3      	cbnz	r3, 8002bba <z_impl_log_process+0x9a>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8002b80:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
 8002b82:	07db      	lsls	r3, r3, #31
 8002b84:	d419      	bmi.n	8002bba <z_impl_log_process+0x9a>
	msg_str = log_msg_str_get(msg);
 8002b86:	f004 f9a7 	bl	8006ed8 <log_msg_str_get>
 8002b8a:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	f004 f96e 	bl	8006e6e <log_msg_nargs_get>
 8002b92:	4601      	mov	r1, r0
 8002b94:	4638      	mov	r0, r7
 8002b96:	f7ff fe91 	bl	80028bc <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8002b9a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002c74 <z_impl_log_process+0x154>
 8002b9e:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <z_impl_log_process+0x138>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8002ba0:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8002c78 <z_impl_log_process+0x158>
 8002ba4:	eba3 0308 	sub.w	r3, r3, r8
 8002ba8:	08db      	lsrs	r3, r3, #3
 8002baa:	9303      	str	r3, [sp, #12]
 8002bac:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <z_impl_log_process+0x13c>)
 8002bae:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8002bb2:	4606      	mov	r6, r0
 8002bb4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
 8002bb8:	b936      	cbnz	r6, 8002bc8 <z_impl_log_process+0xa8>
 8002bba:	4e29      	ldr	r6, [pc, #164]	; (8002c60 <z_impl_log_process+0x140>)
 8002bbc:	4f29      	ldr	r7, [pc, #164]	; (8002c64 <z_impl_log_process+0x144>)
 8002bbe:	1bbf      	subs	r7, r7, r6
 8002bc0:	113f      	asrs	r7, r7, #4
 8002bc2:	f04f 0800 	mov.w	r8, #0
 8002bc6:	e03a      	b.n	8002c3e <z_impl_log_process+0x11e>
		idx = 31 - __builtin_clz(mask);
 8002bc8:	fab6 f186 	clz	r1, r6
 8002bcc:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	f004 f94e 	bl	8006e74 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
 8002bd8:	4b23      	ldr	r3, [pc, #140]	; (8002c68 <z_impl_log_process+0x148>)
 8002bda:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
 8002bdc:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8002bde:	d302      	bcc.n	8002be6 <z_impl_log_process+0xc6>
		if (!is_rodata(str) && !log_is_strdup(str) &&
 8002be0:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <z_impl_log_process+0x14c>)
 8002be2:	4290      	cmp	r0, r2
 8002be4:	d31a      	bcc.n	8002c1c <z_impl_log_process+0xfc>
 8002be6:	4608      	mov	r0, r1
 8002be8:	f7ff ff8c 	bl	8002b04 <log_is_strdup>
 8002bec:	4602      	mov	r2, r0
 8002bee:	b9a8      	cbnz	r0, 8002c1c <z_impl_log_process+0xfc>
 8002bf0:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <z_impl_log_process+0x150>)
 8002bf2:	4299      	cmp	r1, r3
 8002bf4:	d012      	beq.n	8002c1c <z_impl_log_process+0xfc>
	return msg->hdr.ids.source_id;
 8002bf6:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8002bf8:	9903      	ldr	r1, [sp, #12]
 8002bfa:	f3c3 1389 	ubfx	r3, r3, #6, #10
 8002bfe:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
 8002c00:	bf38      	it	cc
 8002c02:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8002c06:	ea4f 138a 	mov.w	r3, sl, lsl #6
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	f8ad 3000 	strh.w	r3, [sp]
 8002c12:	4649      	mov	r1, r9
 8002c14:	463b      	mov	r3, r7
 8002c16:	4658      	mov	r0, fp
 8002c18:	f004 f89c 	bl	8006d54 <log_3>
		mask &= ~BIT(idx);
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	fa03 f109 	lsl.w	r1, r3, r9
 8002c22:	ea26 0601 	bic.w	r6, r6, r1
 8002c26:	e7c7      	b.n	8002bb8 <z_impl_log_process+0x98>
	return backend->cb->active;
 8002c28:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
 8002c2a:	795b      	ldrb	r3, [r3, #5]
 8002c2c:	b123      	cbz	r3, 8002c38 <z_impl_log_process+0x118>
	backend->api->put(backend, msg);
 8002c2e:	6833      	ldr	r3, [r6, #0]
 8002c30:	4629      	mov	r1, r5
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4630      	mov	r0, r6
 8002c36:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 8002c38:	f108 0801 	add.w	r8, r8, #1
 8002c3c:	3610      	adds	r6, #16
 8002c3e:	45b8      	cmp	r8, r7
 8002c40:	dbf2      	blt.n	8002c28 <z_impl_log_process+0x108>
 8002c42:	e786      	b.n	8002b52 <z_impl_log_process+0x32>
 8002c44:	20002029 	.word	0x20002029
 8002c48:	20001644 	.word	0x20001644
 8002c4c:	20001648 	.word	0x20001648
 8002c50:	20001650 	.word	0x20001650
 8002c54:	2000202a 	.word	0x2000202a
 8002c58:	080089b4 	.word	0x080089b4
 8002c5c:	0800898c 	.word	0x0800898c
 8002c60:	080089b4 	.word	0x080089b4
 8002c64:	080089c4 	.word	0x080089c4
 8002c68:	080085b4 	.word	0x080085b4
 8002c6c:	0800a354 	.word	0x0800a354
 8002c70:	0800998c 	.word	0x0800998c
 8002c74:	08008974 	.word	0x08008974
 8002c78:	080099a6 	.word	0x080099a6

08002c7c <log_process_thread_func>:
{
 8002c7c:	b510      	push	{r4, lr}
	log_init();
 8002c7e:	f7ff fedd 	bl	8002a3c <log_init>
	return z_impl_k_current_get();
 8002c82:	f003 f907 	bl	8005e94 <z_impl_k_current_get>
	proc_tid = process_tid;
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <log_process_thread_func+0x3c>)
 8002c88:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8002c8a:	b130      	cbz	r0, 8002c9a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <log_process_thread_func+0x40>)
	    process_tid &&
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b09      	cmp	r3, #9
 8002c92:	dd02      	ble.n	8002c9a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
 8002c94:	480a      	ldr	r0, [pc, #40]	; (8002cc0 <log_process_thread_func+0x44>)
 8002c96:	f002 fdf9 	bl	800588c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 8002c9a:	4c09      	ldr	r4, [pc, #36]	; (8002cc0 <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7ff ff3f 	bl	8002b20 <z_impl_log_process>
		if (log_process(false) == false) {
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	d1fa      	bne.n	8002c9c <log_process_thread_func+0x20>
 8002ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f002 fe0c 	bl	80058cc <z_impl_k_sem_take>
 8002cb4:	e7f2      	b.n	8002c9c <log_process_thread_func+0x20>
 8002cb6:	bf00      	nop
 8002cb8:	20001678 	.word	0x20001678
 8002cbc:	20001644 	.word	0x20001644
 8002cc0:	20000244 	.word	0x20000244

08002cc4 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
 8002cc4:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <msg_finalize+0xa8>)
{
 8002cc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
 8002cc8:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
 8002cca:	8141      	strh	r1, [r0, #10]
{
 8002ccc:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8002cce:	4798      	blx	r3
 8002cd0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8002cd2:	f04f 0310 	mov.w	r3, #16
 8002cd6:	f3ef 8511 	mrs	r5, BASEPRI
 8002cda:	f383 8811 	msr	BASEPRI, r3
 8002cde:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8002ce2:	4823      	ldr	r0, [pc, #140]	; (8002d70 <msg_finalize+0xac>)
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	f003 ffd1 	bl	8006c8c <log_list_add_tail>
	__asm__ volatile(
 8002cea:	f385 8811 	msr	BASEPRI, r5
 8002cee:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002cf2:	f3bf 8f5b 	dmb	ish
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <msg_finalize+0xb0>)
 8002cf8:	e853 2f00 	ldrex	r2, [r3]
 8002cfc:	3201      	adds	r2, #1
 8002cfe:	e843 2100 	strex	r1, r2, [r3]
 8002d02:	2900      	cmp	r1, #0
 8002d04:	d1f8      	bne.n	8002cf8 <msg_finalize+0x34>
 8002d06:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8002d0a:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <msg_finalize+0xb4>)
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	b182      	cbz	r2, 8002d32 <msg_finalize+0x6e>
	__asm__ volatile(
 8002d10:	f04f 0310 	mov.w	r3, #16
 8002d14:	f3ef 8411 	mrs	r4, BASEPRI
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7ff fefd 	bl	8002b20 <z_impl_log_process>
	__asm__ volatile(
 8002d26:	f384 8811 	msr	BASEPRI, r4
 8002d2a:	f3bf 8f6f 	isb	sy
}
 8002d2e:	b003      	add	sp, #12
 8002d30:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <msg_finalize+0xb8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	2a00      	cmp	r2, #0
 8002d3a:	d0f8      	beq.n	8002d2e <msg_finalize+0x6a>
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d10a      	bne.n	8002d56 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
 8002d40:	2200      	movs	r2, #0
 8002d42:	2300      	movs	r3, #0
 8002d44:	e9cd 2300 	strd	r2, r3, [sp]
 8002d48:	480d      	ldr	r0, [pc, #52]	; (8002d80 <msg_finalize+0xbc>)
 8002d4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f003 fa8c 	bl	800626c <z_impl_k_timer_start>
 8002d54:	e7eb      	b.n	8002d2e <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8002d56:	2b0a      	cmp	r3, #10
 8002d58:	d1e9      	bne.n	8002d2e <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
 8002d5a:	4809      	ldr	r0, [pc, #36]	; (8002d80 <msg_finalize+0xbc>)
 8002d5c:	f005 fb3e 	bl	80083dc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8002d60:	4808      	ldr	r0, [pc, #32]	; (8002d84 <msg_finalize+0xc0>)
}
 8002d62:	b003      	add	sp, #12
 8002d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d68:	f002 bd90 	b.w	800588c <z_impl_k_sem_give>
 8002d6c:	20000008 	.word	0x20000008
 8002d70:	20001650 	.word	0x20001650
 8002d74:	20001644 	.word	0x20001644
 8002d78:	2000202a 	.word	0x2000202a
 8002d7c:	20001678 	.word	0x20001678
 8002d80:	20000348 	.word	0x20000348
 8002d84:	20000244 	.word	0x20000244

08002d88 <z_impl_log_panic>:
{
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 8002d8a:	4f0e      	ldr	r7, [pc, #56]	; (8002dc4 <z_impl_log_panic+0x3c>)
 8002d8c:	783d      	ldrb	r5, [r7, #0]
 8002d8e:	b975      	cbnz	r5, 8002dae <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
 8002d90:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <z_impl_log_panic+0x40>)
 8002d92:	4e0e      	ldr	r6, [pc, #56]	; (8002dcc <z_impl_log_panic+0x44>)
	log_init();
 8002d94:	f7ff fe52 	bl	8002a3c <log_init>
 8002d98:	1b36      	subs	r6, r6, r4
 8002d9a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8002d9c:	42b5      	cmp	r5, r6
 8002d9e:	db07      	blt.n	8002db0 <z_impl_log_panic+0x28>
 8002da0:	2000      	movs	r0, #0
 8002da2:	f7ff febd 	bl	8002b20 <z_impl_log_process>
		while (log_process(false) == true) {
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d1fa      	bne.n	8002da0 <z_impl_log_panic+0x18>
	panic_mode = true;
 8002daa:	2301      	movs	r3, #1
 8002dac:	703b      	strb	r3, [r7, #0]
}
 8002dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 8002db0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8002db2:	795b      	ldrb	r3, [r3, #5]
 8002db4:	b11b      	cbz	r3, 8002dbe <z_impl_log_panic+0x36>
	backend->api->panic(backend);
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	4620      	mov	r0, r4
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8002dbe:	3501      	adds	r5, #1
 8002dc0:	3410      	adds	r4, #16
 8002dc2:	e7eb      	b.n	8002d9c <z_impl_log_panic+0x14>
 8002dc4:	2000202a 	.word	0x2000202a
 8002dc8:	080089b4 	.word	0x080089b4
 8002dcc:	080089c4 	.word	0x080089c4

08002dd0 <log_free>:
{
 8002dd0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 8002dd2:	3804      	subs	r0, #4
 8002dd4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8002dd6:	f3bf 8f5b 	dmb	ish
 8002dda:	e850 3f00 	ldrex	r3, [r0]
 8002dde:	1e5a      	subs	r2, r3, #1
 8002de0:	e840 2100 	strex	r1, r2, [r0]
 8002de4:	2900      	cmp	r1, #0
 8002de6:	d1f8      	bne.n	8002dda <log_free+0xa>
 8002de8:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d103      	bne.n	8002df8 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8002df0:	4803      	ldr	r0, [pc, #12]	; (8002e00 <log_free+0x30>)
 8002df2:	a901      	add	r1, sp, #4
 8002df4:	f005 f8d2 	bl	8007f9c <k_mem_slab_free>
}
 8002df8:	b003      	add	sp, #12
 8002dfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dfe:	bf00      	nop
 8002e00:	20001658 	.word	0x20001658

08002e04 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 8002e04:	2320      	movs	r3, #32
 8002e06:	4902      	ldr	r1, [pc, #8]	; (8002e10 <log_msg_pool_init+0xc>)
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <log_msg_pool_init+0x10>)
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f005 b8aa 	b.w	8007f64 <k_mem_slab_init>
 8002e10:	200043a0 	.word	0x200043a0
 8002e14:	2000167c 	.word	0x2000167c

08002e18 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 8002e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
 8002e1a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
 8002e1c:	4d09      	ldr	r5, [pc, #36]	; (8002e44 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	2001      	movs	r0, #1
 8002e22:	f7ff fe7d 	bl	8002b20 <z_impl_log_process>
 8002e26:	4604      	mov	r4, r0
			z_log_dropped();
 8002e28:	f7ff fda4 	bl	8002974 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2300      	movs	r3, #0
 8002e30:	a901      	add	r1, sp, #4
 8002e32:	4628      	mov	r0, r5
 8002e34:	f002 fc20 	bl	8005678 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 8002e38:	b108      	cbz	r0, 8002e3e <log_msg_no_space_handle+0x26>
 8002e3a:	2c00      	cmp	r4, #0
 8002e3c:	d1f0      	bne.n	8002e20 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
 8002e3e:	9801      	ldr	r0, [sp, #4]
 8002e40:	b003      	add	sp, #12
 8002e42:	bd30      	pop	{r4, r5, pc}
 8002e44:	2000167c 	.word	0x2000167c

08002e48 <log_msg_chunk_alloc>:
{
 8002e48:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 8002e4e:	4807      	ldr	r0, [pc, #28]	; (8002e6c <log_msg_chunk_alloc+0x24>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	2300      	movs	r3, #0
 8002e54:	a901      	add	r1, sp, #4
 8002e56:	f002 fc0f 	bl	8005678 <k_mem_slab_alloc>
	if (err != 0) {
 8002e5a:	b110      	cbz	r0, 8002e62 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
 8002e5c:	f7ff ffdc 	bl	8002e18 <log_msg_no_space_handle>
 8002e60:	9001      	str	r0, [sp, #4]
}
 8002e62:	9801      	ldr	r0, [sp, #4]
 8002e64:	b003      	add	sp, #12
 8002e66:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e6a:	bf00      	nop
 8002e6c:	2000167c 	.word	0x2000167c

08002e70 <msg_free>:
{
 8002e70:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8002e72:	7a03      	ldrb	r3, [r0, #8]
 8002e74:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
 8002e76:	07dc      	lsls	r4, r3, #31
{
 8002e78:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
 8002e7a:	d41e      	bmi.n	8002eba <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
 8002e7c:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
 8002e7e:	092d      	lsrs	r5, r5, #4
 8002e80:	d01b      	beq.n	8002eba <msg_free+0x4a>
		uint32_t smask = 0U;
 8002e82:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
 8002e84:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
 8002e86:	9801      	ldr	r0, [sp, #4]
 8002e88:	4631      	mov	r1, r6
 8002e8a:	f003 fff3 	bl	8006e74 <log_msg_arg_get>
 8002e8e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
 8002e90:	f7ff fe38 	bl	8002b04 <log_is_strdup>
 8002e94:	b170      	cbz	r0, 8002eb4 <msg_free+0x44>
				if (smask == 0U) {
 8002e96:	b934      	cbnz	r4, 8002ea6 <msg_free+0x36>
					smask = z_log_get_s_mask(
 8002e98:	9b01      	ldr	r3, [sp, #4]
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	6918      	ldr	r0, [r3, #16]
 8002e9e:	f7ff fd0d 	bl	80028bc <z_log_get_s_mask>
					if (smask == 0U) {
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	b148      	cbz	r0, 8002eba <msg_free+0x4a>
				if (smask & BIT(i)) {
 8002ea6:	fa24 f306 	lsr.w	r3, r4, r6
 8002eaa:	07d9      	lsls	r1, r3, #31
 8002eac:	d502      	bpl.n	8002eb4 <msg_free+0x44>
					log_free(buf);
 8002eae:	4638      	mov	r0, r7
 8002eb0:	f7ff ff8e 	bl	8002dd0 <log_free>
		for (i = 0U; i < nargs; i++) {
 8002eb4:	3601      	adds	r6, #1
 8002eb6:	42ae      	cmp	r6, r5
 8002eb8:	d3e5      	bcc.n	8002e86 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
 8002eba:	9b01      	ldr	r3, [sp, #4]
 8002ebc:	7a1a      	ldrb	r2, [r3, #8]
 8002ebe:	0792      	lsls	r2, r2, #30
 8002ec0:	d504      	bpl.n	8002ecc <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
 8002ec2:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8002ec4:	4c08      	ldr	r4, [pc, #32]	; (8002ee8 <msg_free+0x78>)
 8002ec6:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
 8002ec8:	9b03      	ldr	r3, [sp, #12]
 8002eca:	b92b      	cbnz	r3, 8002ed8 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 8002ecc:	4806      	ldr	r0, [pc, #24]	; (8002ee8 <msg_free+0x78>)
 8002ece:	a901      	add	r1, sp, #4
 8002ed0:	f005 f864 	bl	8007f9c <k_mem_slab_free>
}
 8002ed4:	b005      	add	sp, #20
 8002ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
 8002ed8:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8002eda:	a903      	add	r1, sp, #12
 8002edc:	4620      	mov	r0, r4
 8002ede:	f005 f85d 	bl	8007f9c <k_mem_slab_free>
		cont = next;
 8002ee2:	9503      	str	r5, [sp, #12]
 8002ee4:	e7f0      	b.n	8002ec8 <msg_free+0x58>
 8002ee6:	bf00      	nop
 8002ee8:	2000167c 	.word	0x2000167c

08002eec <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8002eec:	b40e      	push	{r1, r2, r3}
 8002eee:	b503      	push	{r0, r1, lr}
 8002ef0:	ab03      	add	r3, sp, #12
 8002ef2:	4601      	mov	r1, r0
 8002ef4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8002ef8:	4804      	ldr	r0, [pc, #16]	; (8002f0c <print_formatted+0x20>)
	va_start(args, fmt);
 8002efa:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8002efc:	f7fd ff64 	bl	8000dc8 <cbvprintf>
	va_end(args);

	return length;
}
 8002f00:	b002      	add	sp, #8
 8002f02:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f06:	b003      	add	sp, #12
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	0800728d 	.word	0x0800728d

08002f10 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 8002f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f14:	461d      	mov	r5, r3
 8002f16:	9b08      	ldr	r3, [sp, #32]
 8002f18:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8002f1a:	06da      	lsls	r2, r3, #27
{
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8002f20:	d405      	bmi.n	8002f2e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8002f22:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 8002f24:	bf4c      	ite	mi
 8002f26:	492b      	ldrmi	r1, [pc, #172]	; (8002fd4 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
 8002f28:	492b      	ldrpl	r1, [pc, #172]	; (8002fd8 <hexdump_line_print+0xc8>)
 8002f2a:	f7ff ffdf 	bl	8002eec <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
 8002f2e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002fe0 <hexdump_line_print+0xd0>
{
 8002f32:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
 8002f36:	45a8      	cmp	r8, r5
 8002f38:	db2d      	blt.n	8002f96 <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 8002f3a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002fe4 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
 8002f3e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002fe8 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
 8002f42:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8002fe0 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8002f46:	2500      	movs	r5, #0
		if (i < length) {
 8002f48:	42bd      	cmp	r5, r7
 8002f4a:	d232      	bcs.n	8002fb2 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
 8002f4c:	5d72      	ldrb	r2, [r6, r5]
 8002f4e:	4649      	mov	r1, r9
 8002f50:	4620      	mov	r0, r4
 8002f52:	f7ff ffcb 	bl	8002eec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8002f56:	3501      	adds	r5, #1
 8002f58:	2d10      	cmp	r5, #16
 8002f5a:	d123      	bne.n	8002fa4 <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");
 8002f5c:	491f      	ldr	r1, [pc, #124]	; (8002fdc <hexdump_line_print+0xcc>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
 8002f5e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002fe0 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
 8002f62:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8002fec <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
 8002f66:	f8df a088 	ldr.w	sl, [pc, #136]	; 8002ff0 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7ff ffbe 	bl	8002eec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8002f70:	2500      	movs	r5, #0
		if (i < length) {
 8002f72:	42af      	cmp	r7, r5
 8002f74:	d929      	bls.n	8002fca <hexdump_line_print+0xba>
			char c = (char)data[i];
 8002f76:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
 8002f78:	f812 3009 	ldrb.w	r3, [r2, r9]
 8002f7c:	f013 0f97 	tst.w	r3, #151	; 0x97
 8002f80:	bf08      	it	eq
 8002f82:	222e      	moveq	r2, #46	; 0x2e
 8002f84:	4651      	mov	r1, sl
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7ff ffb0 	bl	8002eec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8002f8c:	3501      	adds	r5, #1
 8002f8e:	2d10      	cmp	r5, #16
 8002f90:	d114      	bne.n	8002fbc <hexdump_line_print+0xac>
		}
	}
}
 8002f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
 8002f96:	4649      	mov	r1, r9
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f7ff ffa7 	bl	8002eec <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8002f9e:	f108 0801 	add.w	r8, r8, #1
 8002fa2:	e7c8      	b.n	8002f36 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 8002fa4:	076a      	lsls	r2, r5, #29
 8002fa6:	d1cf      	bne.n	8002f48 <hexdump_line_print+0x38>
			print_formatted(output, " ");
 8002fa8:	4651      	mov	r1, sl
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7ff ff9e 	bl	8002eec <print_formatted>
 8002fb0:	e7ca      	b.n	8002f48 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f7ff ff99 	bl	8002eec <print_formatted>
 8002fba:	e7cc      	b.n	8002f56 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 8002fbc:	076b      	lsls	r3, r5, #29
 8002fbe:	d1d8      	bne.n	8002f72 <hexdump_line_print+0x62>
			print_formatted(output, " ");
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7ff ff92 	bl	8002eec <print_formatted>
 8002fc8:	e7d3      	b.n	8002f72 <hexdump_line_print+0x62>
			print_formatted(output, " ");
 8002fca:	4641      	mov	r1, r8
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f7ff ff8d 	bl	8002eec <print_formatted>
 8002fd2:	e7db      	b.n	8002f8c <hexdump_line_print+0x7c>
 8002fd4:	080099ea 	.word	0x080099ea
 8002fd8:	080099e9 	.word	0x080099e9
 8002fdc:	080099f6 	.word	0x080099f6
 8002fe0:	080099f4 	.word	0x080099f4
 8002fe4:	080099f2 	.word	0x080099f2
 8002fe8:	080099ec 	.word	0x080099ec
 8002fec:	0800a253 	.word	0x0800a253
 8002ff0:	080099f8 	.word	0x080099f8

08002ff4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8002ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ff8:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
 8002ffa:	f011 0602 	ands.w	r6, r1, #2
{
 8002ffe:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 8003002:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 8003006:	9205      	str	r2, [sp, #20]
 8003008:	4607      	mov	r7, r0
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800300a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 800300e:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
 8003012:	d007      	beq.n	8003024 <prefix_print+0x30>
	if (!format) {
 8003014:	f011 0f44 	tst.w	r1, #68	; 0x44
 8003018:	d139      	bne.n	800308e <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
 800301a:	4934      	ldr	r1, [pc, #208]	; (80030ec <prefix_print+0xf8>)
 800301c:	461a      	mov	r2, r3
 800301e:	f7ff ff65 	bl	8002eec <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 8003022:	4606      	mov	r6, r0
	if (color) {
 8003024:	f1ba 0f00 	cmp.w	sl, #0
 8003028:	d00a      	beq.n	8003040 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
 800302a:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
 800302c:	4931      	ldr	r1, [pc, #196]	; (80030f4 <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
 800302e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
 8003032:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <prefix_print+0x104>)
 8003034:	4638      	mov	r0, r7
 8003036:	2a00      	cmp	r2, #0
 8003038:	bf08      	it	eq
 800303a:	461a      	moveq	r2, r3
 800303c:	f7ff ff56 	bl	8002eec <print_formatted>
	if (level_on) {
 8003040:	b13d      	cbz	r5, 8003052 <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
 8003042:	4b2e      	ldr	r3, [pc, #184]	; (80030fc <prefix_print+0x108>)
 8003044:	492e      	ldr	r1, [pc, #184]	; (8003100 <prefix_print+0x10c>)
 8003046:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 800304a:	4638      	mov	r0, r7
 800304c:	f7ff ff4e 	bl	8002eec <print_formatted>
 8003050:	4605      	mov	r5, r0
	if (source_id >= 0) {
 8003052:	f1b9 0f00 	cmp.w	r9, #0
 8003056:	db16      	blt.n	8003086 <prefix_print+0x92>
		total += print_formatted(output,
 8003058:	9b05      	ldr	r3, [sp, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d043      	beq.n	80030e6 <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 800305e:	2301      	movs	r3, #1
 8003060:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
 8003064:	4b27      	ldr	r3, [pc, #156]	; (8003104 <prefix_print+0x110>)
 8003066:	4c28      	ldr	r4, [pc, #160]	; (8003108 <prefix_print+0x114>)
 8003068:	f018 0f10 	tst.w	r8, #16
 800306c:	bf18      	it	ne
 800306e:	461c      	movne	r4, r3
 8003070:	4649      	mov	r1, r9
 8003072:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8003076:	f7ff fcb9 	bl	80029ec <log_source_name_get>
 800307a:	4621      	mov	r1, r4
 800307c:	4602      	mov	r2, r0
 800307e:	4638      	mov	r0, r7
 8003080:	f7ff ff34 	bl	8002eec <print_formatted>
 8003084:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
 8003086:	19a8      	adds	r0, r5, r6
 8003088:	b007      	add	sp, #28
 800308a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
 800308e:	4a1f      	ldr	r2, [pc, #124]	; (800310c <prefix_print+0x118>)
 8003090:	6811      	ldr	r1, [r2, #0]
 8003092:	b331      	cbz	r1, 80030e2 <prefix_print+0xee>
		timestamp /= timestamp_div;
 8003094:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <prefix_print+0x11c>)
 8003096:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 800309a:	6814      	ldr	r4, [r2, #0]
 800309c:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
 80030a0:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
 80030a4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
 80030a8:	fbb4 f2f6 	udiv	r2, r4, r6
 80030ac:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
 80030b0:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
 80030b4:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
 80030b8:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80030bc:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
 80030c0:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80030c4:	fb01 441e 	mls	r4, r1, lr, r4
			length = print_formatted(output,
 80030c8:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80030cc:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
 80030d0:	9600      	str	r6, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80030d2:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
 80030d6:	e9cd e101 	strd	lr, r1, [sp, #4]
 80030da:	490e      	ldr	r1, [pc, #56]	; (8003114 <prefix_print+0x120>)
 80030dc:	f7ff ff06 	bl	8002eec <print_formatted>
 80030e0:	e79f      	b.n	8003022 <prefix_print+0x2e>
		length = 0;
 80030e2:	4608      	mov	r0, r1
 80030e4:	e79d      	b.n	8003022 <prefix_print+0x2e>
		total += print_formatted(output,
 80030e6:	4c08      	ldr	r4, [pc, #32]	; (8003108 <prefix_print+0x114>)
 80030e8:	e7c2      	b.n	8003070 <prefix_print+0x7c>
 80030ea:	bf00      	nop
 80030ec:	08009a09 	.word	0x08009a09
 80030f0:	080095cc 	.word	0x080095cc
 80030f4:	08009a2e 	.word	0x08009a2e
 80030f8:	080099fb 	.word	0x080099fb
 80030fc:	080095e0 	.word	0x080095e0
 8003100:	08009a31 	.word	0x08009a31
 8003104:	08009a05 	.word	0x08009a05
 8003108:	08009a00 	.word	0x08009a00
 800310c:	2000169c 	.word	0x2000169c
 8003110:	200016a0 	.word	0x200016a0
 8003114:	08009a12 	.word	0x08009a12

08003118 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
 8003118:	b538      	push	{r3, r4, r5, lr}
 800311a:	460c      	mov	r4, r1
	if (color) {
 800311c:	07e1      	lsls	r1, r4, #31
{
 800311e:	4605      	mov	r5, r0
	if (color) {
 8003120:	d503      	bpl.n	800312a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
 8003122:	4a08      	ldr	r2, [pc, #32]	; (8003144 <postfix_print+0x2c>)
 8003124:	4908      	ldr	r1, [pc, #32]	; (8003148 <postfix_print+0x30>)
 8003126:	f7ff fee1 	bl	8002eec <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800312a:	06e2      	lsls	r2, r4, #27
 800312c:	d408      	bmi.n	8003140 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 800312e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 8003130:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 8003132:	bf4c      	ite	mi
 8003134:	4905      	ldrmi	r1, [pc, #20]	; (800314c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 8003136:	4906      	ldrpl	r1, [pc, #24]	; (8003150 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
 8003138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 800313c:	f7ff bed6 	b.w	8002eec <print_formatted>
}
 8003140:	bd38      	pop	{r3, r4, r5, pc}
 8003142:	bf00      	nop
 8003144:	080099fb 	.word	0x080099fb
 8003148:	08009a2e 	.word	0x08009a2e
 800314c:	080099ea 	.word	0x080099ea
 8003150:	080099e9 	.word	0x080099e9

08003154 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
 8003154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
 8003158:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
 800315a:	f013 0807 	ands.w	r8, r3, #7
{
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	4605      	mov	r5, r0
 8003162:	460e      	mov	r6, r1
 8003164:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
 8003166:	d022      	beq.n	80031ae <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8003168:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
 800316a:	8949      	ldrh	r1, [r1, #10]
 800316c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8003170:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8003174:	43d2      	mvns	r2, r2
 8003176:	e9cd 8300 	strd	r8, r3, [sp]
 800317a:	9102      	str	r1, [sp, #8]
 800317c:	68f3      	ldr	r3, [r6, #12]
 800317e:	f002 0201 	and.w	r2, r2, #1
 8003182:	4639      	mov	r1, r7
 8003184:	f7ff ff36 	bl	8002ff4 <prefix_print>
 8003188:	4681      	mov	r9, r0
 800318a:	7a34      	ldrb	r4, [r6, #8]
 800318c:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
 800318e:	f014 0401 	ands.w	r4, r4, #1
 8003192:	d00e      	beq.n	80031b2 <log_output_msg_process+0x5e>
		std_print(msg, output);
 8003194:	4629      	mov	r1, r5
 8003196:	4630      	mov	r0, r6
 8003198:	f003 ff0e 	bl	8006fb8 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
 800319c:	f1b8 0f00 	cmp.w	r8, #0
 80031a0:	d02b      	beq.n	80031fa <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
 80031a2:	4642      	mov	r2, r8
 80031a4:	4639      	mov	r1, r7
 80031a6:	4628      	mov	r0, r5
 80031a8:	f7ff ffb6 	bl	8003118 <postfix_print>
 80031ac:	e025      	b.n	80031fa <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
 80031ae:	46c1      	mov	r9, r8
 80031b0:	e7eb      	b.n	800318a <log_output_msg_process+0x36>
	} else if (raw_string) {
 80031b2:	f1b8 0f00 	cmp.w	r8, #0
 80031b6:	d126      	bne.n	8003206 <log_output_msg_process+0xb2>
	size_t offset = 0;
 80031b8:	4627      	mov	r7, r4
		length = output->size;
 80031ba:	68eb      	ldr	r3, [r5, #12]
 80031bc:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 80031be:	aa06      	add	r2, sp, #24
 80031c0:	463b      	mov	r3, r7
 80031c2:	68a9      	ldr	r1, [r5, #8]
 80031c4:	4630      	mov	r0, r6
 80031c6:	f003 fee3 	bl	8006f90 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
 80031ca:	9a06      	ldr	r2, [sp, #24]
 80031cc:	686b      	ldr	r3, [r5, #4]
 80031ce:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 80031d0:	b13a      	cbz	r2, 80031e2 <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
 80031d2:	68ab      	ldr	r3, [r5, #8]
 80031d4:	4413      	add	r3, r2
 80031d6:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 80031da:	f1a4 030a 	sub.w	r3, r4, #10
 80031de:	425c      	negs	r4, r3
 80031e0:	415c      	adcs	r4, r3
		log_output_flush(output);
 80031e2:	4628      	mov	r0, r5
 80031e4:	f004 f845 	bl	8007272 <log_output_flush>
		offset += length;
 80031e8:	9b06      	ldr	r3, [sp, #24]
 80031ea:	441f      	add	r7, r3
	} while (length > 0);
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e4      	bne.n	80031ba <log_output_msg_process+0x66>
	if (eol) {
 80031f0:	b11c      	cbz	r4, 80031fa <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
 80031f2:	4914      	ldr	r1, [pc, #80]	; (8003244 <log_output_msg_process+0xf0>)
 80031f4:	4628      	mov	r0, r5
 80031f6:	f7ff fe79 	bl	8002eec <print_formatted>
	}

	log_output_flush(output);
 80031fa:	4628      	mov	r0, r5
}
 80031fc:	b00a      	add	sp, #40	; 0x28
 80031fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
 8003202:	f004 b836 	b.w	8007272 <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
 8003206:	4630      	mov	r0, r6
 8003208:	f003 fe66 	bl	8006ed8 <log_msg_str_get>
 800320c:	490e      	ldr	r1, [pc, #56]	; (8003248 <log_output_msg_process+0xf4>)
 800320e:	4602      	mov	r2, r0
 8003210:	4628      	mov	r0, r5
 8003212:	f7ff fe6b 	bl	8002eec <print_formatted>
		length = sizeof(buf);
 8003216:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 800321a:	aa05      	add	r2, sp, #20
 800321c:	4623      	mov	r3, r4
 800321e:	a906      	add	r1, sp, #24
 8003220:	4630      	mov	r0, r6
		length = sizeof(buf);
 8003222:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 8003226:	f003 feb3 	bl	8006f90 <log_msg_hexdump_data_get>
		if (length) {
 800322a:	9a05      	ldr	r2, [sp, #20]
 800322c:	2a00      	cmp	r2, #0
 800322e:	d0b8      	beq.n	80031a2 <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
 8003230:	464b      	mov	r3, r9
 8003232:	9700      	str	r7, [sp, #0]
 8003234:	a906      	add	r1, sp, #24
 8003236:	4628      	mov	r0, r5
 8003238:	f7ff fe6a 	bl	8002f10 <hexdump_line_print>
			offset += length;
 800323c:	9b05      	ldr	r3, [sp, #20]
 800323e:	441c      	add	r4, r3
		length = sizeof(buf);
 8003240:	e7eb      	b.n	800321a <log_output_msg_process+0xc6>
 8003242:	bf00      	nop
 8003244:	08009a37 	.word	0x08009a37
 8003248:	08009a2e 	.word	0x08009a2e

0800324c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 800324c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800324e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003252:	428b      	cmp	r3, r1
 8003254:	bf28      	it	cs
 8003256:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 8003258:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800325a:	4a0f      	ldr	r2, [pc, #60]	; (8003298 <log_output_dropped_process+0x4c>)
{
 800325c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800325e:	2105      	movs	r1, #5
 8003260:	4668      	mov	r0, sp
 8003262:	f003 f9fc 	bl	800665e <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8003266:	6863      	ldr	r3, [r4, #4]
 8003268:	490c      	ldr	r1, [pc, #48]	; (800329c <log_output_dropped_process+0x50>)
 800326a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800326c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 800326e:	220b      	movs	r2, #11
 8003270:	4628      	mov	r0, r5
 8003272:	f003 fe94 	bl	8006f9e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 8003276:	6863      	ldr	r3, [r4, #4]
 8003278:	4632      	mov	r2, r6
 800327a:	4669      	mov	r1, sp
 800327c:	4628      	mov	r0, r5
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 fe8d 	bl	8006f9e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8003284:	6863      	ldr	r3, [r4, #4]
 8003286:	4906      	ldr	r1, [pc, #24]	; (80032a0 <log_output_dropped_process+0x54>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	221b      	movs	r2, #27
 800328c:	4628      	mov	r0, r5
 800328e:	f003 fe86 	bl	8006f9e <buffer_write>
		     output->control_block->ctx);
}
 8003292:	b002      	add	sp, #8
 8003294:	bd70      	pop	{r4, r5, r6, pc}
 8003296:	bf00      	nop
 8003298:	0800a181 	.word	0x0800a181
 800329c:	08009a75 	.word	0x08009a75
 80032a0:	08009a59 	.word	0x08009a59

080032a4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 80032a4:	4a08      	ldr	r2, [pc, #32]	; (80032c8 <log_output_timestamp_freq_set+0x24>)
{
 80032a6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 80032a8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80032aa:	4c08      	ldr	r4, [pc, #32]	; (80032cc <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 80032ac:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 80032ae:	2100      	movs	r1, #0
 80032b0:	42a0      	cmp	r0, r4
 80032b2:	d804      	bhi.n	80032be <log_output_timestamp_freq_set+0x1a>
 80032b4:	b101      	cbz	r1, 80032b8 <log_output_timestamp_freq_set+0x14>
 80032b6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <log_output_timestamp_freq_set+0x2c>)
 80032ba:	6018      	str	r0, [r3, #0]
}
 80032bc:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 80032be:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2101      	movs	r1, #1
 80032c4:	e7f4      	b.n	80032b0 <log_output_timestamp_freq_set+0xc>
 80032c6:	bf00      	nop
 80032c8:	200016a0 	.word	0x200016a0
 80032cc:	000f4240 	.word	0x000f4240
 80032d0:	2000169c 	.word	0x2000169c

080032d4 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
 80032d6:	4f07      	ldr	r7, [pc, #28]	; (80032f4 <char_out+0x20>)
{
 80032d8:	460d      	mov	r5, r1
 80032da:	4604      	mov	r4, r0
 80032dc:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
 80032de:	42b4      	cmp	r4, r6
 80032e0:	d101      	bne.n	80032e6 <char_out+0x12>
#endif
	}

	return length;
}
 80032e2:	4628      	mov	r0, r5
 80032e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
 80032e6:	6838      	ldr	r0, [r7, #0]
 80032e8:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
 80032ec:	6883      	ldr	r3, [r0, #8]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 80032f2:	e7f4      	b.n	80032de <char_out+0xa>
 80032f4:	200016b8 	.word	0x200016b8

080032f8 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 80032f8:	4801      	ldr	r0, [pc, #4]	; (8003300 <panic+0x8>)
 80032fa:	f003 bfba 	b.w	8007272 <log_output_flush>
 80032fe:	bf00      	nop
 8003300:	08009610 	.word	0x08009610

08003304 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8003304:	4801      	ldr	r0, [pc, #4]	; (800330c <dropped+0x8>)
 8003306:	f7ff bfa1 	b.w	800324c <log_output_dropped_process>
 800330a:	bf00      	nop
 800330c:	08009610 	.word	0x08009610

08003310 <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
 8003310:	b508      	push	{r3, lr}
 8003312:	4803      	ldr	r0, [pc, #12]	; (8003320 <log_backend_uart_init+0x10>)
 8003314:	f002 f83c 	bl	8005390 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8003318:	4b02      	ldr	r3, [pc, #8]	; (8003324 <log_backend_uart_init+0x14>)
 800331a:	6018      	str	r0, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
 800331c:	bd08      	pop	{r3, pc}
 800331e:	bf00      	nop
 8003320:	08009a81 	.word	0x08009a81
 8003324:	200016b8 	.word	0x200016b8

08003328 <put>:
{
 8003328:	b510      	push	{r4, lr}
	log_msg_get(msg);
 800332a:	4608      	mov	r0, r1
 800332c:	460c      	mov	r4, r1
 800332e:	f003 fd91 	bl	8006e54 <log_msg_get>
	log_output_msg_process(output, msg, flags);
 8003332:	4805      	ldr	r0, [pc, #20]	; (8003348 <put+0x20>)
 8003334:	4621      	mov	r1, r4
 8003336:	220f      	movs	r2, #15
 8003338:	f7ff ff0c 	bl	8003154 <log_output_msg_process>
	log_msg_put(msg);
 800333c:	4620      	mov	r0, r4
}
 800333e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003342:	f003 bdb6 	b.w	8006eb2 <log_msg_put>
 8003346:	bf00      	nop
 8003348:	08009610 	.word	0x08009610

0800334c <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 800334c:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
 800334e:	4c04      	ldr	r4, [pc, #16]	; (8003360 <__do_init_array_aux+0x14>)
 8003350:	4d04      	ldr	r5, [pc, #16]	; (8003364 <__do_init_array_aux+0x18>)
 8003352:	42ac      	cmp	r4, r5
 8003354:	d300      	bcc.n	8003358 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
 8003356:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
 8003358:	f854 3b04 	ldr.w	r3, [r4], #4
 800335c:	4798      	blx	r3
		func++) {
 800335e:	e7f8      	b.n	8003352 <__do_init_array_aux+0x6>
 8003360:	08008974 	.word	0x08008974
 8003364:	08008974 	.word	0x08008974

08003368 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
 8003368:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 800336a:	4c05      	ldr	r4, [pc, #20]	; (8003380 <__do_global_ctors_aux+0x18>)
 800336c:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
 800336e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8003372:	b905      	cbnz	r5, 8003376 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
 8003374:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
 8003376:	f854 3904 	ldr.w	r3, [r4], #-4
 800337a:	3d01      	subs	r5, #1
 800337c:	4798      	blx	r3
 800337e:	e7f8      	b.n	8003372 <__do_global_ctors_aux+0xa>
 8003380:	0800896c 	.word	0x0800896c

08003384 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8003384:	b508      	push	{r3, lr}
 8003386:	4806      	ldr	r0, [pc, #24]	; (80033a0 <uart_console_init+0x1c>)
 8003388:	f002 f802 	bl	8005390 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <uart_console_init+0x20>)
 800338e:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 8003390:	4805      	ldr	r0, [pc, #20]	; (80033a8 <uart_console_init+0x24>)
 8003392:	f001 f827 	bl	80043e4 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8003396:	4804      	ldr	r0, [pc, #16]	; (80033a8 <uart_console_init+0x24>)
 8003398:	f7ff f9bc 	bl	8002714 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
 800339c:	2000      	movs	r0, #0
 800339e:	bd08      	pop	{r3, pc}
 80033a0:	08009a81 	.word	0x08009a81
 80033a4:	200016bc 	.word	0x200016bc
 80033a8:	080033ad 	.word	0x080033ad

080033ac <console_out>:
	if ('\n' == c) {
 80033ac:	280a      	cmp	r0, #10
{
 80033ae:	b538      	push	{r3, r4, r5, lr}
 80033b0:	4d07      	ldr	r5, [pc, #28]	; (80033d0 <console_out+0x24>)
 80033b2:	4604      	mov	r4, r0
	if ('\n' == c) {
 80033b4:	d104      	bne.n	80033c0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 80033b6:	6828      	ldr	r0, [r5, #0]
 80033b8:	6883      	ldr	r3, [r0, #8]
 80033ba:	210d      	movs	r1, #13
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 80033c0:	6828      	ldr	r0, [r5, #0]
 80033c2:	6883      	ldr	r3, [r0, #8]
 80033c4:	b2e1      	uxtb	r1, r4
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4798      	blx	r3
}
 80033ca:	4620      	mov	r0, r4
 80033cc:	bd38      	pop	{r3, r4, r5, pc}
 80033ce:	bf00      	nop
 80033d0:	200016bc 	.word	0x200016bc

080033d4 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 80033d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80033d8:	4f0d      	ldr	r7, [pc, #52]	; (8003410 <__stm32_exti_isr.isra.0+0x3c>)
 80033da:	4604      	mov	r4, r0
 80033dc:	460e      	mov	r6, r1
 80033de:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80033e0:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 80033e4:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 80033e8:	42b4      	cmp	r4, r6
 80033ea:	db01      	blt.n	80033f0 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 80033ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033f0:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80033f2:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 80033f6:	ea33 0202 	bics.w	r2, r3, r2
 80033fa:	d107      	bne.n	800340c <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80033fc:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 80033fe:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8003402:	b11b      	cbz	r3, 800340c <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8003404:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8003408:	4620      	mov	r0, r4
 800340a:	4798      	blx	r3
	for (line = min; line < max; line++) {
 800340c:	3401      	adds	r4, #1
 800340e:	e7eb      	b.n	80033e8 <__stm32_exti_isr.isra.0+0x14>
 8003410:	40013c00 	.word	0x40013c00

08003414 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8003414:	4a04      	ldr	r2, [pc, #16]	; (8003428 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8003416:	2301      	movs	r3, #1
 8003418:	6811      	ldr	r1, [r2, #0]
 800341a:	4083      	lsls	r3, r0
 800341c:	430b      	orrs	r3, r1
 800341e:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8003420:	4b02      	ldr	r3, [pc, #8]	; (800342c <stm32_exti_enable+0x18>)
 8003422:	5618      	ldrsb	r0, [r3, r0]
 8003424:	f000 baec 	b.w	8003a00 <arch_irq_enable>
 8003428:	40013c00 	.word	0x40013c00
 800342c:	08009ab7 	.word	0x08009ab7

08003430 <stm32_exti_disable>:
	if (line < 32) {
 8003430:	281f      	cmp	r0, #31
 8003432:	dc07      	bgt.n	8003444 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003434:	4904      	ldr	r1, [pc, #16]	; (8003448 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8003436:	2201      	movs	r2, #1
 8003438:	680b      	ldr	r3, [r1, #0]
 800343a:	fa02 f000 	lsl.w	r0, r2, r0
 800343e:	ea23 0000 	bic.w	r0, r3, r0
 8003442:	6008      	str	r0, [r1, #0]
}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40013c00 	.word	0x40013c00

0800344c <stm32_exti_trigger>:
	switch (trigger) {
 800344c:	2903      	cmp	r1, #3
 800344e:	d80f      	bhi.n	8003470 <stm32_exti_trigger+0x24>
 8003450:	e8df f001 	tbb	[pc, r1]
 8003454:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003458:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800345a:	2201      	movs	r2, #1
 800345c:	6899      	ldr	r1, [r3, #8]
 800345e:	fa02 f000 	lsl.w	r0, r2, r0
 8003462:	ea21 0100 	bic.w	r1, r1, r0
 8003466:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 800346e:	60d8      	str	r0, [r3, #12]
}
 8003470:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8003472:	2301      	movs	r3, #1
 8003474:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003478:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <stm32_exti_trigger+0x64>)
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	4302      	orrs	r2, r0
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	e7f2      	b.n	8003468 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8003482:	2301      	movs	r3, #1
 8003484:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <stm32_exti_trigger+0x64>)
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	4302      	orrs	r2, r0
 800348e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	ea22 0000 	bic.w	r0, r2, r0
 8003496:	6098      	str	r0, [r3, #8]
}
 8003498:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800349a:	2301      	movs	r3, #1
 800349c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <stm32_exti_trigger+0x64>)
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	4302      	orrs	r2, r0
 80034a6:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	4310      	orrs	r0, r2
 80034ac:	e7df      	b.n	800346e <stm32_exti_trigger+0x22>
 80034ae:	bf00      	nop
 80034b0:	40013c00 	.word	0x40013c00

080034b4 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 80034b4:	b510      	push	{r4, lr}
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80034b6:	4c07      	ldr	r4, [pc, #28]	; (80034d4 <stm32_exti_set_callback+0x20>)
 80034b8:	f854 3030 	ldr.w	r3, [r4, r0, lsl #3]
 80034bc:	b933      	cbnz	r3, 80034cc <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80034be:	f844 1030 	str.w	r1, [r4, r0, lsl #3]
	data->cb[line].data = arg;
 80034c2:	eb04 04c0 	add.w	r4, r4, r0, lsl #3

	return 0;
 80034c6:	4618      	mov	r0, r3
	data->cb[line].data = arg;
 80034c8:	6062      	str	r2, [r4, #4]
}
 80034ca:	bd10      	pop	{r4, pc}
		return -EBUSY;
 80034cc:	f06f 000f 	mvn.w	r0, #15
 80034d0:	e7fb      	b.n	80034ca <stm32_exti_set_callback+0x16>
 80034d2:	bf00      	nop
 80034d4:	200016c4 	.word	0x200016c4

080034d8 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80034d8:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <stm32_exti_unset_callback+0x10>)
 80034da:	2200      	movs	r2, #0
 80034dc:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80034e0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80034e4:	605a      	str	r2, [r3, #4]
}
 80034e6:	4770      	bx	lr
 80034e8:	200016c4 	.word	0x200016c4

080034ec <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80034ec:	680b      	ldr	r3, [r1, #0]
{
 80034ee:	b086      	sub	sp, #24
 80034f0:	2b06      	cmp	r3, #6
 80034f2:	d839      	bhi.n	8003568 <stm32_clock_control_on+0x7c>
 80034f4:	e8df f003 	tbb	[pc, r3]
 80034f8:	2e241004 	.word	0x2e241004
 80034fc:	3838      	.short	0x3838
 80034fe:	1a          	.byte	0x1a
 80034ff:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003500:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <stm32_clock_control_on+0x84>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8003502:	684b      	ldr	r3, [r1, #4]
 8003504:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003506:	4319      	orrs	r1, r3
 8003508:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800350a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800350c:	4013      	ands	r3, r2
 800350e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003510:	9b01      	ldr	r3, [sp, #4]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8003512:	2000      	movs	r0, #0
}
 8003514:	b006      	add	sp, #24
 8003516:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003518:	4a15      	ldr	r2, [pc, #84]	; (8003570 <stm32_clock_control_on+0x84>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 800351a:	684b      	ldr	r3, [r1, #4]
 800351c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800351e:	4319      	orrs	r1, r3
 8003520:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003522:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003524:	4013      	ands	r3, r2
 8003526:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8003528:	9b02      	ldr	r3, [sp, #8]
 800352a:	e7f2      	b.n	8003512 <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800352c:	4a10      	ldr	r2, [pc, #64]	; (8003570 <stm32_clock_control_on+0x84>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 800352e:	684b      	ldr	r3, [r1, #4]
 8003530:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003532:	4319      	orrs	r1, r3
 8003534:	6391      	str	r1, [r2, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003538:	4013      	ands	r3, r2
 800353a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800353c:	9b03      	ldr	r3, [sp, #12]
 800353e:	e7e8      	b.n	8003512 <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003540:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <stm32_clock_control_on+0x84>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8003542:	684b      	ldr	r3, [r1, #4]
 8003544:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003546:	4319      	orrs	r1, r3
 8003548:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800354a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800354c:	4013      	ands	r3, r2
 800354e:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8003550:	9b04      	ldr	r3, [sp, #16]
 8003552:	e7de      	b.n	8003512 <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003554:	4a06      	ldr	r2, [pc, #24]	; (8003570 <stm32_clock_control_on+0x84>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8003556:	684b      	ldr	r3, [r1, #4]
 8003558:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800355a:	4319      	orrs	r1, r3
 800355c:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800355e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003560:	4013      	ands	r3, r2
 8003562:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8003564:	9b05      	ldr	r3, [sp, #20]
 8003566:	e7d4      	b.n	8003512 <stm32_clock_control_on+0x26>
	switch (pclken->bus) {
 8003568:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800356c:	e7d2      	b.n	8003514 <stm32_clock_control_on+0x28>
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800

08003574 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <stm32_clock_control_get_subsys_rate+0x24>)
 8003576:	6809      	ldr	r1, [r1, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
	uint32_t apb2_clock = get_bus_clock(ahb_clock, STM32_APB2_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800357a:	2906      	cmp	r1, #6
 800357c:	d809      	bhi.n	8003592 <stm32_clock_control_get_subsys_rate+0x1e>
 800357e:	e8df f001 	tbb	[pc, r1]
 8003582:	0505      	.short	0x0505
 8003584:	08080504 	.word	0x08080504
 8003588:	05          	.byte	0x05
 8003589:	00          	.byte	0x00
	return clock / prescaler;
 800358a:	085b      	lsrs	r3, r3, #1
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 800358c:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800358e:	2000      	movs	r0, #0
		break;
 8003590:	4770      	bx	lr
	switch (pclken->bus) {
 8003592:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8003596:	4770      	bx	lr
 8003598:	200000a0 	.word	0x200000a0

0800359c <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 800359c:	b530      	push	{r4, r5, lr}
 800359e:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 80035a0:	2300      	movs	r3, #0
 80035a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035a6:	e9cd 3200 	strd	r3, r2, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 80035aa:	9302      	str	r3, [sp, #8]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80035ac:	f000 f870 	bl	8003690 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80035b0:	a803      	add	r0, sp, #12
 80035b2:	f003 fef7 	bl	80073a4 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <stm32_clock_control_init+0x7c>)
 80035b8:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 80035ba:	0791      	lsls	r1, r2, #30
 80035bc:	d406      	bmi.n	80035cc <stm32_clock_control_init+0x30>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80035c6:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 80035c8:	0792      	lsls	r2, r2, #30
 80035ca:	d5fc      	bpl.n	80035c6 <stm32_clock_control_init+0x2a>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80035cc:	4c12      	ldr	r4, [pc, #72]	; (8003618 <stm32_clock_control_init+0x7c>)
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	f023 0303 	bic.w	r3, r3, #3
 80035d4:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80035d6:	68a3      	ldr	r3, [r4, #8]
 80035d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035dc:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80035de:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80035e0:	f015 050c 	ands.w	r5, r5, #12
 80035e4:	d1fb      	bne.n	80035de <stm32_clock_control_init+0x42>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80035e6:	6823      	ldr	r3, [r4, #0]

	/* Switch to PLL with HSE as clock source */
#ifdef CONFIG_SOC_SERIES_STM32WLX
	LL_RCC_HSE_EnableTcxo();
#endif
	LL_PLL_ConfigSystemClock_HSE(
 80035e8:	480c      	ldr	r0, [pc, #48]	; (800361c <stm32_clock_control_init+0x80>)
 80035ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ee:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 80035f0:	6863      	ldr	r3, [r4, #4]
 80035f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80035f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035fa:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 80035fc:	aa03      	add	r2, sp, #12
 80035fe:	466b      	mov	r3, sp
 8003600:	2101      	movs	r1, #1
 8003602:	f001 fe6b 	bl	80052dc <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 800360e:	f003 fed2 	bl	80073b6 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8003612:	4628      	mov	r0, r5
 8003614:	b007      	add	sp, #28
 8003616:	bd30      	pop	{r4, r5, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	007a1200 	.word	0x007a1200

08003620 <stm32_clock_control_off>:
	switch (pclken->bus) {
 8003620:	680b      	ldr	r3, [r1, #0]
{
 8003622:	b082      	sub	sp, #8
 8003624:	2b06      	cmp	r3, #6
 8003626:	d82d      	bhi.n	8003684 <stm32_clock_control_off+0x64>
 8003628:	e8df f003 	tbb	[pc, r3]
 800362c:	251e0d04 	.word	0x251e0d04
 8003630:	2c2c      	.short	0x2c2c
 8003632:	14          	.byte	0x14
 8003633:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8003634:	4a15      	ldr	r2, [pc, #84]	; (800368c <stm32_clock_control_off+0x6c>)
 8003636:	6849      	ldr	r1, [r1, #4]
 8003638:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800363a:	ea23 0301 	bic.w	r3, r3, r1
 800363e:	6313      	str	r3, [r2, #48]	; 0x30
	return 0;
 8003640:	2000      	movs	r0, #0
}
 8003642:	b002      	add	sp, #8
 8003644:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8003646:	4a11      	ldr	r2, [pc, #68]	; (800368c <stm32_clock_control_off+0x6c>)
 8003648:	6849      	ldr	r1, [r1, #4]
 800364a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800364c:	ea23 0301 	bic.w	r3, r3, r1
 8003650:	6353      	str	r3, [r2, #52]	; 0x34
 8003652:	e7f5      	b.n	8003640 <stm32_clock_control_off+0x20>
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003654:	4a0d      	ldr	r2, [pc, #52]	; (800368c <stm32_clock_control_off+0x6c>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8003656:	684b      	ldr	r3, [r1, #4]
 8003658:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800365a:	4319      	orrs	r1, r3
 800365c:	6391      	str	r1, [r2, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800365e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003660:	4013      	ands	r3, r2
 8003662:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003664:	9b01      	ldr	r3, [sp, #4]
 8003666:	e7eb      	b.n	8003640 <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8003668:	4a08      	ldr	r2, [pc, #32]	; (800368c <stm32_clock_control_off+0x6c>)
 800366a:	6849      	ldr	r1, [r1, #4]
 800366c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800366e:	ea23 0301 	bic.w	r3, r3, r1
 8003672:	6413      	str	r3, [r2, #64]	; 0x40
 8003674:	e7e4      	b.n	8003640 <stm32_clock_control_off+0x20>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003676:	4a05      	ldr	r2, [pc, #20]	; (800368c <stm32_clock_control_off+0x6c>)
 8003678:	6849      	ldr	r1, [r1, #4]
 800367a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800367c:	ea23 0301 	bic.w	r3, r3, r1
 8003680:	6453      	str	r3, [r2, #68]	; 0x44
 8003682:	e7dd      	b.n	8003640 <stm32_clock_control_off+0x20>
	switch (pclken->bus) {
 8003684:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003688:	e7db      	b.n	8003642 <stm32_clock_control_off+0x22>
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800

08003690 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <config_enable_default_clocks+0x1c>)
 8003692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003694:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003698:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 800369c:	b082      	sub	sp, #8
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80036a4:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 80036a6:	b002      	add	sp, #8
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800

080036b0 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 80036b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct device *port_device;
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 80036b4:	460f      	mov	r7, r1
 80036b6:	b911      	cbnz	r1, 80036be <stm32_dt_pinctrl_configure+0xe>
		/* Empty pinctrl. Exit */
		return 0;
 80036b8:	2000      	movs	r0, #0
		ret = pm_device_put(port_device);
#endif
	}

	return ret;
}
 80036ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < list_size; i++) {
 80036be:	2600      	movs	r6, #0
		port_device = gpio_ports[STM32_PORT(pin)];
 80036c0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800371c <stm32_dt_pinctrl_configure+0x6c>
 80036c4:	1d04      	adds	r4, r0, #4
	uint32_t func = 0;
 80036c6:	46b3      	mov	fp, r6
		mux = pinctrl[i].pinmux;
 80036c8:	f854 5c04 	ldr.w	r5, [r4, #-4]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 80036cc:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 80036d0:	d11e      	bne.n	8003710 <stm32_dt_pinctrl_configure+0x60>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	f042 0b20 	orr.w	fp, r2, #32
		port_device = gpio_ports[STM32_PORT(pin)];
 80036d8:	f3c5 3303 	ubfx	r3, r5, #12, #4
		ret = gpio_stm32_clock_request(port_device, true);
 80036dc:	2101      	movs	r1, #1
		port_device = gpio_ports[STM32_PORT(pin)];
 80036de:	f859 8023 	ldr.w	r8, [r9, r3, lsl #2]
		ret = gpio_stm32_clock_request(port_device, true);
 80036e2:	4640      	mov	r0, r8
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 80036e4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
		ret = gpio_stm32_clock_request(port_device, true);
 80036e8:	f000 ff18 	bl	800451c <gpio_stm32_clock_request>
		if (ret != 0) {
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d1e4      	bne.n	80036ba <stm32_dt_pinctrl_configure+0xa>
		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 80036f0:	b2eb      	uxtb	r3, r5
	if (port_device == NULL) {
 80036f2:	f1b8 0f00 	cmp.w	r8, #0
 80036f6:	d005      	beq.n	8003704 <stm32_dt_pinctrl_configure+0x54>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 80036f8:	465a      	mov	r2, fp
 80036fa:	f00a 010f 	and.w	r1, sl, #15
 80036fe:	4640      	mov	r0, r8
 8003700:	f003 fecb 	bl	800749a <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 8003704:	3601      	adds	r6, #1
 8003706:	42b7      	cmp	r7, r6
 8003708:	f104 0408 	add.w	r4, r4, #8
 800370c:	d1dc      	bne.n	80036c8 <stm32_dt_pinctrl_configure+0x18>
 800370e:	e7d3      	b.n	80036b8 <stm32_dt_pinctrl_configure+0x8>
		} else if (STM32_DT_PINMUX_FUNC(mux) == ANALOG) {
 8003710:	b2eb      	uxtb	r3, r5
			func = STM32_MODER_ANALOG_MODE;
 8003712:	2b10      	cmp	r3, #16
 8003714:	bf08      	it	eq
 8003716:	f04f 0b30 	moveq.w	fp, #48	; 0x30
 800371a:	e7dd      	b.n	80036d8 <stm32_dt_pinctrl_configure+0x28>
 800371c:	08009620 	.word	0x08009620

08003720 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8003720:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8003724:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8003726:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8003728:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 800372a:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <elapsed+0x34>)
 800372e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8003732:	4909      	ldr	r1, [pc, #36]	; (8003758 <elapsed+0x38>)
 8003734:	d101      	bne.n	800373a <elapsed+0x1a>
	    || (val1 < val2)) {
 8003736:	4282      	cmp	r2, r0
 8003738:	d206      	bcs.n	8003748 <elapsed+0x28>
		overflow_cyc += last_load;
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	680c      	ldr	r4, [r1, #0]
 800373e:	4422      	add	r2, r4
 8003740:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8003742:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003746:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	680a      	ldr	r2, [r1, #0]
 800374c:	4413      	add	r3, r2
}
 800374e:	1a18      	subs	r0, r3, r0
 8003750:	bd10      	pop	{r4, pc}
 8003752:	bf00      	nop
 8003754:	20001790 	.word	0x20001790
 8003758:	2000178c 	.word	0x2000178c

0800375c <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 800375c:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 800375e:	f7ff ffdf 	bl	8003720 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <sys_clock_isr+0x38>)
 8003764:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <sys_clock_isr+0x3c>)
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	6811      	ldr	r1, [r2, #0]
 800376a:	4408      	add	r0, r1
 800376c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8003772:	4a0a      	ldr	r2, [pc, #40]	; (800379c <sys_clock_isr+0x40>)
 8003774:	6813      	ldr	r3, [r2, #0]
 8003776:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800377a:	1ac0      	subs	r0, r0, r3
 800377c:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8003780:	fb01 3300 	mla	r3, r1, r0, r3
 8003784:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8003786:	f002 fcbb 	bl	8006100 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
}
 800378a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800378e:	f000 bd13 	b.w	80041b8 <z_arm_exc_exit>
 8003792:	bf00      	nop
 8003794:	20001790 	.word	0x20001790
 8003798:	20001788 	.word	0x20001788
 800379c:	20001784 	.word	0x20001784

080037a0 <sys_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a0:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <sys_clock_driver_init+0x28>)
 80037a2:	2210      	movs	r2, #16
 80037a4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <sys_clock_driver_init+0x2c>)
 80037aa:	f242 527f 	movw	r2, #9599	; 0x257f
 80037ae:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80037b0:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <sys_clock_driver_init+0x30>)
 80037b2:	2000      	movs	r0, #0
 80037b4:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 80037b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80037ba:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80037bc:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	f042 0207 	orr.w	r2, r2, #7
 80037c4:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 80037c6:	4770      	bx	lr
 80037c8:	e000ed00 	.word	0xe000ed00
 80037cc:	2000178c 	.word	0x2000178c
 80037d0:	20001790 	.word	0x20001790

080037d4 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	4d32      	ldr	r5, [pc, #200]	; (80038a0 <sys_clock_set_timeout+0xcc>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 80037d8:	b159      	cbz	r1, 80037f2 <sys_clock_set_timeout+0x1e>
 80037da:	1c43      	adds	r3, r0, #1
 80037dc:	d109      	bne.n	80037f2 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80037de:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80037e2:	6913      	ldr	r3, [r2, #16]
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 80037ea:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80037ee:	602b      	str	r3, [r5, #0]
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 80037f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80037f2:	f240 63d2 	movw	r3, #1746	; 0x6d2
 80037f6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80037fa:	bf08      	it	eq
 80037fc:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80037fe:	1e44      	subs	r4, r0, #1
 8003800:	2c00      	cmp	r4, #0
	uint32_t last_load_ = last_load;
 8003802:	682f      	ldr	r7, [r5, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8003804:	dd32      	ble.n	800386c <sys_clock_set_timeout+0x98>
 8003806:	429c      	cmp	r4, r3
 8003808:	bfa8      	it	ge
 800380a:	461c      	movge	r4, r3
	__asm__ volatile(
 800380c:	f04f 0310 	mov.w	r3, #16
 8003810:	f3ef 8611 	mrs	r6, BASEPRI
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 800381c:	f7ff ff80 	bl	8003720 <elapsed>
	cycle_count += pending;
 8003820:	4920      	ldr	r1, [pc, #128]	; (80038a4 <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8003822:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8003826:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8003828:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 800382c:	680b      	ldr	r3, [r1, #0]
 800382e:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <sys_clock_set_timeout+0xd4>)
	cycle_count += pending;
 8003832:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 8003834:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8003836:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <sys_clock_set_timeout+0xd8>)
 8003838:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800383a:	1ac2      	subs	r2, r0, r3
 800383c:	d518      	bpl.n	8003870 <sys_clock_set_timeout+0x9c>
		last_load = MIN_DELAY;
 800383e:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 8003842:	602b      	str	r3, [r5, #0]
	val2 = SysTick->VAL;
 8003844:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8003848:	682c      	ldr	r4, [r5, #0]
	val2 = SysTick->VAL;
 800384a:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 800384c:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 800384e:	bf38      	it	cc
 8003850:	44bc      	addcc	ip, r7
	SysTick->LOAD = last_load - 1;
 8003852:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 8003854:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 8003858:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 800385a:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 800385c:	2400      	movs	r4, #0
 800385e:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 8003860:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8003862:	f386 8811 	msr	BASEPRI, r6
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	e7c1      	b.n	80037f0 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800386c:	2400      	movs	r4, #0
 800386e:	e7cd      	b.n	800380c <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
 8003870:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
		delay += unannounced;
 8003874:	fb0e 2404 	mla	r4, lr, r4, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003878:	f504 5415 	add.w	r4, r4, #9536	; 0x2540
		delay -= unannounced;
 800387c:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800387e:	343f      	adds	r4, #63	; 0x3f
 8003880:	fbb4 f4fe 	udiv	r4, r4, lr
		delay -= unannounced;
 8003884:	fb0e 3404 	mla	r4, lr, r4, r3
		delay = MAX(delay, MIN_DELAY);
 8003888:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800388c:	d904      	bls.n	8003898 <sys_clock_set_timeout+0xc4>
		if (delay > MAX_CYCLES) {
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <sys_clock_set_timeout+0xdc>)
 8003890:	429c      	cmp	r4, r3
 8003892:	d8d6      	bhi.n	8003842 <sys_clock_set_timeout+0x6e>
			last_load = delay;
 8003894:	602c      	str	r4, [r5, #0]
 8003896:	e7d5      	b.n	8003844 <sys_clock_set_timeout+0x70>
		delay = MAX(delay, MIN_DELAY);
 8003898:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800389c:	e7fa      	b.n	8003894 <sys_clock_set_timeout+0xc0>
 800389e:	bf00      	nop
 80038a0:	2000178c 	.word	0x2000178c
 80038a4:	20001788 	.word	0x20001788
 80038a8:	20001790 	.word	0x20001790
 80038ac:	20001784 	.word	0x20001784
 80038b0:	00ffc300 	.word	0x00ffc300

080038b4 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 80038b4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80038b6:	f04f 0310 	mov.w	r3, #16
 80038ba:	f3ef 8411 	mrs	r4, BASEPRI
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 80038c6:	f7ff ff2b 	bl	8003720 <elapsed>
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <sys_clock_elapsed+0x34>)
 80038cc:	4a07      	ldr	r2, [pc, #28]	; (80038ec <sys_clock_elapsed+0x38>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	4418      	add	r0, r3
	__asm__ volatile(
 80038d6:	f384 8811 	msr	BASEPRI, r4
 80038da:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 80038de:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80038e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80038e6:	bd10      	pop	{r4, pc}
 80038e8:	20001788 	.word	0x20001788
 80038ec:	20001784 	.word	0x20001784

080038f0 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
 80038f0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80038f2:	f04f 0310 	mov.w	r3, #16
 80038f6:	f3ef 8411 	mrs	r4, BASEPRI
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 8003902:	f7ff ff0d 	bl	8003720 <elapsed>
 8003906:	4b04      	ldr	r3, [pc, #16]	; (8003918 <sys_clock_cycle_get_32+0x28>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4418      	add	r0, r3
	__asm__ volatile(
 800390c:	f384 8811 	msr	BASEPRI, r4
 8003910:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8003914:	bd10      	pop	{r4, pc}
 8003916:	bf00      	nop
 8003918:	20001788 	.word	0x20001788

0800391c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 800391c:	4a09      	ldr	r2, [pc, #36]	; (8003944 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 800391e:	490a      	ldr	r1, [pc, #40]	; (8003948 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8003920:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8003922:	6809      	ldr	r1, [r1, #0]
 8003924:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003926:	4909      	ldr	r1, [pc, #36]	; (800394c <arch_swap+0x30>)
	_current->arch.basepri = key;
 8003928:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800392a:	684b      	ldr	r3, [r1, #4]
 800392c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003930:	604b      	str	r3, [r1, #4]
 8003932:	2300      	movs	r3, #0
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 800393c:	6893      	ldr	r3, [r2, #8]
}
 800393e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20001918 	.word	0x20001918
 8003948:	080098e4 	.word	0x080098e4
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003950:	4921      	ldr	r1, [pc, #132]	; (80039d8 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003952:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 8003954:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003958:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 800395c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800395e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8003962:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #0x10    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
 8003966:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
 800396a:	d103      	bne.n	8003974 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 800396c:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
 8003970:	ec80 8a10 	vstmia	r0, {s16-s31}

08003974 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003974:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8003976:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 800397a:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 800397e:	4f17      	ldr	r7, [pc, #92]	; (80039dc <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8003980:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8003984:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8003986:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8003988:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 800398a:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800398e:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8003990:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8003992:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8003994:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
 8003998:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
 800399c:	d003      	beq.n	80039a6 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 800399e:	2300      	movs	r3, #0
    vmsr fpscr, r3
 80039a0:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
 80039a4:	e003      	b.n	80039ae <in_fp_endif>

080039a6 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 80039a6:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
 80039aa:	ec90 8a10 	vldmia	r0, {s16-s31}

080039ae <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 80039ae:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
 80039b2:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 80039b6:	f383 8814 	msr	CONTROL, r3
    isb
 80039ba:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80039be:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80039c0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80039c2:	f000 fc31 	bl	8004228 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80039c6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80039ca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80039ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80039d2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80039d6:	4770      	bx	lr
    ldr r1, =_kernel
 80039d8:	20001918 	.word	0x20001918
    ldr v4, =_SCS_ICSR
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 80039e0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80039e4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80039e6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80039ea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80039ee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80039f0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80039f4:	2902      	cmp	r1, #2
    beq _oops
 80039f6:	d0ff      	beq.n	80039f8 <_oops>

080039f8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80039f8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80039fa:	f003 fce1 	bl	80073c0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80039fe:	bd01      	pop	{r0, pc}

08003a00 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003a00:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	db08      	blt.n	8003a18 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a06:	2201      	movs	r2, #1
 8003a08:	f000 001f 	and.w	r0, r0, #31
 8003a0c:	fa02 f000 	lsl.w	r0, r2, r0
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	4a02      	ldr	r2, [pc, #8]	; (8003a1c <arch_irq_enable+0x1c>)
 8003a14:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000e100 	.word	0xe000e100

08003a20 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8003a20:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003a22:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a24:	bfa8      	it	ge
 8003a26:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8003a2a:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2e:	bfb8      	it	lt
 8003a30:	4b06      	ldrlt	r3, [pc, #24]	; (8003a4c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a32:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8003a36:	bfac      	ite	ge
 8003a38:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a40:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a42:	bfb4      	ite	lt
 8003a44:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a46:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8003a4a:	4770      	bx	lr
 8003a4c:	e000ed14 	.word	0xe000ed14

08003a50 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8003a50:	7b01      	ldrb	r1, [r0, #12]
{
 8003a52:	b510      	push	{r4, lr}
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8003a54:	f011 0402 	ands.w	r4, r1, #2
 8003a58:	d005      	beq.n	8003a66 <arch_new_thread+0x16>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
 8003a5a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8003a5c:	3160      	adds	r1, #96	; 0x60
 8003a5e:	6641      	str	r1, [r0, #100]	; 0x64
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
 8003a60:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8003a62:	3960      	subs	r1, #96	; 0x60
 8003a64:	6681      	str	r1, [r0, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8003a66:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8003a6a:	9b02      	ldr	r3, [sp, #8]
 8003a6c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8003a70:	490f      	ldr	r1, [pc, #60]	; (8003ab0 <arch_new_thread+0x60>)
	iframe->a3 = (uint32_t)p2;
 8003a72:	9b03      	ldr	r3, [sp, #12]
 8003a74:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8003a78:	9b04      	ldr	r3, [sp, #16]
 8003a7a:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8003a7e:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8003a82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a86:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8003a8a:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8003a8e:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8003a90:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8003a92:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8003a94:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
 8003a96:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8003a9a:	b91c      	cbnz	r4, 8003aa4 <arch_new_thread+0x54>
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
 8003a9c:	23fd      	movs	r3, #253	; 0xfd
 8003a9e:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003aa2:	bd10      	pop	{r4, pc}
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8003aa4:	f64f 5308 	movw	r3, #64776	; 0xfd08
 8003aa8:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
 8003aac:	e7f9      	b.n	8003aa2 <arch_new_thread+0x52>
 8003aae:	bf00      	nop
 8003ab0:	08006679 	.word	0x08006679

08003ab4 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * Adjust the MPU stack guard size together with the FPU
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
 8003ab4:	b530      	push	{r4, r5, lr}
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8003ab6:	7b01      	ldrb	r1, [r0, #12]
		if ((thread->arch.mode &
 8003ab8:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8003abc:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <z_arm_mpu_stack_guard_and_fpu_adjust+0x68>)
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8003abe:	f011 0f02 	tst.w	r1, #2
		if ((thread->arch.mode &
 8003ac2:	f003 0508 	and.w	r5, r3, #8
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8003ac6:	d103      	bne.n	8003ad0 <z_arm_mpu_stack_guard_and_fpu_adjust+0x1c>
 8003ac8:	f890 40bd 	ldrb.w	r4, [r0, #189]	; 0xbd
 8003acc:	06e4      	lsls	r4, r4, #27
 8003ace:	d413      	bmi.n	8003af8 <z_arm_mpu_stack_guard_and_fpu_adjust+0x44>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
 8003ad0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003ad2:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8003ad6:	6354      	str	r4, [r2, #52]	; 0x34
		if ((thread->arch.mode &
 8003ad8:	b94d      	cbnz	r5, 8003aee <z_arm_mpu_stack_guard_and_fpu_adjust+0x3a>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8003ada:	f043 0308 	orr.w	r3, r3, #8
 8003ade:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start +=
 8003ae2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003ae4:	3360      	adds	r3, #96	; 0x60
 8003ae6:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size -=
 8003ae8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003aea:	3b60      	subs	r3, #96	; 0x60
 8003aec:	6683      	str	r3, [r0, #104]	; 0x68

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
 8003aee:	f041 0102 	orr.w	r1, r1, #2
 8003af2:	7301      	strb	r1, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
 8003af4:	2080      	movs	r0, #128	; 0x80
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
 8003af6:	bd30      	pop	{r4, r5, pc}
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
 8003af8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003afa:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 8003afe:	6351      	str	r1, [r2, #52]	; 0x34
		if ((thread->arch.mode &
 8003b00:	b14d      	cbz	r5, 8003b16 <z_arm_mpu_stack_guard_and_fpu_adjust+0x62>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8003b02:	f023 0308 	bic.w	r3, r3, #8
 8003b06:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start -=
 8003b0a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003b0c:	3b60      	subs	r3, #96	; 0x60
 8003b0e:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size +=
 8003b10:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003b12:	3360      	adds	r3, #96	; 0x60
 8003b14:	6683      	str	r3, [r0, #104]	; 0x68
	return MPU_GUARD_ALIGN_AND_SIZE;
 8003b16:	2020      	movs	r0, #32
 8003b18:	e7ed      	b.n	8003af6 <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
 8003b1a:	bf00      	nop
 8003b1c:	e000ef00 	.word	0xe000ef00

08003b20 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8003b20:	4b0d      	ldr	r3, [pc, #52]	; (8003b58 <z_check_thread_stack_fail+0x38>)
{
 8003b22:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
 8003b24:	6898      	ldr	r0, [r3, #8]
{
 8003b26:	b510      	push	{r4, lr}

	if (thread == NULL) {
 8003b28:	b190      	cbz	r0, 8003b50 <z_check_thread_stack_fail+0x30>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
 8003b2a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8003b2e:	6e40      	ldr	r0, [r0, #100]	; 0x64
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 8003b30:	f013 0f08 	tst.w	r3, #8
 8003b34:	bf14      	ite	ne
 8003b36:	2480      	movne	r4, #128	; 0x80
 8003b38:	2420      	moveq	r4, #32
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8003b3a:	f112 0f16 	cmn.w	r2, #22
 8003b3e:	d004      	beq.n	8003b4a <z_check_thread_stack_fail+0x2a>
 8003b40:	1b03      	subs	r3, r0, r4
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d805      	bhi.n	8003b52 <z_check_thread_stack_fail+0x32>
 8003b46:	4282      	cmp	r2, r0
 8003b48:	d203      	bcs.n	8003b52 <z_check_thread_stack_fail+0x32>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8003b4a:	4281      	cmp	r1, r0
 8003b4c:	bf28      	it	cs
 8003b4e:	2000      	movcs	r0, #0
}
 8003b50:	bd10      	pop	{r4, pc}
	return 0;
 8003b52:	2000      	movs	r0, #0
 8003b54:	e7fc      	b.n	8003b50 <z_check_thread_stack_fail+0x30>
 8003b56:	bf00      	nop
 8003b58:	20001918 	.word	0x20001918

08003b5c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8003b5c:	b508      	push	{r3, lr}
 8003b5e:	4614      	mov	r4, r2
 8003b60:	460d      	mov	r5, r1
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 8003b62:	2200      	movs	r2, #0
 8003b64:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003b68:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8003b6c:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8003b70:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003b74:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8003b78:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <arch_switch_to_main_thread+0x40>)
 8003b7a:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003b7c:	f000 fb54 	bl	8004228 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003b80:	4620      	mov	r0, r4
 8003b82:	f385 8809 	msr	PSP, r5
 8003b86:	2100      	movs	r1, #0
 8003b88:	b663      	cpsie	if
 8003b8a:	f381 8811 	msr	BASEPRI, r1
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	2200      	movs	r2, #0
 8003b94:	2300      	movs	r3, #0
 8003b96:	f002 fd6f 	bl	8006678 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8003b9a:	bf00      	nop
 8003b9c:	20001918 	.word	0x20001918

08003ba0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8003ba0:	4901      	ldr	r1, [pc, #4]	; (8003ba8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8003ba2:	2210      	movs	r2, #16
	str	r2, [r1]
 8003ba4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8003ba6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8003ba8:	e000ed10 	.word	0xe000ed10

08003bac <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8003bac:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8003bae:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8003bb0:	f380 8811 	msr	BASEPRI, r0
	isb
 8003bb4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8003bb8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8003bbc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8003bbe:	b662      	cpsie	i
	isb
 8003bc0:	f3bf 8f6f 	isb	sy

	bx	lr
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop

08003bc8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bcc:	4607      	mov	r7, r0
 8003bce:	b08b      	sub	sp, #44	; 0x2c

	if (esf != NULL) {
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	2900      	cmp	r1, #0
 8003bd4:	d054      	beq.n	8003c80 <z_arm_fatal_error+0xb8>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <z_arm_fatal_error+0xc8>)
 8003bd8:	4d2e      	ldr	r5, [pc, #184]	; (8003c94 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8003bda:	482f      	ldr	r0, [pc, #188]	; (8003c98 <z_arm_fatal_error+0xd0>)
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 8003bdc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8003cac <z_arm_fatal_error+0xe4>
 8003be0:	1aed      	subs	r5, r5, r3
 8003be2:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8003be4:	01ad      	lsls	r5, r5, #6
 8003be6:	f045 0501 	orr.w	r5, r5, #1
 8003bea:	f8ad 5000 	strh.w	r5, [sp]
 8003bee:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8003bf2:	6809      	ldr	r1, [r1, #0]
 8003bf4:	f003 f8ae 	bl	8006d54 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8003bf8:	f8ad 5000 	strh.w	r5, [sp]
 8003bfc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8003c00:	68e1      	ldr	r1, [r4, #12]
 8003c02:	4826      	ldr	r0, [pc, #152]	; (8003c9c <z_arm_fatal_error+0xd4>)
 8003c04:	f003 f8a6 	bl	8006d54 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8003c08:	69e1      	ldr	r1, [r4, #28]
 8003c0a:	4825      	ldr	r0, [pc, #148]	; (8003ca0 <z_arm_fatal_error+0xd8>)
 8003c0c:	462a      	mov	r2, r5
 8003c0e:	f003 f871 	bl	8006cf4 <log_1>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 8003c12:	46a0      	mov	r8, r4
 8003c14:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 8003c16:	edd8 7a08 	vldr	s15, [r8, #32]
 8003c1a:	9602      	str	r6, [sp, #8]
 8003c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c20:	1c73      	adds	r3, r6, #1
 8003c22:	edcd 7a03 	vstr	s15, [sp, #12]
 8003c26:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 8003c2a:	9304      	str	r3, [sp, #16]
 8003c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c30:	1cb3      	adds	r3, r6, #2
 8003c32:	edcd 7a05 	vstr	s15, [sp, #20]
 8003c36:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
 8003c3a:	9306      	str	r3, [sp, #24]
 8003c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c40:	1cf3      	adds	r3, r6, #3
 8003c42:	edcd 7a07 	vstr	s15, [sp, #28]
 8003c46:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 8003c4a:	9308      	str	r3, [sp, #32]
 8003c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c50:	2208      	movs	r2, #8
 8003c52:	462b      	mov	r3, r5
 8003c54:	eb0d 0102 	add.w	r1, sp, r2
 8003c58:	4648      	mov	r0, r9
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 8003c5a:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 8003c5c:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8003c60:	f003 f897 	bl	8006d92 <log_n>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 8003c64:	2e10      	cmp	r6, #16
 8003c66:	f108 0810 	add.w	r8, r8, #16
 8003c6a:	d1d4      	bne.n	8003c16 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
 8003c6c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003c6e:	480d      	ldr	r0, [pc, #52]	; (8003ca4 <z_arm_fatal_error+0xdc>)
 8003c70:	462a      	mov	r2, r5
 8003c72:	f003 f83f 	bl	8006cf4 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8003c76:	69a1      	ldr	r1, [r4, #24]
 8003c78:	480b      	ldr	r0, [pc, #44]	; (8003ca8 <z_arm_fatal_error+0xe0>)
 8003c7a:	462a      	mov	r2, r5
 8003c7c:	f003 f83a 	bl	8006cf4 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8003c80:	4621      	mov	r1, r4
 8003c82:	4638      	mov	r0, r7
}
 8003c84:	b00b      	add	sp, #44	; 0x2c
 8003c86:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_fatal_error(reason, esf);
 8003c8a:	f001 bbc3 	b.w	8005414 <z_fatal_error>
 8003c8e:	bf00      	nop
 8003c90:	08008974 	.word	0x08008974
 8003c94:	0800899c 	.word	0x0800899c
 8003c98:	08009ae5 	.word	0x08009ae5
 8003c9c:	08009b14 	.word	0x08009b14
 8003ca0:	08009b43 	.word	0x08009b43
 8003ca4:	08009b95 	.word	0x08009b95
 8003ca8:	08009ba4 	.word	0x08009ba4
 8003cac:	08009b52 	.word	0x08009b52

08003cb0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8003cb0:	bf30      	wfi
    b z_SysNmiOnReset
 8003cb2:	f7ff bffd 	b.w	8003cb0 <z_SysNmiOnReset>
 8003cb6:	bf00      	nop

08003cb8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003cb8:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8003cba:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003cbc:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <z_arm_prep_c+0x58>)
 8003cbe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003cc2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003cc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003cc8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8003ccc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cd0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8003cd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cdc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8003ce4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8003ce8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
 8003cec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003cf0:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8003cfa:	f001 fbe9 	bl	80054d0 <z_bss_zero>
	z_data_copy();
 8003cfe:	f002 f921 	bl	8005f44 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8003d02:	f000 fa67 	bl	80041d4 <z_arm_interrupt_init>
	z_cstart();
 8003d06:	f001 fc0b 	bl	8005520 <z_cstart>
 8003d0a:	bf00      	nop
 8003d0c:	08000000 	.word	0x08000000
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8003d14:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8003d16:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8003d1a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003d1e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8003d22:	4904      	ldr	r1, [pc, #16]	; (8003d34 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8003d24:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8003d26:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8003d28:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8003d2a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8003d2e:	4902      	ldr	r1, [pc, #8]	; (8003d38 <_isr_wrapper+0x24>)
	bx r1
 8003d30:	4708      	bx	r1
 8003d32:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8003d34:	08008664 	.word	0x08008664
	ldr r1, =z_arm_int_exit
 8003d38:	080041b9 	.word	0x080041b9

08003d3c <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003d3c:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8003d3e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8003d42:	4808      	ldr	r0, [pc, #32]	; (8003d64 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8003d44:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8003d48:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8003d4a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8003d4e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8003d52:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8003d54:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8003d56:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8003d5a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8003d5e:	f7ff ffab 	bl	8003cb8 <z_arm_prep_c>
 8003d62:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8003d64:	20003a80 	.word	0x20003a80

08003d68 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8003d68:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8003d6c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8003d70:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8003d72:	4672      	mov	r2, lr
	bl z_arm_fault
 8003d74:	f000 f94e 	bl	8004014 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8003d78:	bd01      	pop	{r0, pc}
 8003d7a:	bf00      	nop

08003d7c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8003d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d80:	4b35      	ldr	r3, [pc, #212]	; (8003e58 <mem_manage_fault+0xdc>)
 8003d82:	4c36      	ldr	r4, [pc, #216]	; (8003e5c <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003d84:	4d36      	ldr	r5, [pc, #216]	; (8003e60 <mem_manage_fault+0xe4>)
 8003d86:	1ae4      	subs	r4, r4, r3
 8003d88:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
 8003d8a:	01a4      	lsls	r4, r4, #6
 8003d8c:	f044 0901 	orr.w	r9, r4, #1
{
 8003d90:	4607      	mov	r7, r0
 8003d92:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 8003d94:	4833      	ldr	r0, [pc, #204]	; (8003e64 <mem_manage_fault+0xe8>)
 8003d96:	4649      	mov	r1, r9
{
 8003d98:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8003d9a:	f002 ff9c 	bl	8006cd6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003d9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003da0:	06db      	lsls	r3, r3, #27
 8003da2:	d503      	bpl.n	8003dac <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8003da4:	4830      	ldr	r0, [pc, #192]	; (8003e68 <mem_manage_fault+0xec>)
 8003da6:	4649      	mov	r1, r9
 8003da8:	f002 ff95 	bl	8006cd6 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8003dac:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003dae:	0718      	lsls	r0, r3, #28
 8003db0:	d504      	bpl.n	8003dbc <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
 8003db2:	482e      	ldr	r0, [pc, #184]	; (8003e6c <mem_manage_fault+0xf0>)
 8003db4:	f044 0101 	orr.w	r1, r4, #1
 8003db8:	f002 ff8d 	bl	8006cd6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8003dbc:	4d28      	ldr	r5, [pc, #160]	; (8003e60 <mem_manage_fault+0xe4>)
 8003dbe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003dc0:	0799      	lsls	r1, r3, #30
 8003dc2:	d423      	bmi.n	8003e0c <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
 8003dc4:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8003dc8:	4d25      	ldr	r5, [pc, #148]	; (8003e60 <mem_manage_fault+0xe4>)
 8003dca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003dcc:	07db      	lsls	r3, r3, #31
 8003dce:	d504      	bpl.n	8003dda <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
 8003dd0:	4827      	ldr	r0, [pc, #156]	; (8003e70 <mem_manage_fault+0xf4>)
 8003dd2:	f044 0101 	orr.w	r1, r4, #1
 8003dd6:	f002 ff7e 	bl	8006cd6 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8003dda:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003ddc:	0698      	lsls	r0, r3, #26
 8003dde:	d504      	bpl.n	8003dea <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
 8003de0:	4824      	ldr	r0, [pc, #144]	; (8003e74 <mem_manage_fault+0xf8>)
 8003de2:	f044 0101 	orr.w	r1, r4, #1
 8003de6:	f002 ff76 	bl	8006cd6 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <mem_manage_fault+0xe4>)
 8003dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dee:	06d1      	lsls	r1, r2, #27
 8003df0:	d424      	bmi.n	8003e3c <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8003df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003df4:	0792      	lsls	r2, r2, #30
 8003df6:	d421      	bmi.n	8003e3c <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8003df8:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8003dfa:	4a19      	ldr	r2, [pc, #100]	; (8003e60 <mem_manage_fault+0xe4>)
 8003dfc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003dfe:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8003e02:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8003e04:	2300      	movs	r3, #0
 8003e06:	7033      	strb	r3, [r6, #0]

	return reason;
}
 8003e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
 8003e0c:	f044 0a01 	orr.w	sl, r4, #1
 8003e10:	4819      	ldr	r0, [pc, #100]	; (8003e78 <mem_manage_fault+0xfc>)
 8003e12:	4651      	mov	r1, sl
 8003e14:	f002 ff5f 	bl	8006cd6 <log_0>
		uint32_t temp = SCB->MMFAR;
 8003e18:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8003e1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003e1e:	061a      	lsls	r2, r3, #24
 8003e20:	d5d0      	bpl.n	8003dc4 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8003e22:	4816      	ldr	r0, [pc, #88]	; (8003e7c <mem_manage_fault+0x100>)
 8003e24:	4652      	mov	r2, sl
 8003e26:	4649      	mov	r1, r9
 8003e28:	f002 ff64 	bl	8006cf4 <log_1>
			if (from_hard_fault != 0) {
 8003e2c:	f1b8 0f00 	cmp.w	r8, #0
 8003e30:	d0ca      	beq.n	8003dc8 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8003e32:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e38:	62ab      	str	r3, [r5, #40]	; 0x28
 8003e3a:	e7c5      	b.n	8003dc8 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	051b      	lsls	r3, r3, #20
 8003e40:	d5da      	bpl.n	8003df8 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8003e42:	4639      	mov	r1, r7
 8003e44:	4648      	mov	r0, r9
 8003e46:	f7ff fe6b 	bl	8003b20 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d0d4      	beq.n	8003df8 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003e4e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8003e52:	2002      	movs	r0, #2
 8003e54:	e7d1      	b.n	8003dfa <mem_manage_fault+0x7e>
 8003e56:	bf00      	nop
 8003e58:	08008974 	.word	0x08008974
 8003e5c:	0800899c 	.word	0x0800899c
 8003e60:	e000ed00 	.word	0xe000ed00
 8003e64:	08009bd2 	.word	0x08009bd2
 8003e68:	08009be8 	.word	0x08009be8
 8003e6c:	08009c1b 	.word	0x08009c1b
 8003e70:	08009c5c 	.word	0x08009c5c
 8003e74:	08009c7b 	.word	0x08009c7b
 8003e78:	08009c2e 	.word	0x08009c2e
 8003e7c:	08009c46 	.word	0x08009c46

08003e80 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 8003e80:	b570      	push	{r4, r5, r6, lr}
 8003e82:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <usage_fault.constprop.0+0x90>)
 8003e84:	4c23      	ldr	r4, [pc, #140]	; (8003f14 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003e86:	4d24      	ldr	r5, [pc, #144]	; (8003f18 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
 8003e88:	4824      	ldr	r0, [pc, #144]	; (8003f1c <usage_fault.constprop.0+0x9c>)
 8003e8a:	1ae4      	subs	r4, r4, r3
 8003e8c:	08e4      	lsrs	r4, r4, #3
 8003e8e:	01a4      	lsls	r4, r4, #6
 8003e90:	f044 0601 	orr.w	r6, r4, #1
 8003e94:	4631      	mov	r1, r6
 8003e96:	f002 ff1e 	bl	8006cd6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003e9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003e9c:	019b      	lsls	r3, r3, #6
 8003e9e:	d503      	bpl.n	8003ea8 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
 8003ea0:	481f      	ldr	r0, [pc, #124]	; (8003f20 <usage_fault.constprop.0+0xa0>)
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	f002 ff17 	bl	8006cd6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003ea8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003eaa:	01dd      	lsls	r5, r3, #7
 8003eac:	d504      	bpl.n	8003eb8 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
 8003eae:	481d      	ldr	r0, [pc, #116]	; (8003f24 <usage_fault.constprop.0+0xa4>)
 8003eb0:	f044 0101 	orr.w	r1, r4, #1
 8003eb4:	f002 ff0f 	bl	8006cd6 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8003eb8:	4d17      	ldr	r5, [pc, #92]	; (8003f18 <usage_fault.constprop.0+0x98>)
 8003eba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003ebc:	0318      	lsls	r0, r3, #12
 8003ebe:	d504      	bpl.n	8003eca <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
 8003ec0:	4819      	ldr	r0, [pc, #100]	; (8003f28 <usage_fault.constprop.0+0xa8>)
 8003ec2:	f044 0101 	orr.w	r1, r4, #1
 8003ec6:	f002 ff06 	bl	8006cd6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8003eca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003ecc:	0359      	lsls	r1, r3, #13
 8003ece:	d504      	bpl.n	8003eda <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8003ed0:	4816      	ldr	r0, [pc, #88]	; (8003f2c <usage_fault.constprop.0+0xac>)
 8003ed2:	f044 0101 	orr.w	r1, r4, #1
 8003ed6:	f002 fefe 	bl	8006cd6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8003eda:	4d0f      	ldr	r5, [pc, #60]	; (8003f18 <usage_fault.constprop.0+0x98>)
 8003edc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003ede:	039a      	lsls	r2, r3, #14
 8003ee0:	d504      	bpl.n	8003eec <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8003ee2:	4813      	ldr	r0, [pc, #76]	; (8003f30 <usage_fault.constprop.0+0xb0>)
 8003ee4:	f044 0101 	orr.w	r1, r4, #1
 8003ee8:	f002 fef5 	bl	8006cd6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8003eec:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003eee:	03db      	lsls	r3, r3, #15
 8003ef0:	d504      	bpl.n	8003efc <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8003ef2:	4810      	ldr	r0, [pc, #64]	; (8003f34 <usage_fault.constprop.0+0xb4>)
 8003ef4:	f044 0101 	orr.w	r1, r4, #1
 8003ef8:	f002 feed 	bl	8006cd6 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003efc:	4a06      	ldr	r2, [pc, #24]	; (8003f18 <usage_fault.constprop.0+0x98>)
 8003efe:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003f00:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003f04:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003f08:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	bd70      	pop	{r4, r5, r6, pc}
 8003f0e:	bf00      	nop
 8003f10:	08008974 	.word	0x08008974
 8003f14:	0800899c 	.word	0x0800899c
 8003f18:	e000ed00 	.word	0xe000ed00
 8003f1c:	08009caa 	.word	0x08009caa
 8003f20:	08009cc2 	.word	0x08009cc2
 8003f24:	08009cd5 	.word	0x08009cd5
 8003f28:	08009cef 	.word	0x08009cef
 8003f2c:	08009d0d 	.word	0x08009d0d
 8003f30:	08009d32 	.word	0x08009d32
 8003f34:	08009d4c 	.word	0x08009d4c

08003f38 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8003f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <bus_fault.constprop.0+0xb0>)
 8003f3e:	4c2b      	ldr	r4, [pc, #172]	; (8003fec <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003f40:	4d2b      	ldr	r5, [pc, #172]	; (8003ff0 <bus_fault.constprop.0+0xb8>)
 8003f42:	1ae4      	subs	r4, r4, r3
 8003f44:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
 8003f46:	01a4      	lsls	r4, r4, #6
 8003f48:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 8003f50:	4828      	ldr	r0, [pc, #160]	; (8003ff4 <bus_fault.constprop.0+0xbc>)
 8003f52:	4641      	mov	r1, r8
 8003f54:	f002 febf 	bl	8006cd6 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003f58:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003f5a:	04d9      	lsls	r1, r3, #19
 8003f5c:	d503      	bpl.n	8003f66 <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
 8003f5e:	4826      	ldr	r0, [pc, #152]	; (8003ff8 <bus_fault.constprop.0+0xc0>)
 8003f60:	4641      	mov	r1, r8
 8003f62:	f002 feb8 	bl	8006cd6 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8003f66:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003f68:	051a      	lsls	r2, r3, #20
 8003f6a:	d504      	bpl.n	8003f76 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
 8003f6c:	4823      	ldr	r0, [pc, #140]	; (8003ffc <bus_fault.constprop.0+0xc4>)
 8003f6e:	f044 0101 	orr.w	r1, r4, #1
 8003f72:	f002 feb0 	bl	8006cd6 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8003f76:	4d1e      	ldr	r5, [pc, #120]	; (8003ff0 <bus_fault.constprop.0+0xb8>)
 8003f78:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003f7a:	059b      	lsls	r3, r3, #22
 8003f7c:	d512      	bpl.n	8003fa4 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
 8003f7e:	f044 0801 	orr.w	r8, r4, #1
 8003f82:	481f      	ldr	r0, [pc, #124]	; (8004000 <bus_fault.constprop.0+0xc8>)
 8003f84:	4641      	mov	r1, r8
 8003f86:	f002 fea6 	bl	8006cd6 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 8003f8a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8003f8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003f8e:	0418      	lsls	r0, r3, #16
 8003f90:	d508      	bpl.n	8003fa4 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8003f92:	481c      	ldr	r0, [pc, #112]	; (8004004 <bus_fault.constprop.0+0xcc>)
 8003f94:	4642      	mov	r2, r8
 8003f96:	f002 fead 	bl	8006cf4 <log_1>
			if (from_hard_fault != 0) {
 8003f9a:	b11f      	cbz	r7, 8003fa4 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8003f9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003f9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fa2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8003fa4:	4d12      	ldr	r5, [pc, #72]	; (8003ff0 <bus_fault.constprop.0+0xb8>)
 8003fa6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003fa8:	0559      	lsls	r1, r3, #21
 8003faa:	d504      	bpl.n	8003fb6 <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
 8003fac:	4816      	ldr	r0, [pc, #88]	; (8004008 <bus_fault.constprop.0+0xd0>)
 8003fae:	f044 0101 	orr.w	r1, r4, #1
 8003fb2:	f002 fe90 	bl	8006cd6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8003fb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003fb8:	05da      	lsls	r2, r3, #23
 8003fba:	d50d      	bpl.n	8003fd8 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
 8003fbc:	4813      	ldr	r0, [pc, #76]	; (800400c <bus_fault.constprop.0+0xd4>)
 8003fbe:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8003fc2:	f002 fe88 	bl	8006cd6 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <bus_fault.constprop.0+0xb8>)
 8003fc8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8003fca:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003fcc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8003fd0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8003fd2:	7030      	strb	r0, [r6, #0]
}
 8003fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8003fd8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003fda:	049b      	lsls	r3, r3, #18
 8003fdc:	d5f3      	bpl.n	8003fc6 <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8003fde:	480c      	ldr	r0, [pc, #48]	; (8004010 <bus_fault.constprop.0+0xd8>)
 8003fe0:	f044 0101 	orr.w	r1, r4, #1
 8003fe4:	e7ed      	b.n	8003fc2 <bus_fault.constprop.0+0x8a>
 8003fe6:	bf00      	nop
 8003fe8:	08008974 	.word	0x08008974
 8003fec:	0800899c 	.word	0x0800899c
 8003ff0:	e000ed00 	.word	0xe000ed00
 8003ff4:	08009d77 	.word	0x08009d77
 8003ff8:	08009d8d 	.word	0x08009d8d
 8003ffc:	08009c1b 	.word	0x08009c1b
 8004000:	08009d9e 	.word	0x08009d9e
 8004004:	08009db7 	.word	0x08009db7
 8004008:	08009dcc 	.word	0x08009dcc
 800400c:	08009de7 	.word	0x08009de7
 8004010:	08009c7b 	.word	0x08009c7b

08004014 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8004014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8004018:	4b58      	ldr	r3, [pc, #352]	; (800417c <z_arm_fault+0x168>)
 800401a:	685e      	ldr	r6, [r3, #4]
{
 800401c:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800401e:	f3c6 0408 	ubfx	r4, r6, #0, #9
 8004022:	2500      	movs	r5, #0
 8004024:	f385 8811 	msr	BASEPRI, r5
 8004028:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800402c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8004030:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8004034:	d10d      	bne.n	8004052 <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8004036:	f002 030c 	and.w	r3, r2, #12
 800403a:	2b08      	cmp	r3, #8
 800403c:	d10b      	bne.n	8004056 <z_arm_fault+0x42>
 800403e:	4950      	ldr	r1, [pc, #320]	; (8004180 <z_arm_fault+0x16c>)
 8004040:	4b50      	ldr	r3, [pc, #320]	; (8004184 <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8004042:	4851      	ldr	r0, [pc, #324]	; (8004188 <z_arm_fault+0x174>)
 8004044:	1ac9      	subs	r1, r1, r3
 8004046:	08c9      	lsrs	r1, r1, #3
 8004048:	0189      	lsls	r1, r1, #6
 800404a:	f041 0101 	orr.w	r1, r1, #1
 800404e:	f002 fe42 	bl	8006cd6 <log_0>
		return NULL;
 8004052:	462f      	mov	r7, r5
 8004054:	e004      	b.n	8004060 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8004056:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8004058:	bf4e      	itee	mi
 800405a:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
 800405c:	4607      	movpl	r7, r0
			*nested_exc = true;
 800405e:	2501      	movpl	r5, #1
	*recoverable = false;
 8004060:	2300      	movs	r3, #0
 8004062:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
 8004066:	1ee3      	subs	r3, r4, #3
 8004068:	2b09      	cmp	r3, #9
 800406a:	d86e      	bhi.n	800414a <z_arm_fault+0x136>
 800406c:	e8df f003 	tbb	[pc, r3]
 8004070:	40605c05 	.word	0x40605c05
 8004074:	6d6d6d6d 	.word	0x6d6d6d6d
 8004078:	646d      	.short	0x646d
 800407a:	4b42      	ldr	r3, [pc, #264]	; (8004184 <z_arm_fault+0x170>)
 800407c:	4e40      	ldr	r6, [pc, #256]	; (8004180 <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800407e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800417c <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
 8004082:	4842      	ldr	r0, [pc, #264]	; (800418c <z_arm_fault+0x178>)
 8004084:	1af6      	subs	r6, r6, r3
 8004086:	08f6      	lsrs	r6, r6, #3
 8004088:	01b6      	lsls	r6, r6, #6
 800408a:	f046 0601 	orr.w	r6, r6, #1
 800408e:	4631      	mov	r1, r6
 8004090:	f002 fe21 	bl	8006cd6 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004094:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
 8004098:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800409c:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
 80040a0:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80040a4:	d005      	beq.n	80040b2 <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
 80040a6:	483a      	ldr	r0, [pc, #232]	; (8004190 <z_arm_fault+0x17c>)
 80040a8:	4631      	mov	r1, r6
	PR_FAULT_INFO(
 80040aa:	f002 fe14 	bl	8006cd6 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80040ae:	2400      	movs	r4, #0
}
 80040b0:	e021      	b.n	80040f6 <z_arm_fault+0xe2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80040b2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	d51d      	bpl.n	80040f6 <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
 80040ba:	4836      	ldr	r0, [pc, #216]	; (8004194 <z_arm_fault+0x180>)
 80040bc:	4631      	mov	r1, r6
 80040be:	f002 fe0a 	bl	8006cd6 <log_0>
		if (SCB_MMFSR != 0) {
 80040c2:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 80040c6:	b133      	cbz	r3, 80040d6 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
 80040c8:	f10d 0207 	add.w	r2, sp, #7
 80040cc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80040ce:	4638      	mov	r0, r7
 80040d0:	f7ff fe54 	bl	8003d7c <mem_manage_fault>
 80040d4:	e00e      	b.n	80040f4 <z_arm_fault+0xe0>
		} else if (SCB_BFSR != 0) {
 80040d6:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
 80040da:	b12b      	cbz	r3, 80040e8 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
 80040dc:	f10d 0107 	add.w	r1, sp, #7
 80040e0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80040e2:	f7ff ff29 	bl	8003f38 <bus_fault.constprop.0>
 80040e6:	e005      	b.n	80040f4 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
 80040e8:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	b113      	cbz	r3, 80040f6 <z_arm_fault+0xe2>
			reason = usage_fault(esf);
 80040f0:	f7ff fec6 	bl	8003e80 <usage_fault.constprop.0>
 80040f4:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80040f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80040fa:	b993      	cbnz	r3, 8004122 <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80040fc:	2268      	movs	r2, #104	; 0x68
 80040fe:	4639      	mov	r1, r7
 8004100:	a802      	add	r0, sp, #8
 8004102:	f004 fa1e 	bl	8008542 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8004106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004108:	b39d      	cbz	r5, 8004172 <z_arm_fault+0x15e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800410a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800410e:	b922      	cbnz	r2, 800411a <z_arm_fault+0x106>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8004110:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8004114:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8004118:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 800411a:	a902      	add	r1, sp, #8
 800411c:	4620      	mov	r0, r4
 800411e:	f7ff fd53 	bl	8003bc8 <z_arm_fatal_error>
}
 8004122:	b01d      	add	sp, #116	; 0x74
 8004124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 8004128:	f10d 0207 	add.w	r2, sp, #7
 800412c:	2100      	movs	r1, #0
 800412e:	e7ce      	b.n	80040ce <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
 8004130:	f10d 0107 	add.w	r1, sp, #7
 8004134:	2000      	movs	r0, #0
 8004136:	e7d4      	b.n	80040e2 <z_arm_fault+0xce>
 8004138:	4911      	ldr	r1, [pc, #68]	; (8004180 <z_arm_fault+0x16c>)
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
 800413c:	4816      	ldr	r0, [pc, #88]	; (8004198 <z_arm_fault+0x184>)
 800413e:	1ac9      	subs	r1, r1, r3
 8004140:	08c9      	lsrs	r1, r1, #3
 8004142:	0189      	lsls	r1, r1, #6
 8004144:	f041 0101 	orr.w	r1, r1, #1
 8004148:	e7af      	b.n	80040aa <z_arm_fault+0x96>
 800414a:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <z_arm_fault+0x170>)
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
 800414e:	4813      	ldr	r0, [pc, #76]	; (800419c <z_arm_fault+0x188>)
 8004150:	4913      	ldr	r1, [pc, #76]	; (80041a0 <z_arm_fault+0x18c>)
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	08db      	lsrs	r3, r3, #3
 8004156:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
 800415a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800415e:	bf18      	it	ne
 8004160:	4601      	movne	r1, r0
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	480f      	ldr	r0, [pc, #60]	; (80041a4 <z_arm_fault+0x190>)
 8004168:	f1a4 0210 	sub.w	r2, r4, #16
 800416c:	f002 fdd9 	bl	8006d22 <log_2>
 8004170:	e79d      	b.n	80040ae <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8004172:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	e7cd      	b.n	8004118 <z_arm_fault+0x104>
 800417c:	e000ed00 	.word	0xe000ed00
 8004180:	0800899c 	.word	0x0800899c
 8004184:	08008974 	.word	0x08008974
 8004188:	08009dff 	.word	0x08009dff
 800418c:	08009e2a 	.word	0x08009e2a
 8004190:	08009e41 	.word	0x08009e41
 8004194:	08009e62 	.word	0x08009e62
 8004198:	08009e81 	.word	0x08009e81
 800419c:	08009eba 	.word	0x08009eba
 80041a0:	08009ea5 	.word	0x08009ea5
 80041a4:	08009ed3 	.word	0x08009ed3

080041a8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80041a8:	4a02      	ldr	r2, [pc, #8]	; (80041b4 <z_arm_fault_init+0xc>)
 80041aa:	6953      	ldr	r3, [r2, #20]
 80041ac:	f043 0310 	orr.w	r3, r3, #16
 80041b0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80041b2:	4770      	bx	lr
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 80041b8:	4b04      	ldr	r3, [pc, #16]	; (80041cc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 80041ba:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 80041bc:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
 80041be:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 80041c0:	d003      	beq.n	80041ca <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 80041c2:	4903      	ldr	r1, [pc, #12]	; (80041d0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 80041c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 80041c8:	600a      	str	r2, [r1, #0]

080041ca <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 80041ca:	4770      	bx	lr
	ldr r3, =_kernel
 80041cc:	20001918 	.word	0x20001918
	ldr r1, =_SCS_ICSR
 80041d0:	e000ed04 	.word	0xe000ed04

080041d4 <z_arm_interrupt_init>:
 80041d4:	4804      	ldr	r0, [pc, #16]	; (80041e8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	2110      	movs	r1, #16
 80041da:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80041dc:	3301      	adds	r3, #1
 80041de:	2b61      	cmp	r3, #97	; 0x61
 80041e0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80041e4:	d1f9      	bne.n	80041da <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80041e6:	4770      	bx	lr
 80041e8:	e000e100 	.word	0xe000e100

080041ec <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <z_impl_k_thread_abort+0x1c>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4283      	cmp	r3, r0
 80041f2:	d107      	bne.n	8004204 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041f4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80041f8:	b123      	cbz	r3, 8004204 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80041fa:	4a04      	ldr	r2, [pc, #16]	; (800420c <z_impl_k_thread_abort+0x20>)
 80041fc:	6853      	ldr	r3, [r2, #4]
 80041fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004202:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 8004204:	f001 be4c 	b.w	8005ea0 <z_thread_abort>
 8004208:	20001918 	.word	0x20001918
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8004210:	4b02      	ldr	r3, [pc, #8]	; (800421c <z_arm_configure_static_mpu_regions+0xc>)
 8004212:	4a03      	ldr	r2, [pc, #12]	; (8004220 <z_arm_configure_static_mpu_regions+0x10>)
 8004214:	4803      	ldr	r0, [pc, #12]	; (8004224 <z_arm_configure_static_mpu_regions+0x14>)
 8004216:	2101      	movs	r1, #1
 8004218:	f000 b892 	b.w	8004340 <arm_core_mpu_configure_static_mpu_regions>
 800421c:	20020000 	.word	0x20020000
 8004220:	20000000 	.word	0x20000000
 8004224:	0800964c 	.word	0x0800964c

08004228 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8004228:	b510      	push	{r4, lr}
 800422a:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
 800422c:	f7ff fc42 	bl	8003ab4 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8004230:	6e62      	ldr	r2, [r4, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
 8004234:	1a12      	subs	r2, r2, r0
	dynamic_regions[region_num].size = guard_size;
 8004236:	e9c3 2000 	strd	r2, r0, [r3]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 800423a:	4a05      	ldr	r2, [pc, #20]	; (8004250 <z_arm_configure_dynamic_mpu_regions+0x28>)
 800423c:	609a      	str	r2, [r3, #8]
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
 800423e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8004242:	2101      	movs	r1, #1
 8004244:	4618      	mov	r0, r3
 8004246:	f000 b885 	b.w	8004354 <arm_core_mpu_configure_dynamic_mpu_regions>
 800424a:	bf00      	nop
 800424c:	20001794 	.word	0x20001794
 8004250:	150b0000 	.word	0x150b0000

08004254 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 8004256:	4f2a      	ldr	r7, [pc, #168]	; (8004300 <mpu_configure_regions+0xac>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8004258:	2600      	movs	r6, #0
 800425a:	428e      	cmp	r6, r1
 800425c:	da15      	bge.n	800428a <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
 800425e:	6844      	ldr	r4, [r0, #4]
 8004260:	2c00      	cmp	r4, #0
 8004262:	d049      	beq.n	80042f8 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8004264:	b1cb      	cbz	r3, 800429a <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8004266:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 800426a:	ea14 0f0c 	tst.w	r4, ip
 800426e:	d00e      	beq.n	800428e <mpu_configure_regions+0x3a>
 8004270:	4a24      	ldr	r2, [pc, #144]	; (8004304 <mpu_configure_regions+0xb0>)
 8004272:	4b25      	ldr	r3, [pc, #148]	; (8004308 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 8004274:	4825      	ldr	r0, [pc, #148]	; (800430c <mpu_configure_regions+0xb8>)
 8004276:	1ad2      	subs	r2, r2, r3
 8004278:	08d2      	lsrs	r2, r2, #3
 800427a:	0192      	lsls	r2, r2, #6
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	4631      	mov	r1, r6
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8004282:	f002 fd37 	bl	8006cf4 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8004286:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 800428a:	4610      	mov	r0, r2
 800428c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
 800428e:	2c1f      	cmp	r4, #31
 8004290:	d9ee      	bls.n	8004270 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
 8004292:	6805      	ldr	r5, [r0, #0]
		&&
 8004294:	ea1c 0f05 	tst.w	ip, r5
 8004298:	d1ea      	bne.n	8004270 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 800429a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 800429c:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800429e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
 80042a2:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
 80042a4:	d916      	bls.n	80042d4 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
 80042a6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80042aa:	d815      	bhi.n	80042d8 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80042ac:	3c01      	subs	r4, #1
 80042ae:	fab4 f484 	clz	r4, r4
 80042b2:	f1c4 041f 	rsb	r4, r4, #31
 80042b6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80042b8:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80042ba:	ea4c 0404 	orr.w	r4, ip, r4
 80042be:	d90d      	bls.n	80042dc <mpu_configure_regions+0x88>
 80042c0:	4a10      	ldr	r2, [pc, #64]	; (8004304 <mpu_configure_regions+0xb0>)
 80042c2:	4b11      	ldr	r3, [pc, #68]	; (8004308 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80042c4:	4812      	ldr	r0, [pc, #72]	; (8004310 <mpu_configure_regions+0xbc>)
 80042c6:	1ad2      	subs	r2, r2, r3
 80042c8:	08d2      	lsrs	r2, r2, #3
 80042ca:	0192      	lsls	r2, r2, #6
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	4629      	mov	r1, r5
 80042d2:	e7d6      	b.n	8004282 <mpu_configure_regions+0x2e>
		return REGION_32B;
 80042d4:	2408      	movs	r4, #8
 80042d6:	e7ef      	b.n	80042b8 <mpu_configure_regions+0x64>
		return REGION_4G;
 80042d8:	243e      	movs	r4, #62	; 0x3e
 80042da:	e7ed      	b.n	80042b8 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80042dc:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
 80042e0:	432a      	orrs	r2, r5
 80042e2:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80042e6:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 80042ea:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80042ee:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80042f2:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
 80042f6:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
 80042f8:	3601      	adds	r6, #1
 80042fa:	300c      	adds	r0, #12
 80042fc:	e7ad      	b.n	800425a <mpu_configure_regions+0x6>
 80042fe:	bf00      	nop
 8004300:	e000ed00 	.word	0xe000ed00
 8004304:	08008994 	.word	0x08008994
 8004308:	08008974 	.word	0x08008974
 800430c:	08009eea 	.word	0x08009eea
 8004310:	08009f0d 	.word	0x08009f0d

08004314 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <arm_core_mpu_enable+0x14>)
 8004316:	2205      	movs	r2, #5
 8004318:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 800431c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004320:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800432c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8004330:	4b02      	ldr	r3, [pc, #8]	; (800433c <arm_core_mpu_disable+0x10>)
 8004332:	2200      	movs	r2, #0
 8004334:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8004340:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8004342:	4c03      	ldr	r4, [pc, #12]	; (8004350 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8004344:	2301      	movs	r3, #1
 8004346:	7822      	ldrb	r2, [r4, #0]
 8004348:	f7ff ff84 	bl	8004254 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 800434c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 800434e:	bd10      	pop	{r4, pc}
 8004350:	2000202c 	.word	0x2000202c

08004354 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8004354:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8004356:	4a09      	ldr	r2, [pc, #36]	; (800437c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8004358:	2300      	movs	r3, #0
 800435a:	7812      	ldrb	r2, [r2, #0]
 800435c:	f7ff ff7a 	bl	8004254 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8004360:	f110 0f16 	cmn.w	r0, #22
 8004364:	d003      	beq.n	800436e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 8004368:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800436a:	2807      	cmp	r0, #7
 800436c:	dd00      	ble.n	8004370 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 800436e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8004370:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
 8004374:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004378:	3001      	adds	r0, #1
 800437a:	e7f6      	b.n	800436a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 800437c:	2000202c 	.word	0x2000202c
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8004384:	4914      	ldr	r1, [pc, #80]	; (80043d8 <z_arm_mpu_init+0x54>)
 8004386:	6808      	ldr	r0, [r1, #0]
 8004388:	2808      	cmp	r0, #8
{
 800438a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 800438c:	d821      	bhi.n	80043d2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 800438e:	f7ff ffcd 	bl	800432c <arm_core_mpu_disable>
	MPU->RNR = index;
 8004392:	4c12      	ldr	r4, [pc, #72]	; (80043dc <z_arm_mpu_init+0x58>)
 8004394:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004396:	2200      	movs	r2, #0
 8004398:	4290      	cmp	r0, r2
 800439a:	f101 010c 	add.w	r1, r1, #12
 800439e:	d105      	bne.n	80043ac <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80043a0:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <z_arm_mpu_init+0x5c>)
 80043a2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80043a4:	f7ff ffb6 	bl	8004314 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80043a8:	2000      	movs	r0, #0
}
 80043aa:	bd10      	pop	{r4, pc}
 80043ac:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80043b0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80043b4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80043be:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80043c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80043ce:	3201      	adds	r2, #1
 80043d0:	e7e2      	b.n	8004398 <z_arm_mpu_init+0x14>
		return -1;
 80043d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043d6:	e7e8      	b.n	80043aa <z_arm_mpu_init+0x26>
 80043d8:	08009658 	.word	0x08009658
 80043dc:	e000ed00 	.word	0xe000ed00
 80043e0:	2000202c 	.word	0x2000202c

080043e4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80043e4:	4b01      	ldr	r3, [pc, #4]	; (80043ec <__stdout_hook_install+0x8>)
 80043e6:	6018      	str	r0, [r3, #0]
}
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	20000020 	.word	0x20000020

080043f0 <clock_control_on.constprop.0>:
 *
 * @param dev Device structure whose driver controls the clock.
 * @param sys Opaque data representing the clock.
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
 80043f0:	b513      	push	{r0, r1, r4, lr}
 80043f2:	9001      	str	r0, [sp, #4]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 80043f4:	4c08      	ldr	r4, [pc, #32]	; (8004418 <clock_control_on.constprop.0+0x28>)
 80043f6:	4620      	mov	r0, r4
 80043f8:	f003 fda1 	bl	8007f3e <z_device_ready>
 80043fc:	b138      	cbz	r0, 800440e <clock_control_on.constprop.0+0x1e>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 80043fe:	68a3      	ldr	r3, [r4, #8]
 8004400:	9901      	ldr	r1, [sp, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4620      	mov	r0, r4
}
 8004406:	b002      	add	sp, #8
 8004408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->on(dev, sys);
 800440c:	4718      	bx	r3
}
 800440e:	f06f 0012 	mvn.w	r0, #18
 8004412:	b002      	add	sp, #8
 8004414:	bd10      	pop	{r4, pc}
 8004416:	bf00      	nop
 8004418:	200000ac 	.word	0x200000ac

0800441c <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 800441c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800441e:	460c      	mov	r4, r1
 8004420:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8004422:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 8004426:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8004428:	6902      	ldr	r2, [r0, #16]
{
 800442a:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 800442c:	d123      	bne.n	8004476 <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800442e:	f004 0303 	and.w	r3, r4, #3
 8004432:	3304      	adds	r3, #4
 8004434:	009a      	lsls	r2, r3, #2
 8004436:	230f      	movs	r3, #15
 8004438:	4093      	lsls	r3, r2
 800443a:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800443e:	b2da      	uxtb	r2, r3
 8004440:	4933      	ldr	r1, [pc, #204]	; (8004510 <gpio_stm32_pin_interrupt_configure+0xf4>)
 8004442:	3202      	adds	r2, #2
 8004444:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004448:	0c19      	lsrs	r1, r3, #16
 800444a:	ea02 4313 	and.w	r3, r2, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	fa91 f2a1 	rbit	r2, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004452:	fab2 f282 	clz	r2, r2
 8004456:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	429a      	cmp	r2, r3
 800445c:	d109      	bne.n	8004472 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 800445e:	4620      	mov	r0, r4
 8004460:	f7fe ffe6 	bl	8003430 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8004464:	4620      	mov	r0, r4
 8004466:	f7ff f837 	bl	80034d8 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800446a:	2100      	movs	r1, #0
 800446c:	4620      	mov	r0, r4
 800446e:	f7fe ffed 	bl	800344c <stm32_exti_trigger>
	int err = 0;
 8004472:	2500      	movs	r5, #0
 8004474:	e03e      	b.n	80044f4 <gpio_stm32_pin_interrupt_configure+0xd8>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8004476:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800447a:	d042      	beq.n	8004502 <gpio_stm32_pin_interrupt_configure+0xe6>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800447c:	4925      	ldr	r1, [pc, #148]	; (8004514 <gpio_stm32_pin_interrupt_configure+0xf8>)
 800447e:	4620      	mov	r0, r4
 8004480:	f7ff f818 	bl	80034b4 <stm32_exti_set_callback>
 8004484:	4605      	mov	r5, r0
 8004486:	2800      	cmp	r0, #0
 8004488:	d13e      	bne.n	8004508 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 800448a:	4a23      	ldr	r2, [pc, #140]	; (8004518 <gpio_stm32_pin_interrupt_configure+0xfc>)
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 800448c:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 800448e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004492:	466b      	mov	r3, sp
 8004494:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff ffa9 	bl	80043f0 <clock_control_on.constprop.0>
	if (ret != 0) {
 800449e:	b9c0      	cbnz	r0, 80044d2 <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80044a0:	f004 0103 	and.w	r1, r4, #3
 80044a4:	3104      	adds	r1, #4
 80044a6:	008b      	lsls	r3, r1, #2
 80044a8:	210f      	movs	r1, #15
 80044aa:	4099      	lsls	r1, r3
 80044ac:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80044b0:	b2ca      	uxtb	r2, r1
 80044b2:	0092      	lsls	r2, r2, #2
 80044b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80044b8:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80044bc:	0c0b      	lsrs	r3, r1, #16
 80044be:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c0:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 80044cc:	409f      	lsls	r7, r3
 80044ce:	430f      	orrs	r7, r1
 80044d0:	6097      	str	r7, [r2, #8]

	switch (trig) {
 80044d2:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80044d6:	d010      	beq.n	80044fa <gpio_stm32_pin_interrupt_configure+0xde>
 80044d8:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 80044dc:	d00f      	beq.n	80044fe <gpio_stm32_pin_interrupt_configure+0xe2>
 80044de:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 80044e2:	bf14      	ite	ne
 80044e4:	2100      	movne	r1, #0
 80044e6:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 80044e8:	4620      	mov	r0, r4
 80044ea:	f7fe ffaf 	bl	800344c <stm32_exti_trigger>

	stm32_exti_enable(pin);
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7fe ff90 	bl	8003414 <stm32_exti_enable>

exit:
	return err;
}
 80044f4:	4628      	mov	r0, r5
 80044f6:	b003      	add	sp, #12
 80044f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 80044fa:	2101      	movs	r1, #1
 80044fc:	e7f4      	b.n	80044e8 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 80044fe:	2103      	movs	r1, #3
 8004500:	e7f2      	b.n	80044e8 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 8004502:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8004506:	e7f5      	b.n	80044f4 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 8004508:	f06f 050f 	mvn.w	r5, #15
	return err;
 800450c:	e7f2      	b.n	80044f4 <gpio_stm32_pin_interrupt_configure+0xd8>
 800450e:	bf00      	nop
 8004510:	40013800 	.word	0x40013800
 8004514:	08007473 	.word	0x08007473
 8004518:	08008a90 	.word	0x08008a90

0800451c <gpio_stm32_clock_request>:
{
 800451c:	b570      	push	{r4, r5, r6, lr}
					(clock_control_subsys_t *)&cfg->pclken);
 800451e:	6844      	ldr	r4, [r0, #4]
 8004520:	340c      	adds	r4, #12
	if (on) {
 8004522:	b121      	cbz	r1, 800452e <gpio_stm32_clock_request+0x12>
		ret = clock_control_on(clk,
 8004524:	4620      	mov	r0, r4
}
 8004526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = clock_control_on(clk,
 800452a:	f7ff bf61 	b.w	80043f0 <clock_control_on.constprop.0>
 800452e:	4d07      	ldr	r5, [pc, #28]	; (800454c <gpio_stm32_clock_request+0x30>)
 8004530:	4628      	mov	r0, r5
 8004532:	f003 fd04 	bl	8007f3e <z_device_ready>
 8004536:	b130      	cbz	r0, 8004546 <gpio_stm32_clock_request+0x2a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8004538:	68ab      	ldr	r3, [r5, #8]
 800453a:	4621      	mov	r1, r4
 800453c:	4628      	mov	r0, r5
 800453e:	685b      	ldr	r3, [r3, #4]
}
 8004540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004544:	4718      	bx	r3
 8004546:	f06f 0012 	mvn.w	r0, #18
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	200000ac 	.word	0x200000ac

08004550 <stm32_i2c_configure_timing>:
{
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
	struct i2c_stm32_data *data = DEV_DATA(dev);
	I2C_TypeDef *i2c = cfg->i2c;

	switch (I2C_SPEED_GET(data->dev_config)) {
 8004550:	6902      	ldr	r2, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8004552:	6843      	ldr	r3, [r0, #4]
	switch (I2C_SPEED_GET(data->dev_config)) {
 8004554:	6a12      	ldr	r2, [r2, #32]
	I2C_TypeDef *i2c = cfg->i2c;
 8004556:	68db      	ldr	r3, [r3, #12]
	switch (I2C_SPEED_GET(data->dev_config)) {
 8004558:	f3c2 0242 	ubfx	r2, r2, #1, #3
 800455c:	2a01      	cmp	r2, #1
{
 800455e:	b510      	push	{r4, lr}
	switch (I2C_SPEED_GET(data->dev_config)) {
 8004560:	d004      	beq.n	800456c <stm32_i2c_configure_timing+0x1c>
 8004562:	2a02      	cmp	r2, #2
 8004564:	d021      	beq.n	80045aa <stm32_i2c_configure_timing+0x5a>
 8004566:	f06f 0015 	mvn.w	r0, #21
	default:
		return -EINVAL;
	}

	return 0;
}
 800456a:	bd10      	pop	{r4, pc}

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800456c:	6858      	ldr	r0, [r3, #4]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800456e:	4a23      	ldr	r2, [pc, #140]	; (80045fc <stm32_i2c_configure_timing+0xac>)
 8004570:	fbb1 f2f2 	udiv	r2, r1, r2
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8004574:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8004578:	4310      	orrs	r0, r2
 800457a:	6058      	str	r0, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800457c:	6a18      	ldr	r0, [r3, #32]
 800457e:	3201      	adds	r2, #1
 8004580:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8004584:	4302      	orrs	r2, r0
 8004586:	621a      	str	r2, [r3, #32]
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004588:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <stm32_i2c_configure_timing+0xb0>)
 800458a:	fbb1 f1f2 	udiv	r1, r1, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800458e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004592:	4211      	tst	r1, r2
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8004594:	69da      	ldr	r2, [r3, #28]
 8004596:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800459a:	bf08      	it	eq
 800459c:	2104      	moveq	r1, #4
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800459e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045a2:	430a      	orrs	r2, r1
 80045a4:	61da      	str	r2, [r3, #28]
	return 0;
 80045a6:	2000      	movs	r0, #0
}
 80045a8:	e7df      	b.n	800456a <stm32_i2c_configure_timing+0x1a>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80045aa:	6858      	ldr	r0, [r3, #4]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80045ac:	4a13      	ldr	r2, [pc, #76]	; (80045fc <stm32_i2c_configure_timing+0xac>)
 80045ae:	fbb1 f2f2 	udiv	r2, r1, r2
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80045b2:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80045b6:	4310      	orrs	r0, r2
 80045b8:	6058      	str	r0, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80045ba:	6a18      	ldr	r0, [r3, #32]
 80045bc:	f44f 7496 	mov.w	r4, #300	; 0x12c
 80045c0:	4362      	muls	r2, r4
 80045c2:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80045c6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80045ca:	fbb2 f2f4 	udiv	r2, r2, r4
 80045ce:	3201      	adds	r2, #1
 80045d0:	4302      	orrs	r2, r0
 80045d2:	621a      	str	r2, [r3, #32]
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80045d4:	4a0b      	ldr	r2, [pc, #44]	; (8004604 <stm32_i2c_configure_timing+0xb4>)
 80045d6:	4291      	cmp	r1, r2
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80045d8:	bf84      	itt	hi
 80045da:	3201      	addhi	r2, #1
 80045dc:	fbb1 f1f2 	udivhi	r1, r1, r2
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80045e0:	69da      	ldr	r2, [r3, #28]
 80045e2:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80045e6:	bf8c      	ite	hi
 80045e8:	f441 4100 	orrhi.w	r1, r1, #32768	; 0x8000
 80045ec:	f248 0101 	movwls	r1, #32769	; 0x8001
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80045f0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045f4:	4311      	orrs	r1, r2
 80045f6:	61d9      	str	r1, [r3, #28]
 80045f8:	e7d5      	b.n	80045a6 <stm32_i2c_configure_timing+0x56>
 80045fa:	bf00      	nop
 80045fc:	000f4240 	.word	0x000f4240
 8004600:	00030d40 	.word	0x00030d40
 8004604:	00124f7f 	.word	0x00124f7f

08004608 <i2c_stm32_runtime_configure>:
LOG_MODULE_REGISTER(i2c_ll_stm32);

#include "i2c-priv.h"

int i2c_stm32_runtime_configure(const struct device *dev, uint32_t config)
{
 8004608:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800460c:	460f      	mov	r7, r1
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 800460e:	6841      	ldr	r1, [r0, #4]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8004610:	f8d0 8010 	ldr.w	r8, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8004614:	68ce      	ldr	r6, [r1, #12]
	uint32_t clock = 0U;
 8004616:	2200      	movs	r2, #0
	 */
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
	clock = rcc_clocks.SYSCLK_Frequency;
#else
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			(clock_control_subsys_t *) &cfg->pclken, &clock) < 0) {
 8004618:	3104      	adds	r1, #4
{
 800461a:	4605      	mov	r5, r0
	uint32_t clock = 0U;
 800461c:	9203      	str	r2, [sp, #12]
			(clock_control_subsys_t *) &cfg->pclken, &clock) < 0) {
 800461e:	9101      	str	r1, [sp, #4]
 8004620:	4c1d      	ldr	r4, [pc, #116]	; (8004698 <i2c_stm32_runtime_configure+0x90>)
 8004622:	4620      	mov	r0, r4
 8004624:	f003 fc8b 	bl	8007f3e <z_device_ready>
 8004628:	9901      	ldr	r1, [sp, #4]
 800462a:	b978      	cbnz	r0, 800464c <i2c_stm32_runtime_configure+0x44>
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <i2c_stm32_runtime_configure+0x94>)
 800462e:	491c      	ldr	r1, [pc, #112]	; (80046a0 <i2c_stm32_runtime_configure+0x98>)
		LOG_ERR("Failed call clock_control_get_rate");
 8004630:	481c      	ldr	r0, [pc, #112]	; (80046a4 <i2c_stm32_runtime_configure+0x9c>)
 8004632:	1ac9      	subs	r1, r1, r3
 8004634:	08c9      	lsrs	r1, r1, #3
 8004636:	0189      	lsls	r1, r1, #6
 8004638:	f041 0101 	orr.w	r1, r1, #1
 800463c:	f002 fb4b 	bl	8006cd6 <log_0>
		return -EIO;
 8004640:	f06f 0504 	mvn.w	r5, #4
	LL_I2C_SetMode(i2c, LL_I2C_MODE_I2C);
	ret = stm32_i2c_configure_timing(dev, clock);
	k_sem_give(&data->bus_mutex);

	return ret;
}
 8004644:	4628      	mov	r0, r5
 8004646:	b004      	add	sp, #16
 8004648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800464c:	68a3      	ldr	r3, [r4, #8]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0eb      	beq.n	800462c <i2c_stm32_runtime_configure+0x24>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8004654:	aa03      	add	r2, sp, #12
 8004656:	4620      	mov	r0, r4
 8004658:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800465a:	2800      	cmp	r0, #0
 800465c:	dbe6      	blt.n	800462c <i2c_stm32_runtime_configure+0x24>
	data->dev_config = config;
 800465e:	f8c8 7020 	str.w	r7, [r8, #32]
	k_sem_take(&data->bus_mutex, K_FOREVER);
 8004662:	f108 0810 	add.w	r8, r8, #16
	return z_impl_k_sem_take(sem, timeout);
 8004666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800466a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800466e:	4640      	mov	r0, r8
 8004670:	f001 f92c 	bl	80058cc <z_impl_k_sem_take>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004674:	6833      	ldr	r3, [r6, #0]
	ret = stm32_i2c_configure_timing(dev, clock);
 8004676:	9903      	ldr	r1, [sp, #12]
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	6033      	str	r3, [r6, #0]
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800467e:	6833      	ldr	r3, [r6, #0]
 8004680:	f023 031a 	bic.w	r3, r3, #26
 8004684:	6033      	str	r3, [r6, #0]
 8004686:	4628      	mov	r0, r5
 8004688:	f7ff ff62 	bl	8004550 <stm32_i2c_configure_timing>
 800468c:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 800468e:	4640      	mov	r0, r8
 8004690:	f001 f8fc 	bl	800588c <z_impl_k_sem_give>
}
 8004694:	e7d6      	b.n	8004644 <i2c_stm32_runtime_configure+0x3c>
 8004696:	bf00      	nop
 8004698:	200000ac 	.word	0x200000ac
 800469c:	08008974 	.word	0x08008974
 80046a0:	0800897c 	.word	0x0800897c
 80046a4:	08009f7a 	.word	0x08009f7a

080046a8 <i2c_stm32_init>:
	.slave_unregister = i2c_stm32_slave_unregister,
#endif
};

static int i2c_stm32_init(const struct device *dev)
{
 80046a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct device *clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 80046aa:	6846      	ldr	r6, [r0, #4]
	uint32_t bitrate_cfg;
	int ret;
	struct i2c_stm32_data *data = DEV_DATA(dev);
 80046ac:	6907      	ldr	r7, [r0, #16]
{
 80046ae:	4605      	mov	r5, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046b4:	2100      	movs	r1, #0
 80046b6:	4638      	mov	r0, r7
 80046b8:	f003 fd28 	bl	800810c <z_impl_k_sem_init>
#ifdef CONFIG_I2C_STM32_INTERRUPT
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	cfg->irq_config_func(dev);
 80046bc:	6833      	ldr	r3, [r6, #0]
 80046be:	4628      	mov	r0, r5
 80046c0:	4798      	blx	r3
#endif

	/* Configure dt provided device signals when available */
	ret = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 80046c2:	e9d6 0105 	ldrd	r0, r1, [r6, #20]
 80046c6:	68f2      	ldr	r2, [r6, #12]
 80046c8:	f7fe fff2 	bl	80036b0 <stm32_dt_pinctrl_configure>
					 cfg->pinctrl_list_size,
					 (uint32_t)cfg->i2c);
	if (ret < 0) {
 80046cc:	1e04      	subs	r4, r0, #0
 80046ce:	da0d      	bge.n	80046ec <i2c_stm32_init+0x44>
 80046d0:	4a35      	ldr	r2, [pc, #212]	; (80047a8 <i2c_stm32_init+0x100>)
 80046d2:	4b36      	ldr	r3, [pc, #216]	; (80047ac <i2c_stm32_init+0x104>)
		LOG_ERR("I2C pinctrl setup failed (%d)", ret);
 80046d4:	4836      	ldr	r0, [pc, #216]	; (80047b0 <i2c_stm32_init+0x108>)
 80046d6:	1ad2      	subs	r2, r2, r3
 80046d8:	08d2      	lsrs	r2, r2, #3
 80046da:	0192      	lsls	r2, r2, #6
 80046dc:	f042 0201 	orr.w	r2, r2, #1
 80046e0:	4621      	mov	r1, r4
 80046e2:	f002 fb07 	bl	8006cf4 <log_1>
		LOG_ERR("i2c: failure initializing");
		return ret;
	}

	return 0;
}
 80046e6:	4620      	mov	r0, r4
 80046e8:	b003      	add	sp, #12
 80046ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ec:	2201      	movs	r2, #1
 80046ee:	4611      	mov	r1, r2
 80046f0:	f107 0010 	add.w	r0, r7, #16
 80046f4:	f003 fd0a 	bl	800810c <z_impl_k_sem_init>
		(clock_control_subsys_t *) &cfg->pclken) != 0) {
 80046f8:	1d31      	adds	r1, r6, #4
 80046fa:	9101      	str	r1, [sp, #4]
 80046fc:	4c2d      	ldr	r4, [pc, #180]	; (80047b4 <i2c_stm32_init+0x10c>)
 80046fe:	4620      	mov	r0, r4
 8004700:	f003 fc1d 	bl	8007f3e <z_device_ready>
 8004704:	9901      	ldr	r1, [sp, #4]
 8004706:	b960      	cbnz	r0, 8004722 <i2c_stm32_init+0x7a>
 8004708:	4b28      	ldr	r3, [pc, #160]	; (80047ac <i2c_stm32_init+0x104>)
 800470a:	4927      	ldr	r1, [pc, #156]	; (80047a8 <i2c_stm32_init+0x100>)
		LOG_ERR("i2c: failure enabling clock");
 800470c:	482a      	ldr	r0, [pc, #168]	; (80047b8 <i2c_stm32_init+0x110>)
 800470e:	1ac9      	subs	r1, r1, r3
 8004710:	08c9      	lsrs	r1, r1, #3
 8004712:	0189      	lsls	r1, r1, #6
 8004714:	f041 0101 	orr.w	r1, r1, #1
 8004718:	f002 fadd 	bl	8006cd6 <log_0>
		return -EIO;
 800471c:	f06f 0404 	mvn.w	r4, #4
 8004720:	e7e1      	b.n	80046e6 <i2c_stm32_init+0x3e>
	return api->on(dev, sys);
 8004722:	68a3      	ldr	r3, [r4, #8]
 8004724:	4620      	mov	r0, r4
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4798      	blx	r3
	if (clock_control_on(clock,
 800472a:	4604      	mov	r4, r0
 800472c:	2800      	cmp	r0, #0
 800472e:	d1eb      	bne.n	8004708 <i2c_stm32_init+0x60>
	bitrate_cfg = i2c_map_dt_bitrate(cfg->bitrate);
 8004730:	6933      	ldr	r3, [r6, #16]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
 8004732:	4a22      	ldr	r2, [pc, #136]	; (80047bc <i2c_stm32_init+0x114>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d02f      	beq.n	8004798 <i2c_stm32_init+0xf0>
 8004738:	d823      	bhi.n	8004782 <i2c_stm32_init+0xda>
 800473a:	4a21      	ldr	r2, [pc, #132]	; (80047c0 <i2c_stm32_init+0x118>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d02d      	beq.n	800479c <i2c_stm32_init+0xf4>
 8004740:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <i2c_stm32_init+0x11c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d02c      	beq.n	80047a0 <i2c_stm32_init+0xf8>
 8004746:	4b19      	ldr	r3, [pc, #100]	; (80047ac <i2c_stm32_init+0x104>)
 8004748:	4917      	ldr	r1, [pc, #92]	; (80047a8 <i2c_stm32_init+0x100>)
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");
 800474a:	481f      	ldr	r0, [pc, #124]	; (80047c8 <i2c_stm32_init+0x120>)
 800474c:	1ac9      	subs	r1, r1, r3
 800474e:	08c9      	lsrs	r1, r1, #3
 8004750:	0189      	lsls	r1, r1, #6
 8004752:	f041 0101 	orr.w	r1, r1, #1
 8004756:	f002 fabe 	bl	8006cd6 <log_0>

	return 0;
 800475a:	2100      	movs	r1, #0
	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_MASTER | bitrate_cfg);
 800475c:	4628      	mov	r0, r5
 800475e:	f041 0110 	orr.w	r1, r1, #16
 8004762:	f7ff ff51 	bl	8004608 <i2c_stm32_runtime_configure>
	if (ret < 0) {
 8004766:	1e05      	subs	r5, r0, #0
 8004768:	dabd      	bge.n	80046e6 <i2c_stm32_init+0x3e>
 800476a:	4b10      	ldr	r3, [pc, #64]	; (80047ac <i2c_stm32_init+0x104>)
 800476c:	490e      	ldr	r1, [pc, #56]	; (80047a8 <i2c_stm32_init+0x100>)
		LOG_ERR("i2c: failure initializing");
 800476e:	4817      	ldr	r0, [pc, #92]	; (80047cc <i2c_stm32_init+0x124>)
 8004770:	1ac9      	subs	r1, r1, r3
 8004772:	08c9      	lsrs	r1, r1, #3
 8004774:	0189      	lsls	r1, r1, #6
 8004776:	f041 0101 	orr.w	r1, r1, #1
 800477a:	f002 faac 	bl	8006cd6 <log_0>
		return ret;
 800477e:	462c      	mov	r4, r5
 8004780:	e7b1      	b.n	80046e6 <i2c_stm32_init+0x3e>
	switch (bitrate) {
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <i2c_stm32_init+0x128>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00d      	beq.n	80047a4 <i2c_stm32_init+0xfc>
 8004788:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 800478c:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 8004790:	4293      	cmp	r3, r2
 8004792:	d1d8      	bne.n	8004746 <i2c_stm32_init+0x9e>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 8004794:	210a      	movs	r1, #10
 8004796:	e7e1      	b.n	800475c <i2c_stm32_init+0xb4>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 8004798:	2106      	movs	r1, #6
 800479a:	e7df      	b.n	800475c <i2c_stm32_init+0xb4>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 800479c:	2102      	movs	r1, #2
 800479e:	e7dd      	b.n	800475c <i2c_stm32_init+0xb4>
	switch (bitrate) {
 80047a0:	2104      	movs	r1, #4
 80047a2:	e7db      	b.n	800475c <i2c_stm32_init+0xb4>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 80047a4:	2108      	movs	r1, #8
 80047a6:	e7d9      	b.n	800475c <i2c_stm32_init+0xb4>
 80047a8:	0800897c 	.word	0x0800897c
 80047ac:	08008974 	.word	0x08008974
 80047b0:	08009f9d 	.word	0x08009f9d
 80047b4:	200000ac 	.word	0x200000ac
 80047b8:	08009fbb 	.word	0x08009fbb
 80047bc:	000f4240 	.word	0x000f4240
 80047c0:	000186a0 	.word	0x000186a0
 80047c4:	00061a80 	.word	0x00061a80
 80047c8:	08009fd7 	.word	0x08009fd7
 80047cc:	08009ff2 	.word	0x08009ff2
 80047d0:	0033e140 	.word	0x0033e140

080047d4 <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 80047d4:	b570      	push	{r4, r5, r6, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 80047d6:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 80047d8:	6844      	ldr	r4, [r0, #4]
 80047da:	4d19      	ldr	r5, [pc, #100]	; (8004840 <spi_stm32_init+0x6c>)
 80047dc:	4628      	mov	r0, r5
 80047de:	f003 fbae 	bl	8007f3e <z_device_ready>
 80047e2:	b968      	cbnz	r0, 8004800 <spi_stm32_init+0x2c>
 80047e4:	4b17      	ldr	r3, [pc, #92]	; (8004844 <spi_stm32_init+0x70>)
 80047e6:	4918      	ldr	r1, [pc, #96]	; (8004848 <spi_stm32_init+0x74>)
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken) != 0) {
		LOG_ERR("Could not enable SPI clock");
 80047e8:	4818      	ldr	r0, [pc, #96]	; (800484c <spi_stm32_init+0x78>)
 80047ea:	1ac9      	subs	r1, r1, r3
 80047ec:	08c9      	lsrs	r1, r1, #3
 80047ee:	0189      	lsls	r1, r1, #6
 80047f0:	f041 0101 	orr.w	r1, r1, #1
 80047f4:	f002 fa6f 	bl	8006cd6 <log_0>
		return -EIO;
 80047f8:	f06f 0404 	mvn.w	r4, #4
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 80047fc:	4620      	mov	r0, r4
 80047fe:	bd70      	pop	{r4, r5, r6, pc}
 8004800:	68ab      	ldr	r3, [r5, #8]
 8004802:	4628      	mov	r0, r5
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4621      	mov	r1, r4
 8004808:	4798      	blx	r3
	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800480a:	4605      	mov	r5, r0
 800480c:	2800      	cmp	r0, #0
 800480e:	d1e9      	bne.n	80047e4 <spi_stm32_init+0x10>
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 8004810:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8004814:	68a2      	ldr	r2, [r4, #8]
 8004816:	f7fe ff4b 	bl	80036b0 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 800481a:	1e04      	subs	r4, r0, #0
 800481c:	da0b      	bge.n	8004836 <spi_stm32_init+0x62>
 800481e:	4b09      	ldr	r3, [pc, #36]	; (8004844 <spi_stm32_init+0x70>)
 8004820:	4a09      	ldr	r2, [pc, #36]	; (8004848 <spi_stm32_init+0x74>)
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8004822:	480b      	ldr	r0, [pc, #44]	; (8004850 <spi_stm32_init+0x7c>)
 8004824:	1ad2      	subs	r2, r2, r3
 8004826:	08d2      	lsrs	r2, r2, #3
 8004828:	0192      	lsls	r2, r2, #6
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	4621      	mov	r1, r4
 8004830:	f002 fa60 	bl	8006cf4 <log_1>
		return err;
 8004834:	e7e2      	b.n	80047fc <spi_stm32_init+0x28>
	spi_context_unlock_unconditionally(&data->ctx);
 8004836:	4630      	mov	r0, r6
 8004838:	f003 fa4e 	bl	8007cd8 <spi_context_unlock_unconditionally>
	return 0;
 800483c:	462c      	mov	r4, r5
 800483e:	e7dd      	b.n	80047fc <spi_stm32_init+0x28>
 8004840:	200000ac 	.word	0x200000ac
 8004844:	08008974 	.word	0x08008974
 8004848:	080089a4 	.word	0x080089a4
 800484c:	0800a025 	.word	0x0800a025
 8004850:	0800a040 	.word	0x0800a040

08004854 <spi_stm32_transceive>:
{
 8004854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004858:	461f      	mov	r7, r3
	SPI_TypeDef *spi = cfg->spi;
 800485a:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 800485c:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800485e:	689e      	ldr	r6, [r3, #8]
{
 8004860:	b08f      	sub	sp, #60	; 0x3c
 8004862:	4605      	mov	r5, r0
 8004864:	4688      	mov	r8, r1
	if (!tx_bufs && !rx_bufs) {
 8004866:	4691      	mov	r9, r2
 8004868:	b90a      	cbnz	r2, 800486e <spi_stm32_transceive+0x1a>
 800486a:	2f00      	cmp	r7, #0
 800486c:	d03d      	beq.n	80048ea <spi_stm32_transceive+0x96>
static inline void spi_context_lock(struct spi_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal,
				    const struct spi_config *spi_cfg)
{
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800486e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8004872:	045b      	lsls	r3, r3, #17
 8004874:	d43d      	bmi.n	80048f2 <spi_stm32_transceive+0x9e>
	return z_impl_k_sem_take(sem, timeout);
 8004876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800487a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800487e:	f104 0008 	add.w	r0, r4, #8
 8004882:	f001 f823 	bl	80058cc <z_impl_k_sem_take>
		(ctx->owner == spi_cfg)) {
			return;
	}

	k_sem_take(&ctx->lock, K_FOREVER);
	ctx->owner = spi_cfg;
 8004886:	f8c4 8004 	str.w	r8, [r4, #4]
	const uint32_t scaler[] = {
 800488a:	f8df c2e8 	ldr.w	ip, [pc, #744]	; 8004b74 <spi_stm32_transceive+0x320>
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 800488e:	686b      	ldr	r3, [r5, #4]
 8004890:	9303      	str	r3, [sp, #12]
	const uint32_t scaler[] = {
 8004892:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	struct spi_stm32_data *data = DEV_DATA(dev);
 8004896:	f8d5 b010 	ldr.w	fp, [r5, #16]
	const uint32_t scaler[] = {
 800489a:	ad06      	add	r5, sp, #24
 800489c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800489e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80048a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 80048a6:	f8db 3000 	ldr.w	r3, [fp]
 80048aa:	4598      	cmp	r8, r3
 80048ac:	f000 80c2 	beq.w	8004a34 <spi_stm32_transceive+0x1e0>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 80048b0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80048b4:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d002      	beq.n	80048c2 <spi_stm32_transceive+0x6e>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 80048bc:	2b10      	cmp	r3, #16
 80048be:	f040 8168 	bne.w	8004b92 <spi_stm32_transceive+0x33e>
	SPI_TypeDef *spi = cfg->spi;
 80048c2:	9b03      	ldr	r3, [sp, #12]
 80048c4:	689d      	ldr	r5, [r3, #8]
 80048c6:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8004b78 <spi_stm32_transceive+0x324>
 80048ca:	4650      	mov	r0, sl
 80048cc:	f003 fb37 	bl	8007f3e <z_device_ready>
 80048d0:	b9b0      	cbnz	r0, 8004900 <spi_stm32_transceive+0xac>
 80048d2:	4ba2      	ldr	r3, [pc, #648]	; (8004b5c <spi_stm32_transceive+0x308>)
 80048d4:	49a2      	ldr	r1, [pc, #648]	; (8004b60 <spi_stm32_transceive+0x30c>)
		LOG_ERR("Failed call clock_control_get_rate");
 80048d6:	48a3      	ldr	r0, [pc, #652]	; (8004b64 <spi_stm32_transceive+0x310>)
 80048d8:	1ac9      	subs	r1, r1, r3
 80048da:	08c9      	lsrs	r1, r1, #3
 80048dc:	0189      	lsls	r1, r1, #6
 80048de:	f041 0101 	orr.w	r1, r1, #1
 80048e2:	f002 f9f8 	bl	8006cd6 <log_0>
		return -EIO;
 80048e6:	f06f 0704 	mvn.w	r7, #4
}
 80048ea:	4638      	mov	r0, r7
 80048ec:	b00f      	add	sp, #60	; 0x3c
 80048ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 80048f2:	6923      	ldr	r3, [r4, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1be      	bne.n	8004876 <spi_stm32_transceive+0x22>
		(k_sem_count_get(&ctx->lock) == 0) &&
 80048f8:	6863      	ldr	r3, [r4, #4]
 80048fa:	4598      	cmp	r8, r3
 80048fc:	d1bb      	bne.n	8004876 <spi_stm32_transceive+0x22>
 80048fe:	e7c4      	b.n	800488a <spi_stm32_transceive+0x36>
	if (api->get_rate == NULL) {
 8004900:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0e3      	beq.n	80048d2 <spi_stm32_transceive+0x7e>
	return api->get_rate(dev, sys, rate);
 800490a:	9903      	ldr	r1, [sp, #12]
 800490c:	aa05      	add	r2, sp, #20
 800490e:	4650      	mov	r0, sl
 8004910:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8004912:	2800      	cmp	r0, #0
 8004914:	dbdd      	blt.n	80048d2 <spi_stm32_transceive+0x7e>
		uint32_t clk = clock >> br;
 8004916:	9a05      	ldr	r2, [sp, #20]
		if (clk <= config->frequency) {
 8004918:	f8d8 1000 	ldr.w	r1, [r8]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800491c:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 800491e:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 8004922:	4288      	cmp	r0, r1
 8004924:	f240 820d 	bls.w	8004d42 <spi_stm32_transceive+0x4ee>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004928:	3301      	adds	r3, #1
 800492a:	2b09      	cmp	r3, #9
 800492c:	d1f7      	bne.n	800491e <spi_stm32_transceive+0xca>
 800492e:	488b      	ldr	r0, [pc, #556]	; (8004b5c <spi_stm32_transceive+0x308>)
 8004930:	4b8b      	ldr	r3, [pc, #556]	; (8004b60 <spi_stm32_transceive+0x30c>)
 8004932:	1a1b      	subs	r3, r3, r0
 8004934:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8004936:	019b      	lsls	r3, r3, #6
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	f8ad 3000 	strh.w	r3, [sp]
 8004940:	4889      	ldr	r0, [pc, #548]	; (8004b68 <spi_stm32_transceive+0x314>)
 8004942:	0a13      	lsrs	r3, r2, #8
 8004944:	0852      	lsrs	r2, r2, #1
 8004946:	f002 fa05 	bl	8006d54 <log_3>
		return -EINVAL;
 800494a:	f06f 0715 	mvn.w	r7, #21
 800494e:	e7cc      	b.n	80048ea <spi_stm32_transceive+0x96>
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8004950:	682a      	ldr	r2, [r5, #0]
 8004952:	f042 0202 	orr.w	r2, r2, #2
 8004956:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8004958:	682a      	ldr	r2, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 800495a:	0758      	lsls	r0, r3, #29
 800495c:	bf4c      	ite	mi
 800495e:	f042 0201 	orrmi.w	r2, r2, #1
 8004962:	f022 0201 	bicpl.w	r2, r2, #1
 8004966:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8004968:	682a      	ldr	r2, [r5, #0]
 800496a:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 800496e:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8004970:	682a      	ldr	r2, [r5, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8004972:	06d9      	lsls	r1, r3, #27
 8004974:	bf4c      	ite	mi
 8004976:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 800497a:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 800497e:	602a      	str	r2, [r5, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8004980:	682a      	ldr	r2, [r5, #0]
 8004982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004986:	602a      	str	r2, [r5, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8004988:	f8d8 2008 	ldr.w	r2, [r8, #8]
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800498c:	6829      	ldr	r1, [r5, #0]
 800498e:	f003 0001 	and.w	r0, r3, #1
 8004992:	b15a      	cbz	r2, 80049ac <spi_stm32_transceive+0x158>
 8004994:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004998:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800499a:	6869      	ldr	r1, [r5, #4]
 800499c:	f021 0104 	bic.w	r1, r1, #4
 80049a0:	6069      	str	r1, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 80049a2:	b968      	cbnz	r0, 80049c0 <spi_stm32_transceive+0x16c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 80049a4:	6829      	ldr	r1, [r5, #0]
 80049a6:	f441 7182 	orr.w	r1, r1, #260	; 0x104
 80049aa:	e00c      	b.n	80049c6 <spi_stm32_transceive+0x172>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80049ac:	f421 7100 	bic.w	r1, r1, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 80049b0:	2800      	cmp	r0, #0
 80049b2:	f000 80cb 	beq.w	8004b4c <spi_stm32_transceive+0x2f8>
 80049b6:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80049b8:	6869      	ldr	r1, [r5, #4]
 80049ba:	f021 0104 	bic.w	r1, r1, #4
 80049be:	6069      	str	r1, [r5, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 80049c0:	6829      	ldr	r1, [r5, #0]
 80049c2:	f421 7182 	bic.w	r1, r1, #260	; 0x104
 80049c6:	6029      	str	r1, [r5, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 80049c8:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80049cc:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 80049ce:	682b      	ldr	r3, [r5, #0]
 80049d0:	bf0c      	ite	eq
 80049d2:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 80049d6:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 80049da:	602b      	str	r3, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80049dc:	686b      	ldr	r3, [r5, #4]
 80049de:	f023 0310 	bic.w	r3, r3, #16
 80049e2:	606b      	str	r3, [r5, #4]
	data->ctx.config = config;
 80049e4:	f8cb 8000 	str.w	r8, [fp]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 80049e8:	2a00      	cmp	r2, #0
 80049ea:	f000 80c7 	beq.w	8004b7c <spi_stm32_transceive+0x328>
 80049ee:	6810      	ldr	r0, [r2, #0]
 80049f0:	2800      	cmp	r0, #0
 80049f2:	f000 80c3 	beq.w	8004b7c <spi_stm32_transceive+0x328>
		/* Validate CS active levels are equivalent */
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 80049f6:	7a11      	ldrb	r1, [r2, #8]
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 80049f8:	7a53      	ldrb	r3, [r2, #9]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 80049fa:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
 80049fe:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004a02:	f8de 5000 	ldr.w	r5, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8004a06:	07da      	lsls	r2, r3, #31
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8004a08:	bf54      	ite	pl
 8004a0a:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8004a0e:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004a12:	f04f 0c01 	mov.w	ip, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8004a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004a1a:	fa0c fc01 	lsl.w	ip, ip, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8004a1e:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004a20:	bf4c      	ite	mi
 8004a22:	ea45 050c 	orrmi.w	r5, r5, ip
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8004a26:	ea25 050c 	bicpl.w	r5, r5, ip
	}

	return api->pin_configure(port, pin, flags);
 8004a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a2e:	f8ce 5000 	str.w	r5, [lr]
 8004a32:	4798      	blx	r3
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	if (tx_bufs) {
 8004a34:	f1b9 0f00 	cmp.w	r9, #0
 8004a38:	f000 80ae 	beq.w	8004b98 <spi_stm32_transceive+0x344>
		ctx->current_tx = tx_bufs->buffers;
 8004a3c:	f8d9 3000 	ldr.w	r3, [r9]
		ctx->tx_count = tx_bufs->count;
 8004a40:	f8d9 2004 	ldr.w	r2, [r9, #4]
		ctx->current_tx = tx_bufs->buffers;
 8004a44:	62e3      	str	r3, [r4, #44]	; 0x2c
		ctx->tx_count = tx_bufs->count;
 8004a46:	6322      	str	r2, [r4, #48]	; 0x30
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8004a48:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
 8004a4a:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8004a4c:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_len = ctx->current_tx->len / dfs;
 8004a4e:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count = 0;
		ctx->tx_buf = NULL;
		ctx->tx_len = 0;
	}

	if (rx_bufs) {
 8004a50:	2f00      	cmp	r7, #0
 8004a52:	f000 80a6 	beq.w	8004ba2 <spi_stm32_transceive+0x34e>
		ctx->current_rx = rx_bufs->buffers;
 8004a56:	683b      	ldr	r3, [r7, #0]
		ctx->rx_count = rx_bufs->count;
 8004a58:	687a      	ldr	r2, [r7, #4]
		ctx->current_rx = rx_bufs->buffers;
 8004a5a:	6363      	str	r3, [r4, #52]	; 0x34
		ctx->rx_count = rx_bufs->count;
 8004a5c:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8004a5e:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
 8004a60:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8004a62:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_len = ctx->current_rx->len / dfs;
 8004a64:	64a3      	str	r3, [r4, #72]	; 0x48
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004a66:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = 0;
		ctx->rx_buf = NULL;
		ctx->rx_len = 0;
	}

	ctx->sync_status = 0;
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a6e:	62a2      	str	r2, [r4, #40]	; 0x28
	_spi_context_cs_control(ctx, on, false);
 8004a70:	2101      	movs	r1, #1
 8004a72:	6033      	str	r3, [r6, #0]
 8004a74:	4620      	mov	r0, r4
 8004a76:	f003 f90a 	bl	8007c8e <_spi_context_cs_control>
	uint16_t operation = data->ctx.config->operation;
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8004a7e:	f013 0101 	ands.w	r1, r3, #1
 8004a82:	f040 80cf 	bne.w	8004c24 <spi_stm32_transceive+0x3d0>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004a86:	68b2      	ldr	r2, [r6, #8]
 8004a88:	0790      	lsls	r0, r2, #30
 8004a8a:	d5fc      	bpl.n	8004a86 <spi_stm32_transceive+0x232>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004a8c:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004a90:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8004a92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004a94:	f040 8090 	bne.w	8004bb8 <spi_stm32_transceive+0x364>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 8004a98:	b112      	cbz	r2, 8004aa0 <spi_stm32_transceive+0x24c>
 8004a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a9c:	b103      	cbz	r3, 8004aa0 <spi_stm32_transceive+0x24c>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8004a9e:	7811      	ldrb	r1, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8004aa0:	b2c9      	uxtb	r1, r1
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8004aa2:	7331      	strb	r1, [r6, #12]
	if (!ctx->tx_len) {
 8004aa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aa6:	b183      	cbz	r3, 8004aca <spi_stm32_transceive+0x276>
	ctx->tx_len -= len;
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d17d      	bne.n	8004bac <spi_stm32_transceive+0x358>
		ctx->tx_count--;
 8004ab0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d07c      	beq.n	8004bb4 <spi_stm32_transceive+0x360>
			ctx->current_tx++;
 8004aba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004abc:	f103 0208 	add.w	r2, r3, #8
 8004ac0:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8004ac2:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8004ac4:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8004ac6:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8004ac8:	6423      	str	r3, [r4, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004aca:	68b3      	ldr	r3, [r6, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 8004acc:	07d9      	lsls	r1, r3, #31
 8004ace:	d5fc      	bpl.n	8004aca <spi_stm32_transceive+0x276>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	8892      	ldrh	r2, [r2, #4]
 8004ad4:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8004ad8:	2a08      	cmp	r2, #8
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8004ada:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
  return (uint8_t)(READ_REG(SPIx->DR));
 8004ade:	68f2      	ldr	r2, [r6, #12]
 8004ae0:	f040 8088 	bne.w	8004bf4 <spi_stm32_transceive+0x3a0>
 8004ae4:	b10b      	cbz	r3, 8004aea <spi_stm32_transceive+0x296>
 8004ae6:	b101      	cbz	r1, 8004aea <spi_stm32_transceive+0x296>
 8004ae8:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8004aea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004aec:	b193      	cbz	r3, 8004b14 <spi_stm32_transceive+0x2c0>
	ctx->rx_len -= len;
 8004aee:	3b01      	subs	r3, #1
 8004af0:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->rx_len) {
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 80e8 	bne.w	8004cc8 <spi_stm32_transceive+0x474>
		ctx->rx_count--;
 8004af8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004afa:	3b01      	subs	r3, #1
 8004afc:	63a3      	str	r3, [r4, #56]	; 0x38
		if (ctx->rx_count) {
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80e7 	beq.w	8004cd2 <spi_stm32_transceive+0x47e>
			ctx->current_rx++;
 8004b04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b06:	f103 0208 	add.w	r2, r3, #8
 8004b0a:	6362      	str	r2, [r4, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8004b0c:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 8004b0e:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8004b10:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
 8004b12:	64a3      	str	r3, [r4, #72]	; 0x48
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8004b14:	68b2      	ldr	r2, [r6, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8004b16:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
 8004b1a:	f000 80e2 	beq.w	8004ce2 <spi_stm32_transceive+0x48e>
 8004b1e:	490f      	ldr	r1, [pc, #60]	; (8004b5c <spi_stm32_transceive+0x308>)
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <spi_stm32_transceive+0x30c>)
		LOG_ERR("%s: err=%d", __func__,
 8004b22:	4812      	ldr	r0, [pc, #72]	; (8004b6c <spi_stm32_transceive+0x318>)
 8004b24:	1a5b      	subs	r3, r3, r1
 8004b26:	08db      	lsrs	r3, r3, #3
 8004b28:	019b      	lsls	r3, r3, #6
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	4910      	ldr	r1, [pc, #64]	; (8004b70 <spi_stm32_transceive+0x31c>)
 8004b30:	f002 f8f7 	bl	8006d22 <log_2>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8004b34:	68b3      	ldr	r3, [r6, #8]
 8004b36:	065d      	lsls	r5, r3, #25
 8004b38:	d505      	bpl.n	8004b46 <spi_stm32_transceive+0x2f2>
  tmpreg = SPIx->DR;
 8004b3a:	68f3      	ldr	r3, [r6, #12]
 8004b3c:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 8004b3e:	9b05      	ldr	r3, [sp, #20]
  tmpreg = SPIx->SR;
 8004b40:	68b3      	ldr	r3, [r6, #8]
 8004b42:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 8004b44:	9b05      	ldr	r3, [sp, #20]
		return -EIO;
 8004b46:	f06f 0704 	mvn.w	r7, #4
 8004b4a:	e0d2      	b.n	8004cf2 <spi_stm32_transceive+0x49e>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8004b4c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8004b50:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8004b52:	6869      	ldr	r1, [r5, #4]
 8004b54:	f041 0104 	orr.w	r1, r1, #4
 8004b58:	6069      	str	r1, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8004b5a:	e723      	b.n	80049a4 <spi_stm32_transceive+0x150>
 8004b5c:	08008974 	.word	0x08008974
 8004b60:	080089a4 	.word	0x080089a4
 8004b64:	08009f7a 	.word	0x08009f7a
 8004b68:	0800a08f 	.word	0x0800a08f
 8004b6c:	0800a084 	.word	0x0800a084
 8004b70:	0800a0d1 	.word	0x0800a0d1
 8004b74:	08008a98 	.word	0x08008a98
 8004b78:	200000ac 	.word	0x200000ac
 8004b7c:	4b7c      	ldr	r3, [pc, #496]	; (8004d70 <spi_stm32_transceive+0x51c>)
 8004b7e:	497d      	ldr	r1, [pc, #500]	; (8004d74 <spi_stm32_transceive+0x520>)
		LOG_INF("CS control inhibited (no GPIO device)");
 8004b80:	487d      	ldr	r0, [pc, #500]	; (8004d78 <spi_stm32_transceive+0x524>)
 8004b82:	1ac9      	subs	r1, r1, r3
 8004b84:	08c9      	lsrs	r1, r1, #3
 8004b86:	0189      	lsls	r1, r1, #6
 8004b88:	f041 0103 	orr.w	r1, r1, #3
 8004b8c:	f002 f8a3 	bl	8006cd6 <log_0>
	if (ret) {
 8004b90:	e750      	b.n	8004a34 <spi_stm32_transceive+0x1e0>
		return -ENOTSUP;
 8004b92:	f06f 0785 	mvn.w	r7, #133	; 0x85
 8004b96:	e6a8      	b.n	80048ea <spi_stm32_transceive+0x96>
		ctx->tx_count = 0;
 8004b98:	e9c4 990b 	strd	r9, r9, [r4, #44]	; 0x2c
		ctx->tx_len = 0;
 8004b9c:	e9c4 990f 	strd	r9, r9, [r4, #60]	; 0x3c
 8004ba0:	e756      	b.n	8004a50 <spi_stm32_transceive+0x1fc>
		ctx->rx_count = 0;
 8004ba2:	e9c4 770d 	strd	r7, r7, [r4, #52]	; 0x34
		ctx->rx_len = 0;
 8004ba6:	e9c4 7711 	strd	r7, r7, [r4, #68]	; 0x44
 8004baa:	e75c      	b.n	8004a66 <spi_stm32_transceive+0x212>
	} else if (ctx->tx_buf) {
 8004bac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d08b      	beq.n	8004aca <spi_stm32_transceive+0x276>
		ctx->tx_buf += dfs * len;
 8004bb2:	3301      	adds	r3, #1
			ctx->tx_buf = NULL;
 8004bb4:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004bb6:	e788      	b.n	8004aca <spi_stm32_transceive+0x276>
	return !!(ctx->tx_len);
 8004bb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
	return !!(ctx->tx_buf && ctx->tx_len);
 8004bba:	b10a      	cbz	r2, 8004bc0 <spi_stm32_transceive+0x36c>
 8004bbc:	b103      	cbz	r3, 8004bc0 <spi_stm32_transceive+0x36c>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8004bbe:	8811      	ldrh	r1, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8004bc0:	81b1      	strh	r1, [r6, #12]
	if (!ctx->tx_len) {
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d081      	beq.n	8004aca <spi_stm32_transceive+0x276>
	ctx->tx_len -= len;
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 8004bca:	b96b      	cbnz	r3, 8004be8 <spi_stm32_transceive+0x394>
		ctx->tx_count--;
 8004bcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0ee      	beq.n	8004bb4 <spi_stm32_transceive+0x360>
			ctx->current_tx++;
 8004bd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004bd8:	f103 0208 	add.w	r2, r3, #8
 8004bdc:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8004bde:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8004be0:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8004be2:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	e76f      	b.n	8004ac8 <spi_stm32_transceive+0x274>
	} else if (ctx->tx_buf) {
 8004be8:	2a00      	cmp	r2, #0
 8004bea:	f43f af6e 	beq.w	8004aca <spi_stm32_transceive+0x276>
		ctx->tx_buf += dfs * len;
 8004bee:	3202      	adds	r2, #2
 8004bf0:	63e2      	str	r2, [r4, #60]	; 0x3c
 8004bf2:	e76a      	b.n	8004aca <spi_stm32_transceive+0x276>
	return !!(ctx->rx_buf && ctx->rx_len);
 8004bf4:	b10b      	cbz	r3, 8004bfa <spi_stm32_transceive+0x3a6>
 8004bf6:	b101      	cbz	r1, 8004bfa <spi_stm32_transceive+0x3a6>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8004bf8:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8004bfa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d089      	beq.n	8004b14 <spi_stm32_transceive+0x2c0>
	ctx->rx_len -= len;
 8004c00:	3b01      	subs	r3, #1
 8004c02:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->rx_len) {
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d166      	bne.n	8004cd6 <spi_stm32_transceive+0x482>
		ctx->rx_count--;
 8004c08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	63a3      	str	r3, [r4, #56]	; 0x38
		if (ctx->rx_count) {
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d05f      	beq.n	8004cd2 <spi_stm32_transceive+0x47e>
			ctx->current_rx++;
 8004c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c14:	f103 0208 	add.w	r2, r3, #8
 8004c18:	6362      	str	r2, [r4, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8004c1a:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 8004c1c:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8004c1e:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	e776      	b.n	8004b12 <spi_stm32_transceive+0x2be>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004c24:	68b2      	ldr	r2, [r6, #8]
 8004c26:	0792      	lsls	r2, r2, #30
 8004c28:	d549      	bpl.n	8004cbe <spi_stm32_transceive+0x46a>
	return !!(ctx->tx_len);
 8004c2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d046      	beq.n	8004cbe <spi_stm32_transceive+0x46a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004c30:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004c34:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8004c36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004c38:	d12b      	bne.n	8004c92 <spi_stm32_transceive+0x43e>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8004c3a:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 8004c3c:	7333      	strb	r3, [r6, #12]
	if (!ctx->tx_len) {
 8004c3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c40:	b19b      	cbz	r3, 8004c6a <spi_stm32_transceive+0x416>
	ctx->tx_len -= len;
 8004c42:	3b01      	subs	r3, #1
 8004c44:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 8004c46:	b963      	cbnz	r3, 8004c62 <spi_stm32_transceive+0x40e>
		ctx->tx_count--;
 8004c48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 8004c4e:	b15b      	cbz	r3, 8004c68 <spi_stm32_transceive+0x414>
			ctx->current_tx++;
 8004c50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c52:	f103 0208 	add.w	r2, r3, #8
 8004c56:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8004c58:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8004c5a:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8004c5c:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8004c5e:	6423      	str	r3, [r4, #64]	; 0x40
 8004c60:	e003      	b.n	8004c6a <spi_stm32_transceive+0x416>
	} else if (ctx->tx_buf) {
 8004c62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c64:	b10b      	cbz	r3, 8004c6a <spi_stm32_transceive+0x416>
		ctx->tx_buf += dfs * len;
 8004c66:	3301      	adds	r3, #1
 8004c68:	63e3      	str	r3, [r4, #60]	; 0x3c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004c6a:	68b3      	ldr	r3, [r6, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 8004c6c:	07df      	lsls	r7, r3, #31
 8004c6e:	f57f af51 	bpl.w	8004b14 <spi_stm32_transceive+0x2c0>
	return !!(ctx->rx_buf && ctx->rx_len);
 8004c72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f43f af4d 	beq.w	8004b14 <spi_stm32_transceive+0x2c0>
 8004c7a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004c7c:	2a00      	cmp	r2, #0
 8004c7e:	f43f af49 	beq.w	8004b14 <spi_stm32_transceive+0x2c0>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	8892      	ldrh	r2, [r2, #4]
 8004c86:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8004c8a:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 8004c8c:	68f2      	ldr	r2, [r6, #12]
 8004c8e:	d1b3      	bne.n	8004bf8 <spi_stm32_transceive+0x3a4>
 8004c90:	e72a      	b.n	8004ae8 <spi_stm32_transceive+0x294>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8004c92:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 8004c94:	81b3      	strh	r3, [r6, #12]
	ctx->tx_len -= len;
 8004c96:	3901      	subs	r1, #1
 8004c98:	6421      	str	r1, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 8004c9a:	b969      	cbnz	r1, 8004cb8 <spi_stm32_transceive+0x464>
		ctx->tx_count--;
 8004c9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0e0      	beq.n	8004c68 <spi_stm32_transceive+0x414>
			ctx->current_tx++;
 8004ca6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ca8:	f103 0208 	add.w	r2, r3, #8
 8004cac:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8004cae:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8004cb0:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8004cb2:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8004cb4:	085b      	lsrs	r3, r3, #1
 8004cb6:	e7d2      	b.n	8004c5e <spi_stm32_transceive+0x40a>
		ctx->tx_buf += dfs * len;
 8004cb8:	3202      	adds	r2, #2
 8004cba:	63e2      	str	r2, [r4, #60]	; 0x3c
 8004cbc:	e7d5      	b.n	8004c6a <spi_stm32_transceive+0x416>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8004cbe:	6873      	ldr	r3, [r6, #4]
 8004cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cc4:	6073      	str	r3, [r6, #4]
    defined(CONFIG_SOC_SERIES_STM32H7X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 8004cc6:	e7d0      	b.n	8004c6a <spi_stm32_transceive+0x416>
	} else if (ctx->rx_buf) {
 8004cc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f43f af22 	beq.w	8004b14 <spi_stm32_transceive+0x2c0>
		ctx->rx_buf += dfs * len;
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	6463      	str	r3, [r4, #68]	; 0x44
 8004cd4:	e71e      	b.n	8004b14 <spi_stm32_transceive+0x2c0>
	} else if (ctx->rx_buf) {
 8004cd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f43f af1b 	beq.w	8004b14 <spi_stm32_transceive+0x2c0>
		ctx->rx_buf += dfs * len;
 8004cde:	3302      	adds	r3, #2
 8004ce0:	e7f7      	b.n	8004cd2 <spi_stm32_transceive+0x47e>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8004ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f47f aec8 	bne.w	8004a7a <spi_stm32_transceive+0x226>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 8004cea:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8004cec:	2f00      	cmp	r7, #0
 8004cee:	f47f aec4 	bne.w	8004a7a <spi_stm32_transceive+0x226>
	_spi_context_cs_control(ctx, on, false);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f002 ffc9 	bl	8007c8e <_spi_context_cs_control>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8004cfc:	6833      	ldr	r3, [r6, #0]
 8004cfe:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8004d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d06:	d102      	bne.n	8004d0e <spi_stm32_transceive+0x4ba>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8004d08:	68b3      	ldr	r3, [r6, #8]
 8004d0a:	0618      	lsls	r0, r3, #24
 8004d0c:	d4fc      	bmi.n	8004d08 <spi_stm32_transceive+0x4b4>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8004d0e:	68b3      	ldr	r3, [r6, #8]
 8004d10:	0699      	lsls	r1, r3, #26
 8004d12:	d506      	bpl.n	8004d22 <spi_stm32_transceive+0x4ce>
  tmpreg_sr = SPIx->SR;
 8004d14:	68b3      	ldr	r3, [r6, #8]
 8004d16:	9306      	str	r3, [sp, #24]
  (void) tmpreg_sr;
 8004d18:	9b06      	ldr	r3, [sp, #24]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004d1a:	6833      	ldr	r3, [r6, #0]
 8004d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d20:	6033      	str	r3, [r6, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004d22:	6833      	ldr	r3, [r6, #0]
 8004d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d28:	6033      	str	r3, [r6, #0]
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	889b      	ldrh	r3, [r3, #4]
 8004d2e:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 8004d32:	f47f adda 	bne.w	80048ea <spi_stm32_transceive+0x96>
		ctx->owner = NULL;
 8004d36:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 8004d38:	f104 0008 	add.w	r0, r4, #8
 8004d3c:	f000 fda6 	bl	800588c <z_impl_k_sem_give>
}
 8004d40:	e5d3      	b.n	80048ea <spi_stm32_transceive+0x96>
 8004d42:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8004d44:	a90e      	add	r1, sp, #56	; 0x38
 8004d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4a:	602a      	str	r2, [r5, #0]
 8004d4c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8004d50:	682a      	ldr	r2, [r5, #0]
 8004d52:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004d56:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8004d5e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8004d62:	079a      	lsls	r2, r3, #30
 8004d64:	f53f adf4 	bmi.w	8004950 <spi_stm32_transceive+0xfc>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8004d68:	682a      	ldr	r2, [r5, #0]
 8004d6a:	f022 0202 	bic.w	r2, r2, #2
 8004d6e:	e5f2      	b.n	8004956 <spi_stm32_transceive+0x102>
 8004d70:	08008974 	.word	0x08008974
 8004d74:	080089a4 	.word	0x080089a4
 8004d78:	0800a05e 	.word	0x0800a05e

08004d7c <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004d7c:	6843      	ldr	r3, [r0, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004d80:	695a      	ldr	r2, [r3, #20]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	615a      	str	r2, [r3, #20]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 8004d88:	4a0f      	ldr	r2, [pc, #60]	; (8004dc8 <uart_stm32_irq_err_enable+0x4c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <uart_stm32_irq_err_enable+0x3a>
 8004d8e:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00f      	beq.n	8004db6 <uart_stm32_irq_err_enable+0x3a>
 8004d96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00b      	beq.n	8004db6 <uart_stm32_irq_err_enable+0x3a>
 8004d9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d007      	beq.n	8004db6 <uart_stm32_irq_err_enable+0x3a>
 8004da6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d003      	beq.n	8004db6 <uart_stm32_irq_err_enable+0x3a>
 8004dae:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d103      	bne.n	8004dbe <uart_stm32_irq_err_enable+0x42>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dbc:	611a      	str	r2, [r3, #16]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc4:	60da      	str	r2, [r3, #12]
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 8004dc6:	4770      	bx	lr
 8004dc8:	40011000 	.word	0x40011000

08004dcc <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004dcc:	6843      	ldr	r3, [r0, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	f022 0201 	bic.w	r2, r2, #1
 8004dd6:	615a      	str	r2, [r3, #20]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 8004dd8:	4a0f      	ldr	r2, [pc, #60]	; (8004e18 <uart_stm32_irq_err_disable+0x4c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d013      	beq.n	8004e06 <uart_stm32_irq_err_disable+0x3a>
 8004dde:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00f      	beq.n	8004e06 <uart_stm32_irq_err_disable+0x3a>
 8004de6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00b      	beq.n	8004e06 <uart_stm32_irq_err_disable+0x3a>
 8004dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d007      	beq.n	8004e06 <uart_stm32_irq_err_disable+0x3a>
 8004df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <uart_stm32_irq_err_disable+0x3a>
 8004dfe:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d103      	bne.n	8004e0e <uart_stm32_irq_err_disable+0x42>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e14:	60da      	str	r2, [r3, #12]
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 8004e16:	4770      	bx	lr
 8004e18:	40011000 	.word	0x40011000

08004e1c <uart_stm32_set_baudrate>:
{
 8004e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (clock_control_get_rate(data->clock,
 8004e1e:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004e20:	6847      	ldr	r7, [r0, #4]
	if (clock_control_get_rate(data->clock,
 8004e22:	685e      	ldr	r6, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004e24:	f857 4b0c 	ldr.w	r4, [r7], #12
{
 8004e28:	460d      	mov	r5, r1
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f003 f887 	bl	8007f3e <z_device_ready>
 8004e30:	b958      	cbnz	r0, 8004e4a <uart_stm32_set_baudrate+0x2e>
 8004e32:	4918      	ldr	r1, [pc, #96]	; (8004e94 <uart_stm32_set_baudrate+0x78>)
 8004e34:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <uart_stm32_set_baudrate+0x7c>)
		LOG_ERR("Failed call clock_control_get_rate");
 8004e36:	4819      	ldr	r0, [pc, #100]	; (8004e9c <uart_stm32_set_baudrate+0x80>)
 8004e38:	1ac9      	subs	r1, r1, r3
 8004e3a:	08c9      	lsrs	r1, r1, #3
 8004e3c:	0189      	lsls	r1, r1, #6
 8004e3e:	f041 0101 	orr.w	r1, r1, #1
 8004e42:	f001 ff48 	bl	8006cd6 <log_0>
}
 8004e46:	b003      	add	sp, #12
 8004e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (api->get_rate == NULL) {
 8004e4a:	68b3      	ldr	r3, [r6, #8]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0ef      	beq.n	8004e32 <uart_stm32_set_baudrate+0x16>
	return api->get_rate(dev, sys, rate);
 8004e52:	aa01      	add	r2, sp, #4
 8004e54:	4639      	mov	r1, r7
 8004e56:	4630      	mov	r0, r6
 8004e58:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	dbe9      	blt.n	8004e32 <uart_stm32_set_baudrate+0x16>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8004e5e:	68e3      	ldr	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004e60:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8004e62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004e66:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8004e68:	60e3      	str	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004e6a:	00aa      	lsls	r2, r5, #2
 8004e6c:	0fab      	lsrs	r3, r5, #30
 8004e6e:	fba0 0101 	umull	r0, r1, r0, r1
 8004e72:	f7fb fdc7 	bl	8000a04 <__aeabi_uldivmod>
 8004e76:	2264      	movs	r2, #100	; 0x64
 8004e78:	fbb0 f1f2 	udiv	r1, r0, r2
 8004e7c:	fb02 0311 	mls	r3, r2, r1, r0
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	3332      	adds	r3, #50	; 0x32
 8004e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e88:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	60a3      	str	r3, [r4, #8]
 8004e90:	e7d9      	b.n	8004e46 <uart_stm32_set_baudrate+0x2a>
 8004e92:	bf00      	nop
 8004e94:	080089ac 	.word	0x080089ac
 8004e98:	08008974 	.word	0x08008974
 8004e9c:	08009f7a 	.word	0x08009f7a

08004ea0 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8004ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8004ea4:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004ea6:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8004ea8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f7c <uart_stm32_init+0xdc>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004eac:	46b1      	mov	r9, r6
{
 8004eae:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004eb0:	f859 4b0c 	ldr.w	r4, [r9], #12
	data->clock = clk;
 8004eb4:	f8c7 8004 	str.w	r8, [r7, #4]
 8004eb8:	4640      	mov	r0, r8
 8004eba:	f003 f840 	bl	8007f3e <z_device_ready>
 8004ebe:	b918      	cbnz	r0, 8004ec8 <uart_stm32_init+0x28>

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
 8004ec0:	f06f 0004 	mvn.w	r0, #4
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8004ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return api->on(dev, sys);
 8004ec8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004ecc:	4640      	mov	r0, r8
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	4798      	blx	r3
	if (clock_control_on(data->clock,
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d1f2      	bne.n	8004ec0 <uart_stm32_init+0x20>
					 (uint32_t)UART_STRUCT(dev));
 8004eda:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8004edc:	e9d6 0107 	ldrd	r0, r1, [r6, #28]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	f7fe fbe5 	bl	80036b0 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	dbec      	blt.n	8004ec4 <uart_stm32_init+0x24>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004eea:	68e3      	ldr	r3, [r4, #12]
	if (config->parity == 2) {
 8004eec:	69b1      	ldr	r1, [r6, #24]
 8004eee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ef2:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8004ef4:	68e3      	ldr	r3, [r4, #12]
 8004ef6:	2902      	cmp	r1, #2
 8004ef8:	f043 030c 	orr.w	r3, r3, #12
 8004efc:	60e3      	str	r3, [r4, #12]
 8004efe:	d00f      	beq.n	8004f20 <uart_stm32_init+0x80>
	} else if (config->parity == 1) {
 8004f00:	2901      	cmp	r1, #1
 8004f02:	d030      	beq.n	8004f66 <uart_stm32_init+0xc6>
		if (config->parity != 0) {
 8004f04:	b151      	cbz	r1, 8004f1c <uart_stm32_init+0x7c>
 8004f06:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <uart_stm32_init+0xd0>)
 8004f08:	4a1a      	ldr	r2, [pc, #104]	; (8004f74 <uart_stm32_init+0xd4>)
			LOG_WRN("Invalid parity setting '%d'."
 8004f0a:	481b      	ldr	r0, [pc, #108]	; (8004f78 <uart_stm32_init+0xd8>)
 8004f0c:	1ad2      	subs	r2, r2, r3
 8004f0e:	08d2      	lsrs	r2, r2, #3
 8004f10:	0192      	lsls	r2, r2, #6
 8004f12:	f042 0202 	orr.w	r2, r2, #2
 8004f16:	f001 feed 	bl	8006cf4 <log_1>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8004f1a:	4641      	mov	r1, r8
		ll_parity = LL_USART_PARITY_NONE;
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	e003      	b.n	8004f28 <uart_stm32_init+0x88>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8004f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8004f24:	f44f 6080 	mov.w	r0, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8004f28:	68e3      	ldr	r3, [r4, #12]
 8004f2a:	4301      	orrs	r1, r0
 8004f2c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f30:	4319      	orrs	r1, r3
 8004f32:	60e1      	str	r1, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f3a:	6123      	str	r3, [r4, #16]
	if (config->hw_flow_control) {
 8004f3c:	7d33      	ldrb	r3, [r6, #20]
 8004f3e:	b12b      	cbz	r3, 8004f4c <uart_stm32_init+0xac>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004f40:	686b      	ldr	r3, [r5, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004f44:	6953      	ldr	r3, [r2, #20]
 8004f46:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004f4a:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8004f4c:	6839      	ldr	r1, [r7, #0]
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f7ff ff64 	bl	8004e1c <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004f54:	68e3      	ldr	r3, [r4, #12]
 8004f56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f5a:	60e3      	str	r3, [r4, #12]
	config->uconf.irq_config_func(dev);
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	68b3      	ldr	r3, [r6, #8]
 8004f60:	4798      	blx	r3
	return 0;
 8004f62:	2000      	movs	r0, #0
 8004f64:	e7ae      	b.n	8004ec4 <uart_stm32_init+0x24>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8004f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8004f6a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8004f6e:	e7db      	b.n	8004f28 <uart_stm32_init+0x88>
 8004f70:	08008974 	.word	0x08008974
 8004f74:	080089ac 	.word	0x080089ac
 8004f78:	0800a0e3 	.word	0x0800a0e3
 8004f7c:	200000ac 	.word	0x200000ac

08004f80 <uart_stm32_configure>:
{
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8004f84:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004f86:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004f88:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004f8a:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 8004f8c:	2a01      	cmp	r2, #1
{
 8004f8e:	460d      	mov	r5, r1
	switch (parity) {
 8004f90:	f000 8089 	beq.w	80050a6 <uart_stm32_configure+0x126>
		return LL_USART_PARITY_NONE;
 8004f94:	2a02      	cmp	r2, #2
 8004f96:	bf0c      	ite	eq
 8004f98:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8004f9c:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8004f9e:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8004fa2:	f895 e006 	ldrb.w	lr, [r5, #6]
 8004fa6:	f1b9 0f02 	cmp.w	r9, #2
 8004faa:	bf96      	itet	ls
 8004fac:	4b42      	ldrls	r3, [pc, #264]	; (80050b8 <uart_stm32_configure+0x138>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8004fae:	f44f 5800 	movhi.w	r8, #8192	; 0x2000
 8004fb2:	f833 8019 	ldrhls.w	r8, [r3, r9, lsl #1]
	switch (db) {
 8004fb6:	f1be 0f04 	cmp.w	lr, #4
 8004fba:	d077      	beq.n	80050ac <uart_stm32_configure+0x12c>
		return LL_USART_DATAWIDTH_9B;
 8004fbc:	2a00      	cmp	r2, #0
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2300      	moveq	r3, #0
 8004fc2:	f44f 5380 	movne.w	r3, #4096	; 0x1000
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8004fc6:	79ef      	ldrb	r7, [r5, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8004fc8:	f1a2 0a03 	sub.w	sl, r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8004fcc:	2f01      	cmp	r7, #1
 8004fce:	bf14      	ite	ne
 8004fd0:	f04f 0c00 	movne.w	ip, #0
 8004fd4:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8004fd8:	f1ba 0f01 	cmp.w	sl, #1
 8004fdc:	d969      	bls.n	80050b2 <uart_stm32_configure+0x132>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8004fde:	b112      	cbz	r2, 8004fe6 <uart_stm32_configure+0x66>
 8004fe0:	f1be 0f04 	cmp.w	lr, #4
 8004fe4:	d065      	beq.n	80050b2 <uart_stm32_configure+0x132>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8004fe6:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8004fea:	d062      	beq.n	80050b2 <uart_stm32_configure+0x132>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8004fec:	f1be 0f02 	cmp.w	lr, #2
 8004ff0:	d95f      	bls.n	80050b2 <uart_stm32_configure+0x132>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8004ff2:	f1be 0f04 	cmp.w	lr, #4
 8004ff6:	d05c      	beq.n	80050b2 <uart_stm32_configure+0x132>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8004ff8:	b1c7      	cbz	r7, 800502c <uart_stm32_configure+0xac>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8004ffa:	4a30      	ldr	r2, [pc, #192]	; (80050bc <uart_stm32_configure+0x13c>)
 8004ffc:	4294      	cmp	r4, r2
 8004ffe:	d013      	beq.n	8005028 <uart_stm32_configure+0xa8>
 8005000:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8005004:	4294      	cmp	r4, r2
 8005006:	d00f      	beq.n	8005028 <uart_stm32_configure+0xa8>
 8005008:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800500c:	4294      	cmp	r4, r2
 800500e:	d00b      	beq.n	8005028 <uart_stm32_configure+0xa8>
 8005010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005014:	4294      	cmp	r4, r2
 8005016:	d007      	beq.n	8005028 <uart_stm32_configure+0xa8>
 8005018:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800501c:	4294      	cmp	r4, r2
 800501e:	d003      	beq.n	8005028 <uart_stm32_configure+0xa8>
 8005020:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8005024:	4294      	cmp	r4, r2
 8005026:	d144      	bne.n	80050b2 <uart_stm32_configure+0x132>
 8005028:	2f01      	cmp	r7, #1
 800502a:	d142      	bne.n	80050b2 <uart_stm32_configure+0x132>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800502c:	68e2      	ldr	r2, [r4, #12]
 800502e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005032:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8005034:	68e2      	ldr	r2, [r4, #12]
 8005036:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 800503a:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800503c:	bf1f      	itttt	ne
 800503e:	68e7      	ldrne	r7, [r4, #12]
 8005040:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8005044:	430f      	orrne	r7, r1
 8005046:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8005048:	6922      	ldr	r2, [r4, #16]
 800504a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800504e:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005050:	bf1f      	itttt	ne
 8005052:	6921      	ldrne	r1, [r4, #16]
 8005054:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8005058:	ea41 0108 	orrne.w	r1, r1, r8
 800505c:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800505e:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 8005060:	6829      	ldr	r1, [r5, #0]
 8005062:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8005066:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8005068:	bf1f      	itttt	ne
 800506a:	68e2      	ldrne	r2, [r4, #12]
 800506c:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8005070:	431a      	orrne	r2, r3
 8005072:	60e2      	strne	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8005074:	6963      	ldr	r3, [r4, #20]
 8005076:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800507a:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800507c:	bf1f      	itttt	ne
 800507e:	6963      	ldrne	r3, [r4, #20]
 8005080:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8005084:	ea43 030c 	orrne.w	r3, r3, ip
 8005088:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 800508a:	6833      	ldr	r3, [r6, #0]
 800508c:	4299      	cmp	r1, r3
 800508e:	d003      	beq.n	8005098 <uart_stm32_configure+0x118>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8005090:	f7ff fec4 	bl	8004e1c <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005098:	68e3      	ldr	r3, [r4, #12]
 800509a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800509e:	60e3      	str	r3, [r4, #12]
	return 0;
 80050a0:	2000      	movs	r0, #0
};
 80050a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (parity) {
 80050a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050aa:	e778      	b.n	8004f9e <uart_stm32_configure+0x1e>
		return LL_USART_DATAWIDTH_9B;
 80050ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050b0:	e789      	b.n	8004fc6 <uart_stm32_configure+0x46>
		return -ENOTSUP;
 80050b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80050b6:	e7f4      	b.n	80050a2 <uart_stm32_configure+0x122>
 80050b8:	080098fc 	.word	0x080098fc
 80050bc:	40011000 	.word	0x40011000

080050c0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80050c0:	b530      	push	{r4, r5, lr}
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80050c2:	4c0a      	ldr	r4, [pc, #40]	; (80050ec <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80050c4:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80050c8:	6865      	ldr	r5, [r4, #4]
 80050ca:	4909      	ldr	r1, [pc, #36]	; (80050f0 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 80050cc:	4029      	ands	r1, r5
 80050ce:	430a      	orrs	r2, r1
 80050d0:	4310      	orrs	r0, r2
 80050d2:	6060      	str	r0, [r4, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80050d4:	6862      	ldr	r2, [r4, #4]
 80050d6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80050da:	431a      	orrs	r2, r3
 80050dc:	6062      	str	r2, [r4, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 80050de:	6862      	ldr	r2, [r4, #4]
 80050e0:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80050e4:	4313      	orrs	r3, r2
 80050e6:	6063      	str	r3, [r4, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80050e8:	bd30      	pop	{r4, r5, pc}
 80050ea:	bf00      	nop
 80050ec:	40023800 	.word	0x40023800
 80050f0:	ffbf8000 	.word	0xffbf8000

080050f4 <UTILS_PLL_IsBusy>:
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80050f4:	4b08      	ldr	r3, [pc, #32]	; (8005118 <UTILS_PLL_IsBusy+0x24>)
 80050f6:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 80050f8:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 80050fa:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80050fc:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 8005100:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8005104:	430a      	orrs	r2, r1
 8005106:	bf14      	ite	ne
 8005108:	2001      	movne	r0, #1
 800510a:	2000      	moveq	r0, #0
    status = ERROR;
  }
#endif /*RCC_PLLSAI_SUPPORT*/
#if defined(RCC_PLLI2S_SUPPORT)
  /* Check if PLLI2S is busy*/
  if(LL_RCC_PLLI2S_IsReady() != 0U)
 800510c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8005110:	bf18      	it	ne
 8005112:	2001      	movne	r0, #1
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40023800 	.word	0x40023800

0800511c <LL_SetFlashLatency>:
  if(HCLK_Frequency == 0U)
 800511c:	2800      	cmp	r0, #0
 800511e:	d04c      	beq.n	80051ba <LL_SetFlashLatency+0x9e>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8005120:	4b42      	ldr	r3, [pc, #264]	; (800522c <LL_SetFlashLatency+0x110>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8005128:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800512c:	d110      	bne.n	8005150 <LL_SetFlashLatency+0x34>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800512e:	f103 630f 	add.w	r3, r3, #149946368	; 0x8f00000
 8005132:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8005136:	4298      	cmp	r0, r3
 8005138:	4a3d      	ldr	r2, [pc, #244]	; (8005230 <LL_SetFlashLatency+0x114>)
 800513a:	d844      	bhi.n	80051c6 <LL_SetFlashLatency+0xaa>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800513c:	4b3d      	ldr	r3, [pc, #244]	; (8005234 <LL_SetFlashLatency+0x118>)
 800513e:	4298      	cmp	r0, r3
 8005140:	d871      	bhi.n	8005226 <LL_SetFlashLatency+0x10a>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005142:	4290      	cmp	r0, r2
 8005144:	d83d      	bhi.n	80051c2 <LL_SetFlashLatency+0xa6>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005146:	4b3c      	ldr	r3, [pc, #240]	; (8005238 <LL_SetFlashLatency+0x11c>)
 8005148:	4298      	cmp	r0, r3
 800514a:	d803      	bhi.n	8005154 <LL_SetFlashLatency+0x38>
 800514c:	2300      	movs	r3, #0
 800514e:	e040      	b.n	80051d2 <LL_SetFlashLatency+0xb6>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005150:	2300      	movs	r3, #0
 8005152:	e044      	b.n	80051de <LL_SetFlashLatency+0xc2>
        latency = LL_FLASH_LATENCY_2;
 8005154:	2302      	movs	r3, #2
 8005156:	e042      	b.n	80051de <LL_SetFlashLatency+0xc2>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005158:	4a38      	ldr	r2, [pc, #224]	; (800523c <LL_SetFlashLatency+0x120>)
 800515a:	4290      	cmp	r0, r2
 800515c:	d909      	bls.n	8005172 <LL_SetFlashLatency+0x56>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800515e:	4a34      	ldr	r2, [pc, #208]	; (8005230 <LL_SetFlashLatency+0x114>)
        latency = LL_FLASH_LATENCY_4;
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf08      	it	eq
 8005164:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005166:	4290      	cmp	r0, r2
 8005168:	d849      	bhi.n	80051fe <LL_SetFlashLatency+0xe2>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800516a:	4a33      	ldr	r2, [pc, #204]	; (8005238 <LL_SetFlashLatency+0x11c>)
 800516c:	4290      	cmp	r0, r2
 800516e:	d946      	bls.n	80051fe <LL_SetFlashLatency+0xe2>
 8005170:	e003      	b.n	800517a <LL_SetFlashLatency+0x5e>
 8005172:	4a31      	ldr	r2, [pc, #196]	; (8005238 <LL_SetFlashLatency+0x11c>)
 8005174:	4290      	cmp	r0, r2
 8005176:	d942      	bls.n	80051fe <LL_SetFlashLatency+0xe2>
 8005178:	b11b      	cbz	r3, 8005182 <LL_SetFlashLatency+0x66>
 800517a:	2b01      	cmp	r3, #1
 800517c:	bf38      	it	cc
 800517e:	2301      	movcc	r3, #1
 8005180:	e040      	b.n	8005204 <LL_SetFlashLatency+0xe8>
        latency = LL_FLASH_LATENCY_2;
 8005182:	2302      	movs	r3, #2
 8005184:	e03e      	b.n	8005204 <LL_SetFlashLatency+0xe8>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005186:	4a2c      	ldr	r2, [pc, #176]	; (8005238 <LL_SetFlashLatency+0x11c>)
 8005188:	4290      	cmp	r0, r2
 800518a:	d903      	bls.n	8005194 <LL_SetFlashLatency+0x78>
 800518c:	2b00      	cmp	r3, #0
 800518e:	d146      	bne.n	800521e <LL_SetFlashLatency+0x102>
        latency = LL_FLASH_LATENCY_2;
 8005190:	2302      	movs	r3, #2
 8005192:	e002      	b.n	800519a <LL_SetFlashLatency+0x7e>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005194:	4a2a      	ldr	r2, [pc, #168]	; (8005240 <LL_SetFlashLatency+0x124>)
 8005196:	4290      	cmp	r0, r2
 8005198:	d841      	bhi.n	800521e <LL_SetFlashLatency+0x102>
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800519a:	492a      	ldr	r1, [pc, #168]	; (8005244 <LL_SetFlashLatency+0x128>)
 800519c:	680a      	ldr	r2, [r1, #0]
 800519e:	f022 020f 	bic.w	r2, r2, #15
 80051a2:	431a      	orrs	r2, r3
 80051a4:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80051a6:	680a      	ldr	r2, [r1, #0]
 80051a8:	f002 020f 	and.w	r2, r2, #15
    } while ((getlatency != latency) && (timeout > 0));
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d006      	beq.n	80051be <LL_SetFlashLatency+0xa2>
 80051b0:	680a      	ldr	r2, [r1, #0]
 80051b2:	f002 020f 	and.w	r2, r2, #15
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d001      	beq.n	80051be <LL_SetFlashLatency+0xa2>
    status = ERROR;
 80051ba:	2001      	movs	r0, #1
 80051bc:	4770      	bx	lr
      status = SUCCESS;
 80051be:	2000      	movs	r0, #0
}
 80051c0:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 80051c2:	2303      	movs	r3, #3
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80051c4:	e005      	b.n	80051d2 <LL_SetFlashLatency+0xb6>
        latency = LL_FLASH_LATENCY_5;
 80051c6:	2305      	movs	r3, #5
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80051c8:	4290      	cmp	r0, r2
 80051ca:	d802      	bhi.n	80051d2 <LL_SetFlashLatency+0xb6>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80051cc:	4a1a      	ldr	r2, [pc, #104]	; (8005238 <LL_SetFlashLatency+0x11c>)
 80051ce:	4290      	cmp	r0, r2
 80051d0:	d802      	bhi.n	80051d8 <LL_SetFlashLatency+0xbc>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80051d2:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <LL_SetFlashLatency+0x124>)
 80051d4:	4290      	cmp	r0, r2
 80051d6:	d902      	bls.n	80051de <LL_SetFlashLatency+0xc2>
 80051d8:	2b01      	cmp	r3, #1
 80051da:	bf38      	it	cc
 80051dc:	2301      	movcc	r3, #1
 80051de:	4a13      	ldr	r2, [pc, #76]	; (800522c <LL_SetFlashLatency+0x110>)
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80051e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80051ea:	d10b      	bne.n	8005204 <LL_SetFlashLatency+0xe8>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80051ec:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
 80051f0:	f502 42a3 	add.w	r2, r2, #20864	; 0x5180
 80051f4:	4290      	cmp	r0, r2
 80051f6:	d9af      	bls.n	8005158 <LL_SetFlashLatency+0x3c>
        latency = LL_FLASH_LATENCY_5;
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bf08      	it	eq
 80051fc:	2305      	moveq	r3, #5
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80051fe:	4a10      	ldr	r2, [pc, #64]	; (8005240 <LL_SetFlashLatency+0x124>)
 8005200:	4290      	cmp	r0, r2
 8005202:	d8ba      	bhi.n	800517a <LL_SetFlashLatency+0x5e>
 8005204:	4a09      	ldr	r2, [pc, #36]	; (800522c <LL_SetFlashLatency+0x110>)
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 800520c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005210:	d1c3      	bne.n	800519a <LL_SetFlashLatency+0x7e>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005212:	4a07      	ldr	r2, [pc, #28]	; (8005230 <LL_SetFlashLatency+0x114>)
 8005214:	4290      	cmp	r0, r2
 8005216:	d9b6      	bls.n	8005186 <LL_SetFlashLatency+0x6a>
        latency = LL_FLASH_LATENCY_3;
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf08      	it	eq
 800521c:	2303      	moveq	r3, #3
 800521e:	2b01      	cmp	r3, #1
 8005220:	bf38      	it	cc
 8005222:	2301      	movcc	r3, #1
 8005224:	e7b9      	b.n	800519a <LL_SetFlashLatency+0x7e>
        latency = LL_FLASH_LATENCY_4;
 8005226:	2304      	movs	r3, #4
 8005228:	e7ce      	b.n	80051c8 <LL_SetFlashLatency+0xac>
 800522a:	bf00      	nop
 800522c:	40007000 	.word	0x40007000
 8005230:	055d4a80 	.word	0x055d4a80
 8005234:	07270e00 	.word	0x07270e00
 8005238:	03938700 	.word	0x03938700
 800523c:	00b71b00 	.word	0x00b71b00
 8005240:	01c9c380 	.word	0x01c9c380
 8005244:	40023c00 	.word	0x40023c00

08005248 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8005248:	680b      	ldr	r3, [r1, #0]
 800524a:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 800524c:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8005250:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8005252:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8005254:	4e1f      	ldr	r6, [pc, #124]	; (80052d4 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8005256:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 800525a:	6833      	ldr	r3, [r6, #0]
 800525c:	42a3      	cmp	r3, r4
{
 800525e:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 8005260:	d327      	bcc.n	80052b2 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005262:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800526a:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800526c:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 800526e:	0192      	lsls	r2, r2, #6
 8005270:	d5fc      	bpl.n	800526c <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	6829      	ldr	r1, [r5, #0]
 8005276:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800527a:	430a      	orrs	r2, r1
 800527c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	f022 0203 	bic.w	r2, r2, #3
 8005284:	f042 0202 	orr.w	r2, r2, #2
 8005288:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800528a:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005292:	2a08      	cmp	r2, #8
 8005294:	d1fa      	bne.n	800528c <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	6869      	ldr	r1, [r5, #4]
 800529a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800529e:	430a      	orrs	r2, r1
 80052a0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	68a9      	ldr	r1, [r5, #8]
 80052a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80052aa:	430a      	orrs	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]
}
 80052ae:	2000      	movs	r0, #0
 80052b0:	e004      	b.n	80052bc <UTILS_EnablePLLAndSwitchSystem+0x74>
    status = LL_SetFlashLatency(hclk_frequency);
 80052b2:	4620      	mov	r0, r4
 80052b4:	f7ff ff32 	bl	800511c <LL_SetFlashLatency>
  if(status == SUCCESS)
 80052b8:	2800      	cmp	r0, #0
 80052ba:	d0d2      	beq.n	8005262 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 80052bc:	6833      	ldr	r3, [r6, #0]
 80052be:	42a3      	cmp	r3, r4
 80052c0:	d902      	bls.n	80052c8 <UTILS_EnablePLLAndSwitchSystem+0x80>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 80052c2:	4620      	mov	r0, r4
 80052c4:	f7ff ff2a 	bl	800511c <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 80052c8:	b900      	cbnz	r0, 80052cc <UTILS_EnablePLLAndSwitchSystem+0x84>
  SystemCoreClock = HCLKFrequency;
 80052ca:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 80052cc:	bd70      	pop	{r4, r5, r6, pc}
 80052ce:	bf00      	nop
 80052d0:	0800a127 	.word	0x0800a127
 80052d4:	200000a0 	.word	0x200000a0
 80052d8:	40023800 	.word	0x40023800

080052dc <LL_PLL_ConfigSystemClock_HSE>:
{
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	4605      	mov	r5, r0
 80052e0:	460f      	mov	r7, r1
 80052e2:	4614      	mov	r4, r2
 80052e4:	461e      	mov	r6, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 80052e6:	f7ff ff05 	bl	80050f4 <UTILS_PLL_IsBusy>
 80052ea:	bb60      	cbnz	r0, 8005346 <LL_PLL_ConfigSystemClock_HSE+0x6a>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 80052ec:	6821      	ldr	r1, [r4, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80052ee:	6862      	ldr	r2, [r4, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80052f0:	68a3      	ldr	r3, [r4, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80052f2:	4c16      	ldr	r4, [pc, #88]	; (800534c <LL_PLL_ConfigSystemClock_HSE+0x70>)
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 80052f4:	f001 003f 	and.w	r0, r1, #63	; 0x3f
 80052f8:	fbb5 f0f0 	udiv	r0, r5, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80052fc:	f3c2 0508 	ubfx	r5, r2, #0, #9
 8005300:	4345      	muls	r5, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005302:	0c18      	lsrs	r0, r3, #16
 8005304:	3001      	adds	r0, #1
 8005306:	0040      	lsls	r0, r0, #1
 8005308:	fbb5 f5f0 	udiv	r5, r5, r0
 800530c:	6820      	ldr	r0, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 800530e:	0380      	lsls	r0, r0, #14
 8005310:	d40f      	bmi.n	8005332 <LL_PLL_ConfigSystemClock_HSE+0x56>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005312:	6820      	ldr	r0, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8005314:	2f01      	cmp	r7, #1
 8005316:	bf0c      	ite	eq
 8005318:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800531c:	f420 2080 	bicne.w	r0, r0, #262144	; 0x40000
 8005320:	6020      	str	r0, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005322:	6820      	ldr	r0, [r4, #0]
 8005324:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8005328:	6020      	str	r0, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800532a:	4c08      	ldr	r4, [pc, #32]	; (800534c <LL_PLL_ConfigSystemClock_HSE+0x70>)
 800532c:	6820      	ldr	r0, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 800532e:	0380      	lsls	r0, r0, #14
 8005330:	d5fc      	bpl.n	800532c <LL_PLL_ConfigSystemClock_HSE+0x50>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 8005332:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8005336:	f7ff fec3 	bl	80050c0 <LL_RCC_PLL_ConfigDomain_SYS>
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800533a:	4631      	mov	r1, r6
 800533c:	4628      	mov	r0, r5
}
 800533e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8005342:	f7ff bf81 	b.w	8005248 <UTILS_EnablePLLAndSwitchSystem>
}
 8005346:	2001      	movs	r0, #1
 8005348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800534a:	bf00      	nop
 800534c:	40023800 	.word	0x40023800

08005350 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8005350:	4b0e      	ldr	r3, [pc, #56]	; (800538c <z_sys_init_run_level+0x3c>)
{
 8005352:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8005354:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8005358:	3001      	adds	r0, #1
 800535a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800535e:	42a6      	cmp	r6, r4
 8005360:	d800      	bhi.n	8005364 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8005362:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8005364:	e9d4 3500 	ldrd	r3, r5, [r4]
 8005368:	4628      	mov	r0, r5
 800536a:	4798      	blx	r3
		if (dev != NULL) {
 800536c:	b165      	cbz	r5, 8005388 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 800536e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 8005370:	b130      	cbz	r0, 8005380 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8005372:	2800      	cmp	r0, #0
 8005374:	bfb8      	it	lt
 8005376:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8005378:	28ff      	cmp	r0, #255	; 0xff
 800537a:	bfa8      	it	ge
 800537c:	20ff      	movge	r0, #255	; 0xff
 800537e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8005380:	785a      	ldrb	r2, [r3, #1]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8005388:	3408      	adds	r4, #8
 800538a:	e7e8      	b.n	800535e <z_sys_init_run_level+0xe>
 800538c:	080098d0 	.word	0x080098d0

08005390 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8005390:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8005392:	4605      	mov	r5, r0
 8005394:	b910      	cbnz	r0, 800539c <z_impl_device_get_binding+0xc>
		return NULL;
 8005396:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 8005398:	4620      	mov	r0, r4
 800539a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 800539c:	7803      	ldrb	r3, [r0, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f9      	beq.n	8005396 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 80053a2:	4c0e      	ldr	r4, [pc, #56]	; (80053dc <z_impl_device_get_binding+0x4c>)
 80053a4:	4e0e      	ldr	r6, [pc, #56]	; (80053e0 <z_impl_device_get_binding+0x50>)
 80053a6:	42b4      	cmp	r4, r6
 80053a8:	d108      	bne.n	80053bc <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 80053aa:	4c0c      	ldr	r4, [pc, #48]	; (80053dc <z_impl_device_get_binding+0x4c>)
 80053ac:	42b4      	cmp	r4, r6
 80053ae:	d0f2      	beq.n	8005396 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 80053b0:	4620      	mov	r0, r4
 80053b2:	f002 fdc4 	bl	8007f3e <z_device_ready>
 80053b6:	b950      	cbnz	r0, 80053ce <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 80053b8:	3418      	adds	r4, #24
 80053ba:	e7f7      	b.n	80053ac <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
 80053bc:	4620      	mov	r0, r4
 80053be:	f002 fdbe 	bl	8007f3e <z_device_ready>
 80053c2:	b110      	cbz	r0, 80053ca <z_impl_device_get_binding+0x3a>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	42ab      	cmp	r3, r5
 80053c8:	d0e6      	beq.n	8005398 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 80053ca:	3418      	adds	r4, #24
 80053cc:	e7eb      	b.n	80053a6 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 80053ce:	6821      	ldr	r1, [r4, #0]
 80053d0:	4628      	mov	r0, r5
 80053d2:	f7fb fc9d 	bl	8000d10 <strcmp>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d1ee      	bne.n	80053b8 <z_impl_device_get_binding+0x28>
 80053da:	e7dd      	b.n	8005398 <z_impl_device_get_binding+0x8>
 80053dc:	200000ac 	.word	0x200000ac
 80053e0:	2000022c 	.word	0x2000022c

080053e4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80053e4:	b510      	push	{r4, lr}
 80053e6:	4604      	mov	r4, r0
	z_impl_log_panic();
 80053e8:	f7fd fcce 	bl	8002d88 <z_impl_log_panic>
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <k_sys_fatal_error_handler+0x24>)
 80053ee:	4907      	ldr	r1, [pc, #28]	; (800540c <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 80053f0:	4807      	ldr	r0, [pc, #28]	; (8005410 <k_sys_fatal_error_handler+0x2c>)
 80053f2:	1ac9      	subs	r1, r1, r3
 80053f4:	08c9      	lsrs	r1, r1, #3
 80053f6:	0189      	lsls	r1, r1, #6
 80053f8:	f041 0101 	orr.w	r1, r1, #1
 80053fc:	f001 fc6b 	bl	8006cd6 <log_0>
	arch_system_halt(reason);
 8005400:	4620      	mov	r0, r4
 8005402:	f002 fda6 	bl	8007f52 <arch_system_halt>
 8005406:	bf00      	nop
 8005408:	08008974 	.word	0x08008974
 800540c:	0800899c 	.word	0x0800899c
 8005410:	0800a137 	.word	0x0800a137

08005414 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8005414:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005418:	4606      	mov	r6, r0
 800541a:	460f      	mov	r7, r1
	__asm__ volatile(
 800541c:	f04f 0310 	mov.w	r3, #16
 8005420:	f3ef 8811 	mrs	r8, BASEPRI
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 800542c:	f000 fd32 	bl	8005e94 <z_impl_k_current_get>
 8005430:	4c1f      	ldr	r4, [pc, #124]	; (80054b0 <z_fatal_error+0x9c>)
 8005432:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <z_fatal_error+0xa0>)
 8005434:	1ae4      	subs	r4, r4, r3
 8005436:	2e04      	cmp	r6, #4
 8005438:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 800543c:	bf96      	itet	ls
 800543e:	4a1e      	ldrls	r2, [pc, #120]	; (80054b8 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8005440:	4a1e      	ldrhi	r2, [pc, #120]	; (80054bc <z_fatal_error+0xa8>)
 8005442:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
 8005446:	01a4      	lsls	r4, r4, #6
 8005448:	f044 0301 	orr.w	r3, r4, #1
 800544c:	4605      	mov	r5, r0
 800544e:	f8ad 3000 	strh.w	r3, [sp]
 8005452:	481b      	ldr	r0, [pc, #108]	; (80054c0 <z_fatal_error+0xac>)
 8005454:	2300      	movs	r3, #0
 8005456:	4631      	mov	r1, r6
 8005458:	f001 fc7c 	bl	8006d54 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800545c:	b147      	cbz	r7, 8005470 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005464:	b123      	cbz	r3, 8005470 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
 8005466:	4817      	ldr	r0, [pc, #92]	; (80054c4 <z_fatal_error+0xb0>)
 8005468:	f044 0101 	orr.w	r1, r4, #1
 800546c:	f001 fc33 	bl	8006cd6 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8005470:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8005474:	b12d      	cbz	r5, 8005482 <z_fatal_error+0x6e>
 8005476:	4628      	mov	r0, r5
 8005478:	f002 fdc2 	bl	8008000 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800547c:	b108      	cbz	r0, 8005482 <z_fatal_error+0x6e>
 800547e:	7803      	ldrb	r3, [r0, #0]
 8005480:	b903      	cbnz	r3, 8005484 <z_fatal_error+0x70>
		thread_name = "unknown";
 8005482:	4811      	ldr	r0, [pc, #68]	; (80054c8 <z_fatal_error+0xb4>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
 8005484:	f7fd fb06 	bl	8002a94 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
 8005488:	4623      	mov	r3, r4
 800548a:	4602      	mov	r2, r0
 800548c:	4629      	mov	r1, r5
 800548e:	480f      	ldr	r0, [pc, #60]	; (80054cc <z_fatal_error+0xb8>)
 8005490:	f001 fc47 	bl	8006d22 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8005494:	4639      	mov	r1, r7
 8005496:	4630      	mov	r0, r6
 8005498:	f7ff ffa4 	bl	80053e4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800549c:	f388 8811 	msr	BASEPRI, r8
 80054a0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80054a4:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 80054a6:	b002      	add	sp, #8
 80054a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ac:	f7fe be9e 	b.w	80041ec <z_impl_k_thread_abort>
 80054b0:	0800899c 	.word	0x0800899c
 80054b4:	08008974 	.word	0x08008974
 80054b8:	080098e8 	.word	0x080098e8
 80054bc:	0800a146 	.word	0x0800a146
 80054c0:	0800a15c 	.word	0x0800a15c
 80054c4:	0800a184 	.word	0x0800a184
 80054c8:	0800a154 	.word	0x0800a154
 80054cc:	0800a1a5 	.word	0x0800a1a5

080054d0 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 80054d0:	4802      	ldr	r0, [pc, #8]	; (80054dc <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
 80054d2:	4a03      	ldr	r2, [pc, #12]	; (80054e0 <z_bss_zero+0x10>)
 80054d4:	2100      	movs	r1, #0
 80054d6:	1a12      	subs	r2, r2, r0
 80054d8:	f003 b841 	b.w	800855e <memset>
 80054dc:	20000280 	.word	0x20000280
 80054e0:	20002034 	.word	0x20002034

080054e4 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 80054e4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 80054e6:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <bg_thread_main+0x34>)
 80054e8:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80054ea:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 80054ec:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80054ee:	f7ff ff2f 	bl	8005350 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 80054f2:	f000 ff57 	bl	80063a4 <boot_banner>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
 80054f6:	f7fd ff37 	bl	8003368 <__do_global_ctors_aux>
	__do_init_array_aux();
 80054fa:	f7fd ff27 	bl	800334c <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 80054fe:	2003      	movs	r0, #3
 8005500:	f7ff ff26 	bl	8005350 <z_sys_init_run_level>

	z_init_static_threads();
 8005504:	f000 f944 	bl	8005790 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
 8005508:	f7fd f89e 	bl	8002648 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800550c:	4a03      	ldr	r2, [pc, #12]	; (800551c <bg_thread_main+0x38>)
 800550e:	7b13      	ldrb	r3, [r2, #12]
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8005516:	bd08      	pop	{r3, pc}
 8005518:	2000202d 	.word	0x2000202d
 800551c:	20000500 	.word	0x20000500

08005520 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8005520:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005524:	b0b7      	sub	sp, #220	; 0xdc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 8005526:	f7fd f9ed 	bl	8002904 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800552a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800562c <z_cstart+0x10c>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800552e:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8005532:	4d36      	ldr	r5, [pc, #216]	; (800560c <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
 8005534:	4e36      	ldr	r6, [pc, #216]	; (8005610 <z_cstart+0xf0>)
 8005536:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8005538:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8005630 <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
 800553c:	4f35      	ldr	r7, [pc, #212]	; (8005614 <z_cstart+0xf4>)
 800553e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005542:	2400      	movs	r4, #0
 8005544:	616b      	str	r3, [r5, #20]
 8005546:	23f0      	movs	r3, #240	; 0xf0
 8005548:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800554c:	77ec      	strb	r4, [r5, #31]
 800554e:	762c      	strb	r4, [r5, #24]
 8005550:	766c      	strb	r4, [r5, #25]
 8005552:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8005554:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005556:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800555a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800555c:	f7fe fe24 	bl	80041a8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8005560:	f7fe fb1e 	bl	8003ba0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8005564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005568:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800556a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800556c:	f7fe ff0a 	bl	8004384 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8005570:	4d29      	ldr	r5, [pc, #164]	; (8005618 <z_cstart+0xf8>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8005572:	f7fe fe4d 	bl	8004210 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8005576:	f240 1301 	movw	r3, #257	; 0x101
 800557a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 800557e:	ab06      	add	r3, sp, #24
 8005580:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
 8005582:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8005586:	f002 fcd9 	bl	8007f3c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800558a:	4620      	mov	r0, r4
 800558c:	f7ff fee0 	bl	8005350 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8005590:	2001      	movs	r0, #1
 8005592:	f7ff fedd 	bl	8005350 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8005596:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
 800559a:	f000 fbcf 	bl	8005d3c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800559e:	4b1f      	ldr	r3, [pc, #124]	; (800561c <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
 80055a0:	622e      	str	r6, [r5, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80055a2:	491f      	ldr	r1, [pc, #124]	; (8005620 <z_cstart+0x100>)
 80055a4:	9305      	str	r3, [sp, #20]
 80055a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055aa:	4653      	mov	r3, sl
 80055ac:	e9cd 4b03 	strd	r4, fp, [sp, #12]
 80055b0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80055b4:	9400      	str	r4, [sp, #0]
 80055b6:	4630      	mov	r0, r6
 80055b8:	f000 f88c 	bl	80056d4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80055bc:	7b73      	ldrb	r3, [r6, #13]
 80055be:	4680      	mov	r8, r0
 80055c0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 80055c4:	4630      	mov	r0, r6
 80055c6:	7373      	strb	r3, [r6, #13]
 80055c8:	f002 fe28 	bl	800821c <z_ready_thread>
	z_setup_new_thread(thread, stack,
 80055cc:	230f      	movs	r3, #15
 80055ce:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80055d2:	4914      	ldr	r1, [pc, #80]	; (8005624 <z_cstart+0x104>)
 80055d4:	4b14      	ldr	r3, [pc, #80]	; (8005628 <z_cstart+0x108>)
 80055d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80055da:	e9cd b404 	strd	fp, r4, [sp, #16]
 80055de:	e9cd 5400 	strd	r5, r4, [sp]
 80055e2:	4638      	mov	r0, r7
 80055e4:	f000 f876 	bl	80056d4 <z_setup_new_thread>
 80055e8:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 80055ea:	60ef      	str	r7, [r5, #12]
 80055ec:	f023 0304 	bic.w	r3, r3, #4
 80055f0:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 80055f2:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
 80055f6:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
 80055fa:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
 80055fc:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8005600:	4652      	mov	r2, sl
 8005602:	4641      	mov	r1, r8
 8005604:	4630      	mov	r0, r6
 8005606:	f7fe faa9 	bl	8003b5c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800560a:	bf00      	nop
 800560c:	e000ed00 	.word	0xe000ed00
 8005610:	20000500 	.word	0x20000500
 8005614:	20000440 	.word	0x20000440
 8005618:	20001918 	.word	0x20001918
 800561c:	0800a207 	.word	0x0800a207
 8005620:	20003480 	.word	0x20003480
 8005624:	20003900 	.word	0x20003900
 8005628:	08008005 	.word	0x08008005
 800562c:	20004300 	.word	0x20004300
 8005630:	080054e5 	.word	0x080054e5

08005634 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 8005634:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8005636:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <init_mem_slab_module+0x3c>)
 8005638:	4c0e      	ldr	r4, [pc, #56]	; (8005674 <init_mem_slab_module+0x40>)
 800563a:	42a3      	cmp	r3, r4
 800563c:	d301      	bcc.n	8005642 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
 800563e:	2000      	movs	r0, #0
	return rc;
}
 8005640:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8005642:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005646:	ea41 0200 	orr.w	r2, r1, r0
 800564a:	f012 0203 	ands.w	r2, r2, #3
 800564e:	d10b      	bne.n	8005668 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 8005650:	68dd      	ldr	r5, [r3, #12]
	slab->free_list = NULL;
 8005652:	619a      	str	r2, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 8005654:	42aa      	cmp	r2, r5
 8005656:	d101      	bne.n	800565c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8005658:	3320      	adds	r3, #32
 800565a:	e7ee      	b.n	800563a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 800565c:	699e      	ldr	r6, [r3, #24]
 800565e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 8005660:	3201      	adds	r2, #1
		slab->free_list = p;
 8005662:	6199      	str	r1, [r3, #24]
		p += slab->block_size;
 8005664:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 8005666:	e7f5      	b.n	8005654 <init_mem_slab_module+0x20>
	return rc;
 8005668:	f06f 0015 	mvn.w	r0, #21
 800566c:	e7e8      	b.n	8005640 <init_mem_slab_module+0xc>
 800566e:	bf00      	nop
 8005670:	2000022c 	.word	0x2000022c
 8005674:	2000022c 	.word	0x2000022c

08005678 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 8005678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800567a:	460c      	mov	r4, r1
	__asm__ volatile(
 800567c:	f04f 0510 	mov.w	r5, #16
 8005680:	f3ef 8111 	mrs	r1, BASEPRI
 8005684:	f385 8811 	msr	BASEPRI, r5
 8005688:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 800568c:	6985      	ldr	r5, [r0, #24]
 800568e:	b15d      	cbz	r5, 80056a8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
 8005690:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 8005692:	682b      	ldr	r3, [r5, #0]
 8005694:	6183      	str	r3, [r0, #24]
		slab->num_used++;
 8005696:	69c3      	ldr	r3, [r0, #28]
 8005698:	3301      	adds	r3, #1
 800569a:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 800569c:	2000      	movs	r0, #0
	__asm__ volatile(
 800569e:	f381 8811 	msr	BASEPRI, r1
 80056a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
 80056a6:	e011      	b.n	80056cc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 80056a8:	ea52 0c03 	orrs.w	ip, r2, r3
 80056ac:	d103      	bne.n	80056b6 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
 80056ae:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
 80056b0:	f06f 000b 	mvn.w	r0, #11
 80056b4:	e7f3      	b.n	800569e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 80056b6:	e9cd 2300 	strd	r2, r3, [sp]
 80056ba:	4602      	mov	r2, r0
 80056bc:	3008      	adds	r0, #8
 80056be:	f000 fa0d 	bl	8005adc <z_pend_curr>
		if (result == 0) {
 80056c2:	b918      	cbnz	r0, 80056cc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <k_mem_slab_alloc+0x58>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	6023      	str	r3, [r4, #0]
}
 80056cc:	b003      	add	sp, #12
 80056ce:	bd30      	pop	{r4, r5, pc}
 80056d0:	20001918 	.word	0x20001918

080056d4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 80056d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 80056d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80056da:	7306      	strb	r6, [r0, #12]
{
 80056dc:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80056de:	3207      	adds	r2, #7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 80056e0:	f100 0558 	add.w	r5, r0, #88	; 0x58
 80056e4:	f022 0207 	bic.w	r2, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
 80056e8:	2604      	movs	r6, #4

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 80056ea:	3720      	adds	r7, #32
 80056ec:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	new_thread->stack_info.size = stack_buf_size;
 80056f0:	e9c0 7219 	strd	r7, r2, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 80056f4:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
 80056f6:	7346      	strb	r6, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80056f8:	f102 0820 	add.w	r8, r2, #32

	thread_base->prio = priority;
 80056fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80056fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8005700:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8005702:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
 8005706:	7386      	strb	r6, [r0, #14]

	thread_base->sched_locked = 0U;
 8005708:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 800570a:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800570c:	9202      	str	r2, [sp, #8]
 800570e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005710:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8005712:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8005714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005716:	9200      	str	r2, [sp, #0]
 8005718:	4642      	mov	r2, r8
{
 800571a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800571c:	f7fe f998 	bl	8003a50 <arch_new_thread>
	if (!_current) {
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 8005722:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	b103      	cbz	r3, 800572a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 800572a:	6723      	str	r3, [r4, #112]	; 0x70
}
 800572c:	4640      	mov	r0, r8
 800572e:	b004      	add	sp, #16
 8005730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005734:	20001918 	.word	0x20001918

08005738 <z_impl_k_thread_create>:
{
 8005738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800573a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800573c:	2700      	movs	r7, #0
 800573e:	9705      	str	r7, [sp, #20]
 8005740:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8005742:	9704      	str	r7, [sp, #16]
 8005744:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005746:	9703      	str	r7, [sp, #12]
 8005748:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800574a:	9702      	str	r7, [sp, #8]
{
 800574c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8005750:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005752:	9701      	str	r7, [sp, #4]
 8005754:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005756:	9700      	str	r7, [sp, #0]
{
 8005758:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800575a:	f7ff ffbb 	bl	80056d4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800575e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005762:	bf08      	it	eq
 8005764:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8005768:	d005      	beq.n	8005776 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800576a:	ea55 0306 	orrs.w	r3, r5, r6
 800576e:	d105      	bne.n	800577c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 8005770:	4620      	mov	r0, r4
 8005772:	f000 fac5 	bl	8005d00 <z_sched_start>
}
 8005776:	4620      	mov	r0, r4
 8005778:	b007      	add	sp, #28
 800577a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800577c:	4903      	ldr	r1, [pc, #12]	; (800578c <z_impl_k_thread_create+0x54>)
 800577e:	4632      	mov	r2, r6
 8005780:	462b      	mov	r3, r5
 8005782:	f104 0018 	add.w	r0, r4, #24
 8005786:	f000 fc43 	bl	8006010 <z_add_timeout>
 800578a:	e7f4      	b.n	8005776 <z_impl_k_thread_create+0x3e>
 800578c:	0800823d 	.word	0x0800823d

08005790 <z_init_static_threads>:
{
 8005790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005792:	4c22      	ldr	r4, [pc, #136]	; (800581c <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8005794:	4d22      	ldr	r5, [pc, #136]	; (8005820 <z_init_static_threads+0x90>)
{
 8005796:	b087      	sub	sp, #28
 8005798:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800579a:	42ae      	cmp	r6, r5
 800579c:	f104 0430 	add.w	r4, r4, #48	; 0x30
 80057a0:	d30b      	bcc.n	80057ba <z_init_static_threads+0x2a>
	k_sched_lock();
 80057a2:	f000 f929 	bl	80059f8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80057a6:	4c1d      	ldr	r4, [pc, #116]	; (800581c <z_init_static_threads+0x8c>)
 80057a8:	4f1e      	ldr	r7, [pc, #120]	; (8005824 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
 80057aa:	260a      	movs	r6, #10
 80057ac:	42ac      	cmp	r4, r5
 80057ae:	d320      	bcc.n	80057f2 <z_init_static_threads+0x62>
}
 80057b0:	b007      	add	sp, #28
 80057b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80057b6:	f000 b9d7 	b.w	8005b68 <k_sched_unlock>
		z_setup_new_thread(
 80057ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80057be:	9305      	str	r3, [sp, #20]
 80057c0:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80057c4:	9304      	str	r3, [sp, #16]
 80057c6:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80057ca:	9303      	str	r3, [sp, #12]
 80057cc:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80057d0:	9302      	str	r3, [sp, #8]
 80057d2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80057e2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80057e6:	f7ff ff75 	bl	80056d4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80057ea:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80057ee:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80057f0:	e7d2      	b.n	8005798 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80057f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80057f4:	1c53      	adds	r3, r2, #1
 80057f6:	d009      	beq.n	800580c <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 80057f8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80057fc:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8005800:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8005804:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8005806:	d103      	bne.n	8005810 <z_init_static_threads+0x80>
	z_sched_start(thread);
 8005808:	f000 fa7a 	bl	8005d00 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800580c:	3430      	adds	r4, #48	; 0x30
 800580e:	e7cd      	b.n	80057ac <z_init_static_threads+0x1c>
 8005810:	4639      	mov	r1, r7
 8005812:	3018      	adds	r0, #24
 8005814:	f000 fbfc 	bl	8006010 <z_add_timeout>
 8005818:	e7f8      	b.n	800580c <z_init_static_threads+0x7c>
 800581a:	bf00      	nop
 800581c:	2000022c 	.word	0x2000022c
 8005820:	2000022c 	.word	0x2000022c
 8005824:	0800823d 	.word	0x0800823d

08005828 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
 8005828:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
 800582a:	f04f 0110 	mov.w	r1, #16
 800582e:	f3ef 8511 	mrs	r5, BASEPRI
 8005832:	f381 8811 	msr	BASEPRI, r1
 8005836:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 800583a:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 800583c:	b19c      	cbz	r4, 8005866 <z_impl_k_queue_get+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800583e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8005840:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8005842:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8005846:	4294      	cmp	r4, r2
	list->head = node;
 8005848:	6003      	str	r3, [r0, #0]
	list->tail = node;
 800584a:	bf08      	it	eq
 800584c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 800584e:	2101      	movs	r1, #1
 8005850:	4620      	mov	r0, r4
 8005852:	f002 fc44 	bl	80080de <z_queue_node_peek>
 8005856:	4604      	mov	r4, r0
	__asm__ volatile(
 8005858:	f385 8811 	msr	BASEPRI, r5
 800585c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
 8005860:	4620      	mov	r0, r4
 8005862:	b003      	add	sp, #12
 8005864:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8005866:	ea52 0103 	orrs.w	r1, r2, r3
 800586a:	d0f5      	beq.n	8005858 <z_impl_k_queue_get+0x30>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
 800586c:	e9cd 2300 	strd	r2, r3, [sp]
 8005870:	4629      	mov	r1, r5
 8005872:	f100 020c 	add.w	r2, r0, #12
 8005876:	3008      	adds	r0, #8
 8005878:	f000 f930 	bl	8005adc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
 800587c:	2800      	cmp	r0, #0
 800587e:	d1ef      	bne.n	8005860 <z_impl_k_queue_get+0x38>
 8005880:	4b01      	ldr	r3, [pc, #4]	; (8005888 <z_impl_k_queue_get+0x60>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	695c      	ldr	r4, [r3, #20]
 8005886:	e7eb      	b.n	8005860 <z_impl_k_queue_get+0x38>
 8005888:	20001918 	.word	0x20001918

0800588c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4604      	mov	r4, r0
	__asm__ volatile(
 8005890:	f04f 0310 	mov.w	r3, #16
 8005894:	f3ef 8511 	mrs	r5, BASEPRI
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 80058a0:	f002 fd03 	bl	80082aa <z_unpend_first_thread>

	if (thread != NULL) {
 80058a4:	b148      	cbz	r0, 80058ba <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80058a6:	2200      	movs	r2, #0
 80058a8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 80058aa:	f002 fcb7 	bl	800821c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 80058ae:	4629      	mov	r1, r5
 80058b0:	4805      	ldr	r0, [pc, #20]	; (80058c8 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 80058b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 80058b6:	f000 b88d 	b.w	80059d4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80058ba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80058be:	429a      	cmp	r2, r3
 80058c0:	bf18      	it	ne
 80058c2:	3301      	addne	r3, #1
 80058c4:	60a3      	str	r3, [r4, #8]
}
 80058c6:	e7f2      	b.n	80058ae <z_impl_k_sem_give+0x22>
 80058c8:	2000202e 	.word	0x2000202e

080058cc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 80058cc:	b513      	push	{r0, r1, r4, lr}
 80058ce:	f04f 0410 	mov.w	r4, #16
 80058d2:	f3ef 8111 	mrs	r1, BASEPRI
 80058d6:	f384 8811 	msr	BASEPRI, r4
 80058da:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 80058de:	6884      	ldr	r4, [r0, #8]
 80058e0:	b144      	cbz	r4, 80058f4 <z_impl_k_sem_take+0x28>
		sem->count--;
 80058e2:	3c01      	subs	r4, #1
 80058e4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 80058e6:	f381 8811 	msr	BASEPRI, r1
 80058ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 80058ee:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 80058f0:	b002      	add	sp, #8
 80058f2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80058f4:	ea52 0403 	orrs.w	r4, r2, r3
 80058f8:	d106      	bne.n	8005908 <z_impl_k_sem_take+0x3c>
 80058fa:	f381 8811 	msr	BASEPRI, r1
 80058fe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8005902:	f06f 000f 	mvn.w	r0, #15
 8005906:	e7f3      	b.n	80058f0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8005908:	e9cd 2300 	strd	r2, r3, [sp]
 800590c:	4602      	mov	r2, r0
 800590e:	4802      	ldr	r0, [pc, #8]	; (8005918 <z_impl_k_sem_take+0x4c>)
 8005910:	f000 f8e4 	bl	8005adc <z_pend_curr>
	return ret;
 8005914:	e7ec      	b.n	80058f0 <z_impl_k_sem_take+0x24>
 8005916:	bf00      	nop
 8005918:	2000202e 	.word	0x2000202e

0800591c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	4604      	mov	r4, r0
	__asm__ volatile(
 8005920:	f04f 0310 	mov.w	r3, #16
 8005924:	f3ef 8511 	mrs	r5, BASEPRI
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
 8005934:	4620      	mov	r0, r4
 8005936:	f002 fcb8 	bl	80082aa <z_unpend_first_thread>
		if (thread == NULL) {
 800593a:	b118      	cbz	r0, 8005944 <z_impl_k_sem_reset+0x28>
 800593c:	6786      	str	r6, [r0, #120]	; 0x78
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 800593e:	f002 fc6d 	bl	800821c <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 8005942:	e7f7      	b.n	8005934 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
 8005944:	60a0      	str	r0, [r4, #8]

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 8005946:	4629      	mov	r1, r5
 8005948:	4802      	ldr	r0, [pc, #8]	; (8005954 <z_impl_k_sem_reset+0x38>)
}
 800594a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 800594e:	f000 b841 	b.w	80059d4 <z_reschedule>
 8005952:	bf00      	nop
 8005954:	2000202e 	.word	0x2000202e

08005958 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8005958:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 800595a:	4c08      	ldr	r4, [pc, #32]	; (800597c <z_reset_time_slice+0x24>)
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	b15b      	cbz	r3, 8005978 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8005960:	f7fd ffa8 	bl	80038b4 <sys_clock_elapsed>
 8005964:	6822      	ldr	r2, [r4, #0]
 8005966:	4906      	ldr	r1, [pc, #24]	; (8005980 <z_reset_time_slice+0x28>)
 8005968:	4410      	add	r0, r2
 800596a:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
 800596c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
 8005970:	2100      	movs	r1, #0
 8005972:	4610      	mov	r0, r2
 8005974:	f002 bcd7 	b.w	8008326 <z_set_timeout_expiry>
}
 8005978:	bd10      	pop	{r4, pc}
 800597a:	bf00      	nop
 800597c:	20001950 	.word	0x20001950
 8005980:	20001918 	.word	0x20001918

08005984 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8005984:	b510      	push	{r4, lr}
 8005986:	f04f 0310 	mov.w	r3, #16
 800598a:	f3ef 8411 	mrs	r4, BASEPRI
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <k_sched_time_slice_set+0x44>)
 8005998:	2200      	movs	r2, #0
 800599a:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800599c:	4290      	cmp	r0, r2
			return ((uint32_t)t) * (to_hz / from_hz);
 800599e:	f04f 030a 	mov.w	r3, #10
 80059a2:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <k_sched_time_slice_set+0x48>)
 80059a4:	fb00 f303 	mul.w	r3, r0, r3
 80059a8:	dc09      	bgt.n	80059be <k_sched_time_slice_set+0x3a>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
 80059aa:	6013      	str	r3, [r2, #0]
		}
		slice_max_prio = prio;
 80059ac:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <k_sched_time_slice_set+0x4c>)
 80059ae:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 80059b0:	f7ff ffd2 	bl	8005958 <z_reset_time_slice>
	__asm__ volatile(
 80059b4:	f384 8811 	msr	BASEPRI, r4
 80059b8:	f3bf 8f6f 	isb	sy
	}
}
 80059bc:	bd10      	pop	{r4, pc}
			slice_time = MAX(2, slice_time);
 80059be:	2b02      	cmp	r3, #2
 80059c0:	bfb8      	it	lt
 80059c2:	2302      	movlt	r3, #2
 80059c4:	e7f1      	b.n	80059aa <k_sched_time_slice_set+0x26>
 80059c6:	bf00      	nop
 80059c8:	20001918 	.word	0x20001918
 80059cc:	20001950 	.word	0x20001950
 80059d0:	2000194c 	.word	0x2000194c

080059d4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80059d4:	b949      	cbnz	r1, 80059ea <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d6:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 80059da:	b930      	cbnz	r0, 80059ea <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 80059de:	6a1a      	ldr	r2, [r3, #32]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d001      	beq.n	80059ea <z_reschedule+0x16>
	ret = arch_swap(key);
 80059e6:	f7fd bf99 	b.w	800391c <arch_swap>
 80059ea:	f381 8811 	msr	BASEPRI, r1
 80059ee:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 80059f2:	4770      	bx	lr
 80059f4:	20001918 	.word	0x20001918

080059f8 <k_sched_lock>:
	__asm__ volatile(
 80059f8:	f04f 0310 	mov.w	r3, #16
 80059fc:	f3ef 8111 	mrs	r1, BASEPRI
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8005a08:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <k_sched_lock+0x24>)
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	7bd3      	ldrb	r3, [r2, #15]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8005a12:	f381 8811 	msr	BASEPRI, r1
 8005a16:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8005a1a:	4770      	bx	lr
 8005a1c:	20001918 	.word	0x20001918

08005a20 <update_cache>:
{
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8005a24:	480c      	ldr	r0, [pc, #48]	; (8005a58 <update_cache+0x38>)
 8005a26:	4d0d      	ldr	r5, [pc, #52]	; (8005a5c <update_cache+0x3c>)
 8005a28:	f002 fbc8 	bl	80081bc <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	b900      	cbnz	r0, 8005a32 <update_cache+0x12>
 8005a30:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8005a32:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8005a34:	b94a      	cbnz	r2, 8005a4a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 8005a36:	7b5a      	ldrb	r2, [r3, #13]
 8005a38:	06d2      	lsls	r2, r2, #27
 8005a3a:	d106      	bne.n	8005a4a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8005a3c:	69a2      	ldr	r2, [r4, #24]
 8005a3e:	b922      	cbnz	r2, 8005a4a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8005a40:	89da      	ldrh	r2, [r3, #14]
 8005a42:	2a7f      	cmp	r2, #127	; 0x7f
 8005a44:	d901      	bls.n	8005a4a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 8005a46:	622b      	str	r3, [r5, #32]
}
 8005a48:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8005a4a:	429c      	cmp	r4, r3
 8005a4c:	d001      	beq.n	8005a52 <update_cache+0x32>
			z_reset_time_slice();
 8005a4e:	f7ff ff83 	bl	8005958 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8005a52:	622c      	str	r4, [r5, #32]
}
 8005a54:	e7f8      	b.n	8005a48 <update_cache+0x28>
 8005a56:	bf00      	nop
 8005a58:	2000193c 	.word	0x2000193c
 8005a5c:	20001918 	.word	0x20001918

08005a60 <unready_thread>:
{
 8005a60:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8005a62:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8005a66:	7b43      	ldrb	r3, [r0, #13]
 8005a68:	2a00      	cmp	r2, #0
{
 8005a6a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8005a6c:	da04      	bge.n	8005a78 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8005a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a72:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8005a74:	f002 fb56 	bl	8008124 <sys_dlist_remove>
	update_cache(thread == _current);
 8005a78:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <unready_thread+0x2c>)
 8005a7a:	6898      	ldr	r0, [r3, #8]
 8005a7c:	1a43      	subs	r3, r0, r1
 8005a7e:	4258      	negs	r0, r3
 8005a80:	4158      	adcs	r0, r3
}
 8005a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8005a86:	f7ff bfcb 	b.w	8005a20 <update_cache>
 8005a8a:	bf00      	nop
 8005a8c:	20001918 	.word	0x20001918

08005a90 <pend>:
{
 8005a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a94:	4606      	mov	r6, r0
 8005a96:	4615      	mov	r5, r2
 8005a98:	461c      	mov	r4, r3
	__asm__ volatile(
 8005a9a:	f04f 0310 	mov.w	r3, #16
 8005a9e:	f3ef 8711 	mrs	r7, BASEPRI
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 8005aaa:	f002 fb8d 	bl	80081c8 <add_to_waitq_locked>
	__asm__ volatile(
 8005aae:	f387 8811 	msr	BASEPRI, r7
 8005ab2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8005ab6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005aba:	bf08      	it	eq
 8005abc:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 8005ac0:	d008      	beq.n	8005ad4 <pend+0x44>
 8005ac2:	462a      	mov	r2, r5
 8005ac4:	4623      	mov	r3, r4
 8005ac6:	f106 0018 	add.w	r0, r6, #24
 8005aca:	4903      	ldr	r1, [pc, #12]	; (8005ad8 <pend+0x48>)
}
 8005acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad0:	f000 ba9e 	b.w	8006010 <z_add_timeout>
 8005ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ad8:	0800823d 	.word	0x0800823d

08005adc <z_pend_curr>:
{
 8005adc:	b510      	push	{r4, lr}
	pending_current = _current;
 8005ade:	4b07      	ldr	r3, [pc, #28]	; (8005afc <z_pend_curr+0x20>)
 8005ae0:	6898      	ldr	r0, [r3, #8]
 8005ae2:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <z_pend_curr+0x24>)
{
 8005ae4:	460c      	mov	r4, r1
	pending_current = _current;
 8005ae6:	6018      	str	r0, [r3, #0]
{
 8005ae8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 8005aea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005aee:	f7ff ffcf 	bl	8005a90 <pend>
 8005af2:	4620      	mov	r0, r4
}
 8005af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af8:	f7fd bf10 	b.w	800391c <arch_swap>
 8005afc:	20001918 	.word	0x20001918
 8005b00:	20001948 	.word	0x20001948

08005b04 <z_impl_k_thread_suspend>:
{
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8005b08:	3018      	adds	r0, #24
 8005b0a:	f002 fbf6 	bl	80082fa <z_abort_timeout>
	__asm__ volatile(
 8005b0e:	f04f 0310 	mov.w	r3, #16
 8005b12:	f3ef 8611 	mrs	r6, BASEPRI
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8005b1e:	f994 200d 	ldrsb.w	r2, [r4, #13]
 8005b22:	7b63      	ldrb	r3, [r4, #13]
 8005b24:	2a00      	cmp	r2, #0
 8005b26:	da05      	bge.n	8005b34 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8005b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b2c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f002 faf8 	bl	8008124 <sys_dlist_remove>
		update_cache(thread == _current);
 8005b34:	4d0b      	ldr	r5, [pc, #44]	; (8005b64 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8005b36:	7b63      	ldrb	r3, [r4, #13]
 8005b38:	68a8      	ldr	r0, [r5, #8]
 8005b3a:	f043 0310 	orr.w	r3, r3, #16
 8005b3e:	7363      	strb	r3, [r4, #13]
 8005b40:	1b03      	subs	r3, r0, r4
 8005b42:	4258      	negs	r0, r3
 8005b44:	4158      	adcs	r0, r3
 8005b46:	f7ff ff6b 	bl	8005a20 <update_cache>
	__asm__ volatile(
 8005b4a:	f386 8811 	msr	BASEPRI, r6
 8005b4e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8005b52:	68ab      	ldr	r3, [r5, #8]
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	d103      	bne.n	8005b60 <z_impl_k_thread_suspend+0x5c>
}
 8005b58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8005b5c:	f002 bb24 	b.w	80081a8 <z_reschedule_unlocked>
}
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
 8005b62:	bf00      	nop
 8005b64:	20001918 	.word	0x20001918

08005b68 <k_sched_unlock>:
{
 8005b68:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005b6a:	f04f 0310 	mov.w	r3, #16
 8005b6e:	f3ef 8411 	mrs	r4, BASEPRI
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8005b7a:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <k_sched_unlock+0x34>)
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	7bd3      	ldrb	r3, [r2, #15]
 8005b80:	3301      	adds	r3, #1
 8005b82:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8005b84:	2000      	movs	r0, #0
 8005b86:	f7ff ff4b 	bl	8005a20 <update_cache>
	__asm__ volatile(
 8005b8a:	f384 8811 	msr	BASEPRI, r4
 8005b8e:	f3bf 8f6f 	isb	sy
}
 8005b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8005b96:	f002 bb07 	b.w	80081a8 <z_reschedule_unlocked>
 8005b9a:	bf00      	nop
 8005b9c:	20001918 	.word	0x20001918

08005ba0 <move_thread_to_end_of_prio_q>:
{
 8005ba0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8005ba2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8005ba6:	7b43      	ldrb	r3, [r0, #13]
 8005ba8:	2a00      	cmp	r2, #0
{
 8005baa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8005bac:	da04      	bge.n	8005bb8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8005bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8005bb4:	f002 fab6 	bl	8008124 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8005bb8:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8005bba:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <move_thread_to_end_of_prio_q+0x70>)
 8005bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bc0:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8005bc2:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005bc6:	f102 0524 	add.w	r5, r2, #36	; 0x24
 8005bca:	42ab      	cmp	r3, r5
 8005bcc:	d01b      	beq.n	8005c06 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005bce:	b1d3      	cbz	r3, 8005c06 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 8005bd0:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8005bd4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 8005bd8:	4286      	cmp	r6, r0
 8005bda:	d00f      	beq.n	8005bfc <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 8005bdc:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8005bde:	2800      	cmp	r0, #0
 8005be0:	dd0c      	ble.n	8005bfc <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8005be2:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8005be4:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8005be8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8005bea:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8005bec:	6890      	ldr	r0, [r2, #8]
 8005bee:	1a43      	subs	r3, r0, r1
 8005bf0:	4258      	negs	r0, r3
}
 8005bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8005bf6:	4158      	adcs	r0, r3
 8005bf8:	f7ff bf12 	b.w	8005a20 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8005bfc:	42a3      	cmp	r3, r4
 8005bfe:	d002      	beq.n	8005c06 <move_thread_to_end_of_prio_q+0x66>
 8005c00:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e6      	bne.n	8005bd4 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 8005c06:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 8005c0a:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8005c0c:	6291      	str	r1, [r2, #40]	; 0x28
}
 8005c0e:	e7ed      	b.n	8005bec <move_thread_to_end_of_prio_q+0x4c>
 8005c10:	20001918 	.word	0x20001918

08005c14 <z_time_slice>:
{
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4601      	mov	r1, r0
	__asm__ volatile(
 8005c18:	f04f 0310 	mov.w	r3, #16
 8005c1c:	f3ef 8411 	mrs	r4, BASEPRI
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8005c28:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <z_time_slice+0x6c>)
 8005c2a:	4a16      	ldr	r2, [pc, #88]	; (8005c84 <z_time_slice+0x70>)
 8005c2c:	6898      	ldr	r0, [r3, #8]
 8005c2e:	6815      	ldr	r5, [r2, #0]
 8005c30:	42a8      	cmp	r0, r5
 8005c32:	d106      	bne.n	8005c42 <z_time_slice+0x2e>
			z_reset_time_slice();
 8005c34:	f7ff fe90 	bl	8005958 <z_reset_time_slice>
	__asm__ volatile(
 8005c38:	f384 8811 	msr	BASEPRI, r4
 8005c3c:	f3bf 8f6f 	isb	sy
}
 8005c40:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8005c42:	2500      	movs	r5, #0
 8005c44:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8005c46:	4a10      	ldr	r2, [pc, #64]	; (8005c88 <z_time_slice+0x74>)
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	b1ba      	cbz	r2, 8005c7c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8005c4c:	89c2      	ldrh	r2, [r0, #14]
 8005c4e:	2a7f      	cmp	r2, #127	; 0x7f
 8005c50:	d814      	bhi.n	8005c7c <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
 8005c52:	7b42      	ldrb	r2, [r0, #13]
 8005c54:	06d2      	lsls	r2, r2, #27
 8005c56:	d111      	bne.n	8005c7c <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8005c58:	4a0c      	ldr	r2, [pc, #48]	; (8005c8c <z_time_slice+0x78>)
 8005c5a:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8005c5e:	6812      	ldr	r2, [r2, #0]
 8005c60:	4295      	cmp	r5, r2
 8005c62:	db0b      	blt.n	8005c7c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8005c64:	4a0a      	ldr	r2, [pc, #40]	; (8005c90 <z_time_slice+0x7c>)
 8005c66:	4290      	cmp	r0, r2
 8005c68:	d008      	beq.n	8005c7c <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	428a      	cmp	r2, r1
 8005c6e:	dc02      	bgt.n	8005c76 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
 8005c70:	f7ff ff96 	bl	8005ba0 <move_thread_to_end_of_prio_q>
 8005c74:	e7de      	b.n	8005c34 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
 8005c76:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
 8005c78:	611a      	str	r2, [r3, #16]
 8005c7a:	e7dd      	b.n	8005c38 <z_time_slice+0x24>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	e7fb      	b.n	8005c78 <z_time_slice+0x64>
 8005c80:	20001918 	.word	0x20001918
 8005c84:	20001948 	.word	0x20001948
 8005c88:	20001950 	.word	0x20001950
 8005c8c:	2000194c 	.word	0x2000194c
 8005c90:	20000440 	.word	0x20000440

08005c94 <ready_thread>:
{
 8005c94:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8005c96:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8005c9a:	7b43      	ldrb	r3, [r0, #13]
 8005c9c:	2a00      	cmp	r2, #0
 8005c9e:	db2a      	blt.n	8005cf6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8005ca0:	06da      	lsls	r2, r3, #27
 8005ca2:	d128      	bne.n	8005cf6 <ready_thread+0x62>
 8005ca4:	6982      	ldr	r2, [r0, #24]
 8005ca6:	bb32      	cbnz	r2, 8005cf6 <ready_thread+0x62>
	return list->head == list;
 8005ca8:	4a14      	ldr	r2, [pc, #80]	; (8005cfc <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8005caa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cae:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 8005cb0:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005cb4:	f102 0524 	add.w	r5, r2, #36	; 0x24
 8005cb8:	42ab      	cmp	r3, r5
 8005cba:	d017      	beq.n	8005cec <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005cbc:	b1b3      	cbz	r3, 8005cec <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 8005cbe:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8005cc2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8005cc6:	428e      	cmp	r6, r1
 8005cc8:	d00b      	beq.n	8005ce2 <ready_thread+0x4e>
		return b2 - b1;
 8005cca:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	dd08      	ble.n	8005ce2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8005cd0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8005cd2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8005cd6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8005cd8:	6058      	str	r0, [r3, #4]
}
 8005cda:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8005cdc:	2000      	movs	r0, #0
 8005cde:	f7ff be9f 	b.w	8005a20 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8005ce2:	42a3      	cmp	r3, r4
 8005ce4:	d002      	beq.n	8005cec <ready_thread+0x58>
 8005ce6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1ea      	bne.n	8005cc2 <ready_thread+0x2e>
	node->prev = tail;
 8005cec:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 8005cf0:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8005cf2:	6290      	str	r0, [r2, #40]	; 0x28
}
 8005cf4:	e7f1      	b.n	8005cda <ready_thread+0x46>
}
 8005cf6:	bc70      	pop	{r4, r5, r6}
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20001918 	.word	0x20001918

08005d00 <z_sched_start>:
{
 8005d00:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005d02:	f04f 0210 	mov.w	r2, #16
 8005d06:	f3ef 8411 	mrs	r4, BASEPRI
 8005d0a:	f382 8811 	msr	BASEPRI, r2
 8005d0e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8005d12:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8005d14:	0751      	lsls	r1, r2, #29
 8005d16:	d404      	bmi.n	8005d22 <z_sched_start+0x22>
	__asm__ volatile(
 8005d18:	f384 8811 	msr	BASEPRI, r4
 8005d1c:	f3bf 8f6f 	isb	sy
}
 8005d20:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005d22:	f022 0204 	bic.w	r2, r2, #4
 8005d26:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8005d28:	f7ff ffb4 	bl	8005c94 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	4802      	ldr	r0, [pc, #8]	; (8005d38 <z_sched_start+0x38>)
}
 8005d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8005d34:	f7ff be4e 	b.w	80059d4 <z_reschedule>
 8005d38:	2000202f 	.word	0x2000202f

08005d3c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8005d3c:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8005d3e:	2100      	movs	r1, #0
 8005d40:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 8005d44:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 8005d48:	4608      	mov	r0, r1
 8005d4a:	f7ff be1b 	b.w	8005984 <k_sched_time_slice_set>
 8005d4e:	bf00      	nop
 8005d50:	20001918 	.word	0x20001918

08005d54 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 8005d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8005d56:	f04f 0310 	mov.w	r3, #16
 8005d5a:	f3ef 8511 	mrs	r5, BASEPRI
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
 8005d66:	491a      	ldr	r1, [pc, #104]	; (8005dd0 <z_impl_k_yield+0x7c>)
 8005d68:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8005d6a:	7b43      	ldrb	r3, [r0, #13]
 8005d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d70:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8005d72:	f002 f9d7 	bl	8008124 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
 8005d76:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8005d78:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 8005d7a:	4608      	mov	r0, r1
 8005d7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d80:	735a      	strb	r2, [r3, #13]
 8005d82:	f850 2f24 	ldr.w	r2, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005d86:	4282      	cmp	r2, r0
 8005d88:	d01c      	beq.n	8005dc4 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005d8a:	b1da      	cbz	r2, 8005dc4 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 8005d8c:	6a8f      	ldr	r7, [r1, #40]	; 0x28
	int32_t b1 = thread_1->base.prio;
 8005d8e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8005d92:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 8005d96:	42a6      	cmp	r6, r4
 8005d98:	d00f      	beq.n	8005dba <z_impl_k_yield+0x66>
		return b2 - b1;
 8005d9a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8005d9c:	2c00      	cmp	r4, #0
 8005d9e:	dd0c      	ble.n	8005dba <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 8005da0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8005da2:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8005da6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8005da8:	6053      	str	r3, [r2, #4]
	update_cache(1);
 8005daa:	2001      	movs	r0, #1
 8005dac:	f7ff fe38 	bl	8005a20 <update_cache>
 8005db0:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8005db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005db6:	f7fd bdb1 	b.w	800391c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8005dba:	42ba      	cmp	r2, r7
 8005dbc:	d002      	beq.n	8005dc4 <z_impl_k_yield+0x70>
 8005dbe:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005dc0:	2a00      	cmp	r2, #0
 8005dc2:	d1e6      	bne.n	8005d92 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 8005dc4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
	node->prev = tail;
 8005dc6:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 8005dca:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8005dcc:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005dce:	e7ec      	b.n	8005daa <z_impl_k_yield+0x56>
 8005dd0:	20001918 	.word	0x20001918

08005dd4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8005dd4:	ea50 0301 	orrs.w	r3, r0, r1
{
 8005dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ddc:	4605      	mov	r5, r0
 8005dde:	460e      	mov	r6, r1
	if (ticks == 0) {
 8005de0:	d103      	bne.n	8005dea <z_tick_sleep+0x16>
	z_impl_k_yield();
 8005de2:	f7ff ffb7 	bl	8005d54 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 8005de6:	2000      	movs	r0, #0
 8005de8:	e033      	b.n	8005e52 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 8005dea:	f06f 0401 	mvn.w	r4, #1
 8005dee:	1a24      	subs	r4, r4, r0
 8005df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005df4:	eb63 0301 	sbc.w	r3, r3, r1
 8005df8:	2c01      	cmp	r4, #1
 8005dfa:	f173 0300 	sbcs.w	r3, r3, #0
 8005dfe:	da02      	bge.n	8005e06 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8005e00:	f002 faac 	bl	800835c <sys_clock_tick_get_32>
 8005e04:	1944      	adds	r4, r0, r5
 8005e06:	f04f 0310 	mov.w	r3, #16
 8005e0a:	f3ef 8811 	mrs	r8, BASEPRI
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8005e16:	4f10      	ldr	r7, [pc, #64]	; (8005e58 <z_tick_sleep+0x84>)
 8005e18:	4b10      	ldr	r3, [pc, #64]	; (8005e5c <z_tick_sleep+0x88>)
 8005e1a:	68b8      	ldr	r0, [r7, #8]
 8005e1c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8005e1e:	f7ff fe1f 	bl	8005a60 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8005e22:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8005e24:	490e      	ldr	r1, [pc, #56]	; (8005e60 <z_tick_sleep+0x8c>)
 8005e26:	462a      	mov	r2, r5
 8005e28:	4633      	mov	r3, r6
 8005e2a:	3018      	adds	r0, #24
 8005e2c:	f000 f8f0 	bl	8006010 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8005e30:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8005e32:	7b53      	ldrb	r3, [r2, #13]
 8005e34:	f043 0310 	orr.w	r3, r3, #16
 8005e38:	7353      	strb	r3, [r2, #13]
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	f7fd fd6e 	bl	800391c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8005e40:	f002 fa8c 	bl	800835c <sys_clock_tick_get_32>
 8005e44:	1a20      	subs	r0, r4, r0
 8005e46:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8005e4a:	2801      	cmp	r0, #1
 8005e4c:	f173 0300 	sbcs.w	r3, r3, #0
 8005e50:	dbc9      	blt.n	8005de6 <z_tick_sleep+0x12>
}
 8005e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e56:	bf00      	nop
 8005e58:	20001918 	.word	0x20001918
 8005e5c:	20001948 	.word	0x20001948
 8005e60:	0800823d 	.word	0x0800823d

08005e64 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8005e64:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8005e68:	bf08      	it	eq
 8005e6a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8005e6e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8005e70:	d106      	bne.n	8005e80 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8005e72:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <z_impl_k_sleep+0x2c>)
 8005e74:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8005e76:	f7ff fe45 	bl	8005b04 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8005e7e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8005e80:	f7ff ffa8 	bl	8005dd4 <z_tick_sleep>
			return t / (from_hz / to_hz);
 8005e84:	220a      	movs	r2, #10
 8005e86:	2300      	movs	r3, #0
 8005e88:	17c1      	asrs	r1, r0, #31
 8005e8a:	f7fa fdbb 	bl	8000a04 <__aeabi_uldivmod>
	return ret;
 8005e8e:	e7f6      	b.n	8005e7e <z_impl_k_sleep+0x1a>
 8005e90:	20001918 	.word	0x20001918

08005e94 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8005e94:	4b01      	ldr	r3, [pc, #4]	; (8005e9c <z_impl_k_current_get+0x8>)
 8005e96:	6898      	ldr	r0, [r3, #8]
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	20001918 	.word	0x20001918

08005ea0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8005ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	f04f 0310 	mov.w	r3, #16
 8005eaa:	f3ef 8611 	mrs	r6, BASEPRI
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8005eb6:	7b43      	ldrb	r3, [r0, #13]
 8005eb8:	071a      	lsls	r2, r3, #28
 8005eba:	d505      	bpl.n	8005ec8 <z_thread_abort+0x28>
	__asm__ volatile(
 8005ebc:	f386 8811 	msr	BASEPRI, r6
 8005ec0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8005ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8005ec8:	f023 0220 	bic.w	r2, r3, #32
 8005ecc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8005ed0:	09d2      	lsrs	r2, r2, #7
 8005ed2:	d120      	bne.n	8005f16 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8005ed4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	b113      	cbz	r3, 8005ee0 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 8005eda:	4620      	mov	r0, r4
 8005edc:	f002 f92a 	bl	8008134 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8005ee0:	f104 0018 	add.w	r0, r4, #24
 8005ee4:	f002 fa09 	bl	80082fa <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8005ee8:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8005eec:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8005ef0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005ef2:	42bd      	cmp	r5, r7
 8005ef4:	d000      	beq.n	8005ef8 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8005ef6:	b9b5      	cbnz	r5, 8005f26 <z_thread_abort+0x86>
		update_cache(1);
 8005ef8:	2001      	movs	r0, #1
 8005efa:	f7ff fd91 	bl	8005a20 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8005efe:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <z_thread_abort+0xa0>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	42a3      	cmp	r3, r4
 8005f04:	d1da      	bne.n	8005ebc <z_thread_abort+0x1c>
 8005f06:	f3ef 8305 	mrs	r3, IPSR
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1d6      	bne.n	8005ebc <z_thread_abort+0x1c>
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f7fd fd04 	bl	800391c <arch_swap>
	return ret;
 8005f14:	e7d2      	b.n	8005ebc <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8005f16:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8005f1a:	f043 0308 	orr.w	r3, r3, #8
 8005f1e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8005f20:	f002 f900 	bl	8008124 <sys_dlist_remove>
}
 8005f24:	e7d7      	b.n	8005ed6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 8005f26:	4628      	mov	r0, r5
 8005f28:	f002 f904 	bl	8008134 <unpend_thread_no_timeout>
 8005f2c:	f105 0018 	add.w	r0, r5, #24
 8005f30:	f002 f9e3 	bl	80082fa <z_abort_timeout>
 8005f34:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f7ff feab 	bl	8005c94 <ready_thread>
 8005f3e:	e7d7      	b.n	8005ef0 <z_thread_abort+0x50>
 8005f40:	20001918 	.word	0x20001918

08005f44 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8005f44:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8005f46:	4806      	ldr	r0, [pc, #24]	; (8005f60 <z_data_copy+0x1c>)
 8005f48:	4a06      	ldr	r2, [pc, #24]	; (8005f64 <z_data_copy+0x20>)
 8005f4a:	4907      	ldr	r1, [pc, #28]	; (8005f68 <z_data_copy+0x24>)
 8005f4c:	1a12      	subs	r2, r2, r0
 8005f4e:	f002 faf8 	bl	8008542 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8005f52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005f56:	4a05      	ldr	r2, [pc, #20]	; (8005f6c <z_data_copy+0x28>)
 8005f58:	4905      	ldr	r1, [pc, #20]	; (8005f70 <z_data_copy+0x2c>)
 8005f5a:	4806      	ldr	r0, [pc, #24]	; (8005f74 <z_data_copy+0x30>)
 8005f5c:	f002 baf1 	b.w	8008542 <memcpy>
 8005f60:	20000000 	.word	0x20000000
 8005f64:	2000027c 	.word	0x2000027c
 8005f68:	0800a354 	.word	0x0800a354
 8005f6c:	00000000 	.word	0x00000000
 8005f70:	0800a354 	.word	0x0800a354
 8005f74:	20000000 	.word	0x20000000

08005f78 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8005f78:	4b03      	ldr	r3, [pc, #12]	; (8005f88 <elapsed+0x10>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	b90b      	cbnz	r3, 8005f82 <elapsed+0xa>
 8005f7e:	f7fd bc99 	b.w	80038b4 <sys_clock_elapsed>
}
 8005f82:	2000      	movs	r0, #0
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	20001954 	.word	0x20001954

08005f8c <next_timeout>:
	return list->head == list;
 8005f8c:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005f92:	429c      	cmp	r4, r3
 8005f94:	bf08      	it	eq
 8005f96:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8005f98:	f7ff ffee 	bl	8005f78 <elapsed>
 8005f9c:	4602      	mov	r2, r0
	int32_t ret = to == NULL ? MAX_WAIT
 8005f9e:	b16c      	cbz	r4, 8005fbc <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8005fa0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8005fa4:	1a80      	subs	r0, r0, r2
 8005fa6:	eb61 72e2 	sbc.w	r2, r1, r2, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8005faa:	2801      	cmp	r0, #1
 8005fac:	f172 0300 	sbcs.w	r3, r2, #0
 8005fb0:	db0d      	blt.n	8005fce <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8005fb2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8005fb6:	f172 0300 	sbcs.w	r3, r2, #0
 8005fba:	db01      	blt.n	8005fc0 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
 8005fbc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8005fc0:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <next_timeout+0x4c>)
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	b113      	cbz	r3, 8005fcc <next_timeout+0x40>
 8005fc6:	4298      	cmp	r0, r3
 8005fc8:	bfa8      	it	ge
 8005fca:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8005fcc:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8005fce:	2000      	movs	r0, #0
 8005fd0:	e7f6      	b.n	8005fc0 <next_timeout+0x34>
 8005fd2:	bf00      	nop
 8005fd4:	200000a4 	.word	0x200000a4
 8005fd8:	20001918 	.word	0x20001918

08005fdc <remove_timeout>:
{
 8005fdc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 8005fde:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8005fe0:	b168      	cbz	r0, 8005ffe <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8005fe2:	4a0a      	ldr	r2, [pc, #40]	; (800600c <remove_timeout+0x30>)
 8005fe4:	6852      	ldr	r2, [r2, #4]
 8005fe6:	4290      	cmp	r0, r2
 8005fe8:	d009      	beq.n	8005ffe <remove_timeout+0x22>
	if (next(t) != NULL) {
 8005fea:	b143      	cbz	r3, 8005ffe <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8005fec:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8005ff0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8005ff4:	1912      	adds	r2, r2, r4
 8005ff6:	eb41 0105 	adc.w	r1, r1, r5
 8005ffa:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8005ffe:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8006000:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8006002:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8006004:	2300      	movs	r3, #0
	node->prev = NULL;
 8006006:	e9c0 3300 	strd	r3, r3, [r0]
}
 800600a:	bd30      	pop	{r4, r5, pc}
 800600c:	200000a4 	.word	0x200000a4

08006010 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006014:	bf08      	it	eq
 8006016:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800601a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601c:	4604      	mov	r4, r0
 800601e:	461f      	mov	r7, r3
 8006020:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8006022:	d065      	beq.n	80060f0 <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8006024:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8006026:	f04f 0310 	mov.w	r3, #16
 800602a:	f3ef 8611 	mrs	r6, BASEPRI
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8006036:	f06f 0201 	mvn.w	r2, #1
 800603a:	1b53      	subs	r3, r2, r5
 800603c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006040:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8006044:	2b00      	cmp	r3, #0
 8006046:	db1b      	blt.n	8006080 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8006048:	4b2a      	ldr	r3, [pc, #168]	; (80060f4 <z_add_timeout+0xe4>)
 800604a:	e9d3 1300 	ldrd	r1, r3, [r3]
 800604e:	1a52      	subs	r2, r2, r1
 8006050:	eb6c 0303 	sbc.w	r3, ip, r3
 8006054:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 8006056:	eb63 0307 	sbc.w	r3, r3, r7
 800605a:	2d01      	cmp	r5, #1
 800605c:	f173 0200 	sbcs.w	r2, r3, #0
 8006060:	da01      	bge.n	8006066 <z_add_timeout+0x56>
 8006062:	2501      	movs	r5, #1
 8006064:	2300      	movs	r3, #0
	return list->head == list;
 8006066:	4824      	ldr	r0, [pc, #144]	; (80060f8 <z_add_timeout+0xe8>)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8006068:	e9c4 5304 	strd	r5, r3, [r4, #16]
	sys_dnode_t *const tail = list->tail;
 800606c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006070:	4283      	cmp	r3, r0
 8006072:	d116      	bne.n	80060a2 <z_add_timeout+0x92>
	node->prev = tail;
 8006074:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8006078:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 800607c:	6044      	str	r4, [r0, #4]
}
 800607e:	e024      	b.n	80060ca <z_add_timeout+0xba>
 8006080:	f7ff ff7a 	bl	8005f78 <elapsed>
 8006084:	3501      	adds	r5, #1
 8006086:	f147 0300 	adc.w	r3, r7, #0
 800608a:	182d      	adds	r5, r5, r0
 800608c:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8006090:	e7e9      	b.n	8006066 <z_add_timeout+0x56>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 8006092:	1a52      	subs	r2, r2, r1
 8006094:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 8006098:	4563      	cmp	r3, ip
 800609a:	e9c4 2504 	strd	r2, r5, [r4, #16]
 800609e:	d0e9      	beq.n	8006074 <z_add_timeout+0x64>
 80060a0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0e6      	beq.n	8006074 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 80060a6:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 80060aa:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 80060ae:	428a      	cmp	r2, r1
 80060b0:	eb75 0e07 	sbcs.w	lr, r5, r7
 80060b4:	daed      	bge.n	8006092 <z_add_timeout+0x82>
				t->dticks -= to->dticks;
 80060b6:	1a8a      	subs	r2, r1, r2
 80060b8:	eb67 0505 	sbc.w	r5, r7, r5
 80060bc:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 80060c0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80060c2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 80060c6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80060c8:	605c      	str	r4, [r3, #4]
	return list->head == list;
 80060ca:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80060cc:	4283      	cmp	r3, r0
 80060ce:	d00b      	beq.n	80060e8 <z_add_timeout+0xd8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80060d0:	429c      	cmp	r4, r3
 80060d2:	d109      	bne.n	80060e8 <z_add_timeout+0xd8>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 80060d4:	f7ff ff5a 	bl	8005f8c <next_timeout>

			if (next_time == 0 ||
 80060d8:	b118      	cbz	r0, 80060e2 <z_add_timeout+0xd2>
			    _current_cpu->slice_ticks != next_time) {
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <z_add_timeout+0xec>)
			if (next_time == 0 ||
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	4283      	cmp	r3, r0
 80060e0:	d002      	beq.n	80060e8 <z_add_timeout+0xd8>
				sys_clock_set_timeout(next_time, false);
 80060e2:	2100      	movs	r1, #0
 80060e4:	f7fd fb76 	bl	80037d4 <sys_clock_set_timeout>
	__asm__ volatile(
 80060e8:	f386 8811 	msr	BASEPRI, r6
 80060ec:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 80060f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060f2:	bf00      	nop
 80060f4:	200005c0 	.word	0x200005c0
 80060f8:	200000a4 	.word	0x200000a4
 80060fc:	20001918 	.word	0x20001918

08006100 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8006100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006104:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8006106:	f7ff fd85 	bl	8005c14 <z_time_slice>
	__asm__ volatile(
 800610a:	f04f 0310 	mov.w	r3, #16
 800610e:	f3ef 8411 	mrs	r4, BASEPRI
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800611a:	4e24      	ldr	r6, [pc, #144]	; (80061ac <sys_clock_announce+0xac>)
	return list->head == list;
 800611c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80061b4 <sys_clock_announce+0xb4>
 8006120:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8006122:	4d23      	ldr	r5, [pc, #140]	; (80061b0 <sys_clock_announce+0xb0>)
 8006124:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8006128:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800612a:	4540      	cmp	r0, r8
		curr_tick += dt;
 800612c:	e9d5 1e00 	ldrd	r1, lr, [r5]
 8006130:	ea4f 77e2 	mov.w	r7, r2, asr #31
 8006134:	d00b      	beq.n	800614e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8006136:	b150      	cbz	r0, 800614e <sys_clock_announce+0x4e>
 8006138:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 800613c:	429a      	cmp	r2, r3
 800613e:	eb77 090c 	sbcs.w	r9, r7, ip
 8006142:	da16      	bge.n	8006172 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8006144:	1a9b      	subs	r3, r3, r2
 8006146:	eb6c 0c07 	sbc.w	ip, ip, r7
 800614a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 800614e:	1852      	adds	r2, r2, r1
 8006150:	eb4e 0707 	adc.w	r7, lr, r7
 8006154:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 8006158:	2500      	movs	r5, #0
 800615a:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 800615c:	f7ff ff16 	bl	8005f8c <next_timeout>
 8006160:	4629      	mov	r1, r5
 8006162:	f7fd fb37 	bl	80037d4 <sys_clock_set_timeout>
	__asm__ volatile(
 8006166:	f384 8811 	msr	BASEPRI, r4
 800616a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800616e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8006172:	1859      	adds	r1, r3, r1
 8006174:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 800617c:	2200      	movs	r2, #0
 800617e:	2300      	movs	r3, #0
 8006180:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 8006184:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 8006188:	f7ff ff28 	bl	8005fdc <remove_timeout>
 800618c:	f384 8811 	msr	BASEPRI, r4
 8006190:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8006194:	6883      	ldr	r3, [r0, #8]
 8006196:	4798      	blx	r3
	__asm__ volatile(
 8006198:	f04f 0310 	mov.w	r3, #16
 800619c:	f3ef 8411 	mrs	r4, BASEPRI
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80061a8:	e7bc      	b.n	8006124 <sys_clock_announce+0x24>
 80061aa:	bf00      	nop
 80061ac:	20001954 	.word	0x20001954
 80061b0:	200005c0 	.word	0x200005c0
 80061b4:	200000a4 	.word	0x200000a4

080061b8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 80061b8:	b510      	push	{r4, lr}
 80061ba:	f04f 0310 	mov.w	r3, #16
 80061be:	f3ef 8411 	mrs	r4, BASEPRI
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 80061ca:	f7fd fb73 	bl	80038b4 <sys_clock_elapsed>
 80061ce:	4a05      	ldr	r2, [pc, #20]	; (80061e4 <sys_clock_tick_get+0x2c>)
 80061d0:	e9d2 3100 	ldrd	r3, r1, [r2]
 80061d4:	18c0      	adds	r0, r0, r3
 80061d6:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 80061da:	f384 8811 	msr	BASEPRI, r4
 80061de:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 80061e2:	bd10      	pop	{r4, pc}
 80061e4:	200005c0 	.word	0x200005c0

080061e8 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 80061e8:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 80061ea:	4604      	mov	r4, r0
 80061ec:	b178      	cbz	r0, 800620e <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 80061ee:	f7fd fb7f 	bl	80038f0 <sys_clock_cycle_get_32>
 80061f2:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 80061f4:	4806      	ldr	r0, [pc, #24]	; (8006210 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 80061f6:	4a07      	ldr	r2, [pc, #28]	; (8006214 <z_impl_k_busy_wait+0x2c>)
 80061f8:	fba4 0100 	umull	r0, r1, r4, r0
 80061fc:	2300      	movs	r3, #0
 80061fe:	f7fa fc01 	bl	8000a04 <__aeabi_uldivmod>
 8006202:	4604      	mov	r4, r0
 8006204:	f7fd fb74 	bl	80038f0 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8006208:	1b43      	subs	r3, r0, r5
 800620a:	42a3      	cmp	r3, r4
 800620c:	d3fa      	bcc.n	8006204 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	05b8d800 	.word	0x05b8d800
 8006214:	000f4240 	.word	0x000f4240

08006218 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8006218:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800621a:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 800621e:	3301      	adds	r3, #1
 8006220:	f142 0200 	adc.w	r2, r2, #0
 8006224:	2b02      	cmp	r3, #2
 8006226:	f172 0300 	sbcs.w	r3, r2, #0
{
 800622a:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800622c:	d304      	bcc.n	8006238 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800622e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8006232:	490d      	ldr	r1, [pc, #52]	; (8006268 <z_timer_expiration_handler+0x50>)
 8006234:	f7ff feec 	bl	8006010 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 8006238:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800623a:	3301      	adds	r3, #1
 800623c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 800623e:	6a23      	ldr	r3, [r4, #32]
 8006240:	b10b      	cbz	r3, 8006246 <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
 8006242:	4620      	mov	r0, r4
 8006244:	4798      	blx	r3
	return list->head == list;
 8006246:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800624a:	42a5      	cmp	r5, r4
 800624c:	d00a      	beq.n	8006264 <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 800624e:	b14d      	cbz	r5, 8006264 <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
 8006250:	4628      	mov	r0, r5
 8006252:	f001 ff79 	bl	8008148 <z_unpend_thread_no_timeout>
 8006256:	2300      	movs	r3, #0
 8006258:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
 800625a:	4628      	mov	r0, r5
}
 800625c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
 8006260:	f001 bfdc 	b.w	800821c <z_ready_thread>
}
 8006264:	bd38      	pop	{r3, r4, r5, pc}
 8006266:	bf00      	nop
 8006268:	08006219 	.word	0x08006219

0800626c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800626c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006274:	bf08      	it	eq
 8006276:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800627a:	4605      	mov	r5, r0
 800627c:	4690      	mov	r8, r2
 800627e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006282:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8006284:	d03c      	beq.n	8006300 <z_impl_k_timer_start+0x94>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8006286:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800628a:	bf08      	it	eq
 800628c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8006290:	4604      	mov	r4, r0
 8006292:	460e      	mov	r6, r1
 8006294:	d013      	beq.n	80062be <z_impl_k_timer_start+0x52>
 8006296:	4308      	orrs	r0, r1
 8006298:	d011      	beq.n	80062be <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
 800629a:	f06f 0001 	mvn.w	r0, #1
 800629e:	1b00      	subs	r0, r0, r4
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062a4:	eb60 0001 	sbc.w	r0, r0, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 80062a8:	2800      	cmp	r0, #0
 80062aa:	da08      	bge.n	80062be <z_impl_k_timer_start+0x52>
		period.ticks = MAX(period.ticks - 1, 1);
 80062ac:	3c01      	subs	r4, #1
 80062ae:	f161 0600 	sbc.w	r6, r1, #0
 80062b2:	2c01      	cmp	r4, #1
 80062b4:	f176 0100 	sbcs.w	r1, r6, #0
 80062b8:	bfbc      	itt	lt
 80062ba:	2401      	movlt	r4, #1
 80062bc:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 80062be:	f06f 0101 	mvn.w	r1, #1
 80062c2:	1a89      	subs	r1, r1, r2
 80062c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062c8:	eb61 0103 	sbc.w	r1, r1, r3
 80062cc:	2900      	cmp	r1, #0
 80062ce:	da08      	bge.n	80062e2 <z_impl_k_timer_start+0x76>
		duration.ticks = MAX(duration.ticks - 1, 0);
 80062d0:	3a01      	subs	r2, #1
 80062d2:	f163 0700 	sbc.w	r7, r3, #0
 80062d6:	2f00      	cmp	r7, #0
 80062d8:	4690      	mov	r8, r2
 80062da:	bfbc      	itt	lt
 80062dc:	f04f 0800 	movlt.w	r8, #0
 80062e0:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
 80062e2:	4628      	mov	r0, r5
 80062e4:	f002 f809 	bl	80082fa <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
 80062ec:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80062f0:	4642      	mov	r2, r8
 80062f2:	463b      	mov	r3, r7
 80062f4:	4628      	mov	r0, r5
 80062f6:	4903      	ldr	r1, [pc, #12]	; (8006304 <z_impl_k_timer_start+0x98>)
		     duration);
}
 80062f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80062fc:	f7ff be88 	b.w	8006010 <z_add_timeout>
}
 8006300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006304:	08006219 	.word	0x08006219

08006308 <z_impl_k_timer_status_sync>:
}
#include <syscalls/k_timer_status_get_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
 8006308:	b513      	push	{r0, r1, r4, lr}
 800630a:	4604      	mov	r4, r0
	__asm__ volatile(
 800630c:	f04f 0310 	mov.w	r3, #16
 8006310:	f3ef 8111 	mrs	r1, BASEPRI
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy

		return result;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;
 800631c:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if (result == 0U) {
 800631e:	b9a8      	cbnz	r0, 800634c <z_impl_k_timer_status_sync+0x44>
		if (!z_is_inactive_timeout(&timer->timeout)) {
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	b19b      	cbz	r3, 800634c <z_impl_k_timer_status_sync+0x44>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_timer, status_sync, timer, K_FOREVER);

			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
 8006324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800632c:	e9cd 2300 	strd	r2, r3, [sp]
 8006330:	480a      	ldr	r0, [pc, #40]	; (800635c <z_impl_k_timer_status_sync+0x54>)
 8006332:	f104 0218 	add.w	r2, r4, #24
 8006336:	f7ff fbd1 	bl	8005adc <z_pend_curr>
 800633a:	f04f 0310 	mov.w	r3, #16
 800633e:	f3ef 8111 	mrs	r1, BASEPRI
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
 800634a:	6b20      	ldr	r0, [r4, #48]	; 0x30
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	6323      	str	r3, [r4, #48]	; 0x30
	__asm__ volatile(
 8006350:	f381 8811 	msr	BASEPRI, r1
 8006354:	f3bf 8f6f 	isb	sy
	 * @note	New tracing hook
	 */
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_timer, status_sync, timer, result);

	return result;
}
 8006358:	b002      	add	sp, #8
 800635a:	bd10      	pop	{r4, pc}
 800635c:	20002030 	.word	0x20002030

08006360 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
 8006360:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
 8006362:	4601      	mov	r1, r0
 8006364:	4801      	ldr	r0, [pc, #4]	; (800636c <k_aligned_alloc+0xc>)
 8006366:	f002 b856 	b.w	8008416 <z_heap_aligned_alloc>
 800636a:	bf00      	nop
 800636c:	2000022c 	.word	0x2000022c

08006370 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
 8006370:	b513      	push	{r0, r1, r4, lr}
 8006372:	4604      	mov	r4, r0
 8006374:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
 8006376:	f001 fe3a 	bl	8007fee <k_is_in_isr>
 800637a:	9a01      	ldr	r2, [sp, #4]
 800637c:	b950      	cbnz	r0, 8006394 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
 800637e:	4b07      	ldr	r3, [pc, #28]	; (800639c <z_thread_aligned_alloc+0x2c>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
 8006384:	b143      	cbz	r3, 8006398 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
 8006386:	4621      	mov	r1, r4
 8006388:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
 800638a:	b002      	add	sp, #8
 800638c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
 8006390:	f002 b841 	b.w	8008416 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
 8006394:	4b02      	ldr	r3, [pc, #8]	; (80063a0 <z_thread_aligned_alloc+0x30>)
 8006396:	e7f6      	b.n	8006386 <z_thread_aligned_alloc+0x16>
}
 8006398:	b002      	add	sp, #8
 800639a:	bd10      	pop	{r4, pc}
 800639c:	20001918 	.word	0x20001918
 80063a0:	2000022c 	.word	0x2000022c

080063a4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 80063a4:	4a02      	ldr	r2, [pc, #8]	; (80063b0 <boot_banner+0xc>)
 80063a6:	4903      	ldr	r1, [pc, #12]	; (80063b4 <boot_banner+0x10>)
 80063a8:	4803      	ldr	r0, [pc, #12]	; (80063b8 <boot_banner+0x14>)
 80063aa:	f000 b94b 	b.w	8006644 <printk>
 80063ae:	bf00      	nop
 80063b0:	080099eb 	.word	0x080099eb
 80063b4:	0800a20f 	.word	0x0800a20f
 80063b8:	0800a22b 	.word	0x0800a22b

080063bc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 80063bc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 80063be:	4c06      	ldr	r4, [pc, #24]	; (80063d8 <statics_init+0x1c>)
 80063c0:	4d06      	ldr	r5, [pc, #24]	; (80063dc <statics_init+0x20>)
 80063c2:	42ac      	cmp	r4, r5
 80063c4:	d301      	bcc.n	80063ca <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 80063c6:	2000      	movs	r0, #0
 80063c8:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 80063ca:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80063ce:	4620      	mov	r0, r4
 80063d0:	f002 f83f 	bl	8008452 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 80063d4:	3418      	adds	r4, #24
 80063d6:	e7f4      	b.n	80063c2 <statics_init+0x6>
 80063d8:	2000022c 	.word	0x2000022c
 80063dc:	20000244 	.word	0x20000244

080063e0 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
 80063e0:	6883      	ldr	r3, [r0, #8]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	b103      	cbz	r3, 80063e8 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
 80063e6:	4718      	bx	r3
}
 80063e8:	4770      	bx	lr

080063ea <crc_accumulate>:
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80063ea:	880a      	ldrh	r2, [r1, #0]
 80063ec:	4050      	eors	r0, r2
        tmp ^= (tmp<<4);
 80063ee:	ea80 1000 	eor.w	r0, r0, r0, lsl #4
 80063f2:	b2c0      	uxtb	r0, r0
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80063f4:	0903      	lsrs	r3, r0, #4
 80063f6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 80063fa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80063fe:	ea83 00c0 	eor.w	r0, r3, r0, lsl #3
 8006402:	8008      	strh	r0, [r1, #0]
}
 8006404:	4770      	bx	lr

08006406 <mavlink_update_checksum>:
{
 8006406:	b513      	push	{r0, r1, r4, lr}
 8006408:	4604      	mov	r4, r0
 800640a:	4608      	mov	r0, r1
	uint16_t checksum = msg->checksum;
 800640c:	7823      	ldrb	r3, [r4, #0]
 800640e:	7862      	ldrb	r2, [r4, #1]
	crc_accumulate(c, &checksum);
 8006410:	f10d 0106 	add.w	r1, sp, #6
	uint16_t checksum = msg->checksum;
 8006414:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006418:	f8ad 3006 	strh.w	r3, [sp, #6]
	crc_accumulate(c, &checksum);
 800641c:	f7ff ffe5 	bl	80063ea <crc_accumulate>
	msg->checksum = checksum;
 8006420:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006424:	8023      	strh	r3, [r4, #0]
}
 8006426:	b002      	add	sp, #8
 8006428:	bd10      	pop	{r4, pc}

0800642a <mavlink_msg_to_send_buffer>:
{
 800642a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 800642c:	788b      	ldrb	r3, [r1, #2]
        uint8_t length = msg->len;
 800642e:	78cf      	ldrb	r7, [r1, #3]
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8006430:	2bfe      	cmp	r3, #254	; 0xfe
{
 8006432:	460d      	mov	r5, r1
 8006434:	4604      	mov	r4, r0
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8006436:	f101 010c 	add.w	r1, r1, #12
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 800643a:	d029      	beq.n	8006490 <mavlink_msg_to_send_buffer+0x66>
 800643c:	463e      	mov	r6, r7
	while (length > 1 && payload[length-1] == 0) {
 800643e:	2e01      	cmp	r6, #1
 8006440:	b2f7      	uxtb	r7, r6
 8006442:	d903      	bls.n	800644c <mavlink_msg_to_send_buffer+0x22>
 8006444:	1e72      	subs	r2, r6, #1
 8006446:	5c88      	ldrb	r0, [r1, r2]
 8006448:	2800      	cmp	r0, #0
 800644a:	d045      	beq.n	80064d8 <mavlink_msg_to_send_buffer+0xae>
		buf[0] = msg->magic;
 800644c:	7023      	strb	r3, [r4, #0]
		buf[1] = length;
 800644e:	7067      	strb	r7, [r4, #1]
		buf[2] = msg->incompat_flags;
 8006450:	792b      	ldrb	r3, [r5, #4]
 8006452:	70a3      	strb	r3, [r4, #2]
		buf[3] = msg->compat_flags;
 8006454:	796b      	ldrb	r3, [r5, #5]
 8006456:	70e3      	strb	r3, [r4, #3]
		buf[4] = msg->seq;
 8006458:	79ab      	ldrb	r3, [r5, #6]
 800645a:	7123      	strb	r3, [r4, #4]
		buf[5] = msg->sysid;
 800645c:	79eb      	ldrb	r3, [r5, #7]
 800645e:	7163      	strb	r3, [r4, #5]
		buf[6] = msg->compid;
 8006460:	7a2b      	ldrb	r3, [r5, #8]
 8006462:	71a3      	strb	r3, [r4, #6]
		buf[7] = msg->msgid & 0xFF;
 8006464:	7a6b      	ldrb	r3, [r5, #9]
 8006466:	71e3      	strb	r3, [r4, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8006468:	7aab      	ldrb	r3, [r5, #10]
 800646a:	7223      	strb	r3, [r4, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800646c:	7aeb      	ldrb	r3, [r5, #11]
 800646e:	7263      	strb	r3, [r4, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8006470:	4632      	mov	r2, r6
 8006472:	f104 000a 	add.w	r0, r4, #10
 8006476:	f002 f864 	bl	8008542 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 800647a:	f106 000a 	add.w	r0, r6, #10
 800647e:	4420      	add	r0, r4
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8006480:	792c      	ldrb	r4, [r5, #4]
 8006482:	f014 0401 	ands.w	r4, r4, #1
		header_len = MAVLINK_CORE_HEADER_LEN;
 8006486:	f04f 0609 	mov.w	r6, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800648a:	bf18      	it	ne
 800648c:	240d      	movne	r4, #13
 800648e:	e012      	b.n	80064b6 <mavlink_msg_to_send_buffer+0x8c>
		buf[0] = msg->magic;
 8006490:	7003      	strb	r3, [r0, #0]
		buf[1] = length;
 8006492:	7047      	strb	r7, [r0, #1]
		buf[2] = msg->seq;
 8006494:	79ab      	ldrb	r3, [r5, #6]
 8006496:	7083      	strb	r3, [r0, #2]
		buf[3] = msg->sysid;
 8006498:	79eb      	ldrb	r3, [r5, #7]
 800649a:	70c3      	strb	r3, [r0, #3]
		buf[4] = msg->compid;
 800649c:	7a2b      	ldrb	r3, [r5, #8]
 800649e:	7103      	strb	r3, [r0, #4]
		buf[5] = msg->msgid & 0xFF;
 80064a0:	7a6b      	ldrb	r3, [r5, #9]
 80064a2:	7143      	strb	r3, [r0, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80064a4:	78ea      	ldrb	r2, [r5, #3]
 80064a6:	3006      	adds	r0, #6
 80064a8:	f002 f84b 	bl	8008542 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80064ac:	78e8      	ldrb	r0, [r5, #3]
 80064ae:	3006      	adds	r0, #6
 80064b0:	4420      	add	r0, r4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80064b2:	2605      	movs	r6, #5
		signature_len = 0;
 80064b4:	2400      	movs	r4, #0
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80064b6:	882b      	ldrh	r3, [r5, #0]
 80064b8:	7003      	strb	r3, [r0, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80064ba:	882b      	ldrh	r3, [r5, #0]
 80064bc:	0a1b      	lsrs	r3, r3, #8
 80064be:	7043      	strb	r3, [r0, #1]
	if (signature_len > 0) {
 80064c0:	b12c      	cbz	r4, 80064ce <mavlink_msg_to_send_buffer+0xa4>
		memcpy(&ck[2], msg->signature, signature_len);
 80064c2:	4622      	mov	r2, r4
 80064c4:	f505 718b 	add.w	r1, r5, #278	; 0x116
 80064c8:	3002      	adds	r0, #2
 80064ca:	f002 f83a 	bl	8008542 <memcpy>
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80064ce:	19f0      	adds	r0, r6, r7
 80064d0:	3403      	adds	r4, #3
 80064d2:	4420      	add	r0, r4
}
 80064d4:	b280      	uxth	r0, r0
 80064d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064d8:	4616      	mov	r6, r2
 80064da:	e7b0      	b.n	800643e <mavlink_msg_to_send_buffer+0x14>

080064dc <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 80064dc:	b570      	push	{r4, r5, r6, lr}
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 80064de:	6806      	ldr	r6, [r0, #0]
{
 80064e0:	4604      	mov	r4, r0
 80064e2:	b092      	sub	sp, #72	; 0x48
    unsigned offset = (m->sz[0] / 8) % 64;
 80064e4:	08f6      	lsrs	r6, r6, #3
{
 80064e6:	460d      	mov	r5, r1
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
    uint8_t *p = (uint8_t *)&m->counter[0];
    
    *zeros = 0x80;
 80064e8:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80064ea:	2247      	movs	r2, #71	; 0x47
 80064ec:	2100      	movs	r1, #0
 80064ee:	f10d 0001 	add.w	r0, sp, #1
 80064f2:	f1c6 0677 	rsb	r6, r6, #119	; 0x77
 80064f6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    *zeros = 0x80;
 80064fa:	f88d 3000 	strb.w	r3, [sp]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80064fe:	f002 f82e 	bl	800855e <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8006502:	6822      	ldr	r2, [r4, #0]
 8006504:	ab12      	add	r3, sp, #72	; 0x48
 8006506:	4433      	add	r3, r6
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8006508:	0a11      	lsrs	r1, r2, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800650a:	f803 2c40 	strb.w	r2, [r3, #-64]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 800650e:	f803 1c41 	strb.w	r1, [r3, #-65]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8006512:	0c11      	lsrs	r1, r2, #16
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8006514:	0e12      	lsrs	r2, r2, #24
 8006516:	f803 2c43 	strb.w	r2, [r3, #-67]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800651a:	6862      	ldr	r2, [r4, #4]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 800651c:	f803 1c42 	strb.w	r1, [r3, #-66]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8006520:	0a11      	lsrs	r1, r2, #8
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8006522:	f803 2c44 	strb.w	r2, [r3, #-68]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8006526:	f803 1c45 	strb.w	r1, [r3, #-69]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 800652a:	0c11      	lsrs	r1, r2, #16
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800652c:	0e12      	lsrs	r2, r2, #24
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 800652e:	f803 1c46 	strb.w	r1, [r3, #-70]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8006532:	f803 2c47 	strb.w	r2, [r3, #-71]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8006536:	4669      	mov	r1, sp
 8006538:	f106 0209 	add.w	r2, r6, #9
 800653c:	4620      	mov	r0, r4
 800653e:	f7fb faab 	bl	8001a98 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8006542:	7ae3      	ldrb	r3, [r4, #11]
 8006544:	702b      	strb	r3, [r5, #0]
    result[1] = p[2];
 8006546:	7aa3      	ldrb	r3, [r4, #10]
 8006548:	706b      	strb	r3, [r5, #1]
    result[2] = p[1];
 800654a:	7a63      	ldrb	r3, [r4, #9]
 800654c:	70ab      	strb	r3, [r5, #2]
    result[3] = p[0];
 800654e:	7a23      	ldrb	r3, [r4, #8]
 8006550:	70eb      	strb	r3, [r5, #3]
    result[4] = p[7];
 8006552:	7be3      	ldrb	r3, [r4, #15]
 8006554:	712b      	strb	r3, [r5, #4]
    result[5] = p[6];
 8006556:	7ba3      	ldrb	r3, [r4, #14]
 8006558:	716b      	strb	r3, [r5, #5]
}
 800655a:	b012      	add	sp, #72	; 0x48
 800655c:	bd70      	pop	{r4, r5, r6, pc}

0800655e <_Z14handle_messageR17__mavlink_message>:
void handle_message(mavlink_message_t& msg) {
 800655e:	b530      	push	{r4, r5, lr}
	switch(msg.msgid) {
 8006560:	7a82      	ldrb	r2, [r0, #10]
 8006562:	7a43      	ldrb	r3, [r0, #9]
 8006564:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006568:	7ac2      	ldrb	r2, [r0, #11]
 800656a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800656e:	2b18      	cmp	r3, #24
void handle_message(mavlink_message_t& msg) {
 8006570:	b08f      	sub	sp, #60	; 0x3c
 8006572:	4604      	mov	r4, r0
	switch(msg.msgid) {
 8006574:	d112      	bne.n	800659c <_Z14handle_messageR17__mavlink_message+0x3e>
    gps_raw_int->v_acc = mavlink_msg_gps_raw_int_get_v_acc(msg);
    gps_raw_int->vel_acc = mavlink_msg_gps_raw_int_get_vel_acc(msg);
    gps_raw_int->hdg_acc = mavlink_msg_gps_raw_int_get_hdg_acc(msg);
    gps_raw_int->yaw = mavlink_msg_gps_raw_int_get_yaw(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_GPS_RAW_INT_LEN? msg->len : MAVLINK_MSG_ID_GPS_RAW_INT_LEN;
 8006576:	78c5      	ldrb	r5, [r0, #3]
 8006578:	2d34      	cmp	r5, #52	; 0x34
 800657a:	bf28      	it	cs
 800657c:	2534      	movcs	r5, #52	; 0x34
        memset(gps_raw_int, 0, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
 800657e:	2234      	movs	r2, #52	; 0x34
 8006580:	2100      	movs	r1, #0
 8006582:	a801      	add	r0, sp, #4
 8006584:	f001 ffeb 	bl	800855e <memset>
    memcpy(gps_raw_int, _MAV_PAYLOAD(msg), len);
 8006588:	f104 010c 	add.w	r1, r4, #12
 800658c:	462a      	mov	r2, r5
 800658e:	a801      	add	r0, sp, #4
 8006590:	f001 ffd7 	bl	8008542 <memcpy>
		handle_gps_raw_int(msg.sysid, gps_raw_int);
 8006594:	79e0      	ldrb	r0, [r4, #7]
 8006596:	a901      	add	r1, sp, #4
 8006598:	f7fa fbce 	bl	8000d38 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t>
}
 800659c:	b00f      	add	sp, #60	; 0x3c
 800659e:	bd30      	pop	{r4, r5, pc}

080065a0 <_ZN8PozyxDev10write_byteEhh>:
	void write_byte(uint8_t register_addr, uint8_t value) {
 80065a0:	b530      	push	{r4, r5, lr}
 80065a2:	b089      	sub	sp, #36	; 0x24
		msgs[0].buf = &register_addr;
 80065a4:	f10d 0307 	add.w	r3, sp, #7
	void write_byte(uint8_t register_addr, uint8_t value) {
 80065a8:	f88d 2006 	strb.w	r2, [sp, #6]
		msgs[0].flags = I2C_MSG_WRITE;
 80065ac:	2200      	movs	r2, #0
		msgs[0].buf = &register_addr;
 80065ae:	9302      	str	r3, [sp, #8]
		msgs[0].flags = I2C_MSG_WRITE;
 80065b0:	f88d 2010 	strb.w	r2, [sp, #16]
		msgs[0].len = 1U;
 80065b4:	2301      	movs	r3, #1
		msgs[1].buf = &value;
 80065b6:	f10d 0206 	add.w	r2, sp, #6
		msgs[1].len = 1U;
 80065ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
		msgs[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 80065be:	2202      	movs	r2, #2
		msgs[0].len = 1U;
 80065c0:	9303      	str	r3, [sp, #12]
        	i2c_transfer(dev, msgs, 2, i2c_addr);
 80065c2:	6804      	ldr	r4, [r0, #0]
 80065c4:	8883      	ldrh	r3, [r0, #4]
	void write_byte(uint8_t register_addr, uint8_t value) {
 80065c6:	f88d 1007 	strb.w	r1, [sp, #7]
		msgs[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 80065ca:	f88d 201c 	strb.w	r2, [sp, #28]
				      uint16_t addr)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	return api->transfer(dev, msgs, num_msgs, addr);
 80065ce:	68a1      	ldr	r1, [r4, #8]
 80065d0:	4620      	mov	r0, r4
 80065d2:	684d      	ldr	r5, [r1, #4]
 80065d4:	a902      	add	r1, sp, #8
 80065d6:	47a8      	blx	r5
	}
 80065d8:	b009      	add	sp, #36	; 0x24
 80065da:	bd30      	pop	{r4, r5, pc}

080065dc <_ZN8PozyxDev9read_byteEh>:
	uint8_t read_byte(uint8_t register_addr) {
 80065dc:	b530      	push	{r4, r5, lr}
 80065de:	b089      	sub	sp, #36	; 0x24
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
 80065e0:	f10d 0207 	add.w	r2, sp, #7
 80065e4:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;
 80065e8:	2100      	movs	r1, #0
	msg[0].buf = (uint8_t *)write_buf;
 80065ea:	9202      	str	r2, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
 80065ec:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[0].len = num_write;
 80065f0:	2201      	movs	r2, #1

	msg[1].buf = (uint8_t *)read_buf;
 80065f2:	f10d 0106 	add.w	r1, sp, #6
	msg[1].len = num_read;
 80065f6:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].len = num_write;
 80065fa:	9203      	str	r2, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80065fc:	2207      	movs	r2, #7
		i2c_reg_read_byte(dev, i2c_addr, register_addr, &data);
 80065fe:	6804      	ldr	r4, [r0, #0]
 8006600:	8883      	ldrh	r3, [r0, #4]
 8006602:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
 8006606:	68a2      	ldr	r2, [r4, #8]
 8006608:	a902      	add	r1, sp, #8
 800660a:	6855      	ldr	r5, [r2, #4]
 800660c:	4620      	mov	r0, r4
 800660e:	2202      	movs	r2, #2
 8006610:	47a8      	blx	r5
	}
 8006612:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8006616:	b009      	add	sp, #36	; 0x24
 8006618:	bd30      	pop	{r4, r5, pc}

0800661a <arch_printk_char_out>:
}
 800661a:	2000      	movs	r0, #0
 800661c:	4770      	bx	lr

0800661e <str_out>:
{
 800661e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8006620:	688a      	ldr	r2, [r1, #8]
 8006622:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 8006624:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8006626:	b114      	cbz	r4, 800662e <str_out+0x10>
 8006628:	684b      	ldr	r3, [r1, #4]
 800662a:	4293      	cmp	r3, r2
 800662c:	dc01      	bgt.n	8006632 <str_out+0x14>
		ctx->count++;
 800662e:	608d      	str	r5, [r1, #8]
}
 8006630:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 8006632:	3b01      	subs	r3, #1
 8006634:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 8006636:	bf08      	it	eq
 8006638:	2200      	moveq	r2, #0
 800663a:	608d      	str	r5, [r1, #8]
 800663c:	bf0c      	ite	eq
 800663e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 8006640:	54a0      	strbne	r0, [r4, r2]
 8006642:	e7f5      	b.n	8006630 <str_out+0x12>

08006644 <printk>:
{
 8006644:	b40f      	push	{r0, r1, r2, r3}
 8006646:	b507      	push	{r0, r1, r2, lr}
 8006648:	a904      	add	r1, sp, #16
 800664a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800664e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 8006650:	f7fc f866 	bl	8002720 <vprintk>
}
 8006654:	b003      	add	sp, #12
 8006656:	f85d eb04 	ldr.w	lr, [sp], #4
 800665a:	b004      	add	sp, #16
 800665c:	4770      	bx	lr

0800665e <snprintk>:
{
 800665e:	b40c      	push	{r2, r3}
 8006660:	b507      	push	{r0, r1, r2, lr}
 8006662:	ab04      	add	r3, sp, #16
 8006664:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8006668:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800666a:	f7fc f867 	bl	800273c <vsnprintk>
}
 800666e:	b003      	add	sp, #12
 8006670:	f85d eb04 	ldr.w	lr, [sp], #4
 8006674:	b002      	add	sp, #8
 8006676:	4770      	bx	lr

08006678 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8006678:	4604      	mov	r4, r0
 800667a:	b508      	push	{r3, lr}
 800667c:	4608      	mov	r0, r1
 800667e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8006680:	461a      	mov	r2, r3
 8006682:	47a0      	blx	r4
	return z_impl_k_current_get();
 8006684:	f7ff fc06 	bl	8005e94 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 8006688:	f7fd fdb0 	bl	80041ec <z_impl_k_thread_abort>

0800668c <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 800668c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 800668e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8006692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 8006696:	bf2c      	ite	cs
 8006698:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 800669c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 80066a0:	4770      	bx	lr

080066a2 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 80066a2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 80066a6:	6880      	ldr	r0, [r0, #8]
 80066a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 80066ac:	bf2c      	ite	cs
 80066ae:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 80066b2:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 80066b6:	4770      	bx	lr

080066b8 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
 80066b8:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80066ba:	2201      	movs	r2, #1
 80066bc:	f7ff ffe6 	bl	800668c <chunk_field>
}
 80066c0:	40d0      	lsrs	r0, r2
 80066c2:	bd08      	pop	{r3, pc}

080066c4 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 80066c4:	6883      	ldr	r3, [r0, #8]
 80066c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
 80066ca:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 80066ce:	d308      	bcc.n	80066e2 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80066d0:	684b      	ldr	r3, [r1, #4]
		if (used) {
 80066d2:	b11a      	cbz	r2, 80066dc <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80066d4:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80066d8:	604b      	str	r3, [r1, #4]
 80066da:	4770      	bx	lr
 80066dc:	f023 0301 	bic.w	r3, r3, #1
 80066e0:	e7fa      	b.n	80066d8 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80066e2:	884b      	ldrh	r3, [r1, #2]
		if (used) {
 80066e4:	b11a      	cbz	r2, 80066ee <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80066e6:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80066ea:	804b      	strh	r3, [r1, #2]
		}
	}
}
 80066ec:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	e7fa      	b.n	80066ea <set_chunk_used+0x26>

080066f4 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80066f4:	0053      	lsls	r3, r2, #1
 80066f6:	2201      	movs	r2, #1
 80066f8:	f7ff bfd3 	b.w	80066a2 <chunk_set>

080066fc <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 80066fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006700:	bf2c      	ite	cs
 8006702:	2008      	movcs	r0, #8
 8006704:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8006706:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8006708:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800670a:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
 800670e:	fab0 f080 	clz	r0, r0
}
 8006712:	f1c0 001f 	rsb	r0, r0, #31
 8006716:	4770      	bx	lr

08006718 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 8006718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800671c:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
 800671e:	2203      	movs	r2, #3
 8006720:	460e      	mov	r6, r1
 8006722:	4604      	mov	r4, r0
 8006724:	f7ff ffb2 	bl	800668c <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
 8006728:	4286      	cmp	r6, r0
 800672a:	4605      	mov	r5, r0
 800672c:	f107 0804 	add.w	r8, r7, #4
 8006730:	d10b      	bne.n	800674a <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
 8006732:	2301      	movs	r3, #1
 8006734:	fa03 f707 	lsl.w	r7, r3, r7
 8006738:	68e3      	ldr	r3, [r4, #12]
 800673a:	ea23 0307 	bic.w	r3, r3, r7
 800673e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
 8006746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
 800674a:	4631      	mov	r1, r6
 800674c:	2202      	movs	r2, #2
 800674e:	4620      	mov	r0, r4
 8006750:	f7ff ff9c 	bl	800668c <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
 8006754:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
 8006756:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
 8006758:	4601      	mov	r1, r0
		b->next = second;
 800675a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
 800675e:	4620      	mov	r0, r4
 8006760:	2203      	movs	r2, #3
 8006762:	f7ff ff9e 	bl	80066a2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8006766:	4633      	mov	r3, r6
 8006768:	4629      	mov	r1, r5
 800676a:	4620      	mov	r0, r4
 800676c:	2202      	movs	r2, #2
}
 800676e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006772:	f7ff bf96 	b.w	80066a2 <chunk_set>

08006776 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
 8006776:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
 8006778:	6886      	ldr	r6, [r0, #8]
 800677a:	460d      	mov	r5, r1
 800677c:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 800677e:	f7ff ff9b 	bl	80066b8 <chunk_size>
 8006782:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8006786:	4601      	mov	r1, r0
 8006788:	d301      	bcc.n	800678e <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
 800678a:	2801      	cmp	r0, #1
 800678c:	d009      	beq.n	80067a2 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
 800678e:	4630      	mov	r0, r6
 8006790:	f7ff ffb4 	bl	80066fc <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
 8006794:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
 8006796:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
 8006798:	4620      	mov	r0, r4
	}
}
 800679a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
 800679e:	f7ff bfbb 	b.w	8006718 <free_list_remove_bidx>
}
 80067a2:	bd70      	pop	{r4, r5, r6, pc}

080067a4 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
 80067a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067a8:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
 80067aa:	6880      	ldr	r0, [r0, #8]
{
 80067ac:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
 80067ae:	f7ff ffa5 	bl	80066fc <bucket_idx.isra.0>
 80067b2:	eb04 0980 	add.w	r9, r4, r0, lsl #2
 80067b6:	4605      	mov	r5, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 80067b8:	f8d9 8010 	ldr.w	r8, [r9, #16]
 80067bc:	f1b8 0f00 	cmp.w	r8, #0
 80067c0:	d01c      	beq.n	80067fc <alloc_chunk+0x58>
 80067c2:	2603      	movs	r6, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
 80067c4:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
 80067c8:	9101      	str	r1, [sp, #4]
 80067ca:	4620      	mov	r0, r4
 80067cc:	f7ff ff74 	bl	80066b8 <chunk_size>
 80067d0:	42b8      	cmp	r0, r7
 80067d2:	9901      	ldr	r1, [sp, #4]
 80067d4:	d308      	bcc.n	80067e8 <alloc_chunk+0x44>
				free_list_remove_bidx(h, c, bi);
 80067d6:	462a      	mov	r2, r5

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
 80067d8:	4620      	mov	r0, r4
 80067da:	f7ff ff9d 	bl	8006718 <free_list_remove_bidx>
 80067de:	9901      	ldr	r1, [sp, #4]
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 80067e0:	4608      	mov	r0, r1
 80067e2:	b003      	add	sp, #12
 80067e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return chunk_field(h, c, FREE_NEXT);
 80067e8:	2203      	movs	r2, #3
 80067ea:	4620      	mov	r0, r4
 80067ec:	f7ff ff4e 	bl	800668c <chunk_field>
		} while (--i && b->next != first);
 80067f0:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
 80067f2:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
 80067f6:	d001      	beq.n	80067fc <alloc_chunk+0x58>
 80067f8:	4580      	cmp	r8, r0
 80067fa:	d1e3      	bne.n	80067c4 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
 80067fc:	68e3      	ldr	r3, [r4, #12]
 80067fe:	3501      	adds	r5, #1
 8006800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006804:	40a9      	lsls	r1, r5
	if (bmask != 0U) {
 8006806:	4019      	ands	r1, r3
 8006808:	d0ea      	beq.n	80067e0 <alloc_chunk+0x3c>
		int minbucket = __builtin_ctz(bmask);
 800680a:	fa91 f2a1 	rbit	r2, r1
 800680e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 8006812:	1d13      	adds	r3, r2, #4
 8006814:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 8006818:	9101      	str	r1, [sp, #4]
 800681a:	e7dd      	b.n	80067d8 <alloc_chunk+0x34>

0800681c <split_chunks>:
{
 800681c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800681e:	4614      	mov	r4, r2
 8006820:	4605      	mov	r5, r0
 8006822:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
 8006824:	f7ff ff48 	bl	80066b8 <chunk_size>
	chunksz_t lsz = rc - lc;
 8006828:	1ba3      	subs	r3, r4, r6
	chunksz_t rsz = sz0 - lsz;
 800682a:	1b32      	subs	r2, r6, r4
 800682c:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
 800682e:	4631      	mov	r1, r6
 8006830:	461a      	mov	r2, r3
 8006832:	4628      	mov	r0, r5
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	f7ff ff5d 	bl	80066f4 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
 800683a:	463a      	mov	r2, r7
 800683c:	4621      	mov	r1, r4
 800683e:	4628      	mov	r0, r5
 8006840:	f7ff ff58 	bl	80066f4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8006844:	9b01      	ldr	r3, [sp, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	4621      	mov	r1, r4
 800684a:	4628      	mov	r0, r5
 800684c:	f7ff ff29 	bl	80066a2 <chunk_set>
	return c + chunk_size(h, c);
 8006850:	4621      	mov	r1, r4
 8006852:	4628      	mov	r0, r5
 8006854:	f7ff ff30 	bl	80066b8 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8006858:	463b      	mov	r3, r7
 800685a:	1821      	adds	r1, r4, r0
 800685c:	2200      	movs	r2, #0
 800685e:	4628      	mov	r0, r5
}
 8006860:	b003      	add	sp, #12
 8006862:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006866:	f7ff bf1c 	b.w	80066a2 <chunk_set>

0800686a <merge_chunks>:
{
 800686a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800686c:	4616      	mov	r6, r2
 800686e:	4604      	mov	r4, r0
 8006870:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 8006872:	f7ff ff21 	bl	80066b8 <chunk_size>
 8006876:	4631      	mov	r1, r6
 8006878:	4605      	mov	r5, r0
 800687a:	4620      	mov	r0, r4
 800687c:	f7ff ff1c 	bl	80066b8 <chunk_size>
 8006880:	182b      	adds	r3, r5, r0
	set_chunk_size(h, lc, newsz);
 8006882:	461a      	mov	r2, r3
 8006884:	4639      	mov	r1, r7
 8006886:	4620      	mov	r0, r4
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	f7ff ff33 	bl	80066f4 <set_chunk_size>
	return c + chunk_size(h, c);
 800688e:	4631      	mov	r1, r6
 8006890:	4620      	mov	r0, r4
 8006892:	f7ff ff11 	bl	80066b8 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	1831      	adds	r1, r6, r0
 800689a:	2200      	movs	r2, #0
 800689c:	4620      	mov	r0, r4
}
 800689e:	b003      	add	sp, #12
 80068a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80068a4:	f7ff befd 	b.w	80066a2 <chunk_set>

080068a8 <free_list_add>:
{
 80068a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
 80068ac:	6886      	ldr	r6, [r0, #8]
 80068ae:	460d      	mov	r5, r1
 80068b0:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 80068b2:	f7ff ff01 	bl	80066b8 <chunk_size>
 80068b6:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80068ba:	4601      	mov	r1, r0
 80068bc:	d301      	bcc.n	80068c2 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 80068be:	2801      	cmp	r0, #1
 80068c0:	d033      	beq.n	800692a <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
 80068c2:	4630      	mov	r0, r6
 80068c4:	f7ff ff1a 	bl	80066fc <bucket_idx.isra.0>
	if (b->next == 0U) {
 80068c8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80068cc:	6916      	ldr	r6, [r2, #16]
 80068ce:	b99e      	cbnz	r6, 80068f8 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 80068d0:	2301      	movs	r3, #1
 80068d2:	fa03 f000 	lsl.w	r0, r3, r0
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	4303      	orrs	r3, r0
 80068da:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
 80068dc:	4629      	mov	r1, r5
		b->next = c;
 80068de:	6115      	str	r5, [r2, #16]
 80068e0:	462b      	mov	r3, r5
 80068e2:	2202      	movs	r2, #2
 80068e4:	4620      	mov	r0, r4
 80068e6:	f7ff fedc 	bl	80066a2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 80068ea:	2203      	movs	r2, #3
 80068ec:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 80068ee:	4620      	mov	r0, r4
}
 80068f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068f4:	f7ff bed5 	b.w	80066a2 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 80068f8:	2202      	movs	r2, #2
 80068fa:	4631      	mov	r1, r6
 80068fc:	4620      	mov	r0, r4
 80068fe:	f7ff fec5 	bl	800668c <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 8006902:	4629      	mov	r1, r5
 8006904:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 8006906:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 8006908:	4620      	mov	r0, r4
 800690a:	f7ff feca 	bl	80066a2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 800690e:	2203      	movs	r2, #3
 8006910:	4633      	mov	r3, r6
 8006912:	4629      	mov	r1, r5
 8006914:	4620      	mov	r0, r4
 8006916:	f7ff fec4 	bl	80066a2 <chunk_set>
 800691a:	4639      	mov	r1, r7
 800691c:	462b      	mov	r3, r5
 800691e:	4620      	mov	r0, r4
 8006920:	f7ff febf 	bl	80066a2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8006924:	2202      	movs	r2, #2
 8006926:	4631      	mov	r1, r6
 8006928:	e7e1      	b.n	80068ee <free_list_add+0x46>
 800692a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800692e <free_chunk>:
{
 800692e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006930:	4605      	mov	r5, r0
 8006932:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
 8006934:	f7ff fec0 	bl	80066b8 <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8006938:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
 800693a:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 800693c:	4628      	mov	r0, r5
 800693e:	9101      	str	r1, [sp, #4]
 8006940:	f7ff fea4 	bl	800668c <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
 8006944:	f010 0f01 	tst.w	r0, #1
 8006948:	9901      	ldr	r1, [sp, #4]
 800694a:	d10b      	bne.n	8006964 <free_chunk+0x36>
		free_list_remove(h, right_chunk(h, c));
 800694c:	4628      	mov	r0, r5
 800694e:	f7ff ff12 	bl	8006776 <free_list_remove>
	return c + chunk_size(h, c);
 8006952:	4621      	mov	r1, r4
 8006954:	4628      	mov	r0, r5
 8006956:	f7ff feaf 	bl	80066b8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
 800695a:	4621      	mov	r1, r4
 800695c:	1822      	adds	r2, r4, r0
 800695e:	4628      	mov	r0, r5
 8006960:	f7ff ff83 	bl	800686a <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
 8006964:	2200      	movs	r2, #0
 8006966:	4621      	mov	r1, r4
 8006968:	4628      	mov	r0, r5
 800696a:	f7ff fe8f 	bl	800668c <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 800696e:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
 8006970:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8006972:	4628      	mov	r0, r5
 8006974:	9101      	str	r1, [sp, #4]
 8006976:	f7ff fe89 	bl	800668c <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
 800697a:	ea10 0602 	ands.w	r6, r0, r2
 800697e:	9901      	ldr	r1, [sp, #4]
 8006980:	d112      	bne.n	80069a8 <free_chunk+0x7a>
		free_list_remove(h, left_chunk(h, c));
 8006982:	4628      	mov	r0, r5
 8006984:	f7ff fef7 	bl	8006776 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
 8006988:	4621      	mov	r1, r4
 800698a:	4632      	mov	r2, r6
 800698c:	4628      	mov	r0, r5
 800698e:	f7ff fe7d 	bl	800668c <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
 8006992:	4622      	mov	r2, r4
 8006994:	1a21      	subs	r1, r4, r0
 8006996:	4628      	mov	r0, r5
 8006998:	f7ff ff67 	bl	800686a <merge_chunks>
 800699c:	4621      	mov	r1, r4
 800699e:	4632      	mov	r2, r6
 80069a0:	4628      	mov	r0, r5
 80069a2:	f7ff fe73 	bl	800668c <chunk_field>
 80069a6:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
 80069a8:	4621      	mov	r1, r4
 80069aa:	4628      	mov	r0, r5
}
 80069ac:	b002      	add	sp, #8
 80069ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
 80069b2:	f7ff bf79 	b.w	80068a8 <free_list_add>

080069b6 <sys_heap_free>:
{
 80069b6:	b507      	push	{r0, r1, r2, lr}
	if (mem == NULL) {
 80069b8:	b199      	cbz	r1, 80069e2 <sys_heap_free+0x2c>
 80069ba:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
 80069bc:	6883      	ldr	r3, [r0, #8]
 80069be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c2:	bf2c      	ite	cs
 80069c4:	2308      	movcs	r3, #8
 80069c6:	2304      	movcc	r3, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 80069c8:	1ac9      	subs	r1, r1, r3
 80069ca:	1a09      	subs	r1, r1, r0
 80069cc:	08c9      	lsrs	r1, r1, #3
	set_chunk_used(h, c, false);
 80069ce:	2200      	movs	r2, #0
 80069d0:	9101      	str	r1, [sp, #4]
 80069d2:	f7ff fe77 	bl	80066c4 <set_chunk_used>
	free_chunk(h, c);
 80069d6:	9901      	ldr	r1, [sp, #4]
}
 80069d8:	b003      	add	sp, #12
 80069da:	f85d eb04 	ldr.w	lr, [sp], #4
	free_chunk(h, c);
 80069de:	f7ff bfa6 	b.w	800692e <free_chunk>
}
 80069e2:	b003      	add	sp, #12
 80069e4:	f85d fb04 	ldr.w	pc, [sp], #4

080069e8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
 80069e8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 80069ea:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
 80069ec:	b909      	cbnz	r1, 80069f2 <sys_heap_alloc+0xa>
		return NULL;
 80069ee:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
 80069f0:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
 80069f2:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
 80069f4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80069f8:	d9f9      	bls.n	80069ee <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
 80069fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069fe:	bf2c      	ite	cs
 8006a00:	2208      	movcs	r2, #8
 8006a02:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8006a04:	1dcc      	adds	r4, r1, #7
 8006a06:	4414      	add	r4, r2
 8006a08:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f7ff fec9 	bl	80067a4 <alloc_chunk>
	if (c == 0U) {
 8006a12:	4605      	mov	r5, r0
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d0ea      	beq.n	80069ee <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
 8006a18:	4601      	mov	r1, r0
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f7ff fe4c 	bl	80066b8 <chunk_size>
 8006a20:	42a0      	cmp	r0, r4
 8006a22:	d909      	bls.n	8006a38 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
 8006a24:	442c      	add	r4, r5
 8006a26:	4629      	mov	r1, r5
 8006a28:	4630      	mov	r0, r6
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	f7ff fef6 	bl	800681c <split_chunks>
		free_list_add(h, c + chunk_sz);
 8006a30:	4621      	mov	r1, r4
 8006a32:	4630      	mov	r0, r6
 8006a34:	f7ff ff38 	bl	80068a8 <free_list_add>
	set_chunk_used(h, c, true);
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f7ff fe41 	bl	80066c4 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
 8006a42:	68b3      	ldr	r3, [r6, #8]
 8006a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a48:	bf2c      	ite	cs
 8006a4a:	2308      	movcs	r3, #8
 8006a4c:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 8006a4e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006a52:	4428      	add	r0, r5
	return chunk_mem(h, c);
 8006a54:	e7cc      	b.n	80069f0 <sys_heap_alloc+0x8>

08006a56 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 8006a56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
 8006a5a:	424b      	negs	r3, r1
	struct z_heap *h = heap->heap;
 8006a5c:	6806      	ldr	r6, [r0, #0]
	rew = align & -align;
 8006a5e:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
 8006a62:	ea31 0303 	bics.w	r3, r1, r3
{
 8006a66:	4614      	mov	r4, r2
	return big_heap_chunks(h->end_chunk);
 8006a68:	68b2      	ldr	r2, [r6, #8]
	if (align != rew) {
 8006a6a:	d00e      	beq.n	8006a8a <sys_heap_aligned_alloc+0x34>
	return big_heap(h) ? 8 : 4;
 8006a6c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006a70:	bf2c      	ite	cs
 8006a72:	2308      	movcs	r3, #8
 8006a74:	2304      	movcc	r3, #4
 8006a76:	42bb      	cmp	r3, r7
 8006a78:	bf28      	it	cs
 8006a7a:	463b      	movcs	r3, r7
 8006a7c:	46b9      	mov	r9, r7
		align -= rew;
 8006a7e:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
 8006a80:	b994      	cbnz	r4, 8006aa8 <sys_heap_aligned_alloc+0x52>
		return NULL;
 8006a82:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
 8006a84:	4628      	mov	r0, r5
 8006a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a8a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006a8e:	bf34      	ite	cc
 8006a90:	2304      	movcc	r3, #4
 8006a92:	2308      	movcs	r3, #8
		if (align <= chunk_header_bytes(h)) {
 8006a94:	4299      	cmp	r1, r3
 8006a96:	d804      	bhi.n	8006aa2 <sys_heap_aligned_alloc+0x4c>
			return sys_heap_alloc(heap, bytes);
 8006a98:	4621      	mov	r1, r4
}
 8006a9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
 8006a9e:	f7ff bfa3 	b.w	80069e8 <sys_heap_alloc>
		rew = 0;
 8006aa2:	f04f 0900 	mov.w	r9, #0
 8006aa6:	e7eb      	b.n	8006a80 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
 8006aa8:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
 8006aac:	d9e9      	bls.n	8006a82 <sys_heap_aligned_alloc+0x2c>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
 8006aae:	1de1      	adds	r1, r4, #7
 8006ab0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006ab4:	4439      	add	r1, r7
 8006ab6:	bf2c      	ite	cs
 8006ab8:	2208      	movcs	r2, #8
 8006aba:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8006abc:	1ac9      	subs	r1, r1, r3
 8006abe:	4411      	add	r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 8006ac0:	08c9      	lsrs	r1, r1, #3
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7ff fe6e 	bl	80067a4 <alloc_chunk>
	if (c0 == 0) {
 8006ac8:	4680      	mov	r8, r0
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d0d9      	beq.n	8006a82 <sys_heap_aligned_alloc+0x2c>
	return big_heap(h) ? 8 : 4;
 8006ace:	68b3      	ldr	r3, [r6, #8]
 8006ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad4:	bf2c      	ite	cs
 8006ad6:	2308      	movcs	r3, #8
 8006ad8:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 8006ada:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
 8006ade:	441d      	add	r5, r3
 8006ae0:	1e7a      	subs	r2, r7, #1
 8006ae2:	4435      	add	r5, r6
 8006ae4:	427f      	negs	r7, r7
 8006ae6:	4415      	add	r5, r2
 8006ae8:	403d      	ands	r5, r7
 8006aea:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 8006aee:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8006af0:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 8006af2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8006af4:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 8006af6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
 8006afa:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
 8006afc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8006b00:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
 8006b04:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
 8006b08:	d208      	bcs.n	8006b1c <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
 8006b0a:	4601      	mov	r1, r0
 8006b0c:	463a      	mov	r2, r7
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f7ff fe84 	bl	800681c <split_chunks>
		free_list_add(h, c0);
 8006b14:	4641      	mov	r1, r8
 8006b16:	4630      	mov	r0, r6
 8006b18:	f7ff fec6 	bl	80068a8 <free_list_add>
	return c + chunk_size(h, c);
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	4630      	mov	r0, r6
 8006b20:	f7ff fdca 	bl	80066b8 <chunk_size>
 8006b24:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
 8006b26:	4284      	cmp	r4, r0
 8006b28:	d208      	bcs.n	8006b3c <sys_heap_aligned_alloc+0xe6>
		split_chunks(h, c, c_end);
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	4622      	mov	r2, r4
 8006b30:	f7ff fe74 	bl	800681c <split_chunks>
		free_list_add(h, c_end);
 8006b34:	4621      	mov	r1, r4
 8006b36:	4630      	mov	r0, r6
 8006b38:	f7ff feb6 	bl	80068a8 <free_list_add>
	set_chunk_used(h, c, true);
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	4639      	mov	r1, r7
 8006b40:	4630      	mov	r0, r6
 8006b42:	f7ff fdbf 	bl	80066c4 <set_chunk_used>
	return mem;
 8006b46:	e79d      	b.n	8006a84 <sys_heap_aligned_alloc+0x2e>

08006b48 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 8006b48:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8006b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4e:	bf2c      	ite	cs
 8006b50:	2408      	movcs	r4, #8
 8006b52:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8006b54:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8006b56:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8006b58:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8006b5a:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8006b5e:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8006b62:	1ba4      	subs	r4, r4, r6
 8006b64:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 8006b66:	2300      	movs	r3, #0
	heap->heap = h;
 8006b68:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8006b6a:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
 8006b6c:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
 8006b6e:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8006b70:	4620      	mov	r0, r4
 8006b72:	f7ff fdc3 	bl	80066fc <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8006b76:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8006b78:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8006b7a:	1c41      	adds	r1, r0, #1
 8006b7c:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8006b7e:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
 8006b82:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
 8006b84:	428b      	cmp	r3, r1
 8006b86:	db2e      	blt.n	8006be6 <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 8006b88:	462a      	mov	r2, r5
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	f7ff fdb1 	bl	80066f4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8006b92:	2300      	movs	r3, #0
 8006b94:	461a      	mov	r2, r3
 8006b96:	4619      	mov	r1, r3
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f7ff fd82 	bl	80066a2 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8006b9e:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f7ff fd8d 	bl	80066c4 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8006baa:	463a      	mov	r2, r7
 8006bac:	4629      	mov	r1, r5
 8006bae:	f7ff fda1 	bl	80066f4 <set_chunk_size>
 8006bb2:	462b      	mov	r3, r5
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7ff fd72 	bl	80066a2 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f7ff fd97 	bl	80066f4 <set_chunk_size>
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4630      	mov	r0, r6
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f7ff fd68 	bl	80066a2 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f7ff fd74 	bl	80066c4 <set_chunk_used>

	free_list_add(h, chunk0_size);
 8006bdc:	4629      	mov	r1, r5
}
 8006bde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 8006be2:	f7ff be61 	b.w	80068a8 <free_list_add>
		h->buckets[i].next = 0;
 8006be6:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 8006bea:	3301      	adds	r3, #1
 8006bec:	e7ca      	b.n	8006b84 <sys_heap_init+0x3c>

08006bee <_ldiv5>:
	uint32_t v_lo = *v;
 8006bee:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 8006bf2:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 8006bf4:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 8006bf8:	fba2 2403 	umull	r2, r4, r2, r3
 8006bfc:	18d5      	adds	r5, r2, r3
 8006bfe:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 8006c02:	fba1 1303 	umull	r1, r3, r1, r3
 8006c06:	1852      	adds	r2, r2, r1
 8006c08:	eb44 0403 	adc.w	r4, r4, r3
 8006c0c:	1952      	adds	r2, r2, r5
 8006c0e:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 8006c12:	1889      	adds	r1, r1, r2
 8006c14:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 8006c18:	e9c0 1300 	strd	r1, r3, [r0]
}
 8006c1c:	bd30      	pop	{r4, r5, pc}

08006c1e <_get_digit>:
	if (*digit_count > 0) {
 8006c1e:	680b      	ldr	r3, [r1, #0]
 8006c20:	2b00      	cmp	r3, #0
{
 8006c22:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
 8006c24:	dd10      	ble.n	8006c48 <_get_digit+0x2a>
		--*digit_count;
 8006c26:	3b01      	subs	r3, #1
 8006c28:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
 8006c2a:	6803      	ldr	r3, [r0, #0]
 8006c2c:	6844      	ldr	r4, [r0, #4]
 8006c2e:	220a      	movs	r2, #10
 8006c30:	fba3 1302 	umull	r1, r3, r3, r2
 8006c34:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
 8006c38:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
 8006c3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c3e:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
 8006c42:	3230      	adds	r2, #48	; 0x30
}
 8006c44:	4610      	mov	r0, r2
 8006c46:	bd10      	pop	{r4, pc}
		rval = '0';
 8006c48:	2230      	movs	r2, #48	; 0x30
 8006c4a:	e7fb      	b.n	8006c44 <_get_digit+0x26>

08006c4c <outs>:
{
 8006c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c50:	4680      	mov	r8, r0
 8006c52:	4689      	mov	r9, r1
 8006c54:	4616      	mov	r6, r2
 8006c56:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8006c58:	4615      	mov	r5, r2
 8006c5a:	42bd      	cmp	r5, r7
 8006c5c:	eba5 0406 	sub.w	r4, r5, r6
 8006c60:	d305      	bcc.n	8006c6e <outs+0x22>
 8006c62:	b10f      	cbz	r7, 8006c68 <outs+0x1c>
	return (int)count;
 8006c64:	4620      	mov	r0, r4
 8006c66:	e008      	b.n	8006c7a <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8006c68:	782b      	ldrb	r3, [r5, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0fa      	beq.n	8006c64 <outs+0x18>
		int rc = out((int)*sp++, ctx);
 8006c6e:	f815 0b01 	ldrb.w	r0, [r5], #1
 8006c72:	4649      	mov	r1, r9
 8006c74:	47c0      	blx	r8
		if (rc < 0) {
 8006c76:	2800      	cmp	r0, #0
 8006c78:	daef      	bge.n	8006c5a <outs+0xe>
}
 8006c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006c7e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8006c7e:	4770      	bx	lr

08006c80 <st_stm32_common_config>:
	/* Enable the SWO pin */
	DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN;
#endif

	return 0;
}
 8006c80:	2000      	movs	r0, #0
 8006c82:	4770      	bx	lr

08006c84 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 8006c84:	2300      	movs	r3, #0
	list->head = NULL;
 8006c86:	e9c0 3300 	strd	r3, r3, [r0]
}
 8006c8a:	4770      	bx	lr

08006c8c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 8006c8c:	6803      	ldr	r3, [r0, #0]
 8006c8e:	b923      	cbnz	r3, 8006c9a <log_list_add_tail+0xe>
		list->head = msg;
 8006c90:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
 8006c92:	2300      	movs	r3, #0
	list->tail = msg;
 8006c94:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 8006c96:	600b      	str	r3, [r1, #0]
}
 8006c98:	4770      	bx	lr
		list->tail->next = msg;
 8006c9a:	6843      	ldr	r3, [r0, #4]
 8006c9c:	6019      	str	r1, [r3, #0]
 8006c9e:	e7f8      	b.n	8006c92 <log_list_add_tail+0x6>

08006ca0 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 8006ca0:	6800      	ldr	r0, [r0, #0]
 8006ca2:	4770      	bx	lr

08006ca4 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
 8006ca4:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
 8006ca6:	b10b      	cbz	r3, 8006cac <log_list_head_get+0x8>
		list->head = list->head->next;
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	4770      	bx	lr

08006cb0 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
 8006cb0:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8006cb2:	f7fc f8c9 	bl	8002e48 <log_msg_chunk_alloc>

	if (msg != NULL) {
 8006cb6:	b118      	cbz	r0, 8006cc0 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
 8006cc0:	bd08      	pop	{r3, pc}

08006cc2 <default_lf_get_timestamp>:
{
 8006cc2:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8006cc4:	f001 fb4e 	bl	8008364 <z_impl_k_uptime_ticks>
 8006cc8:	220a      	movs	r2, #10
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f7f9 fe9a 	bl	8000a04 <__aeabi_uldivmod>
}
 8006cd0:	bd08      	pop	{r3, pc}

08006cd2 <dummy_timestamp>:
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	4770      	bx	lr

08006cd6 <log_0>:
{
 8006cd6:	b513      	push	{r0, r1, r4, lr}
 8006cd8:	4604      	mov	r4, r0
 8006cda:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
 8006cdc:	f7ff ffe8 	bl	8006cb0 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8006ce0:	b130      	cbz	r0, 8006cf0 <log_0+0x1a>
		msg_finalize(msg, src_level);
 8006ce2:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
 8006ce4:	6104      	str	r4, [r0, #16]
}
 8006ce6:	b002      	add	sp, #8
 8006ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
 8006cec:	f7fb bfea 	b.w	8002cc4 <msg_finalize>
}
 8006cf0:	b002      	add	sp, #8
 8006cf2:	bd10      	pop	{r4, pc}

08006cf4 <log_1>:
{
 8006cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8006cfe:	f7ff ffd7 	bl	8006cb0 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8006d02:	b160      	cbz	r0, 8006d1e <log_1+0x2a>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
 8006d04:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
 8006d06:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
 8006d08:	2501      	movs	r5, #1
 8006d0a:	f365 1207 	bfi	r2, r5, #4, #4
 8006d0e:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
 8006d10:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
 8006d12:	6144      	str	r4, [r0, #20]
}
 8006d14:	b003      	add	sp, #12
 8006d16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
 8006d1a:	f7fb bfd3 	b.w	8002cc4 <msg_finalize>
}
 8006d1e:	b003      	add	sp, #12
 8006d20:	bd30      	pop	{r4, r5, pc}

08006d22 <log_2>:
{
 8006d22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d24:	460e      	mov	r6, r1
 8006d26:	4619      	mov	r1, r3
 8006d28:	4607      	mov	r7, r0
 8006d2a:	4615      	mov	r5, r2
 8006d2c:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8006d2e:	f7ff ffbf 	bl	8006cb0 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8006d32:	b168      	cbz	r0, 8006d50 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
 8006d34:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 8006d36:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
 8006d38:	2202      	movs	r2, #2
 8006d3a:	f362 1307 	bfi	r3, r2, #4, #4
 8006d3e:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 8006d40:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
 8006d42:	e9c0 6505 	strd	r6, r5, [r0, #20]
}
 8006d46:	b003      	add	sp, #12
 8006d48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
 8006d4c:	f7fb bfba 	b.w	8002cc4 <msg_finalize>
}
 8006d50:	b003      	add	sp, #12
 8006d52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d54 <log_3>:
{
 8006d54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d58:	460f      	mov	r7, r1
 8006d5a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8006d5e:	9101      	str	r1, [sp, #4]
 8006d60:	4680      	mov	r8, r0
 8006d62:	4616      	mov	r6, r2
 8006d64:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8006d66:	f7ff ffa3 	bl	8006cb0 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8006d6a:	b178      	cbz	r0, 8006d8c <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
 8006d6c:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 8006d6e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
 8006d72:	2203      	movs	r2, #3
 8006d74:	f362 1307 	bfi	r3, r2, #4, #4
 8006d78:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 8006d7a:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
 8006d7c:	61c5      	str	r5, [r0, #28]
		msg->payload.single.args[1] = arg2;
 8006d7e:	e9c0 7605 	strd	r7, r6, [r0, #20]
}
 8006d82:	b002      	add	sp, #8
 8006d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
 8006d88:	f7fb bf9c 	b.w	8002cc4 <msg_finalize>
}
 8006d8c:	b002      	add	sp, #8
 8006d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d92 <log_n>:
{
 8006d92:	b510      	push	{r4, lr}
 8006d94:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
 8006d96:	f000 f8a1 	bl	8006edc <log_msg_create_n>
		if (msg == NULL) {
 8006d9a:	b120      	cbz	r0, 8006da6 <log_n+0x14>
		msg_finalize(msg, src_level);
 8006d9c:	4621      	mov	r1, r4
}
 8006d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
 8006da2:	f7fb bf8f 	b.w	8002cc4 <msg_finalize>
}
 8006da6:	bd10      	pop	{r4, pc}

08006da8 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 8006da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dac:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
 8006dae:	8903      	ldrh	r3, [r0, #8]
{
 8006db0:	f89d 7020 	ldrb.w	r7, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 8006db4:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 8006db8:	42a3      	cmp	r3, r4
{
 8006dba:	460e      	mov	r6, r1
	if (offset >= available_len) {
 8006dbc:	d803      	bhi.n	8006dc6 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 8006dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
 8006dc6:	6811      	ldr	r1, [r2, #0]
 8006dc8:	4421      	add	r1, r4
 8006dca:	4299      	cmp	r1, r3
		*length = available_len - offset;
 8006dcc:	bf84      	itt	hi
 8006dce:	1b19      	subhi	r1, r3, r4
 8006dd0:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8006dd2:	2b0c      	cmp	r3, #12
	req_len = *length;
 8006dd4:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8006dd8:	d92b      	bls.n	8006e32 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
 8006dda:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
 8006ddc:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
 8006de0:	d82e      	bhi.n	8006e40 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
 8006de2:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 8006de4:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8006de6:	454b      	cmp	r3, r9
 8006de8:	bf28      	it	cs
 8006dea:	464b      	movcs	r3, r9
 8006dec:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
 8006dee:	4420      	add	r0, r4
 8006df0:	461a      	mov	r2, r3
		if (put_op) {
 8006df2:	b317      	cbz	r7, 8006e3a <log_msg_hexdump_data_op+0x92>
 8006df4:	4631      	mov	r1, r6
 8006df6:	f001 fba4 	bl	8008542 <memcpy>
		req_len -= cpy_len;
 8006dfa:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
 8006dfe:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
 8006e00:	f1b9 0f00 	cmp.w	r9, #0
 8006e04:	d0dd      	beq.n	8006dc2 <log_msg_hexdump_data_op+0x1a>
 8006e06:	f1b8 0f00 	cmp.w	r8, #0
 8006e0a:	d0da      	beq.n	8006dc2 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 8006e0c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8006e10:	454d      	cmp	r5, r9
 8006e12:	bf28      	it	cs
 8006e14:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
 8006e16:	1d20      	adds	r0, r4, #4
 8006e18:	4440      	add	r0, r8
 8006e1a:	462a      	mov	r2, r5
		if (put_op) {
 8006e1c:	b1bf      	cbz	r7, 8006e4e <log_msg_hexdump_data_op+0xa6>
 8006e1e:	4631      	mov	r1, r6
 8006e20:	f001 fb8f 	bl	8008542 <memcpy>
		req_len -= cpy_len;
 8006e24:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
 8006e28:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
 8006e2c:	442e      	add	r6, r5
		offset = 0;
 8006e2e:	2400      	movs	r4, #0
 8006e30:	e7e6      	b.n	8006e00 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
 8006e32:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
 8006e34:	f04f 0800 	mov.w	r8, #0
 8006e38:	e7d5      	b.n	8006de6 <log_msg_hexdump_data_op+0x3e>
 8006e3a:	4601      	mov	r1, r0
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	e7da      	b.n	8006df6 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 8006e40:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
 8006e42:	2c1b      	cmp	r4, #27
 8006e44:	d9dc      	bls.n	8006e00 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
 8006e46:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
 8006e4a:	3c1c      	subs	r4, #28
 8006e4c:	e7f9      	b.n	8006e42 <log_msg_hexdump_data_op+0x9a>
 8006e4e:	4601      	mov	r1, r0
 8006e50:	4630      	mov	r0, r6
 8006e52:	e7e5      	b.n	8006e20 <log_msg_hexdump_data_op+0x78>

08006e54 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8006e54:	3004      	adds	r0, #4
 8006e56:	f3bf 8f5b 	dmb	ish
 8006e5a:	e850 3f00 	ldrex	r3, [r0]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	e840 3200 	strex	r2, r3, [r0]
 8006e64:	2a00      	cmp	r2, #0
 8006e66:	d1f8      	bne.n	8006e5a <log_msg_get+0x6>
 8006e68:	f3bf 8f5b 	dmb	ish
}
 8006e6c:	4770      	bx	lr

08006e6e <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 8006e6e:	7a40      	ldrb	r0, [r0, #9]
}
 8006e70:	0900      	lsrs	r0, r0, #4
 8006e72:	4770      	bx	lr

08006e74 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
 8006e74:	7a43      	ldrb	r3, [r0, #9]
 8006e76:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 8006e7a:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8006e7e:	d216      	bcs.n	8006eae <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8006e80:	2a03      	cmp	r2, #3
 8006e82:	d803      	bhi.n	8006e8c <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
 8006e84:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006e88:	6940      	ldr	r0, [r0, #20]
 8006e8a:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 8006e8c:	2901      	cmp	r1, #1
 8006e8e:	d803      	bhi.n	8006e98 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
 8006e90:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006e94:	6980      	ldr	r0, [r0, #24]
 8006e96:	4770      	bx	lr
	cont = msg->payload.ext.next;
 8006e98:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 8006e9a:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
 8006e9c:	2906      	cmp	r1, #6
 8006e9e:	d803      	bhi.n	8006ea8 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
 8006ea0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006ea4:	6848      	ldr	r0, [r1, #4]
 8006ea6:	4770      	bx	lr
		cont = cont->next;
 8006ea8:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
 8006eaa:	3907      	subs	r1, #7
		cont = cont->next;
 8006eac:	e7f6      	b.n	8006e9c <log_msg_arg_get+0x28>
		return 0;
 8006eae:	2000      	movs	r0, #0
}
 8006eb0:	4770      	bx	lr

08006eb2 <log_msg_put>:
{
 8006eb2:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8006eb4:	1d02      	adds	r2, r0, #4
 8006eb6:	f3bf 8f5b 	dmb	ish
 8006eba:	e852 1f00 	ldrex	r1, [r2]
 8006ebe:	3901      	subs	r1, #1
 8006ec0:	e842 1c00 	strex	ip, r1, [r2]
 8006ec4:	f1bc 0f00 	cmp.w	ip, #0
 8006ec8:	d1f7      	bne.n	8006eba <log_msg_put+0x8>
 8006eca:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	b90b      	cbnz	r3, 8006ed6 <log_msg_put+0x24>
		msg_free(msg);
 8006ed2:	f7fb bfcd 	b.w	8002e70 <msg_free>
}
 8006ed6:	4770      	bx	lr

08006ed8 <log_msg_str_get>:
}
 8006ed8:	6900      	ldr	r0, [r0, #16]
 8006eda:	4770      	bx	lr

08006edc <log_msg_create_n>:
{
 8006edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	4680      	mov	r8, r0
 8006ee2:	460f      	mov	r7, r1
 8006ee4:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8006ee6:	f7fb ffaf 	bl	8002e48 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8006eea:	4604      	mov	r4, r0
 8006eec:	b358      	cbz	r0, 8006f46 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
 8006eee:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
 8006ef0:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8006ef4:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
 8006ef6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8006ef8:	f8a0 a008 	strh.w	sl, [r0, #8]
 8006efc:	d90c      	bls.n	8006f18 <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
 8006efe:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
 8006f00:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
 8006f04:	f043 0302 	orr.w	r3, r3, #2
 8006f08:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
 8006f0a:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
 8006f0e:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
 8006f12:	f1b9 0f00 	cmp.w	r9, #0
 8006f16:	dc0e      	bgt.n	8006f36 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
 8006f18:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
 8006f1a:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
 8006f1e:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8006f22:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
 8006f24:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8006f26:	d819      	bhi.n	8006f5c <log_msg_create_n+0x80>
 8006f28:	00aa      	lsls	r2, r5, #2
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f104 0014 	add.w	r0, r4, #20
 8006f30:	f001 fb07 	bl	8008542 <memcpy>
	while (nargs != 0U) {
 8006f34:	e007      	b.n	8006f46 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
 8006f36:	f7fb ff87 	bl	8002e48 <log_msg_chunk_alloc>
		if (cont == NULL) {
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	b930      	cbnz	r0, 8006f4c <log_msg_create_n+0x70>
			msg_free(msg);
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f7fb ff96 	bl	8002e70 <msg_free>
			return NULL;
 8006f44:	4634      	mov	r4, r6
}
 8006f46:	4620      	mov	r0, r4
 8006f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
 8006f4c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
 8006f50:	f1a9 0907 	sub.w	r9, r9, #7
 8006f54:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
 8006f58:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
 8006f5a:	e7da      	b.n	8006f12 <log_msg_create_n+0x36>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	61a3      	str	r3, [r4, #24]
 8006f60:	687b      	ldr	r3, [r7, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
 8006f62:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8006f66:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
 8006f68:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
 8006f6a:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
 8006f6c:	2d07      	cmp	r5, #7
 8006f6e:	462e      	mov	r6, r5
 8006f70:	bf28      	it	cs
 8006f72:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
 8006f74:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8006f78:	4639      	mov	r1, r7
 8006f7a:	f108 0004 	add.w	r0, r8, #4
 8006f7e:	464a      	mov	r2, r9
 8006f80:	f001 fadf 	bl	8008542 <memcpy>
	while (nargs != 0U) {
 8006f84:	1bad      	subs	r5, r5, r6
		cont = cont->next;
 8006f86:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
 8006f8a:	444f      	add	r7, r9
	while (nargs != 0U) {
 8006f8c:	d1ee      	bne.n	8006f6c <log_msg_create_n+0x90>
 8006f8e:	e7da      	b.n	8006f46 <log_msg_create_n+0x6a>

08006f90 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 8006f90:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 8006f92:	2400      	movs	r4, #0
 8006f94:	9400      	str	r4, [sp, #0]
 8006f96:	f7ff ff07 	bl	8006da8 <log_msg_hexdump_data_op>
}
 8006f9a:	b002      	add	sp, #8
 8006f9c:	bd10      	pop	{r4, pc}

08006f9e <buffer_write>:
{
 8006f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	460d      	mov	r5, r1
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	463a      	mov	r2, r7
 8006fae:	47b0      	blx	r6
	} while (len != 0);
 8006fb0:	1a24      	subs	r4, r4, r0
		buf += processed;
 8006fb2:	4405      	add	r5, r0
	} while (len != 0);
 8006fb4:	d1f8      	bne.n	8006fa8 <buffer_write+0xa>
}
 8006fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006fb8 <std_print>:
{
 8006fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fbc:	b08e      	sub	sp, #56	; 0x38
 8006fbe:	af0e      	add	r7, sp, #56	; 0x38
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
 8006fc4:	f7ff ff88 	bl	8006ed8 <log_msg_str_get>
 8006fc8:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 8006fca:	4640      	mov	r0, r8
 8006fcc:	f7ff ff4f 	bl	8006e6e <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 8006fd0:	0083      	lsls	r3, r0, #2
 8006fd2:	3307      	adds	r3, #7
 8006fd4:	f023 0307 	bic.w	r3, r3, #7
 8006fd8:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
 8006fdc:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 8006fde:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 8006fe0:	f04f 0900 	mov.w	r9, #0
 8006fe4:	45d1      	cmp	r9, sl
 8006fe6:	d116      	bne.n	8007016 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
 8006fe8:	4640      	mov	r0, r8
 8006fea:	f7ff ff40 	bl	8006e6e <log_msg_nargs_get>
 8006fee:	280f      	cmp	r0, #15
 8006ff0:	d81e      	bhi.n	8007030 <std_print+0x78>
 8006ff2:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006ff6:	0019      	.short	0x0019
 8006ff8:	00260020 	.word	0x00260020
 8006ffc:	0036002d 	.word	0x0036002d
 8007000:	004e0041 	.word	0x004e0041
 8007004:	006e005d 	.word	0x006e005d
 8007008:	00960081 	.word	0x00960081
 800700c:	00c600ad 	.word	0x00c600ad
 8007010:	00fe00e1 	.word	0x00fe00e1
 8007014:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
 8007016:	4649      	mov	r1, r9
 8007018:	4640      	mov	r0, r8
 800701a:	f7ff ff2b 	bl	8006e74 <log_msg_arg_get>
 800701e:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
 8007022:	f109 0901 	add.w	r9, r9, #1
 8007026:	e7dd      	b.n	8006fe4 <std_print+0x2c>
		print_formatted(output, str);
 8007028:	4631      	mov	r1, r6
 800702a:	4628      	mov	r0, r5
 800702c:	f7fb ff5e 	bl	8002eec <print_formatted>
}
 8007030:	46bd      	mov	sp, r7
 8007032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
 8007036:	6822      	ldr	r2, [r4, #0]
 8007038:	4631      	mov	r1, r6
 800703a:	4628      	mov	r0, r5
 800703c:	f7fb ff56 	bl	8002eec <print_formatted>
		break;
 8007040:	e7f6      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
 8007042:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007046:	4631      	mov	r1, r6
 8007048:	4628      	mov	r0, r5
 800704a:	f7fb ff4f 	bl	8002eec <print_formatted>
		break;
 800704e:	e7ef      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
 8007050:	68a3      	ldr	r3, [r4, #8]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007058:	4631      	mov	r1, r6
 800705a:	4628      	mov	r0, r5
 800705c:	f7fb ff46 	bl	8002eec <print_formatted>
		break;
 8007060:	e7e6      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8007062:	68e3      	ldr	r3, [r4, #12]
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	68a3      	ldr	r3, [r4, #8]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800706e:	4631      	mov	r1, r6
 8007070:	4628      	mov	r0, r5
 8007072:	f7fb ff3b 	bl	8002eec <print_formatted>
		break;
 8007076:	e7db      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8007078:	6923      	ldr	r3, [r4, #16]
 800707a:	9302      	str	r3, [sp, #8]
 800707c:	68e3      	ldr	r3, [r4, #12]
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	68a3      	ldr	r3, [r4, #8]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007088:	4631      	mov	r1, r6
 800708a:	4628      	mov	r0, r5
 800708c:	f7fb ff2e 	bl	8002eec <print_formatted>
		break;
 8007090:	e7ce      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8007092:	6963      	ldr	r3, [r4, #20]
 8007094:	9303      	str	r3, [sp, #12]
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	9302      	str	r3, [sp, #8]
 800709a:	68e3      	ldr	r3, [r4, #12]
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	68a3      	ldr	r3, [r4, #8]
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7fb ff1f 	bl	8002eec <print_formatted>
		break;
 80070ae:	e7bf      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80070b0:	69a3      	ldr	r3, [r4, #24]
 80070b2:	9304      	str	r3, [sp, #16]
 80070b4:	6963      	ldr	r3, [r4, #20]
 80070b6:	9303      	str	r3, [sp, #12]
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	9302      	str	r3, [sp, #8]
 80070bc:	68e3      	ldr	r3, [r4, #12]
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	68a3      	ldr	r3, [r4, #8]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	f7fb ff0e 	bl	8002eec <print_formatted>
		break;
 80070d0:	e7ae      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80070d2:	69e3      	ldr	r3, [r4, #28]
 80070d4:	9305      	str	r3, [sp, #20]
 80070d6:	69a3      	ldr	r3, [r4, #24]
 80070d8:	9304      	str	r3, [sp, #16]
 80070da:	6963      	ldr	r3, [r4, #20]
 80070dc:	9303      	str	r3, [sp, #12]
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	9302      	str	r3, [sp, #8]
 80070e2:	68e3      	ldr	r3, [r4, #12]
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	68a3      	ldr	r3, [r4, #8]
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 80070ee:	4631      	mov	r1, r6
 80070f0:	4628      	mov	r0, r5
 80070f2:	f7fb fefb 	bl	8002eec <print_formatted>
		break;
 80070f6:	e79b      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80070f8:	6a23      	ldr	r3, [r4, #32]
 80070fa:	9306      	str	r3, [sp, #24]
 80070fc:	69e3      	ldr	r3, [r4, #28]
 80070fe:	9305      	str	r3, [sp, #20]
 8007100:	69a3      	ldr	r3, [r4, #24]
 8007102:	9304      	str	r3, [sp, #16]
 8007104:	6963      	ldr	r3, [r4, #20]
 8007106:	9303      	str	r3, [sp, #12]
 8007108:	6923      	ldr	r3, [r4, #16]
 800710a:	9302      	str	r3, [sp, #8]
 800710c:	68e3      	ldr	r3, [r4, #12]
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	68a3      	ldr	r3, [r4, #8]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007118:	4631      	mov	r1, r6
 800711a:	4628      	mov	r0, r5
 800711c:	f7fb fee6 	bl	8002eec <print_formatted>
		break;
 8007120:	e786      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8007122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007124:	9307      	str	r3, [sp, #28]
 8007126:	6a23      	ldr	r3, [r4, #32]
 8007128:	9306      	str	r3, [sp, #24]
 800712a:	69e3      	ldr	r3, [r4, #28]
 800712c:	9305      	str	r3, [sp, #20]
 800712e:	69a3      	ldr	r3, [r4, #24]
 8007130:	9304      	str	r3, [sp, #16]
 8007132:	6963      	ldr	r3, [r4, #20]
 8007134:	9303      	str	r3, [sp, #12]
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	9302      	str	r3, [sp, #8]
 800713a:	68e3      	ldr	r3, [r4, #12]
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	68a3      	ldr	r3, [r4, #8]
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007146:	4631      	mov	r1, r6
 8007148:	4628      	mov	r0, r5
 800714a:	f7fb fecf 	bl	8002eec <print_formatted>
		break;
 800714e:	e76f      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8007150:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007152:	9308      	str	r3, [sp, #32]
 8007154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007156:	9307      	str	r3, [sp, #28]
 8007158:	6a23      	ldr	r3, [r4, #32]
 800715a:	9306      	str	r3, [sp, #24]
 800715c:	69e3      	ldr	r3, [r4, #28]
 800715e:	9305      	str	r3, [sp, #20]
 8007160:	69a3      	ldr	r3, [r4, #24]
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	6963      	ldr	r3, [r4, #20]
 8007166:	9303      	str	r3, [sp, #12]
 8007168:	6923      	ldr	r3, [r4, #16]
 800716a:	9302      	str	r3, [sp, #8]
 800716c:	68e3      	ldr	r3, [r4, #12]
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	68a3      	ldr	r3, [r4, #8]
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007178:	4631      	mov	r1, r6
 800717a:	4628      	mov	r0, r5
 800717c:	f7fb feb6 	bl	8002eec <print_formatted>
		break;
 8007180:	e756      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8007182:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007184:	9309      	str	r3, [sp, #36]	; 0x24
 8007186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007188:	9308      	str	r3, [sp, #32]
 800718a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800718c:	9307      	str	r3, [sp, #28]
 800718e:	6a23      	ldr	r3, [r4, #32]
 8007190:	9306      	str	r3, [sp, #24]
 8007192:	69e3      	ldr	r3, [r4, #28]
 8007194:	9305      	str	r3, [sp, #20]
 8007196:	69a3      	ldr	r3, [r4, #24]
 8007198:	9304      	str	r3, [sp, #16]
 800719a:	6963      	ldr	r3, [r4, #20]
 800719c:	9303      	str	r3, [sp, #12]
 800719e:	6923      	ldr	r3, [r4, #16]
 80071a0:	9302      	str	r3, [sp, #8]
 80071a2:	68e3      	ldr	r3, [r4, #12]
 80071a4:	9301      	str	r3, [sp, #4]
 80071a6:	68a3      	ldr	r3, [r4, #8]
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071ae:	4631      	mov	r1, r6
 80071b0:	4628      	mov	r0, r5
 80071b2:	f7fb fe9b 	bl	8002eec <print_formatted>
		break;
 80071b6:	e73b      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80071b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80071ba:	930a      	str	r3, [sp, #40]	; 0x28
 80071bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80071be:	9309      	str	r3, [sp, #36]	; 0x24
 80071c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071c2:	9308      	str	r3, [sp, #32]
 80071c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071c6:	9307      	str	r3, [sp, #28]
 80071c8:	6a23      	ldr	r3, [r4, #32]
 80071ca:	9306      	str	r3, [sp, #24]
 80071cc:	69e3      	ldr	r3, [r4, #28]
 80071ce:	9305      	str	r3, [sp, #20]
 80071d0:	69a3      	ldr	r3, [r4, #24]
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	6963      	ldr	r3, [r4, #20]
 80071d6:	9303      	str	r3, [sp, #12]
 80071d8:	6923      	ldr	r3, [r4, #16]
 80071da:	9302      	str	r3, [sp, #8]
 80071dc:	68e3      	ldr	r3, [r4, #12]
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	68a3      	ldr	r3, [r4, #8]
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071e8:	4631      	mov	r1, r6
 80071ea:	4628      	mov	r0, r5
 80071ec:	f7fb fe7e 	bl	8002eec <print_formatted>
		break;
 80071f0:	e71e      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80071f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80071f8:	930a      	str	r3, [sp, #40]	; 0x28
 80071fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80071fc:	9309      	str	r3, [sp, #36]	; 0x24
 80071fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007200:	9308      	str	r3, [sp, #32]
 8007202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007204:	9307      	str	r3, [sp, #28]
 8007206:	6a23      	ldr	r3, [r4, #32]
 8007208:	9306      	str	r3, [sp, #24]
 800720a:	69e3      	ldr	r3, [r4, #28]
 800720c:	9305      	str	r3, [sp, #20]
 800720e:	69a3      	ldr	r3, [r4, #24]
 8007210:	9304      	str	r3, [sp, #16]
 8007212:	6963      	ldr	r3, [r4, #20]
 8007214:	9303      	str	r3, [sp, #12]
 8007216:	6923      	ldr	r3, [r4, #16]
 8007218:	9302      	str	r3, [sp, #8]
 800721a:	68e3      	ldr	r3, [r4, #12]
 800721c:	9301      	str	r3, [sp, #4]
 800721e:	68a3      	ldr	r3, [r4, #8]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007226:	4631      	mov	r1, r6
 8007228:	4628      	mov	r0, r5
 800722a:	f7fb fe5f 	bl	8002eec <print_formatted>
		break;
 800722e:	e6ff      	b.n	8007030 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8007230:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007232:	930c      	str	r3, [sp, #48]	; 0x30
 8007234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007236:	930b      	str	r3, [sp, #44]	; 0x2c
 8007238:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800723a:	930a      	str	r3, [sp, #40]	; 0x28
 800723c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800723e:	9309      	str	r3, [sp, #36]	; 0x24
 8007240:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007242:	9308      	str	r3, [sp, #32]
 8007244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007246:	9307      	str	r3, [sp, #28]
 8007248:	6a23      	ldr	r3, [r4, #32]
 800724a:	9306      	str	r3, [sp, #24]
 800724c:	69e3      	ldr	r3, [r4, #28]
 800724e:	9305      	str	r3, [sp, #20]
 8007250:	69a3      	ldr	r3, [r4, #24]
 8007252:	9304      	str	r3, [sp, #16]
 8007254:	6963      	ldr	r3, [r4, #20]
 8007256:	9303      	str	r3, [sp, #12]
 8007258:	6923      	ldr	r3, [r4, #16]
 800725a:	9302      	str	r3, [sp, #8]
 800725c:	68e3      	ldr	r3, [r4, #12]
 800725e:	9301      	str	r3, [sp, #4]
 8007260:	68a3      	ldr	r3, [r4, #8]
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007268:	4631      	mov	r1, r6
 800726a:	4628      	mov	r0, r5
 800726c:	f7fb fe3e 	bl	8002eec <print_formatted>
}
 8007270:	e6de      	b.n	8007030 <std_print+0x78>

08007272 <log_output_flush>:
		     output->control_block->offset,
 8007272:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 8007274:	6881      	ldr	r1, [r0, #8]
{
 8007276:	b510      	push	{r4, lr}
 8007278:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 800727a:	e9d2 2300 	ldrd	r2, r3, [r2]
 800727e:	6800      	ldr	r0, [r0, #0]
 8007280:	f7ff fe8d 	bl	8006f9e <buffer_write>
	output->control_block->offset = 0;
 8007284:	6863      	ldr	r3, [r4, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]
}
 800728a:	bd10      	pop	{r4, pc}

0800728c <out_func>:
{
 800728c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 800728e:	684b      	ldr	r3, [r1, #4]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68cb      	ldr	r3, [r1, #12]
 8007294:	429a      	cmp	r2, r3
{
 8007296:	4605      	mov	r5, r0
 8007298:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800729a:	d102      	bne.n	80072a2 <out_func+0x16>
		log_output_flush(out_ctx);
 800729c:	4608      	mov	r0, r1
 800729e:	f7ff ffe8 	bl	8007272 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80072a2:	6863      	ldr	r3, [r4, #4]
 80072a4:	f3bf 8f5b 	dmb	ish
 80072a8:	e853 2f00 	ldrex	r2, [r3]
 80072ac:	1c51      	adds	r1, r2, #1
 80072ae:	e843 1000 	strex	r0, r1, [r3]
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d1f8      	bne.n	80072a8 <out_func+0x1c>
 80072b6:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 80072ba:	68a3      	ldr	r3, [r4, #8]
 80072bc:	549d      	strb	r5, [r3, r2]
}
 80072be:	2000      	movs	r0, #0
 80072c0:	bd38      	pop	{r3, r4, r5, pc}

080072c2 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 80072c2:	2200      	movs	r2, #0
{
 80072c4:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 80072c6:	4611      	mov	r1, r2
 80072c8:	2006      	movs	r0, #6
 80072ca:	f7fc fba9 	bl	8003a20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80072ce:	2200      	movs	r2, #0
 80072d0:	4611      	mov	r1, r2
 80072d2:	2007      	movs	r0, #7
 80072d4:	f7fc fba4 	bl	8003a20 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 80072d8:	2200      	movs	r2, #0
 80072da:	4611      	mov	r1, r2
 80072dc:	2008      	movs	r0, #8
 80072de:	f7fc fb9f 	bl	8003a20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80072e2:	2200      	movs	r2, #0
 80072e4:	4611      	mov	r1, r2
 80072e6:	2009      	movs	r0, #9
 80072e8:	f7fc fb9a 	bl	8003a20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80072ec:	2200      	movs	r2, #0
 80072ee:	4611      	mov	r1, r2
 80072f0:	200a      	movs	r0, #10
 80072f2:	f7fc fb95 	bl	8003a20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 80072f6:	2200      	movs	r2, #0
 80072f8:	4611      	mov	r1, r2
 80072fa:	2017      	movs	r0, #23
 80072fc:	f7fc fb90 	bl	8003a20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8007300:	2200      	movs	r2, #0
 8007302:	4611      	mov	r1, r2
 8007304:	2028      	movs	r0, #40	; 0x28
 8007306:	f7fc fb8b 	bl	8003a20 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 800730a:	2200      	movs	r2, #0
 800730c:	4611      	mov	r1, r2
 800730e:	2001      	movs	r0, #1
 8007310:	f7fc fb86 	bl	8003a20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8007314:	2200      	movs	r2, #0
 8007316:	4611      	mov	r1, r2
 8007318:	202a      	movs	r0, #42	; 0x2a
 800731a:	f7fc fb81 	bl	8003a20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 800731e:	2200      	movs	r2, #0
 8007320:	4611      	mov	r1, r2
 8007322:	2002      	movs	r0, #2
 8007324:	f7fc fb7c 	bl	8003a20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8007328:	2200      	movs	r2, #0
 800732a:	4611      	mov	r1, r2
 800732c:	2003      	movs	r0, #3
 800732e:	f7fc fb77 	bl	8003a20 <z_arm_irq_priority_set>
}
 8007332:	2000      	movs	r0, #0
 8007334:	bd08      	pop	{r3, pc}

08007336 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 8007336:	6902      	ldr	r2, [r0, #16]
 8007338:	2117      	movs	r1, #23
 800733a:	2016      	movs	r0, #22
 800733c:	f7fc b84a 	b.w	80033d4 <__stm32_exti_isr.isra.0>

08007340 <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 8007340:	6902      	ldr	r2, [r0, #16]
 8007342:	2116      	movs	r1, #22
 8007344:	2015      	movs	r0, #21
 8007346:	f7fc b845 	b.w	80033d4 <__stm32_exti_isr.isra.0>

0800734a <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 800734a:	6902      	ldr	r2, [r0, #16]
 800734c:	2113      	movs	r1, #19
 800734e:	2012      	movs	r0, #18
 8007350:	f7fc b840 	b.w	80033d4 <__stm32_exti_isr.isra.0>

08007354 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 8007354:	6902      	ldr	r2, [r0, #16]
 8007356:	2111      	movs	r1, #17
 8007358:	2010      	movs	r0, #16
 800735a:	f7fc b83b 	b.w	80033d4 <__stm32_exti_isr.isra.0>

0800735e <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 800735e:	6902      	ldr	r2, [r0, #16]
 8007360:	2110      	movs	r1, #16
 8007362:	200a      	movs	r0, #10
 8007364:	f7fc b836 	b.w	80033d4 <__stm32_exti_isr.isra.0>

08007368 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8007368:	6902      	ldr	r2, [r0, #16]
 800736a:	210a      	movs	r1, #10
 800736c:	2005      	movs	r0, #5
 800736e:	f7fc b831 	b.w	80033d4 <__stm32_exti_isr.isra.0>

08007372 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8007372:	6902      	ldr	r2, [r0, #16]
 8007374:	2105      	movs	r1, #5
 8007376:	2004      	movs	r0, #4
 8007378:	f7fc b82c 	b.w	80033d4 <__stm32_exti_isr.isra.0>

0800737c <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 800737c:	6902      	ldr	r2, [r0, #16]
 800737e:	2104      	movs	r1, #4
 8007380:	2003      	movs	r0, #3
 8007382:	f7fc b827 	b.w	80033d4 <__stm32_exti_isr.isra.0>

08007386 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8007386:	6902      	ldr	r2, [r0, #16]
 8007388:	2103      	movs	r1, #3
 800738a:	2002      	movs	r0, #2
 800738c:	f7fc b822 	b.w	80033d4 <__stm32_exti_isr.isra.0>

08007390 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8007390:	6902      	ldr	r2, [r0, #16]
 8007392:	2102      	movs	r1, #2
 8007394:	2001      	movs	r0, #1
 8007396:	f7fc b81d 	b.w	80033d4 <__stm32_exti_isr.isra.0>

0800739a <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 800739a:	6902      	ldr	r2, [r0, #16]
 800739c:	2101      	movs	r1, #1
 800739e:	2000      	movs	r0, #0
 80073a0:	f7fc b818 	b.w	80033d4 <__stm32_exti_isr.isra.0>

080073a4 <config_pll_init>:
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 80073a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80073a8:	2208      	movs	r2, #8
 80073aa:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(STM32_PLL_P_DIVISOR);
 80073ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073b2:	6083      	str	r3, [r0, #8]
}
 80073b4:	4770      	bx	lr

080073b6 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 80073b6:	4770      	bx	lr

080073b8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 80073b8:	2100      	movs	r1, #0
 80073ba:	2001      	movs	r0, #1
 80073bc:	f7fc bc04 	b.w	8003bc8 <z_arm_fatal_error>

080073c0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 80073c0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 80073c2:	6800      	ldr	r0, [r0, #0]
 80073c4:	f7fc bc00 	b.w	8003bc8 <z_arm_fatal_error>

080073c8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 80073c8:	b508      	push	{r3, lr}
	handler();
 80073ca:	f7fc fc71 	bl	8003cb0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 80073ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80073d2:	f7fc bef1 	b.w	80041b8 <z_arm_exc_exit>

080073d6 <_stdout_hook_default>:
}
 80073d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073da:	4770      	bx	lr

080073dc <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80073dc:	6843      	ldr	r3, [r0, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80073e0:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 80073e2:	600b      	str	r3, [r1, #0]
}
 80073e4:	2000      	movs	r0, #0
 80073e6:	4770      	bx	lr

080073e8 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80073e8:	6843      	ldr	r3, [r0, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80073ec:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 80073ee:	4042      	eors	r2, r0
 80073f0:	400a      	ands	r2, r1
 80073f2:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 80073f4:	615a      	str	r2, [r3, #20]
}
 80073f6:	2000      	movs	r0, #0
 80073f8:	4770      	bx	lr

080073fa <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80073fa:	6843      	ldr	r3, [r0, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
}
 80073fe:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8007400:	6199      	str	r1, [r3, #24]
}
 8007402:	4770      	bx	lr

08007404 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8007404:	6843      	ldr	r3, [r0, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007408:	0409      	lsls	r1, r1, #16
 800740a:	6199      	str	r1, [r3, #24]
}
 800740c:	2000      	movs	r0, #0
 800740e:	4770      	bx	lr

08007410 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8007410:	6843      	ldr	r3, [r0, #4]
 8007412:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8007414:	6953      	ldr	r3, [r2, #20]
 8007416:	4059      	eors	r1, r3
 8007418:	6151      	str	r1, [r2, #20]
}
 800741a:	2000      	movs	r0, #0
 800741c:	4770      	bx	lr

0800741e <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->data;
 800741e:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8007420:	6898      	ldr	r0, [r3, #8]
{
 8007422:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8007424:	b158      	cbz	r0, 800743e <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8007426:	2400      	movs	r4, #0
 8007428:	4281      	cmp	r1, r0
 800742a:	d112      	bne.n	8007452 <gpio_stm32_manage_callback+0x34>
	return node->next;
 800742c:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 800742e:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8007430:	b954      	cbnz	r4, 8007448 <gpio_stm32_manage_callback+0x2a>
 8007432:	428d      	cmp	r5, r1
	list->head = node;
 8007434:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8007436:	d100      	bne.n	800743a <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8007438:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 800743a:	2000      	movs	r0, #0
 800743c:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 800743e:	b96a      	cbnz	r2, 800745c <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8007440:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 8007442:	bd30      	pop	{r4, r5, pc}
 8007444:	4628      	mov	r0, r5
 8007446:	e7ef      	b.n	8007428 <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8007448:	428d      	cmp	r5, r1
	parent->next = child;
 800744a:	6020      	str	r0, [r4, #0]
	list->tail = node;
 800744c:	bf08      	it	eq
 800744e:	60dc      	streq	r4, [r3, #12]
}
 8007450:	e7f3      	b.n	800743a <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8007452:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8007454:	4604      	mov	r4, r0
 8007456:	2d00      	cmp	r5, #0
 8007458:	d1f4      	bne.n	8007444 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 800745a:	b13a      	cbz	r2, 800746c <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 800745c:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	600a      	str	r2, [r1, #0]
	list->head = node;
 8007462:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8007464:	2800      	cmp	r0, #0
 8007466:	d1eb      	bne.n	8007440 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8007468:	60d9      	str	r1, [r3, #12]
}
 800746a:	e7ea      	b.n	8007442 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 800746c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8007470:	e7e7      	b.n	8007442 <gpio_stm32_manage_callback+0x24>

08007472 <gpio_stm32_isr>:
{
 8007472:	460b      	mov	r3, r1
 8007474:	6889      	ldr	r1, [r1, #8]
 8007476:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8007478:	b171      	cbz	r1, 8007498 <gpio_stm32_isr+0x26>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800747a:	685e      	ldr	r6, [r3, #4]
	return node->next;
 800747c:	680c      	ldr	r4, [r1, #0]
 800747e:	2301      	movs	r3, #1
 8007480:	fa03 f500 	lsl.w	r5, r3, r0
		if (cb->pin_mask & pins) {
 8007484:	688a      	ldr	r2, [r1, #8]
 8007486:	402a      	ands	r2, r5
 8007488:	d002      	beq.n	8007490 <gpio_stm32_isr+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800748a:	684b      	ldr	r3, [r1, #4]
 800748c:	4630      	mov	r0, r6
 800748e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8007490:	b114      	cbz	r4, 8007498 <gpio_stm32_isr+0x26>
 8007492:	4621      	mov	r1, r4
 8007494:	6824      	ldr	r4, [r4, #0]
 8007496:	e7f5      	b.n	8007484 <gpio_stm32_isr+0x12>
}
 8007498:	bd70      	pop	{r4, r5, r6, pc}

0800749a <gpio_stm32_configure>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800749a:	6840      	ldr	r0, [r0, #4]
{
 800749c:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800749e:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 80074a0:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80074a2:	6867      	ldr	r7, [r4, #4]
 80074a4:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 80074a6:	f3c2 1680 	ubfx	r6, r2, #6, #1
 80074aa:	ea27 0700 	bic.w	r7, r7, r0
 80074ae:	408e      	lsls	r6, r1
 80074b0:	433e      	orrs	r6, r7
 80074b2:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b4:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 80074b8:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80074bc:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80074c0:	f04f 0e03 	mov.w	lr, #3
 80074c4:	007f      	lsls	r7, r7, #1
 80074c6:	fa0e f707 	lsl.w	r7, lr, r7
 80074ca:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ce:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 80074d2:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 80074d6:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 80074da:	007f      	lsls	r7, r7, #1
 80074dc:	40be      	lsls	r6, r7
 80074de:	ea46 060c 	orr.w	r6, r6, ip
 80074e2:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074e4:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 80074e8:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80074ec:	68e7      	ldr	r7, [r4, #12]
 80074ee:	0076      	lsls	r6, r6, #1
 80074f0:	fa0e f606 	lsl.w	r6, lr, r6
 80074f4:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f8:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 80074fc:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8007500:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8007504:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8007506:	f3c2 2241 	ubfx	r2, r2, #9, #2
 800750a:	40b2      	lsls	r2, r6
 800750c:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 800750e:	2d20      	cmp	r5, #32
 8007510:	60e2      	str	r2, [r4, #12]
 8007512:	d115      	bne.n	8007540 <gpio_stm32_configure+0xa6>
		if (pin < 8) {
 8007514:	2907      	cmp	r1, #7
 8007516:	dc2c      	bgt.n	8007572 <gpio_stm32_configure+0xd8>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007518:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800751c:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 800751e:	b332      	cbz	r2, 800756e <gpio_stm32_configure+0xd4>
  return __builtin_clz(value);
 8007520:	fab2 f282 	clz	r2, r2
 8007524:	0092      	lsls	r2, r2, #2
 8007526:	260f      	movs	r6, #15
 8007528:	fa06 f202 	lsl.w	r2, r6, r2
 800752c:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007530:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8007534:	fab2 f282 	clz	r2, r2
 8007538:	0092      	lsls	r2, r2, #2
 800753a:	4093      	lsls	r3, r2
 800753c:	430b      	orrs	r3, r1
 800753e:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007540:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8007544:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007548:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800754a:	fa90 f0a0 	rbit	r0, r0
 800754e:	2103      	movs	r1, #3
 8007550:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 8007552:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8007556:	092d      	lsrs	r5, r5, #4
 8007558:	fa01 f303 	lsl.w	r3, r1, r3
 800755c:	0040      	lsls	r0, r0, #1
 800755e:	ea22 0303 	bic.w	r3, r2, r3
 8007562:	fa05 f000 	lsl.w	r0, r5, r0
 8007566:	4318      	orrs	r0, r3
 8007568:	6020      	str	r0, [r4, #0]
}
 800756a:	2000      	movs	r0, #0
 800756c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800756e:	462a      	mov	r2, r5
 8007570:	e7d8      	b.n	8007524 <gpio_stm32_configure+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007572:	0a02      	lsrs	r2, r0, #8
 8007574:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007576:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800757a:	b181      	cbz	r1, 800759e <gpio_stm32_configure+0x104>
  return __builtin_clz(value);
 800757c:	fab1 f181 	clz	r1, r1
 8007580:	0089      	lsls	r1, r1, #2
 8007582:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007584:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8007588:	fab2 f282 	clz	r2, r2
 800758c:	fa07 f101 	lsl.w	r1, r7, r1
 8007590:	0092      	lsls	r2, r2, #2
 8007592:	ea26 0101 	bic.w	r1, r6, r1
 8007596:	4093      	lsls	r3, r2
 8007598:	430b      	orrs	r3, r1
 800759a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800759c:	e7d0      	b.n	8007540 <gpio_stm32_configure+0xa6>
    return 32U;
 800759e:	4629      	mov	r1, r5
 80075a0:	e7ee      	b.n	8007580 <gpio_stm32_configure+0xe6>

080075a2 <gpio_stm32_config>:
	if ((flags & GPIO_OUTPUT) != 0) {
 80075a2:	0593      	lsls	r3, r2, #22
{
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	4605      	mov	r5, r0
 80075a8:	460e      	mov	r6, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 80075aa:	d519      	bpl.n	80075e0 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80075ac:	0794      	lsls	r4, r2, #30
 80075ae:	d510      	bpl.n	80075d2 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80075b0:	0750      	lsls	r0, r2, #29
 80075b2:	d531      	bpl.n	8007618 <gpio_stm32_config+0x76>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80075b4:	2450      	movs	r4, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 80075b6:	06d1      	lsls	r1, r2, #27
 80075b8:	d50d      	bpl.n	80075d6 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80075ba:	f444 7400 	orr.w	r4, r4, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80075be:	0513      	lsls	r3, r2, #20
 80075c0:	d41f      	bmi.n	8007602 <gpio_stm32_config+0x60>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 80075c2:	0552      	lsls	r2, r2, #21
 80075c4:	d515      	bpl.n	80075f2 <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 80075c6:	2101      	movs	r1, #1
 80075c8:	40b1      	lsls	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	f7ff ff1a 	bl	8007404 <gpio_stm32_port_clear_bits_raw>
 80075d0:	e00f      	b.n	80075f2 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80075d2:	2410      	movs	r4, #16
 80075d4:	e7ef      	b.n	80075b6 <gpio_stm32_config+0x14>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80075d6:	0693      	lsls	r3, r2, #26
 80075d8:	d5f1      	bpl.n	80075be <gpio_stm32_config+0x1c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80075da:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
	if (err != 0) {
 80075de:	e7ee      	b.n	80075be <gpio_stm32_config+0x1c>
	} else if  ((flags & GPIO_INPUT) != 0) {
 80075e0:	05d0      	lsls	r0, r2, #23
 80075e2:	d514      	bpl.n	800760e <gpio_stm32_config+0x6c>
		if ((flags & GPIO_PULL_UP) != 0) {
 80075e4:	06d1      	lsls	r1, r2, #27
 80075e6:	d414      	bmi.n	8007612 <gpio_stm32_config+0x70>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80075e8:	f012 0420 	ands.w	r4, r2, #32
 80075ec:	bf18      	it	ne
 80075ee:	f44f 6480 	movne.w	r4, #1024	; 0x400
	gpio_stm32_configure(dev, pin, pincfg, 0);
 80075f2:	2300      	movs	r3, #0
 80075f4:	4622      	mov	r2, r4
 80075f6:	4631      	mov	r1, r6
 80075f8:	4628      	mov	r0, r5
 80075fa:	f7ff ff4e 	bl	800749a <gpio_stm32_configure>
 80075fe:	2000      	movs	r0, #0
}
 8007600:	bd70      	pop	{r4, r5, r6, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8007602:	686a      	ldr	r2, [r5, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8007604:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8007606:	6852      	ldr	r2, [r2, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8007608:	40b3      	lsls	r3, r6
	WRITE_REG(gpio->BSRR, pins);
 800760a:	6193      	str	r3, [r2, #24]
	return 0;
 800760c:	e7f1      	b.n	80075f2 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800760e:	2430      	movs	r4, #48	; 0x30
 8007610:	e7ef      	b.n	80075f2 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8007612:	f44f 7400 	mov.w	r4, #512	; 0x200
 8007616:	e7ec      	b.n	80075f2 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 8007618:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return err;
 800761c:	e7f0      	b.n	8007600 <gpio_stm32_config+0x5e>

0800761e <gpio_stm32_init>:
 */
static int gpio_stm32_init(const struct device *dev)
{
	struct gpio_stm32_data *data = dev->data;

	data->dev = dev;
 800761e:	6902      	ldr	r2, [r0, #16]
	return 0;
#else
#ifdef CONFIG_PM_DEVICE
	data->power_state = PM_DEVICE_STATE_ACTIVE;
#endif
	return gpio_stm32_clock_request(dev, true);
 8007620:	2101      	movs	r1, #1
	data->dev = dev;
 8007622:	6050      	str	r0, [r2, #4]
	return gpio_stm32_clock_request(dev, true);
 8007624:	f7fc bf7a 	b.w	800451c <gpio_stm32_clock_request>

08007628 <handle_txe>:
{
 8007628:	4603      	mov	r3, r0
	struct i2c_stm32_data *data = DEV_DATA(dev);
 800762a:	6900      	ldr	r0, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800762c:	685b      	ldr	r3, [r3, #4]
	if (data->current.len) {
 800762e:	6c42      	ldr	r2, [r0, #68]	; 0x44
	I2C_TypeDef *i2c = cfg->i2c;
 8007630:	68db      	ldr	r3, [r3, #12]
{
 8007632:	b410      	push	{r4}
	if (data->current.len) {
 8007634:	b192      	cbz	r2, 800765c <handle_txe+0x34>
		data->current.len--;
 8007636:	3a01      	subs	r2, #1
 8007638:	6442      	str	r2, [r0, #68]	; 0x44
		if (data->current.len == 0U) {
 800763a:	b91a      	cbnz	r2, 8007644 <handle_txe+0x1c>
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_BUF(I2C_TypeDef *I2Cx)
{
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007642:	605a      	str	r2, [r3, #4]
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8007644:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800764c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007650:	4322      	orrs	r2, r4
 8007652:	611a      	str	r2, [r3, #16]
}
 8007654:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->current.buf++;
 8007658:	6481      	str	r1, [r0, #72]	; 0x48
}
 800765a:	4770      	bx	lr
		if (data->current.flags & I2C_MSG_STOP) {
 800765c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800765e:	0791      	lsls	r1, r2, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8007660:	bf42      	ittt	mi
 8007662:	681a      	ldrmi	r2, [r3, #0]
 8007664:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 8007668:	601a      	strmi	r2, [r3, #0]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 800766a:	695a      	ldr	r2, [r3, #20]
		if (LL_I2C_IsActiveFlag_BTF(i2c)) {
 800766c:	0752      	lsls	r2, r2, #29
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800766e:	bf48      	it	mi
 8007670:	691b      	ldrmi	r3, [r3, #16]
}
 8007672:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_impl_k_sem_give(sem);
 8007676:	f7fe b909 	b.w	800588c <z_impl_k_sem_give>

0800767a <stm32_i2c_enable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 800767a:	68c3      	ldr	r3, [r0, #12]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007682:	605a      	str	r2, [r3, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800768a:	605a      	str	r2, [r3, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007692:	605a      	str	r2, [r3, #4]
}
 8007694:	4770      	bx	lr

08007696 <stm32_i2c_disable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 8007696:	68c3      	ldr	r3, [r0, #12]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800769e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80076a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80076ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076be:	605a      	str	r2, [r3, #4]
}
 80076c0:	4770      	bx	lr

080076c2 <stm32_i2c_reset.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 80076c2:	68c1      	ldr	r1, [r0, #12]
static void stm32_i2c_reset(const struct device *dev)
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80076c6:	680b      	ldr	r3, [r1, #0]
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	600b      	str	r3, [r1, #0]
	stm32_i2c_disable_transfer_interrupts(dev);
 80076ce:	f7ff ffe2 	bl	8007696 <stm32_i2c_disable_transfer_interrupts.isra.0>
	cr1 = LL_I2C_ReadReg(i2c, CR1);
 80076d2:	680f      	ldr	r7, [r1, #0]
	cr2 = LL_I2C_ReadReg(i2c, CR2);
 80076d4:	684e      	ldr	r6, [r1, #4]
	oar1 = LL_I2C_ReadReg(i2c, OAR1);
 80076d6:	688b      	ldr	r3, [r1, #8]
	oar2 = LL_I2C_ReadReg(i2c, OAR2);
 80076d8:	68cd      	ldr	r5, [r1, #12]
	ccr = LL_I2C_ReadReg(i2c, CCR);
 80076da:	69cc      	ldr	r4, [r1, #28]
	trise = LL_I2C_ReadReg(i2c, TRISE);
 80076dc:	6a08      	ldr	r0, [r1, #32]
	fltr = LL_I2C_ReadReg(i2c, FLTR);
 80076de:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  SET_BIT(I2Cx->CR1, I2C_CR1_SWRST);
 80076e0:	f8d1 c000 	ldr.w	ip, [r1]
 80076e4:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 80076e8:	f8c1 c000 	str.w	ip, [r1]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_SWRST);
 80076ec:	f8d1 c000 	ldr.w	ip, [r1]
	oar1 = LL_I2C_ReadReg(i2c, OAR1);
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 80076f6:	b2bf      	uxth	r7, r7
 80076f8:	b2b6      	uxth	r6, r6
	LL_I2C_WriteReg(i2c, OAR1, oar1);
 80076fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076fe:	b2ad      	uxth	r5, r5
 8007700:	b2a4      	uxth	r4, r4
 8007702:	b280      	uxth	r0, r0
 8007704:	b292      	uxth	r2, r2
 8007706:	f8c1 c000 	str.w	ip, [r1]
	LL_I2C_WriteReg(i2c, CR1, cr1);
 800770a:	600f      	str	r7, [r1, #0]
	LL_I2C_WriteReg(i2c, CR2, cr2);
 800770c:	604e      	str	r6, [r1, #4]
	LL_I2C_WriteReg(i2c, OAR1, oar1);
 800770e:	608b      	str	r3, [r1, #8]
	LL_I2C_WriteReg(i2c, OAR2, oar2);
 8007710:	60cd      	str	r5, [r1, #12]
	LL_I2C_WriteReg(i2c, CCR, ccr);
 8007712:	61cc      	str	r4, [r1, #28]
	LL_I2C_WriteReg(i2c, TRISE, trise);
 8007714:	6208      	str	r0, [r1, #32]
	LL_I2C_WriteReg(i2c, FLTR, fltr);
 8007716:	624a      	str	r2, [r1, #36]	; 0x24
}
 8007718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800771a <msg_init.constprop.0>:
static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
 800771a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771e:	461f      	mov	r7, r3
	I2C_TypeDef *i2c = cfg->i2c;
 8007720:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8007722:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8007724:	68dd      	ldr	r5, [r3, #12]
static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
 8007726:	460e      	mov	r6, r1
 8007728:	4690      	mov	r8, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
 800772a:	4620      	mov	r0, r4
 800772c:	f7fe f8f6 	bl	800591c <z_impl_k_sem_reset>
	data->current.len = msg->len;
 8007730:	6873      	ldr	r3, [r6, #4]
 8007732:	6463      	str	r3, [r4, #68]	; 0x44
	data->current.buf = msg->buf;
 8007734:	6833      	ldr	r3, [r6, #0]
 8007736:	64a3      	str	r3, [r4, #72]	; 0x48
	data->current.is_write = (transfer == I2C_REQUEST_WRITE);
 8007738:	f087 0701 	eor.w	r7, r7, #1
	data->current.is_restart = 0U;
 800773c:	2300      	movs	r3, #0
	data->current.flags = msg->flags;
 800773e:	7a32      	ldrb	r2, [r6, #8]
	data->current.is_restart = 0U;
 8007740:	62a3      	str	r3, [r4, #40]	; 0x28
	data->current.is_arlo = 0U;
 8007742:	e9c4 730c 	strd	r7, r3, [r4, #48]	; 0x30
	data->current.is_nack = 0U;
 8007746:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800774a:	682b      	ldr	r3, [r5, #0]
	data->current.flags = msg->flags;
 800774c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800774e:	f043 0301 	orr.w	r3, r3, #1
	data->current.msg = msg;
 8007752:	6426      	str	r6, [r4, #64]	; 0x40
	data->slave_address = slave;
 8007754:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
 8007758:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 800775a:	682b      	ldr	r3, [r5, #0]
 800775c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007760:	602b      	str	r3, [r5, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8007762:	682b      	ldr	r3, [r5, #0]
	if (msg->flags & I2C_MSG_RESTART) {
 8007764:	0751      	lsls	r1, r2, #29
 8007766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800776a:	602b      	str	r3, [r5, #0]
 800776c:	d50b      	bpl.n	8007786 <msg_init.constprop.0+0x6c>
	uint16_t cr1 = LL_I2C_ReadReg(i2c, CR1);
 800776e:	682b      	ldr	r3, [r5, #0]
	if (cr1 & I2C_CR1_STOP) {
 8007770:	059a      	lsls	r2, r3, #22
		LL_I2C_WriteReg(i2c, CR1, cr1 & ~I2C_CR1_STOP);
 8007772:	bf41      	itttt	mi
 8007774:	f423 7300 	bicmi.w	r3, r3, #512	; 0x200
 8007778:	041b      	lslmi	r3, r3, #16
 800777a:	0c1b      	lsrmi	r3, r3, #16
 800777c:	602b      	strmi	r3, [r5, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800777e:	682b      	ldr	r3, [r5, #0]
 8007780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007784:	602b      	str	r3, [r5, #0]
}
 8007786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800778a <msg_end.constprop.0>:
	struct i2c_stm32_data *data = DEV_DATA(dev);
 800778a:	6902      	ldr	r2, [r0, #16]
static int32_t msg_end(const struct device *dev, uint8_t *next_msg_flags,
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4604      	mov	r4, r0
	if (data->current.is_nack || data->current.is_err ||
 8007790:	e9d2 500e 	ldrd	r5, r0, [r2, #56]	; 0x38
 8007794:	ea55 0c00 	orrs.w	ip, r5, r0
	    data->current.is_arlo) {
 8007798:	6b53      	ldr	r3, [r2, #52]	; 0x34
	if (data->current.is_nack || data->current.is_err ||
 800779a:	d103      	bne.n	80077a4 <msg_end.constprop.0+0x1a>
 800779c:	b1ab      	cbz	r3, 80077ca <msg_end.constprop.0+0x40>
		data->current.is_arlo = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	6353      	str	r3, [r2, #52]	; 0x34
 80077a2:	e001      	b.n	80077a8 <msg_end.constprop.0+0x1e>
	if (data->current.is_arlo) {
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1fa      	bne.n	800779e <msg_end.constprop.0+0x14>
	if (data->current.is_nack) {
 80077a8:	b10d      	cbz	r5, 80077ae <msg_end.constprop.0+0x24>
		data->current.is_nack = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	6393      	str	r3, [r2, #56]	; 0x38
	if (data->current.is_err) {
 80077ae:	b108      	cbz	r0, 80077b4 <msg_end.constprop.0+0x2a>
		data->current.is_err = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	63d3      	str	r3, [r2, #60]	; 0x3c
	stm32_i2c_master_finish(dev);
 80077b4:	6860      	ldr	r0, [r4, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 80077b6:	68c1      	ldr	r1, [r0, #12]
	stm32_i2c_disable_transfer_interrupts(dev);
 80077b8:	f7ff ff6d 	bl	8007696 <stm32_i2c_disable_transfer_interrupts.isra.0>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80077bc:	680b      	ldr	r3, [r1, #0]
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	600b      	str	r3, [r1, #0]
	return -EIO;
 80077c4:	f06f 0004 	mvn.w	r0, #4
}
 80077c8:	e009      	b.n	80077de <msg_end.constprop.0+0x54>
	if (!next_msg_flags) {
 80077ca:	b949      	cbnz	r1, 80077e0 <msg_end.constprop.0+0x56>
		stm32_i2c_master_finish(dev);
 80077cc:	6860      	ldr	r0, [r4, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 80077ce:	68c4      	ldr	r4, [r0, #12]
	stm32_i2c_disable_transfer_interrupts(dev);
 80077d0:	f7ff ff61 	bl	8007696 <stm32_i2c_disable_transfer_interrupts.isra.0>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	f023 0301 	bic.w	r3, r3, #1
 80077da:	6023      	str	r3, [r4, #0]
	return 0;
 80077dc:	4608      	mov	r0, r1
}
 80077de:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
 80077e0:	4618      	mov	r0, r3
 80077e2:	e7fc      	b.n	80077de <msg_end.constprop.0+0x54>

080077e4 <handle_rxne>:
{
 80077e4:	4603      	mov	r3, r0
	struct i2c_stm32_data *data = DEV_DATA(dev);
 80077e6:	6900      	ldr	r0, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 80077e8:	685b      	ldr	r3, [r3, #4]
	if (data->current.len > 0) {
 80077ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
	I2C_TypeDef *i2c = cfg->i2c;
 80077ec:	68db      	ldr	r3, [r3, #12]
	if (data->current.len > 0) {
 80077ee:	2a00      	cmp	r2, #0
 80077f0:	d037      	beq.n	8007862 <handle_rxne+0x7e>
		switch (data->current.len) {
 80077f2:	2a02      	cmp	r2, #2
 80077f4:	d020      	beq.n	8007838 <handle_rxne+0x54>
 80077f6:	2a03      	cmp	r2, #3
 80077f8:	d026      	beq.n	8007848 <handle_rxne+0x64>
 80077fa:	2a01      	cmp	r2, #1
 80077fc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80077fe:	d128      	bne.n	8007852 <handle_rxne+0x6e>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007806:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800780e:	601a      	str	r2, [r3, #0]
			if (data->current.flags & I2C_MSG_STOP) {
 8007810:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007812:	0792      	lsls	r2, r2, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8007814:	bf42      	ittt	mi
 8007816:	681a      	ldrmi	r2, [r3, #0]
 8007818:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800781c:	601a      	strmi	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007824:	605a      	str	r2, [r3, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8007826:	691b      	ldr	r3, [r3, #16]
			data->current.len--;
 8007828:	2200      	movs	r2, #0
 800782a:	6442      	str	r2, [r0, #68]	; 0x44
 800782c:	700b      	strb	r3, [r1, #0]
			data->current.buf++;
 800782e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007830:	3301      	adds	r3, #1
 8007832:	6483      	str	r3, [r0, #72]	; 0x48
	z_impl_k_sem_give(sem);
 8007834:	f7fe b82a 	b.w	800588c <z_impl_k_sem_give>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800783e:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007846:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800784e:	605a      	str	r2, [r3, #4]
}
 8007850:	4770      	bx	lr
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8007852:	691b      	ldr	r3, [r3, #16]
			data->current.len--;
 8007854:	3a01      	subs	r2, #1
 8007856:	6442      	str	r2, [r0, #68]	; 0x44
 8007858:	700b      	strb	r3, [r1, #0]
			data->current.buf++;
 800785a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800785c:	3301      	adds	r3, #1
 800785e:	6483      	str	r3, [r0, #72]	; 0x48
}
 8007860:	4770      	bx	lr
		if (data->current.flags & I2C_MSG_STOP) {
 8007862:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007864:	0792      	lsls	r2, r2, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8007866:	bf42      	ittt	mi
 8007868:	681a      	ldrmi	r2, [r3, #0]
 800786a:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800786e:	601a      	strmi	r2, [r3, #0]
}
 8007870:	e7e0      	b.n	8007834 <handle_rxne+0x50>

08007872 <stm32_i2c_event_isr>:
	I2C_TypeDef *i2c = cfg->i2c;
 8007872:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8007874:	6902      	ldr	r2, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8007876:	68db      	ldr	r3, [r3, #12]
{
 8007878:	b410      	push	{r4}
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 800787a:	695c      	ldr	r4, [r3, #20]
	if (LL_I2C_IsActiveFlag_SB(i2c)) {
 800787c:	07e4      	lsls	r4, r4, #31
{
 800787e:	b085      	sub	sp, #20
 8007880:	4601      	mov	r1, r0
	if (LL_I2C_IsActiveFlag_SB(i2c)) {
 8007882:	d531      	bpl.n	80078e8 <stm32_i2c_event_isr+0x76>
	if (I2C_ADDR_10_BITS & data->dev_config) {
 8007884:	6a10      	ldr	r0, [r2, #32]
		slave = (((saddr & 0x0300) >> 7) & 0xFF);
 8007886:	8c91      	ldrh	r1, [r2, #36]	; 0x24
	if (I2C_ADDR_10_BITS & data->dev_config) {
 8007888:	f010 0001 	ands.w	r0, r0, #1
 800788c:	d014      	beq.n	80078b8 <stm32_i2c_event_isr+0x46>
		if (data->current.is_restart == 0U) {
 800788e:	6a94      	ldr	r4, [r2, #40]	; 0x28
		slave = (((saddr & 0x0300) >> 7) & 0xFF);
 8007890:	11c9      	asrs	r1, r1, #7
 8007892:	f001 0106 	and.w	r1, r1, #6
		if (data->current.is_restart == 0U) {
 8007896:	b95c      	cbnz	r4, 80078b0 <stm32_i2c_event_isr+0x3e>
		uint8_t header = slave | HEADER;
 8007898:	f041 01f0 	orr.w	r1, r1, #240	; 0xf0
 800789c:	6290      	str	r0, [r2, #40]	; 0x28
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80078a4:	4311      	orrs	r1, r2
 80078a6:	6119      	str	r1, [r3, #16]
}
 80078a8:	b005      	add	sp, #20
 80078aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078ae:	4770      	bx	lr
			header |= I2C_REQUEST_READ;
 80078b0:	f041 01f1 	orr.w	r1, r1, #241	; 0xf1
			data->current.is_restart = 0U;
 80078b4:	2000      	movs	r0, #0
 80078b6:	e7f1      	b.n	800789c <stm32_i2c_event_isr+0x2a>
	if (data->current.is_write) {
 80078b8:	6b10      	ldr	r0, [r2, #48]	; 0x30
	slave = (saddr << 1) & 0xFF;
 80078ba:	0049      	lsls	r1, r1, #1
	if (data->current.is_write) {
 80078bc:	b120      	cbz	r0, 80078c8 <stm32_i2c_event_isr+0x56>
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	b2c9      	uxtb	r1, r1
 80078c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80078c6:	e7ed      	b.n	80078a4 <stm32_i2c_event_isr+0x32>
 80078c8:	6918      	ldr	r0, [r3, #16]
		if (data->current.len == 2) {
 80078ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
		LL_I2C_TransmitData8(i2c, slave | I2C_REQUEST_READ);
 80078cc:	f041 0101 	orr.w	r1, r1, #1
 80078d0:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80078d4:	b2c9      	uxtb	r1, r1
 80078d6:	4301      	orrs	r1, r0
		if (data->current.len == 2) {
 80078d8:	2a02      	cmp	r2, #2
 80078da:	6119      	str	r1, [r3, #16]
 80078dc:	d1e4      	bne.n	80078a8 <stm32_i2c_event_isr+0x36>
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80078e4:	601a      	str	r2, [r3, #0]
}
 80078e6:	e7df      	b.n	80078a8 <stm32_i2c_event_isr+0x36>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADD10) == (I2C_SR1_ADD10));
 80078e8:	695c      	ldr	r4, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_ADD10(i2c)) {
 80078ea:	0724      	lsls	r4, r4, #28
 80078ec:	d507      	bpl.n	80078fe <stm32_i2c_event_isr+0x8c>
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 80078ee:	6919      	ldr	r1, [r3, #16]
 80078f0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80078f4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80078f8:	430a      	orrs	r2, r1
 80078fa:	611a      	str	r2, [r3, #16]
}
 80078fc:	e7d4      	b.n	80078a8 <stm32_i2c_event_isr+0x36>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 80078fe:	695c      	ldr	r4, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_ADDR(i2c)) {
 8007900:	07a4      	lsls	r4, r4, #30
 8007902:	d539      	bpl.n	8007978 <stm32_i2c_event_isr+0x106>
	if (I2C_ADDR_10_BITS & data->dev_config) {
 8007904:	6a10      	ldr	r0, [r2, #32]
	if (data->current.is_write) {
 8007906:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (I2C_ADDR_10_BITS & data->dev_config) {
 8007908:	07c0      	lsls	r0, r0, #31
 800790a:	d515      	bpl.n	8007938 <stm32_i2c_event_isr+0xc6>
		if (!data->current.is_write && data->current.is_restart) {
 800790c:	b9a9      	cbnz	r1, 800793a <stm32_i2c_event_isr+0xc8>
 800790e:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8007910:	b1d0      	cbz	r0, 8007948 <stm32_i2c_event_isr+0xd6>
			data->current.is_restart = 0U;
 8007912:	6291      	str	r1, [r2, #40]	; 0x28
  tmpreg = I2Cx->SR1;
 8007914:	695a      	ldr	r2, [r3, #20]
 8007916:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8007918:	9a01      	ldr	r2, [sp, #4]
  tmpreg = I2Cx->SR2;
 800791a:	699a      	ldr	r2, [r3, #24]
 800791c:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800791e:	9a01      	ldr	r2, [sp, #4]
	uint16_t cr1 = LL_I2C_ReadReg(i2c, CR1);
 8007920:	681a      	ldr	r2, [r3, #0]
	if (cr1 & I2C_CR1_STOP) {
 8007922:	0591      	lsls	r1, r2, #22
		LL_I2C_WriteReg(i2c, CR1, cr1 & ~I2C_CR1_STOP);
 8007924:	bf41      	itttt	mi
 8007926:	f422 7200 	bicmi.w	r2, r2, #512	; 0x200
 800792a:	0412      	lslmi	r2, r2, #16
 800792c:	0c12      	lsrmi	r2, r2, #16
 800792e:	601a      	strmi	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007936:	e7d5      	b.n	80078e4 <stm32_i2c_event_isr+0x72>
	if (data->current.is_write) {
 8007938:	b131      	cbz	r1, 8007948 <stm32_i2c_event_isr+0xd6>
  tmpreg = I2Cx->SR1;
 800793a:	695a      	ldr	r2, [r3, #20]
 800793c:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800793e:	9a02      	ldr	r2, [sp, #8]
  tmpreg = I2Cx->SR2;
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	9302      	str	r3, [sp, #8]
  (void) tmpreg;
 8007944:	9b02      	ldr	r3, [sp, #8]
}
 8007946:	e7af      	b.n	80078a8 <stm32_i2c_event_isr+0x36>
	} else if (data->current.len == 1U) {
 8007948:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800794a:	2a01      	cmp	r2, #1
 800794c:	d10a      	bne.n	8007964 <stm32_i2c_event_isr+0xf2>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8007954:	601a      	str	r2, [r3, #0]
  tmpreg = I2Cx->SR1;
 8007956:	695a      	ldr	r2, [r3, #20]
 8007958:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 800795a:	9a03      	ldr	r2, [sp, #12]
  tmpreg = I2Cx->SR2;
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8007960:	9b03      	ldr	r3, [sp, #12]
}
 8007962:	e7a1      	b.n	80078a8 <stm32_i2c_event_isr+0x36>
	} else if (data->current.len == 2U) {
 8007964:	2a02      	cmp	r2, #2
 8007966:	d1f6      	bne.n	8007956 <stm32_i2c_event_isr+0xe4>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800796e:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007976:	e7ed      	b.n	8007954 <stm32_i2c_event_isr+0xe2>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8007978:	695c      	ldr	r4, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_BTF(i2c)) {
 800797a:	0764      	lsls	r4, r4, #29
 800797c:	d53b      	bpl.n	80079f6 <stm32_i2c_event_isr+0x184>
	if (data->current.is_write) {
 800797e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8007980:	b12c      	cbz	r4, 800798e <stm32_i2c_event_isr+0x11c>
		handle_txe(dev);
 8007982:	4608      	mov	r0, r1
}
 8007984:	b005      	add	sp, #20
 8007986:	f85d 4b04 	ldr.w	r4, [sp], #4
		handle_txe(dev);
 800798a:	f7ff be4d 	b.w	8007628 <handle_txe>
		switch (data->current.len) {
 800798e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007990:	2902      	cmp	r1, #2
 8007992:	d006      	beq.n	80079a2 <stm32_i2c_event_isr+0x130>
 8007994:	2903      	cmp	r1, #3
 8007996:	d021      	beq.n	80079dc <stm32_i2c_event_isr+0x16a>
}
 8007998:	b005      	add	sp, #20
 800799a:	f85d 4b04 	ldr.w	r4, [sp], #4
		handle_rxne(dev);
 800799e:	f7ff bf21 	b.w	80077e4 <handle_rxne>
			if (data->current.flags & I2C_MSG_STOP) {
 80079a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80079a4:	078c      	lsls	r4, r1, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80079a6:	bf42      	ittt	mi
 80079a8:	6819      	ldrmi	r1, [r3, #0]
 80079aa:	f441 7100 	orrmi.w	r1, r1, #512	; 0x200
 80079ae:	6019      	strmi	r1, [r3, #0]
				data->current.len--;
 80079b0:	2101      	movs	r1, #1
 80079b2:	6451      	str	r1, [r2, #68]	; 0x44
				*data->current.buf = LL_I2C_ReceiveData8(i2c);
 80079b4:	6c91      	ldr	r1, [r2, #72]	; 0x48
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80079b6:	6918      	ldr	r0, [r3, #16]
 80079b8:	7008      	strb	r0, [r1, #0]
				data->current.buf++;
 80079ba:	6c90      	ldr	r0, [r2, #72]	; 0x48
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	1c41      	adds	r1, r0, #1
 80079c0:	6491      	str	r1, [r2, #72]	; 0x48
				data->current.len--;
 80079c2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80079c4:	3901      	subs	r1, #1
 80079c6:	6451      	str	r1, [r2, #68]	; 0x44
 80079c8:	7043      	strb	r3, [r0, #1]
				data->current.buf++;
 80079ca:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80079cc:	3301      	adds	r3, #1
 80079ce:	6493      	str	r3, [r2, #72]	; 0x48
 80079d0:	4610      	mov	r0, r2
}
 80079d2:	b005      	add	sp, #20
 80079d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079d8:	f7fd bf58 	b.w	800588c <z_impl_k_sem_give>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80079dc:	6819      	ldr	r1, [r3, #0]
 80079de:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80079e2:	6019      	str	r1, [r3, #0]
			data->current.len--;
 80079e4:	2102      	movs	r1, #2
 80079e6:	6451      	str	r1, [r2, #68]	; 0x44
			*data->current.buf = LL_I2C_ReceiveData8(i2c);
 80079e8:	6c91      	ldr	r1, [r2, #72]	; 0x48
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	700b      	strb	r3, [r1, #0]
			data->current.buf++;
 80079ee:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80079f0:	3301      	adds	r3, #1
 80079f2:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 80079f4:	e758      	b.n	80078a8 <stm32_i2c_event_isr+0x36>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 80079f6:	6958      	ldr	r0, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_TXE(i2c) && data->current.is_write) {
 80079f8:	0600      	lsls	r0, r0, #24
 80079fa:	d502      	bpl.n	8007a02 <stm32_i2c_event_isr+0x190>
 80079fc:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d1bf      	bne.n	8007982 <stm32_i2c_event_isr+0x110>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8007a02:	695b      	ldr	r3, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_RXNE(i2c) && !data->current.is_write) {
 8007a04:	065b      	lsls	r3, r3, #25
 8007a06:	f57f af4f 	bpl.w	80078a8 <stm32_i2c_event_isr+0x36>
 8007a0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f47f af4b 	bne.w	80078a8 <stm32_i2c_event_isr+0x36>
		handle_rxne(dev);
 8007a12:	4608      	mov	r0, r1
 8007a14:	e7c0      	b.n	8007998 <stm32_i2c_event_isr+0x126>

08007a16 <stm32_i2c_error_isr>:
{
 8007a16:	4603      	mov	r3, r0
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8007a18:	6900      	ldr	r0, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
 8007a1e:	695a      	ldr	r2, [r3, #20]
	if (LL_I2C_IsActiveFlag_AF(i2c)) {
 8007a20:	f412 6f80 	tst.w	r2, #1024	; 0x400
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
 8007a24:	695a      	ldr	r2, [r3, #20]
 8007a26:	d00a      	beq.n	8007a3e <stm32_i2c_error_isr+0x28>
 8007a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a2c:	615a      	str	r2, [r3, #20]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a34:	601a      	str	r2, [r3, #0]
		data->current.is_nack = 1U;
 8007a36:	2301      	movs	r3, #1
 8007a38:	6383      	str	r3, [r0, #56]	; 0x38
 8007a3a:	f7fd bf27 	b.w	800588c <z_impl_k_sem_give>
	if (LL_I2C_IsActiveFlag_ARLO(i2c)) {
 8007a3e:	f412 7f00 	tst.w	r2, #512	; 0x200
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_ARLO);
 8007a42:	695a      	ldr	r2, [r3, #20]
 8007a44:	d005      	beq.n	8007a52 <stm32_i2c_error_isr+0x3c>
 8007a46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007a4a:	615a      	str	r2, [r3, #20]
		data->current.is_arlo = 1U;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	6343      	str	r3, [r0, #52]	; 0x34
		goto end;
 8007a50:	e7f3      	b.n	8007a3a <stm32_i2c_error_isr+0x24>
	if (LL_I2C_IsActiveFlag_BERR(i2c)) {
 8007a52:	05d2      	lsls	r2, r2, #23
 8007a54:	d506      	bpl.n	8007a64 <stm32_i2c_error_isr+0x4e>
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_BERR);
 8007a56:	695a      	ldr	r2, [r3, #20]
 8007a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a5c:	615a      	str	r2, [r3, #20]
		data->current.is_err = 1U;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	63c3      	str	r3, [r0, #60]	; 0x3c
		goto end;
 8007a62:	e7ea      	b.n	8007a3a <stm32_i2c_error_isr+0x24>
}
 8007a64:	4770      	bx	lr

08007a66 <stm32_i2c_msg_write>:
{
 8007a66:	b570      	push	{r4, r5, r6, lr}
 8007a68:	4604      	mov	r4, r0
 8007a6a:	4615      	mov	r5, r2
 8007a6c:	461a      	mov	r2, r3
	msg_init(dev, msg, next_msg_flags, saddr, I2C_REQUEST_WRITE);
 8007a6e:	2300      	movs	r3, #0
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8007a70:	6906      	ldr	r6, [r0, #16]
	msg_init(dev, msg, next_msg_flags, saddr, I2C_REQUEST_WRITE);
 8007a72:	f7ff fe52 	bl	800771a <msg_init.constprop.0>
	stm32_i2c_enable_transfer_interrupts(dev);
 8007a76:	6860      	ldr	r0, [r4, #4]
 8007a78:	f7ff fdff 	bl	800767a <stm32_i2c_enable_transfer_interrupts.isra.0>
	return z_impl_k_sem_take(sem, timeout);
 8007a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a80:	2300      	movs	r3, #0
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7fd ff22 	bl	80058cc <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8007a88:	b928      	cbnz	r0, 8007a96 <stm32_i2c_msg_write+0x30>
	return msg_end(dev, next_msg_flags, __func__);
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	4620      	mov	r0, r4
}
 8007a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return msg_end(dev, next_msg_flags, __func__);
 8007a92:	f7ff be7a 	b.w	800778a <msg_end.constprop.0>
		stm32_i2c_reset(dev);
 8007a96:	6860      	ldr	r0, [r4, #4]
 8007a98:	f7ff fe13 	bl	80076c2 <stm32_i2c_reset.isra.0>
}
 8007a9c:	f06f 0004 	mvn.w	r0, #4
 8007aa0:	bd70      	pop	{r4, r5, r6, pc}

08007aa2 <stm32_i2c_msg_read>:
{
 8007aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa4:	4615      	mov	r5, r2
 8007aa6:	461a      	mov	r2, r3
	I2C_TypeDef *i2c = cfg->i2c;
 8007aa8:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8007aaa:	6907      	ldr	r7, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8007aac:	68de      	ldr	r6, [r3, #12]
{
 8007aae:	4604      	mov	r4, r0
	msg_init(dev, msg, next_msg_flags, saddr, I2C_REQUEST_READ);
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	f7ff fe32 	bl	800771a <msg_init.constprop.0>
	stm32_i2c_enable_transfer_interrupts(dev);
 8007ab6:	6860      	ldr	r0, [r4, #4]
 8007ab8:	f7ff fddf 	bl	800767a <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 8007abc:	6873      	ldr	r3, [r6, #4]
 8007abe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007ac2:	6073      	str	r3, [r6, #4]
 8007ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4638      	mov	r0, r7
 8007acc:	f7fd fefe 	bl	80058cc <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8007ad0:	b928      	cbnz	r0, 8007ade <stm32_i2c_msg_read+0x3c>
	return msg_end(dev, next_msg_flags, __func__);
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	4620      	mov	r0, r4
}
 8007ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return msg_end(dev, next_msg_flags, __func__);
 8007ada:	f7ff be56 	b.w	800778a <msg_end.constprop.0>
		stm32_i2c_reset(dev);
 8007ade:	6860      	ldr	r0, [r4, #4]
 8007ae0:	f7ff fdef 	bl	80076c2 <stm32_i2c_reset.isra.0>
}
 8007ae4:	f06f 0004 	mvn.w	r0, #4
 8007ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007aea <i2c_stm32_irq_config_func_i2c1>:
STM32_I2C_IRQ_HANDLER(name)

/* I2C instances declaration */

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c1), okay)
STM32_I2C_INIT(i2c1);
 8007aea:	b508      	push	{r3, lr}
 8007aec:	2200      	movs	r2, #0
 8007aee:	4611      	mov	r1, r2
 8007af0:	201f      	movs	r0, #31
 8007af2:	f7fb ff95 	bl	8003a20 <z_arm_irq_priority_set>
 8007af6:	201f      	movs	r0, #31
 8007af8:	f7fb ff82 	bl	8003a00 <arch_irq_enable>
 8007afc:	2200      	movs	r2, #0
 8007afe:	2020      	movs	r0, #32
 8007b00:	4611      	mov	r1, r2
 8007b02:	f7fb ff8d 	bl	8003a20 <z_arm_irq_priority_set>
 8007b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007b0a:	2020      	movs	r0, #32
 8007b0c:	f7fb bf78 	b.w	8003a00 <arch_irq_enable>

08007b10 <i2c_stm32_irq_config_func_i2c2>:
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c2), okay)
STM32_I2C_INIT(i2c2);
 8007b10:	b508      	push	{r3, lr}
 8007b12:	2200      	movs	r2, #0
 8007b14:	4611      	mov	r1, r2
 8007b16:	2021      	movs	r0, #33	; 0x21
 8007b18:	f7fb ff82 	bl	8003a20 <z_arm_irq_priority_set>
 8007b1c:	2021      	movs	r0, #33	; 0x21
 8007b1e:	f7fb ff6f 	bl	8003a00 <arch_irq_enable>
 8007b22:	2200      	movs	r2, #0
 8007b24:	2022      	movs	r0, #34	; 0x22
 8007b26:	4611      	mov	r1, r2
 8007b28:	f7fb ff7a 	bl	8003a20 <z_arm_irq_priority_set>
 8007b2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007b30:	2022      	movs	r0, #34	; 0x22
 8007b32:	f7fb bf65 	b.w	8003a00 <arch_irq_enable>

08007b36 <i2c_stm32_irq_config_func_i2c3>:
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c3), okay)
STM32_I2C_INIT(i2c3);
 8007b36:	b508      	push	{r3, lr}
 8007b38:	2200      	movs	r2, #0
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	2048      	movs	r0, #72	; 0x48
 8007b3e:	f7fb ff6f 	bl	8003a20 <z_arm_irq_priority_set>
 8007b42:	2048      	movs	r0, #72	; 0x48
 8007b44:	f7fb ff5c 	bl	8003a00 <arch_irq_enable>
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2049      	movs	r0, #73	; 0x49
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	f7fb ff67 	bl	8003a20 <z_arm_irq_priority_set>
 8007b52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007b56:	2049      	movs	r0, #73	; 0x49
 8007b58:	f7fb bf52 	b.w	8003a00 <arch_irq_enable>

08007b5c <i2c_stm32_transfer>:
{
 8007b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b60:	4699      	mov	r9, r3
	current->flags |= I2C_MSG_RESTART;
 8007b62:	7a0b      	ldrb	r3, [r1, #8]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8007b64:	6907      	ldr	r7, [r0, #16]
	current->flags |= I2C_MSG_RESTART;
 8007b66:	f043 0304 	orr.w	r3, r3, #4
{
 8007b6a:	4615      	mov	r5, r2
	current->flags |= I2C_MSG_RESTART;
 8007b6c:	720b      	strb	r3, [r1, #8]
{
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460c      	mov	r4, r1
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8007b72:	460a      	mov	r2, r1
 8007b74:	2301      	movs	r3, #1
 8007b76:	42ab      	cmp	r3, r5
 8007b78:	d90b      	bls.n	8007b92 <i2c_stm32_transfer+0x36>
	k_sem_take(&data->bus_mutex, K_FOREVER);
 8007b7a:	f107 0810 	add.w	r8, r7, #16
 8007b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b86:	4640      	mov	r0, r8
 8007b88:	f7fd fea0 	bl	80058cc <z_impl_k_sem_take>
	while (num_msgs > 0) {
 8007b8c:	3414      	adds	r4, #20
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e05b      	b.n	8007c4a <i2c_stm32_transfer+0xee>
			if (OPERATION(current) != OPERATION(next)) {
 8007b92:	7a11      	ldrb	r1, [r2, #8]
		if (i < num_msgs) {
 8007b94:	d20c      	bcs.n	8007bb0 <i2c_stm32_transfer+0x54>
			if (OPERATION(current) != OPERATION(next)) {
 8007b96:	7d10      	ldrb	r0, [r2, #20]
 8007b98:	ea80 0c01 	eor.w	ip, r0, r1
 8007b9c:	f01c 0f01 	tst.w	ip, #1
 8007ba0:	d001      	beq.n	8007ba6 <i2c_stm32_transfer+0x4a>
				if (!(next->flags & I2C_MSG_RESTART)) {
 8007ba2:	0740      	lsls	r0, r0, #29
 8007ba4:	d501      	bpl.n	8007baa <i2c_stm32_transfer+0x4e>
			if (current->flags & I2C_MSG_STOP) {
 8007ba6:	0789      	lsls	r1, r1, #30
 8007ba8:	d505      	bpl.n	8007bb6 <i2c_stm32_transfer+0x5a>
 8007baa:	f06f 0315 	mvn.w	r3, #21
 8007bae:	e055      	b.n	8007c5c <i2c_stm32_transfer+0x100>
			current->flags |= I2C_MSG_STOP;
 8007bb0:	f041 0102 	orr.w	r1, r1, #2
 8007bb4:	7211      	strb	r1, [r2, #8]
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8007bb6:	3301      	adds	r3, #1
		current++;
 8007bb8:	320c      	adds	r2, #12
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	e7db      	b.n	8007b76 <i2c_stm32_transfer+0x1a>
		if (num_msgs > 1) {
 8007bbe:	2d01      	cmp	r5, #1
 8007bc0:	bf14      	ite	ne
 8007bc2:	46a3      	movne	fp, r4
 8007bc4:	f04f 0b00 	moveq.w	fp, #0
			uint8_t tmp_msg_flags = current->flags & ~I2C_MSG_RESTART;
 8007bc8:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
			uint32_t temp_len = current->len;
 8007bcc:	f854 7c10 	ldr.w	r7, [r4, #-16]
			uint8_t tmp_msg_flags = current->flags & ~I2C_MSG_RESTART;
 8007bd0:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8007bd4:	9200      	str	r2, [sp, #0]
			uint8_t tmp_next_msg_flags = next_msg_flags ?
 8007bd6:	f1bb 0f00 	cmp.w	fp, #0
 8007bda:	d043      	beq.n	8007c64 <i2c_stm32_transfer+0x108>
 8007bdc:	f89b a000 	ldrb.w	sl, [fp]
			if (current->len > 255) {
 8007be0:	2fff      	cmp	r7, #255	; 0xff
 8007be2:	d90d      	bls.n	8007c00 <i2c_stm32_transfer+0xa4>
				current->len = 255U;
 8007be4:	22ff      	movs	r2, #255	; 0xff
				current->flags &= ~I2C_MSG_STOP;
 8007be6:	f023 0002 	bic.w	r0, r3, #2
				current->len = 255U;
 8007bea:	f844 2c10 	str.w	r2, [r4, #-16]
				current->flags &= ~I2C_MSG_STOP;
 8007bee:	f804 0c0c 	strb.w	r0, [r4, #-12]
				if (next_msg_flags) {
 8007bf2:	f1bb 0f00 	cmp.w	fp, #0
 8007bf6:	d003      	beq.n	8007c00 <i2c_stm32_transfer+0xa4>
					*next_msg_flags = current->flags &
 8007bf8:	f023 0306 	bic.w	r3, r3, #6
 8007bfc:	f88b 3000 	strb.w	r3, [fp]
			if ((current->flags & I2C_MSG_RW_MASK) ==
 8007c00:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
				ret = stm32_i2c_msg_write(dev, current,
 8007c04:	9101      	str	r1, [sp, #4]
			if ((current->flags & I2C_MSG_RW_MASK) ==
 8007c06:	f013 0f01 	tst.w	r3, #1
				ret = stm32_i2c_msg_write(dev, current,
 8007c0a:	465a      	mov	r2, fp
 8007c0c:	464b      	mov	r3, r9
 8007c0e:	4630      	mov	r0, r6
			if ((current->flags & I2C_MSG_RW_MASK) ==
 8007c10:	d12a      	bne.n	8007c68 <i2c_stm32_transfer+0x10c>
				ret = stm32_i2c_msg_write(dev, current,
 8007c12:	f7ff ff28 	bl	8007a66 <stm32_i2c_msg_write>
			if (ret < 0) {
 8007c16:	2800      	cmp	r0, #0
				ret = stm32_i2c_msg_read(dev, current,
 8007c18:	9901      	ldr	r1, [sp, #4]
 8007c1a:	4603      	mov	r3, r0
			if (ret < 0) {
 8007c1c:	db19      	blt.n	8007c52 <i2c_stm32_transfer+0xf6>
			if (next_msg_flags) {
 8007c1e:	f1bb 0f00 	cmp.w	fp, #0
 8007c22:	d001      	beq.n	8007c28 <i2c_stm32_transfer+0xcc>
				*next_msg_flags = tmp_next_msg_flags;
 8007c24:	f88b a000 	strb.w	sl, [fp]
			current->buf += current->len;
 8007c28:	e954 0c05 	ldrd	r0, ip, [r4, #-20]
			current->flags = tmp_msg_flags;
 8007c2c:	9a00      	ldr	r2, [sp, #0]
 8007c2e:	f804 2c0c 	strb.w	r2, [r4, #-12]
			current->buf += current->len;
 8007c32:	4460      	add	r0, ip
			current->len = temp_len - current->len;
 8007c34:	eba7 070c 	sub.w	r7, r7, ip
			current->buf += current->len;
 8007c38:	f844 0c14 	str.w	r0, [r4, #-20]
			current->len = temp_len - current->len;
 8007c3c:	f844 7c10 	str.w	r7, [r4, #-16]
		} while (current->len > 0);
 8007c40:	2f00      	cmp	r7, #0
 8007c42:	d1c1      	bne.n	8007bc8 <i2c_stm32_transfer+0x6c>
		num_msgs--;
 8007c44:	3d01      	subs	r5, #1
 8007c46:	b2ed      	uxtb	r5, r5
 8007c48:	340c      	adds	r4, #12
 8007c4a:	f1a4 0114 	sub.w	r1, r4, #20
	while (num_msgs > 0) {
 8007c4e:	2d00      	cmp	r5, #0
 8007c50:	d1b5      	bne.n	8007bbe <i2c_stm32_transfer+0x62>
 8007c52:	9300      	str	r3, [sp, #0]
	z_impl_k_sem_give(sem);
 8007c54:	4640      	mov	r0, r8
 8007c56:	f7fd fe19 	bl	800588c <z_impl_k_sem_give>
}
 8007c5a:	9b00      	ldr	r3, [sp, #0]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	b003      	add	sp, #12
 8007c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t tmp_next_msg_flags = next_msg_flags ?
 8007c64:	46da      	mov	sl, fp
 8007c66:	e7bb      	b.n	8007be0 <i2c_stm32_transfer+0x84>
				ret = stm32_i2c_msg_read(dev, current,
 8007c68:	f7ff ff1b 	bl	8007aa2 <stm32_i2c_msg_read>
 8007c6c:	e7d3      	b.n	8007c16 <i2c_stm32_transfer+0xba>

08007c6e <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8007c6e:	2301      	movs	r3, #1
 8007c70:	fa03 f101 	lsl.w	r1, r3, r1
 8007c74:	6903      	ldr	r3, [r0, #16]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8007c7a:	bf18      	it	ne
 8007c7c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8007c80:	b112      	cbz	r2, 8007c88 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 8007c82:	6883      	ldr	r3, [r0, #8]
 8007c84:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8007c86:	4718      	bx	r3
 8007c88:	6883      	ldr	r3, [r0, #8]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	e7fb      	b.n	8007c86 <gpio_pin_set.isra.0+0x18>

08007c8e <_spi_context_cs_control>:
{
 8007c8e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8007c90:	6805      	ldr	r5, [r0, #0]
{
 8007c92:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8007c94:	b1fd      	cbz	r5, 8007cd6 <_spi_context_cs_control+0x48>
 8007c96:	68ab      	ldr	r3, [r5, #8]
 8007c98:	b1eb      	cbz	r3, 8007cd6 <_spi_context_cs_control+0x48>
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	b1d8      	cbz	r0, 8007cd6 <_spi_context_cs_control+0x48>
		if (on) {
 8007c9e:	b151      	cbz	r1, 8007cb6 <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8007ca0:	7a19      	ldrb	r1, [r3, #8]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f7ff ffe3 	bl	8007c6e <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	6858      	ldr	r0, [r3, #4]
}
 8007cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8007cb2:	f7fe ba99 	b.w	80061e8 <z_impl_k_busy_wait>
			if (!force_off &&
 8007cb6:	b912      	cbnz	r2, 8007cbe <_spi_context_cs_control+0x30>
 8007cb8:	88aa      	ldrh	r2, [r5, #4]
 8007cba:	0492      	lsls	r2, r2, #18
 8007cbc:	d40b      	bmi.n	8007cd6 <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
 8007cbe:	6858      	ldr	r0, [r3, #4]
 8007cc0:	f7fe fa92 	bl	80061e8 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	7a19      	ldrb	r1, [r3, #8]
 8007ccc:	6818      	ldr	r0, [r3, #0]
}
 8007cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8007cd2:	f7ff bfcc 	b.w	8007c6e <gpio_pin_set.isra.0>
}
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}

08007cd8 <spi_context_unlock_unconditionally>:
{
 8007cd8:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 8007cda:	2201      	movs	r2, #1
 8007cdc:	2100      	movs	r1, #0
{
 8007cde:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 8007ce0:	f7ff ffd5 	bl	8007c8e <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	b933      	cbnz	r3, 8007cf6 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 8007ce8:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 8007cea:	f104 0008 	add.w	r0, r4, #8
}
 8007cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf2:	f7fd bdcb 	b.w	800588c <z_impl_k_sem_give>
 8007cf6:	bd10      	pop	{r4, pc}

08007cf8 <spi_stm32_release>:
{
 8007cf8:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 8007cfa:	6900      	ldr	r0, [r0, #16]
 8007cfc:	f7ff ffec 	bl	8007cd8 <spi_context_unlock_unconditionally>
}
 8007d00:	2000      	movs	r0, #0
 8007d02:	bd08      	pop	{r3, pc}

08007d04 <LL_USART_ClearFlag_FE>:
{
 8007d04:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8007d06:	6803      	ldr	r3, [r0, #0]
 8007d08:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8007d0a:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8007d0c:	6843      	ldr	r3, [r0, #4]
 8007d0e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8007d10:	9b01      	ldr	r3, [sp, #4]
}
 8007d12:	b002      	add	sp, #8
 8007d14:	4770      	bx	lr

08007d16 <uart_stm32_poll_in>:
{
 8007d16:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007d18:	6843      	ldr	r3, [r0, #4]
 8007d1a:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8007d1c:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8007d1e:	071a      	lsls	r2, r3, #28
 8007d20:	d501      	bpl.n	8007d26 <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(UartInstance);
 8007d22:	f7ff ffef 	bl	8007d04 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8007d26:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8007d28:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8007d2a:	bf43      	ittte	mi
 8007d2c:	6843      	ldrmi	r3, [r0, #4]
 8007d2e:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8007d30:	2000      	movmi	r0, #0
		return -1;
 8007d32:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8007d36:	bd08      	pop	{r3, pc}

08007d38 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007d38:	6843      	ldr	r3, [r0, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007d3c:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8007d3e:	0612      	lsls	r2, r2, #24
 8007d40:	d5fc      	bpl.n	8007d3c <uart_stm32_poll_out+0x4>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8007d42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d46:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8007d48:	6059      	str	r1, [r3, #4]
}
 8007d4a:	4770      	bx	lr

08007d4c <uart_stm32_err_check>:
{
 8007d4c:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007d4e:	6843      	ldr	r3, [r0, #4]
 8007d50:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8007d52:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8007d54:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8007d56:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8007d58:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8007d5a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 8007d5e:	bf48      	it	mi
 8007d60:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8007d64:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 8007d66:	bf48      	it	mi
 8007d68:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 8007d6c:	07d3      	lsls	r3, r2, #31
 8007d6e:	d501      	bpl.n	8007d74 <uart_stm32_err_check+0x28>
		LL_USART_ClearFlag_ORE(UartInstance);
 8007d70:	f7ff ffc8 	bl	8007d04 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8007d74:	0791      	lsls	r1, r2, #30
 8007d76:	d501      	bpl.n	8007d7c <uart_stm32_err_check+0x30>
		LL_USART_ClearFlag_PE(UartInstance);
 8007d78:	f7ff ffc4 	bl	8007d04 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8007d7c:	0753      	lsls	r3, r2, #29
 8007d7e:	d501      	bpl.n	8007d84 <uart_stm32_err_check+0x38>
		LL_USART_ClearFlag_FE(UartInstance);
 8007d80:	f7ff ffc0 	bl	8007d04 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 8007d84:	f7ff ffbe 	bl	8007d04 <LL_USART_ClearFlag_FE>
}
 8007d88:	4610      	mov	r0, r2
 8007d8a:	bd08      	pop	{r3, pc}

08007d8c <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007d8c:	6843      	ldr	r3, [r0, #4]
{
 8007d8e:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007d90:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 8007d92:	2300      	movs	r3, #0
 8007d94:	b2d8      	uxtb	r0, r3
 8007d96:	1a15      	subs	r5, r2, r0
 8007d98:	2d00      	cmp	r5, #0
 8007d9a:	dd04      	ble.n	8007da6 <uart_stm32_fifo_fill+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007d9c:	6825      	ldr	r5, [r4, #0]
 8007d9e:	062d      	lsls	r5, r5, #24
 8007da0:	f103 0301 	add.w	r3, r3, #1
 8007da4:	d400      	bmi.n	8007da8 <uart_stm32_fifo_fill+0x1c>
}
 8007da6:	bd30      	pop	{r4, r5, pc}
  USARTx->DR = Value;
 8007da8:	5c08      	ldrb	r0, [r1, r0]
 8007daa:	6060      	str	r0, [r4, #4]
}
 8007dac:	e7f2      	b.n	8007d94 <uart_stm32_fifo_fill+0x8>

08007dae <uart_stm32_fifo_read>:
{
 8007dae:	b538      	push	{r3, r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007db0:	6843      	ldr	r3, [r0, #4]
 8007db2:	681c      	ldr	r4, [r3, #0]
	while ((size - num_rx > 0) &&
 8007db4:	2500      	movs	r5, #0
 8007db6:	b2e8      	uxtb	r0, r5
 8007db8:	1a13      	subs	r3, r2, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	dd02      	ble.n	8007dc4 <uart_stm32_fifo_read+0x16>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	069b      	lsls	r3, r3, #26
 8007dc2:	d400      	bmi.n	8007dc6 <uart_stm32_fifo_read+0x18>
}
 8007dc4:	bd38      	pop	{r3, r4, r5, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8007dc6:	6863      	ldr	r3, [r4, #4]
 8007dc8:	540b      	strb	r3, [r1, r0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8007dca:	6823      	ldr	r3, [r4, #0]
		if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8007dcc:	0718      	lsls	r0, r3, #28
 8007dce:	d502      	bpl.n	8007dd6 <uart_stm32_fifo_read+0x28>
			LL_USART_ClearFlag_ORE(UartInstance);
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f7ff ff97 	bl	8007d04 <LL_USART_ClearFlag_FE>
 8007dd6:	3501      	adds	r5, #1
 8007dd8:	e7ed      	b.n	8007db6 <uart_stm32_fifo_read+0x8>

08007dda <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007dda:	6843      	ldr	r3, [r0, #4]
 8007ddc:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8007dde:	68d3      	ldr	r3, [r2, #12]
 8007de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007de4:	60d3      	str	r3, [r2, #12]
}
 8007de6:	4770      	bx	lr

08007de8 <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007de8:	6843      	ldr	r3, [r0, #4]
 8007dea:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8007dec:	68d3      	ldr	r3, [r2, #12]
 8007dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007df2:	60d3      	str	r3, [r2, #12]
}
 8007df4:	4770      	bx	lr

08007df6 <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007df6:	6843      	ldr	r3, [r0, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007dfa:	6818      	ldr	r0, [r3, #0]
	return LL_USART_IsActiveFlag_TXE(UartInstance) &&
 8007dfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 8007e00:	bf1c      	itt	ne
 8007e02:	68d8      	ldrne	r0, [r3, #12]
 8007e04:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 8007e08:	4770      	bx	lr

08007e0a <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007e0a:	6843      	ldr	r3, [r0, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8007e0e:	6818      	ldr	r0, [r3, #0]
}
 8007e10:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8007e14:	4770      	bx	lr

08007e16 <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007e16:	6843      	ldr	r3, [r0, #4]
 8007e18:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007e1a:	68d3      	ldr	r3, [r2, #12]
 8007e1c:	f043 0320 	orr.w	r3, r3, #32
 8007e20:	60d3      	str	r3, [r2, #12]
}
 8007e22:	4770      	bx	lr

08007e24 <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007e24:	6843      	ldr	r3, [r0, #4]
 8007e26:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007e28:	68d3      	ldr	r3, [r2, #12]
 8007e2a:	f023 0320 	bic.w	r3, r3, #32
 8007e2e:	60d3      	str	r3, [r2, #12]
}
 8007e30:	4770      	bx	lr

08007e32 <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007e32:	6843      	ldr	r3, [r0, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8007e36:	6818      	ldr	r0, [r3, #0]
}
 8007e38:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8007e3c:	4770      	bx	lr

08007e3e <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007e3e:	6843      	ldr	r3, [r0, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8007e44:	0691      	lsls	r1, r2, #26
 8007e46:	d502      	bpl.n	8007e4e <uart_stm32_irq_is_pending+0x10>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8007e48:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
 8007e4a:	0692      	lsls	r2, r2, #26
 8007e4c:	d407      	bmi.n	8007e5e <uart_stm32_irq_is_pending+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8007e4e:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8007e50:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8007e54:	d004      	beq.n	8007e60 <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 8007e56:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(UartInstance) &&
 8007e58:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8007e5c:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8007e5e:	2001      	movs	r0, #1
}
 8007e60:	4770      	bx	lr

08007e62 <uart_stm32_irq_update>:
}
 8007e62:	2001      	movs	r0, #1
 8007e64:	4770      	bx	lr

08007e66 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8007e66:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 8007e68:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 8007e6c:	4770      	bx	lr

08007e6e <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8007e6e:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 8007e70:	6893      	ldr	r3, [r2, #8]
 8007e72:	b10b      	cbz	r3, 8007e78 <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 8007e74:	68d1      	ldr	r1, [r2, #12]
 8007e76:	4718      	bx	r3
}
 8007e78:	4770      	bx	lr

08007e7a <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,	\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 8007e7a:	b508      	push	{r3, lr}
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2025      	movs	r0, #37	; 0x25
 8007e80:	4611      	mov	r1, r2
 8007e82:	f7fb fdcd 	bl	8003a20 <z_arm_irq_priority_set>
 8007e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e8a:	2025      	movs	r0, #37	; 0x25
 8007e8c:	f7fb bdb8 	b.w	8003a00 <arch_irq_enable>

08007e90 <uart_stm32_irq_config_func_1>:
 8007e90:	b508      	push	{r3, lr}
 8007e92:	2200      	movs	r2, #0
 8007e94:	2026      	movs	r0, #38	; 0x26
 8007e96:	4611      	mov	r1, r2
 8007e98:	f7fb fdc2 	bl	8003a20 <z_arm_irq_priority_set>
 8007e9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007ea0:	2026      	movs	r0, #38	; 0x26
 8007ea2:	f7fb bdad 	b.w	8003a00 <arch_irq_enable>

08007ea6 <uart_stm32_irq_config_func_2>:
 8007ea6:	b508      	push	{r3, lr}
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2027      	movs	r0, #39	; 0x27
 8007eac:	4611      	mov	r1, r2
 8007eae:	f7fb fdb7 	bl	8003a20 <z_arm_irq_priority_set>
 8007eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007eb6:	2027      	movs	r0, #39	; 0x27
 8007eb8:	f7fb bda2 	b.w	8003a00 <arch_irq_enable>

08007ebc <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8007ebc:	6903      	ldr	r3, [r0, #16]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007ec2:	6843      	ldr	r3, [r0, #4]
 8007ec4:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8007ec6:	68d3      	ldr	r3, [r2, #12]
 8007ec8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8007ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed0:	d029      	beq.n	8007f26 <uart_stm32_config_get+0x6a>
		return UART_CFG_PARITY_NONE;
 8007ed2:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8007ed6:	f1dc 0300 	rsbs	r3, ip, #0
 8007eda:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8007ede:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8007ee0:	6913      	ldr	r3, [r2, #16]
 8007ee2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8007ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eea:	d01e      	beq.n	8007f2a <uart_stm32_config_get+0x6e>
 8007eec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ef0:	d01d      	beq.n	8007f2e <uart_stm32_config_get+0x72>
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bf14      	ite	ne
 8007ef6:	2303      	movne	r3, #3
 8007ef8:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8007efa:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8007efc:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8007efe:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 8007f00:	04c0      	lsls	r0, r0, #19
 8007f02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f06:	d514      	bpl.n	8007f32 <uart_stm32_config_get+0x76>
			return UART_CFG_DATA_BITS_9;
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bf14      	ite	ne
 8007f0c:	2303      	movne	r3, #3
 8007f0e:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8007f10:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8007f12:	6953      	ldr	r3, [r2, #20]
 8007f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8007f18:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8007f1c:	4253      	negs	r3, r2
 8007f1e:	4153      	adcs	r3, r2
 8007f20:	71cb      	strb	r3, [r1, #7]
}
 8007f22:	2000      	movs	r0, #0
 8007f24:	4770      	bx	lr
	switch (parity) {
 8007f26:	2302      	movs	r3, #2
 8007f28:	e7d9      	b.n	8007ede <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e7e5      	b.n	8007efa <uart_stm32_config_get+0x3e>
		return UART_CFG_STOP_BITS_1_5;
 8007f2e:	2302      	movs	r3, #2
 8007f30:	e7e3      	b.n	8007efa <uart_stm32_config_get+0x3e>
			return UART_CFG_DATA_BITS_7;
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	bf0c      	ite	eq
 8007f36:	2303      	moveq	r3, #3
 8007f38:	2302      	movne	r3, #2
 8007f3a:	e7e9      	b.n	8007f10 <uart_stm32_config_get+0x54>

08007f3c <z_device_state_init>:
}
 8007f3c:	4770      	bx	lr

08007f3e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8007f3e:	b138      	cbz	r0, 8007f50 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8007f40:	68c3      	ldr	r3, [r0, #12]
 8007f42:	8818      	ldrh	r0, [r3, #0]
 8007f44:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8007f48:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8007f4c:	4258      	negs	r0, r3
 8007f4e:	4158      	adcs	r0, r3
}
 8007f50:	4770      	bx	lr

08007f52 <arch_system_halt>:
	__asm__ volatile(
 8007f52:	f04f 0210 	mov.w	r2, #16
 8007f56:	f3ef 8311 	mrs	r3, BASEPRI
 8007f5a:	f382 8811 	msr	BASEPRI, r2
 8007f5e:	f3bf 8f6f 	isb	sy
	for (;;) {
 8007f62:	e7fe      	b.n	8007f62 <arch_system_halt+0x10>

08007f64 <k_mem_slab_init>:
{
 8007f64:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
 8007f66:	2400      	movs	r4, #0
 8007f68:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
 8007f6a:	7204      	strb	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8007f6c:	ea41 0402 	orr.w	r4, r1, r2
 8007f70:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
 8007f74:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
 8007f78:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8007f7a:	d10c      	bne.n	8007f96 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
 8007f7c:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 8007f7e:	42a3      	cmp	r3, r4
 8007f80:	d103      	bne.n	8007f8a <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
 8007f82:	e9c0 0000 	strd	r0, r0, [r0]
}
 8007f86:	2000      	movs	r0, #0
}
 8007f88:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
 8007f8a:	6985      	ldr	r5, [r0, #24]
 8007f8c:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 8007f8e:	3401      	adds	r4, #1
		slab->free_list = p;
 8007f90:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
 8007f92:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
 8007f94:	e7f3      	b.n	8007f7e <k_mem_slab_init+0x1a>
		return -EINVAL;
 8007f96:	f06f 0015 	mvn.w	r0, #21
	return rc;
 8007f9a:	e7f5      	b.n	8007f88 <k_mem_slab_init+0x24>

08007f9c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	f04f 0310 	mov.w	r3, #16
 8007fa6:	f3ef 8611 	mrs	r6, BASEPRI
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 8007fb2:	6987      	ldr	r7, [r0, #24]
 8007fb4:	b977      	cbnz	r7, 8007fd4 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 8007fb6:	f000 f978 	bl	80082aa <z_unpend_first_thread>

		if (pending_thread != NULL) {
 8007fba:	b158      	cbz	r0, 8007fd4 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 8007fbc:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8007fbe:	6142      	str	r2, [r0, #20]
 8007fc0:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
 8007fc2:	f000 f92b 	bl	800821c <z_ready_thread>
			z_reschedule(&slab->lock, key);
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 8007fcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
 8007fd0:	f7fd bd00 	b.w	80059d4 <z_reschedule>
	**(char ***) mem = slab->free_list;
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	69a2      	ldr	r2, [r4, #24]
 8007fd8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 8007fda:	682b      	ldr	r3, [r5, #0]
 8007fdc:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
 8007fde:	69e3      	ldr	r3, [r4, #28]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 8007fe4:	f386 8811 	msr	BASEPRI, r6
 8007fe8:	f3bf 8f6f 	isb	sy
}
 8007fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fee <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fee:	f3ef 8005 	mrs	r0, IPSR
}
 8007ff2:	3800      	subs	r0, #0
 8007ff4:	bf18      	it	ne
 8007ff6:	2001      	movne	r0, #1
 8007ff8:	4770      	bx	lr

08007ffa <z_impl_k_thread_name_set>:
}
 8007ffa:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8007ffe:	4770      	bx	lr

08008000 <k_thread_name_get>:
}
 8008000:	2000      	movs	r0, #0
 8008002:	4770      	bx	lr

08008004 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8008004:	b508      	push	{r3, lr}
	__asm__ volatile(
 8008006:	f04f 0210 	mov.w	r2, #16
 800800a:	f3ef 8311 	mrs	r3, BASEPRI
 800800e:	f382 8811 	msr	BASEPRI, r2
 8008012:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8008016:	f7fb fdc9 	bl	8003bac <arch_cpu_idle>
 800801a:	e7f4      	b.n	8008006 <idle+0x2>

0800801c <queue_insert>:
{
 800801c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008020:	4699      	mov	r9, r3
 8008022:	4604      	mov	r4, r0
 8008024:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8008028:	460d      	mov	r5, r1
 800802a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 800802c:	f100 0708 	add.w	r7, r0, #8
 8008030:	f04f 0210 	mov.w	r2, #16
 8008034:	f3ef 8611 	mrs	r6, BASEPRI
 8008038:	f382 8811 	msr	BASEPRI, r2
 800803c:	f3bf 8f6f 	isb	sy
	if (is_append) {
 8008040:	b103      	cbz	r3, 8008044 <queue_insert+0x28>
	return list->tail;
 8008042:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 8008044:	f104 000c 	add.w	r0, r4, #12
 8008048:	f000 f92f 	bl	80082aa <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
 800804c:	b158      	cbz	r0, 8008066 <queue_insert+0x4a>
 800804e:	2400      	movs	r4, #0
 8008050:	6784      	str	r4, [r0, #120]	; 0x78
 8008052:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
 8008056:	f000 f8e1 	bl	800821c <z_ready_thread>
	z_reschedule(&queue->lock, key);
 800805a:	4638      	mov	r0, r7
 800805c:	4631      	mov	r1, r6
 800805e:	f7fd fcb9 	bl	80059d4 <z_reschedule>
	return 0;
 8008062:	2000      	movs	r0, #0
 8008064:	e00c      	b.n	8008080 <queue_insert+0x64>
	if (alloc) {
 8008066:	f1b9 0f00 	cmp.w	r9, #0
 800806a:	d01c      	beq.n	80080a6 <queue_insert+0x8a>
	return z_thread_aligned_alloc(0, size);
 800806c:	2108      	movs	r1, #8
 800806e:	f7fe f97f 	bl	8006370 <z_thread_aligned_alloc>
		if (anode == NULL) {
 8008072:	b938      	cbnz	r0, 8008084 <queue_insert+0x68>
	__asm__ volatile(
 8008074:	f386 8811 	msr	BASEPRI, r6
 8008078:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
 800807c:	f06f 000b 	mvn.w	r0, #11
}
 8008080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
 8008084:	2301      	movs	r3, #1
		anode->data = data;
 8008086:	f8c0 8004 	str.w	r8, [r0, #4]
 800808a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800808c:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 800808e:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
 8008092:	b965      	cbnz	r5, 80080ae <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	4313      	orrs	r3, r2
 8008098:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 800809a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
 800809c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1db      	bne.n	800805a <queue_insert+0x3e>
	list->tail = node;
 80080a2:	6060      	str	r0, [r4, #4]
}
 80080a4:	e7d9      	b.n	800805a <queue_insert+0x3e>
	node->next_and_flags = flags;
 80080a6:	f8c8 9000 	str.w	r9, [r8]
}
 80080aa:	4640      	mov	r0, r8
 80080ac:	e7ee      	b.n	800808c <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 80080ae:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 80080b0:	f033 0303 	bics.w	r3, r3, #3
 80080b4:	d10b      	bne.n	80080ce <queue_insert+0xb2>
	parent->next_and_flags = cur_flags | (unative_t)child;
 80080b6:	6002      	str	r2, [r0, #0]
	return list->tail;
 80080b8:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
 80080ba:	b912      	cbnz	r2, 80080c2 <queue_insert+0xa6>
	list->head = node;
 80080bc:	e9c4 0000 	strd	r0, r0, [r4]
}
 80080c0:	e7cb      	b.n	800805a <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 80080c2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 80080c4:	f003 0303 	and.w	r3, r3, #3
 80080c8:	4303      	orrs	r3, r0
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	e7e9      	b.n	80080a2 <queue_insert+0x86>
 80080ce:	4313      	orrs	r3, r2
 80080d0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 80080d2:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 80080d4:	f003 0303 	and.w	r3, r3, #3
 80080d8:	4318      	orrs	r0, r3
 80080da:	6028      	str	r0, [r5, #0]
}
 80080dc:	e7bd      	b.n	800805a <queue_insert+0x3e>

080080de <z_queue_node_peek>:
{
 80080de:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
 80080e0:	4604      	mov	r4, r0
 80080e2:	b130      	cbz	r0, 80080f2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 80080e4:	6802      	ldr	r2, [r0, #0]
 80080e6:	0793      	lsls	r3, r2, #30
 80080e8:	d003      	beq.n	80080f2 <z_queue_node_peek+0x14>
		ret = anode->data;
 80080ea:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 80080ec:	b109      	cbz	r1, 80080f2 <z_queue_node_peek+0x14>
			k_free(anode);
 80080ee:	f000 f9a5 	bl	800843c <k_free>
}
 80080f2:	4620      	mov	r0, r4
 80080f4:	bd10      	pop	{r4, pc}

080080f6 <k_queue_append>:
{
 80080f6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
 80080f8:	2301      	movs	r3, #1
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	2300      	movs	r3, #0
{
 80080fe:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
 8008100:	4619      	mov	r1, r3
 8008102:	f7ff ff8b 	bl	800801c <queue_insert>
}
 8008106:	b003      	add	sp, #12
 8008108:	f85d fb04 	ldr.w	pc, [sp], #4

0800810c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800810c:	b13a      	cbz	r2, 800811e <z_impl_k_sem_init+0x12>
 800810e:	428a      	cmp	r2, r1
 8008110:	d305      	bcc.n	800811e <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 8008112:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8008116:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 800811a:	2000      	movs	r0, #0
 800811c:	4770      	bx	lr
		return -EINVAL;
 800811e:	f06f 0015 	mvn.w	r0, #21
}
 8008122:	4770      	bx	lr

08008124 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8008124:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8008128:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800812a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800812c:	2300      	movs	r3, #0
	node->prev = NULL;
 800812e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8008132:	4770      	bx	lr

08008134 <unpend_thread_no_timeout>:
{
 8008134:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8008136:	f7ff fff5 	bl	8008124 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800813a:	7b43      	ldrb	r3, [r0, #13]
 800813c:	f023 0302 	bic.w	r3, r3, #2
 8008140:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8008142:	2300      	movs	r3, #0
 8008144:	6083      	str	r3, [r0, #8]
}
 8008146:	bd08      	pop	{r3, pc}

08008148 <z_unpend_thread_no_timeout>:
{
 8008148:	b508      	push	{r3, lr}
	__asm__ volatile(
 800814a:	f04f 0310 	mov.w	r3, #16
 800814e:	f3ef 8111 	mrs	r1, BASEPRI
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 800815a:	f7ff ffeb 	bl	8008134 <unpend_thread_no_timeout>
	__asm__ volatile(
 800815e:	f381 8811 	msr	BASEPRI, r1
 8008162:	f3bf 8f6f 	isb	sy
}
 8008166:	bd08      	pop	{r3, pc}

08008168 <z_unpend_thread>:
{
 8008168:	b510      	push	{r4, lr}
	__asm__ volatile(
 800816a:	f04f 0310 	mov.w	r3, #16
 800816e:	f3ef 8411 	mrs	r4, BASEPRI
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 800817a:	f7ff ffdb 	bl	8008134 <unpend_thread_no_timeout>
	__asm__ volatile(
 800817e:	f384 8811 	msr	BASEPRI, r4
 8008182:	f3bf 8f6f 	isb	sy
}
 8008186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800818a:	3018      	adds	r0, #24
 800818c:	f000 b8b5 	b.w	80082fa <z_abort_timeout>

08008190 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8008190:	4603      	mov	r3, r0
 8008192:	b920      	cbnz	r0, 800819e <z_reschedule_irqlock+0xe>
 8008194:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8008198:	b90a      	cbnz	r2, 800819e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 800819a:	f7fb bbbf 	b.w	800391c <arch_swap>
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
}
 80081a6:	4770      	bx	lr

080081a8 <z_reschedule_unlocked>:
	__asm__ volatile(
 80081a8:	f04f 0310 	mov.w	r3, #16
 80081ac:	f3ef 8011 	mrs	r0, BASEPRI
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80081b8:	f7ff bfea 	b.w	8008190 <z_reschedule_irqlock>

080081bc <z_priq_dumb_best>:
	return list->head == list;
 80081bc:	6803      	ldr	r3, [r0, #0]
}
 80081be:	4298      	cmp	r0, r3
 80081c0:	bf14      	ite	ne
 80081c2:	4618      	movne	r0, r3
 80081c4:	2000      	moveq	r0, #0
 80081c6:	4770      	bx	lr

080081c8 <add_to_waitq_locked>:
{
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	4604      	mov	r4, r0
 80081cc:	460d      	mov	r5, r1
	unready_thread(thread);
 80081ce:	f7fd fc47 	bl	8005a60 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80081d2:	7b63      	ldrb	r3, [r4, #13]
 80081d4:	f043 0302 	orr.w	r3, r3, #2
 80081d8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 80081da:	b195      	cbz	r5, 8008202 <add_to_waitq_locked+0x3a>
 80081dc:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 80081de:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80081e0:	429d      	cmp	r5, r3
 80081e2:	d015      	beq.n	8008210 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80081e4:	b1a3      	cbz	r3, 8008210 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 80081e6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 80081ea:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 80081ee:	4291      	cmp	r1, r2
 80081f0:	d008      	beq.n	8008204 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 80081f2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 80081f4:	2a00      	cmp	r2, #0
 80081f6:	dd05      	ble.n	8008204 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 80081f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80081fa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 80081fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8008200:	605c      	str	r4, [r3, #4]
}
 8008202:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 8008204:	686a      	ldr	r2, [r5, #4]
 8008206:	4293      	cmp	r3, r2
 8008208:	d002      	beq.n	8008210 <add_to_waitq_locked+0x48>
 800820a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1ec      	bne.n	80081ea <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 8008210:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8008212:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8008216:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8008218:	606c      	str	r4, [r5, #4]
}
 800821a:	e7f2      	b.n	8008202 <add_to_waitq_locked+0x3a>

0800821c <z_ready_thread>:
{
 800821c:	b510      	push	{r4, lr}
 800821e:	f04f 0310 	mov.w	r3, #16
 8008222:	f3ef 8411 	mrs	r4, BASEPRI
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 800822e:	f7fd fd31 	bl	8005c94 <ready_thread>
	__asm__ volatile(
 8008232:	f384 8811 	msr	BASEPRI, r4
 8008236:	f3bf 8f6f 	isb	sy
}
 800823a:	bd10      	pop	{r4, pc}

0800823c <z_thread_timeout>:
{
 800823c:	b510      	push	{r4, lr}
 800823e:	4601      	mov	r1, r0
	__asm__ volatile(
 8008240:	f04f 0310 	mov.w	r3, #16
 8008244:	f3ef 8411 	mrs	r4, BASEPRI
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8008250:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8008254:	f013 0f28 	tst.w	r3, #40	; 0x28
 8008258:	d10d      	bne.n	8008276 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 800825a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 800825e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 8008260:	b10b      	cbz	r3, 8008266 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 8008262:	f7ff ff67 	bl	8008134 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8008266:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 800826a:	f023 0314 	bic.w	r3, r3, #20
 800826e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 8008272:	f7fd fd0f 	bl	8005c94 <ready_thread>
	__asm__ volatile(
 8008276:	f384 8811 	msr	BASEPRI, r4
 800827a:	f3bf 8f6f 	isb	sy
}
 800827e:	bd10      	pop	{r4, pc}

08008280 <z_unpend1_no_timeout>:
{
 8008280:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008282:	f04f 0310 	mov.w	r3, #16
 8008286:	f3ef 8411 	mrs	r4, BASEPRI
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8008292:	f7ff ff93 	bl	80081bc <z_priq_dumb_best>
		if (thread != NULL) {
 8008296:	4601      	mov	r1, r0
 8008298:	b108      	cbz	r0, 800829e <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
 800829a:	f7ff ff4b 	bl	8008134 <unpend_thread_no_timeout>
	__asm__ volatile(
 800829e:	f384 8811 	msr	BASEPRI, r4
 80082a2:	f3bf 8f6f 	isb	sy
}
 80082a6:	4608      	mov	r0, r1
 80082a8:	bd10      	pop	{r4, pc}

080082aa <z_unpend_first_thread>:
{
 80082aa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80082ac:	f04f 0310 	mov.w	r3, #16
 80082b0:	f3ef 8511 	mrs	r5, BASEPRI
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 80082bc:	f7ff ff7e 	bl	80081bc <z_priq_dumb_best>
		if (thread != NULL) {
 80082c0:	4604      	mov	r4, r0
 80082c2:	b120      	cbz	r0, 80082ce <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 80082c4:	f7ff ff36 	bl	8008134 <unpend_thread_no_timeout>
 80082c8:	3018      	adds	r0, #24
 80082ca:	f000 f816 	bl	80082fa <z_abort_timeout>
	__asm__ volatile(
 80082ce:	f385 8811 	msr	BASEPRI, r5
 80082d2:	f3bf 8f6f 	isb	sy
}
 80082d6:	4620      	mov	r0, r4
 80082d8:	bd38      	pop	{r3, r4, r5, pc}

080082da <z_unpend_all>:
{
 80082da:	b538      	push	{r3, r4, r5, lr}
 80082dc:	4605      	mov	r5, r0
	int need_sched = 0;
 80082de:	2000      	movs	r0, #0
	return list->head == list;
 80082e0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80082e2:	42a5      	cmp	r5, r4
 80082e4:	d000      	beq.n	80082e8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80082e6:	b904      	cbnz	r4, 80082ea <z_unpend_all+0x10>
}
 80082e8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
 80082ea:	4620      	mov	r0, r4
 80082ec:	f7ff ff3c 	bl	8008168 <z_unpend_thread>
		z_ready_thread(thread);
 80082f0:	4620      	mov	r0, r4
 80082f2:	f7ff ff93 	bl	800821c <z_ready_thread>
		need_sched = 1;
 80082f6:	2001      	movs	r0, #1
 80082f8:	e7f2      	b.n	80082e0 <z_unpend_all+0x6>

080082fa <z_abort_timeout>:
{
 80082fa:	b510      	push	{r4, lr}
	__asm__ volatile(
 80082fc:	f04f 0210 	mov.w	r2, #16
 8008300:	f3ef 8411 	mrs	r4, BASEPRI
 8008304:	f382 8811 	msr	BASEPRI, r2
 8008308:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 800830c:	6803      	ldr	r3, [r0, #0]
 800830e:	b13b      	cbz	r3, 8008320 <z_abort_timeout+0x26>
			remove_timeout(to);
 8008310:	f7fd fe64 	bl	8005fdc <remove_timeout>
			ret = 0;
 8008314:	2000      	movs	r0, #0
	__asm__ volatile(
 8008316:	f384 8811 	msr	BASEPRI, r4
 800831a:	f3bf 8f6f 	isb	sy
}
 800831e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8008320:	f06f 0015 	mvn.w	r0, #21
 8008324:	e7f7      	b.n	8008316 <z_abort_timeout+0x1c>

08008326 <z_set_timeout_expiry>:
{
 8008326:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008328:	4604      	mov	r4, r0
 800832a:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
 800832c:	f04f 0310 	mov.w	r3, #16
 8008330:	f3ef 8511 	mrs	r5, BASEPRI
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 800833c:	f7fd fe26 	bl	8005f8c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8008340:	2801      	cmp	r0, #1
 8008342:	dd05      	ble.n	8008350 <z_set_timeout_expiry+0x2a>
 8008344:	42a0      	cmp	r0, r4
 8008346:	9901      	ldr	r1, [sp, #4]
 8008348:	db02      	blt.n	8008350 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800834a:	4620      	mov	r0, r4
 800834c:	f7fb fa42 	bl	80037d4 <sys_clock_set_timeout>
	__asm__ volatile(
 8008350:	f385 8811 	msr	BASEPRI, r5
 8008354:	f3bf 8f6f 	isb	sy
}
 8008358:	b003      	add	sp, #12
 800835a:	bd30      	pop	{r4, r5, pc}

0800835c <sys_clock_tick_get_32>:
{
 800835c:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800835e:	f7fd ff2b 	bl	80061b8 <sys_clock_tick_get>
}
 8008362:	bd08      	pop	{r3, pc}

08008364 <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 8008364:	f7fd bf28 	b.w	80061b8 <sys_clock_tick_get>

08008368 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8008368:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800836c:	bf08      	it	eq
 800836e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8008372:	b538      	push	{r3, r4, r5, lr}
 8008374:	4605      	mov	r5, r0
 8008376:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8008378:	d020      	beq.n	80083bc <sys_clock_timeout_end_calc+0x54>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800837a:	ea51 0300 	orrs.w	r3, r1, r0
 800837e:	d103      	bne.n	8008388 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 8008380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
 8008384:	f7fd bf18 	b.w	80061b8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 8008388:	f06f 0301 	mvn.w	r3, #1
 800838c:	1a1b      	subs	r3, r3, r0
 800838e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008392:	eb61 0204 	sbc.w	r2, r1, r4
 8008396:	2a00      	cmp	r2, #0
 8008398:	db02      	blt.n	80083a0 <sys_clock_timeout_end_calc+0x38>
			return Z_TICK_ABS(dt);
 800839a:	4618      	mov	r0, r3
 800839c:	4611      	mov	r1, r2
}
 800839e:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
 80083a0:	f7fd ff0a 	bl	80061b8 <sys_clock_tick_get>
 80083a4:	2d01      	cmp	r5, #1
 80083a6:	4622      	mov	r2, r4
 80083a8:	f174 0400 	sbcs.w	r4, r4, #0
 80083ac:	462b      	mov	r3, r5
 80083ae:	bfbc      	itt	lt
 80083b0:	2301      	movlt	r3, #1
 80083b2:	2200      	movlt	r2, #0
 80083b4:	1818      	adds	r0, r3, r0
 80083b6:	eb41 0102 	adc.w	r1, r1, r2
 80083ba:	e7f0      	b.n	800839e <sys_clock_timeout_end_calc+0x36>
		return UINT64_MAX;
 80083bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083c0:	4601      	mov	r1, r0
 80083c2:	e7ec      	b.n	800839e <sys_clock_timeout_end_calc+0x36>

080083c4 <k_timer_init>:
	timer->status = 0U;
 80083c4:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 80083c6:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 80083ca:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
 80083ce:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 80083d2:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 80083d6:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 80083d8:	6343      	str	r3, [r0, #52]	; 0x34
}
 80083da:	4770      	bx	lr

080083dc <z_impl_k_timer_stop>:
{
 80083dc:	b510      	push	{r4, lr}
 80083de:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
 80083e0:	f7ff ff8b 	bl	80082fa <z_abort_timeout>
	if (inactive) {
 80083e4:	b9b0      	cbnz	r0, 8008414 <z_impl_k_timer_stop+0x38>
	if (timer->stop_fn != NULL) {
 80083e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083e8:	b10b      	cbz	r3, 80083ee <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 80083ea:	4620      	mov	r0, r4
 80083ec:	4798      	blx	r3
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 80083ee:	f104 0018 	add.w	r0, r4, #24
 80083f2:	f7ff ff45 	bl	8008280 <z_unpend1_no_timeout>
		if (pending_thread != NULL) {
 80083f6:	b168      	cbz	r0, 8008414 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 80083f8:	f7ff ff10 	bl	800821c <z_ready_thread>
	__asm__ volatile(
 80083fc:	f04f 0310 	mov.w	r3, #16
 8008400:	f3ef 8011 	mrs	r0, BASEPRI
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
}
 800840c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 8008410:	f7ff bebe 	b.w	8008190 <z_reschedule_irqlock>
 8008414:	bd10      	pop	{r4, pc}

08008416 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 8008416:	3204      	adds	r2, #4
{
 8008418:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 800841a:	4604      	mov	r4, r0
 800841c:	d208      	bcs.n	8008430 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 800841e:	2600      	movs	r6, #0
 8008420:	2700      	movs	r7, #0
 8008422:	e9cd 6700 	strd	r6, r7, [sp]
 8008426:	f041 0104 	orr.w	r1, r1, #4
 800842a:	f000 f81b 	bl	8008464 <k_heap_aligned_alloc>
	if (mem == NULL) {
 800842e:	b910      	cbnz	r0, 8008436 <z_heap_aligned_alloc+0x20>
		return NULL;
 8008430:	2000      	movs	r0, #0
}
 8008432:	b002      	add	sp, #8
 8008434:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
 8008436:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
 800843a:	e7fa      	b.n	8008432 <z_heap_aligned_alloc+0x1c>

0800843c <k_free>:
	if (ptr != NULL) {
 800843c:	b120      	cbz	r0, 8008448 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
 800843e:	1f01      	subs	r1, r0, #4
 8008440:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8008444:	f000 b84f 	b.w	80084e6 <k_heap_free>
}
 8008448:	4770      	bx	lr

0800844a <k_malloc>:
{
 800844a:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
 800844c:	2004      	movs	r0, #4
 800844e:	f7fd bf87 	b.w	8006360 <k_aligned_alloc>

08008452 <k_heap_init>:
{
 8008452:	b410      	push	{r4}
 8008454:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 8008458:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 800845c:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
 8008460:	f7fe bb72 	b.w	8006b48 <sys_heap_init>

08008464 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 8008464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008468:	b085      	sub	sp, #20
 800846a:	4606      	mov	r6, r0
 800846c:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800846e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
 8008472:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 8008474:	f7ff ff78 	bl	8008368 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 8008478:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800847c:	4605      	mov	r5, r0
 800847e:	460f      	mov	r7, r1
 8008480:	f04f 0310 	mov.w	r3, #16
 8008484:	f3ef 8411 	mrs	r4, BASEPRI
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 8008490:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 8008494:	464a      	mov	r2, r9
 8008496:	4641      	mov	r1, r8
 8008498:	4630      	mov	r0, r6
 800849a:	f7fe fadc 	bl	8006a56 <sys_heap_aligned_alloc>
 800849e:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
 80084a0:	f7fd fe8a 	bl	80061b8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 80084a4:	9b03      	ldr	r3, [sp, #12]
 80084a6:	b13b      	cbz	r3, 80084b8 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
 80084a8:	f384 8811 	msr	BASEPRI, r4
 80084ac:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	b005      	add	sp, #20
 80084b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
 80084b8:	1a28      	subs	r0, r5, r0
 80084ba:	eb67 0101 	sbc.w	r1, r7, r1
 80084be:	2801      	cmp	r0, #1
 80084c0:	f171 0200 	sbcs.w	r2, r1, #0
 80084c4:	dbf0      	blt.n	80084a8 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 80084c6:	e9cd 0100 	strd	r0, r1, [sp]
 80084ca:	465a      	mov	r2, fp
 80084cc:	4621      	mov	r1, r4
 80084ce:	4650      	mov	r0, sl
 80084d0:	f7fd fb04 	bl	8005adc <z_pend_curr>
	__asm__ volatile(
 80084d4:	f04f 0310 	mov.w	r3, #16
 80084d8:	f3ef 8411 	mrs	r4, BASEPRI
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	e7d6      	b.n	8008494 <k_heap_aligned_alloc+0x30>

080084e6 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
 80084e6:	b538      	push	{r3, r4, r5, lr}
 80084e8:	4604      	mov	r4, r0
 80084ea:	f04f 0310 	mov.w	r3, #16
 80084ee:	f3ef 8511 	mrs	r5, BASEPRI
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
 80084fa:	f7fe fa5c 	bl	80069b6 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
 80084fe:	f104 000c 	add.w	r0, r4, #12
 8008502:	f7ff feea 	bl	80082da <z_unpend_all>
 8008506:	b130      	cbz	r0, 8008516 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
 8008508:	4629      	mov	r1, r5
 800850a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
 800850e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
 8008512:	f7fd ba5f 	b.w	80059d4 <z_reschedule>
	__asm__ volatile(
 8008516:	f385 8811 	msr	BASEPRI, r5
 800851a:	f3bf 8f6f 	isb	sy
}
 800851e:	bd38      	pop	{r3, r4, r5, pc}

08008520 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8008520:	4770      	bx	lr

08008522 <memcmp>:
 8008522:	b510      	push	{r4, lr}
 8008524:	3901      	subs	r1, #1
 8008526:	4402      	add	r2, r0
 8008528:	4290      	cmp	r0, r2
 800852a:	d101      	bne.n	8008530 <memcmp+0xe>
 800852c:	2000      	movs	r0, #0
 800852e:	e005      	b.n	800853c <memcmp+0x1a>
 8008530:	7803      	ldrb	r3, [r0, #0]
 8008532:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008536:	42a3      	cmp	r3, r4
 8008538:	d001      	beq.n	800853e <memcmp+0x1c>
 800853a:	1b18      	subs	r0, r3, r4
 800853c:	bd10      	pop	{r4, pc}
 800853e:	3001      	adds	r0, #1
 8008540:	e7f2      	b.n	8008528 <memcmp+0x6>

08008542 <memcpy>:
 8008542:	440a      	add	r2, r1
 8008544:	4291      	cmp	r1, r2
 8008546:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800854a:	d100      	bne.n	800854e <memcpy+0xc>
 800854c:	4770      	bx	lr
 800854e:	b510      	push	{r4, lr}
 8008550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008558:	4291      	cmp	r1, r2
 800855a:	d1f9      	bne.n	8008550 <memcpy+0xe>
 800855c:	bd10      	pop	{r4, pc}

0800855e <memset>:
 800855e:	4402      	add	r2, r0
 8008560:	4603      	mov	r3, r0
 8008562:	4293      	cmp	r3, r2
 8008564:	d100      	bne.n	8008568 <memset+0xa>
 8008566:	4770      	bx	lr
 8008568:	f803 1b01 	strb.w	r1, [r3], #1
 800856c:	e7f9      	b.n	8008562 <memset+0x4>

0800856e <strncpy>:
 800856e:	b510      	push	{r4, lr}
 8008570:	3901      	subs	r1, #1
 8008572:	4603      	mov	r3, r0
 8008574:	b132      	cbz	r2, 8008584 <strncpy+0x16>
 8008576:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800857a:	f803 4b01 	strb.w	r4, [r3], #1
 800857e:	3a01      	subs	r2, #1
 8008580:	2c00      	cmp	r4, #0
 8008582:	d1f7      	bne.n	8008574 <strncpy+0x6>
 8008584:	441a      	add	r2, r3
 8008586:	2100      	movs	r1, #0
 8008588:	4293      	cmp	r3, r2
 800858a:	d100      	bne.n	800858e <strncpy+0x20>
 800858c:	bd10      	pop	{r4, pc}
 800858e:	f803 1b01 	strb.w	r1, [r3], #1
 8008592:	e7f9      	b.n	8008588 <strncpy+0x1a>

08008594 <strnlen>:
 8008594:	b510      	push	{r4, lr}
 8008596:	4602      	mov	r2, r0
 8008598:	4401      	add	r1, r0
 800859a:	428a      	cmp	r2, r1
 800859c:	4613      	mov	r3, r2
 800859e:	d003      	beq.n	80085a8 <strnlen+0x14>
 80085a0:	781c      	ldrb	r4, [r3, #0]
 80085a2:	3201      	adds	r2, #1
 80085a4:	2c00      	cmp	r4, #0
 80085a6:	d1f8      	bne.n	800859a <strnlen+0x6>
 80085a8:	1a18      	subs	r0, r3, r0
 80085aa:	bd10      	pop	{r4, pc}
