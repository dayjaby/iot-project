
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 49 00 20 f1 62 00 08 57 c1 00 08 29 63 00 08     .I. .b..W...)c..
 8000010:	29 63 00 08 29 63 00 08 29 63 00 08 00 00 00 00     )c..)c..)c......
	...
 800002c:	49 5f 00 08 29 63 00 08 00 00 00 00 b5 5e 00 08     I_..)c.......^..
 800003c:	bd 5c 00 08                                         .\..

08000040 <_irq_vector_table>:
 8000040:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000050:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000060:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000070:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000080:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000090:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 80000a0:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 80000b0:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 80000c0:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 80000d0:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 80000e0:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 80000f0:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000100:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000110:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000120:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000130:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000140:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000150:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000160:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000170:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000180:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 8000190:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 80001a0:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 80001b0:	c9 62 00 08 c9 62 00 08 c9 62 00 08 c9 62 00 08     .b...b...b...b..
 80001c0:	c9 62 00 08                                         .b..

Disassembly of section text:

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b978 	b.w	8000db4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460e      	mov	r6, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	468e      	mov	lr, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14c      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d967      	bls.n	8000bc2 <__udivmoddi4+0xe6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b152      	cbz	r2, 8000b0e <__udivmoddi4+0x32>
 8000af8:	fa01 f302 	lsl.w	r3, r1, r2
 8000afc:	f1c2 0120 	rsb	r1, r2, #32
 8000b00:	fa20 f101 	lsr.w	r1, r0, r1
 8000b04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b08:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0c:	4094      	lsls	r4, r2
 8000b0e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b12:	0c21      	lsrs	r1, r4, #16
 8000b14:	fbbe f6f8 	udiv	r6, lr, r8
 8000b18:	fa1f f78c 	uxth.w	r7, ip
 8000b1c:	fb08 e316 	mls	r3, r8, r6, lr
 8000b20:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b24:	fb06 f107 	mul.w	r1, r6, r7
 8000b28:	4299      	cmp	r1, r3
 8000b2a:	d90a      	bls.n	8000b42 <__udivmoddi4+0x66>
 8000b2c:	eb1c 0303 	adds.w	r3, ip, r3
 8000b30:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b34:	f080 811e 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b38:	4299      	cmp	r1, r3
 8000b3a:	f240 811b 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3e:	3e02      	subs	r6, #2
 8000b40:	4463      	add	r3, ip
 8000b42:	1a5b      	subs	r3, r3, r1
 8000b44:	b2a4      	uxth	r4, r4
 8000b46:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b4a:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b52:	fb00 f707 	mul.w	r7, r0, r7
 8000b56:	42a7      	cmp	r7, r4
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b62:	f080 8109 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b66:	42a7      	cmp	r7, r4
 8000b68:	f240 8106 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6c:	4464      	add	r4, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1be4      	subs	r4, r4, r7
 8000b72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d4      	lsrs	r4, r2
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e9c5 4300 	strd	r4, r3, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d908      	bls.n	8000b9c <__udivmoddi4+0xc0>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2100      	movs	r1, #0
 8000b92:	e9c5 0600 	strd	r0, r6, [r5]
 8000b96:	4608      	mov	r0, r1
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	fab3 f183 	clz	r1, r3
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	d149      	bne.n	8000c38 <__udivmoddi4+0x15c>
 8000ba4:	42b3      	cmp	r3, r6
 8000ba6:	d302      	bcc.n	8000bae <__udivmoddi4+0xd2>
 8000ba8:	4282      	cmp	r2, r0
 8000baa:	f200 80ff 	bhi.w	8000dac <__udivmoddi4+0x2d0>
 8000bae:	1a84      	subs	r4, r0, r2
 8000bb0:	eb66 0303 	sbc.w	r3, r6, r3
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	469e      	mov	lr, r3
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d0e2      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bbc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc0:	e7df      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xea>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 808e 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bd0:	eba1 060c 	sub.w	r6, r1, ip
 8000bd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd8:	fa1f f38c 	uxth.w	r3, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb6 fef7 	udiv	lr, r6, r7
 8000be2:	fb07 601e 	mls	r0, r7, lr, r6
 8000be6:	0c26      	lsrs	r6, r4, #16
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	fb03 f00e 	mul.w	r0, r3, lr
 8000bf0:	42b0      	cmp	r0, r6
 8000bf2:	d908      	bls.n	8000c06 <__udivmoddi4+0x12a>
 8000bf4:	eb1c 0606 	adds.w	r6, ip, r6
 8000bf8:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8000bfc:	d202      	bcs.n	8000c04 <__udivmoddi4+0x128>
 8000bfe:	42b0      	cmp	r0, r6
 8000c00:	f200 80d0 	bhi.w	8000da4 <__udivmoddi4+0x2c8>
 8000c04:	46c6      	mov	lr, r8
 8000c06:	1a36      	subs	r6, r6, r0
 8000c08:	b2a4      	uxth	r4, r4
 8000c0a:	fbb6 f0f7 	udiv	r0, r6, r7
 8000c0e:	fb07 6610 	mls	r6, r7, r0, r6
 8000c12:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000c16:	fb00 f303 	mul.w	r3, r0, r3
 8000c1a:	42a3      	cmp	r3, r4
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x154>
 8000c1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c22:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x152>
 8000c28:	42a3      	cmp	r3, r4
 8000c2a:	f200 80b8 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c2e:	4630      	mov	r0, r6
 8000c30:	1ae4      	subs	r4, r4, r3
 8000c32:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c36:	e79f      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c38:	f1c1 0720 	rsb	r7, r1, #32
 8000c3c:	fa22 f407 	lsr.w	r4, r2, r7
 8000c40:	408b      	lsls	r3, r1
 8000c42:	4323      	orrs	r3, r4
 8000c44:	fa06 fc01 	lsl.w	ip, r6, r1
 8000c48:	fa26 f407 	lsr.w	r4, r6, r7
 8000c4c:	fa20 f607 	lsr.w	r6, r0, r7
 8000c50:	ea46 060c 	orr.w	r6, r6, ip
 8000c54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c58:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5c:	fbb4 fef9 	udiv	lr, r4, r9
 8000c60:	0c30      	lsrs	r0, r6, #16
 8000c62:	fa1f fc83 	uxth.w	ip, r3
 8000c66:	fb09 441e 	mls	r4, r9, lr, r4
 8000c6a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000c6e:	fb0e f00c 	mul.w	r0, lr, ip
 8000c72:	42a0      	cmp	r0, r4
 8000c74:	fa02 f201 	lsl.w	r2, r2, r1
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x1b4>
 8000c7a:	191c      	adds	r4, r3, r4
 8000c7c:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000c80:	f080 808b 	bcs.w	8000d9a <__udivmoddi4+0x2be>
 8000c84:	42a0      	cmp	r0, r4
 8000c86:	f240 8088 	bls.w	8000d9a <__udivmoddi4+0x2be>
 8000c8a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c8e:	441c      	add	r4, r3
 8000c90:	1a24      	subs	r4, r4, r0
 8000c92:	b2b6      	uxth	r6, r6
 8000c94:	fbb4 f0f9 	udiv	r0, r4, r9
 8000c98:	fb09 4410 	mls	r4, r9, r0, r4
 8000c9c:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000ca0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca4:	45a4      	cmp	ip, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x1dc>
 8000ca8:	191c      	adds	r4, r3, r4
 8000caa:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
 8000cae:	d270      	bcs.n	8000d92 <__udivmoddi4+0x2b6>
 8000cb0:	45a4      	cmp	ip, r4
 8000cb2:	d96e      	bls.n	8000d92 <__udivmoddi4+0x2b6>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	441c      	add	r4, r3
 8000cb8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000cbc:	fba0 e602 	umull	lr, r6, r0, r2
 8000cc0:	eba4 040c 	sub.w	r4, r4, ip
 8000cc4:	42b4      	cmp	r4, r6
 8000cc6:	46f4      	mov	ip, lr
 8000cc8:	46b1      	mov	r9, r6
 8000cca:	d359      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000ccc:	d056      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d06e      	beq.n	8000db0 <__udivmoddi4+0x2d4>
 8000cd2:	ebb8 030c 	subs.w	r3, r8, ip
 8000cd6:	eb64 0409 	sbc.w	r4, r4, r9
 8000cda:	40cb      	lsrs	r3, r1
 8000cdc:	fa04 f707 	lsl.w	r7, r4, r7
 8000ce0:	431f      	orrs	r7, r3
 8000ce2:	40cc      	lsrs	r4, r1
 8000ce4:	e9c5 7400 	strd	r7, r4, [r5]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e74a      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000cec:	f1c2 0020 	rsb	r0, r2, #32
 8000cf0:	fa24 f100 	lsr.w	r1, r4, r0
 8000cf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf8:	fa06 f302 	lsl.w	r3, r6, r2
 8000cfc:	fa26 f000 	lsr.w	r0, r6, r0
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	ea41 0603 	orr.w	r6, r1, r3
 8000d08:	fbb0 f1f7 	udiv	r1, r0, r7
 8000d0c:	fa1f f38c 	uxth.w	r3, ip
 8000d10:	fb07 0e11 	mls	lr, r7, r1, r0
 8000d14:	0c30      	lsrs	r0, r6, #16
 8000d16:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d1a:	fb01 fe03 	mul.w	lr, r1, r3
 8000d1e:	4586      	cmp	lr, r0
 8000d20:	fa04 f402 	lsl.w	r4, r4, r2
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x25c>
 8000d26:	eb1c 0000 	adds.w	r0, ip, r0
 8000d2a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000d2e:	d232      	bcs.n	8000d96 <__udivmoddi4+0x2ba>
 8000d30:	4586      	cmp	lr, r0
 8000d32:	d930      	bls.n	8000d96 <__udivmoddi4+0x2ba>
 8000d34:	3902      	subs	r1, #2
 8000d36:	4460      	add	r0, ip
 8000d38:	eba0 000e 	sub.w	r0, r0, lr
 8000d3c:	b2b6      	uxth	r6, r6
 8000d3e:	fbb0 fef7 	udiv	lr, r0, r7
 8000d42:	fb07 001e 	mls	r0, r7, lr, r0
 8000d46:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	42b0      	cmp	r0, r6
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d52:	eb1c 0606 	adds.w	r6, ip, r6
 8000d56:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8000d5a:	d218      	bcs.n	8000d8e <__udivmoddi4+0x2b2>
 8000d5c:	42b0      	cmp	r0, r6
 8000d5e:	d916      	bls.n	8000d8e <__udivmoddi4+0x2b2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	4466      	add	r6, ip
 8000d66:	1a36      	subs	r6, r6, r0
 8000d68:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
 8000d6c:	e737      	b.n	8000bde <__udivmoddi4+0x102>
 8000d6e:	4629      	mov	r1, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e706      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e4      	b.n	8000b42 <__udivmoddi4+0x66>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f9      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d7c:	45f0      	cmp	r8, lr
 8000d7e:	d2a6      	bcs.n	8000cce <__udivmoddi4+0x1f2>
 8000d80:	ebbe 0c02 	subs.w	ip, lr, r2
 8000d84:	eb66 0303 	sbc.w	r3, r6, r3
 8000d88:	3801      	subs	r0, #1
 8000d8a:	4699      	mov	r9, r3
 8000d8c:	e79f      	b.n	8000cce <__udivmoddi4+0x1f2>
 8000d8e:	46c6      	mov	lr, r8
 8000d90:	e7e9      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e790      	b.n	8000cb8 <__udivmoddi4+0x1dc>
 8000d96:	4641      	mov	r1, r8
 8000d98:	e7ce      	b.n	8000d38 <__udivmoddi4+0x25c>
 8000d9a:	46d6      	mov	lr, sl
 8000d9c:	e778      	b.n	8000c90 <__udivmoddi4+0x1b4>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e745      	b.n	8000c30 <__udivmoddi4+0x154>
 8000da4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da8:	4466      	add	r6, ip
 8000daa:	e72c      	b.n	8000c06 <__udivmoddi4+0x12a>
 8000dac:	4608      	mov	r0, r1
 8000dae:	e703      	b.n	8000bb8 <__udivmoddi4+0xdc>
 8000db0:	4629      	mov	r1, r5
 8000db2:	e6e6      	b.n	8000b82 <__udivmoddi4+0xa6>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <strcmp>:
 8000db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dc0:	2a01      	cmp	r2, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	429a      	cmpcs	r2, r3
 8000dc6:	d0f7      	beq.n	8000db8 <strcmp>
 8000dc8:	1ad0      	subs	r0, r2, r3
 8000dca:	4770      	bx	lr

08000dcc <strlen>:
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d1fb      	bne.n	8000dce <strlen+0x2>
 8000dd6:	1a18      	subs	r0, r3, r0
 8000dd8:	3801      	subs	r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	0000      	movs	r0, r0
	...

08000de0 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t>:
		mavlink_msg_gps_raw_int_decode(&msg, &gps_raw_int);
		handle_gps_raw_int(msg.sysid, gps_raw_int);
	}
}

void handle_gps_raw_int(uint8_t sys_id, mavlink_gps_raw_int_t& gps_raw_int) {
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	ed2d 8b02 	vpush	{d8}
	if (OUR_ID == 0 && sys_id <= SYS_IDS) {
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x80>)
 8000de8:	781a      	ldrb	r2, [r3, #0]
void handle_gps_raw_int(uint8_t sys_id, mavlink_gps_raw_int_t& gps_raw_int) {
 8000dea:	4604      	mov	r4, r0
 8000dec:	460d      	mov	r5, r1
	if (OUR_ID == 0 && sys_id <= SYS_IDS) {
 8000dee:	b922      	cbnz	r2, 8000dfa <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x1a>
 8000df0:	2802      	cmp	r0, #2
		// now we know who we are
		OUR_ID = sys_id;
 8000df2:	bf9e      	ittt	ls
 8000df4:	7018      	strbls	r0, [r3, #0]
		mac_addr[1] = sys_id;
 8000df6:	4b1b      	ldrls	r3, [pc, #108]	; (8000e64 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x84>)
 8000df8:	7058      	strbls	r0, [r3, #1]
	}
	queue_coords(sys_id,
		gps_raw_int.lat / 1e7,
		gps_raw_int.lon / 1e7,
		gps_raw_int.alt / 1e3
 8000dfa:	6928      	ldr	r0, [r5, #16]
 8000dfc:	f7ff fb8a 	bl	8000514 <__aeabi_i2d>
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x88>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fd1a 	bl	800083c <__aeabi_ddiv>
	queue_coords(sys_id,
 8000e08:	f7ff fe00 	bl	8000a0c <__aeabi_d2f>
 8000e0c:	ee08 0a90 	vmov	s17, r0
		gps_raw_int.lon / 1e7,
 8000e10:	68e8      	ldr	r0, [r5, #12]
 8000e12:	f7ff fb7f 	bl	8000514 <__aeabi_i2d>
 8000e16:	a310      	add	r3, pc, #64	; (adr r3, 8000e58 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x78>)
 8000e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1c:	f7ff fd0e 	bl	800083c <__aeabi_ddiv>
	queue_coords(sys_id,
 8000e20:	f7ff fdf4 	bl	8000a0c <__aeabi_d2f>
 8000e24:	ee08 0a10 	vmov	s16, r0
		gps_raw_int.lat / 1e7,
 8000e28:	68a8      	ldr	r0, [r5, #8]
 8000e2a:	f7ff fb73 	bl	8000514 <__aeabi_i2d>
 8000e2e:	a30a      	add	r3, pc, #40	; (adr r3, 8000e58 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x78>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	f7ff fd02 	bl	800083c <__aeabi_ddiv>
	queue_coords(sys_id,
 8000e38:	f7ff fde8 	bl	8000a0c <__aeabi_d2f>
 8000e3c:	eeb0 1a68 	vmov.f32	s2, s17
 8000e40:	eef0 0a48 	vmov.f32	s1, s16
	);
}
 8000e44:	ecbd 8b02 	vpop	{d8}
	queue_coords(sys_id,
 8000e48:	ee00 0a10 	vmov	s0, r0
 8000e4c:	4620      	mov	r0, r4
}
 8000e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	queue_coords(sys_id,
 8000e52:	f001 b8ef 	b.w	8002034 <_Z12queue_coordshfff>
 8000e56:	bf00      	nop
 8000e58:	00000000 	.word	0x00000000
 8000e5c:	416312d0 	.word	0x416312d0
 8000e60:	20002259 	.word	0x20002259
 8000e64:	200026e6 	.word	0x200026e6
 8000e68:	408f4000 	.word	0x408f4000
 8000e6c:	00000000 	.word	0x00000000

08000e70 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8000e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e74:	ed2d 8b02 	vpush	{d8}
	uint64_t round = BIT64(59); /* 0.5 */
 8000e78:	ed9f 8bab 	vldr	d8, [pc, #684]	; 8001128 <cbvprintf+0x2b8>
{
 8000e7c:	b09b      	sub	sp, #108	; 0x6c
 8000e7e:	4681      	mov	r9, r0
 8000e80:	468a      	mov	sl, r1
 8000e82:	4615      	mov	r5, r2
 8000e84:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000e86:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000e88:	7828      	ldrb	r0, [r5, #0]
 8000e8a:	b910      	cbnz	r0, 8000e92 <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	f000 bdc9 	b.w	8001a24 <cbvprintf+0xbb4>
			OUTC(*fp++);
 8000e92:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
 8000e94:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000e96:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
 8000e98:	d006      	beq.n	8000ea8 <cbvprintf+0x38>
			OUTC(*fp++);
 8000e9a:	4651      	mov	r1, sl
			OUTC('%');
 8000e9c:	47c8      	blx	r9
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	f2c0 85c0 	blt.w	8001a24 <cbvprintf+0xbb4>
 8000ea4:	3601      	adds	r6, #1
		if (bps == NULL) {
 8000ea6:	e22e      	b.n	8001306 <cbvprintf+0x496>
		} state = {
 8000ea8:	2218      	movs	r2, #24
 8000eaa:	2100      	movs	r1, #0
 8000eac:	a80c      	add	r0, sp, #48	; 0x30
 8000eae:	f00c fc3b 	bl	800d728 <memset>
	if (*sp == '%') {
 8000eb2:	786b      	ldrb	r3, [r5, #1]
 8000eb4:	2b25      	cmp	r3, #37	; 0x25
 8000eb6:	d059      	beq.n	8000f6c <cbvprintf+0xfc>
 8000eb8:	1c6a      	adds	r2, r5, #1
 8000eba:	4617      	mov	r7, r2
		switch (*sp) {
 8000ebc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000ec0:	2b2b      	cmp	r3, #43	; 0x2b
 8000ec2:	f000 808b 	beq.w	8000fdc <cbvprintf+0x16c>
 8000ec6:	d879      	bhi.n	8000fbc <cbvprintf+0x14c>
 8000ec8:	2b20      	cmp	r3, #32
 8000eca:	f000 808c 	beq.w	8000fe6 <cbvprintf+0x176>
 8000ece:	2b23      	cmp	r3, #35	; 0x23
 8000ed0:	f000 808e 	beq.w	8000ff0 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
 8000ed4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000ed8:	f003 0244 	and.w	r2, r3, #68	; 0x44
 8000edc:	2a44      	cmp	r2, #68	; 0x44
 8000ede:	d103      	bne.n	8000ee8 <cbvprintf+0x78>
		conv->flag_zero = false;
 8000ee0:	f36f 1386 	bfc	r3, #6, #1
 8000ee4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
 8000ee8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000eec:	970a      	str	r7, [sp, #40]	; 0x28
 8000eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
 8000ef6:	783b      	ldrb	r3, [r7, #0]
 8000ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8000efa:	d17e      	bne.n	8000ffa <cbvprintf+0x18a>
		conv->width_star = true;
 8000efc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
 8000f08:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
 8000f0a:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	2a2e      	cmp	r2, #46	; 0x2e
 8000f10:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000f14:	bf0c      	ite	eq
 8000f16:	2101      	moveq	r1, #1
 8000f18:	2100      	movne	r1, #0
 8000f1a:	f361 0241 	bfi	r2, r1, #1, #1
 8000f1e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
 8000f22:	d10b      	bne.n	8000f3c <cbvprintf+0xcc>
	++sp;
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
 8000f28:	785a      	ldrb	r2, [r3, #1]
 8000f2a:	2a2a      	cmp	r2, #42	; 0x2a
 8000f2c:	d17b      	bne.n	8001026 <cbvprintf+0x1b6>
		conv->prec_star = true;
 8000f2e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000f32:	f042 0204 	orr.w	r2, r2, #4
 8000f36:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
 8000f3a:	3302      	adds	r3, #2
	switch (*sp) {
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000f42:	286c      	cmp	r0, #108	; 0x6c
 8000f44:	f000 80cf 	beq.w	80010e6 <cbvprintf+0x276>
 8000f48:	d87d      	bhi.n	8001046 <cbvprintf+0x1d6>
 8000f4a:	2868      	cmp	r0, #104	; 0x68
 8000f4c:	f000 8084 	beq.w	8001058 <cbvprintf+0x1e8>
 8000f50:	286a      	cmp	r0, #106	; 0x6a
 8000f52:	f000 80d2 	beq.w	80010fa <cbvprintf+0x28a>
 8000f56:	284c      	cmp	r0, #76	; 0x4c
 8000f58:	f000 80d6 	beq.w	8001108 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
 8000f5c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000f60:	f36f 02c6 	bfc	r2, #3, #4
 8000f64:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
 8000f68:	4619      	mov	r1, r3
 8000f6a:	e080      	b.n	800106e <cbvprintf+0x1fe>
		conv->specifier = *sp++;
 8000f6c:	1caa      	adds	r2, r5, #2
 8000f6e:	9202      	str	r2, [sp, #8]
 8000f70:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
 8000f74:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000f78:	07df      	lsls	r7, r3, #31
 8000f7a:	f140 8178 	bpl.w	800126e <cbvprintf+0x3fe>
			width = va_arg(ap, int);
 8000f7e:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
 8000f82:	f1bb 0f00 	cmp.w	fp, #0
 8000f86:	da07      	bge.n	8000f98 <cbvprintf+0x128>
				conv->flag_dash = true;
 8000f88:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8000f8c:	f042 0204 	orr.w	r2, r2, #4
 8000f90:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
 8000f94:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
 8000f98:	0758      	lsls	r0, r3, #29
 8000f9a:	f140 8171 	bpl.w	8001280 <cbvprintf+0x410>
			int arg = va_arg(ap, int);
 8000f9e:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 8000fa2:	f1b8 0f00 	cmp.w	r8, #0
 8000fa6:	f280 8170 	bge.w	800128a <cbvprintf+0x41a>
				conv->prec_present = false;
 8000faa:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000fae:	f36f 0341 	bfc	r3, #1, #1
 8000fb2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
 8000fb6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8000fba:	e166      	b.n	800128a <cbvprintf+0x41a>
		switch (*sp) {
 8000fbc:	2b2d      	cmp	r3, #45	; 0x2d
 8000fbe:	d006      	beq.n	8000fce <cbvprintf+0x15e>
 8000fc0:	2b30      	cmp	r3, #48	; 0x30
 8000fc2:	d187      	bne.n	8000ed4 <cbvprintf+0x64>
			conv->flag_zero = true;
 8000fc4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fcc:	e003      	b.n	8000fd6 <cbvprintf+0x166>
			conv->flag_dash = true;
 8000fce:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
 8000fd6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
 8000fda:	e76e      	b.n	8000eba <cbvprintf+0x4a>
			conv->flag_plus = true;
 8000fdc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	e7f7      	b.n	8000fd6 <cbvprintf+0x166>
			conv->flag_space = true;
 8000fe6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000fea:	f043 0310 	orr.w	r3, r3, #16
 8000fee:	e7f2      	b.n	8000fd6 <cbvprintf+0x166>
			conv->flag_hash = true;
 8000ff0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	e7ed      	b.n	8000fd6 <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
 8000ffa:	a80a      	add	r0, sp, #40	; 0x28
 8000ffc:	f001 fc90 	bl	8002920 <extract_decimal>
	if (sp != wp) {
 8001000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001002:	42bb      	cmp	r3, r7
 8001004:	d081      	beq.n	8000f0a <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
 8001006:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
		conv->width_value = width;
 800100a:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
 800100c:	f3c7 0140 	ubfx	r1, r7, #1, #1
 8001010:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
 8001014:	0052      	lsls	r2, r2, #1
 8001016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800101a:	f007 017d 	and.w	r1, r7, #125	; 0x7d
 800101e:	430a      	orrs	r2, r1
 8001020:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8001024:	e771      	b.n	8000f0a <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
 8001026:	a80a      	add	r0, sp, #40	; 0x28
 8001028:	f001 fc7a 	bl	8002920 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 800102c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
 8001030:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
 8001032:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8001036:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
 800103a:	f360 0341 	bfi	r3, r0, #1, #1
 800103e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
 8001042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001044:	e77a      	b.n	8000f3c <cbvprintf+0xcc>
	switch (*sp) {
 8001046:	2874      	cmp	r0, #116	; 0x74
 8001048:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800104c:	d059      	beq.n	8001102 <cbvprintf+0x292>
 800104e:	287a      	cmp	r0, #122	; 0x7a
 8001050:	d184      	bne.n	8000f5c <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
 8001052:	4613      	mov	r3, r2
 8001054:	2206      	movs	r2, #6
 8001056:	e041      	b.n	80010dc <cbvprintf+0x26c>
		if (*++sp == 'h') {
 8001058:	785a      	ldrb	r2, [r3, #1]
 800105a:	2a68      	cmp	r2, #104	; 0x68
 800105c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8001060:	d13a      	bne.n	80010d8 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
 8001062:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8001064:	f361 02c6 	bfi	r2, r1, #3, #4
 8001068:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
 800106c:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
 800106e:	460b      	mov	r3, r1
 8001070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001074:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
 8001076:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 8001078:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
 800107c:	f200 80cd 	bhi.w	800121a <cbvprintf+0x3aa>
 8001080:	2a57      	cmp	r2, #87	; 0x57
 8001082:	d855      	bhi.n	8001130 <cbvprintf+0x2c0>
 8001084:	2a41      	cmp	r2, #65	; 0x41
 8001086:	d004      	beq.n	8001092 <cbvprintf+0x222>
 8001088:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 800108c:	2b02      	cmp	r3, #2
 800108e:	f200 80c4 	bhi.w	800121a <cbvprintf+0x3aa>
		conv->specifier_cat = SPECIFIER_FP;
 8001092:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001096:	2104      	movs	r1, #4
 8001098:	f361 0302 	bfi	r3, r1, #0, #3
 800109c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 80010a0:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80010a4:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
 80010a8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
 80010ac:	f1d8 0300 	rsbs	r3, r8, #0
 80010b0:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
 80010b4:	f363 12c7 	bfi	r2, r3, #7, #1
 80010b8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
 80010bc:	b2d3      	uxtb	r3, r2
 80010be:	0612      	lsls	r2, r2, #24
 80010c0:	f100 80d3 	bmi.w	800126a <cbvprintf+0x3fa>
		if (conv->length_mod == LENGTH_L) {
 80010c4:	f003 0278 	and.w	r2, r3, #120	; 0x78
 80010c8:	2a18      	cmp	r2, #24
 80010ca:	f040 80a3 	bne.w	8001214 <cbvprintf+0x3a4>
			conv->length_mod = LENGTH_NONE;
 80010ce:	f36f 03c6 	bfc	r3, #3, #4
 80010d2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 80010d6:	e08a      	b.n	80011ee <cbvprintf+0x37e>
			conv->length_mod = LENGTH_H;
 80010d8:	4613      	mov	r3, r2
 80010da:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
 80010dc:	f362 03c6 	bfi	r3, r2, #3, #4
 80010e0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 80010e4:	e7c3      	b.n	800106e <cbvprintf+0x1fe>
		if (*++sp == 'l') {
 80010e6:	785a      	ldrb	r2, [r3, #1]
 80010e8:	2a6c      	cmp	r2, #108	; 0x6c
 80010ea:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80010ee:	d101      	bne.n	80010f4 <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
 80010f0:	2104      	movs	r1, #4
 80010f2:	e7b7      	b.n	8001064 <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
 80010f4:	4613      	mov	r3, r2
 80010f6:	2203      	movs	r2, #3
 80010f8:	e7f0      	b.n	80010dc <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
 80010fa:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80010fe:	2205      	movs	r2, #5
 8001100:	e7ec      	b.n	80010dc <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
 8001102:	4613      	mov	r3, r2
 8001104:	2207      	movs	r2, #7
 8001106:	e7e9      	b.n	80010dc <cbvprintf+0x26c>
		conv->unsupported = true;
 8001108:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800110c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001110:	f023 0302 	bic.w	r3, r3, #2
 8001114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
 8001120:	e7a5      	b.n	800106e <cbvprintf+0x1fe>
 8001122:	bf00      	nop
 8001124:	f3af 8000 	nop.w
 8001128:	00000000 	.word	0x00000000
 800112c:	08000000 	.word	0x08000000
 8001130:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8001134:	2b20      	cmp	r3, #32
 8001136:	d870      	bhi.n	800121a <cbvprintf+0x3aa>
 8001138:	a101      	add	r1, pc, #4	; (adr r1, 8001140 <cbvprintf+0x2d0>)
 800113a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800113e:	bf00      	nop
 8001140:	080011f3 	.word	0x080011f3
 8001144:	0800121b 	.word	0x0800121b
 8001148:	0800121b 	.word	0x0800121b
 800114c:	0800121b 	.word	0x0800121b
 8001150:	0800121b 	.word	0x0800121b
 8001154:	0800121b 	.word	0x0800121b
 8001158:	0800121b 	.word	0x0800121b
 800115c:	0800121b 	.word	0x0800121b
 8001160:	0800121b 	.word	0x0800121b
 8001164:	08001093 	.word	0x08001093
 8001168:	0800121b 	.word	0x0800121b
 800116c:	080011f3 	.word	0x080011f3
 8001170:	080011c5 	.word	0x080011c5
 8001174:	08001093 	.word	0x08001093
 8001178:	08001093 	.word	0x08001093
 800117c:	08001093 	.word	0x08001093
 8001180:	0800121b 	.word	0x0800121b
 8001184:	080011c5 	.word	0x080011c5
 8001188:	0800121b 	.word	0x0800121b
 800118c:	0800121b 	.word	0x0800121b
 8001190:	0800121b 	.word	0x0800121b
 8001194:	0800121b 	.word	0x0800121b
 8001198:	08001229 	.word	0x08001229
 800119c:	080011f3 	.word	0x080011f3
 80011a0:	0800124d 	.word	0x0800124d
 80011a4:	0800121b 	.word	0x0800121b
 80011a8:	0800121b 	.word	0x0800121b
 80011ac:	0800124d 	.word	0x0800124d
 80011b0:	0800121b 	.word	0x0800121b
 80011b4:	080011f3 	.word	0x080011f3
 80011b8:	0800121b 	.word	0x0800121b
 80011bc:	0800121b 	.word	0x0800121b
 80011c0:	080011f3 	.word	0x080011f3
		conv->specifier_cat = SPECIFIER_SINT;
 80011c4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80011c8:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
 80011ca:	f361 0302 	bfi	r3, r1, #0, #3
 80011ce:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 80011d2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80011d6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80011da:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
 80011dc:	bf02      	ittt	eq
 80011de:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
 80011e2:	f041 0101 	orreq.w	r1, r1, #1
 80011e6:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
 80011ea:	2a63      	cmp	r2, #99	; 0x63
 80011ec:	d005      	beq.n	80011fa <cbvprintf+0x38a>
	bool unsupported = false;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e006      	b.n	8001200 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_UINT;
 80011f2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80011f6:	2102      	movs	r1, #2
 80011f8:	e7e7      	b.n	80011ca <cbvprintf+0x35a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80011fa:	3b00      	subs	r3, #0
 80011fc:	bf18      	it	ne
 80011fe:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8001200:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8001204:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8001208:	430b      	orrs	r3, r1
 800120a:	f363 0241 	bfi	r2, r3, #1, #1
 800120e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
 8001212:	e6af      	b.n	8000f74 <cbvprintf+0x104>
		} else if ((conv->length_mod != LENGTH_NONE)
 8001214:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001218:	d0e9      	beq.n	80011ee <cbvprintf+0x37e>
			conv->invalid = true;
 800121a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8001226:	e7e2      	b.n	80011ee <cbvprintf+0x37e>
		conv->specifier_cat = SPECIFIER_PTR;
 8001228:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800122c:	2203      	movs	r2, #3
 800122e:	f362 0302 	bfi	r3, r2, #0, #3
 8001232:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001236:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800123a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800123e:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
 8001242:	f1dc 0300 	rsbs	r3, ip, #0
 8001246:	eb43 030c 	adc.w	r3, r3, ip
 800124a:	e7d9      	b.n	8001200 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_PTR;
 800124c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001250:	2203      	movs	r2, #3
 8001252:	f362 0302 	bfi	r3, r2, #0, #3
 8001256:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
 800125a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800125e:	f013 0f78 	tst.w	r3, #120	; 0x78
 8001262:	bf14      	ite	ne
 8001264:	2301      	movne	r3, #1
 8001266:	2300      	moveq	r3, #0
 8001268:	e7ca      	b.n	8001200 <cbvprintf+0x390>
			unsupported = true;
 800126a:	2301      	movs	r3, #1
 800126c:	e7c8      	b.n	8001200 <cbvprintf+0x390>
		} else if (conv->width_present) {
 800126e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
 8001272:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8001274:	bfb4      	ite	lt
 8001276:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
 800127a:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
 800127e:	e68b      	b.n	8000f98 <cbvprintf+0x128>
		} else if (conv->prec_present) {
 8001280:	0799      	lsls	r1, r3, #30
 8001282:	f57f ae98 	bpl.w	8000fb6 <cbvprintf+0x146>
			precision = conv->prec_value;
 8001286:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
 800128a:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 800128e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8001290:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
 8001294:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 8001298:	f003 0207 	and.w	r2, r3, #7
 800129c:	2a04      	cmp	r2, #4
 800129e:	d109      	bne.n	80012b4 <cbvprintf+0x444>
		    && !conv->prec_present) {
 80012a0:	078a      	lsls	r2, r1, #30
 80012a2:	d407      	bmi.n	80012b4 <cbvprintf+0x444>
			if (conv->specifier_a) {
 80012a4:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	bfb4      	ite	lt
 80012ac:	f04f 080d 	movlt.w	r8, #13
 80012b0:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
 80012b4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80012b8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 80012ba:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 80012be:	d137      	bne.n	8001330 <cbvprintf+0x4c0>
			switch (length_mod) {
 80012c0:	1ecb      	subs	r3, r1, #3
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d821      	bhi.n	800130a <cbvprintf+0x49a>
 80012c6:	e8df f003 	tbb	[pc, r3]
 80012ca:	0903      	.short	0x0903
 80012cc:	2009      	.short	0x2009
 80012ce:	20          	.byte	0x20
 80012cf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 80012d0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 80012d4:	17da      	asrs	r2, r3, #31
 80012d6:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 80012da:	e006      	b.n	80012ea <cbvprintf+0x47a>
					(sint_value_type)va_arg(ap, intmax_t);
 80012dc:	3407      	adds	r4, #7
 80012de:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 80012e2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80012e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
 80012ea:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80012ee:	07bb      	lsls	r3, r7, #30
 80012f0:	d054      	beq.n	800139c <cbvprintf+0x52c>
			OUTS(sp, fp);
 80012f2:	9b02      	ldr	r3, [sp, #8]
 80012f4:	462a      	mov	r2, r5
 80012f6:	4651      	mov	r1, sl
 80012f8:	4648      	mov	r0, r9
 80012fa:	f009 fa51 	bl	800a7a0 <outs>
 80012fe:	2800      	cmp	r0, #0
 8001300:	f2c0 8390 	blt.w	8001a24 <cbvprintf+0xbb4>
 8001304:	4406      	add	r6, r0
			while (pad_len-- > 0) {
 8001306:	9d02      	ldr	r5, [sp, #8]
 8001308:	e5be      	b.n	8000e88 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 800130a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 800130e:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8001310:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8001314:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8001318:	d105      	bne.n	8001326 <cbvprintf+0x4b6>
				value->uint = (unsigned char)value->uint;
 800131a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
 800131e:	930c      	str	r3, [sp, #48]	; 0x30
 8001320:	2300      	movs	r3, #0
 8001322:	930d      	str	r3, [sp, #52]	; 0x34
 8001324:	e7e1      	b.n	80012ea <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
 8001326:	2902      	cmp	r1, #2
 8001328:	d1df      	bne.n	80012ea <cbvprintf+0x47a>
				value->sint = (short)value->sint;
 800132a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800132e:	e7d1      	b.n	80012d4 <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8001330:	2b02      	cmp	r3, #2
 8001332:	d123      	bne.n	800137c <cbvprintf+0x50c>
			switch (length_mod) {
 8001334:	1ecb      	subs	r3, r1, #3
 8001336:	2b04      	cmp	r3, #4
 8001338:	d813      	bhi.n	8001362 <cbvprintf+0x4f2>
 800133a:	e8df f003 	tbb	[pc, r3]
 800133e:	0a03      	.short	0x0a03
 8001340:	120a      	.short	0x120a
 8001342:	12          	.byte	0x12
 8001343:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8001344:	6820      	ldr	r0, [r4, #0]
 8001346:	900c      	str	r0, [sp, #48]	; 0x30
 8001348:	2200      	movs	r2, #0
				value->sint = va_arg(ap, int);
 800134a:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 800134c:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
 800134e:	461c      	mov	r4, r3
 8001350:	e7cb      	b.n	80012ea <cbvprintf+0x47a>
					(uint_value_type)va_arg(ap,
 8001352:	1de3      	adds	r3, r4, #7
 8001354:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
 8001358:	ecb3 7b02 	vldmia	r3!, {d7}
 800135c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
 8001360:	e7f5      	b.n	800134e <cbvprintf+0x4de>
					(uint_value_type)va_arg(ap, size_t);
 8001362:	f854 3b04 	ldr.w	r3, [r4], #4
 8001366:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8001368:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
 8001370:	d0d3      	beq.n	800131a <cbvprintf+0x4aa>
			} else if (length_mod == LENGTH_H) {
 8001372:	2902      	cmp	r1, #2
 8001374:	d1b9      	bne.n	80012ea <cbvprintf+0x47a>
				value->uint = (unsigned short)value->uint;
 8001376:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800137a:	e7d0      	b.n	800131e <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_FP) {
 800137c:	2b04      	cmp	r3, #4
 800137e:	d107      	bne.n	8001390 <cbvprintf+0x520>
					(sint_value_type)va_arg(ap, long long);
 8001380:	3407      	adds	r4, #7
 8001382:	f024 0407 	bic.w	r4, r4, #7
 8001386:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
 800138a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800138e:	e7ac      	b.n	80012ea <cbvprintf+0x47a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8001390:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8001392:	bf04      	itt	eq
 8001394:	f854 3b04 	ldreq.w	r3, [r4], #4
 8001398:	930c      	streq	r3, [sp, #48]	; 0x30
 800139a:	e7a6      	b.n	80012ea <cbvprintf+0x47a>
		switch (conv->specifier) {
 800139c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80013a0:	2a78      	cmp	r2, #120	; 0x78
 80013a2:	d8b0      	bhi.n	8001306 <cbvprintf+0x496>
 80013a4:	2a57      	cmp	r2, #87	; 0x57
 80013a6:	f200 808c 	bhi.w	80014c2 <cbvprintf+0x652>
 80013aa:	2a25      	cmp	r2, #37	; 0x25
 80013ac:	f000 80d4 	beq.w	8001558 <cbvprintf+0x6e8>
 80013b0:	2a24      	cmp	r2, #36	; 0x24
 80013b2:	d9a8      	bls.n	8001306 <cbvprintf+0x496>
 80013b4:	2a41      	cmp	r2, #65	; 0x41
 80013b6:	d003      	beq.n	80013c0 <cbvprintf+0x550>
 80013b8:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d8a2      	bhi.n	8001306 <cbvprintf+0x496>
	} u = {
 80013c0:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f2c0 81b7 	blt.w	8001738 <cbvprintf+0x8c8>
	} else if (conv->flag_plus) {
 80013ca:	0738      	lsls	r0, r7, #28
 80013cc:	f100 81b6 	bmi.w	800173c <cbvprintf+0x8cc>
		*sign = ' ';
 80013d0:	f017 0710 	ands.w	r7, r7, #16
 80013d4:	bf18      	it	ne
 80013d6:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 80013d8:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 80013dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013e0:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	f040 81ab 	bne.w	8001740 <cbvprintf+0x8d0>
 80013ea:	ea51 0003 	orrs.w	r0, r1, r3
 80013ee:	bf14      	ite	ne
 80013f0:	2001      	movne	r0, #1
 80013f2:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
 80013f4:	02db      	lsls	r3, r3, #11
 80013f6:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80013fa:	02c9      	lsls	r1, r1, #11
		c = 'f';
 80013fc:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
 80013fe:	ea45 0e01 	orr.w	lr, r5, r1
 8001402:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
 8001406:	bf08      	it	eq
 8001408:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
 800140a:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 800140e:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
 8001412:	f000 8203 	beq.w	800181c <cbvprintf+0x9ac>
		if (is_subnormal) {
 8001416:	2800      	cmp	r0, #0
 8001418:	f040 81cb 	bne.w	80017b2 <cbvprintf+0x942>
		fract |= BIT_63;
 800141c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001420:	f04f 0c00 	mov.w	ip, #0
 8001424:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8001428:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
 800142c:	9109      	str	r1, [sp, #36]	; 0x24
 800142e:	4663      	mov	r3, ip
		fract *= 5U;
 8001430:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
 8001434:	f115 0f02 	cmn.w	r5, #2
 8001438:	f2c0 81c2 	blt.w	80017c0 <cbvprintf+0x950>
 800143c:	f1bc 0f00 	cmp.w	ip, #0
 8001440:	d001      	beq.n	8001446 <cbvprintf+0x5d6>
 8001442:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
 8001446:	2d00      	cmp	r5, #0
		fract += 2;
 8001448:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
 800144c:	f300 81cd 	bgt.w	80017ea <cbvprintf+0x97a>
	fract >>= (4 - expo);
 8001450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001452:	9908      	ldr	r1, [sp, #32]
 8001454:	f1c5 0c04 	rsb	ip, r5, #4
 8001458:	351c      	adds	r5, #28
 800145a:	fa00 f505 	lsl.w	r5, r0, r5
 800145e:	f1ac 0e20 	sub.w	lr, ip, #32
 8001462:	fa21 f10c 	lsr.w	r1, r1, ip
 8001466:	fa20 fe0e 	lsr.w	lr, r0, lr
 800146a:	4329      	orrs	r1, r5
 800146c:	ea41 010e 	orr.w	r1, r1, lr
 8001470:	fa20 f00c 	lsr.w	r0, r0, ip
 8001474:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
 8001478:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 800147c:	2947      	cmp	r1, #71	; 0x47
 800147e:	f040 81d4 	bne.w	800182a <cbvprintf+0x9ba>
		if (decexp < (-4 + 1) || decexp > precision) {
 8001482:	1cdd      	adds	r5, r3, #3
 8001484:	db02      	blt.n	800148c <cbvprintf+0x61c>
 8001486:	4598      	cmp	r8, r3
 8001488:	f280 81cb 	bge.w	8001822 <cbvprintf+0x9b2>
			c += 'e' - 'g';  /* e or E */
 800148c:	3a02      	subs	r2, #2
			if (precision > 0) {
 800148e:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
 8001492:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
 8001494:	dd01      	ble.n	800149a <cbvprintf+0x62a>
				precision--;
 8001496:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
 800149a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800149e:	0688      	lsls	r0, r1, #26
 80014a0:	f100 81c3 	bmi.w	800182a <cbvprintf+0x9ba>
 80014a4:	f1b8 0f00 	cmp.w	r8, #0
 80014a8:	bfd4      	ite	le
 80014aa:	2100      	movle	r1, #0
 80014ac:	2101      	movgt	r1, #1
	if (c == 'f') {
 80014ae:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
 80014b0:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
 80014b2:	f040 81bc 	bne.w	800182e <cbvprintf+0x9be>
		if (decimals < 0) {
 80014b6:	eb13 0108 	adds.w	r1, r3, r8
 80014ba:	f140 81ba 	bpl.w	8001832 <cbvprintf+0x9c2>
			decimals = 0;
 80014be:	2100      	movs	r1, #0
 80014c0:	e1ba      	b.n	8001838 <cbvprintf+0x9c8>
 80014c2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80014c6:	2b20      	cmp	r3, #32
 80014c8:	f63f af1d 	bhi.w	8001306 <cbvprintf+0x496>
 80014cc:	a001      	add	r0, pc, #4	; (adr r0, 80014d4 <cbvprintf+0x664>)
 80014ce:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	080016db 	.word	0x080016db
 80014d8:	08001307 	.word	0x08001307
 80014dc:	08001307 	.word	0x08001307
 80014e0:	08001307 	.word	0x08001307
 80014e4:	08001307 	.word	0x08001307
 80014e8:	08001307 	.word	0x08001307
 80014ec:	08001307 	.word	0x08001307
 80014f0:	08001307 	.word	0x08001307
 80014f4:	08001307 	.word	0x08001307
 80014f8:	080013c1 	.word	0x080013c1
 80014fc:	08001307 	.word	0x08001307
 8001500:	08001585 	.word	0x08001585
 8001504:	0800167b 	.word	0x0800167b
 8001508:	080013c1 	.word	0x080013c1
 800150c:	080013c1 	.word	0x080013c1
 8001510:	080013c1 	.word	0x080013c1
 8001514:	08001307 	.word	0x08001307
 8001518:	0800167b 	.word	0x0800167b
 800151c:	08001307 	.word	0x08001307
 8001520:	08001307 	.word	0x08001307
 8001524:	08001307 	.word	0x08001307
 8001528:	08001307 	.word	0x08001307
 800152c:	08001711 	.word	0x08001711
 8001530:	080016db 	.word	0x080016db
 8001534:	080016df 	.word	0x080016df
 8001538:	08001307 	.word	0x08001307
 800153c:	08001307 	.word	0x08001307
 8001540:	0800155f 	.word	0x0800155f
 8001544:	08001307 	.word	0x08001307
 8001548:	080016db 	.word	0x080016db
 800154c:	08001307 	.word	0x08001307
 8001550:	08001307 	.word	0x08001307
 8001554:	080016db 	.word	0x080016db
			OUTC('%');
 8001558:	4651      	mov	r1, sl
 800155a:	4610      	mov	r0, r2
 800155c:	e49e      	b.n	8000e9c <cbvprintf+0x2c>
			if (precision >= 0) {
 800155e:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8001562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
 8001564:	db09      	blt.n	800157a <cbvprintf+0x70a>
				len = strnlen(bps, precision);
 8001566:	4641      	mov	r1, r8
 8001568:	4610      	mov	r0, r2
 800156a:	9203      	str	r2, [sp, #12]
 800156c:	f00c f98d 	bl	800d88a <strnlen>
				len = strlen(bps);
 8001570:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
 8001572:	2700      	movs	r7, #0
			bpe = bps + len;
 8001574:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
 8001576:	b962      	cbnz	r2, 8001592 <cbvprintf+0x722>
 8001578:	e6c5      	b.n	8001306 <cbvprintf+0x496>
				len = strlen(bps);
 800157a:	4610      	mov	r0, r2
 800157c:	9203      	str	r2, [sp, #12]
 800157e:	f7ff fc25 	bl	8000dcc <strlen>
 8001582:	e7f5      	b.n	8001570 <cbvprintf+0x700>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8001584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001586:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
 800158a:	2700      	movs	r7, #0
			bpe = buf + 1;
 800158c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
 8001590:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
 8001592:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
 8001594:	b107      	cbz	r7, 8001598 <cbvprintf+0x728>
			nj_len += 1U;
 8001596:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8001598:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
 800159c:	06c1      	lsls	r1, r0, #27
 800159e:	f140 8235 	bpl.w	8001a0c <cbvprintf+0xb9c>
			nj_len += 2U;
 80015a2:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
 80015a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
 80015a6:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
 80015a8:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 80015aa:	bf44      	itt	mi
 80015ac:	9910      	ldrmi	r1, [sp, #64]	; 0x40
 80015ae:	185b      	addmi	r3, r3, r1
		if (width > 0) {
 80015b0:	f1bb 0f00 	cmp.w	fp, #0
 80015b4:	dd23      	ble.n	80015fe <cbvprintf+0x78e>
			width -= (int)nj_len;
 80015b6:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
 80015ba:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80015be:	0759      	lsls	r1, r3, #29
 80015c0:	f3c3 0880 	ubfx	r8, r3, #2, #1
 80015c4:	d41b      	bmi.n	80015fe <cbvprintf+0x78e>
				if (conv->flag_zero) {
 80015c6:	0658      	lsls	r0, r3, #25
 80015c8:	f140 8236 	bpl.w	8001a38 <cbvprintf+0xbc8>
					if (sign != 0) {
 80015cc:	2f00      	cmp	r7, #0
 80015ce:	f000 8236 	beq.w	8001a3e <cbvprintf+0xbce>
						OUTC(sign);
 80015d2:	4651      	mov	r1, sl
 80015d4:	4638      	mov	r0, r7
 80015d6:	9203      	str	r2, [sp, #12]
 80015d8:	47c8      	blx	r9
 80015da:	2800      	cmp	r0, #0
 80015dc:	f2c0 8222 	blt.w	8001a24 <cbvprintf+0xbb4>
 80015e0:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
 80015e2:	4647      	mov	r7, r8
						OUTC(sign);
 80015e4:	3601      	adds	r6, #1
					pad = '0';
 80015e6:	f04f 0830 	mov.w	r8, #48	; 0x30
 80015ea:	445e      	add	r6, fp
 80015ec:	465b      	mov	r3, fp
				while (width-- > 0) {
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	eba6 000b 	sub.w	r0, r6, fp
 80015f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80015f8:	f300 820c 	bgt.w	8001a14 <cbvprintf+0xba4>
 80015fc:	4606      	mov	r6, r0
		if (sign != 0) {
 80015fe:	b147      	cbz	r7, 8001612 <cbvprintf+0x7a2>
			OUTC(sign);
 8001600:	4651      	mov	r1, sl
 8001602:	4638      	mov	r0, r7
 8001604:	9203      	str	r2, [sp, #12]
 8001606:	47c8      	blx	r9
 8001608:	2800      	cmp	r0, #0
 800160a:	f2c0 820b 	blt.w	8001a24 <cbvprintf+0xbb4>
 800160e:	9a03      	ldr	r2, [sp, #12]
 8001610:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 8001612:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001616:	0659      	lsls	r1, r3, #25
 8001618:	f140 8265 	bpl.w	8001ae6 <cbvprintf+0xc76>
			if (conv->specifier_a) {
 800161c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8001620:	2b00      	cmp	r3, #0
 8001622:	eba6 0602 	sub.w	r6, r6, r2
 8001626:	f280 8219 	bge.w	8001a5c <cbvprintf+0xbec>
 800162a:	4617      	mov	r7, r2
 800162c:	46b8      	mov	r8, r7
 800162e:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
 8001630:	f817 0b01 	ldrb.w	r0, [r7], #1
 8001634:	2870      	cmp	r0, #112	; 0x70
 8001636:	f040 8205 	bne.w	8001a44 <cbvprintf+0xbd4>
			while (pad_len-- > 0) {
 800163a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800163c:	461e      	mov	r6, r3
 800163e:	441f      	add	r7, r3
 8001640:	1bbb      	subs	r3, r7, r6
 8001642:	2b00      	cmp	r3, #0
 8001644:	f300 8248 	bgt.w	8001ad8 <cbvprintf+0xc68>
			OUTS(cp, bpe);
 8001648:	462b      	mov	r3, r5
 800164a:	4642      	mov	r2, r8
			OUTS(bps, bpe);
 800164c:	4651      	mov	r1, sl
 800164e:	4648      	mov	r0, r9
 8001650:	f009 f8a6 	bl	800a7a0 <outs>
 8001654:	2800      	cmp	r0, #0
 8001656:	f2c0 81e5 	blt.w	8001a24 <cbvprintf+0xbb4>
 800165a:	4430      	add	r0, r6
			while (pad_len-- > 0) {
 800165c:	4606      	mov	r6, r0
 800165e:	4483      	add	fp, r0
		while (width > 0) {
 8001660:	ebab 0306 	sub.w	r3, fp, r6
 8001664:	2b00      	cmp	r3, #0
 8001666:	f77f ae4e 	ble.w	8001306 <cbvprintf+0x496>
			OUTC(' ');
 800166a:	4651      	mov	r1, sl
 800166c:	2020      	movs	r0, #32
 800166e:	47c8      	blx	r9
 8001670:	2800      	cmp	r0, #0
 8001672:	f2c0 81d7 	blt.w	8001a24 <cbvprintf+0xbb4>
 8001676:	3601      	adds	r6, #1
			--width;
 8001678:	e7f2      	b.n	8001660 <cbvprintf+0x7f0>
			if (conv->flag_plus) {
 800167a:	073d      	lsls	r5, r7, #28
 800167c:	d42b      	bmi.n	80016d6 <cbvprintf+0x866>
				sign = ' ';
 800167e:	f017 0710 	ands.w	r7, r7, #16
 8001682:	bf18      	it	ne
 8001684:	2720      	movne	r7, #32
			sint = value->sint;
 8001686:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
 800168a:	2b00      	cmp	r3, #0
 800168c:	da05      	bge.n	800169a <cbvprintf+0x82a>
				value->uint = (uint_value_type)-sint;
 800168e:	4252      	negs	r2, r2
 8001690:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001694:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
 8001698:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 800169a:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	aa0e      	add	r2, sp, #56	; 0x38
 80016a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80016a6:	ab13      	add	r3, sp, #76	; 0x4c
 80016a8:	f001 f950 	bl	800294c <encode_uint>
 80016ac:	4602      	mov	r2, r0
			if (precision >= 0) {
 80016ae:	f1b8 0f00 	cmp.w	r8, #0
 80016b2:	f10d 0565 	add.w	r5, sp, #101	; 0x65
 80016b6:	f6ff af5e 	blt.w	8001576 <cbvprintf+0x706>
				conv->flag_zero = false;
 80016ba:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
 80016be:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
 80016c0:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
 80016c4:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 80016c6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
 80016ca:	f67f af54 	bls.w	8001576 <cbvprintf+0x706>
					conv->pad0_value = precision - (int)len;
 80016ce:	eba8 0303 	sub.w	r3, r8, r3
 80016d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80016d4:	e74f      	b.n	8001576 <cbvprintf+0x706>
				sign = '+';
 80016d6:	272b      	movs	r7, #43	; 0x2b
 80016d8:	e7d5      	b.n	8001686 <cbvprintf+0x816>
		switch (conv->specifier) {
 80016da:	2700      	movs	r7, #0
 80016dc:	e7dd      	b.n	800169a <cbvprintf+0x82a>
			if (value->ptr != NULL) {
 80016de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80016e0:	2800      	cmp	r0, #0
 80016e2:	f000 818f 	beq.w	8001a04 <cbvprintf+0xb94>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80016e6:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	aa0e      	add	r2, sp, #56	; 0x38
 80016ee:	ab13      	add	r3, sp, #76	; 0x4c
 80016f0:	2100      	movs	r1, #0
 80016f2:	f001 f92b 	bl	800294c <encode_uint>
				conv->altform_0c = true;
 80016f6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80016fa:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80016fe:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8001702:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8001706:	4602      	mov	r2, r0
				conv->altform_0c = true;
 8001708:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
 800170c:	2700      	movs	r7, #0
				goto prec_int_pad0;
 800170e:	e7ce      	b.n	80016ae <cbvprintf+0x83e>
				store_count(conv, value->ptr, count);
 8001710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
 8001712:	2907      	cmp	r1, #7
 8001714:	f63f adf7 	bhi.w	8001306 <cbvprintf+0x496>
 8001718:	e8df f001 	tbb	[pc, r1]
 800171c:	0c06040c 	.word	0x0c06040c
 8001720:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8001724:	701e      	strb	r6, [r3, #0]
		break;
 8001726:	e5ee      	b.n	8001306 <cbvprintf+0x496>
		*(short *)dp = (short)count;
 8001728:	801e      	strh	r6, [r3, #0]
		break;
 800172a:	e5ec      	b.n	8001306 <cbvprintf+0x496>
		*(intmax_t *)dp = (intmax_t)count;
 800172c:	17f2      	asrs	r2, r6, #31
 800172e:	e9c3 6200 	strd	r6, r2, [r3]
		break;
 8001732:	e5e8      	b.n	8001306 <cbvprintf+0x496>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8001734:	601e      	str	r6, [r3, #0]
		break;
 8001736:	e5e6      	b.n	8001306 <cbvprintf+0x496>
		*sign = '-';
 8001738:	272d      	movs	r7, #45	; 0x2d
 800173a:	e64d      	b.n	80013d8 <cbvprintf+0x568>
		*sign = '+';
 800173c:	272b      	movs	r7, #43	; 0x2b
 800173e:	e64b      	b.n	80013d8 <cbvprintf+0x568>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8001740:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001744:	4285      	cmp	r5, r0
 8001746:	d131      	bne.n	80017ac <cbvprintf+0x93c>
			if (isupper((int)c)) {
 8001748:	3201      	adds	r2, #1
 800174a:	48b9      	ldr	r0, [pc, #740]	; (8001a30 <cbvprintf+0xbc0>)
 800174c:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
 800174e:	430b      	orrs	r3, r1
 8001750:	5c12      	ldrb	r2, [r2, r0]
 8001752:	f002 0203 	and.w	r2, r2, #3
 8001756:	d11b      	bne.n	8001790 <cbvprintf+0x920>
			if (isupper((int)c)) {
 8001758:	2a01      	cmp	r2, #1
 800175a:	d111      	bne.n	8001780 <cbvprintf+0x910>
				*buf++ = 'I';
 800175c:	2349      	movs	r3, #73	; 0x49
 800175e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
 8001762:	234e      	movs	r3, #78	; 0x4e
 8001764:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
 8001768:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
 800176a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
 800176e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001772:	f36f 1386 	bfc	r3, #6, #1
 8001776:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
 800177a:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
 800177e:	e707      	b.n	8001590 <cbvprintf+0x720>
				*buf++ = 'i';
 8001780:	2369      	movs	r3, #105	; 0x69
 8001782:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 8001786:	236e      	movs	r3, #110	; 0x6e
 8001788:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
 800178c:	2366      	movs	r3, #102	; 0x66
 800178e:	e7ec      	b.n	800176a <cbvprintf+0x8fa>
			if (isupper((int)c)) {
 8001790:	2a01      	cmp	r2, #1
				*buf++ = 'N';
 8001792:	bf07      	ittee	eq
 8001794:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
 8001796:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
 8001798:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
 800179a:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
 800179c:	bf0c      	ite	eq
 800179e:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 80017a2:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
 80017a6:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 80017aa:	e7de      	b.n	800176a <cbvprintf+0x8fa>
	bool is_subnormal = (expo == 0) && (fract != 0);
 80017ac:	2000      	movs	r0, #0
 80017ae:	e621      	b.n	80013f4 <cbvprintf+0x584>
				expo--;
 80017b0:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 80017b2:	1849      	adds	r1, r1, r1
 80017b4:	415b      	adcs	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dafa      	bge.n	80017b0 <cbvprintf+0x940>
 80017ba:	e9cd 1308 	strd	r1, r3, [sp, #32]
 80017be:	e62d      	b.n	800141c <cbvprintf+0x5ac>
			fract >>= 1;
 80017c0:	0840      	lsrs	r0, r0, #1
 80017c2:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 80017c6:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 80017c8:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
 80017cc:	46ac      	mov	ip, r5
			expo++;
 80017ce:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 80017d2:	d2f5      	bcs.n	80017c0 <cbvprintf+0x950>
		fract *= 5U;
 80017d4:	fb0e f501 	mul.w	r5, lr, r1
 80017d8:	fba0 010e 	umull	r0, r1, r0, lr
 80017dc:	4429      	add	r1, r5
		decexp--;
 80017de:	3b01      	subs	r3, #1
		expo++;
 80017e0:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
 80017e4:	f04f 0c01 	mov.w	ip, #1
 80017e8:	e624      	b.n	8001434 <cbvprintf+0x5c4>
		fract += 2;
 80017ea:	3002      	adds	r0, #2
 80017ec:	f141 0100 	adc.w	r1, r1, #0
 80017f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
 80017f4:	a808      	add	r0, sp, #32
 80017f6:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80017fa:	f008 ffa2 	bl	800a742 <_ldiv5>
		decexp++;
 80017fe:	9b04      	ldr	r3, [sp, #16]
 8001800:	9a03      	ldr	r2, [sp, #12]
 8001802:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
 8001806:	3d01      	subs	r5, #1
		decexp++;
 8001808:	3301      	adds	r3, #1
			fract <<= 1;
 800180a:	1849      	adds	r1, r1, r1
 800180c:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
 800180e:	2800      	cmp	r0, #0
			expo--;
 8001810:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
 8001814:	daf9      	bge.n	800180a <cbvprintf+0x99a>
 8001816:	e9cd 1008 	strd	r1, r0, [sp, #32]
 800181a:	e614      	b.n	8001446 <cbvprintf+0x5d6>
 800181c:	2300      	movs	r3, #0
 800181e:	461d      	mov	r5, r3
 8001820:	e616      	b.n	8001450 <cbvprintf+0x5e0>
			precision -= decexp;
 8001822:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
 8001826:	2266      	movs	r2, #102	; 0x66
 8001828:	e637      	b.n	800149a <cbvprintf+0x62a>
	bool prune_zero = false;
 800182a:	2100      	movs	r1, #0
 800182c:	e63f      	b.n	80014ae <cbvprintf+0x63e>
		decimals = precision + 1;
 800182e:	f108 0101 	add.w	r1, r8, #1
	if (decimals > 16) {
 8001832:	2910      	cmp	r1, #16
 8001834:	bfa8      	it	ge
 8001836:	2110      	movge	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
 8001838:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800183c:	2010      	movs	r0, #16
 800183e:	9007      	str	r0, [sp, #28]
	while (decimals--) {
 8001840:	460d      	mov	r5, r1
	*v >>= 1;
 8001842:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	while (decimals--) {
 8001846:	b9a5      	cbnz	r5, 8001872 <cbvprintf+0xa02>
	fract += round;
 8001848:	9d08      	ldr	r5, [sp, #32]
 800184a:	1940      	adds	r0, r0, r5
 800184c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800184e:	eb41 0105 	adc.w	r1, r1, r5
	if (fract >= BIT64(60)) {
 8001852:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8001856:	d21b      	bcs.n	8001890 <cbvprintf+0xa20>
	fract += round;
 8001858:	e9cd 0108 	strd	r0, r1, [sp, #32]
	if (c == 'f') {
 800185c:	2a66      	cmp	r2, #102	; 0x66
 800185e:	f040 8099 	bne.w	8001994 <cbvprintf+0xb24>
		if (decexp > 0) {
 8001862:	2b00      	cmp	r3, #0
 8001864:	dc23      	bgt.n	80018ae <cbvprintf+0xa3e>
			*buf++ = '0';
 8001866:	2130      	movs	r1, #48	; 0x30
 8001868:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 800186c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8001870:	e02f      	b.n	80018d2 <cbvprintf+0xa62>
	*v >>= 1;
 8001872:	0840      	lsrs	r0, r0, #1
 8001874:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8001878:	0849      	lsrs	r1, r1, #1
 800187a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	_ldiv5(v);
 800187e:	a80a      	add	r0, sp, #40	; 0x28
 8001880:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001884:	3d01      	subs	r5, #1
 8001886:	f008 ff5c 	bl	800a742 <_ldiv5>
 800188a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
 800188e:	e7d8      	b.n	8001842 <cbvprintf+0x9d2>
	*v >>= 1;
 8001890:	0840      	lsrs	r0, r0, #1
 8001892:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8001896:	0849      	lsrs	r1, r1, #1
 8001898:	e9cd 0108 	strd	r0, r1, [sp, #32]
	_ldiv5(v);
 800189c:	a808      	add	r0, sp, #32
 800189e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018a2:	f008 ff4e 	bl	800a742 <_ldiv5>
		decexp++;
 80018a6:	9b05      	ldr	r3, [sp, #20]
 80018a8:	9a04      	ldr	r2, [sp, #16]
 80018aa:	3301      	adds	r3, #1
 80018ac:	e7d6      	b.n	800185c <cbvprintf+0x9ec>
	char *buf = bps;
 80018ae:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
 80018b0:	9907      	ldr	r1, [sp, #28]
 80018b2:	2900      	cmp	r1, #0
 80018b4:	dd0b      	ble.n	80018ce <cbvprintf+0xa5e>
				*buf++ = _get_digit(&fract, &digit_count);
 80018b6:	a907      	add	r1, sp, #28
 80018b8:	a808      	add	r0, sp, #32
 80018ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018be:	f008 ff58 	bl	800a772 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 80018c2:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
 80018c4:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
 80018c8:	3b01      	subs	r3, #1
 80018ca:	9a04      	ldr	r2, [sp, #16]
 80018cc:	d1f0      	bne.n	80018b0 <cbvprintf+0xa40>
			conv->pad0_value = decexp;
 80018ce:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
 80018d0:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
 80018d2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80018d6:	0689      	lsls	r1, r1, #26
 80018d8:	d402      	bmi.n	80018e0 <cbvprintf+0xa70>
 80018da:	f1b8 0f00 	cmp.w	r8, #0
 80018de:	dd1d      	ble.n	800191c <cbvprintf+0xaac>
			*buf++ = '.';
 80018e0:	212e      	movs	r1, #46	; 0x2e
 80018e2:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
 80018e6:	b19b      	cbz	r3, 8001910 <cbvprintf+0xaa0>
 80018e8:	f1b8 0f00 	cmp.w	r8, #0
 80018ec:	dd16      	ble.n	800191c <cbvprintf+0xaac>
			conv->pad0_value = -decexp;
 80018ee:	4259      	negs	r1, r3
 80018f0:	4541      	cmp	r1, r8
 80018f2:	bfa8      	it	ge
 80018f4:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
 80018f6:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
 80018fa:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
 80018fc:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
 80018fe:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
 8001902:	bfd4      	ite	le
 8001904:	2100      	movle	r1, #0
 8001906:	2101      	movgt	r1, #1
 8001908:	f361 1045 	bfi	r0, r1, #5, #1
 800190c:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
 8001910:	f1b8 0f00 	cmp.w	r8, #0
 8001914:	dd02      	ble.n	800191c <cbvprintf+0xaac>
 8001916:	9907      	ldr	r1, [sp, #28]
 8001918:	2900      	cmp	r1, #0
 800191a:	dc56      	bgt.n	80019ca <cbvprintf+0xb5a>
	if (prune_zero) {
 800191c:	9903      	ldr	r1, [sp, #12]
 800191e:	2900      	cmp	r1, #0
 8001920:	d163      	bne.n	80019ea <cbvprintf+0xb7a>
	conv->pad0_pre_exp = precision;
 8001922:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
 8001926:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 800192a:	2945      	cmp	r1, #69	; 0x45
 800192c:	d121      	bne.n	8001972 <cbvprintf+0xb02>
		if (decexp < 0) {
 800192e:	2b00      	cmp	r3, #0
		*buf++ = c;
 8001930:	4629      	mov	r1, r5
			decexp = -decexp;
 8001932:	bfb8      	it	lt
 8001934:	425b      	neglt	r3, r3
		*buf++ = c;
 8001936:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
 800193a:	bfb4      	ite	lt
 800193c:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
 800193e:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
 8001940:	2b63      	cmp	r3, #99	; 0x63
 8001942:	706a      	strb	r2, [r5, #1]
 8001944:	dd09      	ble.n	800195a <cbvprintf+0xaea>
			*buf++ = (decexp / 100) + '0';
 8001946:	2064      	movs	r0, #100	; 0x64
 8001948:	fb93 f2f0 	sdiv	r2, r3, r0
 800194c:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 8001950:	1ce9      	adds	r1, r5, #3
 8001952:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
 8001956:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 800195a:	200a      	movs	r0, #10
 800195c:	460d      	mov	r5, r1
 800195e:	fb93 f2f0 	sdiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
 8001962:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 8001966:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 800196a:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 800196c:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
 8001970:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
 8001972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001974:	2b00      	cmp	r3, #0
 8001976:	dc43      	bgt.n	8001a00 <cbvprintf+0xb90>
 8001978:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800197a:	2b00      	cmp	r3, #0
 800197c:	bfd4      	ite	le
 800197e:	2300      	movle	r3, #0
 8001980:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 8001982:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8001986:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 800198a:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 800198c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
 8001990:	702b      	strb	r3, [r5, #0]
	return bps;
 8001992:	e5fd      	b.n	8001590 <cbvprintf+0x720>
		*buf = _get_digit(&fract, &digit_count);
 8001994:	a907      	add	r1, sp, #28
 8001996:	a808      	add	r0, sp, #32
 8001998:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800199c:	f008 fee9 	bl	800a772 <_get_digit>
		if (*buf++ != '0') {
 80019a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
 80019a4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
 80019a8:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
 80019ac:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 80019ae:	bf18      	it	ne
 80019b0:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
 80019b4:	0688      	lsls	r0, r1, #26
 80019b6:	d402      	bmi.n	80019be <cbvprintf+0xb4e>
 80019b8:	f1b8 0f00 	cmp.w	r8, #0
 80019bc:	dd12      	ble.n	80019e4 <cbvprintf+0xb74>
			*buf++ = '.';
 80019be:	212e      	movs	r1, #46	; 0x2e
 80019c0:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
 80019c4:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
 80019c8:	e7a2      	b.n	8001910 <cbvprintf+0xaa0>
		*buf++ = _get_digit(&fract, &digit_count);
 80019ca:	a907      	add	r1, sp, #28
 80019cc:	a808      	add	r0, sp, #32
 80019ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80019d2:	f008 fece 	bl	800a772 <_get_digit>
		precision--;
 80019d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80019da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
 80019de:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
 80019e2:	e795      	b.n	8001910 <cbvprintf+0xaa0>
		if (*buf++ != '0') {
 80019e4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 80019e8:	e798      	b.n	800191c <cbvprintf+0xaac>
		conv->pad0_pre_exp = 0;
 80019ea:	2100      	movs	r1, #0
 80019ec:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
 80019ee:	4628      	mov	r0, r5
 80019f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80019f4:	2930      	cmp	r1, #48	; 0x30
 80019f6:	d0fa      	beq.n	80019ee <cbvprintf+0xb7e>
		if (*buf != '.') {
 80019f8:	292e      	cmp	r1, #46	; 0x2e
 80019fa:	bf18      	it	ne
 80019fc:	4605      	movne	r5, r0
 80019fe:	e792      	b.n	8001926 <cbvprintf+0xab6>
		|| (conv->pad0_pre_exp > 0);
 8001a00:	2301      	movs	r3, #1
 8001a02:	e7be      	b.n	8001982 <cbvprintf+0xb12>
			bpe = bps + 5;
 8001a04:	4d0b      	ldr	r5, [pc, #44]	; (8001a34 <cbvprintf+0xbc4>)
		char sign = 0;
 8001a06:	4607      	mov	r7, r0
			bps = "(nil)";
 8001a08:	1f6a      	subs	r2, r5, #5
 8001a0a:	e5c2      	b.n	8001592 <cbvprintf+0x722>
		} else if (conv->altform_0) {
 8001a0c:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
 8001a0e:	bf48      	it	mi
 8001a10:	3301      	addmi	r3, #1
 8001a12:	e5c7      	b.n	80015a4 <cbvprintf+0x734>
					OUTC(pad);
 8001a14:	4651      	mov	r1, sl
 8001a16:	4640      	mov	r0, r8
 8001a18:	9203      	str	r2, [sp, #12]
 8001a1a:	47c8      	blx	r9
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	9a03      	ldr	r2, [sp, #12]
 8001a20:	f6bf ade4 	bge.w	80015ec <cbvprintf+0x77c>
#undef OUTS
#undef OUTC
}
 8001a24:	b01b      	add	sp, #108	; 0x6c
 8001a26:	ecbd 8b02 	vpop	{d8}
 8001a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a2e:	bf00      	nop
 8001a30:	08010d01 	.word	0x08010d01
 8001a34:	0800f456 	.word	0x0800f456
				char pad = ' ';
 8001a38:	f04f 0820 	mov.w	r8, #32
 8001a3c:	e5d5      	b.n	80015ea <cbvprintf+0x77a>
					pad = '0';
 8001a3e:	f04f 0830 	mov.w	r8, #48	; 0x30
 8001a42:	e5d2      	b.n	80015ea <cbvprintf+0x77a>
					OUTC(*cp++);
 8001a44:	4651      	mov	r1, sl
 8001a46:	47c8      	blx	r9
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	f6bf adef 	bge.w	800162c <cbvprintf+0x7bc>
 8001a4e:	e7e9      	b.n	8001a24 <cbvprintf+0xbb4>
					OUTC(*cp++);
 8001a50:	4651      	mov	r1, sl
 8001a52:	9203      	str	r2, [sp, #12]
 8001a54:	47c8      	blx	r9
 8001a56:	2800      	cmp	r0, #0
 8001a58:	9a03      	ldr	r2, [sp, #12]
 8001a5a:	dbe3      	blt.n	8001a24 <cbvprintf+0xbb4>
				while (isdigit((int)*cp)) {
 8001a5c:	7810      	ldrb	r0, [r2, #0]
 8001a5e:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <cbvprintf+0xccc>)
 8001a60:	5cc3      	ldrb	r3, [r0, r3]
 8001a62:	075b      	lsls	r3, r3, #29
 8001a64:	4617      	mov	r7, r2
 8001a66:	eb06 0802 	add.w	r8, r6, r2
 8001a6a:	f102 0201 	add.w	r2, r2, #1
 8001a6e:	d4ef      	bmi.n	8001a50 <cbvprintf+0xbe0>
				if (!conv->pad_postdp) {
 8001a70:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
 8001a74:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
 8001a76:	0699      	lsls	r1, r3, #26
 8001a78:	d407      	bmi.n	8001a8a <cbvprintf+0xc1a>
 8001a7a:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
 8001a7c:	2e00      	cmp	r6, #0
 8001a7e:	eba8 0206 	sub.w	r2, r8, r6
 8001a82:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8001a86:	dc0f      	bgt.n	8001aa8 <cbvprintf+0xc38>
 8001a88:	4690      	mov	r8, r2
				if (*cp == '.') {
 8001a8a:	7838      	ldrb	r0, [r7, #0]
 8001a8c:	282e      	cmp	r0, #46	; 0x2e
 8001a8e:	d108      	bne.n	8001aa2 <cbvprintf+0xc32>
					OUTC(*cp++);
 8001a90:	4651      	mov	r1, sl
 8001a92:	47c8      	blx	r9
						OUTC('0');
 8001a94:	2800      	cmp	r0, #0
 8001a96:	dbc5      	blt.n	8001a24 <cbvprintf+0xbb4>
					while (pad_len-- > 0) {
 8001a98:	2e00      	cmp	r6, #0
						OUTC('0');
 8001a9a:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
 8001a9e:	dc09      	bgt.n	8001ab4 <cbvprintf+0xc44>
					OUTC(*cp++);
 8001aa0:	3701      	adds	r7, #1
 8001aa2:	eba8 0607 	sub.w	r6, r8, r7
 8001aa6:	e00e      	b.n	8001ac6 <cbvprintf+0xc56>
						OUTC('0');
 8001aa8:	4651      	mov	r1, sl
 8001aaa:	2030      	movs	r0, #48	; 0x30
 8001aac:	47c8      	blx	r9
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	dae4      	bge.n	8001a7c <cbvprintf+0xc0c>
 8001ab2:	e7b7      	b.n	8001a24 <cbvprintf+0xbb4>
						OUTC('0');
 8001ab4:	4651      	mov	r1, sl
 8001ab6:	2030      	movs	r0, #48	; 0x30
 8001ab8:	47c8      	blx	r9
 8001aba:	3e01      	subs	r6, #1
 8001abc:	e7ea      	b.n	8001a94 <cbvprintf+0xc24>
					OUTC(*cp++);
 8001abe:	4651      	mov	r1, sl
 8001ac0:	47c8      	blx	r9
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	dbae      	blt.n	8001a24 <cbvprintf+0xbb4>
				while (isdigit((int)*cp)) {
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <cbvprintf+0xccc>)
 8001ac8:	46b8      	mov	r8, r7
 8001aca:	19f3      	adds	r3, r6, r7
 8001acc:	f817 0b01 	ldrb.w	r0, [r7], #1
 8001ad0:	5c12      	ldrb	r2, [r2, r0]
 8001ad2:	0752      	lsls	r2, r2, #29
 8001ad4:	d4f3      	bmi.n	8001abe <cbvprintf+0xc4e>
 8001ad6:	e5b0      	b.n	800163a <cbvprintf+0x7ca>
				OUTC('0');
 8001ad8:	4651      	mov	r1, sl
 8001ada:	2030      	movs	r0, #48	; 0x30
 8001adc:	47c8      	blx	r9
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	dba0      	blt.n	8001a24 <cbvprintf+0xbb4>
 8001ae2:	3601      	adds	r6, #1
 8001ae4:	e5ac      	b.n	8001640 <cbvprintf+0x7d0>
			if (conv->altform_0c | conv->altform_0) {
 8001ae6:	06d8      	lsls	r0, r3, #27
 8001ae8:	d401      	bmi.n	8001aee <cbvprintf+0xc7e>
 8001aea:	0719      	lsls	r1, r3, #28
 8001aec:	d507      	bpl.n	8001afe <cbvprintf+0xc8e>
				OUTC('0');
 8001aee:	4651      	mov	r1, sl
 8001af0:	2030      	movs	r0, #48	; 0x30
 8001af2:	9203      	str	r2, [sp, #12]
 8001af4:	47c8      	blx	r9
 8001af6:	2800      	cmp	r0, #0
 8001af8:	db94      	blt.n	8001a24 <cbvprintf+0xbb4>
 8001afa:	9a03      	ldr	r2, [sp, #12]
 8001afc:	3601      	adds	r6, #1
			if (conv->altform_0c) {
 8001afe:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001b02:	06db      	lsls	r3, r3, #27
 8001b04:	d508      	bpl.n	8001b18 <cbvprintf+0xca8>
				OUTC(conv->specifier);
 8001b06:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8001b0a:	9203      	str	r2, [sp, #12]
 8001b0c:	4651      	mov	r1, sl
 8001b0e:	47c8      	blx	r9
 8001b10:	2800      	cmp	r0, #0
 8001b12:	db87      	blt.n	8001a24 <cbvprintf+0xbb4>
 8001b14:	9a03      	ldr	r2, [sp, #12]
 8001b16:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
 8001b18:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8001b1a:	4437      	add	r7, r6
 8001b1c:	1bbb      	subs	r3, r7, r6
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	dc01      	bgt.n	8001b26 <cbvprintf+0xcb6>
			OUTS(bps, bpe);
 8001b22:	462b      	mov	r3, r5
 8001b24:	e592      	b.n	800164c <cbvprintf+0x7dc>
				OUTC('0');
 8001b26:	4651      	mov	r1, sl
 8001b28:	2030      	movs	r0, #48	; 0x30
 8001b2a:	9203      	str	r2, [sp, #12]
 8001b2c:	47c8      	blx	r9
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	f6ff af78 	blt.w	8001a24 <cbvprintf+0xbb4>
 8001b34:	9a03      	ldr	r2, [sp, #12]
 8001b36:	3601      	adds	r6, #1
 8001b38:	e7f0      	b.n	8001b1c <cbvprintf+0xcac>
 8001b3a:	bf00      	nop
 8001b3c:	08010d02 	.word	0x08010d02

08001b40 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8001b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b44:	ed2d 8b02 	vpush	{d8}
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 8001b48:	ed9f 8b47 	vldr	d8, [pc, #284]	; 8001c68 <work_queue_main+0x128>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8001b4c:	4e48      	ldr	r6, [pc, #288]	; (8001c70 <work_queue_main+0x130>)
{
 8001b4e:	b084      	sub	sp, #16
 8001b50:	4604      	mov	r4, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8001b52:	f04f 0310 	mov.w	r3, #16
 8001b56:	f3ef 8711 	mrs	r7, BASEPRI
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f8d4 50f8 	ldr.w	r5, [r4, #248]	; 0xf8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 8001b66:	b98d      	cbnz	r5, 8001b8c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 8001b68:	2102      	movs	r1, #2
 8001b6a:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8001b6e:	f00b fd72 	bl	800d656 <flag_test_and_clear>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d135      	bne.n	8001be2 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 8001b76:	2300      	movs	r3, #0
 8001b78:	ed8d 8b00 	vstr	d8, [sp]
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8001b82:	4639      	mov	r1, r7
 8001b84:	483b      	ldr	r0, [pc, #236]	; (8001c74 <work_queue_main+0x134>)
 8001b86:	f007 facf 	bl	8009128 <z_sched_wait>
			continue;
 8001b8a:	e7e2      	b.n	8001b52 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8001b8c:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	return node->next;
 8001b90:	682b      	ldr	r3, [r5, #0]
	list->head = node;
 8001b92:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8001b96:	4295      	cmp	r5, r2
 8001b98:	d101      	bne.n	8001b9e <work_queue_main+0x5e>
	list->tail = node;
 8001b9a:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
	*flagp |= BIT(bit);
 8001b9e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	*flagp &= ~BIT(bit);
 8001baa:	68eb      	ldr	r3, [r5, #12]
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 8001bb6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8001bb8:	f387 8811 	msr	BASEPRI, r7
 8001bbc:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	4798      	blx	r3
	__asm__ volatile(
 8001bc4:	f04f 0310 	mov.w	r3, #16
 8001bc8:	f3ef 8811 	mrs	r8, BASEPRI
 8001bcc:	f383 8811 	msr	BASEPRI, r3
 8001bd0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 8001bd4:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8001bd6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 8001bd8:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8001bdc:	d40b      	bmi.n	8001bf6 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
 8001bde:	60ea      	str	r2, [r5, #12]
 8001be0:	e00e      	b.n	8001c00 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 8001be2:	f504 7584 	add.w	r5, r4, #264	; 0x108
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 8001be6:	2200      	movs	r2, #0
 8001be8:	2101      	movs	r1, #1
 8001bea:	4628      	mov	r0, r5
 8001bec:	f00b fa9e 	bl	800d12c <z_sched_wake>
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d1f8      	bne.n	8001be6 <work_queue_main+0xa6>
 8001bf4:	e7bf      	b.n	8001b76 <work_queue_main+0x36>
	return list->head;
 8001bf6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
 8001bf8:	f023 0303 	bic.w	r3, r3, #3
 8001bfc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8001bfe:	b970      	cbnz	r0, 8001c1e <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
 8001c00:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8001c04:	f023 0302 	bic.w	r3, r3, #2
 8001c08:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	__asm__ volatile(
 8001c0c:	f388 8811 	msr	BASEPRI, r8
 8001c10:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
 8001c14:	05d8      	lsls	r0, r3, #23
 8001c16:	d49c      	bmi.n	8001b52 <work_queue_main+0x12>
		arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
 8001c18:	f007 f97a 	bl	8008f10 <z_impl_k_yield>
}
 8001c1c:	e799      	b.n	8001b52 <work_queue_main+0x12>
	return node->next;
 8001c1e:	2700      	movs	r7, #0
 8001c20:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
 8001c24:	46ba      	mov	sl, r7
		if (wc->work == work) {
 8001c26:	6843      	ldr	r3, [r0, #4]
 8001c28:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 8001c2a:	4602      	mov	r2, r0
		if (wc->work == work) {
 8001c2c:	d10b      	bne.n	8001c46 <work_queue_main+0x106>
	return node->next;
 8001c2e:	6802      	ldr	r2, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 8001c30:	b98f      	cbnz	r7, 8001c56 <work_queue_main+0x116>
 8001c32:	6873      	ldr	r3, [r6, #4]
	list->head = node;
 8001c34:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 8001c36:	4283      	cmp	r3, r0
 8001c38:	d100      	bne.n	8001c3c <work_queue_main+0xfc>
	list->tail = node;
 8001c3a:	6072      	str	r2, [r6, #4]
	parent->next = child;
 8001c3c:	f840 ab08 	str.w	sl, [r0], #8
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8001c40:	f006 feae 	bl	80089a0 <z_impl_k_sem_give>
}
 8001c44:	463a      	mov	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8001c46:	f1b9 0f00 	cmp.w	r9, #0
 8001c4a:	d0d9      	beq.n	8001c00 <work_queue_main+0xc0>
	return node->next;
 8001c4c:	4648      	mov	r0, r9
 8001c4e:	4617      	mov	r7, r2
 8001c50:	f8d9 9000 	ldr.w	r9, [r9]
 8001c54:	e7e7      	b.n	8001c26 <work_queue_main+0xe6>
	return list->tail;
 8001c56:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
 8001c58:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 8001c5a:	4283      	cmp	r3, r0
	list->tail = node;
 8001c5c:	bf08      	it	eq
 8001c5e:	6077      	streq	r7, [r6, #4]
}
 8001c60:	e7ec      	b.n	8001c3c <work_queue_main+0xfc>
 8001c62:	bf00      	nop
 8001c64:	f3af 8000 	nop.w
 8001c68:	ffffffff 	.word	0xffffffff
 8001c6c:	ffffffff 	.word	0xffffffff
 8001c70:	2000212c 	.word	0x2000212c
 8001c74:	20002880 	.word	0x20002880

08001c78 <mavlink_sha256_update>:
    G += GG;
    H += HH;
}

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8001c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *p = (const unsigned char *)v;
    uint32_t old_sz = m->sz[0];
 8001c7c:	6805      	ldr	r5, [r0, #0]
    uint32_t offset;

    m->sz[0] += len * 8;
 8001c7e:	00d3      	lsls	r3, r2, #3
 8001c80:	195b      	adds	r3, r3, r5
 8001c82:	6003      	str	r3, [r0, #0]
    if (m->sz[0] < old_sz)
	++m->sz[1];
 8001c84:	bf28      	it	cs
 8001c86:	6843      	ldrcs	r3, [r0, #4]
{
 8001c88:	b0df      	sub	sp, #380	; 0x17c
	++m->sz[1];
 8001c8a:	bf24      	itt	cs
 8001c8c:	3301      	addcs	r3, #1
 8001c8e:	6043      	strcs	r3, [r0, #4]
    while(len > 0){
	uint32_t l = 64 - offset;
        if (len < l) {
            l = len;
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8001c90:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001c94:	930c      	str	r3, [sp, #48]	; 0x30
 8001c96:	f100 0340 	add.w	r3, r0, #64	; 0x40
{
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	4689      	mov	r9, r1
 8001c9e:	4616      	mov	r6, r2
    offset = (old_sz / 8) % 64;
 8001ca0:	f3c5 05c5 	ubfx	r5, r5, #3, #6
 8001ca4:	930d      	str	r3, [sp, #52]	; 0x34
    while(len > 0){
 8001ca6:	2e00      	cmp	r6, #0
 8001ca8:	f000 80ba 	beq.w	8001e20 <mavlink_sha256_update+0x1a8>
	uint32_t l = 64 - offset;
 8001cac:	f1c5 0740 	rsb	r7, r5, #64	; 0x40
        if (len < l) {
 8001cb0:	42b7      	cmp	r7, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8001cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001cb4:	bf28      	it	cs
 8001cb6:	4637      	movcs	r7, r6
 8001cb8:	4649      	mov	r1, r9
 8001cba:	1958      	adds	r0, r3, r5
 8001cbc:	463a      	mov	r2, r7
	offset += l;
 8001cbe:	443d      	add	r5, r7
	memcpy(m->u.save_bytes + offset, p, l);
 8001cc0:	f00b fd0a 	bl	800d6d8 <memcpy>
	p += l;
	len -= l;
	if(offset == 64){
 8001cc4:	2d40      	cmp	r5, #64	; 0x40
	p += l;
 8001cc6:	44b9      	add	r9, r7
	len -= l;
 8001cc8:	eba6 0607 	sub.w	r6, r6, r7
	if(offset == 64){
 8001ccc:	d1eb      	bne.n	8001ca6 <mavlink_sha256_update+0x2e>
 8001cce:	ab0e      	add	r3, sp, #56	; 0x38
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	4619      	mov	r1, r3
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
	    for (i = 0; i < 16; i++){
                const uint8_t *p1 = (const uint8_t *)&u[i];
                uint8_t *p2 = (uint8_t *)&current[i];
                p2[0] = p1[3];
 8001cd4:	f892 002b 	ldrb.w	r0, [r2, #43]	; 0x2b
 8001cd8:	7008      	strb	r0, [r1, #0]
                p2[1] = p1[2];
 8001cda:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
 8001cde:	7048      	strb	r0, [r1, #1]
                p2[2] = p1[1];
 8001ce0:	f892 0029 	ldrb.w	r0, [r2, #41]	; 0x29
 8001ce4:	7088      	strb	r0, [r1, #2]
                p2[3] = p1[0];
 8001ce6:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8001cea:	70c8      	strb	r0, [r1, #3]
	    for (i = 0; i < 16; i++){
 8001cec:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001cee:	3204      	adds	r2, #4
 8001cf0:	4290      	cmp	r0, r2
 8001cf2:	f101 0104 	add.w	r1, r1, #4
 8001cf6:	d1ed      	bne.n	8001cd4 <mavlink_sha256_update+0x5c>
    AA = A;
 8001cf8:	68a2      	ldr	r2, [r4, #8]
 8001cfa:	9201      	str	r2, [sp, #4]
    BB = B;
 8001cfc:	68e2      	ldr	r2, [r4, #12]
 8001cfe:	9202      	str	r2, [sp, #8]
    CC = C;
 8001d00:	6922      	ldr	r2, [r4, #16]
 8001d02:	9203      	str	r2, [sp, #12]
    DD = D;
 8001d04:	6962      	ldr	r2, [r4, #20]
 8001d06:	9204      	str	r2, [sp, #16]
    EE = E;
 8001d08:	69a2      	ldr	r2, [r4, #24]
 8001d0a:	9205      	str	r2, [sp, #20]
    FF = F;
 8001d0c:	69e2      	ldr	r2, [r4, #28]
 8001d0e:	9206      	str	r2, [sp, #24]
    GG = G;
 8001d10:	6a22      	ldr	r2, [r4, #32]
 8001d12:	9207      	str	r2, [sp, #28]
    HH = H;
 8001d14:	a91e      	add	r1, sp, #120	; 0x78
 8001d16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d18:	9208      	str	r2, [sp, #32]
 8001d1a:	4608      	mov	r0, r1
    for (i = 0; i < 16; ++i)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	3201      	adds	r2, #1
	data[i] = in[i];
 8001d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8001d24:	f840 5b04 	str.w	r5, [r0], #4
    for (i = 0; i < 16; ++i)
 8001d28:	2a10      	cmp	r2, #16
 8001d2a:	d1f8      	bne.n	8001d1e <mavlink_sha256_update+0xa6>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001d2c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001d2e:	460f      	mov	r7, r1
 8001d30:	ea4f 40f3 	mov.w	r0, r3, ror #19
 8001d34:	ea80 4073 	eor.w	r0, r0, r3, ror #17
 8001d38:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	683f      	ldr	r7, [r7, #0]
 8001d40:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8001d44:	443b      	add	r3, r7
 8001d46:	4418      	add	r0, r3
 8001d48:	ea4f 43b5 	mov.w	r3, r5, ror #18
 8001d4c:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 8001d50:	ea83 03d5 	eor.w	r3, r3, r5, lsr #3
    for (i = 16; i < 64; ++i)
 8001d54:	3201      	adds	r2, #1
	    sigma0(data[i-15]) + data[i - 16];
 8001d56:	4403      	add	r3, r0
    for (i = 16; i < 64; ++i)
 8001d58:	2a40      	cmp	r2, #64	; 0x40
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001d5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8001d5c:	d1e6      	bne.n	8001d2c <mavlink_sha256_update+0xb4>
 8001d5e:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <mavlink_sha256_update+0x1b0>)
 8001d60:	930b      	str	r3, [sp, #44]	; 0x2c
    BB = B;
 8001d62:	e9dd 7202 	ldrd	r7, r2, [sp, #8]
    FF = F;
 8001d66:	e9dd ec06 	ldrd	lr, ip, [sp, #24]
    DD = D;
 8001d6a:	9b04      	ldr	r3, [sp, #16]
    AA = A;
 8001d6c:	9d01      	ldr	r5, [sp, #4]
    HH = H;
 8001d6e:	f8dd b020 	ldr.w	fp, [sp, #32]
    EE = E;
 8001d72:	9805      	ldr	r0, [sp, #20]
    DD = D;
 8001d74:	930a      	str	r3, [sp, #40]	; 0x28
    for (i = 0; i < 64; i++) {
 8001d76:	f04f 0800 	mov.w	r8, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001d7c:	f853 1b04 	ldr.w	r1, [r3], #4
 8001d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d82:	ea4f 23f0 	mov.w	r3, r0, ror #11
 8001d86:	ea83 13b0 	eor.w	r3, r3, r0, ror #6
 8001d8a:	ea83 6a70 	eor.w	sl, r3, r0, ror #25
 8001d8e:	ab1e      	add	r3, sp, #120	; 0x78
 8001d90:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8001d94:	4419      	add	r1, r3
 8001d96:	eb0a 0301 	add.w	r3, sl, r1
 8001d9a:	ea2c 0a00 	bic.w	sl, ip, r0
 8001d9e:	ea00 010e 	and.w	r1, r0, lr
 8001da2:	ea8a 0101 	eor.w	r1, sl, r1
 8001da6:	4419      	add	r1, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001da8:	ea87 0302 	eor.w	r3, r7, r2
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001dac:	4459      	add	r1, fp
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001dae:	402b      	ands	r3, r5
 8001db0:	ea4f 3a75 	mov.w	sl, r5, ror #13
 8001db4:	ea07 0b02 	and.w	fp, r7, r2
 8001db8:	ea83 0b0b 	eor.w	fp, r3, fp
 8001dbc:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
	EE = DD + T1;
 8001dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001dc2:	920a      	str	r2, [sp, #40]	; 0x28
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001dc4:	ea8a 5ab5 	eor.w	sl, sl, r5, ror #22
    for (i = 0; i < 64; i++) {
 8001dc8:	f108 0801 	add.w	r8, r8, #1
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001dcc:	44da      	add	sl, fp
	EE = DD + T1;
 8001dce:	440b      	add	r3, r1
    for (i = 0; i < 64; i++) {
 8001dd0:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
	EE = DD + T1;
 8001dd4:	9309      	str	r3, [sp, #36]	; 0x24
	AA = T1 + T2;
 8001dd6:	4451      	add	r1, sl
    for (i = 0; i < 64; i++) {
 8001dd8:	46e3      	mov	fp, ip
 8001dda:	d11a      	bne.n	8001e12 <mavlink_sha256_update+0x19a>
    A += AA;
 8001ddc:	9b01      	ldr	r3, [sp, #4]
 8001dde:	440b      	add	r3, r1
 8001de0:	60a3      	str	r3, [r4, #8]
    B += BB;
 8001de2:	9b02      	ldr	r3, [sp, #8]
 8001de4:	442b      	add	r3, r5
 8001de6:	60e3      	str	r3, [r4, #12]
    C += CC;
 8001de8:	9b03      	ldr	r3, [sp, #12]
 8001dea:	443b      	add	r3, r7
 8001dec:	6123      	str	r3, [r4, #16]
    D += DD;
 8001dee:	9b04      	ldr	r3, [sp, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	6163      	str	r3, [r4, #20]
    E += EE;
 8001df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001df6:	9b05      	ldr	r3, [sp, #20]
 8001df8:	4413      	add	r3, r2
 8001dfa:	61a3      	str	r3, [r4, #24]
    F += FF;
 8001dfc:	9b06      	ldr	r3, [sp, #24]
 8001dfe:	4403      	add	r3, r0
 8001e00:	61e3      	str	r3, [r4, #28]
    G += GG;
 8001e02:	9b07      	ldr	r3, [sp, #28]
 8001e04:	4473      	add	r3, lr
 8001e06:	6223      	str	r3, [r4, #32]
    H += HH;
 8001e08:	9b08      	ldr	r3, [sp, #32]
 8001e0a:	4463      	add	r3, ip
 8001e0c:	6263      	str	r3, [r4, #36]	; 0x24
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
 8001e0e:	2500      	movs	r5, #0
 8001e10:	e749      	b.n	8001ca6 <mavlink_sha256_update+0x2e>
 8001e12:	463a      	mov	r2, r7
 8001e14:	46f4      	mov	ip, lr
 8001e16:	462f      	mov	r7, r5
 8001e18:	4686      	mov	lr, r0
	AA = T1 + T2;
 8001e1a:	460d      	mov	r5, r1
	EE = DD + T1;
 8001e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e1e:	e7ac      	b.n	8001d7a <mavlink_sha256_update+0x102>
	}
    }
}
 8001e20:	b05f      	add	sp, #380	; 0x17c
 8001e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e26:	bf00      	nop
 8001e28:	0800df8c 	.word	0x0800df8c

08001e2c <mavlink_finalize_message_buffer.constprop.0.isra.0>:
 *
 * @param msg Message to finalize
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
 8001e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001e30:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8002030 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x204>
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
 8001e34:	4604      	mov	r4, r0
 8001e36:	f899 000c 	ldrb.w	r0, [r9, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001e3a:	f010 0002 	ands.w	r0, r0, #2
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
 8001e3e:	b0a3      	sub	sp, #140	; 0x8c
 8001e40:	4690      	mov	r8, r2
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001e42:	d114      	bne.n	8001e6e <mavlink_finalize_message_buffer.constprop.0.isra.0+0x42>
 8001e44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d05f      	beq.n	8001f0c <mavlink_finalize_message_buffer.constprop.0.isra.0+0xe0>
 8001e4c:	781d      	ldrb	r5, [r3, #0]
 8001e4e:	f005 0501 	and.w	r5, r5, #1
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
		msg->magic = MAVLINK_STX_MAVLINK1;
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
	} else {
		msg->magic = MAVLINK_STX;
 8001e52:	23fd      	movs	r3, #253	; 0xfd
 8001e54:	70a3      	strb	r3, [r4, #2]
	while (length > 1 && payload[length-1] == 0) {
 8001e56:	f104 021e 	add.w	r2, r4, #30
		msg->magic = MAVLINK_STX;
 8001e5a:	2312      	movs	r3, #18
	while (length > 1 && payload[length-1] == 0) {
 8001e5c:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
 8001e60:	b91e      	cbnz	r6, 8001e6a <mavlink_finalize_message_buffer.constprop.0.isra.0+0x3e>
		length--;
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d1f8      	bne.n	8001e5c <mavlink_finalize_message_buffer.constprop.0.isra.0+0x30>
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001e6a:	270a      	movs	r7, #10
 8001e6c:	e004      	b.n	8001e78 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x4c>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001e6e:	23fe      	movs	r3, #254	; 0xfe
 8001e70:	70a3      	strb	r3, [r4, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001e72:	2706      	movs	r7, #6
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001e74:	2500      	movs	r5, #0
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001e76:	2312      	movs	r3, #18
 8001e78:	70e3      	strb	r3, [r4, #3]
	msg->sysid = system_id;
	msg->compid = component_id;
 8001e7a:	2319      	movs	r3, #25
	msg->sysid = system_id;
 8001e7c:	71e1      	strb	r1, [r4, #7]
	msg->compid = component_id;
 8001e7e:	7223      	strb	r3, [r4, #8]
	msg->incompat_flags = 0;
	if (signing) {
 8001e80:	2d00      	cmp	r5, #0
 8001e82:	d145      	bne.n	8001f10 <mavlink_finalize_message_buffer.constprop.0.isra.0+0xe4>
	msg->incompat_flags = 0;
 8001e84:	7125      	strb	r5, [r4, #4]
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
	}
	msg->compat_flags = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	7163      	strb	r3, [r4, #5]
	msg->seq = status->current_tx_seq;
 8001e8a:	f899 3006 	ldrb.w	r3, [r9, #6]
 8001e8e:	71a3      	strb	r3, [r4, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001e90:	3301      	adds	r3, #1
 8001e92:	f889 3006 	strb.w	r3, [r9, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001e96:	78a3      	ldrb	r3, [r4, #2]
 8001e98:	f88d 3014 	strb.w	r3, [sp, #20]
	buf[1] = msg->len;
 8001e9c:	78e3      	ldrb	r3, [r4, #3]
	if (mavlink1) {
		buf[2] = msg->seq;
		buf[3] = msg->sysid;
		buf[4] = msg->compid;
		buf[5] = msg->msgid & 0xFF;
 8001e9e:	7aa2      	ldrb	r2, [r4, #10]
	buf[1] = msg->len;
 8001ea0:	f88d 3015 	strb.w	r3, [sp, #21]
		buf[5] = msg->msgid & 0xFF;
 8001ea4:	7a63      	ldrb	r3, [r4, #9]
 8001ea6:	79a6      	ldrb	r6, [r4, #6]
 8001ea8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001eac:	7ae2      	ldrb	r2, [r4, #11]
 8001eae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8001eb2:	b2db      	uxtb	r3, r3
	if (mavlink1) {
 8001eb4:	b378      	cbz	r0, 8001f16 <mavlink_finalize_message_buffer.constprop.0.isra.0+0xea>
		buf[4] = msg->compid;
 8001eb6:	2219      	movs	r2, #25
		buf[2] = msg->seq;
 8001eb8:	f88d 6016 	strb.w	r6, [sp, #22]
		buf[3] = msg->sysid;
 8001ebc:	f88d 1017 	strb.w	r1, [sp, #23]
		buf[4] = msg->compid;
 8001ec0:	f88d 2018 	strb.w	r2, [sp, #24]
		buf[5] = msg->msgid & 0xFF;
 8001ec4:	f88d 3019 	strb.w	r3, [sp, #25]
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = X25_INIT_CRC;
 8001ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ecc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8001ed0:	b2be      	uxth	r6, r7
 8001ed2:	f10d 0a15 	add.w	sl, sp, #21
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
                crc_accumulate(*pBuffer++, &crcTmp);
 8001ed6:	3e01      	subs	r6, #1
 8001ed8:	f81a 0b01 	ldrb.w	r0, [sl], #1
 8001edc:	a908      	add	r1, sp, #32
 8001ede:	b2b6      	uxth	r6, r6
 8001ee0:	f008 f84b 	bl	8009f7a <crc_accumulate>
	while (length--) {
 8001ee4:	2e01      	cmp	r6, #1
 8001ee6:	d1f6      	bne.n	8001ed6 <mavlink_finalize_message_buffer.constprop.0.isra.0+0xaa>
        }
        return crcTmp;
 8001ee8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
		buf[8] = (msg->msgid >> 8) & 0xFF;
		buf[9] = (msg->msgid >> 16) & 0xFF;
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001eec:	78e6      	ldrb	r6, [r4, #3]
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8001eee:	f8ad 3006 	strh.w	r3, [sp, #6]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001ef2:	f104 0a0c 	add.w	sl, r4, #12
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
 8001ef6:	46d3      	mov	fp, sl
	while (length--) {
                crc_accumulate(*p++, crcAccum);
 8001ef8:	f10d 0106 	add.w	r1, sp, #6
	while (length--) {
 8001efc:	b30e      	cbz	r6, 8001f42 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x116>
                crc_accumulate(*p++, crcAccum);
 8001efe:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8001f02:	3e01      	subs	r6, #1
 8001f04:	f008 f839 	bl	8009f7a <crc_accumulate>
 8001f08:	b2b6      	uxth	r6, r6
	while (length--) {
 8001f0a:	e7f5      	b.n	8001ef8 <mavlink_finalize_message_buffer.constprop.0.isra.0+0xcc>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001f0c:	4605      	mov	r5, r0
 8001f0e:	e7a0      	b.n	8001e52 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x26>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001f10:	2301      	movs	r3, #1
 8001f12:	7123      	strb	r3, [r4, #4]
 8001f14:	e7b7      	b.n	8001e86 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x5a>
		buf[2] = msg->incompat_flags;
 8001f16:	7920      	ldrb	r0, [r4, #4]
 8001f18:	f88d 0016 	strb.w	r0, [sp, #22]
		buf[5] = msg->sysid;
 8001f1c:	f88d 1019 	strb.w	r1, [sp, #25]
		buf[3] = msg->compat_flags;
 8001f20:	7960      	ldrb	r0, [r4, #5]
		buf[7] = msg->msgid & 0xFF;
 8001f22:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[6] = msg->compid;
 8001f26:	2119      	movs	r1, #25
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001f28:	1213      	asrs	r3, r2, #8
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001f2a:	1412      	asrs	r2, r2, #16
		buf[3] = msg->compat_flags;
 8001f2c:	f88d 0017 	strb.w	r0, [sp, #23]
		buf[4] = msg->seq;
 8001f30:	f88d 6018 	strb.w	r6, [sp, #24]
		buf[6] = msg->compid;
 8001f34:	f88d 101a 	strb.w	r1, [sp, #26]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001f38:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001f3c:	f88d 201d 	strb.w	r2, [sp, #29]
 8001f40:	e7c2      	b.n	8001ec8 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x9c>
	crc_accumulate(crc_extra, &checksum);
 8001f42:	4640      	mov	r0, r8
 8001f44:	f008 f819 	bl	8009f7a <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001f48:	78e2      	ldrb	r2, [r4, #3]
 8001f4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001f4e:	f80a 3002 	strb.w	r3, [sl, r2]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001f52:	78e2      	ldrb	r2, [r4, #3]
 8001f54:	4452      	add	r2, sl
 8001f56:	0a19      	lsrs	r1, r3, #8
 8001f58:	7051      	strb	r1, [r2, #1]

	msg->checksum = checksum;
 8001f5a:	8023      	strh	r3, [r4, #0]

	if (signing) {
 8001f5c:	2d00      	cmp	r5, #0
 8001f5e:	d055      	beq.n	800200c <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1e0>
		mavlink_sign_packet(status->signing,
 8001f60:	f8d9 5010 	ldr.w	r5, [r9, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8001f64:	2d00      	cmp	r5, #0
 8001f66:	d051      	beq.n	800200c <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1e0>
 8001f68:	782b      	ldrb	r3, [r5, #0]
 8001f6a:	07db      	lsls	r3, r3, #31
 8001f6c:	d54e      	bpl.n	800200c <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1e0>
	signature[0] = signing->link_id;
 8001f6e:	786b      	ldrb	r3, [r5, #1]
 8001f70:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
	tstamp.t64 = signing->timestamp;
 8001f74:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
	memcpy(&signature[1], tstamp.t8, 6);
 8001f78:	a902      	add	r1, sp, #8
	tstamp.t64 = signing->timestamp;
 8001f7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	memcpy(&signature[1], tstamp.t8, 6);
 8001f7e:	f204 1017 	addw	r0, r4, #279	; 0x117
 8001f82:	2206      	movs	r2, #6
				    msg->signature,
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001f84:	f894 8003 	ldrb.w	r8, [r4, #3]
	memcpy(&signature[1], tstamp.t8, 6);
 8001f88:	f00b fba6 	bl	800d6d8 <memcpy>
	signing->timestamp++;
 8001f8c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8001f90:	3301      	adds	r3, #1
 8001f92:	f142 0200 	adc.w	r2, r2, #0
 8001f96:	e9c5 3202 	strd	r3, r2, [r5, #8]
    B = 0xbb67ae85;
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1e8>)
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1ec>)
    D = 0xa54ff53a;
 8001f9e:	491f      	ldr	r1, [pc, #124]	; (800201c <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1f0>)
    F = 0x9b05688c;
 8001fa0:	481f      	ldr	r0, [pc, #124]	; (8002020 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1f4>)
    B = 0xbb67ae85;
 8001fa2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    D = 0xa54ff53a;
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1f8>)
 8001fa8:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
    F = 0x9b05688c;
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <mavlink_finalize_message_buffer.constprop.0.isra.0+0x1fc>)
 8001fae:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
    G = 0x1f83d9ab;
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <mavlink_finalize_message_buffer.constprop.0.isra.0+0x200>)
 8001fb4:	9310      	str	r3, [sp, #64]	; 0x40
    H = 0x5be0cd19;
 8001fb6:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8001fc0:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8001fc4:	eb0d 0002 	add.w	r0, sp, r2
 8001fc8:	f105 0110 	add.w	r1, r5, #16
 8001fcc:	9311      	str	r3, [sp, #68]	; 0x44
    m->sz[1] = 0;
 8001fce:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8001fd2:	f7ff fe51 	bl	8001c78 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001fd6:	463a      	mov	r2, r7
 8001fd8:	a905      	add	r1, sp, #20
 8001fda:	a808      	add	r0, sp, #32
 8001fdc:	f7ff fe4c 	bl	8001c78 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001fe0:	4642      	mov	r2, r8
 8001fe2:	4651      	mov	r1, sl
 8001fe4:	a808      	add	r0, sp, #32
 8001fe6:	f7ff fe47 	bl	8001c78 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001fea:	2202      	movs	r2, #2
 8001fec:	eb0a 0108 	add.w	r1, sl, r8
 8001ff0:	a808      	add	r0, sp, #32
 8001ff2:	f7ff fe41 	bl	8001c78 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001ff6:	f504 718b 	add.w	r1, r4, #278	; 0x116
 8001ffa:	a808      	add	r0, sp, #32
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	f7ff fe3b 	bl	8001c78 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8002002:	f204 111d 	addw	r1, r4, #285	; 0x11d
 8002006:	a808      	add	r0, sp, #32
 8002008:	f008 f830 	bl	800a06c <mavlink_sha256_final_48>
	}
	
	return msg->len + header_len + 2 + signature_len;
}
 800200c:	b023      	add	sp, #140	; 0x8c
 800200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002012:	bf00      	nop
 8002014:	6a09e667 	.word	0x6a09e667
 8002018:	bb67ae85 	.word	0xbb67ae85
 800201c:	3c6ef372 	.word	0x3c6ef372
 8002020:	510e527f 	.word	0x510e527f
 8002024:	a54ff53a 	.word	0xa54ff53a
 8002028:	9b05688c 	.word	0x9b05688c
 800202c:	1f83d9ab 	.word	0x1f83d9ab
 8002030:	20001a44 	.word	0x20001a44

08002034 <_Z12queue_coordshfff>:
void queue_coords(uint8_t sys_id, float latitude, float longitude, float altitude) {
 8002034:	b510      	push	{r4, lr}
 8002036:	4604      	mov	r4, r0
 8002038:	ed2d 8b04 	vpush	{d8-d9}
        void* mem_ptr = k_malloc(size);
 800203c:	2014      	movs	r0, #20
void queue_coords(uint8_t sys_id, float latitude, float longitude, float altitude) {
 800203e:	eeb0 9a40 	vmov.f32	s18, s0
 8002042:	eef0 8a60 	vmov.f32	s17, s1
 8002046:	eeb0 8a41 	vmov.f32	s16, s2
        void* mem_ptr = k_malloc(size);
 800204a:	f00b fa99 	bl	800d580 <k_malloc>
	coords->sys_id = sys_id;
 800204e:	7104      	strb	r4, [r0, #4]
	coords->latitude = latitude;
 8002050:	ed80 9a02 	vstr	s18, [r0, #8]
	coords->longitude = longitude;
 8002054:	edc0 8a03 	vstr	s17, [r0, #12]
	coords->altitude = altitude;
 8002058:	ed80 8a04 	vstr	s16, [r0, #16]
}
 800205c:	ecbd 8b04 	vpop	{d8-d9}
        void* mem_ptr = k_malloc(size);
 8002060:	4601      	mov	r1, r0
}
 8002062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&coords_fifo, mem_ptr);
 8002066:	4801      	ldr	r0, [pc, #4]	; (800206c <_Z12queue_coordshfff+0x38>)
 8002068:	f00a bf51 	b.w	800cf0e <k_queue_append>
 800206c:	200003cc 	.word	0x200003cc

08002070 <_Z17queue_named_valuePKci>:
void queue_named_value(const char* name, int value) {
 8002070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002074:	460f      	mov	r7, r1
 8002076:	4680      	mov	r8, r0
	int len = strlen(name);
 8002078:	f7fe fea8 	bl	8000dcc <strlen>
 800207c:	4605      	mov	r5, r0
 800207e:	280a      	cmp	r0, #10
 8002080:	4606      	mov	r6, r0
        void* mem_ptr = k_malloc(size);
 8002082:	f04f 0014 	mov.w	r0, #20
 8002086:	bfa8      	it	ge
 8002088:	250a      	movge	r5, #10
 800208a:	f00b fa79 	bl	800d580 <k_malloc>
	memcpy(named_value->name, name, len);
 800208e:	462a      	mov	r2, r5
        void* mem_ptr = k_malloc(size);
 8002090:	4604      	mov	r4, r0
	memcpy(named_value->name, name, len);
 8002092:	4641      	mov	r1, r8
 8002094:	3004      	adds	r0, #4
 8002096:	f00b fb1f 	bl	800d6d8 <memcpy>
	if (len < named_value_name_length) named_value->name[len] = '\0';
 800209a:	2e09      	cmp	r6, #9
 800209c:	bfde      	ittt	le
 800209e:	192d      	addle	r5, r5, r4
 80020a0:	2300      	movle	r3, #0
 80020a2:	712b      	strble	r3, [r5, #4]
	k_fifo_put(&named_values_fifo, mem_ptr);
 80020a4:	4621      	mov	r1, r4
	named_value->value = value;
 80020a6:	6127      	str	r7, [r4, #16]
	k_fifo_put(&named_values_fifo, mem_ptr);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <_Z17queue_named_valuePKci+0x44>)
}
 80020aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&named_values_fifo, mem_ptr);
 80020ae:	f00a bf2e 	b.w	800cf0e <k_queue_append>
 80020b2:	bf00      	nop
 80020b4:	200003e8 	.word	0x200003e8

080020b8 <_ZL8uart_isrPK6devicePv>:
static uint8_t uart_tx_buf[UART_BUF_MAXSIZE];
static uint8_t* uart_tx_ptr = uart_tx_buf;
static uint16_t uart_tx_ctr = 0;
static const struct device* uart_dev;

static void uart_isr(const struct device* dev, void* userdata) {
 80020b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020bc:	4680      	mov	r8, r0
 80020be:	b0a3      	sub	sp, #140	; 0x8c
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
 80020c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	bb83      	cbnz	r3, 800212a <_ZL8uart_isrPK6devicePv+0x72>
	if (api->irq_is_pending == NULL) {
 80020c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d132      	bne.n	8002138 <_ZL8uart_isrPK6devicePv+0x80>
	if (api->irq_rx_ready == NULL) {
 80020d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80020d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d132      	bne.n	8002142 <_ZL8uart_isrPK6devicePv+0x8a>
	if (api->fifo_read != NULL) {
 80020dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	b333      	cbz	r3, 8002132 <_ZL8uart_isrPK6devicePv+0x7a>
		return api->fifo_read(dev, rx_data, size);
 80020e4:	2201      	movs	r2, #1
 80020e6:	f10d 0107 	add.w	r1, sp, #7
 80020ea:	4640      	mov	r0, r8
 80020ec:	4798      	blx	r3
	
	while (uart_irq_update(dev)
		&& uart_irq_is_pending(dev)
	) {
        	if (uart_irq_rx_ready(dev)) {
                        if (uart_fifo_read(dev, &c, 1) == 0) {
 80020ee:	b300      	cbz	r0, 8002132 <_ZL8uart_isrPK6devicePv+0x7a>
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80020f0:	4dab      	ldr	r5, [pc, #684]	; (80023a0 <_ZL8uart_isrPK6devicePv+0x2e8>)
                                break;   
                        }
			if (mavlink_parse_char(MAVLINK_MAIN_CHANNEL, c, &mavlink_msg, &mavlink_status)) {
 80020f2:	f89d 6007 	ldrb.w	r6, [sp, #7]

	switch (status->parse_state)
 80020f6:	78eb      	ldrb	r3, [r5, #3]
 80020f8:	4caa      	ldr	r4, [pc, #680]	; (80023a4 <_ZL8uart_isrPK6devicePv+0x2ec>)
	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80020fa:	2700      	movs	r7, #0
 80020fc:	702f      	strb	r7, [r5, #0]
	switch (status->parse_state)
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	d851      	bhi.n	80021a6 <_ZL8uart_isrPK6devicePv+0xee>
 8002102:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002106:	0041      	.short	0x0041
 8002108:	008c0041 	.word	0x008c0041
 800210c:	00ab009c 	.word	0x00ab009c
 8002110:	00b800b1 	.word	0x00b800b1
 8002114:	00c600bf 	.word	0x00c600bf
 8002118:	00ed00d8 	.word	0x00ed00d8
 800211c:	01110101 	.word	0x01110101
 8002120:	01600160 	.word	0x01600160
 8002124:	0198      	.short	0x0198
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    _mav_parse_error(status);
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002126:	70ea      	strb	r2, [r5, #3]
 8002128:	e7ca      	b.n	80020c0 <_ZL8uart_isrPK6devicePv+0x8>
		return -ENOSYS;
	}
	return api->irq_update(dev);
 800212a:	4640      	mov	r0, r8
 800212c:	4798      	blx	r3
		&& uart_irq_is_pending(dev)
 800212e:	2800      	cmp	r0, #0
 8002130:	d1ca      	bne.n	80020c8 <_ZL8uart_isrPK6devicePv+0x10>
			}
                } else {
			break;
		}
        }
}
 8002132:	b023      	add	sp, #140	; 0x8c
 8002134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return api->irq_is_pending(dev);
 8002138:	4640      	mov	r0, r8
 800213a:	4798      	blx	r3
		&& uart_irq_is_pending(dev)
 800213c:	2800      	cmp	r0, #0
 800213e:	d1c8      	bne.n	80020d2 <_ZL8uart_isrPK6devicePv+0x1a>
 8002140:	e7f7      	b.n	8002132 <_ZL8uart_isrPK6devicePv+0x7a>
	return api->irq_rx_ready(dev);
 8002142:	4640      	mov	r0, r8
 8002144:	4798      	blx	r3
        	if (uart_irq_rx_ready(dev)) {
 8002146:	4604      	mov	r4, r0
 8002148:	2800      	cmp	r0, #0
 800214a:	d1c7      	bne.n	80020dc <_ZL8uart_isrPK6devicePv+0x24>
	if (api->irq_tx_ready != NULL) {
 800214c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0ed      	beq.n	8002132 <_ZL8uart_isrPK6devicePv+0x7a>
		return api->irq_tx_ready(dev);
 8002156:	4640      	mov	r0, r8
 8002158:	4798      	blx	r3
		} else if (uart_irq_tx_ready(dev)) {
 800215a:	2800      	cmp	r0, #0
 800215c:	d0e9      	beq.n	8002132 <_ZL8uart_isrPK6devicePv+0x7a>
			if (uart_tx_ctr > 0) {
 800215e:	4d92      	ldr	r5, [pc, #584]	; (80023a8 <_ZL8uart_isrPK6devicePv+0x2f0>)
 8002160:	4e92      	ldr	r6, [pc, #584]	; (80023ac <_ZL8uart_isrPK6devicePv+0x2f4>)
 8002162:	882a      	ldrh	r2, [r5, #0]
 8002164:	2a00      	cmp	r2, #0
 8002166:	f000 8231 	beq.w	80025cc <_ZL8uart_isrPK6devicePv+0x514>
	if (api->fifo_fill != NULL) {
 800216a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	b11b      	cbz	r3, 800217a <_ZL8uart_isrPK6devicePv+0xc2>
		return api->fifo_fill(dev, tx_data, size);
 8002172:	6831      	ldr	r1, [r6, #0]
 8002174:	4640      	mov	r0, r8
 8002176:	4798      	blx	r3
 8002178:	4604      	mov	r4, r0
				uart_tx_ptr += n;
 800217a:	6833      	ldr	r3, [r6, #0]
				uart_tx_ctr -= n;
 800217c:	8828      	ldrh	r0, [r5, #0]
				uart_tx_ptr += n;
 800217e:	4423      	add	r3, r4
				uart_tx_ctr -= n;
 8002180:	1b04      	subs	r4, r0, r4
				uart_tx_ptr += n;
 8002182:	6033      	str	r3, [r6, #0]
				uart_tx_ctr -= n;
 8002184:	802c      	strh	r4, [r5, #0]
 8002186:	e79b      	b.n	80020c0 <_ZL8uart_isrPK6devicePv+0x8>
		if (c == MAVLINK_STX)
 8002188:	2efd      	cmp	r6, #253	; 0xfd
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 800218a:	7b2b      	ldrb	r3, [r5, #12]
		if (c == MAVLINK_STX)
 800218c:	d13d      	bne.n	800220a <_ZL8uart_isrPK6devicePv+0x152>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800218e:	2202      	movs	r2, #2
 8002190:	70ea      	strb	r2, [r5, #3]
			rxmsg->len = 0;
 8002192:	2200      	movs	r2, #0
 8002194:	70e2      	strb	r2, [r4, #3]
			rxmsg->magic = c;
 8002196:	70a6      	strb	r6, [r4, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002198:	f023 0301 	bic.w	r3, r3, #1
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 800219c:	732b      	strb	r3, [r5, #12]
	msg->checksum = crcTmp;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a2:	7023      	strb	r3, [r4, #0]
 80021a4:	7063      	strb	r3, [r4, #1]
	if (status->msg_received == MAVLINK_FRAMING_OK)
 80021a6:	7829      	ldrb	r1, [r5, #0]
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d106      	bne.n	80021ba <_ZL8uart_isrPK6devicePv+0x102>
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80021ac:	892b      	ldrh	r3, [r5, #8]
		status->current_rx_seq = rxmsg->seq;
 80021ae:	79a2      	ldrb	r2, [r4, #6]
 80021b0:	716a      	strb	r2, [r5, #5]
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80021b2:	b903      	cbnz	r3, 80021b6 <_ZL8uart_isrPK6devicePv+0xfe>
 80021b4:	816b      	strh	r3, [r5, #10]
		status->packet_rx_success_count++;
 80021b6:	3301      	adds	r3, #1
 80021b8:	812b      	strh	r3, [r5, #8]
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80021ba:	487d      	ldr	r0, [pc, #500]	; (80023b0 <_ZL8uart_isrPK6devicePv+0x2f8>)
           r_mavlink_status->parse_state = status->parse_state;
 80021bc:	4a7d      	ldr	r2, [pc, #500]	; (80023b4 <_ZL8uart_isrPK6devicePv+0x2fc>)
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80021be:	78e3      	ldrb	r3, [r4, #3]
 80021c0:	70c3      	strb	r3, [r0, #3]
           r_mavlink_status->parse_state = status->parse_state;
 80021c2:	78eb      	ldrb	r3, [r5, #3]
 80021c4:	70d3      	strb	r3, [r2, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 80021c6:	792b      	ldrb	r3, [r5, #4]
 80021c8:	7113      	strb	r3, [r2, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80021ca:	796b      	ldrb	r3, [r5, #5]
 80021cc:	3301      	adds	r3, #1
 80021ce:	7153      	strb	r3, [r2, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80021d0:	892b      	ldrh	r3, [r5, #8]
 80021d2:	8113      	strh	r3, [r2, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80021d4:	78ab      	ldrb	r3, [r5, #2]
 80021d6:	8153      	strh	r3, [r2, #10]
           r_mavlink_status->flags = status->flags;
 80021d8:	7b2b      	ldrb	r3, [r5, #12]
 80021da:	7313      	strb	r3, [r2, #12]
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80021dc:	2902      	cmp	r1, #2
       status->parse_error = 0;
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	70ab      	strb	r3, [r5, #2]
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80021e4:	f040 81e9 	bne.w	80025ba <_ZL8uart_isrPK6devicePv+0x502>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 80021e8:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
 80021ec:	8003      	strh	r3, [r0, #0]
    status->parse_error++;
 80021ee:	2201      	movs	r2, #1
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80021f0:	2300      	movs	r3, #0
	    if (c == MAVLINK_STX)
 80021f2:	2efd      	cmp	r6, #253	; 0xfd
    status->parse_error++;
 80021f4:	70aa      	strb	r2, [r5, #2]
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80021f6:	702b      	strb	r3, [r5, #0]
	    if (c == MAVLINK_STX)
 80021f8:	d195      	bne.n	8002126 <_ZL8uart_isrPK6devicePv+0x6e>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80021fa:	2202      	movs	r2, #2
		    rxmsg->len = 0;
 80021fc:	70e3      	strb	r3, [r4, #3]
	msg->checksum = crcTmp;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002202:	70ea      	strb	r2, [r5, #3]
	msg->checksum = crcTmp;
 8002204:	7023      	strb	r3, [r4, #0]
 8002206:	7063      	strb	r3, [r4, #1]
 8002208:	e75a      	b.n	80020c0 <_ZL8uart_isrPK6devicePv+0x8>
		} else if (c == MAVLINK_STX_MAVLINK1)
 800220a:	2efe      	cmp	r6, #254	; 0xfe
 800220c:	d1cb      	bne.n	80021a6 <_ZL8uart_isrPK6devicePv+0xee>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800220e:	2202      	movs	r2, #2
 8002210:	70ea      	strb	r2, [r5, #3]
			rxmsg->len = 0;
 8002212:	2200      	movs	r2, #0
 8002214:	70e2      	strb	r2, [r4, #3]
			rxmsg->magic = c;
 8002216:	70a6      	strb	r6, [r4, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	e7be      	b.n	800219c <_ZL8uart_isrPK6devicePv+0xe4>
			mavlink_update_checksum(rxmsg, c);
 800221e:	4861      	ldr	r0, [pc, #388]	; (80023a4 <_ZL8uart_isrPK6devicePv+0x2ec>)
			rxmsg->len = c;
 8002220:	70e6      	strb	r6, [r4, #3]
			status->packet_idx = 0;
 8002222:	712f      	strb	r7, [r5, #4]
			mavlink_update_checksum(rxmsg, c);
 8002224:	4631      	mov	r1, r6
 8002226:	f007 feb6 	bl	8009f96 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800222a:	7b2b      	ldrb	r3, [r5, #12]
 800222c:	07da      	lsls	r2, r3, #31
 800222e:	d503      	bpl.n	8002238 <_ZL8uart_isrPK6devicePv+0x180>
                            rxmsg->incompat_flags = 0;
 8002230:	7127      	strb	r7, [r4, #4]
                            rxmsg->compat_flags = 0;
 8002232:	7167      	strb	r7, [r4, #5]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002234:	2305      	movs	r3, #5
 8002236:	e000      	b.n	800223a <_ZL8uart_isrPK6devicePv+0x182>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8002238:	2303      	movs	r3, #3
 800223a:	70eb      	strb	r3, [r5, #3]
 800223c:	e7b3      	b.n	80021a6 <_ZL8uart_isrPK6devicePv+0xee>
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 800223e:	f016 0ffe 	tst.w	r6, #254	; 0xfe
		rxmsg->incompat_flags = c;
 8002242:	7126      	strb	r6, [r4, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8002244:	d004      	beq.n	8002250 <_ZL8uart_isrPK6devicePv+0x198>
    status->parse_error++;
 8002246:	78ab      	ldrb	r3, [r5, #2]
 8002248:	3301      	adds	r3, #1
 800224a:	70ab      	strb	r3, [r5, #2]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800224c:	2301      	movs	r3, #1
 800224e:	e7f4      	b.n	800223a <_ZL8uart_isrPK6devicePv+0x182>
		mavlink_update_checksum(rxmsg, c);
 8002250:	4854      	ldr	r0, [pc, #336]	; (80023a4 <_ZL8uart_isrPK6devicePv+0x2ec>)
 8002252:	4631      	mov	r1, r6
 8002254:	f007 fe9f 	bl	8009f96 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8002258:	2304      	movs	r3, #4
 800225a:	e7ee      	b.n	800223a <_ZL8uart_isrPK6devicePv+0x182>
		mavlink_update_checksum(rxmsg, c);
 800225c:	4851      	ldr	r0, [pc, #324]	; (80023a4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->compat_flags = c;
 800225e:	7166      	strb	r6, [r4, #5]
		mavlink_update_checksum(rxmsg, c);
 8002260:	4631      	mov	r1, r6
 8002262:	f007 fe98 	bl	8009f96 <mavlink_update_checksum>
 8002266:	e7e5      	b.n	8002234 <_ZL8uart_isrPK6devicePv+0x17c>
		mavlink_update_checksum(rxmsg, c);
 8002268:	484e      	ldr	r0, [pc, #312]	; (80023a4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->seq = c;
 800226a:	71a6      	strb	r6, [r4, #6]
		mavlink_update_checksum(rxmsg, c);
 800226c:	4631      	mov	r1, r6
 800226e:	f007 fe92 	bl	8009f96 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8002272:	2306      	movs	r3, #6
 8002274:	e7e1      	b.n	800223a <_ZL8uart_isrPK6devicePv+0x182>
		mavlink_update_checksum(rxmsg, c);
 8002276:	484b      	ldr	r0, [pc, #300]	; (80023a4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->sysid = c;
 8002278:	71e6      	strb	r6, [r4, #7]
		mavlink_update_checksum(rxmsg, c);
 800227a:	4631      	mov	r1, r6
 800227c:	f007 fe8b 	bl	8009f96 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8002280:	2307      	movs	r3, #7
 8002282:	e7da      	b.n	800223a <_ZL8uart_isrPK6devicePv+0x182>
		mavlink_update_checksum(rxmsg, c);
 8002284:	4847      	ldr	r0, [pc, #284]	; (80023a4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->compid = c;
 8002286:	7226      	strb	r6, [r4, #8]
		mavlink_update_checksum(rxmsg, c);
 8002288:	4631      	mov	r1, r6
 800228a:	f007 fe84 	bl	8009f96 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 800228e:	2308      	movs	r3, #8
 8002290:	e7d3      	b.n	800223a <_ZL8uart_isrPK6devicePv+0x182>
		rxmsg->msgid = c;
 8002292:	2300      	movs	r3, #0
 8002294:	72a3      	strb	r3, [r4, #10]
 8002296:	72e3      	strb	r3, [r4, #11]
		mavlink_update_checksum(rxmsg, c);
 8002298:	4842      	ldr	r0, [pc, #264]	; (80023a4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->msgid = c;
 800229a:	7266      	strb	r6, [r4, #9]
		mavlink_update_checksum(rxmsg, c);
 800229c:	4631      	mov	r1, r6
 800229e:	f007 fe7a 	bl	8009f96 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80022a2:	7b2b      	ldrb	r3, [r5, #12]
 80022a4:	07db      	lsls	r3, r3, #31
 80022a6:	d504      	bpl.n	80022b2 <_ZL8uart_isrPK6devicePv+0x1fa>
			if(rxmsg->len > 0) {
 80022a8:	78e3      	ldrb	r3, [r4, #3]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03a      	beq.n	8002324 <_ZL8uart_isrPK6devicePv+0x26c>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80022ae:	230b      	movs	r3, #11
 80022b0:	e7c3      	b.n	800223a <_ZL8uart_isrPK6devicePv+0x182>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 80022b2:	2309      	movs	r3, #9
 80022b4:	e7c1      	b.n	800223a <_ZL8uart_isrPK6devicePv+0x182>
		rxmsg->msgid |= c<<8;
 80022b6:	7aa2      	ldrb	r2, [r4, #10]
 80022b8:	7a63      	ldrb	r3, [r4, #9]
		mavlink_update_checksum(rxmsg, c);
 80022ba:	483a      	ldr	r0, [pc, #232]	; (80023a4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->msgid |= c<<8;
 80022bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022c0:	7ae2      	ldrb	r2, [r4, #11]
 80022c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022c6:	ea43 2206 	orr.w	r2, r3, r6, lsl #8
 80022ca:	7263      	strb	r3, [r4, #9]
 80022cc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80022d0:	0c12      	lsrs	r2, r2, #16
 80022d2:	72a3      	strb	r3, [r4, #10]
 80022d4:	72e2      	strb	r2, [r4, #11]
		mavlink_update_checksum(rxmsg, c);
 80022d6:	4631      	mov	r1, r6
 80022d8:	f007 fe5d 	bl	8009f96 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 80022dc:	230a      	movs	r3, #10
 80022de:	e7ac      	b.n	800223a <_ZL8uart_isrPK6devicePv+0x182>
		rxmsg->msgid |= ((uint32_t)c)<<16;
 80022e0:	7aa2      	ldrb	r2, [r4, #10]
 80022e2:	7a63      	ldrb	r3, [r4, #9]
		mavlink_update_checksum(rxmsg, c);
 80022e4:	482f      	ldr	r0, [pc, #188]	; (80023a4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		rxmsg->msgid |= ((uint32_t)c)<<16;
 80022e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022ea:	7ae2      	ldrb	r2, [r4, #11]
 80022ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022f0:	ea43 4206 	orr.w	r2, r3, r6, lsl #16
 80022f4:	7263      	strb	r3, [r4, #9]
 80022f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80022fa:	72a3      	strb	r3, [r4, #10]
 80022fc:	0c13      	lsrs	r3, r2, #16
 80022fe:	72e3      	strb	r3, [r4, #11]
		mavlink_update_checksum(rxmsg, c);
 8002300:	4631      	mov	r1, r6
 8002302:	f007 fe48 	bl	8009f96 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8002306:	e7cf      	b.n	80022a8 <_ZL8uart_isrPK6devicePv+0x1f0>
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8002308:	792b      	ldrb	r3, [r5, #4]
		mavlink_update_checksum(rxmsg, c);
 800230a:	4826      	ldr	r0, [pc, #152]	; (80023a4 <_ZL8uart_isrPK6devicePv+0x2ec>)
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	4423      	add	r3, r4
 8002310:	712a      	strb	r2, [r5, #4]
 8002312:	731e      	strb	r6, [r3, #12]
		mavlink_update_checksum(rxmsg, c);
 8002314:	4631      	mov	r1, r6
 8002316:	f007 fe3e 	bl	8009f96 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 800231a:	792a      	ldrb	r2, [r5, #4]
 800231c:	78e3      	ldrb	r3, [r4, #3]
 800231e:	429a      	cmp	r2, r3
 8002320:	f47f af41 	bne.w	80021a6 <_ZL8uart_isrPK6devicePv+0xee>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002324:	230c      	movs	r3, #12
 8002326:	e788      	b.n	800223a <_ZL8uart_isrPK6devicePv+0x182>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8002328:	7aa3      	ldrb	r3, [r4, #10]
 800232a:	7a61      	ldrb	r1, [r4, #9]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 800232c:	4822      	ldr	r0, [pc, #136]	; (80023b8 <_ZL8uart_isrPK6devicePv+0x300>)
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 800232e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8002332:	7ae3      	ldrb	r3, [r4, #11]
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8002334:	27d6      	movs	r7, #214	; 0xd6
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8002336:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
            if (msgid < mavlink_message_crcs[mid].msgid) {
 800233a:	f04f 0c0c 	mov.w	ip, #12
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 800233e:	2300      	movs	r3, #0
            uint32_t mid = (low+1+high)/2;
 8002340:	19da      	adds	r2, r3, r7
 8002342:	3201      	adds	r2, #1
 8002344:	0852      	lsrs	r2, r2, #1
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8002346:	fb0c fe02 	mul.w	lr, ip, r2
 800234a:	f850 e00e 	ldr.w	lr, [r0, lr]
 800234e:	4571      	cmp	r1, lr
 8002350:	d236      	bcs.n	80023c0 <_ZL8uart_isrPK6devicePv+0x308>
                high = mid-1;
 8002352:	1e57      	subs	r7, r2, #1
        while (low < high) {
 8002354:	429f      	cmp	r7, r3
 8002356:	d8f3      	bhi.n	8002340 <_ZL8uart_isrPK6devicePv+0x288>
        if (mavlink_message_crcs[low].msgid != msgid) {
 8002358:	220c      	movs	r2, #12
 800235a:	4353      	muls	r3, r2
 800235c:	18c7      	adds	r7, r0, r3
 800235e:	58c3      	ldr	r3, [r0, r3]
		mavlink_update_checksum(rxmsg, crc_extra);
 8002360:	4810      	ldr	r0, [pc, #64]	; (80023a4 <_ZL8uart_isrPK6devicePv+0x2ec>)
        if (mavlink_message_crcs[low].msgid != msgid) {
 8002362:	4299      	cmp	r1, r3
            return NULL;
 8002364:	bf16      	itet	ne
 8002366:	2700      	movne	r7, #0
		uint8_t crc_extra = e?e->crc_extra:0;
 8002368:	7939      	ldrbeq	r1, [r7, #4]
 800236a:	4639      	movne	r1, r7
		mavlink_update_checksum(rxmsg, crc_extra);
 800236c:	f007 fe13 	bl	8009f96 <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8002370:	8823      	ldrh	r3, [r4, #0]
                rxmsg->ck[0] = c;
 8002372:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
		if (c != (rxmsg->checksum & 0xFF)) {
 8002376:	b2db      	uxtb	r3, r3
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8002378:	429e      	cmp	r6, r3
 800237a:	bf14      	ite	ne
 800237c:	230e      	movne	r3, #14
 800237e:	230d      	moveq	r3, #13
 8002380:	70eb      	strb	r3, [r5, #3]
                if (e && status->packet_idx < e->max_msg_len) {
 8002382:	2f00      	cmp	r7, #0
 8002384:	f43f af0f 	beq.w	80021a6 <_ZL8uart_isrPK6devicePv+0xee>
 8002388:	792b      	ldrb	r3, [r5, #4]
 800238a:	79ba      	ldrb	r2, [r7, #6]
 800238c:	429a      	cmp	r2, r3
 800238e:	f67f af0a 	bls.w	80021a6 <_ZL8uart_isrPK6devicePv+0xee>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8002392:	480a      	ldr	r0, [pc, #40]	; (80023bc <_ZL8uart_isrPK6devicePv+0x304>)
 8002394:	1ad2      	subs	r2, r2, r3
 8002396:	2100      	movs	r1, #0
 8002398:	4418      	add	r0, r3
 800239a:	f00b f9c5 	bl	800d728 <memset>
 800239e:	e702      	b.n	80021a6 <_ZL8uart_isrPK6devicePv+0xee>
 80023a0:	20001a44 	.word	0x20001a44
 80023a4:	2000225a 	.word	0x2000225a
 80023a8:	20002140 	.word	0x20002140
 80023ac:	20000000 	.word	0x20000000
 80023b0:	200026ee 	.word	0x200026ee
 80023b4:	20001aa4 	.word	0x20001aa4
 80023b8:	0800e08c 	.word	0x0800e08c
 80023bc:	20002266 	.word	0x20002266
                low = mid;
 80023c0:	4613      	mov	r3, r2
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80023c2:	d9c9      	bls.n	8002358 <_ZL8uart_isrPK6devicePv+0x2a0>
 80023c4:	e7c6      	b.n	8002354 <_ZL8uart_isrPK6devicePv+0x29c>
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 80023c6:	2b0e      	cmp	r3, #14
 80023c8:	d016      	beq.n	80023f8 <_ZL8uart_isrPK6devicePv+0x340>
 80023ca:	8823      	ldrh	r3, [r4, #0]
			status->msg_received = MAVLINK_FRAMING_OK;
 80023cc:	ebb6 2f13 	cmp.w	r6, r3, lsr #8
 80023d0:	bf14      	ite	ne
 80023d2:	2302      	movne	r3, #2
 80023d4:	2301      	moveq	r3, #1
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80023d6:	7922      	ldrb	r2, [r4, #4]
 80023d8:	702b      	strb	r3, [r5, #0]
 80023da:	07d7      	lsls	r7, r2, #31
		rxmsg->ck[1] = c;
 80023dc:	f884 6115 	strb.w	r6, [r4, #277]	; 0x115
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80023e0:	d50c      	bpl.n	80023fc <_ZL8uart_isrPK6devicePv+0x344>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 80023e2:	220f      	movs	r2, #15
 80023e4:	70ea      	strb	r2, [r5, #3]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80023e6:	2b02      	cmp	r3, #2
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80023e8:	f04f 020d 	mov.w	r2, #13
 80023ec:	736a      	strb	r2, [r5, #13]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80023ee:	f43f aeda 	beq.w	80021a6 <_ZL8uart_isrPK6devicePv+0xee>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	702b      	strb	r3, [r5, #0]
 80023f6:	e6d6      	b.n	80021a6 <_ZL8uart_isrPK6devicePv+0xee>
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80023f8:	2302      	movs	r3, #2
 80023fa:	e7ec      	b.n	80023d6 <_ZL8uart_isrPK6devicePv+0x31e>
			if (status->signing &&
 80023fc:	692b      	ldr	r3, [r5, #16]
 80023fe:	b12b      	cbz	r3, 800240c <_ZL8uart_isrPK6devicePv+0x354>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			if (status->signing &&
 8002402:	b962      	cbnz	r2, 800241e <_ZL8uart_isrPK6devicePv+0x366>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002404:	782b      	ldrb	r3, [r5, #0]
 8002406:	2b02      	cmp	r3, #2
 8002408:	f040 80d4 	bne.w	80025b4 <_ZL8uart_isrPK6devicePv+0x4fc>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800240c:	2301      	movs	r3, #1
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800240e:	4973      	ldr	r1, [pc, #460]	; (80025dc <_ZL8uart_isrPK6devicePv+0x524>)
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002410:	70eb      	strb	r3, [r5, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002412:	f240 1223 	movw	r2, #291	; 0x123
 8002416:	4872      	ldr	r0, [pc, #456]	; (80025e0 <_ZL8uart_isrPK6devicePv+0x528>)
 8002418:	f00b f95e 	bl	800d6d8 <memcpy>
 800241c:	e6c3      	b.n	80021a6 <_ZL8uart_isrPK6devicePv+0xee>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800241e:	7aa1      	ldrb	r1, [r4, #10]
 8002420:	7a63      	ldrb	r3, [r4, #9]
 8002422:	4870      	ldr	r0, [pc, #448]	; (80025e4 <_ZL8uart_isrPK6devicePv+0x52c>)
 8002424:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002428:	7ae1      	ldrb	r1, [r4, #11]
 800242a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800242e:	4790      	blx	r2
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002430:	2800      	cmp	r0, #0
 8002432:	d1eb      	bne.n	800240c <_ZL8uart_isrPK6devicePv+0x354>
 8002434:	e7e6      	b.n	8002404 <_ZL8uart_isrPK6devicePv+0x34c>
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8002436:	7b6b      	ldrb	r3, [r5, #13]
 8002438:	1ae2      	subs	r2, r4, r3
		status->signature_wait--;
 800243a:	3b01      	subs	r3, #1
 800243c:	b2db      	uxtb	r3, r3
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 800243e:	f882 6123 	strb.w	r6, [r2, #291]	; 0x123
		status->signature_wait--;
 8002442:	736b      	strb	r3, [r5, #13]
		if (status->signature_wait == 0) {
 8002444:	2b00      	cmp	r3, #0
 8002446:	f47f aeae 	bne.w	80021a6 <_ZL8uart_isrPK6devicePv+0xee>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 800244a:	f8d5 9010 	ldr.w	r9, [r5, #16]
	if (signing == NULL) {
 800244e:	f1b9 0f00 	cmp.w	r9, #0
 8002452:	f000 808b 	beq.w	800256c <_ZL8uart_isrPK6devicePv+0x4b4>
 8002456:	e9cd 3308 	strd	r3, r3, [sp, #32]
    B = 0xbb67ae85;
 800245a:	4a63      	ldr	r2, [pc, #396]	; (80025e8 <_ZL8uart_isrPK6devicePv+0x530>)
 800245c:	4b63      	ldr	r3, [pc, #396]	; (80025ec <_ZL8uart_isrPK6devicePv+0x534>)
    D = 0xa54ff53a;
 800245e:	4964      	ldr	r1, [pc, #400]	; (80025f0 <_ZL8uart_isrPK6devicePv+0x538>)
    F = 0x9b05688c;
 8002460:	4864      	ldr	r0, [pc, #400]	; (80025f4 <_ZL8uart_isrPK6devicePv+0x53c>)
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8002462:	f8d5 a014 	ldr.w	sl, [r5, #20]
    B = 0xbb67ae85;
 8002466:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    D = 0xa54ff53a;
 800246a:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <_ZL8uart_isrPK6devicePv+0x540>)
 800246c:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
    F = 0x9b05688c;
 8002470:	4b62      	ldr	r3, [pc, #392]	; (80025fc <_ZL8uart_isrPK6devicePv+0x544>)
 8002472:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
    G = 0x1f83d9ab;
 8002476:	4b62      	ldr	r3, [pc, #392]	; (8002600 <_ZL8uart_isrPK6devicePv+0x548>)
 8002478:	9310      	str	r3, [sp, #64]	; 0x40
    H = 0x5be0cd19;
 800247a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 800247e:	2220      	movs	r2, #32
 8002480:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8002484:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8002488:	eb0d 0002 	add.w	r0, sp, r2
 800248c:	f109 0110 	add.w	r1, r9, #16
 8002490:	9311      	str	r3, [sp, #68]	; 0x44
 8002492:	f7ff fbf1 	bl	8001c78 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 8002496:	78e2      	ldrb	r2, [r4, #3]
 8002498:	495a      	ldr	r1, [pc, #360]	; (8002604 <_ZL8uart_isrPK6devicePv+0x54c>)
 800249a:	320a      	adds	r2, #10
 800249c:	a808      	add	r0, sp, #32
 800249e:	f7ff fbeb 	bl	8001c78 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 80024a2:	4959      	ldr	r1, [pc, #356]	; (8002608 <_ZL8uart_isrPK6devicePv+0x550>)
 80024a4:	2202      	movs	r2, #2
 80024a6:	a808      	add	r0, sp, #32
 80024a8:	f7ff fbe6 	bl	8001c78 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 80024ac:	2207      	movs	r2, #7
 80024ae:	4957      	ldr	r1, [pc, #348]	; (800260c <_ZL8uart_isrPK6devicePv+0x554>)
 80024b0:	a808      	add	r0, sp, #32
 80024b2:	f7ff fbe1 	bl	8001c78 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 80024b6:	a902      	add	r1, sp, #8
 80024b8:	a808      	add	r0, sp, #32
 80024ba:	f007 fdd7 	bl	800a06c <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 80024be:	4954      	ldr	r1, [pc, #336]	; (8002610 <_ZL8uart_isrPK6devicePv+0x558>)
 80024c0:	2206      	movs	r2, #6
 80024c2:	a802      	add	r0, sp, #8
 80024c4:	f00b f8f8 	bl	800d6b8 <memcmp>
 80024c8:	4607      	mov	r7, r0
 80024ca:	2800      	cmp	r0, #0
 80024cc:	d164      	bne.n	8002598 <_ZL8uart_isrPK6devicePv+0x4e0>
	tstamp.t64 = 0;
 80024ce:	2200      	movs	r2, #0
 80024d0:	2300      	movs	r3, #0
 80024d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
	memcpy(tstamp.t8, psig+1, 6);
 80024d6:	494f      	ldr	r1, [pc, #316]	; (8002614 <_ZL8uart_isrPK6devicePv+0x55c>)
	uint8_t link_id = psig[0];
 80024d8:	f894 b116 	ldrb.w	fp, [r4, #278]	; 0x116
	memcpy(tstamp.t8, psig+1, 6);
 80024dc:	2206      	movs	r2, #6
 80024de:	a804      	add	r0, sp, #16
 80024e0:	f00b f8fa 	bl	800d6d8 <memcpy>
	if (signing_streams == NULL) {
 80024e4:	f1ba 0f00 	cmp.w	sl, #0
 80024e8:	d056      	beq.n	8002598 <_ZL8uart_isrPK6devicePv+0x4e0>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80024ea:	f8ba 3000 	ldrh.w	r3, [sl]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80024ee:	f894 c007 	ldrb.w	ip, [r4, #7]
		    msg->compid == signing_streams->stream[i].compid &&
 80024f2:	7a21      	ldrb	r1, [r4, #8]
 80024f4:	4652      	mov	r2, sl
 80024f6:	b2b8      	uxth	r0, r7
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80024f8:	4283      	cmp	r3, r0
 80024fa:	d90b      	bls.n	8002514 <_ZL8uart_isrPK6devicePv+0x45c>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80024fc:	78d0      	ldrb	r0, [r2, #3]
 80024fe:	4560      	cmp	r0, ip
 8002500:	d105      	bne.n	800250e <_ZL8uart_isrPK6devicePv+0x456>
 8002502:	7910      	ldrb	r0, [r2, #4]
 8002504:	4288      	cmp	r0, r1
 8002506:	d102      	bne.n	800250e <_ZL8uart_isrPK6devicePv+0x456>
		    msg->compid == signing_streams->stream[i].compid &&
 8002508:	7890      	ldrb	r0, [r2, #2]
 800250a:	4558      	cmp	r0, fp
 800250c:	d030      	beq.n	8002570 <_ZL8uart_isrPK6devicePv+0x4b8>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800250e:	3701      	adds	r7, #1
 8002510:	3209      	adds	r2, #9
 8002512:	e7f0      	b.n	80024f6 <_ZL8uart_isrPK6devicePv+0x43e>
	if (i == signing_streams->num_signing_streams) {
 8002514:	d12c      	bne.n	8002570 <_ZL8uart_isrPK6devicePv+0x4b8>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8002516:	2b0f      	cmp	r3, #15
 8002518:	d83e      	bhi.n	8002598 <_ZL8uart_isrPK6devicePv+0x4e0>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 800251a:	9a04      	ldr	r2, [sp, #16]
 800251c:	493e      	ldr	r1, [pc, #248]	; (8002618 <_ZL8uart_isrPK6devicePv+0x560>)
 800251e:	eb12 0e01 	adds.w	lr, r2, r1
 8002522:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
 8002526:	9a05      	ldr	r2, [sp, #20]
 8002528:	f142 0200 	adc.w	r2, r2, #0
 800252c:	4586      	cmp	lr, r0
 800252e:	418a      	sbcs	r2, r1
 8002530:	d332      	bcc.n	8002598 <_ZL8uart_isrPK6devicePv+0x4e0>
		signing_streams->stream[i].sysid = msg->sysid;
 8002532:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
 8002536:	4452      	add	r2, sl
		signing_streams->num_signing_streams++;
 8002538:	3301      	adds	r3, #1
		signing_streams->stream[i].sysid = msg->sysid;
 800253a:	f882 c003 	strb.w	ip, [r2, #3]
		signing_streams->stream[i].compid = msg->compid;
 800253e:	7a21      	ldrb	r1, [r4, #8]
 8002540:	7111      	strb	r1, [r2, #4]
		signing_streams->stream[i].link_id = link_id;
 8002542:	f882 b002 	strb.w	fp, [r2, #2]
		signing_streams->num_signing_streams++;
 8002546:	f8aa 3000 	strh.w	r3, [sl]
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 800254a:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 800254e:	1d78      	adds	r0, r7, #5
 8002550:	4930      	ldr	r1, [pc, #192]	; (8002614 <_ZL8uart_isrPK6devicePv+0x55c>)
 8002552:	2206      	movs	r2, #6
 8002554:	4450      	add	r0, sl
 8002556:	f00b f8bf 	bl	800d6d8 <memcpy>
	if (tstamp.t64 > signing->timestamp) {
 800255a:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 800255e:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 8002562:	4281      	cmp	r1, r0
 8002564:	419a      	sbcs	r2, r3
 8002566:	d201      	bcs.n	800256c <_ZL8uart_isrPK6devicePv+0x4b4>
		signing->timestamp = tstamp.t64;
 8002568:	e9c9 0302 	strd	r0, r3, [r9, #8]
				status->msg_received = MAVLINK_FRAMING_OK;
 800256c:	2301      	movs	r3, #1
 800256e:	e022      	b.n	80025b6 <_ZL8uart_isrPK6devicePv+0x4fe>
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8002570:	eb07 01c7 	add.w	r1, r7, r7, lsl #3
		last_tstamp.t64 = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	2200      	movs	r2, #0
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8002578:	3105      	adds	r1, #5
		last_tstamp.t64 = 0;
 800257a:	e9cd 2306 	strd	r2, r3, [sp, #24]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 800257e:	4451      	add	r1, sl
 8002580:	2206      	movs	r2, #6
 8002582:	a806      	add	r0, sp, #24
 8002584:	f00b f8a8 	bl	800d6d8 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8002588:	9b04      	ldr	r3, [sp, #16]
 800258a:	9a06      	ldr	r2, [sp, #24]
 800258c:	429a      	cmp	r2, r3
 800258e:	9b05      	ldr	r3, [sp, #20]
 8002590:	9a07      	ldr	r2, [sp, #28]
 8002592:	eb72 0303 	sbcs.w	r3, r2, r3
 8002596:	d3d8      	bcc.n	800254a <_ZL8uart_isrPK6devicePv+0x492>
			   	(status->signing->accept_unsigned_callback &&
 8002598:	692b      	ldr	r3, [r5, #16]
 800259a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			if (!sig_ok &&
 800259c:	b152      	cbz	r2, 80025b4 <_ZL8uart_isrPK6devicePv+0x4fc>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800259e:	7aa1      	ldrb	r1, [r4, #10]
 80025a0:	7a63      	ldrb	r3, [r4, #9]
 80025a2:	4810      	ldr	r0, [pc, #64]	; (80025e4 <_ZL8uart_isrPK6devicePv+0x52c>)
 80025a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025a8:	7ae1      	ldrb	r1, [r4, #11]
 80025aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80025ae:	4790      	blx	r2
			   	(status->signing->accept_unsigned_callback &&
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d1db      	bne.n	800256c <_ZL8uart_isrPK6devicePv+0x4b4>
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80025b4:	2303      	movs	r3, #3
 80025b6:	702b      	strb	r3, [r5, #0]
 80025b8:	e728      	b.n	800240c <_ZL8uart_isrPK6devicePv+0x354>
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 80025ba:	2903      	cmp	r1, #3
 80025bc:	f43f ae17 	beq.w	80021ee <_ZL8uart_isrPK6devicePv+0x136>
			if (mavlink_parse_char(MAVLINK_MAIN_CHANNEL, c, &mavlink_msg, &mavlink_status)) {
 80025c0:	2900      	cmp	r1, #0
 80025c2:	f43f ad7d 	beq.w	80020c0 <_ZL8uart_isrPK6devicePv+0x8>
				handle_message(mavlink_msg);
 80025c6:	f007 fd92 	bl	800a0ee <_Z14handle_messageR17__mavlink_message>
 80025ca:	e579      	b.n	80020c0 <_ZL8uart_isrPK6devicePv+0x8>
				uart_tx_ptr = uart_tx_buf;
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <_ZL8uart_isrPK6devicePv+0x564>)
 80025ce:	6033      	str	r3, [r6, #0]
				uart_irq_tx_disable(uart_dev);
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <_ZL8uart_isrPK6devicePv+0x568>)
 80025d2:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
 80025d4:	f007 fccc 	bl	8009f70 <z_impl_uart_irq_tx_disable>
}
 80025d8:	e572      	b.n	80020c0 <_ZL8uart_isrPK6devicePv+0x8>
 80025da:	bf00      	nop
 80025dc:	2000225a 	.word	0x2000225a
 80025e0:	200026ee 	.word	0x200026ee
 80025e4:	20001a44 	.word	0x20001a44
 80025e8:	6a09e667 	.word	0x6a09e667
 80025ec:	bb67ae85 	.word	0xbb67ae85
 80025f0:	3c6ef372 	.word	0x3c6ef372
 80025f4:	510e527f 	.word	0x510e527f
 80025f8:	a54ff53a 	.word	0xa54ff53a
 80025fc:	9b05688c 	.word	0x9b05688c
 8002600:	1f83d9ab 	.word	0x1f83d9ab
 8002604:	2000225c 	.word	0x2000225c
 8002608:	2000236e 	.word	0x2000236e
 800260c:	20002370 	.word	0x20002370
 8002610:	20002377 	.word	0x20002377
 8002614:	20002371 	.word	0x20002371
 8002618:	005b8d80 	.word	0x005b8d80
 800261c:	20002142 	.word	0x20002142
 8002620:	20001a40 	.word	0x20001a40

08002624 <_Z23mavlink_send_uart_bytesPKhi>:
	uart_irq_callback_set(uart_dev, uart_isr);
	uart_irq_rx_enable(uart_dev);
}

void mavlink_send_uart_bytes(const uint8_t *ch, int length)
{
 8002624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while(uart_tx_ctr > 0) {
 8002628:	4e0e      	ldr	r6, [pc, #56]	; (8002664 <_Z23mavlink_send_uart_bytesPKhi+0x40>)
{
 800262a:	4605      	mov	r5, r0
 800262c:	460c      	mov	r4, r1
	while(uart_tx_ctr > 0) {
 800262e:	8833      	ldrh	r3, [r6, #0]
 8002630:	b123      	cbz	r3, 800263c <_Z23mavlink_send_uart_bytesPKhi+0x18>
	return z_impl_k_sleep(timeout);
 8002632:	2100      	movs	r1, #0
 8002634:	2032      	movs	r0, #50	; 0x32
 8002636:	f006 fcf3 	bl	8009020 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 800263a:	e7f8      	b.n	800262e <_Z23mavlink_send_uart_bytesPKhi+0xa>
		// another message being processed
		// let's wait for 5 milliseconds as sending a DISTANCE_SENSOR message at 115200 baudrate
		// should take around 4.43 milliseconds
		k_msleep(5);
	}
	memcpy(uart_tx_buf, ch, length);
 800263c:	4f0a      	ldr	r7, [pc, #40]	; (8002668 <_Z23mavlink_send_uart_bytesPKhi+0x44>)
 800263e:	4622      	mov	r2, r4
 8002640:	4629      	mov	r1, r5
 8002642:	4638      	mov	r0, r7
 8002644:	f00b f848 	bl	800d6d8 <memcpy>
	uart_tx_ptr = uart_tx_buf;
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <_Z23mavlink_send_uart_bytesPKhi+0x48>)
	uart_tx_ctr = length;
 800264a:	8034      	strh	r4, [r6, #0]
	uart_tx_ptr = uart_tx_buf;
 800264c:	601f      	str	r7, [r3, #0]
	uart_irq_tx_enable(uart_dev);
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <_Z23mavlink_send_uart_bytesPKhi+0x4c>)
 8002650:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
 8002652:	6883      	ldr	r3, [r0, #8]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	b113      	cbz	r3, 800265e <_Z23mavlink_send_uart_bytesPKhi+0x3a>
}
 8002658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		api->irq_tx_enable(dev);
 800265c:	4718      	bx	r3
 800265e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002662:	bf00      	nop
 8002664:	20002140 	.word	0x20002140
 8002668:	20002142 	.word	0x20002142
 800266c:	20000000 	.word	0x20000000
 8002670:	20001a40 	.word	0x20001a40

08002674 <_Z20send_named_value_intPKci>:

void send_named_value_int(const char* name, int32_t value) {
 8002674:	b530      	push	{r4, r5, lr}
 8002676:	b0d7      	sub	sp, #348	; 0x15c
 8002678:	4605      	mov	r5, r0
 800267a:	460c      	mov	r4, r1
	uint8_t send_buf[30];
	mavlink_message_t mav_msg;
	mavlink_named_value_int_t msg = {};
 800267c:	2214      	movs	r2, #20
 800267e:	2100      	movs	r1, #0
 8002680:	4668      	mov	r0, sp
 8002682:	f00b f851 	bl	800d728 <memset>
	return z_impl_k_uptime_ticks();
 8002686:	f00a fda4 	bl	800d1d2 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / (from_hz / to_hz);
 800268a:	220a      	movs	r2, #10
 800268c:	2300      	movs	r3, #0
 800268e:	f7fe fa0d 	bl	8000aac <__aeabi_uldivmod>
static inline int64_t k_uptime_delta(int64_t *reftime)
{
	int64_t uptime, delta;

	uptime = k_uptime_get();
	delta = uptime - *reftime;
 8002692:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <_Z20send_named_value_intPKci+0x90>)
 8002694:	6813      	ldr	r3, [r2, #0]
	*reftime = uptime;
 8002696:	e9c2 0100 	strd	r0, r1, [r2]
	delta = uptime - *reftime;
 800269a:	1ac3      	subs	r3, r0, r3
	msg.time_boot_ms = k_uptime_delta(&time_stamp);
	int len = strlen(name);
 800269c:	4628      	mov	r0, r5
	msg.time_boot_ms = k_uptime_delta(&time_stamp);
 800269e:	9300      	str	r3, [sp, #0]
	int len = strlen(name);
 80026a0:	f7fe fb94 	bl	8000dcc <strlen>
	if (len > 10) len = 10;
	memcpy(msg.name, name, len);
 80026a4:	280a      	cmp	r0, #10
 80026a6:	4602      	mov	r2, r0
 80026a8:	4629      	mov	r1, r5
 80026aa:	bfa8      	it	ge
 80026ac:	220a      	movge	r2, #10
 80026ae:	a802      	add	r0, sp, #8
 80026b0:	f00b f812 	bl	800d6d8 <memcpy>
	msg.value = value;
	mavlink_msg_named_value_int_encode(OUR_ID, UWB_COMPONENT_ID, &mav_msg, &msg);
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <_Z20send_named_value_intPKci+0x94>)
	msg.value = value;
 80026b6:	9401      	str	r4, [sp, #4]
	mavlink_msg_named_value_int_encode(OUR_ID, UWB_COMPONENT_ID, &mav_msg, &msg);
 80026b8:	781d      	ldrb	r5, [r3, #0]
    _mav_put_int32_t(buf, 4, value);
    _mav_put_char_array(buf, 8, name, 10);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#else
    mavlink_named_value_int_t packet;
    packet.time_boot_ms = time_boot_ms;
 80026ba:	9b00      	ldr	r3, [sp, #0]
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
	if (src == NULL) {
		memset(dest, 0, n);
	} else {
		memcpy(dest, src, n);
 80026bc:	a902      	add	r1, sp, #8
 80026be:	220a      	movs	r2, #10
 80026c0:	a807      	add	r0, sp, #28
    packet.value = value;
 80026c2:	e9cd 3405 	strd	r3, r4, [sp, #20]
 80026c6:	f00b f807 	bl	800d6d8 <memcpy>
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
 80026ca:	a905      	add	r1, sp, #20
 80026cc:	2212      	movs	r2, #18
 80026ce:	a810      	add	r0, sp, #64	; 0x40
 80026d0:	f00b f802 	bl	800d6d8 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_NAMED_VALUE_INT;
 80026d4:	f06f 0203 	mvn.w	r2, #3
 80026d8:	2300      	movs	r3, #0
 80026da:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 80026de:	4629      	mov	r1, r5
 80026e0:	222c      	movs	r2, #44	; 0x2c
 80026e2:	a80d      	add	r0, sp, #52	; 0x34
 80026e4:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 80026e8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80026ec:	f7ff fb9e 	bl	8001e2c <mavlink_finalize_message_buffer.constprop.0.isra.0>
	int n = mavlink_msg_to_send_buffer(send_buf, &mav_msg);
 80026f0:	a90d      	add	r1, sp, #52	; 0x34
 80026f2:	a805      	add	r0, sp, #20
 80026f4:	f007 fc61 	bl	8009fba <mavlink_msg_to_send_buffer>
 80026f8:	4601      	mov	r1, r0
	mavlink_send_uart_bytes(send_buf, n);
 80026fa:	a805      	add	r0, sp, #20
 80026fc:	f7ff ff92 	bl	8002624 <_Z23mavlink_send_uart_bytesPKhi>
}
 8002700:	b057      	add	sp, #348	; 0x15c
 8002702:	bd30      	pop	{r4, r5, pc}
 8002704:	20000500 	.word	0x20000500
 8002708:	20002259 	.word	0x20002259

0800270c <_Z32distance_calculator_thread_entryv>:
		} */
		k_timer_status_sync(&timer);
	}
}

void distance_calculator_thread_entry(void) {
 800270c:	b5f0      	push	{r4, r5, r6, r7, lr}
	coords[THEIR_ID].latitude = 53.541350;
	coords[THEIR_ID].longitude = 9.985102;
	coords[THEIR_ID].altitude = 10.0;
	struct k_timer timer;

	k_timer_init(&timer, NULL, NULL);
 800270e:	2200      	movs	r2, #0
void distance_calculator_thread_entry(void) {
 8002710:	b091      	sub	sp, #68	; 0x44
	k_timer_init(&timer, NULL, NULL);
 8002712:	4611      	mov	r1, r2
 8002714:	a802      	add	r0, sp, #8
 8002716:	f00a fd8c 	bl	800d232 <k_timer_init>
	return z_impl_k_queue_get(queue, timeout);
 800271a:	4d0f      	ldr	r5, [pc, #60]	; (8002758 <_Z32distance_calculator_thread_entryv+0x4c>)
 800271c:	2600      	movs	r6, #0
 800271e:	2700      	movs	r7, #0
	z_impl_k_timer_start(timer, duration, period);
 8002720:	f241 3288 	movw	r2, #5000	; 0x1388
 8002724:	e9cd 6700 	strd	r6, r7, [sp]
 8002728:	2300      	movs	r3, #0
 800272a:	a802      	add	r0, sp, #8
 800272c:	f006 fea2 	bl	8009474 <z_impl_k_timer_start>
	return z_impl_k_queue_get(queue, timeout);
 8002730:	2200      	movs	r2, #0
 8002732:	2300      	movs	r3, #0
 8002734:	4628      	mov	r0, r5
 8002736:	f006 f901 	bl	800893c <z_impl_k_queue_get>
	struct named_values* new_named_value;
	while (1) {
		bool new_data = false;
		// we publish distances twice a second
		k_timer_start(&timer, K_MSEC(500), K_NO_WAIT);
		while((new_named_value = reinterpret_cast<struct named_values*>(k_fifo_get(&named_values_fifo, K_NO_WAIT)))) {
 800273a:	4604      	mov	r4, r0
 800273c:	b138      	cbz	r0, 800274e <_Z32distance_calculator_thread_entryv+0x42>
			send_named_value_int(new_named_value->name, new_named_value->value);
 800273e:	6901      	ldr	r1, [r0, #16]
 8002740:	3004      	adds	r0, #4
 8002742:	f7ff ff97 	bl	8002674 <_Z20send_named_value_intPKci>
			k_free(new_named_value);
 8002746:	4620      	mov	r0, r4
 8002748:	f00a ff13 	bl	800d572 <k_free>
		while((new_named_value = reinterpret_cast<struct named_values*>(k_fifo_get(&named_values_fifo, K_NO_WAIT)))) {
 800274c:	e7f0      	b.n	8002730 <_Z32distance_calculator_thread_entryv+0x24>
	return z_impl_k_timer_status_sync(timer);
 800274e:	a802      	add	r0, sp, #8
 8002750:	f006 fede 	bl	8009510 <z_impl_k_timer_status_sync>
 8002754:	e7e4      	b.n	8002720 <_Z32distance_calculator_thread_entryv+0x14>
 8002756:	bf00      	nop
 8002758:	200003e8 	.word	0x200003e8

0800275c <_Z23read_range_thread_entryv>:
void read_range_thread_entry(void) {
 800275c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275e:	b093      	sub	sp, #76	; 0x4c
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8002760:	4821      	ldr	r0, [pc, #132]	; (80027e8 <_Z23read_range_thread_entryv+0x8c>)
 8002762:	f005 fc15 	bl	8007f90 <z_impl_device_get_binding>
	if (!i2c_dev) {
 8002766:	4604      	mov	r4, r0
 8002768:	b928      	cbnz	r0, 8002776 <_Z23read_range_thread_entryv+0x1a>
		printk("I2C device driver not found\n");
 800276a:	4820      	ldr	r0, [pc, #128]	; (80027ec <_Z23read_range_thread_entryv+0x90>)
}
 800276c:	b013      	add	sp, #76	; 0x4c
 800276e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		printk("I2C device driver not found\n");
 8002772:	f007 bd11 	b.w	800a198 <printk>
		printk("I2C device driver found\n");
 8002776:	481e      	ldr	r0, [pc, #120]	; (80027f0 <_Z23read_range_thread_entryv+0x94>)
		queue_named_value("whoami", pozyx.who_am_i());
 8002778:	4d1e      	ldr	r5, [pc, #120]	; (80027f4 <_Z23read_range_thread_entryv+0x98>)
		printk("I2C device driver found\n");
 800277a:	f007 fd0d 	bl	800a198 <printk>
	queue_named_value("test", 1);
 800277e:	481e      	ldr	r0, [pc, #120]	; (80027f8 <_Z23read_range_thread_entryv+0x9c>)
 8002780:	2101      	movs	r1, #1
 8002782:	f7ff fc75 	bl	8002070 <_Z17queue_named_valuePKci>
	k_timer_init(&timer, NULL, NULL);
 8002786:	2200      	movs	r2, #0
		i2c_addr(PozyxConstants::I2C_ADDRESS)
 8002788:	234b      	movs	r3, #75	; 0x4b
	k_timer_init(&timer, NULL, NULL);
 800278a:	4611      	mov	r1, r2
 800278c:	a804      	add	r0, sp, #16
		i2c_addr(PozyxConstants::I2C_ADDRESS)
 800278e:	9402      	str	r4, [sp, #8]
 8002790:	f8ad 300c 	strh.w	r3, [sp, #12]
	k_timer_init(&timer, NULL, NULL);
 8002794:	f00a fd4d 	bl	800d232 <k_timer_init>
		queue_named_value("firmware", pozyx.firmware_version());
 8002798:	4c18      	ldr	r4, [pc, #96]	; (80027fc <_Z23read_range_thread_entryv+0xa0>)
 800279a:	2600      	movs	r6, #0
 800279c:	2700      	movs	r7, #0
	z_impl_k_timer_start(timer, duration, period);
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	2300      	movs	r3, #0
 80027a4:	a804      	add	r0, sp, #16
 80027a6:	e9cd 6700 	strd	r6, r7, [sp]
 80027aa:	f006 fe63 	bl	8009474 <z_impl_k_timer_start>
		return read_byte(PozyxRegisters::WHO_AM_I);
 80027ae:	2100      	movs	r1, #0
 80027b0:	a802      	add	r0, sp, #8
 80027b2:	f007 fcbd 	bl	800a130 <_ZN8PozyxDev9read_byteEh>
 80027b6:	4601      	mov	r1, r0
		queue_named_value("whoami", pozyx.who_am_i());
 80027b8:	4628      	mov	r0, r5
 80027ba:	f7ff fc59 	bl	8002070 <_Z17queue_named_valuePKci>
		return read_byte(PozyxRegisters::FIRMWARE_VERSION);
 80027be:	2101      	movs	r1, #1
 80027c0:	a802      	add	r0, sp, #8
 80027c2:	f007 fcb5 	bl	800a130 <_ZN8PozyxDev9read_byteEh>
 80027c6:	4601      	mov	r1, r0
		queue_named_value("firmware", pozyx.firmware_version());
 80027c8:	4620      	mov	r0, r4
 80027ca:	f7ff fc51 	bl	8002070 <_Z17queue_named_valuePKci>
		return read_byte(PozyxRegisters::HARDWARE_VERSION);
 80027ce:	2102      	movs	r1, #2
 80027d0:	a802      	add	r0, sp, #8
 80027d2:	f007 fcad 	bl	800a130 <_ZN8PozyxDev9read_byteEh>
 80027d6:	4601      	mov	r1, r0
		queue_named_value("hardware", pozyx.hardware_version());
 80027d8:	4809      	ldr	r0, [pc, #36]	; (8002800 <_Z23read_range_thread_entryv+0xa4>)
 80027da:	f7ff fc49 	bl	8002070 <_Z17queue_named_valuePKci>
	return z_impl_k_timer_status_sync(timer);
 80027de:	a804      	add	r0, sp, #16
 80027e0:	f006 fe96 	bl	8009510 <z_impl_k_timer_status_sync>
 80027e4:	e7db      	b.n	800279e <_Z23read_range_thread_entryv+0x42>
 80027e6:	bf00      	nop
 80027e8:	0800f3de 	.word	0x0800f3de
 80027ec:	0800f3e4 	.word	0x0800f3e4
 80027f0:	0800f401 	.word	0x0800f401
 80027f4:	0800f41f 	.word	0x0800f41f
 80027f8:	0800f41a 	.word	0x0800f41a
 80027fc:	0800f426 	.word	0x0800f426
 8002800:	0800f42f 	.word	0x0800f42f

08002804 <main>:
	// radio_api = (struct ieee802154_radio_api *)ieee802154_dev->api;
	// get_mac(ieee802154_dev);
}

void main(void)
{
 8002804:	b510      	push	{r4, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
	return z_impl_k_uptime_ticks();
 8002808:	f00a fce3 	bl	800d1d2 <z_impl_k_uptime_ticks>
 800280c:	220a      	movs	r2, #10
 800280e:	2300      	movs	r3, #0
 8002810:	f7fe f94c 	bl	8000aac <__aeabi_uldivmod>
	time_stamp = k_uptime_get();
 8002814:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <main+0x9c>)
 8002816:	e9c3 0100 	strd	r0, r1, [r3]
 800281a:	4822      	ldr	r0, [pc, #136]	; (80028a4 <main+0xa0>)
	uart_dev = device_get_binding("UART_3");
 800281c:	4c22      	ldr	r4, [pc, #136]	; (80028a8 <main+0xa4>)
 800281e:	f005 fbb7 	bl	8007f90 <z_impl_device_get_binding>
 8002822:	6020      	str	r0, [r4, #0]
	if (api->config_get == NULL) {
 8002824:	6883      	ldr	r3, [r0, #8]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	b10b      	cbz	r3, 800282e <main+0x2a>
	return api->config_get(dev, cfg);
 800282a:	a908      	add	r1, sp, #32
 800282c:	4798      	blx	r3
	cfg.baudrate = 115200;
 800282e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	uart_configure(uart_dev, &cfg);
 8002832:	6820      	ldr	r0, [r4, #0]
	cfg.baudrate = 115200;
 8002834:	9308      	str	r3, [sp, #32]
	if (api->configure == NULL) {
 8002836:	6883      	ldr	r3, [r0, #8]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	b10b      	cbz	r3, 8002840 <main+0x3c>
	return api->configure(dev, cfg);
 800283c:	a908      	add	r1, sp, #32
 800283e:	4798      	blx	r3
	uart_irq_rx_disable(uart_dev);
 8002840:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_disable != NULL) {
 8002842:	6883      	ldr	r3, [r0, #8]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	b103      	cbz	r3, 800284a <main+0x46>
		api->irq_rx_disable(dev);
 8002848:	4798      	blx	r3
	uart_irq_tx_disable(uart_dev);
 800284a:	6820      	ldr	r0, [r4, #0]
	z_impl_uart_irq_tx_disable(dev);
 800284c:	f007 fb90 	bl	8009f70 <z_impl_uart_irq_tx_disable>
	uart_irq_callback_set(uart_dev, uart_isr);
 8002850:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 8002852:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8002854:	b123      	cbz	r3, 8002860 <main+0x5c>
 8002856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002858:	b113      	cbz	r3, 8002860 <main+0x5c>
		api->irq_callback_set(dev, cb, user_data);
 800285a:	4914      	ldr	r1, [pc, #80]	; (80028ac <main+0xa8>)
 800285c:	2200      	movs	r2, #0
 800285e:	4798      	blx	r3
	uart_irq_rx_enable(uart_dev);
 8002860:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable != NULL) {
 8002862:	6883      	ldr	r3, [r0, #8]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	b103      	cbz	r3, 800286a <main+0x66>
		api->irq_rx_enable(dev);
 8002868:	4798      	blx	r3
	uart_init();
	// init_ieee802154();

	printk("Creating threads\n");
 800286a:	4811      	ldr	r0, [pc, #68]	; (80028b0 <main+0xac>)
 800286c:	f007 fc94 	bl	800a198 <printk>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8002870:	2200      	movs	r2, #0
 8002872:	2300      	movs	r3, #0
 8002874:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002878:	2300      	movs	r3, #0
 800287a:	f06f 0207 	mvn.w	r2, #7
 800287e:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8002882:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	490a      	ldr	r1, [pc, #40]	; (80028b4 <main+0xb0>)
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <main+0xb4>)
 800288c:	480b      	ldr	r0, [pc, #44]	; (80028bc <main+0xb8>)
 800288e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002892:	f005 fe6b 	bl	800856c <z_impl_k_thread_create>
	while (1) {
		// doing nothing here
		k_timer_start(&timer, K_MSEC(1000), K_NO_WAIT);
		k_timer_status_sync(&timer);
	}*/
}
 8002896:	b00a      	add	sp, #40	; 0x28
 8002898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	read_range_thread_entry();
 800289c:	f7ff bf5e 	b.w	800275c <_Z23read_range_thread_entryv>
 80028a0:	20000500 	.word	0x20000500
 80028a4:	0800f438 	.word	0x0800f438
 80028a8:	20001a40 	.word	0x20001a40
 80028ac:	080020b9 	.word	0x080020b9
 80028b0:	0800f43f 	.word	0x0800f43f
 80028b4:	20002900 	.word	0x20002900
 80028b8:	0800270d 	.word	0x0800270d
 80028bc:	20000408 	.word	0x20000408

080028c0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80028c0:	680b      	ldr	r3, [r1, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80028c6:	4b01      	ldr	r3, [pc, #4]	; (80028cc <char_out+0xc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4718      	bx	r3
 80028cc:	20000004 	.word	0x20000004

080028d0 <__printk_hook_install>:
	_char_out = fn;
 80028d0:	4b01      	ldr	r3, [pc, #4]	; (80028d8 <__printk_hook_install+0x8>)
 80028d2:	6018      	str	r0, [r3, #0]
}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000004 	.word	0x20000004

080028dc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 80028dc:	b507      	push	{r0, r1, r2, lr}
 80028de:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 80028e0:	2100      	movs	r1, #0
{
 80028e2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 80028e4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 80028e6:	4803      	ldr	r0, [pc, #12]	; (80028f4 <vprintk+0x18>)
 80028e8:	a901      	add	r1, sp, #4
 80028ea:	f7fe fac1 	bl	8000e70 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 80028ee:	b003      	add	sp, #12
 80028f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80028f4:	080028c1 	.word	0x080028c1

080028f8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80028f8:	b530      	push	{r4, r5, lr}
 80028fa:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 80028fc:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
 8002900:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8002902:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
 8002904:	a901      	add	r1, sp, #4
 8002906:	4805      	ldr	r0, [pc, #20]	; (800291c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
 8002908:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
 800290a:	f7fe fab1 	bl	8000e70 <cbvprintf>

	if (ctx.count < ctx.max) {
 800290e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8002912:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 8002914:	bfb8      	it	lt
 8002916:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 8002918:	b005      	add	sp, #20
 800291a:	bd30      	pop	{r4, r5, pc}
 800291c:	0800a173 	.word	0x0800a173

08002920 <extract_decimal>:
{
 8002920:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (isdigit((int)(unsigned char)*sp)) {
 8002922:	4e09      	ldr	r6, [pc, #36]	; (8002948 <extract_decimal+0x28>)
 8002924:	6801      	ldr	r1, [r0, #0]
{
 8002926:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
 8002928:	270a      	movs	r7, #10
	size_t val = 0;
 800292a:	2000      	movs	r0, #0
 800292c:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
 800292e:	3101      	adds	r1, #1
 8002930:	7823      	ldrb	r3, [r4, #0]
 8002932:	5d9d      	ldrb	r5, [r3, r6]
 8002934:	076d      	lsls	r5, r5, #29
 8002936:	d401      	bmi.n	800293c <extract_decimal+0x1c>
	*str = sp;
 8002938:	6014      	str	r4, [r2, #0]
}
 800293a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 800293c:	fb07 3300 	mla	r3, r7, r0, r3
 8002940:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002944:	e7f2      	b.n	800292c <extract_decimal+0xc>
 8002946:	bf00      	nop
 8002948:	08010d02 	.word	0x08010d02

0800294c <encode_uint>:
{
 800294c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002950:	4615      	mov	r5, r2
 8002952:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8002954:	78d3      	ldrb	r3, [r2, #3]
 8002956:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <encode_uint+0x94>)
 8002958:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
 800295c:	2b6f      	cmp	r3, #111	; 0x6f
{
 800295e:	4680      	mov	r8, r0
 8002960:	460f      	mov	r7, r1
 8002962:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8002966:	d029      	beq.n	80029bc <encode_uint+0x70>
 8002968:	d824      	bhi.n	80029b4 <encode_uint+0x68>
		return 16;
 800296a:	2b58      	cmp	r3, #88	; 0x58
 800296c:	bf14      	ite	ne
 800296e:	260a      	movne	r6, #10
 8002970:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 8002972:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8002976:	4632      	mov	r2, r6
 8002978:	2300      	movs	r3, #0
 800297a:	4640      	mov	r0, r8
 800297c:	4639      	mov	r1, r7
 800297e:	f7fe f895 	bl	8000aac <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002982:	2a09      	cmp	r2, #9
 8002984:	b2d4      	uxtb	r4, r2
 8002986:	d81e      	bhi.n	80029c6 <encode_uint+0x7a>
 8002988:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 800298a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800298c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 800298e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002992:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8002996:	d301      	bcc.n	800299c <encode_uint+0x50>
 8002998:	45d1      	cmp	r9, sl
 800299a:	d811      	bhi.n	80029c0 <encode_uint+0x74>
	if (conv->flag_hash) {
 800299c:	782b      	ldrb	r3, [r5, #0]
 800299e:	069b      	lsls	r3, r3, #26
 80029a0:	d505      	bpl.n	80029ae <encode_uint+0x62>
		if (radix == 8) {
 80029a2:	2e08      	cmp	r6, #8
 80029a4:	d115      	bne.n	80029d2 <encode_uint+0x86>
			conv->altform_0 = true;
 80029a6:	78ab      	ldrb	r3, [r5, #2]
 80029a8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 80029ac:	70ab      	strb	r3, [r5, #2]
}
 80029ae:	4648      	mov	r0, r9
 80029b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 80029b4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 80029b8:	2b70      	cmp	r3, #112	; 0x70
 80029ba:	e7d7      	b.n	800296c <encode_uint+0x20>
	switch (specifier) {
 80029bc:	2608      	movs	r6, #8
 80029be:	e7d8      	b.n	8002972 <encode_uint+0x26>
		value /= radix;
 80029c0:	4680      	mov	r8, r0
 80029c2:	460f      	mov	r7, r1
 80029c4:	e7d7      	b.n	8002976 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80029c6:	f1bb 0f01 	cmp.w	fp, #1
 80029ca:	bf0c      	ite	eq
 80029cc:	3437      	addeq	r4, #55	; 0x37
 80029ce:	3457      	addne	r4, #87	; 0x57
 80029d0:	e7db      	b.n	800298a <encode_uint+0x3e>
		} else if (radix == 16) {
 80029d2:	2e10      	cmp	r6, #16
 80029d4:	d1eb      	bne.n	80029ae <encode_uint+0x62>
			conv->altform_0c = true;
 80029d6:	78ab      	ldrb	r3, [r5, #2]
 80029d8:	f043 0310 	orr.w	r3, r3, #16
 80029dc:	e7e6      	b.n	80029ac <encode_uint+0x60>
 80029de:	bf00      	nop
 80029e0:	08010d02 	.word	0x08010d02

080029e4 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
 80029e4:	070b      	lsls	r3, r1, #28
 80029e6:	d506      	bpl.n	80029f6 <foldcase+0x12>
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <foldcase+0x14>)
 80029ea:	5cc3      	ldrb	r3, [r0, r3]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b01      	cmp	r3, #1
        return tolower(ch);
 80029f2:	bf08      	it	eq
 80029f4:	3020      	addeq	r0, #32
    return ch;
}
 80029f6:	4770      	bx	lr
 80029f8:	08010d02 	.word	0x08010d02

080029fc <st_stm32f4_init>:
	__asm__ volatile(
 80029fc:	f04f 0210 	mov.w	r2, #16
 8002a00:	f3ef 8311 	mrs	r3, BASEPRI
 8002a04:	f382 8811 	msr	BASEPRI, r2
 8002a08:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8002a14:	4b02      	ldr	r3, [pc, #8]	; (8002a20 <st_stm32f4_init+0x24>)
 8002a16:	4a03      	ldr	r2, [pc, #12]	; (8002a24 <st_stm32f4_init+0x28>)
 8002a18:	601a      	str	r2, [r3, #0]

	return 0;
}
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000144 	.word	0x20000144
 8002a24:	00f42400 	.word	0x00f42400

08002a28 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8002a28:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8002a2a:	4910      	ldr	r1, [pc, #64]	; (8002a6c <enable_logger+0x44>)
 8002a2c:	4810      	ldr	r0, [pc, #64]	; (8002a70 <enable_logger+0x48>)
{
 8002a2e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8002a30:	2200      	movs	r2, #0
 8002a32:	f00a fbfe 	bl	800d232 <k_timer_init>
 8002a36:	4d0f      	ldr	r5, [pc, #60]	; (8002a74 <enable_logger+0x4c>)
 8002a38:	490f      	ldr	r1, [pc, #60]	; (8002a78 <enable_logger+0x50>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002a42:	2400      	movs	r4, #0
 8002a44:	230e      	movs	r3, #14
 8002a46:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8002a4a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <enable_logger+0x54>)
 8002a50:	9400      	str	r4, [sp, #0]
 8002a52:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a56:	4628      	mov	r0, r5
 8002a58:	f005 fd88 	bl	800856c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8002a5c:	4908      	ldr	r1, [pc, #32]	; (8002a80 <enable_logger+0x58>)
 8002a5e:	4628      	mov	r0, r5
 8002a60:	f005 fcd4 	bl	800840c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8002a64:	4620      	mov	r0, r4
 8002a66:	b009      	add	sp, #36	; 0x24
 8002a68:	bd30      	pop	{r4, r5, pc}
 8002a6a:	bf00      	nop
 8002a6c:	08002a85 	.word	0x08002a85
 8002a70:	20000508 	.word	0x20000508
 8002a74:	20000540 	.word	0x20000540
 8002a78:	20003980 	.word	0x20003980
 8002a7c:	08002fcd 	.word	0x08002fcd
 8002a80:	0800f7ca 	.word	0x0800f7ca

08002a84 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
 8002a84:	4801      	ldr	r0, [pc, #4]	; (8002a8c <log_process_thread_timer_expiry_fn+0x8>)
 8002a86:	f005 bf8b 	b.w	80089a0 <z_impl_k_sem_give>
 8002a8a:	bf00      	nop
 8002a8c:	200003b4 	.word	0x200003b4

08002a90 <z_log_get_s_mask>:
{
 8002a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a92:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
 8002a94:	4e0f      	ldr	r6, [pc, #60]	; (8002ad4 <z_log_get_s_mask+0x44>)
	uint32_t mask = 0U;
 8002a96:	2000      	movs	r0, #0
	uint32_t arg = 0U;
 8002a98:	4603      	mov	r3, r0
	bool arm = false;
 8002a9a:	4602      	mov	r2, r0
				mask |= BIT(arg);
 8002a9c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
 8002a9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002aa2:	b10c      	cbz	r4, 8002aa8 <z_log_get_s_mask+0x18>
 8002aa4:	428b      	cmp	r3, r1
 8002aa6:	d300      	bcc.n	8002aaa <z_log_get_s_mask+0x1a>
}
 8002aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
 8002aaa:	2c25      	cmp	r4, #37	; 0x25
 8002aac:	d102      	bne.n	8002ab4 <z_log_get_s_mask+0x24>
			arm = !arm;
 8002aae:	f082 0201 	eor.w	r2, r2, #1
 8002ab2:	e7f4      	b.n	8002a9e <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
 8002ab4:	2a00      	cmp	r2, #0
 8002ab6:	d0f2      	beq.n	8002a9e <z_log_get_s_mask+0xe>
 8002ab8:	f814 c006 	ldrb.w	ip, [r4, r6]
 8002abc:	f01c 0f03 	tst.w	ip, #3
 8002ac0:	d0ed      	beq.n	8002a9e <z_log_get_s_mask+0xe>
			if (curr == 's') {
 8002ac2:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
 8002ac4:	bf04      	itt	eq
 8002ac6:	fa07 f203 	lsleq.w	r2, r7, r3
 8002aca:	4310      	orreq	r0, r2
			arg++;
 8002acc:	3301      	adds	r3, #1
			arm = false;
 8002ace:	2200      	movs	r2, #0
 8002ad0:	e7e5      	b.n	8002a9e <z_log_get_s_mask+0xe>
 8002ad2:	bf00      	nop
 8002ad4:	08010d02 	.word	0x08010d02

08002ad8 <log_core_init>:
{
 8002ad8:	b538      	push	{r3, r4, r5, lr}
	panic_mode = false;
 8002ada:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <log_core_init+0x58>)
		timestamp_func = default_lf_get_timestamp;
 8002adc:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <log_core_init+0x5c>)
 8002ade:	4d16      	ldr	r5, [pc, #88]	; (8002b38 <log_core_init+0x60>)
	panic_mode = false;
 8002ae0:	2400      	movs	r4, #0
 8002ae2:	701c      	strb	r4, [r3, #0]
		timestamp_func = default_lf_get_timestamp;
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <log_core_init+0x64>)
	log_output_timestamp_freq_set(freq);
 8002ae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		timestamp_func = default_lf_get_timestamp;
 8002aea:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8002aec:	f000 fd82 	bl	80035f4 <log_output_timestamp_freq_set>
		log_msg_pool_init();
 8002af0:	f000 fb30 	bl	8003154 <log_msg_pool_init>
		log_list_init(&list);
 8002af4:	4812      	ldr	r0, [pc, #72]	; (8002b40 <log_core_init+0x68>)
 8002af6:	f008 f858 	bl	800abaa <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8002afa:	2304      	movs	r3, #4
 8002afc:	2228      	movs	r2, #40	; 0x28
 8002afe:	4911      	ldr	r1, [pc, #68]	; (8002b44 <log_core_init+0x6c>)
 8002b00:	4811      	ldr	r0, [pc, #68]	; (8002b48 <log_core_init+0x70>)
 8002b02:	f00a f8ff 	bl	800cd04 <k_mem_slab_init>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8002b06:	4811      	ldr	r0, [pc, #68]	; (8002b4c <log_core_init+0x74>)
 8002b08:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <log_core_init+0x78>)
 8002b0a:	1a12      	subs	r2, r2, r0
 8002b0c:	08d2      	lsrs	r2, r2, #3
		for (int i = 0; i < log_sources_count(); i++) {
 8002b0e:	4623      	mov	r3, r4
	return __log_const_start[source_id].level;
 8002b10:	3004      	adds	r0, #4
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d100      	bne.n	8002b18 <log_core_init+0x40>
}
 8002b16:	bd38      	pop	{r3, r4, r5, pc}
			LOG_FILTER_SLOT_SET(filters,
 8002b18:	f810 1033 	ldrb.w	r1, [r0, r3, lsl #3]
 8002b1c:	682c      	ldr	r4, [r5, #0]
 8002b1e:	f001 0107 	and.w	r1, r1, #7
 8002b22:	f024 0407 	bic.w	r4, r4, #7
 8002b26:	4321      	orrs	r1, r4
 8002b28:	f845 1b04 	str.w	r1, [r5], #4
		for (int i = 0; i < log_sources_count(); i++) {
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	e7f0      	b.n	8002b12 <log_core_init+0x3a>
 8002b30:	20002812 	.word	0x20002812
 8002b34:	0800abe9 	.word	0x0800abe9
 8002b38:	2000033c 	.word	0x2000033c
 8002b3c:	20000008 	.word	0x20000008
 8002b40:	20001ac8 	.word	0x20001ac8
 8002b44:	20005820 	.word	0x20005820
 8002b48:	20001ad0 	.word	0x20001ad0
 8002b4c:	0800ddb8 	.word	0x0800ddb8
 8002b50:	0800de10 	.word	0x0800de10

08002b54 <get_msg>:
{
 8002b54:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002b56:	f04f 0310 	mov.w	r3, #16
 8002b5a:	f3ef 8411 	mrs	r4, BASEPRI
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
 8002b66:	4804      	ldr	r0, [pc, #16]	; (8002b78 <get_msg+0x24>)
 8002b68:	f008 f82f 	bl	800abca <log_list_head_get>
	__asm__ volatile(
 8002b6c:	f384 8811 	msr	BASEPRI, r4
 8002b70:	f3bf 8f6f 	isb	sy
}
 8002b74:	bd10      	pop	{r4, pc}
 8002b76:	bf00      	nop
 8002b78:	20001ac8 	.word	0x20001ac8

08002b7c <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <z_log_dropped+0x1c>)
 8002b7e:	f3bf 8f5b 	dmb	ish
 8002b82:	e853 2f00 	ldrex	r2, [r3]
 8002b86:	3201      	adds	r2, #1
 8002b88:	e843 2100 	strex	r1, r2, [r3]
 8002b8c:	2900      	cmp	r1, #0
 8002b8e:	d1f8      	bne.n	8002b82 <z_log_dropped+0x6>
 8002b90:	f3bf 8f5b 	dmb	ish
}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20001ac0 	.word	0x20001ac0

08002b9c <z_log_dropped_read_and_clear>:
}
 8002b9c:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <z_log_dropped_read_and_clear+0x1c>)
 8002ba0:	f3bf 8f5b 	dmb	ish
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	e853 0f00 	ldrex	r0, [r3]
 8002baa:	e843 2100 	strex	r1, r2, [r3]
 8002bae:	2900      	cmp	r1, #0
 8002bb0:	d1f9      	bne.n	8002ba6 <z_log_dropped_read_and_clear+0xa>
 8002bb2:	f3bf 8f5b 	dmb	ish
 8002bb6:	4770      	bx	lr
 8002bb8:	20001ac0 	.word	0x20001ac0

08002bbc <dropped_notify>:
{
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8002bbe:	f7ff ffed 	bl	8002b9c <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8002bc2:	4c0a      	ldr	r4, [pc, #40]	; (8002bec <dropped_notify+0x30>)
 8002bc4:	4d0a      	ldr	r5, [pc, #40]	; (8002bf0 <dropped_notify+0x34>)
 8002bc6:	1b2d      	subs	r5, r5, r4
 8002bc8:	4607      	mov	r7, r0
 8002bca:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8002bcc:	2600      	movs	r6, #0
 8002bce:	42ae      	cmp	r6, r5
 8002bd0:	db00      	blt.n	8002bd4 <dropped_notify+0x18>
}
 8002bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8002bd4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8002bd6:	795b      	ldrb	r3, [r3, #5]
 8002bd8:	b12b      	cbz	r3, 8002be6 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	b113      	cbz	r3, 8002be6 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
 8002be0:	4639      	mov	r1, r7
 8002be2:	4620      	mov	r0, r4
 8002be4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8002be6:	3601      	adds	r6, #1
 8002be8:	3410      	adds	r4, #16
 8002bea:	e7f0      	b.n	8002bce <dropped_notify+0x12>
 8002bec:	0800de10 	.word	0x0800de10
 8002bf0:	0800de20 	.word	0x0800de20

08002bf4 <log_source_name_get>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8002bf4:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <log_source_name_get+0x14>)
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <log_source_name_get+0x18>)
 8002bf8:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8002bfa:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 8002bfe:	bf34      	ite	cc
 8002c00:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
 8002c04:	2000      	movcs	r0, #0
}
 8002c06:	4770      	bx	lr
 8002c08:	0800ddb8 	.word	0x0800ddb8
 8002c0c:	0800de10 	.word	0x0800de10

08002c10 <z_impl_log_filter_set>:
{
 8002c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c14:	468a      	mov	sl, r1
 8002c16:	4616      	mov	r6, r2
 8002c18:	4698      	mov	r8, r3
		if (backend == NULL) {
 8002c1a:	b9c0      	cbnz	r0, 8002c4e <z_impl_log_filter_set+0x3e>
	return __log_backends_end - __log_backends_start;
 8002c1c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8002cb0 <z_impl_log_filter_set+0xa0>
 8002c20:	4f20      	ldr	r7, [pc, #128]	; (8002ca4 <z_impl_log_filter_set+0x94>)
 8002c22:	eba7 0709 	sub.w	r7, r7, r9
 8002c26:	113f      	asrs	r7, r7, #4
			for (int i = 0; i < log_backend_count_get(); i++) {
 8002c28:	4604      	mov	r4, r0
			uint32_t max = 0U;
 8002c2a:	4605      	mov	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
 8002c2c:	42bc      	cmp	r4, r7
 8002c2e:	db02      	blt.n	8002c36 <z_impl_log_filter_set+0x26>
}
 8002c30:	4628      	mov	r0, r5
 8002c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
 8002c36:	eb09 1004 	add.w	r0, r9, r4, lsl #4
 8002c3a:	4643      	mov	r3, r8
 8002c3c:	4632      	mov	r2, r6
 8002c3e:	4651      	mov	r1, sl
 8002c40:	f7ff ffe6 	bl	8002c10 <z_impl_log_filter_set>
				max = MAX(current, max);
 8002c44:	4285      	cmp	r5, r0
 8002c46:	bf38      	it	cc
 8002c48:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
 8002c4a:	3401      	adds	r4, #1
 8002c4c:	e7ee      	b.n	8002c2c <z_impl_log_filter_set+0x1c>
	return __log_const_start[source_id].level;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <z_impl_log_filter_set+0x98>)
			LOG_FILTER_SLOT_SET(filters,
 8002c50:	4c16      	ldr	r4, [pc, #88]	; (8002cac <z_impl_log_filter_set+0x9c>)
 8002c52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
 8002c56:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
 8002c58:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
 8002c5a:	791a      	ldrb	r2, [r3, #4]
 8002c5c:	2307      	movs	r3, #7
 8002c5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002c62:	fa03 f102 	lsl.w	r1, r3, r2
			level = MIN(level, max);
 8002c66:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
 8002c68:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
			level = MIN(level, max);
 8002c6c:	bf28      	it	cs
 8002c6e:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
 8002c70:	ea23 0301 	bic.w	r3, r3, r1
 8002c74:	f005 0107 	and.w	r1, r5, #7
 8002c78:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7c:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
 8002c7e:	2100      	movs	r1, #0
			LOG_FILTER_SLOT_SET(filters,
 8002c80:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
 8002c82:	fa23 f002 	lsr.w	r0, r3, r2
 8002c86:	f000 0007 	and.w	r0, r0, #7
 8002c8a:	4281      	cmp	r1, r0
 8002c8c:	f102 0203 	add.w	r2, r2, #3
 8002c90:	bf38      	it	cc
 8002c92:	4601      	movcc	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
 8002c94:	2a1e      	cmp	r2, #30
 8002c96:	d1f4      	bne.n	8002c82 <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
 8002c98:	f023 0307 	bic.w	r3, r3, #7
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
	return level;
 8002ca2:	e7c5      	b.n	8002c30 <z_impl_log_filter_set+0x20>
 8002ca4:	0800de20 	.word	0x0800de20
 8002ca8:	0800ddb8 	.word	0x0800ddb8
 8002cac:	2000033c 	.word	0x2000033c
 8002cb0:	0800de10 	.word	0x0800de10

08002cb4 <backend_filter_set>:
{
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8002cb6:	4c09      	ldr	r4, [pc, #36]	; (8002cdc <backend_filter_set+0x28>)
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <backend_filter_set+0x2c>)
 8002cba:	1ae4      	subs	r4, r4, r3
 8002cbc:	4606      	mov	r6, r0
 8002cbe:	460f      	mov	r7, r1
 8002cc0:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < log_sources_count(); i++) {
 8002cc2:	2500      	movs	r5, #0
 8002cc4:	42a5      	cmp	r5, r4
 8002cc6:	d100      	bne.n	8002cca <backend_filter_set+0x16>
}
 8002cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cca:	2100      	movs	r1, #0
 8002ccc:	b22a      	sxth	r2, r5
 8002cce:	463b      	mov	r3, r7
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	f7ff ff9d 	bl	8002c10 <z_impl_log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
 8002cd6:	3501      	adds	r5, #1
 8002cd8:	e7f4      	b.n	8002cc4 <backend_filter_set+0x10>
 8002cda:	bf00      	nop
 8002cdc:	0800de10 	.word	0x0800de10
 8002ce0:	0800ddb8 	.word	0x0800ddb8

08002ce4 <log_backend_enable>:
	id += backend - log_backend_get(0);
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <log_backend_enable+0x34>)
 8002ce6:	1ac3      	subs	r3, r0, r3
{
 8002ce8:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
 8002cea:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
 8002cec:	6846      	ldr	r6, [r0, #4]
{
 8002cee:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
 8002cf0:	3301      	adds	r3, #1
{
 8002cf2:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
 8002cf4:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	f7ff ffdc 	bl	8002cb4 <backend_filter_set>
	backend->cb->ctx = ctx;
 8002cfc:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8002cfe:	4c07      	ldr	r4, [pc, #28]	; (8002d1c <log_backend_enable+0x38>)
 8002d00:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
 8002d02:	2201      	movs	r2, #1
 8002d04:	715a      	strb	r2, [r3, #5]
 8002d06:	7823      	ldrb	r3, [r4, #0]
 8002d08:	b913      	cbnz	r3, 8002d10 <log_backend_enable+0x2c>
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <log_backend_enable+0x3c>)
 8002d0c:	f005 fe48 	bl	80089a0 <z_impl_k_sem_give>
	backend_attached = true;
 8002d10:	2301      	movs	r3, #1
 8002d12:	7023      	strb	r3, [r4, #0]
}
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
 8002d16:	bf00      	nop
 8002d18:	0800de10 	.word	0x0800de10
 8002d1c:	20002811 	.word	0x20002811
 8002d20:	200003b4 	.word	0x200003b4

08002d24 <log_init>:
{
 8002d24:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002d26:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <log_init+0x4c>)
 8002d28:	f3bf 8f5b 	dmb	ish
 8002d2c:	e853 5f00 	ldrex	r5, [r3]
 8002d30:	1c6a      	adds	r2, r5, #1
 8002d32:	e843 2100 	strex	r1, r2, [r3]
 8002d36:	2900      	cmp	r1, #0
 8002d38:	d1f8      	bne.n	8002d2c <log_init+0x8>
 8002d3a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8002d3e:	b92d      	cbnz	r5, 8002d4c <log_init+0x28>
	return __log_backends_end - __log_backends_start;
 8002d40:	4c0c      	ldr	r4, [pc, #48]	; (8002d74 <log_init+0x50>)
 8002d42:	4e0d      	ldr	r6, [pc, #52]	; (8002d78 <log_init+0x54>)
 8002d44:	1b36      	subs	r6, r6, r4
 8002d46:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8002d48:	42b5      	cmp	r5, r6
 8002d4a:	db00      	blt.n	8002d4e <log_init+0x2a>
}
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 8002d4e:	7b23      	ldrb	r3, [r4, #12]
 8002d50:	b153      	cbz	r3, 8002d68 <log_init+0x44>
			if (backend->api->init != NULL) {
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	b10b      	cbz	r3, 8002d5c <log_init+0x38>
				backend->api->init(backend);
 8002d58:	4620      	mov	r0, r4
 8002d5a:	4798      	blx	r3
			log_backend_enable(backend,
 8002d5c:	6863      	ldr	r3, [r4, #4]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	4620      	mov	r0, r4
 8002d64:	f7ff ffbe 	bl	8002ce4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8002d68:	3501      	adds	r5, #1
 8002d6a:	3410      	adds	r4, #16
 8002d6c:	e7ec      	b.n	8002d48 <log_init+0x24>
 8002d6e:	bf00      	nop
 8002d70:	20001ac4 	.word	0x20001ac4
 8002d74:	0800de10 	.word	0x0800de10
 8002d78:	0800de20 	.word	0x0800de20

08002d7c <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
 8002d7c:	b163      	cbz	r3, 8002d98 <log_filter_get+0x1c>
		if (source_id < 0) {
 8002d7e:	2a00      	cmp	r2, #0
 8002d80:	db0f      	blt.n	8002da2 <log_filter_get+0x26>
	return backend->cb->id;
 8002d82:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
 8002d84:	4908      	ldr	r1, [pc, #32]	; (8002da8 <log_filter_get+0x2c>)
 8002d86:	7918      	ldrb	r0, [r3, #4]
 8002d88:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8002d8c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8002d90:	40d8      	lsrs	r0, r3
 8002d92:	f000 0007 	and.w	r0, r0, #7
 8002d96:	4770      	bx	lr
	return __log_const_start[source_id].level;
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <log_filter_get+0x30>)
 8002d9a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
 8002d9e:	7910      	ldrb	r0, [r2, #4]
 8002da0:	4770      	bx	lr
			return LOG_LEVEL_DBG;
 8002da2:	2004      	movs	r0, #4
}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	2000033c 	.word	0x2000033c
 8002dac:	0800ddb8 	.word	0x0800ddb8

08002db0 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <z_log_strdup+0x60>)
 8002db2:	4298      	cmp	r0, r3
{
 8002db4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002db6:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8002db8:	d302      	bcc.n	8002dc0 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <z_log_strdup+0x64>)
 8002dbc:	4298      	cmp	r0, r3
 8002dbe:	d321      	bcc.n	8002e04 <z_log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8002dc0:	4815      	ldr	r0, [pc, #84]	; (8002e18 <z_log_strdup+0x68>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	a901      	add	r1, sp, #4
 8002dc8:	f005 faba 	bl	8008340 <k_mem_slab_alloc>
	if (err != 0) {
 8002dcc:	4605      	mov	r5, r0
 8002dce:	b9e0      	cbnz	r0, 8002e0a <z_log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	9b01      	ldr	r3, [sp, #4]
 8002dd4:	f3bf 8f5b 	dmb	ish
 8002dd8:	e853 1f00 	ldrex	r1, [r3]
 8002ddc:	e843 2000 	strex	r0, r2, [r3]
 8002de0:	2800      	cmp	r0, #0
 8002de2:	d1f9      	bne.n	8002dd8 <z_log_strdup+0x28>
 8002de4:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 8002de8:	9e01      	ldr	r6, [sp, #4]
 8002dea:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8002dec:	221f      	movs	r2, #31
 8002dee:	4618      	mov	r0, r3
 8002df0:	4621      	mov	r1, r4
 8002df2:	f00a fd37 	bl	800d864 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8002df6:	227e      	movs	r2, #126	; 0x7e
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 8002dfe:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
 8002e02:	461c      	mov	r4, r3
}
 8002e04:	4620      	mov	r0, r4
 8002e06:	b002      	add	sp, #8
 8002e08:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
 8002e0a:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <z_log_strdup+0x6c>)
 8002e0c:	e7f9      	b.n	8002e02 <z_log_strdup+0x52>
 8002e0e:	bf00      	nop
 8002e10:	0800d9e8 	.word	0x0800d9e8
 8002e14:	08010e38 	.word	0x08010e38
 8002e18:	20001ad0 	.word	0x20001ad0
 8002e1c:	0800f457 	.word	0x0800f457

08002e20 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 8002e20:	b148      	cbz	r0, 8002e36 <log_is_strdup+0x16>
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <log_is_strdup+0x18>)
 8002e24:	4298      	cmp	r0, r3
 8002e26:	d305      	bcc.n	8002e34 <log_is_strdup+0x14>
 8002e28:	33a0      	adds	r3, #160	; 0xa0
 8002e2a:	4298      	cmp	r0, r3
 8002e2c:	bf2c      	ite	cs
 8002e2e:	2000      	movcs	r0, #0
 8002e30:	2001      	movcc	r0, #1
 8002e32:	4770      	bx	lr
 8002e34:	2000      	movs	r0, #0
}
 8002e36:	4770      	bx	lr
 8002e38:	20005820 	.word	0x20005820

08002e3c <z_impl_log_process>:
{
 8002e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
 8002e40:	4b53      	ldr	r3, [pc, #332]	; (8002f90 <z_impl_log_process+0x154>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
{
 8002e44:	b085      	sub	sp, #20
 8002e46:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
 8002e48:	b903      	cbnz	r3, 8002e4c <z_impl_log_process+0x10>
 8002e4a:	b300      	cbz	r0, 8002e8e <z_impl_log_process+0x52>
	msg = get_msg();
 8002e4c:	f7ff fe82 	bl	8002b54 <get_msg>
	if (msg.msg) {
 8002e50:	4604      	mov	r4, r0
 8002e52:	b178      	cbz	r0, 8002e74 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8002e54:	f3bf 8f5b 	dmb	ish
 8002e58:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <z_impl_log_process+0x158>)
 8002e5a:	e853 2f00 	ldrex	r2, [r3]
 8002e5e:	3a01      	subs	r2, #1
 8002e60:	e843 2100 	strex	r1, r2, [r3]
 8002e64:	2900      	cmp	r1, #0
 8002e66:	d1f8      	bne.n	8002e5a <z_impl_log_process+0x1e>
 8002e68:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
 8002e6c:	b19d      	cbz	r5, 8002e96 <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f007 ffb7 	bl	800ade2 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
 8002e74:	b92d      	cbnz	r5, 8002e82 <z_impl_log_process+0x46>
	return dropped_cnt > 0;
 8002e76:	4b48      	ldr	r3, [pc, #288]	; (8002f98 <z_impl_log_process+0x15c>)
	if (!bypass && z_log_dropped_pending()) {
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	dd01      	ble.n	8002e82 <z_impl_log_process+0x46>
		dropped_notify();
 8002e7e:	f7ff fe9d 	bl	8002bbc <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
 8002e82:	4846      	ldr	r0, [pc, #280]	; (8002f9c <z_impl_log_process+0x160>)
 8002e84:	f007 fe9f 	bl	800abc6 <log_list_head_peek>
 8002e88:	1e05      	subs	r5, r0, #0
 8002e8a:	bf18      	it	ne
 8002e8c:	2501      	movne	r5, #1
}
 8002e8e:	4628      	mov	r0, r5
 8002e90:	b005      	add	sp, #20
 8002e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
 8002e96:	4b42      	ldr	r3, [pc, #264]	; (8002fa0 <z_impl_log_process+0x164>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b9f3      	cbnz	r3, 8002eda <z_impl_log_process+0x9e>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8002e9c:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
 8002e9e:	07da      	lsls	r2, r3, #31
 8002ea0:	d41b      	bmi.n	8002eda <z_impl_log_process+0x9e>
	msg_str = log_msg_str_get(msg);
 8002ea2:	f007 ffb1 	bl	800ae08 <log_msg_str_get>
 8002ea6:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f007 ff78 	bl	800ad9e <log_msg_nargs_get>
 8002eae:	4601      	mov	r1, r0
 8002eb0:	4638      	mov	r0, r7
 8002eb2:	f7ff fded 	bl	8002a90 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8002eb6:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8002fc0 <z_impl_log_process+0x184>
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <z_impl_log_process+0x168>)
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 8002ebc:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8002fc4 <z_impl_log_process+0x188>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8002ec0:	f8df b104 	ldr.w	fp, [pc, #260]	; 8002fc8 <z_impl_log_process+0x18c>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8002ec4:	eba3 0308 	sub.w	r3, r3, r8
 8002ec8:	08db      	lsrs	r3, r3, #3
 8002eca:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 8002ecc:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <z_impl_log_process+0x16c>)
 8002ece:	eba9 0303 	sub.w	r3, r9, r3
 8002ed2:	089b      	lsrs	r3, r3, #2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8002ed4:	4606      	mov	r6, r0
 8002ed6:	9303      	str	r3, [sp, #12]
	while (mask) {
 8002ed8:	b946      	cbnz	r6, 8002eec <z_impl_log_process+0xb0>
	return __log_backends_end - __log_backends_start;
 8002eda:	4e34      	ldr	r6, [pc, #208]	; (8002fac <z_impl_log_process+0x170>)
 8002edc:	4f34      	ldr	r7, [pc, #208]	; (8002fb0 <z_impl_log_process+0x174>)
		return LOG_FILTER_SLOT_GET(filters,
 8002ede:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002fa8 <z_impl_log_process+0x16c>
 8002ee2:	1bbf      	subs	r7, r7, r6
 8002ee4:	113f      	asrs	r7, r7, #4
 8002ee6:	f04f 0800 	mov.w	r8, #0
 8002eea:	e04e      	b.n	8002f8a <z_impl_log_process+0x14e>
		idx = 31 - __builtin_clz(mask);
 8002eec:	fab6 f186 	clz	r1, r6
 8002ef0:	f1c1 0a1f 	rsb	sl, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 8002ef4:	4651      	mov	r1, sl
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f007 ff54 	bl	800ada4 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
 8002efc:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <z_impl_log_process+0x178>)
 8002efe:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
 8002f00:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8002f02:	d302      	bcc.n	8002f0a <z_impl_log_process+0xce>
		if (!is_rodata(str) && !log_is_strdup(str) &&
 8002f04:	4a2c      	ldr	r2, [pc, #176]	; (8002fb8 <z_impl_log_process+0x17c>)
 8002f06:	4290      	cmp	r0, r2
 8002f08:	d31e      	bcc.n	8002f48 <z_impl_log_process+0x10c>
 8002f0a:	4608      	mov	r0, r1
 8002f0c:	f7ff ff88 	bl	8002e20 <log_is_strdup>
 8002f10:	4602      	mov	r2, r0
 8002f12:	b9c8      	cbnz	r0, 8002f48 <z_impl_log_process+0x10c>
 8002f14:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <z_impl_log_process+0x180>)
 8002f16:	4299      	cmp	r1, r3
 8002f18:	d016      	beq.n	8002f48 <z_impl_log_process+0x10c>
	return msg->hdr.ids.source_id;
 8002f1a:	8963      	ldrh	r3, [r4, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8002f1c:	9902      	ldr	r1, [sp, #8]
 8002f1e:	f3c3 1389 	ubfx	r3, r3, #6, #10
 8002f22:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
 8002f24:	bf38      	it	cc
 8002f26:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8002f2a:	f8d9 3000 	ldr.w	r3, [r9]
 8002f2e:	075b      	lsls	r3, r3, #29
 8002f30:	d00a      	beq.n	8002f48 <z_impl_log_process+0x10c>
 8002f32:	9b03      	ldr	r3, [sp, #12]
 8002f34:	019b      	lsls	r3, r3, #6
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	f8ad 3000 	strh.w	r3, [sp]
 8002f3e:	4651      	mov	r1, sl
 8002f40:	463b      	mov	r3, r7
 8002f42:	4658      	mov	r0, fp
 8002f44:	f007 fe9e 	bl	800ac84 <log_3>
		mask &= ~BIT(idx);
 8002f48:	2301      	movs	r3, #1
 8002f4a:	fa03 f10a 	lsl.w	r1, r3, sl
 8002f4e:	ea26 0601 	bic.w	r6, r6, r1
 8002f52:	e7c1      	b.n	8002ed8 <z_impl_log_process+0x9c>
	return backend->cb->active;
 8002f54:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
 8002f56:	795a      	ldrb	r2, [r3, #5]
 8002f58:	b1a2      	cbz	r2, 8002f84 <z_impl_log_process+0x148>
 8002f5a:	8960      	ldrh	r0, [r4, #10]
		return LOG_FILTER_SLOT_GET(filters,
 8002f5c:	791b      	ldrb	r3, [r3, #4]
	return msg->hdr.ids.level;
 8002f5e:	7aa1      	ldrb	r1, [r4, #10]
		uint32_t *filters = log_dynamic_filters_get(source_id);
 8002f60:	f3c0 1089 	ubfx	r0, r0, #6, #10
		return LOG_FILTER_SLOT_GET(filters,
 8002f64:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002f68:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 8002f6c:	40d3      	lsrs	r3, r2
 8002f6e:	f001 0107 	and.w	r1, r1, #7
 8002f72:	f003 0307 	and.w	r3, r3, #7
			if (log_backend_is_active(backend) &&
 8002f76:	4299      	cmp	r1, r3
 8002f78:	d804      	bhi.n	8002f84 <z_impl_log_process+0x148>
	backend->api->put(backend, msg);
 8002f7a:	6833      	ldr	r3, [r6, #0]
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4630      	mov	r0, r6
 8002f82:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 8002f84:	f108 0801 	add.w	r8, r8, #1
 8002f88:	3610      	adds	r6, #16
 8002f8a:	45b8      	cmp	r8, r7
 8002f8c:	dbe2      	blt.n	8002f54 <z_impl_log_process+0x118>
 8002f8e:	e76e      	b.n	8002e6e <z_impl_log_process+0x32>
 8002f90:	20002811 	.word	0x20002811
 8002f94:	20001abc 	.word	0x20001abc
 8002f98:	20001ac0 	.word	0x20001ac0
 8002f9c:	20001ac8 	.word	0x20001ac8
 8002fa0:	20002812 	.word	0x20002812
 8002fa4:	0800de10 	.word	0x0800de10
 8002fa8:	2000033c 	.word	0x2000033c
 8002fac:	0800de10 	.word	0x0800de10
 8002fb0:	0800de20 	.word	0x0800de20
 8002fb4:	0800d9e8 	.word	0x0800d9e8
 8002fb8:	08010e38 	.word	0x08010e38
 8002fbc:	0800f457 	.word	0x0800f457
 8002fc0:	0800ddb8 	.word	0x0800ddb8
 8002fc4:	2000034c 	.word	0x2000034c
 8002fc8:	0800f471 	.word	0x0800f471

08002fcc <log_process_thread_func>:
{
 8002fcc:	b510      	push	{r4, lr}
	log_init();
 8002fce:	f7ff fea9 	bl	8002d24 <log_init>
	return z_impl_k_current_get();
 8002fd2:	f006 f83d 	bl	8009050 <z_impl_k_current_get>
	proc_tid = process_tid;
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <log_process_thread_func+0x3c>)
 8002fd8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8002fda:	b130      	cbz	r0, 8002fea <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <log_process_thread_func+0x40>)
	    process_tid &&
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b09      	cmp	r3, #9
 8002fe2:	dd02      	ble.n	8002fea <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
 8002fe4:	480a      	ldr	r0, [pc, #40]	; (8003010 <log_process_thread_func+0x44>)
 8002fe6:	f005 fcdb 	bl	80089a0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 8002fea:	4c09      	ldr	r4, [pc, #36]	; (8003010 <log_process_thread_func+0x44>)
	return z_impl_log_process(bypass);
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7ff ff25 	bl	8002e3c <z_impl_log_process>
		if (log_process(false) == false) {
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d1fa      	bne.n	8002fec <log_process_thread_func+0x20>
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ffe:	4620      	mov	r0, r4
 8003000:	f005 fcf4 	bl	80089ec <z_impl_k_sem_take>
 8003004:	e7f2      	b.n	8002fec <log_process_thread_func+0x20>
 8003006:	bf00      	nop
 8003008:	20001af0 	.word	0x20001af0
 800300c:	20001abc 	.word	0x20001abc
 8003010:	200003b4 	.word	0x200003b4

08003014 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <msg_finalize+0xa8>)
{
 8003016:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
 8003018:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
 800301a:	8141      	strh	r1, [r0, #10]
{
 800301c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 800301e:	4798      	blx	r3
 8003020:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8003022:	f04f 0310 	mov.w	r3, #16
 8003026:	f3ef 8511 	mrs	r5, BASEPRI
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8003032:	4823      	ldr	r0, [pc, #140]	; (80030c0 <msg_finalize+0xac>)
 8003034:	4621      	mov	r1, r4
 8003036:	f007 fdbc 	bl	800abb2 <log_list_add_tail>
	__asm__ volatile(
 800303a:	f385 8811 	msr	BASEPRI, r5
 800303e:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003042:	f3bf 8f5b 	dmb	ish
 8003046:	4b1f      	ldr	r3, [pc, #124]	; (80030c4 <msg_finalize+0xb0>)
 8003048:	e853 2f00 	ldrex	r2, [r3]
 800304c:	3201      	adds	r2, #1
 800304e:	e843 2100 	strex	r1, r2, [r3]
 8003052:	2900      	cmp	r1, #0
 8003054:	d1f8      	bne.n	8003048 <msg_finalize+0x34>
 8003056:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 800305a:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <msg_finalize+0xb4>)
 800305c:	7812      	ldrb	r2, [r2, #0]
 800305e:	b182      	cbz	r2, 8003082 <msg_finalize+0x6e>
	__asm__ volatile(
 8003060:	f04f 0310 	mov.w	r3, #16
 8003064:	f3ef 8411 	mrs	r4, BASEPRI
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	2000      	movs	r0, #0
 8003072:	f7ff fee3 	bl	8002e3c <z_impl_log_process>
	__asm__ volatile(
 8003076:	f384 8811 	msr	BASEPRI, r4
 800307a:	f3bf 8f6f 	isb	sy
}
 800307e:	b003      	add	sp, #12
 8003080:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8003082:	4a12      	ldr	r2, [pc, #72]	; (80030cc <msg_finalize+0xb8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	2a00      	cmp	r2, #0
 800308a:	d0f8      	beq.n	800307e <msg_finalize+0x6a>
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10a      	bne.n	80030a6 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
 8003090:	2200      	movs	r2, #0
 8003092:	2300      	movs	r3, #0
 8003094:	e9cd 2300 	strd	r2, r3, [sp]
 8003098:	480d      	ldr	r0, [pc, #52]	; (80030d0 <msg_finalize+0xbc>)
 800309a:	f242 7210 	movw	r2, #10000	; 0x2710
 800309e:	2300      	movs	r3, #0
 80030a0:	f006 f9e8 	bl	8009474 <z_impl_k_timer_start>
 80030a4:	e7eb      	b.n	800307e <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80030a6:	2b0a      	cmp	r3, #10
 80030a8:	d1e9      	bne.n	800307e <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
 80030aa:	4809      	ldr	r0, [pc, #36]	; (80030d0 <msg_finalize+0xbc>)
 80030ac:	f00a f8cd 	bl	800d24a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80030b0:	4808      	ldr	r0, [pc, #32]	; (80030d4 <msg_finalize+0xc0>)
}
 80030b2:	b003      	add	sp, #12
 80030b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030b8:	f005 bc72 	b.w	80089a0 <z_impl_k_sem_give>
 80030bc:	20000008 	.word	0x20000008
 80030c0:	20001ac8 	.word	0x20001ac8
 80030c4:	20001abc 	.word	0x20001abc
 80030c8:	20002812 	.word	0x20002812
 80030cc:	20001af0 	.word	0x20001af0
 80030d0:	20000508 	.word	0x20000508
 80030d4:	200003b4 	.word	0x200003b4

080030d8 <z_impl_log_panic>:
{
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 80030da:	4f0e      	ldr	r7, [pc, #56]	; (8003114 <z_impl_log_panic+0x3c>)
 80030dc:	783d      	ldrb	r5, [r7, #0]
 80030de:	b975      	cbnz	r5, 80030fe <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
 80030e0:	4c0d      	ldr	r4, [pc, #52]	; (8003118 <z_impl_log_panic+0x40>)
 80030e2:	4e0e      	ldr	r6, [pc, #56]	; (800311c <z_impl_log_panic+0x44>)
	log_init();
 80030e4:	f7ff fe1e 	bl	8002d24 <log_init>
 80030e8:	1b36      	subs	r6, r6, r4
 80030ea:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 80030ec:	42b5      	cmp	r5, r6
 80030ee:	db07      	blt.n	8003100 <z_impl_log_panic+0x28>
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7ff fea3 	bl	8002e3c <z_impl_log_process>
		while (log_process(false) == true) {
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d1fa      	bne.n	80030f0 <z_impl_log_panic+0x18>
	panic_mode = true;
 80030fa:	2301      	movs	r3, #1
 80030fc:	703b      	strb	r3, [r7, #0]
}
 80030fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 8003100:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8003102:	795b      	ldrb	r3, [r3, #5]
 8003104:	b11b      	cbz	r3, 800310e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	4620      	mov	r0, r4
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 800310e:	3501      	adds	r5, #1
 8003110:	3410      	adds	r4, #16
 8003112:	e7eb      	b.n	80030ec <z_impl_log_panic+0x14>
 8003114:	20002812 	.word	0x20002812
 8003118:	0800de10 	.word	0x0800de10
 800311c:	0800de20 	.word	0x0800de20

08003120 <log_free>:
{
 8003120:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 8003122:	3804      	subs	r0, #4
 8003124:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003126:	f3bf 8f5b 	dmb	ish
 800312a:	e850 3f00 	ldrex	r3, [r0]
 800312e:	1e5a      	subs	r2, r3, #1
 8003130:	e840 2100 	strex	r1, r2, [r0]
 8003134:	2900      	cmp	r1, #0
 8003136:	d1f8      	bne.n	800312a <log_free+0xa>
 8003138:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 800313c:	2b01      	cmp	r3, #1
 800313e:	d103      	bne.n	8003148 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8003140:	4803      	ldr	r0, [pc, #12]	; (8003150 <log_free+0x30>)
 8003142:	a901      	add	r1, sp, #4
 8003144:	f009 fdfa 	bl	800cd3c <k_mem_slab_free>
}
 8003148:	b003      	add	sp, #12
 800314a:	f85d fb04 	ldr.w	pc, [sp], #4
 800314e:	bf00      	nop
 8003150:	20001ad0 	.word	0x20001ad0

08003154 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 8003154:	2320      	movs	r3, #32
 8003156:	4902      	ldr	r1, [pc, #8]	; (8003160 <log_msg_pool_init+0xc>)
 8003158:	4802      	ldr	r0, [pc, #8]	; (8003164 <log_msg_pool_init+0x10>)
 800315a:	461a      	mov	r2, r3
 800315c:	f009 bdd2 	b.w	800cd04 <k_mem_slab_init>
 8003160:	200058c0 	.word	0x200058c0
 8003164:	20001af4 	.word	0x20001af4

08003168 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 8003168:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
 800316a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
 800316c:	4d09      	ldr	r5, [pc, #36]	; (8003194 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	2001      	movs	r0, #1
 8003172:	f7ff fe63 	bl	8002e3c <z_impl_log_process>
 8003176:	4604      	mov	r4, r0
			z_log_dropped();
 8003178:	f7ff fd00 	bl	8002b7c <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 800317c:	2200      	movs	r2, #0
 800317e:	2300      	movs	r3, #0
 8003180:	a901      	add	r1, sp, #4
 8003182:	4628      	mov	r0, r5
 8003184:	f005 f8dc 	bl	8008340 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 8003188:	b108      	cbz	r0, 800318e <log_msg_no_space_handle+0x26>
 800318a:	2c00      	cmp	r4, #0
 800318c:	d1f0      	bne.n	8003170 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
 800318e:	9801      	ldr	r0, [sp, #4]
 8003190:	b003      	add	sp, #12
 8003192:	bd30      	pop	{r4, r5, pc}
 8003194:	20001af4 	.word	0x20001af4

08003198 <log_msg_chunk_alloc>:
{
 8003198:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 800319e:	4807      	ldr	r0, [pc, #28]	; (80031bc <log_msg_chunk_alloc+0x24>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	2300      	movs	r3, #0
 80031a4:	a901      	add	r1, sp, #4
 80031a6:	f005 f8cb 	bl	8008340 <k_mem_slab_alloc>
	if (err != 0) {
 80031aa:	b110      	cbz	r0, 80031b2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
 80031ac:	f7ff ffdc 	bl	8003168 <log_msg_no_space_handle>
 80031b0:	9001      	str	r0, [sp, #4]
}
 80031b2:	9801      	ldr	r0, [sp, #4]
 80031b4:	b003      	add	sp, #12
 80031b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80031ba:	bf00      	nop
 80031bc:	20001af4 	.word	0x20001af4

080031c0 <msg_free>:
{
 80031c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80031c2:	7a03      	ldrb	r3, [r0, #8]
 80031c4:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
 80031c6:	07dc      	lsls	r4, r3, #31
{
 80031c8:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
 80031ca:	d41e      	bmi.n	800320a <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
 80031cc:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
 80031ce:	092d      	lsrs	r5, r5, #4
 80031d0:	d01b      	beq.n	800320a <msg_free+0x4a>
		uint32_t smask = 0U;
 80031d2:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
 80031d4:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
 80031d6:	9801      	ldr	r0, [sp, #4]
 80031d8:	4631      	mov	r1, r6
 80031da:	f007 fde3 	bl	800ada4 <log_msg_arg_get>
 80031de:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
 80031e0:	f7ff fe1e 	bl	8002e20 <log_is_strdup>
 80031e4:	b170      	cbz	r0, 8003204 <msg_free+0x44>
				if (smask == 0U) {
 80031e6:	b934      	cbnz	r4, 80031f6 <msg_free+0x36>
					smask = z_log_get_s_mask(
 80031e8:	9b01      	ldr	r3, [sp, #4]
 80031ea:	4629      	mov	r1, r5
 80031ec:	6918      	ldr	r0, [r3, #16]
 80031ee:	f7ff fc4f 	bl	8002a90 <z_log_get_s_mask>
					if (smask == 0U) {
 80031f2:	4604      	mov	r4, r0
 80031f4:	b148      	cbz	r0, 800320a <msg_free+0x4a>
				if (smask & BIT(i)) {
 80031f6:	fa24 f306 	lsr.w	r3, r4, r6
 80031fa:	07d9      	lsls	r1, r3, #31
 80031fc:	d502      	bpl.n	8003204 <msg_free+0x44>
					log_free(buf);
 80031fe:	4638      	mov	r0, r7
 8003200:	f7ff ff8e 	bl	8003120 <log_free>
		for (i = 0U; i < nargs; i++) {
 8003204:	3601      	adds	r6, #1
 8003206:	42ae      	cmp	r6, r5
 8003208:	d3e5      	bcc.n	80031d6 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
 800320a:	9b01      	ldr	r3, [sp, #4]
 800320c:	7a1a      	ldrb	r2, [r3, #8]
 800320e:	0792      	lsls	r2, r2, #30
 8003210:	d504      	bpl.n	800321c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
 8003212:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8003214:	4c08      	ldr	r4, [pc, #32]	; (8003238 <msg_free+0x78>)
 8003216:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
 8003218:	9b03      	ldr	r3, [sp, #12]
 800321a:	b92b      	cbnz	r3, 8003228 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 800321c:	4806      	ldr	r0, [pc, #24]	; (8003238 <msg_free+0x78>)
 800321e:	a901      	add	r1, sp, #4
 8003220:	f009 fd8c 	bl	800cd3c <k_mem_slab_free>
}
 8003224:	b005      	add	sp, #20
 8003226:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
 8003228:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 800322a:	a903      	add	r1, sp, #12
 800322c:	4620      	mov	r0, r4
 800322e:	f009 fd85 	bl	800cd3c <k_mem_slab_free>
		cont = next;
 8003232:	9503      	str	r5, [sp, #12]
 8003234:	e7f0      	b.n	8003218 <msg_free+0x58>
 8003236:	bf00      	nop
 8003238:	20001af4 	.word	0x20001af4

0800323c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 800323c:	b40e      	push	{r1, r2, r3}
 800323e:	b503      	push	{r0, r1, lr}
 8003240:	ab03      	add	r3, sp, #12
 8003242:	4601      	mov	r1, r0
 8003244:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8003248:	4804      	ldr	r0, [pc, #16]	; (800325c <print_formatted+0x20>)
	va_start(args, fmt);
 800324a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 800324c:	f7fd fe10 	bl	8000e70 <cbvprintf>
	va_end(args);

	return length;
}
 8003250:	b002      	add	sp, #8
 8003252:	f85d eb04 	ldr.w	lr, [sp], #4
 8003256:	b003      	add	sp, #12
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	0800b1bd 	.word	0x0800b1bd

08003260 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 8003260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003264:	461d      	mov	r5, r3
 8003266:	9b08      	ldr	r3, [sp, #32]
 8003268:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800326a:	06da      	lsls	r2, r3, #27
{
 800326c:	4604      	mov	r4, r0
 800326e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8003270:	d405      	bmi.n	800327e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8003272:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 8003274:	bf4c      	ite	mi
 8003276:	492b      	ldrmi	r1, [pc, #172]	; (8003324 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
 8003278:	492b      	ldrpl	r1, [pc, #172]	; (8003328 <hexdump_line_print+0xc8>)
 800327a:	f7ff ffdf 	bl	800323c <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
 800327e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003330 <hexdump_line_print+0xd0>
{
 8003282:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
 8003286:	45a8      	cmp	r8, r5
 8003288:	db2d      	blt.n	80032e6 <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 800328a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003334 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
 800328e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003338 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
 8003292:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8003330 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003296:	2500      	movs	r5, #0
		if (i < length) {
 8003298:	42bd      	cmp	r5, r7
 800329a:	d232      	bcs.n	8003302 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
 800329c:	5d72      	ldrb	r2, [r6, r5]
 800329e:	4649      	mov	r1, r9
 80032a0:	4620      	mov	r0, r4
 80032a2:	f7ff ffcb 	bl	800323c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80032a6:	3501      	adds	r5, #1
 80032a8:	2d10      	cmp	r5, #16
 80032aa:	d123      	bne.n	80032f4 <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");
 80032ac:	491f      	ldr	r1, [pc, #124]	; (800332c <hexdump_line_print+0xcc>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
 80032ae:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8003330 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
 80032b2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800333c <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
 80032b6:	f8df a088 	ldr.w	sl, [pc, #136]	; 8003340 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
 80032ba:	4620      	mov	r0, r4
 80032bc:	f7ff ffbe 	bl	800323c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80032c0:	2500      	movs	r5, #0
		if (i < length) {
 80032c2:	42af      	cmp	r7, r5
 80032c4:	d929      	bls.n	800331a <hexdump_line_print+0xba>
			char c = (char)data[i];
 80032c6:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
 80032c8:	f812 3009 	ldrb.w	r3, [r2, r9]
 80032cc:	f013 0f97 	tst.w	r3, #151	; 0x97
 80032d0:	bf08      	it	eq
 80032d2:	222e      	moveq	r2, #46	; 0x2e
 80032d4:	4651      	mov	r1, sl
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7ff ffb0 	bl	800323c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80032dc:	3501      	adds	r5, #1
 80032de:	2d10      	cmp	r5, #16
 80032e0:	d114      	bne.n	800330c <hexdump_line_print+0xac>
		}
	}
}
 80032e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
 80032e6:	4649      	mov	r1, r9
 80032e8:	4620      	mov	r0, r4
 80032ea:	f7ff ffa7 	bl	800323c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80032ee:	f108 0801 	add.w	r8, r8, #1
 80032f2:	e7c8      	b.n	8003286 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 80032f4:	076a      	lsls	r2, r5, #29
 80032f6:	d1cf      	bne.n	8003298 <hexdump_line_print+0x38>
			print_formatted(output, " ");
 80032f8:	4651      	mov	r1, sl
 80032fa:	4620      	mov	r0, r4
 80032fc:	f7ff ff9e 	bl	800323c <print_formatted>
 8003300:	e7ca      	b.n	8003298 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
 8003302:	4641      	mov	r1, r8
 8003304:	4620      	mov	r0, r4
 8003306:	f7ff ff99 	bl	800323c <print_formatted>
 800330a:	e7cc      	b.n	80032a6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 800330c:	076b      	lsls	r3, r5, #29
 800330e:	d1d8      	bne.n	80032c2 <hexdump_line_print+0x62>
			print_formatted(output, " ");
 8003310:	4641      	mov	r1, r8
 8003312:	4620      	mov	r0, r4
 8003314:	f7ff ff92 	bl	800323c <print_formatted>
 8003318:	e7d3      	b.n	80032c2 <hexdump_line_print+0x62>
			print_formatted(output, " ");
 800331a:	4641      	mov	r1, r8
 800331c:	4620      	mov	r0, r4
 800331e:	f7ff ff8d 	bl	800323c <print_formatted>
 8003322:	e7db      	b.n	80032dc <hexdump_line_print+0x7c>
 8003324:	0800f965 	.word	0x0800f965
 8003328:	0800f567 	.word	0x0800f567
 800332c:	0800f4be 	.word	0x0800f4be
 8003330:	0800f4bc 	.word	0x0800f4bc
 8003334:	0800f4ba 	.word	0x0800f4ba
 8003338:	0800f4b4 	.word	0x0800f4b4
 800333c:	08010d02 	.word	0x08010d02
 8003340:	0800fe19 	.word	0x0800fe19

08003344 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8003344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003348:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
 800334a:	f011 0602 	ands.w	r6, r1, #2
{
 800334e:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 8003352:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 8003356:	9205      	str	r2, [sp, #20]
 8003358:	4607      	mov	r7, r0
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800335a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 800335e:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
 8003362:	d007      	beq.n	8003374 <prefix_print+0x30>
	if (!format) {
 8003364:	f011 0f44 	tst.w	r1, #68	; 0x44
 8003368:	d139      	bne.n	80033de <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
 800336a:	4934      	ldr	r1, [pc, #208]	; (800343c <prefix_print+0xf8>)
 800336c:	461a      	mov	r2, r3
 800336e:	f7ff ff65 	bl	800323c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 8003372:	4606      	mov	r6, r0
	if (color) {
 8003374:	f1ba 0f00 	cmp.w	sl, #0
 8003378:	d00a      	beq.n	8003390 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
 800337c:	4931      	ldr	r1, [pc, #196]	; (8003444 <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
 800337e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
 8003382:	4b31      	ldr	r3, [pc, #196]	; (8003448 <prefix_print+0x104>)
 8003384:	4638      	mov	r0, r7
 8003386:	2a00      	cmp	r2, #0
 8003388:	bf08      	it	eq
 800338a:	461a      	moveq	r2, r3
 800338c:	f7ff ff56 	bl	800323c <print_formatted>
	if (level_on) {
 8003390:	b13d      	cbz	r5, 80033a2 <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
 8003392:	4b2e      	ldr	r3, [pc, #184]	; (800344c <prefix_print+0x108>)
 8003394:	492e      	ldr	r1, [pc, #184]	; (8003450 <prefix_print+0x10c>)
 8003396:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 800339a:	4638      	mov	r0, r7
 800339c:	f7ff ff4e 	bl	800323c <print_formatted>
 80033a0:	4605      	mov	r5, r0
	if (source_id >= 0) {
 80033a2:	f1b9 0f00 	cmp.w	r9, #0
 80033a6:	db16      	blt.n	80033d6 <prefix_print+0x92>
		total += print_formatted(output,
 80033a8:	9b05      	ldr	r3, [sp, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d043      	beq.n	8003436 <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 80033ae:	2301      	movs	r3, #1
 80033b0:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
 80033b4:	4b27      	ldr	r3, [pc, #156]	; (8003454 <prefix_print+0x110>)
 80033b6:	4c28      	ldr	r4, [pc, #160]	; (8003458 <prefix_print+0x114>)
 80033b8:	f018 0f10 	tst.w	r8, #16
 80033bc:	bf18      	it	ne
 80033be:	461c      	movne	r4, r3
 80033c0:	4649      	mov	r1, r9
 80033c2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80033c6:	f7ff fc15 	bl	8002bf4 <log_source_name_get>
 80033ca:	4621      	mov	r1, r4
 80033cc:	4602      	mov	r2, r0
 80033ce:	4638      	mov	r0, r7
 80033d0:	f7ff ff34 	bl	800323c <print_formatted>
 80033d4:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
 80033d6:	19a8      	adds	r0, r5, r6
 80033d8:	b007      	add	sp, #28
 80033da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
 80033de:	4a1f      	ldr	r2, [pc, #124]	; (800345c <prefix_print+0x118>)
 80033e0:	6811      	ldr	r1, [r2, #0]
 80033e2:	b331      	cbz	r1, 8003432 <prefix_print+0xee>
		timestamp /= timestamp_div;
 80033e4:	4a1e      	ldr	r2, [pc, #120]	; (8003460 <prefix_print+0x11c>)
 80033e6:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 80033ea:	6814      	ldr	r4, [r2, #0]
 80033ec:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
 80033f0:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
 80033f4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
 80033f8:	fbb4 f2f6 	udiv	r2, r4, r6
 80033fc:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
 8003400:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
 8003404:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
 8003408:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800340c:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
 8003410:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8003414:	fb01 441e 	mls	r4, r1, lr, r4
			length = print_formatted(output,
 8003418:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800341c:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
 8003420:	9600      	str	r6, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8003422:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
 8003426:	e9cd e101 	strd	lr, r1, [sp, #4]
 800342a:	490e      	ldr	r1, [pc, #56]	; (8003464 <prefix_print+0x120>)
 800342c:	f7ff ff06 	bl	800323c <print_formatted>
 8003430:	e79f      	b.n	8003372 <prefix_print+0x2e>
		length = 0;
 8003432:	4608      	mov	r0, r1
 8003434:	e79d      	b.n	8003372 <prefix_print+0x2e>
		total += print_formatted(output,
 8003436:	4c08      	ldr	r4, [pc, #32]	; (8003458 <prefix_print+0x114>)
 8003438:	e7c2      	b.n	80033c0 <prefix_print+0x7c>
 800343a:	bf00      	nop
 800343c:	0800f4ce 	.word	0x0800f4ce
 8003440:	0800eaa0 	.word	0x0800eaa0
 8003444:	0800fa80 	.word	0x0800fa80
 8003448:	0800f4c0 	.word	0x0800f4c0
 800344c:	0800eab4 	.word	0x0800eab4
 8003450:	0800f4f3 	.word	0x0800f4f3
 8003454:	0800f4ca 	.word	0x0800f4ca
 8003458:	0800f4c5 	.word	0x0800f4c5
 800345c:	20001b14 	.word	0x20001b14
 8003460:	20001b18 	.word	0x20001b18
 8003464:	0800f4d7 	.word	0x0800f4d7

08003468 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
 8003468:	b538      	push	{r3, r4, r5, lr}
 800346a:	460c      	mov	r4, r1
	if (color) {
 800346c:	07e1      	lsls	r1, r4, #31
{
 800346e:	4605      	mov	r5, r0
	if (color) {
 8003470:	d503      	bpl.n	800347a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
 8003472:	4a08      	ldr	r2, [pc, #32]	; (8003494 <postfix_print+0x2c>)
 8003474:	4908      	ldr	r1, [pc, #32]	; (8003498 <postfix_print+0x30>)
 8003476:	f7ff fee1 	bl	800323c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800347a:	06e2      	lsls	r2, r4, #27
 800347c:	d408      	bmi.n	8003490 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 800347e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 8003480:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 8003482:	bf4c      	ite	mi
 8003484:	4905      	ldrmi	r1, [pc, #20]	; (800349c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 8003486:	4906      	ldrpl	r1, [pc, #24]	; (80034a0 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
 8003488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 800348c:	f7ff bed6 	b.w	800323c <print_formatted>
}
 8003490:	bd38      	pop	{r3, r4, r5, pc}
 8003492:	bf00      	nop
 8003494:	0800f4c0 	.word	0x0800f4c0
 8003498:	0800fa80 	.word	0x0800fa80
 800349c:	0800f965 	.word	0x0800f965
 80034a0:	0800f567 	.word	0x0800f567

080034a4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
 80034a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
 80034a8:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
 80034aa:	f013 0807 	ands.w	r8, r3, #7
{
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	4605      	mov	r5, r0
 80034b2:	460e      	mov	r6, r1
 80034b4:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
 80034b6:	d022      	beq.n	80034fe <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80034b8:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
 80034ba:	8949      	ldrh	r1, [r1, #10]
 80034bc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80034c0:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80034c4:	43d2      	mvns	r2, r2
 80034c6:	e9cd 8300 	strd	r8, r3, [sp]
 80034ca:	9102      	str	r1, [sp, #8]
 80034cc:	68f3      	ldr	r3, [r6, #12]
 80034ce:	f002 0201 	and.w	r2, r2, #1
 80034d2:	4639      	mov	r1, r7
 80034d4:	f7ff ff36 	bl	8003344 <prefix_print>
 80034d8:	4681      	mov	r9, r0
 80034da:	7a34      	ldrb	r4, [r6, #8]
 80034dc:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
 80034de:	f014 0401 	ands.w	r4, r4, #1
 80034e2:	d00e      	beq.n	8003502 <log_output_msg_process+0x5e>
		std_print(msg, output);
 80034e4:	4629      	mov	r1, r5
 80034e6:	4630      	mov	r0, r6
 80034e8:	f007 fcfe 	bl	800aee8 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
 80034ec:	f1b8 0f00 	cmp.w	r8, #0
 80034f0:	d02b      	beq.n	800354a <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
 80034f2:	4642      	mov	r2, r8
 80034f4:	4639      	mov	r1, r7
 80034f6:	4628      	mov	r0, r5
 80034f8:	f7ff ffb6 	bl	8003468 <postfix_print>
 80034fc:	e025      	b.n	800354a <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
 80034fe:	46c1      	mov	r9, r8
 8003500:	e7eb      	b.n	80034da <log_output_msg_process+0x36>
	} else if (raw_string) {
 8003502:	f1b8 0f00 	cmp.w	r8, #0
 8003506:	d126      	bne.n	8003556 <log_output_msg_process+0xb2>
	size_t offset = 0;
 8003508:	4627      	mov	r7, r4
		length = output->size;
 800350a:	68eb      	ldr	r3, [r5, #12]
 800350c:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 800350e:	aa06      	add	r2, sp, #24
 8003510:	463b      	mov	r3, r7
 8003512:	68a9      	ldr	r1, [r5, #8]
 8003514:	4630      	mov	r0, r6
 8003516:	f007 fcd3 	bl	800aec0 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
 800351a:	9a06      	ldr	r2, [sp, #24]
 800351c:	686b      	ldr	r3, [r5, #4]
 800351e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 8003520:	b13a      	cbz	r2, 8003532 <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
 8003522:	68ab      	ldr	r3, [r5, #8]
 8003524:	4413      	add	r3, r2
 8003526:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 800352a:	f1a4 030a 	sub.w	r3, r4, #10
 800352e:	425c      	negs	r4, r3
 8003530:	415c      	adcs	r4, r3
		log_output_flush(output);
 8003532:	4628      	mov	r0, r5
 8003534:	f007 fe35 	bl	800b1a2 <log_output_flush>
		offset += length;
 8003538:	9b06      	ldr	r3, [sp, #24]
 800353a:	441f      	add	r7, r3
	} while (length > 0);
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e4      	bne.n	800350a <log_output_msg_process+0x66>
	if (eol) {
 8003540:	b11c      	cbz	r4, 800354a <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
 8003542:	4914      	ldr	r1, [pc, #80]	; (8003594 <log_output_msg_process+0xf0>)
 8003544:	4628      	mov	r0, r5
 8003546:	f7ff fe79 	bl	800323c <print_formatted>
	}

	log_output_flush(output);
 800354a:	4628      	mov	r0, r5
}
 800354c:	b00a      	add	sp, #40	; 0x28
 800354e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
 8003552:	f007 be26 	b.w	800b1a2 <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
 8003556:	4630      	mov	r0, r6
 8003558:	f007 fc56 	bl	800ae08 <log_msg_str_get>
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <log_output_msg_process+0xf4>)
 800355e:	4602      	mov	r2, r0
 8003560:	4628      	mov	r0, r5
 8003562:	f7ff fe6b 	bl	800323c <print_formatted>
		length = sizeof(buf);
 8003566:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 800356a:	aa05      	add	r2, sp, #20
 800356c:	4623      	mov	r3, r4
 800356e:	a906      	add	r1, sp, #24
 8003570:	4630      	mov	r0, r6
		length = sizeof(buf);
 8003572:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 8003576:	f007 fca3 	bl	800aec0 <log_msg_hexdump_data_get>
		if (length) {
 800357a:	9a05      	ldr	r2, [sp, #20]
 800357c:	2a00      	cmp	r2, #0
 800357e:	d0b8      	beq.n	80034f2 <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
 8003580:	464b      	mov	r3, r9
 8003582:	9700      	str	r7, [sp, #0]
 8003584:	a906      	add	r1, sp, #24
 8003586:	4628      	mov	r0, r5
 8003588:	f7ff fe6a 	bl	8003260 <hexdump_line_print>
			offset += length;
 800358c:	9b05      	ldr	r3, [sp, #20]
 800358e:	441c      	add	r4, r3
		length = sizeof(buf);
 8003590:	e7eb      	b.n	800356a <log_output_msg_process+0xc6>
 8003592:	bf00      	nop
 8003594:	0800f4f9 	.word	0x0800f4f9
 8003598:	0800fa80 	.word	0x0800fa80

0800359c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 800359c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800359e:	f242 730f 	movw	r3, #9999	; 0x270f
 80035a2:	428b      	cmp	r3, r1
 80035a4:	bf28      	it	cs
 80035a6:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 80035a8:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80035aa:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <log_output_dropped_process+0x4c>)
{
 80035ac:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80035ae:	2105      	movs	r1, #5
 80035b0:	4668      	mov	r0, sp
 80035b2:	f006 fdfe 	bl	800a1b2 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 80035b6:	6863      	ldr	r3, [r4, #4]
 80035b8:	490c      	ldr	r1, [pc, #48]	; (80035ec <log_output_dropped_process+0x50>)
 80035ba:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80035bc:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 80035be:	2204      	movs	r2, #4
 80035c0:	4628      	mov	r0, r5
 80035c2:	f007 fc84 	bl	800aece <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 80035c6:	6863      	ldr	r3, [r4, #4]
 80035c8:	4632      	mov	r2, r6
 80035ca:	4669      	mov	r1, sp
 80035cc:	4628      	mov	r0, r5
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f007 fc7d 	bl	800aece <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 80035d4:	6863      	ldr	r3, [r4, #4]
 80035d6:	4906      	ldr	r1, [pc, #24]	; (80035f0 <log_output_dropped_process+0x54>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2217      	movs	r2, #23
 80035dc:	4628      	mov	r0, r5
 80035de:	f007 fc76 	bl	800aece <buffer_write>
		     output->control_block->ctx);
}
 80035e2:	b002      	add	sp, #8
 80035e4:	bd70      	pop	{r4, r5, r6, pc}
 80035e6:	bf00      	nop
 80035e8:	0800fc41 	.word	0x0800fc41
 80035ec:	0800f533 	.word	0x0800f533
 80035f0:	0800f51b 	.word	0x0800f51b

080035f4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 80035f4:	4a08      	ldr	r2, [pc, #32]	; (8003618 <log_output_timestamp_freq_set+0x24>)
{
 80035f6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 80035f8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80035fa:	4c08      	ldr	r4, [pc, #32]	; (800361c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 80035fc:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 80035fe:	2100      	movs	r1, #0
 8003600:	42a0      	cmp	r0, r4
 8003602:	d804      	bhi.n	800360e <log_output_timestamp_freq_set+0x1a>
 8003604:	b101      	cbz	r1, 8003608 <log_output_timestamp_freq_set+0x14>
 8003606:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <log_output_timestamp_freq_set+0x2c>)
 800360a:	6018      	str	r0, [r3, #0]
}
 800360c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 800360e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2101      	movs	r1, #1
 8003614:	e7f4      	b.n	8003600 <log_output_timestamp_freq_set+0xc>
 8003616:	bf00      	nop
 8003618:	20001b18 	.word	0x20001b18
 800361c:	000f4240 	.word	0x000f4240
 8003620:	20001b14 	.word	0x20001b14

08003624 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
 8003624:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
 8003626:	2804      	cmp	r0, #4
	entry->handler = NULL;
 8003628:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
 800362a:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
 800362c:	bf98      	it	ls
 800362e:	4b04      	ldrls	r3, [pc, #16]	; (8003640 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
 8003632:	bf98      	it	ls
 8003634:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
 8003638:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
 800363a:	600b      	str	r3, [r1, #0]
}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	0800eb08 	.word	0x0800eb08
 8003644:	0800eae4 	.word	0x0800eae4

08003648 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
 8003648:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
 800364a:	4a08      	ldr	r2, [pc, #32]	; (800366c <backend_name_get+0x24>)
	entry->syntax  = NULL;
 800364c:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
 800364e:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
 8003650:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
 8003652:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <backend_name_get+0x28>)
 8003656:	4a07      	ldr	r2, [pc, #28]	; (8003674 <backend_name_get+0x2c>)
 8003658:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
 800365a:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
 800365e:	bf3e      	ittt	cc
 8003660:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
 8003664:	689b      	ldrcc	r3, [r3, #8]
 8003666:	600b      	strcc	r3, [r1, #0]
	}
}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	0800ec48 	.word	0x0800ec48
 8003670:	0800de10 	.word	0x0800de10
 8003674:	0800de20 	.word	0x0800de20

08003678 <cmd_log_backends_list>:
{
 8003678:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <cmd_log_backends_list+0x4c>)
 800367e:	4c12      	ldr	r4, [pc, #72]	; (80036c8 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
 8003680:	4f12      	ldr	r7, [pc, #72]	; (80036cc <cmd_log_backends_list+0x54>)
 8003682:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80036d0 <cmd_log_backends_list+0x58>
 8003686:	f8df 904c 	ldr.w	r9, [pc, #76]	; 80036d4 <cmd_log_backends_list+0x5c>
 800368a:	1b1b      	subs	r3, r3, r4
{
 800368c:	4682      	mov	sl, r0
 800368e:	111e      	asrs	r6, r3, #4
	for (int i = 0; i < backend_count; i++) {
 8003690:	2500      	movs	r5, #0
 8003692:	42b5      	cmp	r5, r6
 8003694:	db03      	blt.n	800369e <cmd_log_backends_list+0x26>
}
 8003696:	2000      	movs	r0, #0
 8003698:	b002      	add	sp, #8
 800369a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
 800369e:	6863      	ldr	r3, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
 80036a0:	7959      	ldrb	r1, [r3, #5]
 80036a2:	791b      	ldrb	r3, [r3, #4]
 80036a4:	2900      	cmp	r1, #0
 80036a6:	bf14      	ite	ne
 80036a8:	463a      	movne	r2, r7
 80036aa:	4642      	moveq	r2, r8
 80036ac:	e9cd 2300 	strd	r2, r3, [sp]
 80036b0:	2100      	movs	r1, #0
 80036b2:	68a3      	ldr	r3, [r4, #8]
 80036b4:	464a      	mov	r2, r9
 80036b6:	4650      	mov	r0, sl
 80036b8:	f007 feef 	bl	800b49a <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
 80036bc:	3501      	adds	r5, #1
 80036be:	3410      	adds	r4, #16
 80036c0:	e7e7      	b.n	8003692 <cmd_log_backends_list+0x1a>
 80036c2:	bf00      	nop
 80036c4:	0800de20 	.word	0x0800de20
 80036c8:	0800de10 	.word	0x0800de10
 80036cc:	0800f538 	.word	0x0800f538
 80036d0:	0800f540 	.word	0x0800f540
 80036d4:	0800f549 	.word	0x0800f549

080036d8 <log_status>:
{
 80036d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 80036dc:	4b24      	ldr	r3, [pc, #144]	; (8003770 <log_status+0x98>)
 80036de:	4c25      	ldr	r4, [pc, #148]	; (8003774 <log_status+0x9c>)
 80036e0:	1ae4      	subs	r4, r4, r3
	return backend->cb->active;
 80036e2:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
 80036e4:	795b      	ldrb	r3, [r3, #5]
{
 80036e6:	b085      	sub	sp, #20
 80036e8:	4605      	mov	r5, r0
 80036ea:	460e      	mov	r6, r1
 80036ec:	08e4      	lsrs	r4, r4, #3
	if (!log_backend_is_active(backend)) {
 80036ee:	b91b      	cbnz	r3, 80036f8 <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
 80036f0:	4a21      	ldr	r2, [pc, #132]	; (8003778 <log_status+0xa0>)
 80036f2:	2104      	movs	r1, #4
 80036f4:	f007 fed1 	bl	800b49a <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
 80036f8:	4b20      	ldr	r3, [pc, #128]	; (800377c <log_status+0xa4>)
 80036fa:	4a21      	ldr	r2, [pc, #132]	; (8003780 <log_status+0xa8>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
 80036fc:	f8df a088 	ldr.w	sl, [pc, #136]	; 8003788 <log_status+0xb0>
 8003700:	f8df b088 	ldr.w	fp, [pc, #136]	; 800378c <log_status+0xb4>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
 8003704:	2100      	movs	r1, #0
 8003706:	4628      	mov	r0, r5
 8003708:	f007 fec7 	bl	800b49a <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
 800370c:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <log_status+0xac>)
 800370e:	2100      	movs	r1, #0
 8003710:	4628      	mov	r0, r5
 8003712:	f007 fec2 	bl	800b49a <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
 8003716:	f04f 0800 	mov.w	r8, #0
 800371a:	fa0f f788 	sxth.w	r7, r8
 800371e:	42a7      	cmp	r7, r4
 8003720:	f108 0801 	add.w	r8, r8, #1
 8003724:	d303      	bcc.n	800372e <log_status+0x56>
}
 8003726:	2000      	movs	r0, #0
 8003728:	b005      	add	sp, #20
 800372a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 800372e:	463a      	mov	r2, r7
 8003730:	2301      	movs	r3, #1
 8003732:	2100      	movs	r1, #0
 8003734:	4630      	mov	r0, r6
 8003736:	f7ff fb21 	bl	8002d7c <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 800373a:	2300      	movs	r3, #0
 800373c:	463a      	mov	r2, r7
 800373e:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 8003740:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 8003742:	4630      	mov	r0, r6
 8003744:	f7ff fb1a 	bl	8002d7c <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
 8003748:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 800374a:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
 800374c:	2000      	movs	r0, #0
 800374e:	f7ff fa51 	bl	8002bf4 <log_source_name_get>
 8003752:	9a03      	ldr	r2, [sp, #12]
 8003754:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8003758:	9201      	str	r2, [sp, #4]
 800375a:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
 800375e:	9200      	str	r2, [sp, #0]
 8003760:	4603      	mov	r3, r0
 8003762:	465a      	mov	r2, fp
 8003764:	2100      	movs	r1, #0
 8003766:	4628      	mov	r0, r5
 8003768:	f007 fe97 	bl	800b49a <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
 800376c:	e7d5      	b.n	800371a <log_status+0x42>
 800376e:	bf00      	nop
 8003770:	0800ddb8 	.word	0x0800ddb8
 8003774:	0800de10 	.word	0x0800de10
 8003778:	0800f56a 	.word	0x0800f56a
 800377c:	0800f57c 	.word	0x0800f57c
 8003780:	0800f588 	.word	0x0800f588
 8003784:	0800f5a6 	.word	0x0800f5a6
 8003788:	0800eaf4 	.word	0x0800eaf4
 800378c:	0800f5e3 	.word	0x0800f5e3

08003790 <module_name_get>:
{
 8003790:	b510      	push	{r4, lr}
	entry->handler = NULL;
 8003792:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
 8003794:	4a05      	ldr	r2, [pc, #20]	; (80037ac <module_name_get+0x1c>)
	entry->handler = NULL;
 8003796:	60cb      	str	r3, [r1, #12]
{
 8003798:	460c      	mov	r4, r1
	entry->help  = NULL;
 800379a:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
 800379c:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
 800379e:	4601      	mov	r1, r0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fa27 	bl	8002bf4 <log_source_name_get>
 80037a6:	6020      	str	r0, [r4, #0]
}
 80037a8:	bd10      	pop	{r4, pc}
 80037aa:	bf00      	nop
 80037ac:	0800eae4 	.word	0x0800eae4

080037b0 <shell_backend_cmd_execute>:
{
 80037b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b4:	b085      	sub	sp, #20
 80037b6:	4606      	mov	r6, r0
 80037b8:	9301      	str	r3, [sp, #4]
	char const *name = argv[-1];
 80037ba:	f852 3c04 	ldr.w	r3, [r2, #-4]
	return __log_backends_end - __log_backends_start;
 80037be:	4c18      	ldr	r4, [pc, #96]	; (8003820 <shell_backend_cmd_execute+0x70>)
	size_t slen = strlen(name);
 80037c0:	9302      	str	r3, [sp, #8]
 80037c2:	4618      	mov	r0, r3
{
 80037c4:	4689      	mov	r9, r1
 80037c6:	4690      	mov	r8, r2
	size_t slen = strlen(name);
 80037c8:	f7fd fb00 	bl	8000dcc <strlen>
 80037cc:	4915      	ldr	r1, [pc, #84]	; (8003824 <shell_backend_cmd_execute+0x74>)
	for (int i = 0; i < log_backend_count_get(); i++) {
 80037ce:	9b02      	ldr	r3, [sp, #8]
 80037d0:	1b09      	subs	r1, r1, r4
	size_t slen = strlen(name);
 80037d2:	4602      	mov	r2, r0
 80037d4:	ea4f 1a21 	mov.w	sl, r1, asr #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 80037d8:	2700      	movs	r7, #0
 80037da:	46a3      	mov	fp, r4
 80037dc:	4557      	cmp	r7, sl
 80037de:	db07      	blt.n	80037f0 <shell_backend_cmd_execute+0x40>
		shell_error(shell, "Invalid backend: %s", name);
 80037e0:	4a11      	ldr	r2, [pc, #68]	; (8003828 <shell_backend_cmd_execute+0x78>)
 80037e2:	2102      	movs	r1, #2
 80037e4:	4630      	mov	r0, r6
 80037e6:	f007 fe58 	bl	800b49a <shell_fprintf>
		return -ENOEXEC;
 80037ea:	f06f 0507 	mvn.w	r5, #7
 80037ee:	e011      	b.n	8003814 <shell_backend_cmd_execute+0x64>
		if (strncmp(name, backend->name, slen) == 0) {
 80037f0:	68a1      	ldr	r1, [r4, #8]
 80037f2:	9203      	str	r2, [sp, #12]
 80037f4:	4618      	mov	r0, r3
 80037f6:	9302      	str	r3, [sp, #8]
 80037f8:	f00a f820 	bl	800d83c <strncmp>
 80037fc:	3410      	adds	r4, #16
 80037fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003802:	4605      	mov	r5, r0
 8003804:	b950      	cbnz	r0, 800381c <shell_backend_cmd_execute+0x6c>
		func(shell, backend, argc, argv);
 8003806:	9c01      	ldr	r4, [sp, #4]
 8003808:	4643      	mov	r3, r8
 800380a:	464a      	mov	r2, r9
 800380c:	eb0b 1107 	add.w	r1, fp, r7, lsl #4
 8003810:	4630      	mov	r0, r6
 8003812:	47a0      	blx	r4
}
 8003814:	4628      	mov	r0, r5
 8003816:	b005      	add	sp, #20
 8003818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < log_backend_count_get(); i++) {
 800381c:	3701      	adds	r7, #1
 800381e:	e7dd      	b.n	80037dc <shell_backend_cmd_execute+0x2c>
 8003820:	0800de10 	.word	0x0800de10
 8003824:	0800de20 	.word	0x0800de20
 8003828:	0800f5f7 	.word	0x0800f5f7

0800382c <cmd_log_backend_status>:
{
 800382c:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
 800382e:	4b02      	ldr	r3, [pc, #8]	; (8003838 <cmd_log_backend_status+0xc>)
 8003830:	f7ff ffbe 	bl	80037b0 <shell_backend_cmd_execute>
}
 8003834:	2000      	movs	r0, #0
 8003836:	bd08      	pop	{r3, pc}
 8003838:	080036d9 	.word	0x080036d9

0800383c <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
 800383c:	4b01      	ldr	r3, [pc, #4]	; (8003844 <cmd_log_backend_halt+0x8>)
 800383e:	f7ff bfb7 	b.w	80037b0 <shell_backend_cmd_execute>
 8003842:	bf00      	nop
 8003844:	0800b1f3 	.word	0x0800b1f3

08003848 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
 8003848:	4b01      	ldr	r3, [pc, #4]	; (8003850 <cmd_log_backend_go+0x8>)
 800384a:	f7ff bfb1 	b.w	80037b0 <shell_backend_cmd_execute>
 800384e:	bf00      	nop
 8003850:	0800b1fb 	.word	0x0800b1fb

08003854 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
 8003854:	4b01      	ldr	r3, [pc, #4]	; (800385c <cmd_log_backend_enable+0x8>)
 8003856:	f7ff bfab 	b.w	80037b0 <shell_backend_cmd_execute>
 800385a:	bf00      	nop
 800385c:	0800395d 	.word	0x0800395d

08003860 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
 8003860:	4b01      	ldr	r3, [pc, #4]	; (8003868 <cmd_log_backend_disable+0x8>)
 8003862:	f7ff bfa5 	b.w	80037b0 <shell_backend_cmd_execute>
 8003866:	bf00      	nop
 8003868:	0800b24d 	.word	0x0800b24d

0800386c <shell_state_precheck>:
{
 800386c:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
 800386e:	69c3      	ldr	r3, [r0, #28]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	791c      	ldrb	r4, [r3, #4]
 8003874:	b92c      	cbnz	r4, 8003882 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
 8003876:	4a04      	ldr	r2, [pc, #16]	; (8003888 <shell_state_precheck+0x1c>)
 8003878:	2102      	movs	r1, #2
 800387a:	f007 fe0e 	bl	800b49a <shell_fprintf>
 800387e:	4620      	mov	r0, r4
}
 8003880:	bd10      	pop	{r4, pc}
	return true;
 8003882:	2001      	movs	r0, #1
 8003884:	e7fc      	b.n	8003880 <shell_state_precheck+0x14>
 8003886:	bf00      	nop
 8003888:	0800f60c 	.word	0x0800f60c

0800388c <filters_set>:
{
 800388c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003890:	4e2c      	ldr	r6, [pc, #176]	; (8003944 <filters_set+0xb8>)
 8003892:	461f      	mov	r7, r3
 8003894:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <filters_set+0xbc>)
 8003896:	1af6      	subs	r6, r6, r3
	int cnt = all ? log_sources_count() : argc;
 8003898:	1e15      	subs	r5, r2, #0
{
 800389a:	b085      	sub	sp, #20
 800389c:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	int cnt = all ? log_sources_count() : argc;
 80038a0:	bf14      	ite	ne
 80038a2:	462b      	movne	r3, r5
 80038a4:	4633      	moveq	r3, r6
 80038a6:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
 80038a8:	684b      	ldr	r3, [r1, #4]
 80038aa:	795b      	ldrb	r3, [r3, #5]
{
 80038ac:	4680      	mov	r8, r0
 80038ae:	4689      	mov	r9, r1
	if (!backend->cb->active) {
 80038b0:	b91b      	cbnz	r3, 80038ba <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
 80038b2:	4a26      	ldr	r2, [pc, #152]	; (800394c <filters_set+0xc0>)
 80038b4:	2104      	movs	r1, #4
 80038b6:	f007 fdf0 	bl	800b49a <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
 80038ba:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8003958 <filters_set+0xcc>
	for (i = 0U; i < modules_cnt; i++) {
 80038be:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
 80038c0:	9b02      	ldr	r3, [sp, #8]
 80038c2:	429c      	cmp	r4, r3
 80038c4:	db02      	blt.n	80038cc <filters_set+0x40>
}
 80038c6:	b005      	add	sp, #20
 80038c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
 80038cc:	b3bd      	cbz	r5, 800393e <filters_set+0xb2>
 80038ce:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
 80038d2:	2300      	movs	r3, #0
 80038d4:	429e      	cmp	r6, r3
 80038d6:	d107      	bne.n	80038e8 <filters_set+0x5c>
			shell_error(shell, "%s: unknown source name.", argv[i]);
 80038d8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 80038dc:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <filters_set+0xc4>)
 80038de:	2102      	movs	r1, #2
 80038e0:	4640      	mov	r0, r8
 80038e2:	f007 fdda 	bl	800b49a <shell_fprintf>
 80038e6:	e023      	b.n	8003930 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
 80038e8:	4619      	mov	r1, r3
 80038ea:	2000      	movs	r0, #0
 80038ec:	9303      	str	r3, [sp, #12]
 80038ee:	f7ff f981 	bl	8002bf4 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	4659      	mov	r1, fp
 80038f6:	f009 ffa1 	bl	800d83c <strncmp>
 80038fa:	9b03      	ldr	r3, [sp, #12]
 80038fc:	b9d0      	cbnz	r0, 8003934 <filters_set+0xa8>
			return i;
 80038fe:	461a      	mov	r2, r3
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
 8003900:	2100      	movs	r1, #0
 8003902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003904:	b212      	sxth	r2, r2
 8003906:	4648      	mov	r0, r9
 8003908:	f7ff f982 	bl	8002c10 <z_impl_log_filter_set>
			if (set_lvl != level) {
 800390c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800390e:	4283      	cmp	r3, r0
 8003910:	4683      	mov	fp, r0
 8003912:	d00d      	beq.n	8003930 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
 8003914:	b985      	cbnz	r5, 8003938 <filters_set+0xac>
					log_source_name_get(
 8003916:	4621      	mov	r1, r4
 8003918:	4628      	mov	r0, r5
 800391a:	f7ff f96b 	bl	8002bf4 <log_source_name_get>
 800391e:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
 8003920:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
 8003924:	9200      	str	r2, [sp, #0]
 8003926:	2104      	movs	r1, #4
 8003928:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <filters_set+0xc8>)
 800392a:	4640      	mov	r0, r8
 800392c:	f007 fdb5 	bl	800b49a <shell_fprintf>
	for (i = 0; i < cnt; i++) {
 8003930:	3401      	adds	r4, #1
 8003932:	e7c5      	b.n	80038c0 <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
 8003934:	3301      	adds	r3, #1
 8003936:	e7cd      	b.n	80038d4 <filters_set+0x48>
						CONFIG_LOG_DOMAIN_ID, i) :
 8003938:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800393c:	e7f0      	b.n	8003920 <filters_set+0x94>
 800393e:	4622      	mov	r2, r4
 8003940:	e7de      	b.n	8003900 <filters_set+0x74>
 8003942:	bf00      	nop
 8003944:	0800de10 	.word	0x0800de10
 8003948:	0800ddb8 	.word	0x0800ddb8
 800394c:	0800f630 	.word	0x0800f630
 8003950:	0800f65b 	.word	0x0800f65b
 8003954:	0800f645 	.word	0x0800f645
 8003958:	0800eaf4 	.word	0x0800eaf4

0800395c <log_enable>:
{
 800395c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
 8003960:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8003964:	f8df a050 	ldr.w	sl, [pc, #80]	; 80039b8 <log_enable+0x5c>
{
 8003968:	4606      	mov	r6, r0
 800396a:	4688      	mov	r8, r1
 800396c:	4691      	mov	r9, r2
 800396e:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
 8003970:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
 8003972:	f85a 1b04 	ldr.w	r1, [sl], #4
 8003976:	2204      	movs	r2, #4
 8003978:	4658      	mov	r0, fp
 800397a:	f009 ff5f 	bl	800d83c <strncmp>
 800397e:	4604      	mov	r4, r0
 8003980:	b170      	cbz	r0, 80039a0 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
 8003982:	3701      	adds	r7, #1
 8003984:	2f05      	cmp	r7, #5
 8003986:	d1f4      	bne.n	8003972 <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
 8003988:	686b      	ldr	r3, [r5, #4]
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <log_enable+0x58>)
 800398c:	2102      	movs	r1, #2
 800398e:	4630      	mov	r0, r6
 8003990:	f007 fd83 	bl	800b49a <shell_fprintf>
 8003994:	f06f 0407 	mvn.w	r4, #7
}
 8003998:	4620      	mov	r0, r4
 800399a:	b003      	add	sp, #12
 800399c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
 80039a0:	9700      	str	r7, [sp, #0]
 80039a2:	f105 0308 	add.w	r3, r5, #8
 80039a6:	f1a9 0202 	sub.w	r2, r9, #2
 80039aa:	4641      	mov	r1, r8
 80039ac:	4630      	mov	r0, r6
 80039ae:	f7ff ff6d 	bl	800388c <filters_set>
	return 0;
 80039b2:	e7f1      	b.n	8003998 <log_enable+0x3c>
 80039b4:	0800f675 	.word	0x0800f675
 80039b8:	0800eaf4 	.word	0x0800eaf4

080039bc <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
 80039bc:	b513      	push	{r0, r1, r4, lr}
 80039be:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
 80039c0:	f004 fe4c 	bl	800865c <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
 80039c4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80039c8:	9201      	str	r2, [sp, #4]
 80039ca:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80039ce:	9200      	str	r2, [sp, #0]
 80039d0:	0e03      	lsrs	r3, r0, #24
 80039d2:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <cmd_kernel_version+0x28>)
 80039d4:	4620      	mov	r0, r4
 80039d6:	2100      	movs	r1, #0
 80039d8:	f007 fd5f 	bl	800b49a <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
 80039dc:	2000      	movs	r0, #0
 80039de:	b002      	add	sp, #8
 80039e0:	bd10      	pop	{r4, pc}
 80039e2:	bf00      	nop
 80039e4:	0800f81c 	.word	0x0800f81c

080039e8 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
 80039e8:	b510      	push	{r4, lr}
 80039ea:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
 80039ec:	f009 fbf1 	bl	800d1d2 <z_impl_k_uptime_ticks>
 80039f0:	220a      	movs	r2, #10
 80039f2:	2300      	movs	r3, #0
 80039f4:	f7fd f85a 	bl	8000aac <__aeabi_uldivmod>
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
 80039f8:	4a03      	ldr	r2, [pc, #12]	; (8003a08 <cmd_kernel_uptime+0x20>)
 80039fa:	4603      	mov	r3, r0
 80039fc:	2100      	movs	r1, #0
 80039fe:	4620      	mov	r0, r4
 8003a00:	f007 fd4b 	bl	800b49a <shell_fprintf>
	return 0;
}
 8003a04:	2000      	movs	r0, #0
 8003a06:	bd10      	pop	{r4, pc}
 8003a08:	0800f835 	.word	0x0800f835

08003a0c <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
 8003a0c:	b510      	push	{r4, lr}
 8003a0e:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
 8003a10:	f002 fa00 	bl	8005e14 <sys_clock_elapsed>
 8003a14:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <cmd_kernel_threads+0x2c>)
 8003a16:	4603      	mov	r3, r0
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f007 fd3d 	bl	800b49a <shell_fprintf>
	shell_print(shell, "Threads:");
 8003a20:	4a06      	ldr	r2, [pc, #24]	; (8003a3c <cmd_kernel_threads+0x30>)
 8003a22:	4620      	mov	r0, r4
 8003a24:	2100      	movs	r1, #0
 8003a26:	f007 fd38 	bl	800b49a <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
 8003a2a:	4805      	ldr	r0, [pc, #20]	; (8003a40 <cmd_kernel_threads+0x34>)
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	f004 fcb5 	bl	800839c <k_thread_foreach>
	return 0;
}
 8003a32:	2000      	movs	r0, #0
 8003a34:	bd10      	pop	{r4, pc}
 8003a36:	bf00      	nop
 8003a38:	0800f844 	.word	0x0800f844
 8003a3c:	0800f863 	.word	0x0800f863
 8003a40:	08003aa9 	.word	0x08003aa9

08003a44 <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
 8003a44:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
 8003a46:	4601      	mov	r1, r0
{
 8003a48:	b087      	sub	sp, #28
 8003a4a:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
 8003a4c:	4812      	ldr	r0, [pc, #72]	; (8003a98 <cmd_kernel_stacks+0x54>)
 8003a4e:	f004 fca5 	bl	800839c <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <cmd_kernel_stacks+0x58>)
		unused = 0;
 8003a54:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
 8003a56:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003a5a:	29aa      	cmp	r1, #170	; 0xaa
 8003a5c:	d103      	bne.n	8003a66 <cmd_kernel_stacks+0x22>
				unused++;
 8003a5e:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
 8003a60:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8003a64:	d1f7      	bne.n	8003a56 <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
 8003a66:	f5c3 6006 	rsb	r0, r3, #2144	; 0x860
 8003a6a:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8003a6e:	2500      	movs	r5, #0
 8003a70:	2264      	movs	r2, #100	; 0x64
 8003a72:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8003a76:	9101      	str	r1, [sp, #4]
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <cmd_kernel_stacks+0x5c>)
 8003a7a:	9500      	str	r5, [sp, #0]
 8003a7c:	4342      	muls	r2, r0
 8003a7e:	4620      	mov	r0, r4
 8003a80:	fbb2 f2f1 	udiv	r2, r2, r1
 8003a84:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8003a88:	4a06      	ldr	r2, [pc, #24]	; (8003aa4 <cmd_kernel_stacks+0x60>)
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	f007 fd05 	bl	800b49a <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
 8003a90:	4628      	mov	r0, r5
 8003a92:	b007      	add	sp, #28
 8003a94:	bd30      	pop	{r4, r5, pc}
 8003a96:	bf00      	nop
 8003a98:	08003b91 	.word	0x08003b91
 8003a9c:	20004ba0 	.word	0x20004ba0
 8003aa0:	20004b80 	.word	0x20004b80
 8003aa4:	0800f86d 	.word	0x0800f86d

08003aa8 <shell_tdata_dump>:
{
 8003aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aaa:	b087      	sub	sp, #28
	size_t size = thread->stack_info.size;
 8003aac:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
 8003ab4:	f009 f972 	bl	800cd9c <k_thread_name_get>
 8003ab8:	4606      	mov	r6, r0
	return z_impl_k_current_get();
 8003aba:	f005 fac9 	bl	8009050 <z_impl_k_current_get>
	shell_print(shell, "%s%p %-10s",
 8003abe:	4b25      	ldr	r3, [pc, #148]	; (8003b54 <shell_tdata_dump+0xac>)
 8003ac0:	4925      	ldr	r1, [pc, #148]	; (8003b58 <shell_tdata_dump+0xb0>)
 8003ac2:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <shell_tdata_dump+0xb4>)
 8003ac4:	2e00      	cmp	r6, #0
 8003ac6:	bf08      	it	eq
 8003ac8:	461e      	moveq	r6, r3
 8003aca:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <shell_tdata_dump+0xb8>)
 8003acc:	e9cd 4600 	strd	r4, r6, [sp]
 8003ad0:	4284      	cmp	r4, r0
 8003ad2:	bf08      	it	eq
 8003ad4:	460b      	moveq	r3, r1
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	2100      	movs	r1, #0
 8003ada:	f007 fcde 	bl	800b49a <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %d",
 8003ade:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003ae2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ae6:	f994 300e 	ldrsb.w	r3, [r4, #14]
 8003aea:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <shell_tdata_dump+0xbc>)
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	2100      	movs	r1, #0
 8003af0:	7b23      	ldrb	r3, [r4, #12]
 8003af2:	4628      	mov	r0, r5
 8003af4:	f007 fcd1 	bl	800b49a <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
 8003af8:	4620      	mov	r0, r4
 8003afa:	f004 fc97 	bl	800842c <k_thread_state_str>
 8003afe:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8003b02:	4606      	mov	r6, r0
 8003b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b06:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003b0a:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <shell_tdata_dump+0xc0>)
 8003b0c:	4633      	mov	r3, r6
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4628      	mov	r0, r5
 8003b12:	f007 fcc2 	bl	800b49a <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
 8003b16:	a905      	add	r1, sp, #20
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f009 f943 	bl	800cda4 <z_impl_k_thread_stack_space_get>
	if (ret) {
 8003b1e:	4601      	mov	r1, r0
 8003b20:	b138      	cbz	r0, 8003b32 <shell_tdata_dump+0x8a>
		shell_print(shell,
 8003b22:	4603      	mov	r3, r0
 8003b24:	4a11      	ldr	r2, [pc, #68]	; (8003b6c <shell_tdata_dump+0xc4>)
 8003b26:	2100      	movs	r1, #0
 8003b28:	4628      	mov	r0, r5
 8003b2a:	f007 fcb6 	bl	800b49a <shell_fprintf>
}
 8003b2e:	b007      	add	sp, #28
 8003b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
 8003b32:	9a05      	ldr	r2, [sp, #20]
 8003b34:	2364      	movs	r3, #100	; 0x64
 8003b36:	1ab8      	subs	r0, r7, r2
		shell_print(shell,
 8003b38:	e9cd 2000 	strd	r2, r0, [sp]
		pcnt = ((size - unused) * 100U) / size;
 8003b3c:	4343      	muls	r3, r0
		shell_print(shell,
 8003b3e:	4a0c      	ldr	r2, [pc, #48]	; (8003b70 <shell_tdata_dump+0xc8>)
		pcnt = ((size - unused) * 100U) / size;
 8003b40:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
 8003b44:	4628      	mov	r0, r5
 8003b46:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	f007 fca5 	bl	800b49a <shell_fprintf>
}
 8003b50:	e7ed      	b.n	8003b2e <shell_tdata_dump+0x86>
 8003b52:	bf00      	nop
 8003b54:	0800f8b3 	.word	0x0800f8b3
 8003b58:	08010783 	.word	0x08010783
 8003b5c:	0800f8b6 	.word	0x0800f8b6
 8003b60:	0800f4bc 	.word	0x0800f4bc
 8003b64:	0800f8c2 	.word	0x0800f8c2
 8003b68:	0800f8ec 	.word	0x0800f8ec
 8003b6c:	0800f903 	.word	0x0800f903
 8003b70:	0800f930 	.word	0x0800f930

08003b74 <cmd_kernel_cycles>:
{
 8003b74:	b510      	push	{r4, lr}
 8003b76:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8003b78:	f002 f96a 	bl	8005e50 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
 8003b7c:	4a03      	ldr	r2, [pc, #12]	; (8003b8c <cmd_kernel_cycles+0x18>)
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2100      	movs	r1, #0
 8003b82:	4620      	mov	r0, r4
 8003b84:	f007 fc89 	bl	800b49a <shell_fprintf>
}
 8003b88:	2000      	movs	r0, #0
 8003b8a:	bd10      	pop	{r4, pc}
 8003b8c:	0800f967 	.word	0x0800f967

08003b90 <shell_stack_dump>:
{
 8003b90:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
 8003b92:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
 8003b96:	b08b      	sub	sp, #44	; 0x2c
 8003b98:	4604      	mov	r4, r0
 8003b9a:	460d      	mov	r5, r1
 8003b9c:	a909      	add	r1, sp, #36	; 0x24
 8003b9e:	f009 f901 	bl	800cda4 <z_impl_k_thread_stack_space_get>
	if (ret) {
 8003ba2:	b138      	cbz	r0, 8003bb4 <shell_stack_dump+0x24>
		shell_print(shell,
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <shell_stack_dump+0x60>)
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4628      	mov	r0, r5
 8003bac:	f007 fc75 	bl	800b49a <shell_fprintf>
}
 8003bb0:	b00b      	add	sp, #44	; 0x2c
 8003bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb4:	9007      	str	r0, [sp, #28]
	tname = k_thread_name_get((struct k_thread *)thread);
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f009 f8f0 	bl	800cd9c <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
 8003bbc:	9f09      	ldr	r7, [sp, #36]	; 0x24
	shell_print((const struct shell *)user_data,
 8003bbe:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <shell_stack_dump+0x64>)
 8003bc0:	9907      	ldr	r1, [sp, #28]
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	bf18      	it	ne
 8003bc6:	4602      	movne	r2, r0
	pcnt = ((size - unused) * 100U) / size;
 8003bc8:	eba6 0c07 	sub.w	ip, r6, r7
 8003bcc:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
 8003bce:	e9cd 2600 	strd	r2, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
 8003bd2:	fb03 f30c 	mul.w	r3, r3, ip
	shell_print((const struct shell *)user_data,
 8003bd6:	e9cd 7c02 	strd	r7, ip, [sp, #8]
	pcnt = ((size - unused) * 100U) / size;
 8003bda:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
 8003bde:	4a06      	ldr	r2, [pc, #24]	; (8003bf8 <shell_stack_dump+0x68>)
 8003be0:	e9cd 6304 	strd	r6, r3, [sp, #16]
 8003be4:	4628      	mov	r0, r5
 8003be6:	4623      	mov	r3, r4
 8003be8:	f007 fc57 	bl	800b49a <shell_fprintf>
 8003bec:	e7e0      	b.n	8003bb0 <shell_stack_dump+0x20>
 8003bee:	bf00      	nop
 8003bf0:	0800f903 	.word	0x0800f903
 8003bf4:	0800f8b3 	.word	0x0800f8b3
 8003bf8:	0800f97d 	.word	0x0800f97d

08003bfc <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
 8003bfc:	4603      	mov	r3, r0
	const char *name = dev->name;
 8003bfe:	6800      	ldr	r0, [r0, #0]
{
 8003c00:	b510      	push	{r4, lr}
 8003c02:	460c      	mov	r4, r1
 8003c04:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
 8003c06:	b108      	cbz	r0, 8003c0c <get_device_name+0x10>
 8003c08:	7802      	ldrb	r2, [r0, #0]
 8003c0a:	b922      	cbnz	r2, 8003c16 <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
 8003c0c:	4a02      	ldr	r2, [pc, #8]	; (8003c18 <get_device_name+0x1c>)
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f005 ffee 	bl	8009bf0 <sniprintf>
 8003c14:	4620      	mov	r0, r4
		name = buf;
	}

	return name;
}
 8003c16:	bd10      	pop	{r4, pc}
 8003c18:	0800fa50 	.word	0x0800fa50

08003c1c <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
 8003c1c:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
 8003c1e:	680c      	ldr	r4, [r1, #0]
 8003c20:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
 8003c24:	f7ff ffea 	bl	8003bfc <get_device_name>
 8003c28:	4a03      	ldr	r2, [pc, #12]	; (8003c38 <cmd_device_list_visitor+0x1c>)
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f007 fc33 	bl	800b49a <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
 8003c34:	2000      	movs	r0, #0
 8003c36:	bd10      	pop	{r4, pc}
 8003c38:	0800fa55 	.word	0x0800fa55

08003c3c <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
 8003c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c40:	b08a      	sub	sp, #40	; 0x28
 8003c42:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
 8003c44:	a801      	add	r0, sp, #4
 8003c46:	f004 f995 	bl	8007f74 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
 8003c4a:	9b01      	ldr	r3, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	; (8003cbc <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
 8003c4e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8003cc8 <cmd_device_list+0x8c>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
 8003c52:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8003ccc <cmd_device_list+0x90>
 8003c56:	f8df a078 	ldr.w	sl, [pc, #120]	; 8003cd0 <cmd_device_list+0x94>
	const struct device *devlist_end = devlist + devcnt;
 8003c5a:	2618      	movs	r6, #24
 8003c5c:	fb06 3600 	mla	r6, r6, r0, r3
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 8003c60:	2100      	movs	r1, #0
 8003c62:	4628      	mov	r0, r5
 8003c64:	f007 fc19 	bl	800b49a <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
 8003c68:	9c01      	ldr	r4, [sp, #4]
 8003c6a:	42b4      	cmp	r4, r6
 8003c6c:	d303      	bcc.n	8003c76 <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
 8003c6e:	2000      	movs	r0, #0
 8003c70:	b00a      	add	sp, #40	; 0x28
 8003c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
 8003c76:	af05      	add	r7, sp, #20
 8003c78:	4639      	mov	r1, r7
 8003c7a:	2214      	movs	r2, #20
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f7ff ffbd 	bl	8003bfc <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
 8003c82:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
 8003c84:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
 8003c86:	2100      	movs	r1, #0
 8003c88:	4628      	mov	r0, r5
 8003c8a:	f007 fc06 	bl	800b49a <shell_fprintf>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f009 f825 	bl	800ccde <z_device_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
 8003c94:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <cmd_device_list+0x84>)
 8003c96:	2800      	cmp	r0, #0
 8003c98:	bf14      	ite	ne
 8003c9a:	464b      	movne	r3, r9
 8003c9c:	4653      	moveq	r3, sl
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f007 fbfa 	bl	800b49a <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
 8003ca6:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 8003ca8:	4620      	mov	r0, r4
 8003caa:	4906      	ldr	r1, [pc, #24]	; (8003cc4 <cmd_device_list+0x88>)
			struct cmd_device_list_visitor_context ctx = {
 8003cac:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 8003cae:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
 8003cb0:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
 8003cb4:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 8003cb6:	f004 f995 	bl	8007fe4 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
 8003cba:	e7d6      	b.n	8003c6a <cmd_device_list+0x2e>
 8003cbc:	0800fa74 	.word	0x0800fa74
 8003cc0:	0800fa83 	.word	0x0800fa83
 8003cc4:	08003c1d 	.word	0x08003c1d
 8003cc8:	0800fa7e 	.word	0x0800fa7e
 8003ccc:	0800fa65 	.word	0x0800fa65
 8003cd0:	0800fa6b 	.word	0x0800fa6b

08003cd4 <device_get_config_level>:
{
 8003cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8003cda:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003d24 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8003cde:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8003ce2:	3101      	adds	r1, #1
{
 8003ce4:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8003ce6:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
 8003cea:	4606      	mov	r6, r0
	bool devices = false;
 8003cec:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8003cee:	45a0      	cmp	r8, r4
 8003cf0:	d803      	bhi.n	8003cfa <device_get_config_level+0x26>
}
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	b007      	add	sp, #28
 8003cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f008 ffef 	bl	800ccde <z_device_ready>
 8003d00:	4605      	mov	r5, r0
 8003d02:	b158      	cbz	r0, 8003d1c <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8003d04:	2214      	movs	r2, #20
 8003d06:	a901      	add	r1, sp, #4
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f7ff ff77 	bl	8003bfc <get_device_name>
 8003d0e:	464a      	mov	r2, r9
 8003d10:	4603      	mov	r3, r0
 8003d12:	2100      	movs	r1, #0
 8003d14:	4630      	mov	r0, r6
 8003d16:	f007 fbc0 	bl	800b49a <shell_fprintf>
			devices = true;
 8003d1a:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8003d1c:	3418      	adds	r4, #24
 8003d1e:	e7e6      	b.n	8003cee <device_get_config_level+0x1a>
 8003d20:	0800ed00 	.word	0x0800ed00
 8003d24:	0800fa8a 	.word	0x0800fa8a

08003d28 <cmd_device_levels>:
{
 8003d28:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
 8003d2a:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <cmd_device_levels+0x80>)
{
 8003d2c:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
 8003d2e:	2100      	movs	r1, #0
 8003d30:	f007 fbb3 	bl	800b49a <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
 8003d34:	2100      	movs	r1, #0
 8003d36:	4620      	mov	r0, r4
 8003d38:	f7ff ffcc 	bl	8003cd4 <device_get_config_level>
	if (ret == false) {
 8003d3c:	4601      	mov	r1, r0
 8003d3e:	b918      	cbnz	r0, 8003d48 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8003d40:	4a1a      	ldr	r2, [pc, #104]	; (8003dac <cmd_device_levels+0x84>)
 8003d42:	4620      	mov	r0, r4
 8003d44:	f007 fba9 	bl	800b49a <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
 8003d48:	4a19      	ldr	r2, [pc, #100]	; (8003db0 <cmd_device_levels+0x88>)
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f007 fba4 	bl	800b49a <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
 8003d52:	2101      	movs	r1, #1
 8003d54:	4620      	mov	r0, r4
 8003d56:	f7ff ffbd 	bl	8003cd4 <device_get_config_level>
	if (ret == false) {
 8003d5a:	4601      	mov	r1, r0
 8003d5c:	b918      	cbnz	r0, 8003d66 <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8003d5e:	4a13      	ldr	r2, [pc, #76]	; (8003dac <cmd_device_levels+0x84>)
 8003d60:	4620      	mov	r0, r4
 8003d62:	f007 fb9a 	bl	800b49a <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
 8003d66:	4a13      	ldr	r2, [pc, #76]	; (8003db4 <cmd_device_levels+0x8c>)
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f007 fb95 	bl	800b49a <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
 8003d70:	2102      	movs	r1, #2
 8003d72:	4620      	mov	r0, r4
 8003d74:	f7ff ffae 	bl	8003cd4 <device_get_config_level>
	if (ret == false) {
 8003d78:	4601      	mov	r1, r0
 8003d7a:	b918      	cbnz	r0, 8003d84 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8003d7c:	4a0b      	ldr	r2, [pc, #44]	; (8003dac <cmd_device_levels+0x84>)
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f007 fb8b 	bl	800b49a <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
 8003d84:	4a0c      	ldr	r2, [pc, #48]	; (8003db8 <cmd_device_levels+0x90>)
 8003d86:	2100      	movs	r1, #0
 8003d88:	4620      	mov	r0, r4
 8003d8a:	f007 fb86 	bl	800b49a <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
 8003d8e:	2103      	movs	r1, #3
 8003d90:	4620      	mov	r0, r4
 8003d92:	f7ff ff9f 	bl	8003cd4 <device_get_config_level>
	if (ret == false) {
 8003d96:	4601      	mov	r1, r0
 8003d98:	b918      	cbnz	r0, 8003da2 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8003d9a:	4a04      	ldr	r2, [pc, #16]	; (8003dac <cmd_device_levels+0x84>)
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f007 fb7c 	bl	800b49a <shell_fprintf>
}
 8003da2:	2000      	movs	r0, #0
 8003da4:	bd10      	pop	{r4, pc}
 8003da6:	bf00      	nop
 8003da8:	0800fa90 	.word	0x0800fa90
 8003dac:	0800fa9f 	.word	0x0800fa9f
 8003db0:	0800faa7 	.word	0x0800faa7
 8003db4:	0800fab6 	.word	0x0800fab6
 8003db8:	0800fac4 	.word	0x0800fac4

08003dbc <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
 8003dbc:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
 8003dbe:	6881      	ldr	r1, [r0, #8]
{
 8003dc0:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
 8003dc2:	3108      	adds	r1, #8
 8003dc4:	f001 fb82 	bl	80054cc <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
 8003dc8:	68a1      	ldr	r1, [r4, #8]
 8003dca:	4a03      	ldr	r2, [pc, #12]	; (8003dd8 <shell_internal_help_print+0x1c>)
 8003dcc:	4620      	mov	r0, r4
 8003dce:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
 8003dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
 8003dd4:	f001 bb02 	b.w	80053dc <z_shell_help_subcmd_print>
 8003dd8:	0800fb21 	.word	0x0800fb21

08003ddc <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8003ddc:	4901      	ldr	r1, [pc, #4]	; (8003de4 <z_cursor_next_line_move.isra.0+0x8>)
 8003dde:	f007 baa4 	b.w	800b32a <z_shell_raw_fprintf>
 8003de2:	bf00      	nop
 8003de4:	0800f965 	.word	0x0800f965

08003de8 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
 8003de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dea:	4604      	mov	r4, r0
	return ret;
}

static inline bool z_flag_history_exit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.history_exit == 1;
 8003dec:	6880      	ldr	r0, [r0, #8]
 8003dee:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
 8003df2:	061b      	lsls	r3, r3, #24
{
 8003df4:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
 8003df6:	d505      	bpl.n	8003e04 <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
 8003df8:	2100      	movs	r1, #0
 8003dfa:	f007 fad7 	bl	800b3ac <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
 8003dfe:	68e0      	ldr	r0, [r4, #12]
 8003e00:	f007 ff08 	bl	800bc14 <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
 8003e04:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	b963      	cbnz	r3, 8003e24 <history_handle+0x3c>
		if (up) {
 8003e0a:	b39d      	cbz	r5, 8003e74 <history_handle+0x8c>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
 8003e0c:	68a0      	ldr	r0, [r4, #8]
 8003e0e:	303e      	adds	r0, #62	; 0x3e
 8003e10:	f007 fa85 	bl	800b31e <z_shell_strlen>

			if (cmd_len) {
 8003e14:	68a3      	ldr	r3, [r4, #8]
 8003e16:	b378      	cbz	r0, 8003e78 <history_handle+0x90>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 8003e18:	f103 013e 	add.w	r1, r3, #62	; 0x3e
 8003e1c:	f503 709f 	add.w	r0, r3, #318	; 0x13e
 8003e20:	f009 fd04 	bl	800d82c <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
 8003e24:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
 8003e26:	68e0      	ldr	r0, [r4, #12]
 8003e28:	f10d 0306 	add.w	r3, sp, #6
 8003e2c:	323e      	adds	r2, #62	; 0x3e
 8003e2e:	4629      	mov	r1, r5
 8003e30:	f007 fef3 	bl	800bc1a <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
 8003e34:	b958      	cbnz	r0, 8003e4e <history_handle+0x66>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
 8003e36:	68a0      	ldr	r0, [r4, #8]
 8003e38:	f500 719f 	add.w	r1, r0, #318	; 0x13e
 8003e3c:	303e      	adds	r0, #62	; 0x3e
 8003e3e:	f009 fcf5 	bl	800d82c <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
 8003e42:	68a0      	ldr	r0, [r4, #8]
 8003e44:	303e      	adds	r0, #62	; 0x3e
 8003e46:	f007 fa6a 	bl	800b31e <z_shell_strlen>
 8003e4a:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f007 fcd3 	bl	800b7fa <z_shell_op_cursor_home_move>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 8003e54:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <history_handle+0x98>)
 8003e56:	490b      	ldr	r1, [pc, #44]	; (8003e84 <history_handle+0x9c>)
 8003e58:	6960      	ldr	r0, [r4, #20]
 8003e5a:	f007 fa66 	bl	800b32a <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f001 f834 	bl	8004ecc <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
 8003e64:	68a3      	ldr	r3, [r4, #8]
 8003e66:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003e6a:	875a      	strh	r2, [r3, #58]	; 0x3a
	shell->ctx->cmd_buff_len = len;
 8003e6c:	871a      	strh	r2, [r3, #56]	; 0x38
	z_shell_op_cond_next_line(shell);
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f007 fc6c 	bl	800b74c <z_shell_op_cond_next_line>
}
 8003e74:	b003      	add	sp, #12
 8003e76:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
 8003e78:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
 8003e7c:	e7d2      	b.n	8003e24 <history_handle+0x3c>
 8003e7e:	bf00      	nop
 8003e80:	0800fe08 	.word	0x0800fe08
 8003e84:	0800fa80 	.word	0x0800fa80

08003e88 <state_set.constprop.0>:
static inline void state_set(const struct shell *shell, enum shell_state state)
 8003e88:	b510      	push	{r4, lr}
	shell->ctx->state = state;
 8003e8a:	6883      	ldr	r3, [r0, #8]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	711a      	strb	r2, [r3, #4]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = 0;
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
	shell->ctx->internal.flags.last_nl = val;
}

static inline bool z_flag_print_noinit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.print_noinit == 1;
 8003e98:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
		if (z_flag_print_noinit_get(shell)) {
 8003e9c:	039b      	lsls	r3, r3, #14
static inline void state_set(const struct shell *shell, enum shell_state state)
 8003e9e:	4604      	mov	r4, r0
		if (z_flag_print_noinit_get(shell)) {
 8003ea0:	d50b      	bpl.n	8003eba <state_set.constprop.0+0x32>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <state_set.constprop.0+0x3c>)
 8003ea6:	4a08      	ldr	r2, [pc, #32]	; (8003ec8 <state_set.constprop.0+0x40>)
 8003ea8:	f007 fd50 	bl	800b94c <z_shell_fprintf>

static inline bool z_flag_print_noinit_set(const struct shell *shell, bool val)
{
	bool ret;

	Z_SHELL_SET_FLAG_ATOMIC(shell, print_noinit, val, ret);
 8003eac:	68a0      	ldr	r0, [r4, #8]
 8003eae:	f46f 3100 	mvn.w	r1, #131072	; 0x20000
 8003eb2:	f500 7017 	add.w	r0, r0, #604	; 0x25c
 8003eb6:	f007 fa0d 	bl	800b2d4 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
 8003eba:	4620      	mov	r0, r4
}
 8003ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
 8003ec0:	f001 b936 	b.w	8005130 <z_shell_print_prompt_and_cmd>
 8003ec4:	0800fb2f 	.word	0x0800fb2f
 8003ec8:	0800fa80 	.word	0x0800fa80

08003ecc <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
 8003ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
 8003ed0:	2300      	movs	r3, #0
{
 8003ed2:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
 8003ed4:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
 8003ed8:	6883      	ldr	r3, [r0, #8]
{
 8003eda:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
 8003edc:	333e      	adds	r3, #62	; 0x3e
 8003ede:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
 8003ee0:	f007 fc91 	bl	800b806 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f007 fc1b 	bl	800b720 <z_shell_cursor_in_empty_line>
 8003eea:	b910      	cbnz	r0, 8003ef2 <execute+0x26>
		z_cursor_next_line_move(shell);
 8003eec:	6960      	ldr	r0, [r4, #20]
 8003eee:	f7ff ff75 	bl	8003ddc <z_cursor_next_line_move.isra.0>
__ssp_bos_icheck3(memset, void *, int)
 8003ef2:	68a0      	ldr	r0, [r4, #8]
 8003ef4:	2214      	movs	r2, #20
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	3008      	adds	r0, #8
 8003efa:	f009 fc15 	bl	800d728 <memset>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
 8003efe:	4620      	mov	r0, r4
 8003f00:	f000 ff46 	bl	8004d90 <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
 8003f04:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
 8003f06:	68e0      	ldr	r0, [r4, #12]
 8003f08:	8f0a      	ldrh	r2, [r1, #56]	; 0x38
 8003f0a:	313e      	adds	r1, #62	; 0x3e
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
 8003f0c:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
 8003f0e:	f007 febb 	bl	800bc88 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
 8003f12:	4620      	mov	r0, r4
 8003f14:	f008 f86b 	bl	800bfee <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
 8003f18:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
 8003f1c:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
 8003f1e:	46b2      	mov	sl, r6
 8003f20:	af11      	add	r7, sp, #68	; 0x44
 8003f22:	9602      	str	r6, [sp, #8]
 8003f24:	4635      	mov	r5, r6
 8003f26:	46b3      	mov	fp, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
 8003f28:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8003f2c:	2a01      	cmp	r2, #1
 8003f2e:	f000 80d6 	beq.w	80040de <execute+0x212>
 8003f32:	2b0b      	cmp	r3, #11
 8003f34:	f240 80ae 	bls.w	8004094 <execute+0x1c8>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
 8003f38:	9906      	ldr	r1, [sp, #24]
 8003f3a:	2902      	cmp	r1, #2
 8003f3c:	f040 80ae 	bne.w	800409c <execute+0x1d0>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
 8003f40:	4b89      	ldr	r3, [pc, #548]	; (8004168 <execute+0x29c>)
 8003f42:	4a8a      	ldr	r2, [pc, #552]	; (800416c <execute+0x2a0>)
 8003f44:	e015      	b.n	8003f72 <execute+0xa6>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
 8003f46:	2302      	movs	r3, #2
 8003f48:	9a03      	ldr	r2, [sp, #12]
 8003f4a:	4639      	mov	r1, r7
 8003f4c:	a806      	add	r0, sp, #24
 8003f4e:	f000 fe03 	bl	8004b58 <z_shell_make_argv>
		cmd_buf = (char *)argvp[1];
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	9303      	str	r3, [sp, #12]
		if (argc == 0) {
 8003f56:	9b06      	ldr	r3, [sp, #24]
 8003f58:	b92b      	cbnz	r3, 8003f66 <execute+0x9a>
			return -ENOEXEC;
 8003f5a:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
 8003f5e:	4628      	mov	r0, r5
 8003f60:	b01f      	add	sp, #124	; 0x7c
 8003f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d107      	bne.n	8003f7a <execute+0xae>
 8003f6a:	b130      	cbz	r0, 8003f7a <execute+0xae>
			z_shell_fprintf(shell, SHELL_ERROR,
 8003f6c:	4a80      	ldr	r2, [pc, #512]	; (8004170 <execute+0x2a4>)
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2102      	movs	r1, #2
 8003f72:	4620      	mov	r0, r4
 8003f74:	f007 fcea 	bl	800b94c <z_shell_fprintf>
 8003f78:	e7ef      	b.n	8003f5a <execute+0x8e>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 8003f7a:	9b05      	ldr	r3, [sp, #20]
 8003f7c:	b34b      	cbz	r3, 8003fd2 <execute+0x106>
		    z_shell_help_request(argvp[0])) {
 8003f7e:	6838      	ldr	r0, [r7, #0]
 8003f80:	f001 fac8 	bl	8005514 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 8003f84:	b198      	cbz	r0, 8003fae <execute+0xe2>
			if (help_entry.help) {
 8003f86:	b166      	cbz	r6, 8003fa2 <execute+0xd6>
				shell->ctx->active_cmd = help_entry;
 8003f88:	68a5      	ldr	r5, [r4, #8]
 8003f8a:	960d      	str	r6, [sp, #52]	; 0x34
 8003f8c:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
 8003f8e:	ae0c      	add	r6, sp, #48	; 0x30
 8003f90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f94:	6833      	ldr	r3, [r6, #0]
 8003f96:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f7ff ff0f 	bl	8003dbc <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
 8003f9e:	2501      	movs	r5, #1
 8003fa0:	e7dd      	b.n	8003f5e <execute+0x92>
			z_shell_fprintf(shell, SHELL_ERROR,
 8003fa2:	4a74      	ldr	r2, [pc, #464]	; (8004174 <execute+0x2a8>)
		z_shell_fprintf(shell, SHELL_ERROR,
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f007 fcd0 	bl	800b94c <z_shell_fprintf>
		return false;
 8003fac:	e7d5      	b.n	8003f5a <execute+0x8e>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
 8003fae:	9b05      	ldr	r3, [sp, #20]
 8003fb0:	b17b      	cbz	r3, 8003fd2 <execute+0x106>
			status = z_shell_wildcard_process(shell, entry,
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f001 fc02 	bl	80057c0 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
 8003fbc:	2802      	cmp	r0, #2
 8003fbe:	f000 808e 	beq.w	80040de <execute+0x212>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
 8003fc2:	2803      	cmp	r0, #3
 8003fc4:	d005      	beq.n	8003fd2 <execute+0x106>
				++cmd_lvl;
 8003fc6:	9b05      	ldr	r3, [sp, #20]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	9302      	str	r3, [sp, #8]
				continue;
 8003fd0:	e7aa      	b.n	8003f28 <execute+0x5c>
		if (has_last_handler == false) {
 8003fd2:	f1ba 0f00 	cmp.w	sl, #0
 8003fd6:	d105      	bne.n	8003fe4 <execute+0x118>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
 8003fd8:	6839      	ldr	r1, [r7, #0]
 8003fda:	aa07      	add	r2, sp, #28
 8003fdc:	4658      	mov	r0, fp
 8003fde:	f007 fb04 	bl	800b5ea <z_shell_find_cmd>
 8003fe2:	4605      	mov	r5, r0
		argvp++;
 8003fe4:	3704      	adds	r7, #4
		args_left--;
 8003fe6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (entry) {
 8003fea:	2d00      	cmp	r5, #0
 8003fec:	d040      	beq.n	8004070 <execute+0x1a4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
 8003fee:	9a02      	ldr	r2, [sp, #8]
 8003ff0:	68eb      	ldr	r3, [r5, #12]
 8003ff2:	b142      	cbz	r2, 8004006 <execute+0x13a>
 8003ff4:	b313      	cbz	r3, 800403c <execute+0x170>
		z_shell_op_cursor_end_move(shell);
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f007 fc05 	bl	800b806 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f007 fba5 	bl	800b74c <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
 8004002:	4a5d      	ldr	r2, [pc, #372]	; (8004178 <execute+0x2ac>)
 8004004:	e7ce      	b.n	8003fa4 <execute+0xd8>
	if (entry->handler) {
 8004006:	b1cb      	cbz	r3, 800403c <execute+0x170>
		*active_cmd = *entry;
 8004008:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
 800400a:	f8dd 9014 	ldr.w	r9, [sp, #20]
		*active_cmd = *entry;
 800400e:	46ae      	mov	lr, r5
 8004010:	f103 0c08 	add.w	ip, r3, #8
 8004014:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004018:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800401c:	f8de 3000 	ldr.w	r3, [lr]
 8004020:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
 8004024:	68ab      	ldr	r3, [r5, #8]
 8004026:	b94b      	cbnz	r3, 800403c <execute+0x170>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
 8004028:	7c6b      	ldrb	r3, [r5, #17]
 800402a:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
 800402c:	bf01      	itttt	eq
 800402e:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
 8004032:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
 8004036:	f108 38ff 	addeq.w	r8, r8, #4294967295	; 0xffffffff
			*lvl = *lvl + 1;
 800403a:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
 800403c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8004040:	f1bc 0f00 	cmp.w	ip, #0
 8004044:	d008      	beq.n	8004058 <execute+0x18c>
		*help_entry = *entry;
 8004046:	46ae      	mov	lr, r5
 8004048:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800404c:	ae0c      	add	r6, sp, #48	; 0x30
 800404e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004050:	f8de 3000 	ldr.w	r3, [lr]
 8004054:	6033      	str	r3, [r6, #0]
 8004056:	4666      	mov	r6, ip
 8004058:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
 800405a:	f1b8 0f00 	cmp.w	r8, #0
 800405e:	d103      	bne.n	8004068 <execute+0x19c>
 8004060:	9b06      	ldr	r3, [sp, #24]
 8004062:	2b02      	cmp	r3, #2
 8004064:	f47f af60 	bne.w	8003f28 <execute+0x5c>
			cmd_lvl++;
 8004068:	9b05      	ldr	r3, [sp, #20]
 800406a:	3301      	adds	r3, #1
 800406c:	9305      	str	r3, [sp, #20]
 800406e:	e75b      	b.n	8003f28 <execute+0x5c>
			if (cmd_lvl == 0 &&
 8004070:	9b05      	ldr	r3, [sp, #20]
 8004072:	b963      	cbnz	r3, 800408e <execute+0x1c2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
 8004074:	68a3      	ldr	r3, [r4, #8]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	b10b      	cbz	r3, 800407e <execute+0x1b2>
				(!z_shell_in_select_mode(shell) ||
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	b93b      	cbnz	r3, 800408e <execute+0x1c2>
				z_shell_fprintf(shell, SHELL_ERROR,
 800407e:	4b3f      	ldr	r3, [pc, #252]	; (800417c <execute+0x2b0>)
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	4a3f      	ldr	r2, [pc, #252]	; (8004180 <execute+0x2b4>)
 8004084:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004086:	2102      	movs	r1, #2
 8004088:	4620      	mov	r0, r4
 800408a:	f007 fc5f 	bl	800b94c <z_shell_fprintf>
			has_last_handler = true;
 800408e:	f04f 0a01 	mov.w	sl, #1
 8004092:	e7e2      	b.n	800405a <execute+0x18e>
		&& args_left > 0) {
 8004094:	f1b8 0f00 	cmp.w	r8, #0
 8004098:	f47f af55 	bne.w	8003f46 <execute+0x7a>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
 800409c:	9b02      	ldr	r3, [sp, #8]
 800409e:	b14b      	cbz	r3, 80040b4 <execute+0x1e8>
		z_shell_wildcard_finalize(shell);
 80040a0:	4620      	mov	r0, r4
 80040a2:	f007 ffc8 	bl	800c036 <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
 80040a6:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
 80040a8:	230c      	movs	r3, #12
 80040aa:	323e      	adds	r2, #62	; 0x3e
 80040ac:	a911      	add	r1, sp, #68	; 0x44
 80040ae:	a805      	add	r0, sp, #20
 80040b0:	f000 fd52 	bl	8004b58 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
 80040b4:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
 80040b6:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
 80040b8:	ab1e      	add	r3, sp, #120	; 0x78
 80040ba:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80040be:	2200      	movs	r2, #0
 80040c0:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
 80040c4:	6943      	ldr	r3, [r0, #20]
 80040c6:	b973      	cbnz	r3, 80040e6 <execute+0x21a>
			if (help_entry->help == NULL) {
 80040c8:	2e00      	cmp	r6, #0
 80040ca:	f43f af46 	beq.w	8003f5a <execute+0x8e>
			if (help_entry->help != shell->ctx->active_cmd.help) {
 80040ce:	68c3      	ldr	r3, [r0, #12]
 80040d0:	42b3      	cmp	r3, r6
 80040d2:	f43f af61 	beq.w	8003f98 <execute+0xcc>
				shell->ctx->active_cmd = *help_entry;
 80040d6:	960d      	str	r6, [sp, #52]	; 0x34
 80040d8:	f100 0508 	add.w	r5, r0, #8
 80040dc:	e757      	b.n	8003f8e <execute+0xc2>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
 80040de:	9b05      	ldr	r3, [sp, #20]
 80040e0:	2b0b      	cmp	r3, #11
 80040e2:	d9db      	bls.n	800409c <execute+0x1d0>
 80040e4:	e728      	b.n	8003f38 <execute+0x6c>
	if (shell->ctx->active_cmd.args.mandatory) {
 80040e6:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
 80040e8:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
 80040ec:	b1b3      	cbz	r3, 800411c <execute+0x250>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
 80040ee:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
 80040f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040f4:	29ff      	cmp	r1, #255	; 0xff
 80040f6:	bf18      	it	ne
 80040f8:	460a      	movne	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
 80040fa:	429d      	cmp	r5, r3
 80040fc:	d302      	bcc.n	8004104 <execute+0x238>
 80040fe:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
 8004100:	429d      	cmp	r5, r3
 8004102:	d90b      	bls.n	800411c <execute+0x250>
		z_shell_fprintf(shell, SHELL_ERROR,
 8004104:	6883      	ldr	r3, [r0, #8]
 8004106:	4a1f      	ldr	r2, [pc, #124]	; (8004184 <execute+0x2b8>)
 8004108:	2102      	movs	r1, #2
 800410a:	4620      	mov	r0, r4
 800410c:	f007 fc1e 	bl	800b94c <z_shell_fprintf>
			shell_internal_help_print(shell);
 8004110:	4620      	mov	r0, r4
 8004112:	f7ff fe53 	bl	8003dbc <shell_internal_help_print>
		return -EINVAL;
 8004116:	f06f 0515 	mvn.w	r5, #21
 800411a:	e720      	b.n	8003f5e <execute+0x92>
	Z_SHELL_SET_FLAG_ATOMIC(shell, cmd_ctx, val, ret);
 800411c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004120:	f500 7017 	add.w	r0, r0, #604	; 0x25c
 8004124:	f007 f8c7 	bl	800b2b6 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
 8004128:	68a0      	ldr	r0, [r4, #8]
 800412a:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
 800412e:	f007 f956 	bl	800b3de <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
 8004132:	68a3      	ldr	r3, [r4, #8]
 8004134:	aa11      	add	r2, sp, #68	; 0x44
 8004136:	4629      	mov	r1, r5
 8004138:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	4620      	mov	r0, r4
 8004140:	4798      	blx	r3
 8004142:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8004144:	68a0      	ldr	r0, [r4, #8]
 8004146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800414a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800414e:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
 8004152:	f007 f8f7 	bl	800b344 <k_mutex_lock.constprop.0.isra.0>
 8004156:	68a0      	ldr	r0, [r4, #8]
 8004158:	f46f 3180 	mvn.w	r1, #65536	; 0x10000
 800415c:	f500 7017 	add.w	r0, r0, #604	; 0x25c
 8004160:	f007 f8b8 	bl	800b2d4 <atomic_and>
	return ret;
 8004164:	e6fb      	b.n	8003f5e <execute+0x92>
 8004166:	bf00      	nop
 8004168:	0800fbe8 	.word	0x0800fbe8
 800416c:	0800fa8c 	.word	0x0800fa8c
 8004170:	0800fb73 	.word	0x0800fb73
 8004174:	0800fb87 	.word	0x0800fb87
 8004178:	0800fba5 	.word	0x0800fba5
 800417c:	0800fbd4 	.word	0x0800fbd4
 8004180:	0800fea8 	.word	0x0800fea8
 8004184:	0800fc0c 	.word	0x0800fc0c

08004188 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
 8004188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418c:	ed2d 8b02 	vpush	{d8}
 8004190:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(shell, processing, val, ret);
 8004192:	6880      	ldr	r0, [r0, #8]
 8004194:	b0a9      	sub	sp, #164	; 0xa4
 8004196:	2110      	movs	r1, #16
 8004198:	f500 7017 	add.w	r0, r0, #604	; 0x25c
 800419c:	f007 f88b 	bl	800b2b6 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
 80041a0:	68a3      	ldr	r3, [r4, #8]
 80041a2:	791b      	ldrb	r3, [r3, #4]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	f040 8304 	bne.w	80047b2 <shell_process+0x62a>
	size_t count = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	9309      	str	r3, [sp, #36]	; 0x24
		(void)shell->iface->api->read(shell->iface, &data,
 80041ae:	6860      	ldr	r0, [r4, #4]
 80041b0:	6803      	ldr	r3, [r0, #0]
 80041b2:	2201      	movs	r2, #1
 80041b4:	691d      	ldr	r5, [r3, #16]
 80041b6:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 80041ba:	ab09      	add	r3, sp, #36	; 0x24
 80041bc:	47a8      	blx	r5
		if (count == 0) {
 80041be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 82f6 	beq.w	80047b2 <shell_process+0x62a>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 80041c6:	f99d 2023 	ldrsb.w	r2, [sp, #35]	; 0x23
		if (ascii_filter(data) != 0) {
 80041ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 80041ce:	2a00      	cmp	r2, #0
 80041d0:	dbed      	blt.n	80041ae <shell_process+0x26>
		switch (shell->ctx->receive_state) {
 80041d2:	68a0      	ldr	r0, [r4, #8]
 80041d4:	7941      	ldrb	r1, [r0, #5]
 80041d6:	2901      	cmp	r1, #1
 80041d8:	f000 826f 	beq.w	80046ba <shell_process+0x532>
 80041dc:	2902      	cmp	r1, #2
 80041de:	f000 8282 	beq.w	80046e6 <shell_process+0x55e>
 80041e2:	2900      	cmp	r1, #0
 80041e4:	f040 82e3 	bne.w	80047ae <shell_process+0x626>
	if ((data != '\r') && (data != '\n')) {
 80041e8:	2b0d      	cmp	r3, #13
	shell->ctx->internal.flags.last_nl = val;
 80041ea:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
 80041ee:	d01b      	beq.n	8004228 <shell_process+0xa0>
 80041f0:	2b0a      	cmp	r3, #10
 80041f2:	d019      	beq.n	8004228 <shell_process+0xa0>
 80041f4:	f361 220f 	bfi	r2, r1, #8, #8
 80041f8:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
			switch (data) {
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	d04c      	beq.n	800429a <shell_process+0x112>
 8004200:	d833      	bhi.n	800426a <shell_process+0xe2>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0d3      	beq.n	80041ae <shell_process+0x26>
 8004206:	2b08      	cmp	r3, #8
 8004208:	f000 81c7 	beq.w	800459a <shell_process+0x412>
				if (isprint((int) data)) {
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	49b5      	ldr	r1, [pc, #724]	; (80044e4 <shell_process+0x35c>)
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	5c52      	ldrb	r2, [r2, r1]
 8004214:	f012 0f97 	tst.w	r2, #151	; 0x97
 8004218:	f000 81cb 	beq.w	80045b2 <shell_process+0x42a>
					z_flag_history_exit_set(shell, true);
 800421c:	2101      	movs	r1, #1
 800421e:	f007 f8c5 	bl	800b3ac <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
 8004222:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8004226:	e0e1      	b.n	80043ec <shell_process+0x264>
	if ((z_flag_last_nl_get(shell) == 0U) ||
 8004228:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 800422c:	d005      	beq.n	800423a <shell_process+0xb2>
	return shell->ctx->internal.flags.last_nl;
 800422e:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
 8004232:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004236:	4293      	cmp	r3, r2
 8004238:	d1e0      	bne.n	80041fc <shell_process+0x74>
	shell->ctx->internal.flags.last_nl = val;
 800423a:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
				if (!shell->ctx->cmd_buff_len) {
 800423e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8004240:	f363 220f 	bfi	r2, r3, #8, #8
 8004244:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
 8004248:	b959      	cbnz	r1, 8004262 <shell_process+0xda>
	z_flag_history_exit_set(shell, false);
 800424a:	f007 f8af 	bl	800b3ac <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
 800424e:	68e0      	ldr	r0, [r4, #12]
 8004250:	f007 fce0 	bl	800bc14 <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
 8004254:	6960      	ldr	r0, [r4, #20]
 8004256:	f7ff fdc1 	bl	8003ddc <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
 800425a:	4620      	mov	r0, r4
 800425c:	f7ff fe14 	bl	8003e88 <state_set.constprop.0>
		break;
 8004260:	e7a5      	b.n	80041ae <shell_process+0x26>
					(void)execute(shell);
 8004262:	4620      	mov	r0, r4
 8004264:	f7ff fe32 	bl	8003ecc <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
 8004268:	e7f7      	b.n	800425a <shell_process+0xd2>
 800426a:	2b1b      	cmp	r3, #27
 800426c:	d012      	beq.n	8004294 <shell_process+0x10c>
 800426e:	2b7f      	cmp	r3, #127	; 0x7f
 8004270:	d1cc      	bne.n	800420c <shell_process+0x84>
	return shell->ctx->internal.flags.echo == 1;
 8004272:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
				if (z_flag_echo_get(shell)) {
 8004276:	075f      	lsls	r7, r3, #29
 8004278:	d599      	bpl.n	80041ae <shell_process+0x26>
					z_flag_history_exit_set(shell, true);
 800427a:	2101      	movs	r1, #1
 800427c:	f007 f896 	bl	800b3ac <z_flag_history_exit_set.isra.0>
	return shell->ctx->internal.flags.mode_delete == 1;
 8004280:	68a3      	ldr	r3, [r4, #8]
 8004282:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
					if (z_flag_mode_delete_get(shell)) {
 8004286:	065e      	lsls	r6, r3, #25
 8004288:	f100 818f 	bmi.w	80045aa <shell_process+0x422>
		z_shell_op_char_delete(shell);
 800428c:	4620      	mov	r0, r4
 800428e:	f007 fb9d 	bl	800b9cc <z_shell_op_char_delete>
		break;
 8004292:	e78c      	b.n	80041ae <shell_process+0x26>
	shell->ctx->receive_state = state;
 8004294:	2301      	movs	r3, #1
 8004296:	7143      	strb	r3, [r0, #5]
}
 8004298:	e789      	b.n	80041ae <shell_process+0x26>
	return shell->ctx->internal.flags.echo == 1;
 800429a:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
				if (z_flag_echo_get(shell) &&
 800429e:	075d      	lsls	r5, r3, #29
 80042a0:	d585      	bpl.n	80041ae <shell_process+0x26>
					z_flag_history_exit_set(shell, true);
 80042a2:	2101      	movs	r1, #1
 80042a4:	f007 f882 	bl	800b3ac <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
 80042a8:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
 80042aa:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80042ac:	2bff      	cmp	r3, #255	; 0xff
 80042ae:	f43f af7e 	beq.w	80041ae <shell_process+0x26>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80042b2:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 80042b4:	f100 013e 	add.w	r1, r0, #62	; 0x3e
 80042b8:	f500 709f 	add.w	r0, r0, #318	; 0x13e
 80042bc:	f009 fa0c 	bl	800d6d8 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
 80042c0:	68a2      	ldr	r2, [r4, #8]
 80042c2:	8f53      	ldrh	r3, [r2, #58]	; 0x3a
 80042c4:	4413      	add	r3, r2
 80042c6:	2500      	movs	r5, #0
 80042c8:	f883 513e 	strb.w	r5, [r3, #318]	; 0x13e
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
 80042cc:	a91b      	add	r1, sp, #108	; 0x6c
 80042ce:	230c      	movs	r3, #12
 80042d0:	f502 729f 	add.w	r2, r2, #318	; 0x13e
 80042d4:	a80b      	add	r0, sp, #44	; 0x2c
 80042d6:	f000 fc3f 	bl	8004b58 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
 80042da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042dc:	290c      	cmp	r1, #12
 80042de:	f63f af66 	bhi.w	80041ae <shell_process+0x26>
	(*argv)[*argc] = NULL;
 80042e2:	ab28      	add	r3, sp, #160	; 0xa0
 80042e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80042e8:	f843 5c34 	str.w	r5, [r3, #-52]
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 80042ec:	b151      	cbz	r1, 8004304 <shell_process+0x17c>
	int space = isspace((int)shell->ctx->cmd_buff[
 80042ee:	68a3      	ldr	r3, [r4, #8]
 80042f0:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80042f2:	4413      	add	r3, r2
 80042f4:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80042f8:	4b7b      	ldr	r3, [pc, #492]	; (80044e8 <shell_process+0x360>)
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 80042fa:	5cd3      	ldrb	r3, [r2, r3]
 80042fc:	0718      	lsls	r0, r3, #28
 80042fe:	d451      	bmi.n	80043a4 <shell_process+0x21c>
 8004300:	2901      	cmp	r1, #1
 8004302:	d14e      	bne.n	80043a2 <shell_process+0x21a>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
 8004304:	2500      	movs	r5, #0
 8004306:	950a      	str	r5, [sp, #40]	; 0x28
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 8004308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800430a:	aa28      	add	r2, sp, #160	; 0xa0
 800430c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
 8004310:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 8004312:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
 8004316:	4650      	mov	r0, sl
 8004318:	f007 f801 	bl	800b31e <z_shell_strlen>
	size_t first = 0;
 800431c:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
 800431e:	4681      	mov	r9, r0
	*longest = 0U;
 8004320:	9603      	str	r6, [sp, #12]
	size_t idx = 0;
 8004322:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
 8004324:	aa16      	add	r2, sp, #88	; 0x58
 8004326:	4639      	mov	r1, r7
 8004328:	4628      	mov	r0, r5
 800432a:	f000 fcd1 	bl	8004cd0 <z_shell_cmd_get>
 800432e:	4683      	mov	fp, r0
 8004330:	2800      	cmp	r0, #0
 8004332:	d143      	bne.n	80043bc <shell_process+0x234>
	if (cnt == 1) {
 8004334:	2e01      	cmp	r6, #1
 8004336:	d162      	bne.n	80043fe <shell_process+0x276>
		autocomplete(shell, cmd, argv[arg_idx], first);
 8004338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800433a:	aa28      	add	r2, sp, #160	; 0xa0
 800433c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
 8004340:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8004344:	f006 ffeb 	bl	800b31e <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
 8004348:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
 800434a:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
 800434c:	3208      	adds	r2, #8
 800434e:	4641      	mov	r1, r8
 8004350:	4628      	mov	r0, r5
 8004352:	f000 fcbd 	bl	8004cd0 <z_shell_cmd_get>
 8004356:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
 8004358:	6800      	ldr	r0, [r0, #0]
 800435a:	f006 ffe0 	bl	800b31e <z_shell_strlen>
	if (cmd_len != arg_len) {
 800435e:	4286      	cmp	r6, r0
 8004360:	d006      	beq.n	8004370 <shell_process+0x1e8>
		z_shell_op_completion_insert(shell,
 8004362:	6829      	ldr	r1, [r5, #0]
 8004364:	1b82      	subs	r2, r0, r6
 8004366:	b292      	uxth	r2, r2
 8004368:	4431      	add	r1, r6
 800436a:	4620      	mov	r0, r4
 800436c:	f007 fb2c 	bl	800b9c8 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
 8004370:	68a0      	ldr	r0, [r4, #8]
 8004372:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8004374:	4403      	add	r3, r0
 8004376:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800437a:	4b5b      	ldr	r3, [pc, #364]	; (80044e8 <shell_process+0x360>)
 800437c:	5cd1      	ldrb	r1, [r2, r3]
 800437e:	f011 0108 	ands.w	r1, r1, #8
 8004382:	d137      	bne.n	80043f4 <shell_process+0x26c>
	return shell->ctx->internal.flags.insert_mode == 1;
 8004384:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
		if (z_flag_insert_mode_get(shell)) {
 8004388:	07da      	lsls	r2, r3, #31
 800438a:	d52e      	bpl.n	80043ea <shell_process+0x262>
			z_flag_insert_mode_set(shell, false);
 800438c:	f007 f818 	bl	800b3c0 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
 8004390:	2120      	movs	r1, #32
 8004392:	4620      	mov	r0, r4
 8004394:	f000 fe98 	bl	80050c8 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
 8004398:	68a0      	ldr	r0, [r4, #8]
 800439a:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
 800439c:	f007 f810 	bl	800b3c0 <z_flag_insert_mode_set.isra.0>
				break;
 80043a0:	e705      	b.n	80041ae <shell_process+0x26>
	search_argc = space ? *argc : *argc - 1;
 80043a2:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
 80043a4:	2000      	movs	r0, #0
 80043a6:	ab0c      	add	r3, sp, #48	; 0x30
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	9001      	str	r0, [sp, #4]
 80043ac:	ab0a      	add	r3, sp, #40	; 0x28
 80043ae:	aa1b      	add	r2, sp, #108	; 0x6c
 80043b0:	f007 f932 	bl	800b618 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
 80043b4:	4605      	mov	r5, r0
 80043b6:	2800      	cmp	r0, #0
 80043b8:	d1a6      	bne.n	8004308 <shell_process+0x180>
 80043ba:	e6f8      	b.n	80041ae <shell_process+0x26>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 80043bc:	f8db 0000 	ldr.w	r0, [fp]
 80043c0:	464a      	mov	r2, r9
 80043c2:	4651      	mov	r1, sl
 80043c4:	f009 fa3a 	bl	800d83c <strncmp>
		if (is_candidate) {
 80043c8:	b968      	cbnz	r0, 80043e6 <shell_process+0x25e>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
 80043ca:	f8db 0000 	ldr.w	r0, [fp]
 80043ce:	f7fc fcfd 	bl	8000dcc <strlen>
 80043d2:	9b03      	ldr	r3, [sp, #12]
 80043d4:	4283      	cmp	r3, r0
 80043d6:	bf38      	it	cc
 80043d8:	4603      	movcc	r3, r0
 80043da:	b29b      	uxth	r3, r3
				*first_idx = idx;
 80043dc:	2e00      	cmp	r6, #0
 80043de:	bf08      	it	eq
 80043e0:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
 80043e2:	9303      	str	r3, [sp, #12]
			(*cnt)++;
 80043e4:	3601      	adds	r6, #1
		idx++;
 80043e6:	3701      	adds	r7, #1
 80043e8:	e79c      	b.n	8004324 <shell_process+0x19c>
			z_shell_op_char_insert(shell, ' ');
 80043ea:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
 80043ec:	4620      	mov	r0, r4
 80043ee:	f000 fe6b 	bl	80050c8 <z_shell_op_char_insert>
 80043f2:	e6dc      	b.n	80041ae <shell_process+0x26>
		z_shell_op_cursor_move(shell, 1);
 80043f4:	2101      	movs	r1, #1
 80043f6:	4620      	mov	r0, r4
 80043f8:	f007 f9db 	bl	800b7b2 <z_shell_op_cursor_move>
 80043fc:	e6d7      	b.n	80041ae <shell_process+0x26>
	} else if (cnt > 1) {
 80043fe:	f67f aed6 	bls.w	80041ae <shell_process+0x26>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 8004402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004404:	aa28      	add	r2, sp, #160	; 0xa0
 8004406:	eb02 0383 	add.w	r3, r2, r3, lsl #2
		shell->ctx->vt100_ctx.printed_cmd = 0;
 800440a:	46c1      	mov	r9, r8
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 800440c:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
 8004410:	4650      	mov	r0, sl
 8004412:	f006 ff84 	bl	800b31e <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 8004416:	68a3      	ldr	r3, [r4, #8]
 8004418:	9604      	str	r6, [sp, #16]
 800441a:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	size_t str_len = z_shell_strlen(str);
 800441e:	ee08 0a90 	vmov	s17, r0
	longest_option += z_shell_strlen(tab);
 8004422:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80044ec <shell_process+0x364>
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
 8004426:	68a2      	ldr	r2, [r4, #8]
 8004428:	4649      	mov	r1, r9
 800442a:	3208      	adds	r2, #8
 800442c:	4628      	mov	r0, r5
 800442e:	f000 fc4f 	bl	8004cd0 <z_shell_cmd_get>
		idx++;
 8004432:	f109 0901 	add.w	r9, r9, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
 8004436:	4607      	mov	r7, r0
		if (str && match->syntax &&
 8004438:	f1ba 0f00 	cmp.w	sl, #0
 800443c:	d158      	bne.n	80044f0 <shell_process+0x368>
		tab_item_print(shell, match->syntax, longest);
 800443e:	683f      	ldr	r7, [r7, #0]
	if (option == NULL) {
 8004440:	2f00      	cmp	r7, #0
 8004442:	d160      	bne.n	8004506 <shell_process+0x37e>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 8004444:	68a2      	ldr	r2, [r4, #8]
 8004446:	8617      	strh	r7, [r2, #48]	; 0x30
	while (cnt) {
 8004448:	9b04      	ldr	r3, [sp, #16]
 800444a:	3b01      	subs	r3, #1
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	d1ea      	bne.n	8004426 <shell_process+0x29e>
	z_cursor_next_line_move(shell);
 8004450:	6960      	ldr	r0, [r4, #20]
 8004452:	f7ff fcc3 	bl	8003ddc <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
 8004456:	4620      	mov	r0, r4
 8004458:	f000 fe6a 	bl	8005130 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
 800445c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800445e:	aa28      	add	r2, sp, #160	; 0xa0
 8004460:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
 8004464:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
 8004468:	f853 0c34 	ldr.w	r0, [r3, #-52]
 800446c:	f006 ff57 	bl	800b31e <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
 8004470:	4641      	mov	r1, r8
 8004472:	aa11      	add	r2, sp, #68	; 0x44
	uint16_t arg_len = z_shell_strlen(arg);
 8004474:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
 8004476:	4628      	mov	r0, r5
 8004478:	f000 fc2a 	bl	8004cd0 <z_shell_cmd_get>
 800447c:	4680      	mov	r8, r0
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 800447e:	68a0      	ldr	r0, [r4, #8]
 8004480:	f8d8 1000 	ldr.w	r1, [r8]
 8004484:	22ff      	movs	r2, #255	; 0xff
 8004486:	f500 709f 	add.w	r0, r0, #318	; 0x13e
 800448a:	f009 f9eb 	bl	800d864 <strncpy>
	*str = match->syntax;
 800448e:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
 8004492:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
 8004496:	aa16      	add	r2, sp, #88	; 0x58
 8004498:	4649      	mov	r1, r9
 800449a:	4628      	mov	r0, r5
 800449c:	f109 0b01 	add.w	fp, r9, #1
 80044a0:	f000 fc16 	bl	8004cd0 <z_shell_cmd_get>
		if (match2 == NULL) {
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d06b      	beq.n	8004580 <shell_process+0x3f8>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
 80044a8:	68a3      	ldr	r3, [r4, #8]
 80044aa:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 80044ac:	f503 739f 	add.w	r3, r3, #318	; 0x13e
	size_t common = 0;
 80044b0:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 80044b2:	f813 cb01 	ldrb.w	ip, [r3], #1
 80044b6:	5c81      	ldrb	r1, [r0, r2]
 80044b8:	4561      	cmp	r1, ip
 80044ba:	d105      	bne.n	80044c8 <shell_process+0x340>
 80044bc:	b121      	cbz	r1, 80044c8 <shell_process+0x340>
		common++;
 80044be:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 80044c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044c4:	428a      	cmp	r2, r1
 80044c6:	d1f4      	bne.n	80044b2 <shell_process+0x32a>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
 80044c8:	b10f      	cbz	r7, 80044ce <shell_process+0x346>
 80044ca:	42ba      	cmp	r2, r7
 80044cc:	db08      	blt.n	80044e0 <shell_process+0x358>
			common = (curr_common < common) ? curr_common : common;
 80044ce:	4542      	cmp	r2, r8
			--cnt;
 80044d0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
 80044d4:	bfa8      	it	ge
 80044d6:	4642      	movge	r2, r8
	while (cnt > 1) {
 80044d8:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
 80044da:	fa1f f882 	uxth.w	r8, r2
	while (cnt > 1) {
 80044de:	d04f      	beq.n	8004580 <shell_process+0x3f8>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
 80044e0:	46d9      	mov	r9, fp
 80044e2:	e7d8      	b.n	8004496 <shell_process+0x30e>
 80044e4:	08010d01 	.word	0x08010d01
 80044e8:	08010d02 	.word	0x08010d02
 80044ec:	0800f4bb 	.word	0x0800f4bb
		if (str && match->syntax &&
 80044f0:	6800      	ldr	r0, [r0, #0]
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d0a3      	beq.n	800443e <shell_process+0x2b6>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 80044f6:	ee18 2a90 	vmov	r2, s17
 80044fa:	4651      	mov	r1, sl
 80044fc:	f009 f99e 	bl	800d83c <strncmp>
		if (str && match->syntax &&
 8004500:	2800      	cmp	r0, #0
 8004502:	d09c      	beq.n	800443e <shell_process+0x2b6>
 8004504:	e78f      	b.n	8004426 <shell_process+0x29e>
	longest_option += z_shell_strlen(tab);
 8004506:	4658      	mov	r0, fp
 8004508:	f006 ff09 	bl	800b31e <z_shell_strlen>
 800450c:	9b03      	ldr	r3, [sp, #12]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 800450e:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
 8004510:	4418      	add	r0, r3
 8004512:	b282      	uxth	r2, r0
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 8004514:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
 8004516:	9207      	str	r2, [sp, #28]
			- z_shell_strlen(tab)) / longest_option;
 8004518:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 800451a:	9306      	str	r3, [sp, #24]
			- z_shell_strlen(tab)) / longest_option;
 800451c:	f006 feff 	bl	800b31e <z_shell_strlen>
 8004520:	9005      	str	r0, [sp, #20]
	diff = longest_option - z_shell_strlen(option);
 8004522:	4638      	mov	r0, r7
 8004524:	f006 fefb 	bl	800b31e <z_shell_strlen>
 8004528:	9a07      	ldr	r2, [sp, #28]
 800452a:	1a10      	subs	r0, r2, r0
 800452c:	b283      	uxth	r3, r0
 800452e:	ee08 3a10 	vmov	s16, r3
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8004532:	68a0      	ldr	r0, [r4, #8]
			- z_shell_strlen(tab)) / longest_option;
 8004534:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8004538:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
 800453c:	1a59      	subs	r1, r3, r1
 800453e:	fb91 f2f2 	sdiv	r2, r1, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8004542:	b292      	uxth	r2, r2
 8004544:	fbbc f1f2 	udiv	r1, ip, r2
 8004548:	fb02 c211 	mls	r2, r2, r1, ip
 800454c:	f10c 0e01 	add.w	lr, ip, #1
 8004550:	b292      	uxth	r2, r2
 8004552:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
 8004556:	b962      	cbnz	r2, 8004572 <shell_process+0x3ea>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
 8004558:	4a9c      	ldr	r2, [pc, #624]	; (80047cc <shell_process+0x644>)
 800455a:	9700      	str	r7, [sp, #0]
 800455c:	465b      	mov	r3, fp
 800455e:	2107      	movs	r1, #7
 8004560:	4620      	mov	r0, r4
 8004562:	f007 f9f3 	bl	800b94c <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
 8004566:	ee18 1a10 	vmov	r1, s16
 800456a:	4620      	mov	r0, r4
 800456c:	f000 fc64 	bl	8004e38 <z_shell_op_cursor_horiz_move>
 8004570:	e76a      	b.n	8004448 <shell_process+0x2c0>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
 8004572:	4a97      	ldr	r2, [pc, #604]	; (80047d0 <shell_process+0x648>)
 8004574:	463b      	mov	r3, r7
 8004576:	2107      	movs	r1, #7
 8004578:	4620      	mov	r0, r4
 800457a:	f007 f9e7 	bl	800b94c <z_shell_fprintf>
 800457e:	e7f2      	b.n	8004566 <shell_process+0x3de>
	if (common) {
 8004580:	f1b8 0f00 	cmp.w	r8, #0
 8004584:	f43f ae13 	beq.w	80041ae <shell_process+0x26>
		z_shell_op_completion_insert(shell, &completion[arg_len],
 8004588:	eba8 0207 	sub.w	r2, r8, r7
 800458c:	b292      	uxth	r2, r2
 800458e:	eb0a 0107 	add.w	r1, sl, r7
 8004592:	4620      	mov	r0, r4
 8004594:	f007 fa18 	bl	800b9c8 <z_shell_op_completion_insert>
 8004598:	e609      	b.n	80041ae <shell_process+0x26>
	return shell->ctx->internal.flags.echo == 1;
 800459a:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
				if (z_flag_echo_get(shell)) {
 800459e:	075b      	lsls	r3, r3, #29
 80045a0:	f57f ae05 	bpl.w	80041ae <shell_process+0x26>
					z_flag_history_exit_set(shell, true);
 80045a4:	2101      	movs	r1, #1
 80045a6:	f006 ff01 	bl	800b3ac <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
 80045aa:	4620      	mov	r0, r4
 80045ac:	f007 fa29 	bl	800ba02 <z_shell_op_char_backspace>
 80045b0:	e5fd      	b.n	80041ae <shell_process+0x26>
 80045b2:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
				} else if (z_flag_echo_get(shell)) {
 80045b6:	0755      	lsls	r5, r2, #29
 80045b8:	f57f adf9 	bpl.w	80041ae <shell_process+0x26>
	switch (data) {
 80045bc:	3b01      	subs	r3, #1
 80045be:	2b16      	cmp	r3, #22
 80045c0:	f63f adf5 	bhi.w	80041ae <shell_process+0x26>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <shell_process+0x444>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	08004785 	.word	0x08004785
 80045d0:	08004629 	.word	0x08004629
 80045d4:	08004631 	.word	0x08004631
 80045d8:	0800428d 	.word	0x0800428d
 80045dc:	08004779 	.word	0x08004779
 80045e0:	0800464f 	.word	0x0800464f
 80045e4:	080041af 	.word	0x080041af
 80045e8:	080041af 	.word	0x080041af
 80045ec:	080041af 	.word	0x080041af
 80045f0:	080041af 	.word	0x080041af
 80045f4:	08004657 	.word	0x08004657
 80045f8:	0800465f 	.word	0x0800465f
 80045fc:	080041af 	.word	0x080041af
 8004600:	0800467b 	.word	0x0800467b
 8004604:	080041af 	.word	0x080041af
 8004608:	08004685 	.word	0x08004685
 800460c:	080041af 	.word	0x080041af
 8004610:	080041af 	.word	0x080041af
 8004614:	080041af 	.word	0x080041af
 8004618:	080041af 	.word	0x080041af
 800461c:	08004689 	.word	0x08004689
 8004620:	080041af 	.word	0x080041af
 8004624:	080046ab 	.word	0x080046ab
		z_shell_op_left_arrow(shell);
 8004628:	4620      	mov	r0, r4
 800462a:	f007 f8f3 	bl	800b814 <z_shell_op_left_arrow>
		break;
 800462e:	e5be      	b.n	80041ae <shell_process+0x26>
		z_shell_op_cursor_end_move(shell);
 8004630:	4620      	mov	r0, r4
 8004632:	f007 f8e8 	bl	800b806 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
 8004636:	4620      	mov	r0, r4
 8004638:	f007 f872 	bl	800b720 <z_shell_cursor_in_empty_line>
 800463c:	b910      	cbnz	r0, 8004644 <shell_process+0x4bc>
			z_cursor_next_line_move(shell);
 800463e:	6960      	ldr	r0, [r4, #20]
 8004640:	f7ff fbcc 	bl	8003ddc <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
 8004644:	68a0      	ldr	r0, [r4, #8]
 8004646:	2101      	movs	r1, #1
 8004648:	f006 feb0 	bl	800b3ac <z_flag_history_exit_set.isra.0>
 800464c:	e605      	b.n	800425a <shell_process+0xd2>
		z_shell_op_right_arrow(shell);
 800464e:	4620      	mov	r0, r4
 8004650:	f007 f8e8 	bl	800b824 <z_shell_op_right_arrow>
		break;
 8004654:	e5ab      	b.n	80041ae <shell_process+0x26>
		z_shell_op_delete_from_cursor(shell);
 8004656:	4620      	mov	r0, r4
 8004658:	f007 f8ed 	bl	800b836 <z_shell_op_delete_from_cursor>
		break;
 800465c:	e5a7      	b.n	80041ae <shell_process+0x26>
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 800465e:	6960      	ldr	r0, [r4, #20]
 8004660:	4a5c      	ldr	r2, [pc, #368]	; (80047d4 <shell_process+0x64c>)
 8004662:	495b      	ldr	r1, [pc, #364]	; (80047d0 <shell_process+0x648>)
 8004664:	f006 fe61 	bl	800b32a <z_shell_raw_fprintf>
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 8004668:	6960      	ldr	r0, [r4, #20]
 800466a:	4a5b      	ldr	r2, [pc, #364]	; (80047d8 <shell_process+0x650>)
 800466c:	4958      	ldr	r1, [pc, #352]	; (80047d0 <shell_process+0x648>)
 800466e:	f006 fe5c 	bl	800b32a <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
 8004672:	4620      	mov	r0, r4
 8004674:	f000 fd5c 	bl	8005130 <z_shell_print_prompt_and_cmd>
		break;
 8004678:	e599      	b.n	80041ae <shell_process+0x26>
		history_handle(shell, false);
 800467a:	2100      	movs	r1, #0
		history_handle(shell, true);
 800467c:	4620      	mov	r0, r4
 800467e:	f7ff fbb3 	bl	8003de8 <history_handle>
		break;
 8004682:	e594      	b.n	80041ae <shell_process+0x26>
		history_handle(shell, true);
 8004684:	2101      	movs	r1, #1
 8004686:	e7f9      	b.n	800467c <shell_process+0x4f4>
		z_shell_op_cursor_home_move(shell);
 8004688:	4620      	mov	r0, r4
 800468a:	f007 f8b6 	bl	800b7fa <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
 800468e:	68a0      	ldr	r0, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 8004690:	2300      	movs	r3, #0
 8004692:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
	shell->ctx->cmd_buff_len = 0;
 8004696:	6383      	str	r3, [r0, #56]	; 0x38
		z_flag_history_exit_set(shell, true);
 8004698:	2101      	movs	r1, #1
 800469a:	f006 fe87 	bl	800b3ac <z_flag_history_exit_set.isra.0>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 800469e:	4a4f      	ldr	r2, [pc, #316]	; (80047dc <shell_process+0x654>)
 80046a0:	494b      	ldr	r1, [pc, #300]	; (80047d0 <shell_process+0x648>)
 80046a2:	6960      	ldr	r0, [r4, #20]
 80046a4:	f006 fe41 	bl	800b32a <z_shell_raw_fprintf>
}
 80046a8:	e581      	b.n	80041ae <shell_process+0x26>
		z_shell_op_word_remove(shell);
 80046aa:	4620      	mov	r0, r4
 80046ac:	f000 fc78 	bl	8004fa0 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
 80046b0:	68a0      	ldr	r0, [r4, #8]
 80046b2:	2101      	movs	r1, #1
 80046b4:	f006 fe7a 	bl	800b3ac <z_flag_history_exit_set.isra.0>
		break;
 80046b8:	e579      	b.n	80041ae <shell_process+0x26>
			if (data == '[') {
 80046ba:	2b5b      	cmp	r3, #91	; 0x5b
 80046bc:	d101      	bne.n	80046c2 <shell_process+0x53a>
	shell->ctx->receive_state = state;
 80046be:	2302      	movs	r3, #2
 80046c0:	e5e9      	b.n	8004296 <shell_process+0x10e>
	return shell->ctx->internal.flags.echo == 1;
 80046c2:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
			} else if (z_flag_echo_get(shell)) {
 80046c6:	0750      	lsls	r0, r2, #29
 80046c8:	d509      	bpl.n	80046de <shell_process+0x556>
	if (data == SHELL_VT100_ASCII_ALT_B) {
 80046ca:	2b62      	cmp	r3, #98	; 0x62
 80046cc:	d105      	bne.n	80046da <shell_process+0x552>
		z_shell_op_cursor_word_move(shell, -1);
 80046ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
 80046d2:	4620      	mov	r0, r4
 80046d4:	f000 fbc0 	bl	8004e58 <z_shell_op_cursor_word_move>
 80046d8:	e001      	b.n	80046de <shell_process+0x556>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
 80046da:	2b66      	cmp	r3, #102	; 0x66
 80046dc:	d0f9      	beq.n	80046d2 <shell_process+0x54a>
	shell->ctx->receive_state = state;
 80046de:	68a3      	ldr	r3, [r4, #8]
 80046e0:	2200      	movs	r2, #0
 80046e2:	715a      	strb	r2, [r3, #5]
}
 80046e4:	e563      	b.n	80041ae <shell_process+0x26>
	shell->ctx->receive_state = state;
 80046e6:	2200      	movs	r2, #0
 80046e8:	7142      	strb	r2, [r0, #5]
 80046ea:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
			if (!z_flag_echo_get(shell)) {
 80046ee:	0752      	lsls	r2, r2, #29
 80046f0:	f57f ad5d 	bpl.w	80041ae <shell_process+0x26>
			switch (data) {
 80046f4:	3b31      	subs	r3, #49	; 0x31
 80046f6:	2b1b      	cmp	r3, #27
 80046f8:	f63f ad59 	bhi.w	80041ae <shell_process+0x26>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <shell_process+0x57c>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004781 	.word	0x08004781
 8004708:	0800478d 	.word	0x0800478d
 800470c:	0800479f 	.word	0x0800479f
 8004710:	08004775 	.word	0x08004775
 8004714:	080041af 	.word	0x080041af
 8004718:	080041af 	.word	0x080041af
 800471c:	080041af 	.word	0x080041af
 8004720:	080041af 	.word	0x080041af
 8004724:	080041af 	.word	0x080041af
 8004728:	080041af 	.word	0x080041af
 800472c:	080041af 	.word	0x080041af
 8004730:	080041af 	.word	0x080041af
 8004734:	080041af 	.word	0x080041af
 8004738:	080041af 	.word	0x080041af
 800473c:	080041af 	.word	0x080041af
 8004740:	080041af 	.word	0x080041af
 8004744:	08004685 	.word	0x08004685
 8004748:	0800467b 	.word	0x0800467b
 800474c:	0800464f 	.word	0x0800464f
 8004750:	08004629 	.word	0x08004629
 8004754:	080041af 	.word	0x080041af
 8004758:	08004779 	.word	0x08004779
 800475c:	080041af 	.word	0x080041af
 8004760:	08004785 	.word	0x08004785
 8004764:	080041af 	.word	0x080041af
 8004768:	080041af 	.word	0x080041af
 800476c:	080041af 	.word	0x080041af
 8004770:	08004791 	.word	0x08004791
	shell->ctx->receive_state = state;
 8004774:	2303      	movs	r3, #3
 8004776:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_end_move(shell);
 8004778:	4620      	mov	r0, r4
 800477a:	f007 f844 	bl	800b806 <z_shell_op_cursor_end_move>
		break;
 800477e:	e516      	b.n	80041ae <shell_process+0x26>
	shell->ctx->receive_state = state;
 8004780:	2303      	movs	r3, #3
 8004782:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_home_move(shell);
 8004784:	4620      	mov	r0, r4
 8004786:	f007 f838 	bl	800b7fa <z_shell_op_cursor_home_move>
		break;
 800478a:	e510      	b.n	80041ae <shell_process+0x26>
	shell->ctx->receive_state = state;
 800478c:	2303      	movs	r3, #3
 800478e:	7143      	strb	r3, [r0, #5]
	return shell->ctx->internal.flags.insert_mode == 1;
 8004790:	f8d0 125c 	ldr.w	r1, [r0, #604]	; 0x25c
 8004794:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
 8004798:	f081 0101 	eor.w	r1, r1, #1
 800479c:	e5fe      	b.n	800439c <shell_process+0x214>
	shell->ctx->receive_state = state;
 800479e:	2303      	movs	r3, #3
 80047a0:	7143      	strb	r3, [r0, #5]
	return shell->ctx->internal.flags.echo == 1;
 80047a2:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
				if (z_flag_echo_get(shell)) {
 80047a6:	075b      	lsls	r3, r3, #29
 80047a8:	f57f ad01 	bpl.w	80041ae <shell_process+0x26>
 80047ac:	e56e      	b.n	800428c <shell_process+0x104>
	shell->ctx->receive_state = state;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e571      	b.n	8004296 <shell_process+0x10e>
	Z_SHELL_SET_FLAG_ATOMIC(shell, processing, val, ret);
 80047b2:	68a0      	ldr	r0, [r4, #8]
 80047b4:	f06f 0110 	mvn.w	r1, #16
 80047b8:	f500 7017 	add.w	r0, r0, #604	; 0x25c
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
 80047bc:	b029      	add	sp, #164	; 0xa4
 80047be:	ecbd 8b02 	vpop	{d8}
 80047c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c6:	f006 bd85 	b.w	800b2d4 <atomic_and>
 80047ca:	bf00      	nop
 80047cc:	0800fc27 	.word	0x0800fc27
 80047d0:	0800fa80 	.word	0x0800fa80
 80047d4:	0800fe11 	.word	0x0800fe11
 80047d8:	0800fe0c 	.word	0x0800fe0c
 80047dc:	0800fe08 	.word	0x0800fe08

080047e0 <shell_init>:
{
 80047e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e4:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
 80047e6:	6880      	ldr	r0, [r0, #8]
{
 80047e8:	460f      	mov	r7, r1
	if (shell->ctx->tid) {
 80047ea:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
{
 80047ee:	b088      	sub	sp, #32
 80047f0:	461e      	mov	r6, r3
	if (shell->ctx->tid) {
 80047f2:	2900      	cmp	r1, #0
 80047f4:	d175      	bne.n	80048e2 <shell_init+0x102>
__ssp_bos_icheck3(memset, void *, int)
 80047f6:	f44f 7242 	mov.w	r2, #776	; 0x308
 80047fa:	f008 ff95 	bl	800d728 <memset>
	shell->ctx->prompt = shell->default_prompt;
 80047fe:	68a3      	ldr	r3, [r4, #8]
 8004800:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
 8004802:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->prompt = shell->default_prompt;
 8004804:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
 8004806:	f007 faaa 	bl	800bd5e <z_shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
 800480a:	68a0      	ldr	r0, [r4, #8]
 800480c:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
	return z_impl_k_mutex_init(mutex);
 8004810:	f008 fb04 	bl	800ce1c <z_impl_k_mutex_init>
 8004814:	f44f 7828 	mov.w	r8, #672	; 0x2a0
 8004818:	f44f 7518 	mov.w	r5, #608	; 0x260
		k_poll_signal_init(&shell->ctx->signals[i]);
 800481c:	68a0      	ldr	r0, [r4, #8]
 800481e:	4428      	add	r0, r5
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
 8004820:	f008 fe87 	bl	800d532 <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
 8004824:	68a0      	ldr	r0, [r4, #8]
 8004826:	2200      	movs	r2, #0
 8004828:	1943      	adds	r3, r0, r5
 800482a:	2101      	movs	r1, #1
 800482c:	4440      	add	r0, r8
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 800482e:	3510      	adds	r5, #16
		k_poll_event_init(&shell->ctx->events[i],
 8004830:	f008 fe62 	bl	800d4f8 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8004834:	f5b5 7f28 	cmp.w	r5, #672	; 0x2a0
 8004838:	f108 0814 	add.w	r8, r8, #20
 800483c:	d1ee      	bne.n	800481c <shell_init+0x3c>
		shell->stats->log_lost_cnt = 0;
 800483e:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(shell, tx_rdy, val, ret);
 8004840:	68a0      	ldr	r0, [r4, #8]
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	2120      	movs	r1, #32
 8004848:	f500 7017 	add.w	r0, r0, #604	; 0x25c
 800484c:	f006 fd33 	bl	800b2b6 <atomic_or>
	Z_SHELL_SET_FLAG_ATOMIC(shell, echo, val, ret);
 8004850:	68a0      	ldr	r0, [r4, #8]
 8004852:	2104      	movs	r1, #4
 8004854:	f500 7017 	add.w	r0, r0, #604	; 0x25c
 8004858:	f006 fd2d 	bl	800b2b6 <atomic_or>
	Z_SHELL_SET_FLAG_ATOMIC(shell, obscure, val, ret);
 800485c:	68a0      	ldr	r0, [r4, #8]
 800485e:	f06f 0108 	mvn.w	r1, #8
 8004862:	f500 7017 	add.w	r0, r0, #604	; 0x25c
 8004866:	f006 fd35 	bl	800b2d4 <atomic_and>
	Z_SHELL_SET_FLAG_ATOMIC(shell, mode_delete, val, ret);
 800486a:	68a0      	ldr	r0, [r4, #8]
 800486c:	2140      	movs	r1, #64	; 0x40
 800486e:	f500 7017 	add.w	r0, r0, #604	; 0x25c
 8004872:	f006 fd20 	bl	800b2b6 <atomic_or>
	shell->ctx->vt100_ctx.cons.terminal_wid =
 8004876:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->vt100_ctx.cons.terminal_hei =
 8004878:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <shell_init+0x108>)
 800487a:	629a      	str	r2, [r3, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = z_shell_strlen(shell->ctx->prompt);
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	f006 fd4e 	bl	800b31e <z_shell_strlen>
 8004882:	68a3      	ldr	r3, [r4, #8]
	Z_SHELL_SET_FLAG_ATOMIC(shell, use_colors, val, ret);
 8004884:	2102      	movs	r1, #2
 8004886:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
 800488a:	f503 7017 	add.w	r0, r3, #604	; 0x25c
 800488e:	f006 fd12 	bl	800b2b6 <atomic_or>
	int ret = shell->iface->api->init(shell->iface, p_config,
 8004892:	6860      	ldr	r0, [r4, #4]
 8004894:	4a15      	ldr	r2, [pc, #84]	; (80048ec <shell_init+0x10c>)
 8004896:	6803      	ldr	r3, [r0, #0]
 8004898:	4639      	mov	r1, r7
 800489a:	681d      	ldr	r5, [r3, #0]
 800489c:	4623      	mov	r3, r4
 800489e:	47a8      	blx	r5
	if (ret == 0) {
 80048a0:	4605      	mov	r5, r0
 80048a2:	b9d0      	cbnz	r0, 80048da <shell_init+0xfa>
	shell->ctx->state = state;
 80048a4:	68a3      	ldr	r3, [r4, #8]
 80048a6:	2201      	movs	r2, #1
 80048a8:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
 80048aa:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80048ae:	2200      	movs	r2, #0
 80048b0:	2300      	movs	r3, #0
 80048b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80048b6:	230e      	movs	r3, #14
 80048b8:	9303      	str	r3, [sp, #12]
 80048ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048bc:	9504      	str	r5, [sp, #16]
 80048be:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80048c2:	9400      	str	r4, [sp, #0]
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <shell_init+0x110>)
 80048c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ca:	f003 fe4f 	bl	800856c <z_impl_k_thread_create>
	shell->ctx->tid = tid;
 80048ce:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
 80048d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
 80048d2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
	return z_impl_k_thread_name_set(thread, str);
 80048d6:	f003 fd99 	bl	800840c <z_impl_k_thread_name_set>
}
 80048da:	4628      	mov	r0, r5
 80048dc:	b008      	add	sp, #32
 80048de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EALREADY;
 80048e2:	f06f 0577 	mvn.w	r5, #119	; 0x77
 80048e6:	e7f8      	b.n	80048da <shell_init+0xfa>
 80048e8:	00500018 	.word	0x00500018
 80048ec:	0800b349 	.word	0x0800b349
 80048f0:	08004941 	.word	0x08004941

080048f4 <shell_start>:
{
 80048f4:	b510      	push	{r4, lr}
 80048f6:	4604      	mov	r4, r0
	return shell->ctx->state;
 80048f8:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
 80048fa:	7903      	ldrb	r3, [r0, #4]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d119      	bne.n	8004934 <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8004900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004908:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
 800490c:	f006 fd1a 	bl	800b344 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
 8004910:	2100      	movs	r1, #0
 8004912:	4620      	mov	r0, r4
 8004914:	f000 fae2 	bl	8004edc <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
 8004918:	4908      	ldr	r1, [pc, #32]	; (800493c <shell_start+0x48>)
 800491a:	6960      	ldr	r0, [r4, #20]
 800491c:	f006 fd05 	bl	800b32a <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
 8004920:	4620      	mov	r0, r4
 8004922:	f7ff fab1 	bl	8003e88 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
 8004926:	68a0      	ldr	r0, [r4, #8]
 8004928:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
 800492c:	f006 fd57 	bl	800b3de <k_mutex_unlock.isra.0>
	return 0;
 8004930:	2000      	movs	r0, #0
}
 8004932:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8004934:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004938:	e7fb      	b.n	8004932 <shell_start+0x3e>
 800493a:	bf00      	nop
 800493c:	0800f964 	.word	0x0800f964

08004940 <shell_thread>:
{
 8004940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004944:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
 8004946:	6840      	ldr	r0, [r0, #4]
{
 8004948:	9201      	str	r2, [sp, #4]
	err = shell->iface->api->enable(shell->iface, false);
 800494a:	6803      	ldr	r3, [r0, #0]
{
 800494c:	460d      	mov	r5, r1
	err = shell->iface->api->enable(shell->iface, false);
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2100      	movs	r1, #0
 8004952:	4798      	blx	r3
	if (err != 0) {
 8004954:	2800      	cmp	r0, #0
 8004956:	d14d      	bne.n	80049f4 <shell_thread+0xb4>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend) {
 8004958:	b125      	cbz	r5, 8004964 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
 800495a:	9a01      	ldr	r2, [sp, #4]
 800495c:	69e0      	ldr	r0, [r4, #28]
 800495e:	4621      	mov	r1, r4
 8004960:	f007 faa8 	bl	800beb4 <z_shell_log_backend_enable>
	err = shell_start(shell);
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff ffc5 	bl	80048f4 <shell_start>
	if (err != 0) {
 800496a:	2800      	cmp	r0, #0
 800496c:	d142      	bne.n	80049f4 <shell_thread+0xb4>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
 800496e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004a08 <shell_thread+0xc8>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
 8004972:	4f22      	ldr	r7, [pc, #136]	; (80049fc <shell_thread+0xbc>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
 8004974:	4e22      	ldr	r6, [pc, #136]	; (8004a00 <shell_thread+0xc0>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
 8004976:	68a0      	ldr	r0, [r4, #8]
 8004978:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
	return z_impl_k_poll(events, num_events, timeout);
 800497c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004984:	2103      	movs	r1, #3
 8004986:	f004 fdef 	bl	8009568 <z_impl_k_poll>
		if (err != 0) {
 800498a:	4605      	mov	r5, r0
 800498c:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 800498e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004996:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
		if (err != 0) {
 800499a:	b17d      	cbz	r5, 80049bc <shell_thread+0x7c>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 800499c:	f006 fcd2 	bl	800b344 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
 80049a0:	4620      	mov	r0, r4
 80049a2:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <shell_thread+0xc4>)
 80049a4:	462b      	mov	r3, r5
 80049a6:	2102      	movs	r1, #2
 80049a8:	f006 ffd0 	bl	800b94c <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
 80049ac:	68a0      	ldr	r0, [r4, #8]
 80049ae:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
}
 80049b2:	b002      	add	sp, #8
 80049b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
 80049b8:	f006 bd11 	b.w	800b3de <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 80049bc:	f006 fcc2 	bl	800b344 <k_mutex_lock.constprop.0.isra.0>
		if (shell->iface->api->update) {
 80049c0:	6860      	ldr	r0, [r4, #4]
 80049c2:	6803      	ldr	r3, [r0, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	b103      	cbz	r3, 80049ca <shell_thread+0x8a>
			shell->iface->api->update(shell->iface);
 80049c8:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
 80049ca:	4642      	mov	r2, r8
 80049cc:	4620      	mov	r0, r4
 80049ce:	2102      	movs	r1, #2
 80049d0:	f006 fc8f 	bl	800b2f2 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
 80049d4:	463a      	mov	r2, r7
 80049d6:	4620      	mov	r0, r4
 80049d8:	2100      	movs	r1, #0
 80049da:	f006 fc8a 	bl	800b2f2 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
 80049de:	4620      	mov	r0, r4
 80049e0:	4632      	mov	r2, r6
 80049e2:	2101      	movs	r1, #1
 80049e4:	f006 fc85 	bl	800b2f2 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
 80049e8:	68a0      	ldr	r0, [r4, #8]
 80049ea:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
 80049ee:	f006 fcf6 	bl	800b3de <k_mutex_unlock.isra.0>
 80049f2:	e7c0      	b.n	8004976 <shell_thread+0x36>
}
 80049f4:	b002      	add	sp, #8
 80049f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049fa:	bf00      	nop
 80049fc:	08004189 	.word	0x08004189
 8004a00:	0800b3e3 	.word	0x0800b3e3
 8004a04:	0800fc2d 	.word	0x0800fc2d
 8004a08:	0800b35d 	.word	0x0800b35d

08004a0c <cmd_help>:

	return (int)z_flag_mode_delete_set(shell, val);
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
 8004a0c:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
 8004a0e:	4a0d      	ldr	r2, [pc, #52]	; (8004a44 <cmd_help+0x38>)
{
 8004a10:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
 8004a12:	2100      	movs	r1, #0
 8004a14:	f006 fd41 	bl	800b49a <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
 8004a18:	4620      	mov	r0, r4
 8004a1a:	4a0b      	ldr	r2, [pc, #44]	; (8004a48 <cmd_help+0x3c>)
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	f006 fd3c 	bl	800b49a <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
 8004a22:	4620      	mov	r0, r4
 8004a24:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <cmd_help+0x40>)
 8004a26:	2100      	movs	r1, #0
 8004a28:	f006 fd37 	bl	800b49a <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <cmd_help+0x44>)
 8004a30:	2100      	movs	r1, #0
 8004a32:	f006 fd32 	bl	800b49a <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
 8004a36:	4620      	mov	r0, r4
 8004a38:	4a06      	ldr	r2, [pc, #24]	; (8004a54 <cmd_help+0x48>)
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	f000 fcce 	bl	80053dc <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
 8004a40:	2000      	movs	r0, #0
 8004a42:	bd10      	pop	{r4, pc}
 8004a44:	0800fc44 	.word	0x0800fc44
 8004a48:	0800fc82 	.word	0x0800fc82
 8004a4c:	0800fce1 	.word	0x0800fce1
 8004a50:	0800fd35 	.word	0x0800fd35
 8004a54:	0800fdcf 	.word	0x0800fdcf

08004a58 <shell_hexdump_line>:
{
 8004a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5c:	4616      	mov	r6, r2
 8004a5e:	461f      	mov	r7, r3
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
 8004a60:	4a2b      	ldr	r2, [pc, #172]	; (8004b10 <shell_hexdump_line+0xb8>)
			shell_fprintf(shell, SHELL_NORMAL, "   ");
 8004a62:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8004b1c <shell_hexdump_line+0xc4>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
 8004a66:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8004b20 <shell_hexdump_line+0xc8>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 8004a6a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004b24 <shell_hexdump_line+0xcc>
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
 8004a6e:	460b      	mov	r3, r1
 8004a70:	2100      	movs	r1, #0
{
 8004a72:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
 8004a74:	f006 fd11 	bl	800b49a <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8004a78:	2500      	movs	r5, #0
		if (i < len) {
 8004a7a:	42af      	cmp	r7, r5
 8004a7c:	d934      	bls.n	8004ae8 <shell_hexdump_line+0x90>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
 8004a7e:	5d73      	ldrb	r3, [r6, r5]
 8004a80:	464a      	mov	r2, r9
 8004a82:	2100      	movs	r1, #0
 8004a84:	4620      	mov	r0, r4
 8004a86:	f006 fd08 	bl	800b49a <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8004a8a:	3501      	adds	r5, #1
 8004a8c:	2d10      	cmp	r5, #16
 8004a8e:	d123      	bne.n	8004ad8 <shell_hexdump_line+0x80>
	shell_fprintf(shell, SHELL_NORMAL, "|");
 8004a90:	4a20      	ldr	r2, [pc, #128]	; (8004b14 <shell_hexdump_line+0xbc>)
			shell_fprintf(shell, SHELL_NORMAL, " ");
 8004a92:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004b24 <shell_hexdump_line+0xcc>
				      isprint((int)c) ? c : '.');
 8004a96:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004b28 <shell_hexdump_line+0xd0>
			shell_fprintf(shell, SHELL_NORMAL, "%c",
 8004a9a:	f8df a090 	ldr.w	sl, [pc, #144]	; 8004b2c <shell_hexdump_line+0xd4>
	shell_fprintf(shell, SHELL_NORMAL, "|");
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f006 fcfa 	bl	800b49a <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8004aa6:	2500      	movs	r5, #0
		if (i < len) {
 8004aa8:	42bd      	cmp	r5, r7
 8004aaa:	d22b      	bcs.n	8004b04 <shell_hexdump_line+0xac>
			char c = data[i];
 8004aac:	5d73      	ldrb	r3, [r6, r5]
			shell_fprintf(shell, SHELL_NORMAL, "%c",
 8004aae:	f813 2009 	ldrb.w	r2, [r3, r9]
 8004ab2:	f012 0f97 	tst.w	r2, #151	; 0x97
 8004ab6:	bf08      	it	eq
 8004ab8:	232e      	moveq	r3, #46	; 0x2e
 8004aba:	4652      	mov	r2, sl
 8004abc:	2100      	movs	r1, #0
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f006 fceb 	bl	800b49a <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	2d10      	cmp	r5, #16
 8004ac8:	d114      	bne.n	8004af4 <shell_hexdump_line+0x9c>
	shell_print(shell, "|");
 8004aca:	4620      	mov	r0, r4
 8004acc:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <shell_hexdump_line+0xc0>)
}
 8004ace:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	shell_print(shell, "|");
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	f006 bce1 	b.w	800b49a <shell_fprintf>
		if (i > 0 && !(i % 8)) {
 8004ad8:	f015 0107 	ands.w	r1, r5, #7
 8004adc:	d1cd      	bne.n	8004a7a <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 8004ade:	4652      	mov	r2, sl
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f006 fcda 	bl	800b49a <shell_fprintf>
 8004ae6:	e7c8      	b.n	8004a7a <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
 8004ae8:	4642      	mov	r2, r8
 8004aea:	2100      	movs	r1, #0
 8004aec:	4620      	mov	r0, r4
 8004aee:	f006 fcd4 	bl	800b49a <shell_fprintf>
 8004af2:	e7ca      	b.n	8004a8a <shell_hexdump_line+0x32>
		if (i > 0 && !(i % 8)) {
 8004af4:	f015 0107 	ands.w	r1, r5, #7
 8004af8:	d1d6      	bne.n	8004aa8 <shell_hexdump_line+0x50>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 8004afa:	4642      	mov	r2, r8
 8004afc:	4620      	mov	r0, r4
 8004afe:	f006 fccc 	bl	800b49a <shell_fprintf>
 8004b02:	e7d1      	b.n	8004aa8 <shell_hexdump_line+0x50>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 8004b04:	4642      	mov	r2, r8
 8004b06:	2100      	movs	r1, #0
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f006 fcc6 	bl	800b49a <shell_fprintf>
 8004b0e:	e7d9      	b.n	8004ac4 <shell_hexdump_line+0x6c>
 8004b10:	0800fde5 	.word	0x0800fde5
 8004b14:	0800f4be 	.word	0x0800f4be
 8004b18:	0800fdec 	.word	0x0800fdec
 8004b1c:	0800f4ba 	.word	0x0800f4ba
 8004b20:	0800f4b4 	.word	0x0800f4b4
 8004b24:	0800f4bc 	.word	0x0800f4bc
 8004b28:	08010d02 	.word	0x08010d02
 8004b2c:	0800fe19 	.word	0x0800fe19

08004b30 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
 8004b30:	b510      	push	{r4, lr}
 8004b32:	4604      	mov	r4, r0
 8004b34:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
 8004b36:	460a      	mov	r2, r1
 8004b38:	4601      	mov	r1, r0
 8004b3a:	4806      	ldr	r0, [pc, #24]	; (8004b54 <z_shell_fprintf_fmt+0x24>)
 8004b3c:	f7fc f998 	bl	8000e70 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
 8004b40:	6923      	ldr	r3, [r4, #16]
 8004b42:	791b      	ldrb	r3, [r3, #4]
 8004b44:	b123      	cbz	r3, 8004b50 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
 8004b46:	4620      	mov	r0, r4
	}
}
 8004b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
 8004b4c:	f006 bcc8 	b.w	800b4e0 <z_shell_fprintf_buffer_flush>
}
 8004b50:	bd10      	pop	{r4, pc}
 8004b52:	bf00      	nop
 8004b54:	0800b4f9 	.word	0x0800b4f9

08004b58 <z_shell_make_argv>:
}


char z_shell_make_argv(size_t *argc, const char **argv, char *cmd,
		       uint8_t max_argc)
{
 8004b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	461f      	mov	r7, r3
		c = *cmd;
		if (c == '\0') {
			break;
		}

		if (isspace((int) c)) {
 8004b5e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8004ccc <z_shell_make_argv+0x174>
	*argc = 0;
 8004b62:	2300      	movs	r3, #0
{
 8004b64:	4605      	mov	r5, r0
 8004b66:	460e      	mov	r6, r1
 8004b68:	4614      	mov	r4, r2
	*argc = 0;
 8004b6a:	6003      	str	r3, [r0, #0]
	char quote = 0;
 8004b6c:	469a      	mov	sl, r3
	char quote = 0;
 8004b6e:	4699      	mov	r9, r3
		c = *cmd;
 8004b70:	7823      	ldrb	r3, [r4, #0]
		if (c == '\0') {
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 80a5 	beq.w	8004cc2 <z_shell_make_argv+0x16a>
		if (isspace((int) c)) {
 8004b78:	f813 3008 	ldrb.w	r3, [r3, r8]
 8004b7c:	f013 0308 	ands.w	r3, r3, #8
 8004b80:	d002      	beq.n	8004b88 <z_shell_make_argv+0x30>
			*cmd++ = '\0';
 8004b82:	f804 9b01 	strb.w	r9, [r4], #1
			continue;
 8004b86:	e7f3      	b.n	8004b70 <z_shell_make_argv+0x18>
		}

		argv[(*argc)++] = cmd;
 8004b88:	6829      	ldr	r1, [r5, #0]
 8004b8a:	1c4a      	adds	r2, r1, #1
		if (*argc == max_argc) {
 8004b8c:	42ba      	cmp	r2, r7
		argv[(*argc)++] = cmd;
 8004b8e:	602a      	str	r2, [r5, #0]
 8004b90:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
		if (*argc == max_argc) {
 8004b94:	f000 8095 	beq.w	8004cc2 <z_shell_make_argv+0x16a>
	char quote = 0;
 8004b98:	469a      	mov	sl, r3
		c = *cmd;
 8004b9a:	f894 b000 	ldrb.w	fp, [r4]
		if (c == '\0') {
 8004b9e:	f1bb 0f00 	cmp.w	fp, #0
 8004ba2:	d0e5      	beq.n	8004b70 <z_shell_make_argv+0x18>
		if (!quote) {
 8004ba4:	f1ba 0f00 	cmp.w	sl, #0
 8004ba8:	d177      	bne.n	8004c9a <z_shell_make_argv+0x142>
			switch (c) {
 8004baa:	f1bb 0f27 	cmp.w	fp, #39	; 0x27
 8004bae:	d005      	beq.n	8004bbc <z_shell_make_argv+0x64>
 8004bb0:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
 8004bb4:	d079      	beq.n	8004caa <z_shell_make_argv+0x152>
 8004bb6:	f1bb 0f22 	cmp.w	fp, #34	; 0x22
 8004bba:	d167      	bne.n	8004c8c <z_shell_make_argv+0x134>
				memmove(cmd, cmd + 1,
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f006 fcb7 	bl	800b530 <z_shell_strlen>
__ssp_bos_icheck3(memmove, void *, const void *)
 8004bc2:	1c61      	adds	r1, r4, #1
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f008 fd94 	bl	800d6f4 <memmove>
				continue;
 8004bcc:	46da      	mov	sl, fp
 8004bce:	e7e4      	b.n	8004b9a <z_shell_make_argv+0x42>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f006 fcad 	bl	800b530 <z_shell_strlen>
 8004bd6:	1c61      	adds	r1, r4, #1
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f008 fd8a 	bl	800d6f4 <memmove>
			quote = 0;
 8004be0:	f04f 0a00 	mov.w	sl, #0
			continue;
 8004be4:	e7d9      	b.n	8004b9a <z_shell_make_argv+0x42>
			if (t == '0') {
 8004be6:	2930      	cmp	r1, #48	; 0x30
 8004be8:	d126      	bne.n	8004c38 <z_shell_make_argv+0xe0>
				uint8_t v = 0U;
 8004bea:	f04f 0b00 	mov.w	fp, #0
 8004bee:	2302      	movs	r3, #2
					t = *(cmd + i);
 8004bf0:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
 8004bf2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8004bf6:	fa5f fc80 	uxtb.w	ip, r0
 8004bfa:	f1bc 0f07 	cmp.w	ip, #7
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	d818      	bhi.n	8004c34 <z_shell_make_argv+0xdc>
				for (i = 2U; i < (2 + 3); i++) {
 8004c02:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
 8004c04:	ea40 0bcb 	orr.w	fp, r0, fp, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
 8004c08:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
 8004c0a:	fa5f fb8b 	uxtb.w	fp, fp
				for (i = 2U; i < (2 + 3); i++) {
 8004c0e:	d1ef      	bne.n	8004bf0 <z_shell_make_argv+0x98>
 8004c10:	461a      	mov	r2, r3
					memmove(cmd, cmd + (i - 1),
 8004c12:	1e51      	subs	r1, r2, #1
 8004c14:	4421      	add	r1, r4
 8004c16:	4620      	mov	r0, r4
 8004c18:	9201      	str	r2, [sp, #4]
 8004c1a:	9100      	str	r1, [sp, #0]
 8004c1c:	f006 fc88 	bl	800b530 <z_shell_strlen>
 8004c20:	9a01      	ldr	r2, [sp, #4]
 8004c22:	9900      	ldr	r1, [sp, #0]
 8004c24:	3002      	adds	r0, #2
 8004c26:	1a82      	subs	r2, r0, r2
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f008 fd63 	bl	800d6f4 <memmove>
					*cmd++ = v;
 8004c2e:	f804 bb01 	strb.w	fp, [r4], #1
					continue;
 8004c32:	e7b2      	b.n	8004b9a <z_shell_make_argv+0x42>
				if (i > 2) {
 8004c34:	2a02      	cmp	r2, #2
 8004c36:	d1ec      	bne.n	8004c12 <z_shell_make_argv+0xba>
			if (t == 'x') {
 8004c38:	2978      	cmp	r1, #120	; 0x78
 8004c3a:	d12c      	bne.n	8004c96 <z_shell_make_argv+0x13e>
				uint8_t v = 0U;
 8004c3c:	f04f 0b00 	mov.w	fp, #0
 8004c40:	2302      	movs	r3, #2
					t = *(cmd + i);
 8004c42:	5ce2      	ldrb	r2, [r4, r3]
					if (t >= '0' && t <= '9') {
 8004c44:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004c48:	fa5f fc81 	uxtb.w	ip, r1
 8004c4c:	f1bc 0f09 	cmp.w	ip, #9
 8004c50:	b2d8      	uxtb	r0, r3
 8004c52:	d809      	bhi.n	8004c68 <z_shell_make_argv+0x110>
						v = (v << 4) | (t - '0');
 8004c54:	ea41 120b 	orr.w	r2, r1, fp, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
 8004c58:	2b03      	cmp	r3, #3
						v = (v << 4) | (t - 'A' + 10);
 8004c5a:	fa5f fb82 	uxtb.w	fp, r2
				for (i = 2U; i < (2 + 2); i++) {
 8004c5e:	d101      	bne.n	8004c64 <z_shell_make_argv+0x10c>
 8004c60:	2204      	movs	r2, #4
 8004c62:	e7d6      	b.n	8004c12 <z_shell_make_argv+0xba>
 8004c64:	2303      	movs	r3, #3
 8004c66:	e7ec      	b.n	8004c42 <z_shell_make_argv+0xea>
					} else if ((t >= 'a') &&
 8004c68:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8004c6c:	2905      	cmp	r1, #5
 8004c6e:	d803      	bhi.n	8004c78 <z_shell_make_argv+0x120>
						v = (v << 4) | (t - 'a' + 10);
 8004c70:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
 8004c72:	ea42 120b 	orr.w	r2, r2, fp, lsl #4
 8004c76:	e7ef      	b.n	8004c58 <z_shell_make_argv+0x100>
					} else if ((t >= 'A') && (t <= 'F')) {
 8004c78:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8004c7c:	2905      	cmp	r1, #5
 8004c7e:	d801      	bhi.n	8004c84 <z_shell_make_argv+0x12c>
						v = (v << 4) | (t - 'A' + 10);
 8004c80:	3a37      	subs	r2, #55	; 0x37
 8004c82:	e7f6      	b.n	8004c72 <z_shell_make_argv+0x11a>
				if (i > 2) {
 8004c84:	2802      	cmp	r0, #2
 8004c86:	d006      	beq.n	8004c96 <z_shell_make_argv+0x13e>
 8004c88:	2203      	movs	r2, #3
 8004c8a:	e7c2      	b.n	8004c12 <z_shell_make_argv+0xba>
		if (!quote && isspace((int) c)) {
 8004c8c:	f818 300b 	ldrb.w	r3, [r8, fp]
 8004c90:	071b      	lsls	r3, r3, #28
 8004c92:	f53f af6d 	bmi.w	8004b70 <z_shell_make_argv+0x18>
		cmd += 1;
 8004c96:	3401      	adds	r4, #1
 8004c98:	e77f      	b.n	8004b9a <z_shell_make_argv+0x42>
		if (quote == c) {
 8004c9a:	45d3      	cmp	fp, sl
 8004c9c:	d098      	beq.n	8004bd0 <z_shell_make_argv+0x78>
		if (quote && c == '\\') {
 8004c9e:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
 8004ca2:	d1f8      	bne.n	8004c96 <z_shell_make_argv+0x13e>
			char t = *(cmd + 1);
 8004ca4:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
 8004ca6:	458a      	cmp	sl, r1
 8004ca8:	d19d      	bne.n	8004be6 <z_shell_make_argv+0x8e>
				memmove(cmd, cmd + 1,
 8004caa:	4620      	mov	r0, r4
 8004cac:	f006 fc40 	bl	800b530 <z_shell_strlen>
 8004cb0:	f104 0b01 	add.w	fp, r4, #1
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4659      	mov	r1, fp
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f008 fd1b 	bl	800d6f4 <memmove>
				continue;
 8004cbe:	465c      	mov	r4, fp
 8004cc0:	e76b      	b.n	8004b9a <z_shell_make_argv+0x42>
		}
		quote = make_argv(&cmd, c);
	} while (true);

	return quote;
}
 8004cc2:	4650      	mov	r0, sl
 8004cc4:	b003      	add	sp, #12
 8004cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cca:	bf00      	nop
 8004ccc:	08010d02 	.word	0x08010d02

08004cd0 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
 8004cd0:	b510      	push	{r4, lr}
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
 8004cd6:	b950      	cbnz	r0, 8004cee <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
 8004cd8:	490e      	ldr	r1, [pc, #56]	; (8004d14 <z_shell_cmd_get+0x44>)
 8004cda:	4a0f      	ldr	r2, [pc, #60]	; (8004d18 <z_shell_cmd_get+0x48>)
 8004cdc:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
 8004cde:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8004ce2:	d20f      	bcs.n	8004d04 <z_shell_cmd_get+0x34>
 8004ce4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004ce8:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
 8004cea:	4620      	mov	r0, r4
 8004cec:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
 8004cee:	6881      	ldr	r1, [r0, #8]
 8004cf0:	b141      	cbz	r1, 8004d04 <z_shell_cmd_get+0x34>
			parent->subcmd->u.dynamic_get(idx, dloc);
 8004cf2:	684a      	ldr	r2, [r1, #4]
		if (parent->subcmd->is_dynamic) {
 8004cf4:	7809      	ldrb	r1, [r1, #0]
 8004cf6:	b139      	cbz	r1, 8004d08 <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	4790      	blx	r2
			if (dloc->syntax != NULL) {
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1f2      	bne.n	8004cea <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
 8004d04:	2400      	movs	r4, #0
 8004d06:	e7f0      	b.n	8004cea <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
 8004d08:	2014      	movs	r0, #20
 8004d0a:	4343      	muls	r3, r0
 8004d0c:	18d4      	adds	r4, r2, r3
 8004d0e:	58d3      	ldr	r3, [r2, r3]
 8004d10:	e7f6      	b.n	8004d00 <z_shell_cmd_get+0x30>
 8004d12:	bf00      	nop
 8004d14:	0800de50 	.word	0x0800de50
 8004d18:	0800de98 	.word	0x0800de98

08004d1c <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
 8004d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d20:	4606      	mov	r6, r0
	uint16_t len = z_shell_strlen(str);
 8004d22:	f006 fc05 	bl	800b530 <z_shell_strlen>
 8004d26:	4605      	mov	r5, r0
	uint16_t shift = 0U;

	if (!str) {
 8004d28:	bb56      	cbnz	r6, 8004d80 <z_shell_spaces_trim+0x64>

				break;
			}
		}
	}
}
 8004d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
 8004d2e:	b14c      	cbz	r4, 8004d44 <z_shell_spaces_trim+0x28>
					memmove(&str[i + 1],
 8004d30:	1c6a      	adds	r2, r5, #1
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3001      	adds	r0, #1
 8004d36:	1ad2      	subs	r2, r2, r3
 8004d38:	4430      	add	r0, r6
 8004d3a:	f008 fcdb 	bl	800d6f4 <memmove>
					len -= shift;
 8004d3e:	1b2d      	subs	r5, r5, r4
 8004d40:	b2ad      	uxth	r5, r5
					shift = 0U;
 8004d42:	464c      	mov	r4, r9
	for (uint16_t i = 0; i < len - 1; i++) {
 8004d44:	3701      	adds	r7, #1
 8004d46:	b2bb      	uxth	r3, r7
 8004d48:	1e6a      	subs	r2, r5, #1
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	daec      	bge.n	8004d2a <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
 8004d50:	5c32      	ldrb	r2, [r6, r0]
 8004d52:	f812 2008 	ldrb.w	r2, [r2, r8]
 8004d56:	0712      	lsls	r2, r2, #28
 8004d58:	d5f4      	bpl.n	8004d44 <z_shell_spaces_trim+0x28>
			for (uint16_t j = i + 1; j < len; j++) {
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	4295      	cmp	r5, r2
 8004d62:	d9ef      	bls.n	8004d44 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
 8004d64:	5cf2      	ldrb	r2, [r6, r3]
 8004d66:	f818 2002 	ldrb.w	r2, [r8, r2]
 8004d6a:	f012 0908 	ands.w	r9, r2, #8
 8004d6e:	eb06 0103 	add.w	r1, r6, r3
 8004d72:	f103 0c01 	add.w	ip, r3, #1
 8004d76:	d0da      	beq.n	8004d2e <z_shell_spaces_trim+0x12>
					shift++;
 8004d78:	3401      	adds	r4, #1
 8004d7a:	b2a4      	uxth	r4, r4
 8004d7c:	4663      	mov	r3, ip
 8004d7e:	e7ee      	b.n	8004d5e <z_shell_spaces_trim+0x42>
 8004d80:	2700      	movs	r7, #0
		if (isspace((int)str[i])) {
 8004d82:	f8df 8008 	ldr.w	r8, [pc, #8]	; 8004d8c <z_shell_spaces_trim+0x70>
	uint16_t shift = 0U;
 8004d86:	463c      	mov	r4, r7
 8004d88:	e7dd      	b.n	8004d46 <z_shell_spaces_trim+0x2a>
 8004d8a:	bf00      	nop
 8004d8c:	08010d02 	.word	0x08010d02

08004d90 <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 8004d92:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
 8004d94:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
{
 8004d98:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
 8004d9a:	b953      	cbnz	r3, 8004db2 <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 8004d9c:	68ab      	ldr	r3, [r5, #8]
 8004d9e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8004da0:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8004da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
 8004da4:	3a01      	subs	r2, #1
 8004da6:	b292      	uxth	r2, r2
 8004da8:	8722      	strh	r2, [r4, #56]	; 0x38
		if (*buff_len == 0U) {
 8004daa:	b92a      	cbnz	r2, 8004db8 <z_shell_cmd_trim+0x28>
			buff[0] = '\0';
 8004dac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
			return;
 8004db0:	e7f4      	b.n	8004d9c <z_shell_cmd_trim+0xc>
	while (isspace((int) buff[*buff_len - 1U])) {
 8004db2:	4e11      	ldr	r6, [pc, #68]	; (8004df8 <z_shell_cmd_trim+0x68>)
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 8004db4:	f104 003e 	add.w	r0, r4, #62	; 0x3e
	while (isspace((int) buff[*buff_len - 1U])) {
 8004db8:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8004dba:	1883      	adds	r3, r0, r2
 8004dbc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004dc0:	5d9b      	ldrb	r3, [r3, r6]
 8004dc2:	f013 0308 	ands.w	r3, r3, #8
 8004dc6:	d1ed      	bne.n	8004da4 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
 8004dc8:	5483      	strb	r3, [r0, r2]
	while (isspace((int) buff[i++])) {
 8004dca:	b29f      	uxth	r7, r3
 8004dcc:	fa10 f183 	uxtah	r1, r0, r3
 8004dd0:	f810 c007 	ldrb.w	ip, [r0, r7]
 8004dd4:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8004dd8:	f01c 0f08 	tst.w	ip, #8
 8004ddc:	f103 0301 	add.w	r3, r3, #1
 8004de0:	d1f3      	bne.n	8004dca <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
 8004de2:	2f00      	cmp	r7, #0
 8004de4:	d0da      	beq.n	8004d9c <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
 8004de6:	8f26      	ldrh	r6, [r4, #56]	; 0x38
 8004de8:	1c73      	adds	r3, r6, #1
 8004dea:	1bda      	subs	r2, r3, r7
		*buff_len = *buff_len - i;
 8004dec:	1bf6      	subs	r6, r6, r7
 8004dee:	f008 fc81 	bl	800d6f4 <memmove>
 8004df2:	8726      	strh	r6, [r4, #56]	; 0x38
 8004df4:	e7d2      	b.n	8004d9c <z_shell_cmd_trim+0xc>
 8004df6:	bf00      	nop
 8004df8:	08010d02 	.word	0x08010d02

08004dfc <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8004dfc:	4901      	ldr	r1, [pc, #4]	; (8004e04 <z_cursor_next_line_move.isra.0+0x8>)
 8004dfe:	f006 bc6c 	b.w	800b6da <z_shell_raw_fprintf>
 8004e02:	bf00      	nop
 8004e04:	0800f965 	.word	0x0800f965

08004e08 <z_clear_eos.isra.0>:
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 8004e08:	4a01      	ldr	r2, [pc, #4]	; (8004e10 <z_clear_eos.isra.0+0x8>)
 8004e0a:	4902      	ldr	r1, [pc, #8]	; (8004e14 <z_clear_eos.isra.0+0xc>)
 8004e0c:	f006 bc65 	b.w	800b6da <z_shell_raw_fprintf>
 8004e10:	0800fe23 	.word	0x0800fe23
 8004e14:	0800fa80 	.word	0x0800fa80

08004e18 <z_shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	if (delta != 0) {
 8004e18:	b159      	cbz	r1, 8004e32 <z_shell_op_cursor_vert_move+0x1a>
		z_shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
 8004e1a:	2900      	cmp	r1, #0
 8004e1c:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8004e20:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8004e24:	6940      	ldr	r0, [r0, #20]
 8004e26:	4903      	ldr	r1, [pc, #12]	; (8004e34 <z_shell_op_cursor_vert_move+0x1c>)
 8004e28:	bfcc      	ite	gt
 8004e2a:	2341      	movgt	r3, #65	; 0x41
 8004e2c:	2342      	movle	r3, #66	; 0x42
 8004e2e:	f006 bc54 	b.w	800b6da <z_shell_raw_fprintf>
				    delta > 0 ? delta : -delta,
				    delta > 0 ? 'A' : 'B');
	}
}
 8004e32:	4770      	bx	lr
 8004e34:	0800fe15 	.word	0x0800fe15

08004e38 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	if (delta != 0) {
 8004e38:	b159      	cbz	r1, 8004e52 <z_shell_op_cursor_horiz_move+0x1a>
		z_shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
 8004e3a:	2900      	cmp	r1, #0
 8004e3c:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8004e40:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8004e44:	6940      	ldr	r0, [r0, #20]
 8004e46:	4903      	ldr	r1, [pc, #12]	; (8004e54 <z_shell_op_cursor_horiz_move+0x1c>)
 8004e48:	bfcc      	ite	gt
 8004e4a:	2343      	movgt	r3, #67	; 0x43
 8004e4c:	2344      	movle	r3, #68	; 0x44
 8004e4e:	f006 bc44 	b.w	800b6da <z_shell_raw_fprintf>
				    delta > 0 ? delta : -delta,
				    delta > 0 ? 'C' : 'D');
	}
}
 8004e52:	4770      	bx	lr
 8004e54:	0800fe15 	.word	0x0800fe15

08004e58 <z_shell_op_cursor_word_move>:
void z_shell_op_cursor_word_move(const struct shell *shell, int16_t val)
{
	int16_t shift;
	int16_t sign;

	if (val < 0) {
 8004e58:	2900      	cmp	r1, #0
{
 8004e5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e5e:	4606      	mov	r6, r0
	if (val < 0) {
 8004e60:	da2f      	bge.n	8004ec2 <z_shell_op_cursor_word_move+0x6a>
		val = -val;
 8004e62:	4249      	negs	r1, r1
 8004e64:	b209      	sxth	r1, r1
		sign = -1;
 8004e66:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		if (isalnum((int)str[idx]) != 0) {
 8004e6a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8004ec8 <z_shell_op_cursor_word_move+0x70>
 8004e6e:	b28c      	uxth	r4, r1
 8004e70:	b2af      	uxth	r7, r5
 8004e72:	e01e      	b.n	8004eb2 <z_shell_op_cursor_word_move+0x5a>
	} else {
		sign = 1;
	}

	while (val--) {
		shift = shift_calc(shell->ctx->cmd_buff,
 8004e74:	68b3      	ldr	r3, [r6, #8]
 8004e76:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8004e78:	f8b3 e038 	ldrh.w	lr, [r3, #56]	; 0x38
 8004e7c:	f103 0c3e 	add.w	ip, r3, #62	; 0x3e
	bool found = false;
 8004e80:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
 8004e82:	4613      	mov	r3, r2
		idx = pos + ret * sign;
 8004e84:	1a99      	subs	r1, r3, r2
 8004e86:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
 8004e88:	b913      	cbnz	r3, 8004e90 <z_shell_op_cursor_word_move+0x38>
 8004e8a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004e8e:	d00b      	beq.n	8004ea8 <z_shell_op_cursor_word_move+0x50>
 8004e90:	459e      	cmp	lr, r3
 8004e92:	d101      	bne.n	8004e98 <z_shell_op_cursor_word_move+0x40>
		    ((idx == len) && (sign > 0))) {
 8004e94:	2d01      	cmp	r5, #1
 8004e96:	d007      	beq.n	8004ea8 <z_shell_op_cursor_word_move+0x50>
		if (isalnum((int)str[idx]) != 0) {
 8004e98:	f81c 9003 	ldrb.w	r9, [ip, r3]
 8004e9c:	f819 9008 	ldrb.w	r9, [r9, r8]
 8004ea0:	f019 0f07 	tst.w	r9, #7
 8004ea4:	d109      	bne.n	8004eba <z_shell_op_cursor_word_move+0x62>
			if (found) {
 8004ea6:	b148      	cbz	r0, 8004ebc <z_shell_op_cursor_word_move+0x64>
				   shell->ctx->cmd_buff_pos,
				   shell->ctx->cmd_buff_len, sign);
		z_shell_op_cursor_move(shell, sign * shift);
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f006 fc82 	bl	800b7b2 <z_shell_op_cursor_move>
 8004eae:	3c01      	subs	r4, #1
 8004eb0:	b2a4      	uxth	r4, r4
	while (val--) {
 8004eb2:	2c00      	cmp	r4, #0
 8004eb4:	d1de      	bne.n	8004e74 <z_shell_op_cursor_word_move+0x1c>
	}
}
 8004eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
 8004eba:	2001      	movs	r0, #1
	while (1) {
 8004ebc:	443b      	add	r3, r7
 8004ebe:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
 8004ec0:	e7e0      	b.n	8004e84 <z_shell_op_cursor_word_move+0x2c>
		sign = 1;
 8004ec2:	2501      	movs	r5, #1
 8004ec4:	e7d1      	b.n	8004e6a <z_shell_op_cursor_word_move+0x12>
 8004ec6:	bf00      	nop
 8004ec8:	08010d02 	.word	0x08010d02

08004ecc <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
 8004ecc:	6882      	ldr	r2, [r0, #8]
 8004ece:	4902      	ldr	r1, [pc, #8]	; (8004ed8 <z_shell_print_cmd+0xc>)
 8004ed0:	6940      	ldr	r0, [r0, #20]
 8004ed2:	323e      	adds	r2, #62	; 0x3e
 8004ed4:	f006 bc01 	b.w	800b6da <z_shell_raw_fprintf>
 8004ed8:	0800fa80 	.word	0x0800fa80

08004edc <z_shell_vt100_color_set>:

}

void z_shell_vt100_color_set(const struct shell *shell,
			     enum shell_vt100_color color)
{
 8004edc:	b507      	push	{r0, r1, r2, lr}

	if (shell->ctx->vt100_ctx.col.col == color) {
 8004ede:	6883      	ldr	r3, [r0, #8]
 8004ee0:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8004ee4:	428a      	cmp	r2, r1
 8004ee6:	d01f      	beq.n	8004f28 <z_shell_vt100_color_set+0x4c>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
 8004ee8:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
 8004eec:	b1f9      	cbz	r1, 8004f2e <z_shell_vt100_color_set+0x52>

		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
 8004eee:	231b      	movs	r3, #27
 8004ef0:	f88d 3000 	strb.w	r3, [sp]
 8004ef4:	235b      	movs	r3, #91	; 0x5b
 8004ef6:	f88d 3001 	strb.w	r3, [sp, #1]
 8004efa:	2331      	movs	r3, #49	; 0x31
 8004efc:	f88d 3002 	strb.w	r3, [sp, #2]
 8004f00:	233b      	movs	r3, #59	; 0x3b
 8004f02:	f88d 3003 	strb.w	r3, [sp, #3]
 8004f06:	2333      	movs	r3, #51	; 0x33
 8004f08:	312f      	adds	r1, #47	; 0x2f
 8004f0a:	f88d 3004 	strb.w	r3, [sp, #4]
 8004f0e:	236d      	movs	r3, #109	; 0x6d
 8004f10:	f88d 1005 	strb.w	r1, [sp, #5]
 8004f14:	f88d 3006 	strb.w	r3, [sp, #6]

		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8004f18:	4909      	ldr	r1, [pc, #36]	; (8004f40 <z_shell_vt100_color_set+0x64>)
 8004f1a:	6940      	ldr	r0, [r0, #20]
		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
 8004f1c:	2300      	movs	r3, #0
		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8004f1e:	466a      	mov	r2, sp
		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
 8004f20:	f88d 3007 	strb.w	r3, [sp, #7]
		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8004f24:	f006 fbd9 	bl	800b6da <z_shell_raw_fprintf>
	} else {
		static const uint8_t cmd[] = SHELL_VT100_MODESOFF;

		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
	}
}
 8004f28:	b003      	add	sp, #12
 8004f2a:	f85d fb04 	ldr.w	pc, [sp], #4
		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8004f2e:	4a05      	ldr	r2, [pc, #20]	; (8004f44 <z_shell_vt100_color_set+0x68>)
 8004f30:	4903      	ldr	r1, [pc, #12]	; (8004f40 <z_shell_vt100_color_set+0x64>)
 8004f32:	6940      	ldr	r0, [r0, #20]
}
 8004f34:	b003      	add	sp, #12
 8004f36:	f85d eb04 	ldr.w	lr, [sp], #4
		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8004f3a:	f006 bbce 	b.w	800b6da <z_shell_raw_fprintf>
 8004f3e:	bf00      	nop
 8004f40:	0800fa80 	.word	0x0800fa80
 8004f44:	0800fe1c 	.word	0x0800fe1c

08004f48 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
 8004f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f4a:	460d      	mov	r5, r1
	z_shell_vt100_color_set(shell, color->col);
 8004f4c:	7809      	ldrb	r1, [r1, #0]
{
 8004f4e:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
 8004f50:	f7ff ffc4 	bl	8004edc <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
 8004f54:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
 8004f56:	b1f3      	cbz	r3, 8004f96 <z_shell_vt100_colors_restore+0x4e>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
 8004f58:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
 8004f5a:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 8004f5e:	4299      	cmp	r1, r3
 8004f60:	d019      	beq.n	8004f96 <z_shell_vt100_colors_restore+0x4e>
	uint8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
 8004f62:	211b      	movs	r1, #27
 8004f64:	f88d 1000 	strb.w	r1, [sp]
 8004f68:	215b      	movs	r1, #91	; 0x5b
 8004f6a:	f88d 1001 	strb.w	r1, [sp, #1]
 8004f6e:	2134      	movs	r1, #52	; 0x34
 8004f70:	f88d 1002 	strb.w	r1, [sp, #2]
 8004f74:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 8004f78:	f88d 1003 	strb.w	r1, [sp, #3]
 8004f7c:	216d      	movs	r1, #109	; 0x6d
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
 8004f7e:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	uint8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
 8004f82:	f88d 1004 	strb.w	r1, [sp, #4]
 8004f86:	2100      	movs	r1, #0
 8004f88:	f88d 1005 	strb.w	r1, [sp, #5]
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8004f8c:	6960      	ldr	r0, [r4, #20]
 8004f8e:	4903      	ldr	r1, [pc, #12]	; (8004f9c <z_shell_vt100_colors_restore+0x54>)
 8004f90:	466a      	mov	r2, sp
 8004f92:	f006 fba2 	bl	800b6da <z_shell_raw_fprintf>
}
 8004f96:	b003      	add	sp, #12
 8004f98:	bd30      	pop	{r4, r5, pc}
 8004f9a:	bf00      	nop
 8004f9c:	0800fa80 	.word	0x0800fa80

08004fa0 <z_shell_op_word_remove>:
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 8004fa0:	6883      	ldr	r3, [r0, #8]
{
 8004fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((shell->ctx->cmd_buff_len == 0) ||
 8004fa4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
{
 8004fa6:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 8004fa8:	2a00      	cmp	r2, #0
 8004faa:	d048      	beq.n	800503e <z_shell_op_word_remove+0x9e>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 8004fac:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
	if ((shell->ctx->cmd_buff_len == 0) ||
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	d045      	beq.n	800503e <z_shell_op_word_remove+0x9e>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 8004fb2:	303d      	adds	r0, #61	; 0x3d
 8004fb4:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
 8004fb6:	f103 063e 	add.w	r6, r3, #62	; 0x3e
 8004fba:	4603      	mov	r3, r0
 8004fbc:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
 8004fbe:	42b3      	cmp	r3, r6
 8004fc0:	b2a4      	uxth	r4, r4
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	d30d      	bcc.n	8004fe2 <z_shell_op_word_remove+0x42>
 8004fc6:	f811 7901 	ldrb.w	r7, [r1], #-1
 8004fca:	2f20      	cmp	r7, #32
 8004fcc:	d035      	beq.n	800503a <z_shell_op_word_remove+0x9a>
 8004fce:	4619      	mov	r1, r3
 8004fd0:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
 8004fd2:	7808      	ldrb	r0, [r1, #0]
 8004fd4:	2820      	cmp	r0, #32
 8004fd6:	d004      	beq.n	8004fe2 <z_shell_op_word_remove+0x42>
		++chars_to_delete;
 8004fd8:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
 8004fda:	429e      	cmp	r6, r3
		++chars_to_delete;
 8004fdc:	b2a4      	uxth	r4, r4
		--str;
 8004fde:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
 8004fe0:	d9f5      	bls.n	8004fce <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
 8004fe2:	1c4b      	adds	r3, r1, #1
 8004fe4:	1c60      	adds	r0, r4, #1
 8004fe6:	1b12      	subs	r2, r2, r4
 8004fe8:	4401      	add	r1, r0
 8004fea:	4618      	mov	r0, r3
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	f008 fb81 	bl	800d6f4 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
 8004ff2:	68a9      	ldr	r1, [r5, #8]
 8004ff4:	8f0a      	ldrh	r2, [r1, #56]	; 0x38
 8004ff6:	1b12      	subs	r2, r2, r4
 8004ff8:	b292      	uxth	r2, r2
 8004ffa:	870a      	strh	r2, [r1, #56]	; 0x38
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8004ffc:	440a      	add	r2, r1
 8004ffe:	2600      	movs	r6, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
 8005000:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8005002:	f882 603e 	strb.w	r6, [r2, #62]	; 0x3e
	z_shell_op_cursor_move(shell, -chars_to_delete);
 8005006:	4628      	mov	r0, r5
 8005008:	b209      	sxth	r1, r1
 800500a:	f006 fbd2 	bl	800b7b2 <z_shell_op_cursor_move>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
 800500e:	6968      	ldr	r0, [r5, #20]
 8005010:	4a0c      	ldr	r2, [pc, #48]	; (8005044 <z_shell_op_word_remove+0xa4>)
 8005012:	490d      	ldr	r1, [pc, #52]	; (8005048 <z_shell_op_word_remove+0xa8>)
 8005014:	f006 fb61 	bl	800b6da <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
 8005018:	4631      	mov	r1, r6
 800501a:	9b01      	ldr	r3, [sp, #4]
 800501c:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <z_shell_op_word_remove+0xa8>)
 800501e:	4628      	mov	r0, r5
 8005020:	f006 fc94 	bl	800b94c <z_shell_fprintf>
	z_clear_eos(shell);
 8005024:	6968      	ldr	r0, [r5, #20]
 8005026:	f7ff feef 	bl	8004e08 <z_clear_eos.isra.0>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
 800502a:	4a08      	ldr	r2, [pc, #32]	; (800504c <z_shell_op_word_remove+0xac>)
 800502c:	4906      	ldr	r1, [pc, #24]	; (8005048 <z_shell_op_word_remove+0xa8>)
 800502e:	6968      	ldr	r0, [r5, #20]
}
 8005030:	b003      	add	sp, #12
 8005032:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005036:	f006 bb50 	b.w	800b6da <z_shell_raw_fprintf>
 800503a:	460b      	mov	r3, r1
 800503c:	e7be      	b.n	8004fbc <z_shell_op_word_remove+0x1c>
 800503e:	b003      	add	sp, #12
 8005040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005042:	bf00      	nop
 8005044:	0800fe27 	.word	0x0800fe27
 8005048:	0800fa80 	.word	0x0800fa80
 800504c:	0800fe20 	.word	0x0800fe20

08005050 <reprint_from_cursor>:
{
 8005050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005054:	4604      	mov	r4, r0
 8005056:	460d      	mov	r5, r1
	if (data_removed) {
 8005058:	4617      	mov	r7, r2
 800505a:	b112      	cbz	r2, 8005062 <reprint_from_cursor+0x12>
		z_clear_eos(shell);
 800505c:	6940      	ldr	r0, [r0, #20]
 800505e:	f7ff fed3 	bl	8004e08 <z_clear_eos.isra.0>
	return shell->ctx->internal.flags.obscure == 1;
 8005062:	68a3      	ldr	r3, [r4, #8]
 8005064:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8005068:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 800506a:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 800506e:	303e      	adds	r0, #62	; 0x3e
	if (z_flag_obscure_get(shell)) {
 8005070:	0712      	lsls	r2, r2, #28
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8005072:	4403      	add	r3, r0
	if (z_flag_obscure_get(shell)) {
 8005074:	d51f      	bpl.n	80050b6 <reprint_from_cursor+0x66>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8005076:	4618      	mov	r0, r3
 8005078:	f7fb fea8 	bl	8000dcc <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
 800507c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80050c4 <reprint_from_cursor+0x74>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8005080:	4606      	mov	r6, r0
		while (len--) {
 8005082:	b996      	cbnz	r6, 80050aa <reprint_from_cursor+0x5a>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 8005084:	68a3      	ldr	r3, [r4, #8]
 8005086:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8005088:	875a      	strh	r2, [r3, #58]	; 0x3a
	if (full_line_cmd(shell)) {
 800508a:	4620      	mov	r0, r4
 800508c:	f006 fb32 	bl	800b6f4 <full_line_cmd>
 8005090:	b120      	cbz	r0, 800509c <reprint_from_cursor+0x4c>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
 8005092:	b107      	cbz	r7, 8005096 <reprint_from_cursor+0x46>
 8005094:	b115      	cbz	r5, 800509c <reprint_from_cursor+0x4c>
			z_cursor_next_line_move(shell);
 8005096:	6960      	ldr	r0, [r4, #20]
 8005098:	f7ff feb0 	bl	8004dfc <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
 800509c:	4269      	negs	r1, r5
 800509e:	4620      	mov	r0, r4
 80050a0:	b209      	sxth	r1, r1
}
 80050a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
 80050a6:	f006 bb84 	b.w	800b7b2 <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
 80050aa:	6960      	ldr	r0, [r4, #20]
 80050ac:	4641      	mov	r1, r8
 80050ae:	f006 fb14 	bl	800b6da <z_shell_raw_fprintf>
 80050b2:	3e01      	subs	r6, #1
 80050b4:	e7e5      	b.n	8005082 <reprint_from_cursor+0x32>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
 80050b6:	4a02      	ldr	r2, [pc, #8]	; (80050c0 <reprint_from_cursor+0x70>)
 80050b8:	4620      	mov	r0, r4
 80050ba:	f006 fc47 	bl	800b94c <z_shell_fprintf>
 80050be:	e7e1      	b.n	8005084 <reprint_from_cursor+0x34>
 80050c0:	0800fa80 	.word	0x0800fa80
 80050c4:	08010783 	.word	0x08010783

080050c8 <z_shell_op_char_insert>:
{
 80050c8:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
 80050ca:	6883      	ldr	r3, [r0, #8]
{
 80050cc:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
 80050d0:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
{
 80050d4:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
 80050d6:	07d0      	lsls	r0, r2, #31
 80050d8:	d521      	bpl.n	800511e <z_shell_op_char_insert+0x56>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
 80050da:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
	if (shell->ctx->internal.flags.insert_mode &&
 80050dc:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80050de:	428a      	cmp	r2, r1
 80050e0:	d01d      	beq.n	800511e <z_shell_op_char_insert+0x56>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 80050e2:	1c48      	adds	r0, r1, #1
 80050e4:	4419      	add	r1, r3
		char_replace(shell, data);
 80050e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 80050ea:	8758      	strh	r0, [r3, #58]	; 0x3a
 80050ec:	f881 203e 	strb.w	r2, [r1, #62]	; 0x3e
	return shell->ctx->internal.flags.echo == 1;
 80050f0:	f8d3 125c 	ldr.w	r1, [r3, #604]	; 0x25c
	if (!z_flag_echo_get(shell)) {
 80050f4:	0749      	lsls	r1, r1, #29
 80050f6:	d510      	bpl.n	800511a <z_shell_op_char_insert+0x52>
	return shell->ctx->internal.flags.obscure == 1;
 80050f8:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
 80050fc:	6960      	ldr	r0, [r4, #20]
 80050fe:	490b      	ldr	r1, [pc, #44]	; (800512c <z_shell_op_char_insert+0x64>)
		data = '*';
 8005100:	f013 0f08 	tst.w	r3, #8
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
 8005104:	bf18      	it	ne
 8005106:	222a      	movne	r2, #42	; 0x2a
 8005108:	f006 fae7 	bl	800b6da <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
 800510c:	4620      	mov	r0, r4
 800510e:	f006 fb07 	bl	800b720 <z_shell_cursor_in_empty_line>
 8005112:	b110      	cbz	r0, 800511a <z_shell_op_char_insert+0x52>
		z_cursor_next_line_move(shell);
 8005114:	6960      	ldr	r0, [r4, #20]
 8005116:	f7ff fe71 	bl	8004dfc <z_cursor_next_line_move.isra.0>
}
 800511a:	b002      	add	sp, #8
 800511c:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
 800511e:	2201      	movs	r2, #1
 8005120:	f10d 0107 	add.w	r1, sp, #7
 8005124:	4620      	mov	r0, r4
 8005126:	f006 fc1e 	bl	800b966 <data_insert>
}
 800512a:	e7f6      	b.n	800511a <z_shell_op_char_insert+0x52>
 800512c:	0800fe19 	.word	0x0800fe19

08005130 <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 8005130:	6883      	ldr	r3, [r0, #8]
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <z_shell_print_prompt_and_cmd+0x2c>)
 8005134:	681b      	ldr	r3, [r3, #0]
{
 8005136:	b510      	push	{r4, lr}
 8005138:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 800513a:	2103      	movs	r1, #3
 800513c:	f006 fc06 	bl	800b94c <z_shell_fprintf>
	return shell->ctx->internal.flags.echo == 1;
 8005140:	68a3      	ldr	r3, [r4, #8]
 8005142:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
	if (z_flag_echo_get(shell)) {
 8005146:	075b      	lsls	r3, r3, #29
 8005148:	d507      	bpl.n	800515a <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
 800514a:	4620      	mov	r0, r4
 800514c:	f7ff febe 	bl	8004ecc <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
 8005150:	4620      	mov	r0, r4
}
 8005152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
 8005156:	f006 bb09 	b.w	800b76c <z_shell_op_cursor_position_synchronize>
}
 800515a:	bd10      	pop	{r4, pc}
 800515c:	0800fa80 	.word	0x0800fa80

08005160 <init>:

static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
 8005160:	b510      	push	{r4, lr}
 8005162:	460c      	mov	r4, r1
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8005164:	6841      	ldr	r1, [r0, #4]

	sh_uart->ctrl_blk->dev = (const struct device *)config;
 8005166:	6808      	ldr	r0, [r1, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
 8005168:	6083      	str	r3, [r0, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
 800516a:	e9c0 4200 	strd	r4, r2, [r0]
	ring_buf_reset(sh_uart->tx_ringbuf);
 800516e:	6888      	ldr	r0, [r1, #8]
 8005170:	f006 fc7e 	bl	800ba70 <ring_buf_reset>
	ring_buf_reset(sh_uart->rx_ringbuf);
 8005174:	68c8      	ldr	r0, [r1, #12]
 8005176:	f006 fc7b 	bl	800ba70 <ring_buf_reset>
	sh_uart->ctrl_blk->tx_busy = 0;
 800517a:	680b      	ldr	r3, [r1, #0]
 800517c:	2200      	movs	r2, #0
 800517e:	60da      	str	r2, [r3, #12]
	const struct uart_driver_api *api =
 8005180:	68a3      	ldr	r3, [r4, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8005182:	b12b      	cbz	r3, 8005190 <init+0x30>
 8005184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005186:	b11b      	cbz	r3, 8005190 <init+0x30>
		api->irq_callback_set(dev, cb, user_data);
 8005188:	460a      	mov	r2, r1
 800518a:	4620      	mov	r0, r4
 800518c:	4904      	ldr	r1, [pc, #16]	; (80051a0 <init+0x40>)
 800518e:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
 8005190:	68a3      	ldr	r3, [r4, #8]
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	b10b      	cbz	r3, 800519a <init+0x3a>
		api->irq_rx_enable(dev);
 8005196:	4620      	mov	r0, r4
 8005198:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
 800519a:	2000      	movs	r0, #0
 800519c:	bd10      	pop	{r4, pc}
 800519e:	bf00      	nop
 80051a0:	080051d5 	.word	0x080051d5

080051a4 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
 80051a4:	b507      	push	{r0, r1, r2, lr}
 80051a6:	4809      	ldr	r0, [pc, #36]	; (80051cc <enable_shell_uart+0x28>)
 80051a8:	f002 fef2 	bl	8007f90 <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	uint32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	if (dev == NULL) {
 80051ac:	4601      	mov	r1, r0
 80051ae:	b150      	cbz	r0, 80051c6 <enable_shell_uart+0x22>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, true, log_backend, level);
 80051b0:	2304      	movs	r3, #4
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	2301      	movs	r3, #1
 80051b6:	4806      	ldr	r0, [pc, #24]	; (80051d0 <enable_shell_uart+0x2c>)
 80051b8:	461a      	mov	r2, r3
 80051ba:	f7ff fb11 	bl	80047e0 <shell_init>

	return 0;
 80051be:	2000      	movs	r0, #0
}
 80051c0:	b003      	add	sp, #12
 80051c2:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
 80051c6:	f06f 0012 	mvn.w	r0, #18
 80051ca:	e7f9      	b.n	80051c0 <enable_shell_uart+0x1c>
 80051cc:	0800fe2a 	.word	0x0800fe2a
 80051d0:	0800de20 	.word	0x0800de20

080051d4 <uart_callback>:
{
 80051d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d8:	4683      	mov	fp, r0
 80051da:	460d      	mov	r5, r1
	if (api->irq_update == NULL) {
 80051dc:	6883      	ldr	r3, [r0, #8]
 80051de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e0:	b103      	cbz	r3, 80051e4 <uart_callback+0x10>
	return api->irq_update(dev);
 80051e2:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
 80051e4:	f8db 3008 	ldr.w	r3, [fp, #8]
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d131      	bne.n	8005252 <uart_callback+0x7e>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 80051ee:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80052e0 <uart_callback+0x10c>
 80051f2:	4e3a      	ldr	r6, [pc, #232]	; (80052dc <uart_callback+0x108>)
			LOG_WRN("RX ring buffer full.");
 80051f4:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 80052e4 <uart_callback+0x110>
 80051f8:	eba9 0606 	sub.w	r6, r9, r6
 80051fc:	08b6      	lsrs	r6, r6, #2
 80051fe:	01b6      	lsls	r6, r6, #6
 8005200:	f04f 0800 	mov.w	r8, #0
 8005204:	f046 0602 	orr.w	r6, r6, #2
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
 8005208:	68e8      	ldr	r0, [r5, #12]
 800520a:	a901      	add	r1, sp, #4
 800520c:	6902      	ldr	r2, [r0, #16]
 800520e:	f005 fae3 	bl	800a7d8 <ring_buf_put_claim>
		if (len > 0) {
 8005212:	4607      	mov	r7, r0
 8005214:	2800      	cmp	r0, #0
 8005216:	d044      	beq.n	80052a2 <uart_callback+0xce>
	if (api->fifo_read != NULL) {
 8005218:	f8db 3008 	ldr.w	r3, [fp, #8]
 800521c:	699c      	ldr	r4, [r3, #24]
 800521e:	2c00      	cmp	r4, #0
 8005220:	d03d      	beq.n	800529e <uart_callback+0xca>
		return api->fifo_read(dev, rx_data, size);
 8005222:	4602      	mov	r2, r0
 8005224:	9901      	ldr	r1, [sp, #4]
 8005226:	4658      	mov	r0, fp
 8005228:	47a0      	blx	r4
				new_data = true;
 800522a:	1e04      	subs	r4, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 800522c:	4621      	mov	r1, r4
 800522e:	68e8      	ldr	r0, [r5, #12]
				new_data = true;
 8005230:	bf18      	it	ne
 8005232:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 8005236:	f005 faeb 	bl	800a810 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
 800523a:	b10c      	cbz	r4, 8005240 <uart_callback+0x6c>
 800523c:	42a7      	cmp	r7, r4
 800523e:	d0e3      	beq.n	8005208 <uart_callback+0x34>
	if (new_data) {
 8005240:	f1b8 0f00 	cmp.w	r8, #0
 8005244:	d009      	beq.n	800525a <uart_callback+0x86>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
 8005246:	682b      	ldr	r3, [r5, #0]
 8005248:	2000      	movs	r0, #0
 800524a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 800524e:	4790      	blx	r2
}
 8005250:	e003      	b.n	800525a <uart_callback+0x86>
	return api->irq_rx_ready(dev);
 8005252:	4658      	mov	r0, fp
 8005254:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
 8005256:	2800      	cmp	r0, #0
 8005258:	d1c9      	bne.n	80051ee <uart_callback+0x1a>
	if (api->irq_tx_ready != NULL) {
 800525a:	f8db 3008 	ldr.w	r3, [fp, #8]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	b1d3      	cbz	r3, 8005298 <uart_callback+0xc4>
		return api->irq_tx_ready(dev);
 8005262:	4658      	mov	r0, fp
 8005264:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
 8005266:	b1b8      	cbz	r0, 8005298 <uart_callback+0xc4>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
 8005268:	68a8      	ldr	r0, [r5, #8]
 800526a:	a901      	add	r1, sp, #4
 800526c:	6902      	ldr	r2, [r0, #16]
 800526e:	f005 fafb 	bl	800a868 <ring_buf_get_claim>
	if (len) {
 8005272:	4604      	mov	r4, r0
 8005274:	b360      	cbz	r0, 80052d0 <uart_callback+0xfc>
	if (api->fifo_fill != NULL) {
 8005276:	f8db 3008 	ldr.w	r3, [fp, #8]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	b333      	cbz	r3, 80052cc <uart_callback+0xf8>
		return api->fifo_fill(dev, tx_data, size);
 800527e:	9901      	ldr	r1, [sp, #4]
 8005280:	4602      	mov	r2, r0
 8005282:	4658      	mov	r0, fp
 8005284:	4798      	blx	r3
 8005286:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
 8005288:	68a8      	ldr	r0, [r5, #8]
 800528a:	f005 fb09 	bl	800a8a0 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 800528e:	682b      	ldr	r3, [r5, #0]
 8005290:	2001      	movs	r0, #1
 8005292:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8005296:	4790      	blx	r2
}
 8005298:	b003      	add	sp, #12
 800529a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return 0;
 800529e:	4620      	mov	r0, r4
 80052a0:	e7c3      	b.n	800522a <uart_callback+0x56>
			LOG_WRN("RX ring buffer full.");
 80052a2:	f8d9 3000 	ldr.w	r3, [r9]
 80052a6:	f013 0f06 	tst.w	r3, #6
 80052aa:	d003      	beq.n	80052b4 <uart_callback+0xe0>
 80052ac:	4631      	mov	r1, r6
 80052ae:	4650      	mov	r0, sl
 80052b0:	f005 fca9 	bl	800ac06 <log_0>
	if (api->fifo_read != NULL) {
 80052b4:	f8db 3008 	ldr.w	r3, [fp, #8]
 80052b8:	699c      	ldr	r4, [r3, #24]
 80052ba:	2c00      	cmp	r4, #0
 80052bc:	d0bd      	beq.n	800523a <uart_callback+0x66>
		return api->fifo_read(dev, rx_data, size);
 80052be:	2201      	movs	r2, #1
 80052c0:	f10d 0103 	add.w	r1, sp, #3
 80052c4:	4658      	mov	r0, fp
 80052c6:	47a0      	blx	r4
 80052c8:	4604      	mov	r4, r0
 80052ca:	e7b6      	b.n	800523a <uart_callback+0x66>
	return 0;
 80052cc:	4619      	mov	r1, r3
 80052ce:	e7db      	b.n	8005288 <uart_callback+0xb4>
		uart_irq_tx_disable(dev);
 80052d0:	4658      	mov	r0, fp
 80052d2:	f006 fba7 	bl	800ba24 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
 80052d6:	682b      	ldr	r3, [r5, #0]
 80052d8:	60dc      	str	r4, [r3, #12]
 80052da:	e7d8      	b.n	800528e <uart_callback+0xba>
 80052dc:	2000033c 	.word	0x2000033c
 80052e0:	2000035c 	.word	0x2000035c
 80052e4:	0800fe31 	.word	0x0800fe31

080052e8 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
 80052e8:	4901      	ldr	r1, [pc, #4]	; (80052f0 <z_cursor_next_line_move.isra.0+0x8>)
 80052ea:	f006 bbfd 	b.w	800bae8 <z_shell_raw_fprintf>
 80052ee:	bf00      	nop
 80052f0:	0800f965 	.word	0x0800f965

080052f4 <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
 80052f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f8:	4604      	mov	r4, r0
 80052fa:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
 80052fc:	460e      	mov	r6, r1
 80052fe:	2900      	cmp	r1, #0
 8005300:	d067      	beq.n	80053d2 <formatted_text_print.constprop.0+0xde>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
 8005302:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80053d8 <formatted_text_print.constprop.0+0xe4>
 8005306:	2500      	movs	r5, #0
 8005308:	5d73      	ldrb	r3, [r6, r5]
 800530a:	f813 3009 	ldrb.w	r3, [r3, r9]
 800530e:	071a      	lsls	r2, r3, #28
 8005310:	d41e      	bmi.n	8005350 <formatted_text_print.constprop.0+0x5c>
	return str == NULL ? 0U : (uint16_t)strlen(str);
 8005312:	4630      	mov	r0, r6
 8005314:	f7fb fd5a 	bl	8000dcc <strlen>
		size_t idx = 0;

		length = z_shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8005318:	68a3      	ldr	r3, [r4, #8]
 800531a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
 800531c:	b280      	uxth	r0, r0
 800531e:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8005320:	eba2 0308 	sub.w	r3, r2, r8
		if (length <=
 8005324:	4298      	cmp	r0, r3
 8005326:	eb06 0a05 	add.w	sl, r6, r5
 800532a:	d913      	bls.n	8005354 <formatted_text_print.constprop.0+0x60>
 800532c:	4651      	mov	r1, sl
		size_t idx = 0;
 800532e:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
 8005330:	f811 0b01 	ldrb.w	r0, [r1], #1
 8005334:	f819 c000 	ldrb.w	ip, [r9, r0]
 8005338:	f01c 0f08 	tst.w	ip, #8
 800533c:	d002      	beq.n	8005344 <formatted_text_print.constprop.0+0x50>
				length = idx;
				if (*(str + offset + idx) == '\n') {
 800533e:	280a      	cmp	r0, #10
 8005340:	d02f      	beq.n	80053a2 <formatted_text_print.constprop.0+0xae>
 8005342:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
 8005344:	eb08 0007 	add.w	r0, r8, r7
 8005348:	4282      	cmp	r2, r0
 800534a:	d929      	bls.n	80053a0 <formatted_text_print.constprop.0+0xac>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
 800534c:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
 800534e:	e7ef      	b.n	8005330 <formatted_text_print.constprop.0+0x3c>
		++offset;
 8005350:	3501      	adds	r5, #1
 8005352:	e7d9      	b.n	8005308 <formatted_text_print.constprop.0+0x14>
 8005354:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
 8005356:	2700      	movs	r7, #0
 8005358:	42b8      	cmp	r0, r7
 800535a:	d016      	beq.n	800538a <formatted_text_print.constprop.0+0x96>
				if (*(str + offset + idx) == '\n') {
 800535c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005360:	2a0a      	cmp	r2, #10
 8005362:	eb05 0907 	add.w	r9, r5, r7
 8005366:	d119      	bne.n	800539c <formatted_text_print.constprop.0+0xa8>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
 8005368:	6960      	ldr	r0, [r4, #20]
 800536a:	f006 f8b9 	bl	800b4e0 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
 800536e:	4651      	mov	r1, sl
 8005370:	463a      	mov	r2, r7
 8005372:	4620      	mov	r0, r4
 8005374:	f006 fa83 	bl	800b87e <z_shell_write>
					z_cursor_next_line_move(shell);
 8005378:	6960      	ldr	r0, [r4, #20]
 800537a:	f7ff ffb5 	bl	80052e8 <z_cursor_next_line_move.isra.0>
					z_shell_op_cursor_horiz_move(shell,
 800537e:	4641      	mov	r1, r8
 8005380:	4620      	mov	r0, r4
					offset += idx + 1;
 8005382:	f109 0501 	add.w	r5, r9, #1
					z_shell_op_cursor_horiz_move(shell,
 8005386:	f7ff fd57 	bl	8004e38 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
 800538a:	6960      	ldr	r0, [r4, #20]
 800538c:	1971      	adds	r1, r6, r5
 800538e:	f006 fbab 	bl	800bae8 <z_shell_raw_fprintf>

		z_cursor_next_line_move(shell);
		z_shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	z_cursor_next_line_move(shell);
 8005392:	6960      	ldr	r0, [r4, #20]
}
 8005394:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
 8005398:	f7ff bfa6 	b.w	80052e8 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
 800539c:	3701      	adds	r7, #1
 800539e:	e7db      	b.n	8005358 <formatted_text_print.constprop.0+0x64>
 80053a0:	461f      	mov	r7, r3
 80053a2:	6960      	ldr	r0, [r4, #20]
 80053a4:	f006 f89c 	bl	800b4e0 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
 80053a8:	463a      	mov	r2, r7
 80053aa:	4651      	mov	r1, sl
 80053ac:	4620      	mov	r0, r4
 80053ae:	f006 fa66 	bl	800b87e <z_shell_write>
		offset += length;
 80053b2:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
 80053b4:	5d73      	ldrb	r3, [r6, r5]
 80053b6:	f819 3003 	ldrb.w	r3, [r9, r3]
 80053ba:	071b      	lsls	r3, r3, #28
 80053bc:	d407      	bmi.n	80053ce <formatted_text_print.constprop.0+0xda>
		z_cursor_next_line_move(shell);
 80053be:	6960      	ldr	r0, [r4, #20]
 80053c0:	f7ff ff92 	bl	80052e8 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
 80053c4:	4641      	mov	r1, r8
 80053c6:	4620      	mov	r0, r4
 80053c8:	f7ff fd36 	bl	8004e38 <z_shell_op_cursor_horiz_move>
	while (true) {
 80053cc:	e7a1      	b.n	8005312 <formatted_text_print.constprop.0+0x1e>
			++offset;
 80053ce:	3501      	adds	r5, #1
 80053d0:	e7f0      	b.n	80053b4 <formatted_text_print.constprop.0+0xc0>
}
 80053d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d6:	bf00      	nop
 80053d8:	08010d02 	.word	0x08010d02

080053dc <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
 80053dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e0:	460f      	mov	r7, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
 80053e2:	2100      	movs	r1, #0
{
 80053e4:	b08d      	sub	sp, #52	; 0x34
 80053e6:	4604      	mov	r4, r0
 80053e8:	4616      	mov	r6, r2
	uint16_t longest = 0U;
 80053ea:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 80053ec:	aa07      	add	r2, sp, #28
 80053ee:	4638      	mov	r0, r7
 80053f0:	f101 0801 	add.w	r8, r1, #1
 80053f4:	f7ff fc6c 	bl	8004cd0 <z_shell_cmd_get>
 80053f8:	4601      	mov	r1, r0
 80053fa:	b9b0      	cbnz	r0, 800542a <z_shell_help_subcmd_print+0x4e>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
 80053fc:	b195      	cbz	r5, 8005424 <z_shell_help_subcmd_print+0x48>
		return;
	}

	if (description != NULL) {
 80053fe:	b11e      	cbz	r6, 8005408 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
 8005400:	4632      	mov	r2, r6
 8005402:	4620      	mov	r0, r4
 8005404:	f006 faa2 	bl	800b94c <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8005408:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80054c0 <z_shell_help_subcmd_print+0xe4>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
 800540c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80054c4 <z_shell_help_subcmd_print+0xe8>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
 8005410:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80054c8 <z_shell_help_subcmd_print+0xec>
		for (uint16_t i = 0; i < tmp; i++) {
 8005414:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 8005416:	1c4b      	adds	r3, r1, #1
 8005418:	aa07      	add	r2, sp, #28
 800541a:	4638      	mov	r0, r7
 800541c:	9302      	str	r3, [sp, #8]
 800541e:	f7ff fc57 	bl	8004cd0 <z_shell_cmd_get>
 8005422:	b960      	cbnz	r0, 800543e <z_shell_help_subcmd_print+0x62>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
 8005424:	b00d      	add	sp, #52	; 0x34
 8005426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
 800542a:	6808      	ldr	r0, [r1, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
 800542c:	b110      	cbz	r0, 8005434 <z_shell_help_subcmd_print+0x58>
 800542e:	f7fb fccd 	bl	8000dcc <strlen>
 8005432:	b280      	uxth	r0, r0
 8005434:	4285      	cmp	r5, r0
 8005436:	bf38      	it	cc
 8005438:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 800543a:	4641      	mov	r1, r8
 800543c:	e7d6      	b.n	80053ec <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
 800543e:	e9d0 6900 	ldrd	r6, r9, [r0]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8005442:	4640      	mov	r0, r8
 8005444:	f7fb fcc2 	bl	8000dcc <strlen>
 8005448:	9003      	str	r0, [sp, #12]
	if ((item_name == NULL) || (item_name[0] == '\0')) {
 800544a:	b316      	cbz	r6, 8005492 <z_shell_help_subcmd_print+0xb6>
 800544c:	7832      	ldrb	r2, [r6, #0]
 800544e:	b302      	cbz	r2, 8005492 <z_shell_help_subcmd_print+0xb6>
		uint16_t tmp = item_name_width - strlen(item_name);
 8005450:	4630      	mov	r0, r6
 8005452:	f7fb fcbb 	bl	8000dcc <strlen>
 8005456:	1a28      	subs	r0, r5, r0
 8005458:	b283      	uxth	r3, r0
		char space = ' ';
 800545a:	2220      	movs	r2, #32
		uint16_t tmp = item_name_width - strlen(item_name);
 800545c:	9304      	str	r3, [sp, #16]
		char space = ' ';
 800545e:	f88d 201b 	strb.w	r2, [sp, #27]
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
 8005462:	4643      	mov	r3, r8
 8005464:	9600      	str	r6, [sp, #0]
 8005466:	4652      	mov	r2, sl
 8005468:	2100      	movs	r1, #0
 800546a:	4620      	mov	r0, r4
 800546c:	f006 fa6e 	bl	800b94c <z_shell_fprintf>
		for (uint16_t i = 0; i < tmp; i++) {
 8005470:	2300      	movs	r3, #0
 8005472:	9904      	ldr	r1, [sp, #16]
 8005474:	b29a      	uxth	r2, r3
 8005476:	428a      	cmp	r2, r1
 8005478:	d30d      	bcc.n	8005496 <z_shell_help_subcmd_print+0xba>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
 800547a:	4643      	mov	r3, r8
 800547c:	465a      	mov	r2, fp
 800547e:	2100      	movs	r1, #0
 8005480:	4620      	mov	r0, r4
 8005482:	f006 fa63 	bl	800b94c <z_shell_fprintf>
	if (item_help == NULL) {
 8005486:	f1b9 0f00 	cmp.w	r9, #0
 800548a:	d10e      	bne.n	80054aa <z_shell_help_subcmd_print+0xce>
		z_cursor_next_line_move(shell);
 800548c:	6960      	ldr	r0, [r4, #20]
 800548e:	f7ff ff2b 	bl	80052e8 <z_cursor_next_line_move.isra.0>
		for (uint16_t i = 0; i < tmp; i++) {
 8005492:	9902      	ldr	r1, [sp, #8]
 8005494:	e7bf      	b.n	8005416 <z_shell_help_subcmd_print+0x3a>
			z_shell_write(shell, &space, 1);
 8005496:	2201      	movs	r2, #1
 8005498:	f10d 011b 	add.w	r1, sp, #27
 800549c:	4620      	mov	r0, r4
 800549e:	9305      	str	r3, [sp, #20]
 80054a0:	f006 f9ed 	bl	800b87e <z_shell_write>
		for (uint16_t i = 0; i < tmp; i++) {
 80054a4:	9b05      	ldr	r3, [sp, #20]
 80054a6:	3301      	adds	r3, #1
 80054a8:	e7e3      	b.n	8005472 <z_shell_help_subcmd_print+0x96>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	1c6a      	adds	r2, r5, #1
 80054ae:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	formatted_text_print(shell, item_help, offset, false);
 80054b2:	b292      	uxth	r2, r2
 80054b4:	4649      	mov	r1, r9
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7ff ff1c 	bl	80052f4 <formatted_text_print.constprop.0>
 80054bc:	e7e9      	b.n	8005492 <z_shell_help_subcmd_print+0xb6>
 80054be:	bf00      	nop
 80054c0:	0800fe85 	.word	0x0800fe85
 80054c4:	0800fc28 	.word	0x0800fc28
 80054c8:	0800fe73 	.word	0x0800fe73

080054cc <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
 80054cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ce:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 80054d0:	6808      	ldr	r0, [r1, #0]
{
 80054d2:	460d      	mov	r5, r1
 80054d4:	b1b8      	cbz	r0, 8005506 <z_shell_help_cmd_print+0x3a>
 80054d6:	f7fb fc79 	bl	8000dcc <strlen>
 80054da:	b284      	uxth	r4, r0
 80054dc:	4f0b      	ldr	r7, [pc, #44]	; (800550c <z_shell_help_cmd_print+0x40>)
 80054de:	4638      	mov	r0, r7
 80054e0:	f7fb fc74 	bl	8000dcc <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	4a0a      	ldr	r2, [pc, #40]	; (8005510 <z_shell_help_cmd_print+0x44>)
 80054e8:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 80054ea:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
 80054ec:	2100      	movs	r1, #0
 80054ee:	4630      	mov	r0, r6
 80054f0:	f006 fa2c 	bl	800b94c <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 80054f4:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
 80054f6:	6869      	ldr	r1, [r5, #4]
 80054f8:	4622      	mov	r2, r4
 80054fa:	4630      	mov	r0, r6
}
 80054fc:	b003      	add	sp, #12
 80054fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
 8005502:	f7ff bef7 	b.w	80052f4 <formatted_text_print.constprop.0>
 8005506:	4604      	mov	r4, r0
 8005508:	e7e8      	b.n	80054dc <z_shell_help_cmd_print+0x10>
 800550a:	bf00      	nop
 800550c:	0800fe81 	.word	0x0800fe81
 8005510:	0800fc28 	.word	0x0800fc28

08005514 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
 8005514:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
 8005516:	4907      	ldr	r1, [pc, #28]	; (8005534 <z_shell_help_request+0x20>)
{
 8005518:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
 800551a:	f7fb fc4d 	bl	8000db8 <strcmp>
 800551e:	b138      	cbz	r0, 8005530 <z_shell_help_request+0x1c>
 8005520:	4905      	ldr	r1, [pc, #20]	; (8005538 <z_shell_help_request+0x24>)
 8005522:	4620      	mov	r0, r4
 8005524:	f7fb fc48 	bl	8000db8 <strcmp>
 8005528:	fab0 f080 	clz	r0, r0
 800552c:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
 800552e:	bd10      	pop	{r4, pc}
		return true;
 8005530:	2001      	movs	r0, #1
 8005532:	e7fc      	b.n	800552e <z_shell_help_request+0x1a>
 8005534:	0800fe77 	.word	0x0800fe77
 8005538:	0800fe7a 	.word	0x0800fe7a

0800553c <cmd_clear>:
	z_cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
 800553c:	b510      	push	{r4, lr}
 800553e:	4604      	mov	r4, r0
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 8005540:	4905      	ldr	r1, [pc, #20]	; (8005558 <cmd_clear+0x1c>)
 8005542:	4a06      	ldr	r2, [pc, #24]	; (800555c <cmd_clear+0x20>)
 8005544:	6940      	ldr	r0, [r0, #20]
 8005546:	f006 fae0 	bl	800bb0a <z_shell_raw_fprintf>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 800554a:	6960      	ldr	r0, [r4, #20]
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <cmd_clear+0x24>)
 800554e:	4902      	ldr	r1, [pc, #8]	; (8005558 <cmd_clear+0x1c>)
 8005550:	f006 fadb 	bl	800bb0a <z_shell_raw_fprintf>

	return 0;
}
 8005554:	2000      	movs	r0, #0
 8005556:	bd10      	pop	{r4, pc}
 8005558:	0800fa80 	.word	0x0800fa80
 800555c:	080102dd 	.word	0x080102dd
 8005560:	080102d8 	.word	0x080102d8

08005564 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
 8005564:	b510      	push	{r4, lr}
 8005566:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
 8005568:	4a04      	ldr	r2, [pc, #16]	; (800557c <cmd_resize_default+0x18>)
 800556a:	4905      	ldr	r1, [pc, #20]	; (8005580 <cmd_resize_default+0x1c>)
 800556c:	6940      	ldr	r0, [r0, #20]
 800556e:	f006 facc 	bl	800bb0a <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
 8005572:	68a3      	ldr	r3, [r4, #8]
 8005574:	4a03      	ldr	r2, [pc, #12]	; (8005584 <cmd_resize_default+0x20>)
 8005576:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
 8005578:	2000      	movs	r0, #0
 800557a:	bd10      	pop	{r4, pc}
 800557c:	080102cc 	.word	0x080102cc
 8005580:	0800fa80 	.word	0x0800fa80
 8005584:	00500018 	.word	0x00500018

08005588 <cmd_shell_stats_show>:
{
 8005588:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
 800558a:	6983      	ldr	r3, [r0, #24]
 800558c:	4a03      	ldr	r2, [pc, #12]	; (800559c <cmd_shell_stats_show+0x14>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2100      	movs	r1, #0
 8005592:	f005 ff82 	bl	800b49a <shell_fprintf>
}
 8005596:	2000      	movs	r0, #0
 8005598:	bd08      	pop	{r3, pc}
 800559a:	bf00      	nop
 800559c:	0800fe88 	.word	0x0800fe88

080055a0 <cmd_history>:
{
 80055a0:	b5f0      	push	{r4, r5, r6, r7, lr}
			shell_print(shell, "[%3d] %s",
 80055a2:	4f10      	ldr	r7, [pc, #64]	; (80055e4 <cmd_history+0x44>)
{
 80055a4:	b085      	sub	sp, #20
 80055a6:	4604      	mov	r4, r0
	size_t i = 0;
 80055a8:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
 80055aa:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
 80055ac:	68e0      	ldr	r0, [r4, #12]
 80055ae:	f10d 030e 	add.w	r3, sp, #14
 80055b2:	f502 729f 	add.w	r2, r2, #318	; 0x13e
 80055b6:	2101      	movs	r1, #1
 80055b8:	f006 fb2f 	bl	800bc1a <z_shell_history_get>
		if (len) {
 80055bc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80055c0:	68a3      	ldr	r3, [r4, #8]
 80055c2:	b158      	cbz	r0, 80055dc <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
 80055c4:	f503 739f 	add.w	r3, r3, #318	; 0x13e
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	1c6e      	adds	r6, r5, #1
 80055cc:	462b      	mov	r3, r5
 80055ce:	463a      	mov	r2, r7
 80055d0:	2100      	movs	r1, #0
 80055d2:	4620      	mov	r0, r4
 80055d4:	f005 ff61 	bl	800b49a <shell_fprintf>
 80055d8:	4635      	mov	r5, r6
		z_shell_history_get(shell->history, true,
 80055da:	e7e6      	b.n	80055aa <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
 80055dc:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
}
 80055e0:	b005      	add	sp, #20
 80055e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e4:	0800fe97 	.word	0x0800fe97

080055e8 <cmd_echo>:
	if (argc == 2) {
 80055e8:	2902      	cmp	r1, #2
{
 80055ea:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
 80055ec:	d10c      	bne.n	8005608 <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
 80055ee:	6853      	ldr	r3, [r2, #4]
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	4b0d      	ldr	r3, [pc, #52]	; (8005628 <cmd_echo+0x40>)
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	4a0c      	ldr	r2, [pc, #48]	; (800562c <cmd_echo+0x44>)
 80055fa:	f005 ff4e 	bl	800b49a <shell_fprintf>
 80055fe:	f06f 0015 	mvn.w	r0, #21
}
 8005602:	b003      	add	sp, #12
 8005604:	f85d fb04 	ldr.w	pc, [sp], #4
	return shell->ctx->internal.flags.echo == 1;
 8005608:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
 800560a:	4a09      	ldr	r2, [pc, #36]	; (8005630 <cmd_echo+0x48>)
 800560c:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8005610:	f013 0f04 	tst.w	r3, #4
 8005614:	f04f 0100 	mov.w	r1, #0
 8005618:	4b06      	ldr	r3, [pc, #24]	; (8005634 <cmd_echo+0x4c>)
 800561a:	bf18      	it	ne
 800561c:	4613      	movne	r3, r2
 800561e:	4a06      	ldr	r2, [pc, #24]	; (8005638 <cmd_echo+0x50>)
 8005620:	f005 ff3b 	bl	800b49a <shell_fprintf>
	return 0;
 8005624:	2000      	movs	r0, #0
 8005626:	e7ec      	b.n	8005602 <cmd_echo+0x1a>
 8005628:	0800feae 	.word	0x0800feae
 800562c:	0800fea5 	.word	0x0800fea5
 8005630:	0800fa3d 	.word	0x0800fa3d
 8005634:	0800fea1 	.word	0x0800fea1
 8005638:	0800fec3 	.word	0x0800fec3

0800563c <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
 800563c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
 800563e:	2901      	cmp	r1, #1
{
 8005640:	b085      	sub	sp, #20
 8005642:	4605      	mov	r5, r0
	if (argc != 1) {
 8005644:	d00d      	beq.n	8005662 <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
 8005646:	6853      	ldr	r3, [r2, #4]
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	4b55      	ldr	r3, [pc, #340]	; (80057a0 <cmd_resize+0x164>)
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	4a54      	ldr	r2, [pc, #336]	; (80057a4 <cmd_resize+0x168>)
 8005652:	2102      	movs	r1, #2
 8005654:	f005 ff21 	bl	800b49a <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
 8005658:	f06f 0415 	mvn.w	r4, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
 800565c:	4620      	mov	r0, r4
 800565e:	b005      	add	sp, #20
 8005660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
 8005662:	4a51      	ldr	r2, [pc, #324]	; (80057a8 <cmd_resize+0x16c>)
 8005664:	4951      	ldr	r1, [pc, #324]	; (80057ac <cmd_resize+0x170>)
 8005666:	6940      	ldr	r0, [r0, #20]
 8005668:	f006 fa4f 	bl	800bb0a <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
 800566c:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
 8005670:	4628      	mov	r0, r5
 8005672:	f7ff fbd1 	bl	8004e18 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
 8005676:	21fa      	movs	r1, #250	; 0xfa
 8005678:	4628      	mov	r0, r5
 800567a:	f7ff fbdd 	bl	8004e38 <z_shell_op_cursor_horiz_move>
__ssp_bos_icheck3(memset, void *, int)
 800567e:	68a8      	ldr	r0, [r5, #8]
	char c = 0;
 8005680:	2400      	movs	r4, #0
 8005682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005686:	4621      	mov	r1, r4
 8005688:	f500 709f 	add.w	r0, r0, #318	; 0x13e
 800568c:	f88d 400b 	strb.w	r4, [sp, #11]
 8005690:	f008 f84a 	bl	800d728 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
 8005694:	4946      	ldr	r1, [pc, #280]	; (80057b0 <cmd_resize+0x174>)
 8005696:	6968      	ldr	r0, [r5, #20]
 8005698:	f006 fa37 	bl	800bb0a <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
 800569c:	6968      	ldr	r0, [r5, #20]
 800569e:	f005 ff1f 	bl	800b4e0 <z_shell_fprintf_buffer_flush>
 80056a2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
 80056a6:	6868      	ldr	r0, [r5, #4]
 80056a8:	6803      	ldr	r3, [r0, #0]
 80056aa:	2201      	movs	r2, #1
 80056ac:	691f      	ldr	r7, [r3, #16]
 80056ae:	f10d 010b 	add.w	r1, sp, #11
 80056b2:	ab03      	add	r3, sp, #12
 80056b4:	47b8      	blx	r7
			if (cnt == 0) {
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	b953      	cbnz	r3, 80056d0 <cmd_resize+0x94>
	for (uint16_t i = 0; i < 1000; i++) {
 80056ba:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
 80056bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056c0:	b2b6      	uxth	r6, r6
 80056c2:	f003 fe95 	bl	80093f0 <z_impl_k_busy_wait>
 80056c6:	2e00      	cmp	r6, #0
 80056c8:	d1ed      	bne.n	80056a6 <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
 80056ca:	f06f 0485 	mvn.w	r4, #133	; 0x85
 80056ce:	e034      	b.n	800573a <cmd_resize+0xfe>
			if ((c != SHELL_VT100_ASCII_ESC) &&
 80056d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
 80056d4:	68a9      	ldr	r1, [r5, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
 80056d6:	2b1b      	cmp	r3, #27
 80056d8:	d056      	beq.n	8005788 <cmd_resize+0x14c>
 80056da:	f891 213e 	ldrb.w	r2, [r1, #318]	; 0x13e
 80056de:	2a1b      	cmp	r2, #27
 80056e0:	d1e1      	bne.n	80056a6 <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
 80056e2:	2b52      	cmp	r3, #82	; 0x52
 80056e4:	d150      	bne.n	8005788 <cmd_resize+0x14c>
				shell->ctx->temp_buff[buff_idx] = '\0';
 80056e6:	440c      	add	r4, r1
 80056e8:	2300      	movs	r3, #0
 80056ea:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
				if (shell->ctx->temp_buff[1] != '[') {
 80056ee:	f891 213f 	ldrb.w	r2, [r1, #319]	; 0x13f
 80056f2:	2a5b      	cmp	r2, #91	; 0x5b
 80056f4:	d150      	bne.n	8005798 <cmd_resize+0x15c>
 80056f6:	f501 74a0 	add.w	r4, r1, #320	; 0x140
	*y = 0U;
 80056fa:	461f      	mov	r7, r3
				buff_idx = 2U;
 80056fc:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
 80056fe:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005702:	4632      	mov	r2, r6
 8005704:	283b      	cmp	r0, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
 8005706:	f106 0601 	add.w	r6, r6, #1
 800570a:	b2b6      	uxth	r6, r6
				while (shell->ctx->temp_buff[buff_idx] != ';') {
 800570c:	d127      	bne.n	800575e <cmd_resize+0x122>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 800570e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005712:	d0da      	beq.n	80056ca <cmd_resize+0x8e>
 8005714:	f202 123f 	addw	r2, r2, #319	; 0x13f
 8005718:	fa11 f282 	uxtah	r2, r1, r2
	*x = 0U;
 800571c:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
 800571e:	f812 4b01 	ldrb.w	r4, [r2], #1
 8005722:	bb34      	cbnz	r4, 8005772 <cmd_resize+0x136>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 8005724:	2bfa      	cmp	r3, #250	; 0xfa
 8005726:	bf28      	it	cs
 8005728:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 800572a:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 800572c:	854b      	strh	r3, [r1, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 800572e:	463b      	mov	r3, r7
 8005730:	bf28      	it	cs
 8005732:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
 8005734:	f881 413e 	strb.w	r4, [r1, #318]	; 0x13e
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 8005738:	850b      	strh	r3, [r1, #40]	; 0x28
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
 800573a:	4a1e      	ldr	r2, [pc, #120]	; (80057b4 <cmd_resize+0x178>)
 800573c:	491b      	ldr	r1, [pc, #108]	; (80057ac <cmd_resize+0x170>)
 800573e:	6968      	ldr	r0, [r5, #20]
 8005740:	f006 f9e3 	bl	800bb0a <z_shell_raw_fprintf>
	if (err != 0) {
 8005744:	2c00      	cmp	r4, #0
 8005746:	d089      	beq.n	800565c <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
 8005748:	68ab      	ldr	r3, [r5, #8]
 800574a:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <cmd_resize+0x17c>)
 800574c:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
 800574e:	2104      	movs	r1, #4
 8005750:	4a1a      	ldr	r2, [pc, #104]	; (80057bc <cmd_resize+0x180>)
 8005752:	4628      	mov	r0, r5
 8005754:	f005 fea1 	bl	800b49a <shell_fprintf>
 8005758:	f06f 0407 	mvn.w	r4, #7
 800575c:	e77e      	b.n	800565c <cmd_resize+0x20>
					*y = *y * 10U +
 800575e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8005762:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005766:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
 8005768:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
 800576c:	b29f      	uxth	r7, r3
					if (buff_idx >=
 800576e:	d1c6      	bne.n	80056fe <cmd_resize+0xc2>
 8005770:	e7ab      	b.n	80056ca <cmd_resize+0x8e>
					*x = *x * 10U +
 8005772:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
 8005776:	3601      	adds	r6, #1
					*x = *x * 10U +
 8005778:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
 800577c:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
 800577e:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
 8005780:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
 8005782:	b2a3      	uxth	r3, r4
					if (buff_idx >=
 8005784:	d9cb      	bls.n	800571e <cmd_resize+0xe2>
 8005786:	e7a0      	b.n	80056ca <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
 8005788:	190a      	adds	r2, r1, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 800578a:	3401      	adds	r4, #1
 800578c:	b2a4      	uxth	r4, r4
 800578e:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
 8005790:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 8005794:	d987      	bls.n	80056a6 <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
				return -ENOMEM;
 800579c:	e795      	b.n	80056ca <cmd_resize+0x8e>
 800579e:	bf00      	nop
 80057a0:	0800feae 	.word	0x0800feae
 80057a4:	0800fea5 	.word	0x0800fea5
 80057a8:	080102d5 	.word	0x080102d5
 80057ac:	0800fa80 	.word	0x0800fa80
 80057b0:	080102e1 	.word	0x080102e1
 80057b4:	080102d2 	.word	0x080102d2
 80057b8:	00500018 	.word	0x00500018
 80057bc:	0800fed4 	.word	0x0800fed4

080057c0 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
 80057c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	4607      	mov	r7, r0
 80057c6:	b089      	sub	sp, #36	; 0x24
 80057c8:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
 80057ca:	4689      	mov	r9, r1
 80057cc:	b921      	cbnz	r1, 80057d8 <z_shell_wildcard_process+0x18>
		return ret_val;
 80057ce:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
 80057d0:	4620      	mov	r0, r4
 80057d2:	b009      	add	sp, #36	; 0x24
 80057d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
 80057d8:	4610      	mov	r0, r2
 80057da:	f006 fbf4 	bl	800bfc6 <z_shell_has_wildcard>
 80057de:	2800      	cmp	r0, #0
 80057e0:	d0f5      	beq.n	80057ce <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
 80057e2:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
 80057e6:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 80057e8:	2402      	movs	r4, #2
 80057ea:	e026      	b.n	800583a <z_shell_wildcard_process+0x7a>
	return str == NULL ? 0U : (uint16_t)strlen(str);
 80057ec:	465c      	mov	r4, fp
 80057ee:	e03e      	b.n	800586e <z_shell_wildcard_process+0xae>
	completion_addr = strstr(buff, pattern);
 80057f0:	4629      	mov	r1, r5
 80057f2:	f50a 709f 	add.w	r0, sl, #318	; 0x13e
 80057f6:	f008 f854 	bl	800d8a2 <strstr>
	if (!completion_addr) {
 80057fa:	4606      	mov	r6, r0
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d050      	beq.n	80058a2 <z_shell_wildcard_process+0xe2>
 8005800:	f7fb fae4 	bl	8000dcc <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
 8005804:	f104 0c01 	add.w	ip, r4, #1
 8005808:	b280      	uxth	r0, r0
__ssp_bos_icheck3(memmove, void *, const void *)
 800580a:	1c42      	adds	r2, r0, #1
 800580c:	4631      	mov	r1, r6
 800580e:	eb06 000c 	add.w	r0, r6, ip
 8005812:	f007 ff6f 	bl	800d6f4 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8005816:	4622      	mov	r2, r4
 8005818:	4659      	mov	r1, fp
 800581a:	4630      	mov	r0, r6
 800581c:	f007 ff5c 	bl	800d6d8 <memcpy>
	completion_addr[cmd_len] = ' ';
 8005820:	f04f 0320 	mov.w	r3, #32
 8005824:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
 8005826:	f8ba 003c 	ldrh.w	r0, [sl, #60]	; 0x3c
 800582a:	4404      	add	r4, r0
 800582c:	3401      	adds	r4, #1
 800582e:	f8aa 403c 	strh.w	r4, [sl, #60]	; 0x3c
			cnt++;
 8005832:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
 8005836:	2400      	movs	r4, #0
 8005838:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
 800583a:	1c4b      	adds	r3, r1, #1
 800583c:	aa03      	add	r2, sp, #12
 800583e:	4648      	mov	r0, r9
 8005840:	9301      	str	r3, [sp, #4]
 8005842:	f7ff fa45 	bl	8004cd0 <z_shell_cmd_get>
 8005846:	4606      	mov	r6, r0
 8005848:	b1f8      	cbz	r0, 800588a <z_shell_wildcard_process+0xca>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
 800584a:	6831      	ldr	r1, [r6, #0]
 800584c:	2200      	movs	r2, #0
 800584e:	4628      	mov	r0, r5
 8005850:	f005 f9a5 	bl	800ab9e <fnmatch>
 8005854:	2800      	cmp	r0, #0
 8005856:	d1ef      	bne.n	8005838 <z_shell_wildcard_process+0x78>
			ret_val = command_add(shell->ctx->temp_buff,
 8005858:	f8d6 b000 	ldr.w	fp, [r6]
 800585c:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8005860:	f1bb 0f00 	cmp.w	fp, #0
 8005864:	d0c2      	beq.n	80057ec <z_shell_wildcard_process+0x2c>
 8005866:	4658      	mov	r0, fp
 8005868:	f7fb fab0 	bl	8000dcc <strlen>
 800586c:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
 800586e:	f8ba 203c 	ldrh.w	r2, [sl, #60]	; 0x3c
 8005872:	3201      	adds	r2, #1
 8005874:	4422      	add	r2, r4
 8005876:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800587a:	ddb9      	ble.n	80057f0 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
 800587c:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <z_shell_wildcard_process+0xe8>)
 800587e:	462b      	mov	r3, r5
 8005880:	2104      	movs	r1, #4
 8005882:	4638      	mov	r0, r7
 8005884:	f006 f862 	bl	800b94c <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
 8005888:	2401      	movs	r4, #1
	if (cnt > 0) {
 800588a:	f1b8 0f00 	cmp.w	r8, #0
 800588e:	d09f      	beq.n	80057d0 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
 8005890:	68b8      	ldr	r0, [r7, #8]
 8005892:	462a      	mov	r2, r5
 8005894:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8005898:	f500 709f 	add.w	r0, r0, #318	; 0x13e
 800589c:	f005 fe7e 	bl	800b59c <z_shell_pattern_remove>
	return ret_val;
 80058a0:	e796      	b.n	80057d0 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 80058a2:	2402      	movs	r4, #2
 80058a4:	e7f1      	b.n	800588a <z_shell_wildcard_process+0xca>
 80058a6:	bf00      	nop
 80058a8:	080102e6 	.word	0x080102e6

080058ac <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 80058ac:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
 80058ae:	4c04      	ldr	r4, [pc, #16]	; (80058c0 <__do_init_array_aux+0x14>)
 80058b0:	4d04      	ldr	r5, [pc, #16]	; (80058c4 <__do_init_array_aux+0x18>)
 80058b2:	42ac      	cmp	r4, r5
 80058b4:	d300      	bcc.n	80058b8 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
 80058b8:	f854 3b04 	ldr.w	r3, [r4], #4
 80058bc:	4798      	blx	r3
		func++) {
 80058be:	e7f8      	b.n	80058b2 <__do_init_array_aux+0x6>
 80058c0:	0800ddb8 	.word	0x0800ddb8
 80058c4:	0800ddb8 	.word	0x0800ddb8

080058c8 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
 80058c8:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 80058ca:	4c05      	ldr	r4, [pc, #20]	; (80058e0 <__do_global_ctors_aux+0x18>)
 80058cc:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
 80058ce:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80058d2:	b905      	cbnz	r5, 80058d6 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
 80058d4:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
 80058d6:	f854 3904 	ldr.w	r3, [r4], #-4
 80058da:	3d01      	subs	r5, #1
 80058dc:	4798      	blx	r3
 80058de:	e7f8      	b.n	80058d2 <__do_global_ctors_aux+0xa>
 80058e0:	0800ddb0 	.word	0x0800ddb0

080058e4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 80058e4:	b508      	push	{r3, lr}
 80058e6:	4806      	ldr	r0, [pc, #24]	; (8005900 <uart_console_init+0x1c>)
 80058e8:	f002 fb52 	bl	8007f90 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <uart_console_init+0x20>)
 80058ee:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 80058f0:	4805      	ldr	r0, [pc, #20]	; (8005908 <uart_console_init+0x24>)
 80058f2:	f001 f913 	bl	8006b1c <__stdout_hook_install>
	__printk_hook_install(console_out);
 80058f6:	4804      	ldr	r0, [pc, #16]	; (8005908 <uart_console_init+0x24>)
 80058f8:	f7fc ffea 	bl	80028d0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
 80058fc:	2000      	movs	r0, #0
 80058fe:	bd08      	pop	{r3, pc}
 8005900:	0800fe2a 	.word	0x0800fe2a
 8005904:	20001e58 	.word	0x20001e58
 8005908:	0800590d 	.word	0x0800590d

0800590c <console_out>:
	if ('\n' == c) {
 800590c:	280a      	cmp	r0, #10
{
 800590e:	b538      	push	{r3, r4, r5, lr}
 8005910:	4d07      	ldr	r5, [pc, #28]	; (8005930 <console_out+0x24>)
 8005912:	4604      	mov	r4, r0
	if ('\n' == c) {
 8005914:	d104      	bne.n	8005920 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 8005916:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
 8005918:	6883      	ldr	r3, [r0, #8]
 800591a:	210d      	movs	r1, #13
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 8005920:	6828      	ldr	r0, [r5, #0]
 8005922:	6883      	ldr	r3, [r0, #8]
 8005924:	b2e1      	uxtb	r1, r4
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4798      	blx	r3
}
 800592a:	4620      	mov	r0, r4
 800592c:	bd38      	pop	{r3, r4, r5, pc}
 800592e:	bf00      	nop
 8005930:	20001e58 	.word	0x20001e58

08005934 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8005934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8005938:	4f0d      	ldr	r7, [pc, #52]	; (8005970 <__stm32_exti_isr.isra.0+0x3c>)
 800593a:	4604      	mov	r4, r0
 800593c:	460e      	mov	r6, r1
 800593e:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8005940:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8005944:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8005948:	42b4      	cmp	r4, r6
 800594a:	db01      	blt.n	8005950 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 800594c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005950:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8005952:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8005956:	ea33 0202 	bics.w	r2, r3, r2
 800595a:	d107      	bne.n	800596c <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800595c:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 800595e:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8005962:	b11b      	cbz	r3, 800596c <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8005964:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8005968:	4620      	mov	r0, r4
 800596a:	4798      	blx	r3
	for (line = min; line < max; line++) {
 800596c:	3401      	adds	r4, #1
 800596e:	e7eb      	b.n	8005948 <__stm32_exti_isr.isra.0+0x14>
 8005970:	40013c00 	.word	0x40013c00

08005974 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8005974:	4a04      	ldr	r2, [pc, #16]	; (8005988 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8005976:	2301      	movs	r3, #1
 8005978:	6811      	ldr	r1, [r2, #0]
 800597a:	4083      	lsls	r3, r0
 800597c:	430b      	orrs	r3, r1
 800597e:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8005980:	4b02      	ldr	r3, [pc, #8]	; (800598c <stm32_exti_enable+0x18>)
 8005982:	5618      	ldrsb	r0, [r3, r0]
 8005984:	f000 baf0 	b.w	8005f68 <arch_irq_enable>
 8005988:	40013c00 	.word	0x40013c00
 800598c:	08010356 	.word	0x08010356

08005990 <stm32_exti_disable>:
	if (line < 32) {
 8005990:	281f      	cmp	r0, #31
 8005992:	dc07      	bgt.n	80059a4 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8005994:	4904      	ldr	r1, [pc, #16]	; (80059a8 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8005996:	2201      	movs	r2, #1
 8005998:	680b      	ldr	r3, [r1, #0]
 800599a:	fa02 f000 	lsl.w	r0, r2, r0
 800599e:	ea23 0000 	bic.w	r0, r3, r0
 80059a2:	6008      	str	r0, [r1, #0]
}
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40013c00 	.word	0x40013c00

080059ac <stm32_exti_trigger>:
	switch (trigger) {
 80059ac:	2903      	cmp	r1, #3
 80059ae:	d80f      	bhi.n	80059d0 <stm32_exti_trigger+0x24>
 80059b0:	e8df f001 	tbb	[pc, r1]
 80059b4:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80059b8:	4b15      	ldr	r3, [pc, #84]	; (8005a10 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 80059ba:	2201      	movs	r2, #1
 80059bc:	6899      	ldr	r1, [r3, #8]
 80059be:	fa02 f000 	lsl.w	r0, r2, r0
 80059c2:	ea21 0100 	bic.w	r1, r1, r0
 80059c6:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 80059ce:	60d8      	str	r0, [r3, #12]
}
 80059d0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80059d2:	2301      	movs	r3, #1
 80059d4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80059d8:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <stm32_exti_trigger+0x64>)
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	4302      	orrs	r2, r0
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	e7f2      	b.n	80059c8 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80059e2:	2301      	movs	r3, #1
 80059e4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 80059e8:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <stm32_exti_trigger+0x64>)
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	4302      	orrs	r2, r0
 80059ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	ea22 0000 	bic.w	r0, r2, r0
 80059f6:	6098      	str	r0, [r3, #8]
}
 80059f8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80059fa:	2301      	movs	r3, #1
 80059fc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005a00:	4b03      	ldr	r3, [pc, #12]	; (8005a10 <stm32_exti_trigger+0x64>)
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	4302      	orrs	r2, r0
 8005a06:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	4310      	orrs	r0, r2
 8005a0c:	e7df      	b.n	80059ce <stm32_exti_trigger+0x22>
 8005a0e:	bf00      	nop
 8005a10:	40013c00 	.word	0x40013c00

08005a14 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 8005a14:	b510      	push	{r4, lr}
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8005a16:	4c07      	ldr	r4, [pc, #28]	; (8005a34 <stm32_exti_set_callback+0x20>)
 8005a18:	f854 3030 	ldr.w	r3, [r4, r0, lsl #3]
 8005a1c:	b933      	cbnz	r3, 8005a2c <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8005a1e:	f844 1030 	str.w	r1, [r4, r0, lsl #3]
	data->cb[line].data = arg;
 8005a22:	eb04 04c0 	add.w	r4, r4, r0, lsl #3

	return 0;
 8005a26:	4618      	mov	r0, r3
	data->cb[line].data = arg;
 8005a28:	6062      	str	r2, [r4, #4]
}
 8005a2a:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8005a2c:	f06f 000f 	mvn.w	r0, #15
 8005a30:	e7fb      	b.n	8005a2a <stm32_exti_set_callback+0x16>
 8005a32:	bf00      	nop
 8005a34:	20001e60 	.word	0x20001e60

08005a38 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8005a38:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <stm32_exti_unset_callback+0x10>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8005a40:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8005a44:	605a      	str	r2, [r3, #4]
}
 8005a46:	4770      	bx	lr
 8005a48:	20001e60 	.word	0x20001e60

08005a4c <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8005a4c:	680b      	ldr	r3, [r1, #0]
{
 8005a4e:	b086      	sub	sp, #24
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	d839      	bhi.n	8005ac8 <stm32_clock_control_on+0x7c>
 8005a54:	e8df f003 	tbb	[pc, r3]
 8005a58:	2e241004 	.word	0x2e241004
 8005a5c:	3838      	.short	0x3838
 8005a5e:	1a          	.byte	0x1a
 8005a5f:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005a60:	4a1b      	ldr	r2, [pc, #108]	; (8005ad0 <stm32_clock_control_on+0x84>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8005a62:	684b      	ldr	r3, [r1, #4]
 8005a64:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005a66:	4319      	orrs	r1, r3
 8005a68:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005a6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005a70:	9b01      	ldr	r3, [sp, #4]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8005a72:	2000      	movs	r0, #0
}
 8005a74:	b006      	add	sp, #24
 8005a76:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005a78:	4a15      	ldr	r2, [pc, #84]	; (8005ad0 <stm32_clock_control_on+0x84>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8005a7a:	684b      	ldr	r3, [r1, #4]
 8005a7c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005a7e:	4319      	orrs	r1, r3
 8005a80:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005a82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a84:	4013      	ands	r3, r2
 8005a86:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8005a88:	9b02      	ldr	r3, [sp, #8]
 8005a8a:	e7f2      	b.n	8005a72 <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005a8c:	4a10      	ldr	r2, [pc, #64]	; (8005ad0 <stm32_clock_control_on+0x84>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8005a8e:	684b      	ldr	r3, [r1, #4]
 8005a90:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8005a92:	4319      	orrs	r1, r3
 8005a94:	6391      	str	r1, [r2, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a98:	4013      	ands	r3, r2
 8005a9a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8005a9c:	9b03      	ldr	r3, [sp, #12]
 8005a9e:	e7e8      	b.n	8005a72 <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8005aa0:	4a0b      	ldr	r2, [pc, #44]	; (8005ad0 <stm32_clock_control_on+0x84>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8005aa2:	684b      	ldr	r3, [r1, #4]
 8005aa4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005aa6:	4319      	orrs	r1, r3
 8005aa8:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005aaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005aac:	4013      	ands	r3, r2
 8005aae:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8005ab0:	9b04      	ldr	r3, [sp, #16]
 8005ab2:	e7de      	b.n	8005a72 <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005ab4:	4a06      	ldr	r2, [pc, #24]	; (8005ad0 <stm32_clock_control_on+0x84>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8005ab6:	684b      	ldr	r3, [r1, #4]
 8005ab8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005aba:	4319      	orrs	r1, r3
 8005abc:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005abe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8005ac4:	9b05      	ldr	r3, [sp, #20]
 8005ac6:	e7d4      	b.n	8005a72 <stm32_clock_control_on+0x26>
	switch (pclken->bus) {
 8005ac8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005acc:	e7d2      	b.n	8005a74 <stm32_clock_control_on+0x28>
 8005ace:	bf00      	nop
 8005ad0:	40023800 	.word	0x40023800

08005ad4 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8005ad4:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <stm32_clock_control_get_subsys_rate+0x24>)
 8005ad6:	6809      	ldr	r1, [r1, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
	uint32_t apb2_clock = get_bus_clock(ahb_clock, STM32_APB2_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8005ada:	2906      	cmp	r1, #6
 8005adc:	d809      	bhi.n	8005af2 <stm32_clock_control_get_subsys_rate+0x1e>
 8005ade:	e8df f001 	tbb	[pc, r1]
 8005ae2:	0505      	.short	0x0505
 8005ae4:	08080504 	.word	0x08080504
 8005ae8:	05          	.byte	0x05
 8005ae9:	00          	.byte	0x00
	return clock / prescaler;
 8005aea:	085b      	lsrs	r3, r3, #1
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8005aec:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8005aee:	2000      	movs	r0, #0
		break;
 8005af0:	4770      	bx	lr
	switch (pclken->bus) {
 8005af2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8005af6:	4770      	bx	lr
 8005af8:	20000144 	.word	0x20000144

08005afc <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8005afc:	b530      	push	{r4, r5, lr}
 8005afe:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8005b00:	2300      	movs	r3, #0
 8005b02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b06:	e9cd 3200 	strd	r3, r2, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8005b0a:	9302      	str	r3, [sp, #8]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8005b0c:	f000 f870 	bl	8005bf0 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8005b10:	a803      	add	r0, sp, #12
 8005b12:	f006 fb0e 	bl	800c132 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8005b16:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <stm32_clock_control_init+0x7c>)
 8005b18:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8005b1a:	0791      	lsls	r1, r2, #30
 8005b1c:	d406      	bmi.n	8005b2c <stm32_clock_control_init+0x30>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	f042 0201 	orr.w	r2, r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8005b26:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8005b28:	0792      	lsls	r2, r2, #30
 8005b2a:	d5fc      	bpl.n	8005b26 <stm32_clock_control_init+0x2a>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005b2c:	4c12      	ldr	r4, [pc, #72]	; (8005b78 <stm32_clock_control_init+0x7c>)
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	f023 0303 	bic.w	r3, r3, #3
 8005b34:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005b36:	68a3      	ldr	r3, [r4, #8]
 8005b38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3c:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b3e:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8005b40:	f015 050c 	ands.w	r5, r5, #12
 8005b44:	d1fb      	bne.n	8005b3e <stm32_clock_control_init+0x42>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005b46:	6823      	ldr	r3, [r4, #0]

	/* Switch to PLL with HSE as clock source */
#ifdef CONFIG_SOC_SERIES_STM32WLX
	LL_RCC_HSE_EnableTcxo();
#endif
	LL_PLL_ConfigSystemClock_HSE(
 8005b48:	480c      	ldr	r0, [pc, #48]	; (8005b7c <stm32_clock_control_init+0x80>)
 8005b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b4e:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8005b50:	6863      	ldr	r3, [r4, #4]
 8005b52:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005b56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b5a:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 8005b5c:	aa03      	add	r2, sp, #12
 8005b5e:	466b      	mov	r3, sp
 8005b60:	2101      	movs	r1, #1
 8005b62:	f002 f9ad 	bl	8007ec0 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8005b6e:	f006 fae9 	bl	800c144 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8005b72:	4628      	mov	r0, r5
 8005b74:	b007      	add	sp, #28
 8005b76:	bd30      	pop	{r4, r5, pc}
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	007a1200 	.word	0x007a1200

08005b80 <stm32_clock_control_off>:
	switch (pclken->bus) {
 8005b80:	680b      	ldr	r3, [r1, #0]
{
 8005b82:	b082      	sub	sp, #8
 8005b84:	2b06      	cmp	r3, #6
 8005b86:	d82d      	bhi.n	8005be4 <stm32_clock_control_off+0x64>
 8005b88:	e8df f003 	tbb	[pc, r3]
 8005b8c:	251e0d04 	.word	0x251e0d04
 8005b90:	2c2c      	.short	0x2c2c
 8005b92:	14          	.byte	0x14
 8005b93:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8005b94:	4a15      	ldr	r2, [pc, #84]	; (8005bec <stm32_clock_control_off+0x6c>)
 8005b96:	6849      	ldr	r1, [r1, #4]
 8005b98:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005b9a:	ea23 0301 	bic.w	r3, r3, r1
 8005b9e:	6313      	str	r3, [r2, #48]	; 0x30
	return 0;
 8005ba0:	2000      	movs	r0, #0
}
 8005ba2:	b002      	add	sp, #8
 8005ba4:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8005ba6:	4a11      	ldr	r2, [pc, #68]	; (8005bec <stm32_clock_control_off+0x6c>)
 8005ba8:	6849      	ldr	r1, [r1, #4]
 8005baa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005bac:	ea23 0301 	bic.w	r3, r3, r1
 8005bb0:	6353      	str	r3, [r2, #52]	; 0x34
 8005bb2:	e7f5      	b.n	8005ba0 <stm32_clock_control_off+0x20>
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005bb4:	4a0d      	ldr	r2, [pc, #52]	; (8005bec <stm32_clock_control_off+0x6c>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8005bb6:	684b      	ldr	r3, [r1, #4]
 8005bb8:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8005bba:	4319      	orrs	r1, r3
 8005bbc:	6391      	str	r1, [r2, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005bbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005bc4:	9b01      	ldr	r3, [sp, #4]
 8005bc6:	e7eb      	b.n	8005ba0 <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8005bc8:	4a08      	ldr	r2, [pc, #32]	; (8005bec <stm32_clock_control_off+0x6c>)
 8005bca:	6849      	ldr	r1, [r1, #4]
 8005bcc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005bce:	ea23 0301 	bic.w	r3, r3, r1
 8005bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8005bd4:	e7e4      	b.n	8005ba0 <stm32_clock_control_off+0x20>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8005bd6:	4a05      	ldr	r2, [pc, #20]	; (8005bec <stm32_clock_control_off+0x6c>)
 8005bd8:	6849      	ldr	r1, [r1, #4]
 8005bda:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005bdc:	ea23 0301 	bic.w	r3, r3, r1
 8005be0:	6453      	str	r3, [r2, #68]	; 0x44
 8005be2:	e7dd      	b.n	8005ba0 <stm32_clock_control_off+0x20>
	switch (pclken->bus) {
 8005be4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005be8:	e7db      	b.n	8005ba2 <stm32_clock_control_off+0x22>
 8005bea:	bf00      	nop
 8005bec:	40023800 	.word	0x40023800

08005bf0 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <config_enable_default_clocks+0x1c>)
 8005bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005bf8:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c02:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005c04:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8005c06:	b002      	add	sp, #8
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40023800 	.word	0x40023800

08005c10 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8005c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct device *port_device;
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 8005c14:	460f      	mov	r7, r1
 8005c16:	b911      	cbnz	r1, 8005c1e <stm32_dt_pinctrl_configure+0xe>
		/* Empty pinctrl. Exit */
		return 0;
 8005c18:	2000      	movs	r0, #0
		ret = pm_device_put(port_device);
#endif
	}

	return ret;
}
 8005c1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < list_size; i++) {
 8005c1e:	2600      	movs	r6, #0
		port_device = gpio_ports[STM32_PORT(pin)];
 8005c20:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8005c7c <stm32_dt_pinctrl_configure+0x6c>
 8005c24:	1d04      	adds	r4, r0, #4
	uint32_t func = 0;
 8005c26:	46b3      	mov	fp, r6
		mux = pinctrl[i].pinmux;
 8005c28:	f854 5c04 	ldr.w	r5, [r4, #-4]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 8005c2c:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8005c30:	d11e      	bne.n	8005c70 <stm32_dt_pinctrl_configure+0x60>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	f042 0b20 	orr.w	fp, r2, #32
		port_device = gpio_ports[STM32_PORT(pin)];
 8005c38:	f3c5 3303 	ubfx	r3, r5, #12, #4
		ret = gpio_stm32_clock_request(port_device, true);
 8005c3c:	2101      	movs	r1, #1
		port_device = gpio_ports[STM32_PORT(pin)];
 8005c3e:	f859 8023 	ldr.w	r8, [r9, r3, lsl #2]
		ret = gpio_stm32_clock_request(port_device, true);
 8005c42:	4640      	mov	r0, r8
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8005c44:	f3c5 2a07 	ubfx	sl, r5, #8, #8
		ret = gpio_stm32_clock_request(port_device, true);
 8005c48:	f001 f828 	bl	8006c9c <gpio_stm32_clock_request>
		if (ret != 0) {
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	d1e4      	bne.n	8005c1a <stm32_dt_pinctrl_configure+0xa>
		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 8005c50:	b2eb      	uxtb	r3, r5
	if (port_device == NULL) {
 8005c52:	f1b8 0f00 	cmp.w	r8, #0
 8005c56:	d005      	beq.n	8005c64 <stm32_dt_pinctrl_configure+0x54>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8005c58:	465a      	mov	r2, fp
 8005c5a:	f00a 010f 	and.w	r1, sl, #15
 8005c5e:	4640      	mov	r0, r8
 8005c60:	f006 fae4 	bl	800c22c <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 8005c64:	3601      	adds	r6, #1
 8005c66:	42b7      	cmp	r7, r6
 8005c68:	f104 0408 	add.w	r4, r4, #8
 8005c6c:	d1dc      	bne.n	8005c28 <stm32_dt_pinctrl_configure+0x18>
 8005c6e:	e7d3      	b.n	8005c18 <stm32_dt_pinctrl_configure+0x8>
		} else if (STM32_DT_PINMUX_FUNC(mux) == ANALOG) {
 8005c70:	b2eb      	uxtb	r3, r5
			func = STM32_MODER_ANALOG_MODE;
 8005c72:	2b10      	cmp	r3, #16
 8005c74:	bf08      	it	eq
 8005c76:	f04f 0b30 	moveq.w	fp, #48	; 0x30
 8005c7a:	e7dd      	b.n	8005c38 <stm32_dt_pinctrl_configure+0x28>
 8005c7c:	0800efec 	.word	0x0800efec

08005c80 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8005c80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8005c84:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8005c86:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8005c88:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8005c8a:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8005c8c:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <elapsed+0x34>)
 8005c8e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8005c92:	4909      	ldr	r1, [pc, #36]	; (8005cb8 <elapsed+0x38>)
 8005c94:	d101      	bne.n	8005c9a <elapsed+0x1a>
	    || (val1 < val2)) {
 8005c96:	4282      	cmp	r2, r0
 8005c98:	d206      	bcs.n	8005ca8 <elapsed+0x28>
		overflow_cyc += last_load;
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	680c      	ldr	r4, [r1, #0]
 8005c9e:	4422      	add	r2, r4
 8005ca0:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8005ca2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005ca6:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	680a      	ldr	r2, [r1, #0]
 8005cac:	4413      	add	r3, r2
}
 8005cae:	1a18      	subs	r0, r3, r0
 8005cb0:	bd10      	pop	{r4, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20001f2c 	.word	0x20001f2c
 8005cb8:	20001f28 	.word	0x20001f28

08005cbc <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 8005cbc:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8005cbe:	f7ff ffdf 	bl	8005c80 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8005cc2:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <sys_clock_isr+0x38>)
 8005cc4:	4a0c      	ldr	r2, [pc, #48]	; (8005cf8 <sys_clock_isr+0x3c>)
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	6811      	ldr	r1, [r2, #0]
 8005cca:	4408      	add	r0, r1
 8005ccc:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8005cd2:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <sys_clock_isr+0x40>)
 8005cd4:	6813      	ldr	r3, [r2, #0]
 8005cd6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8005cda:	1ac0      	subs	r0, r0, r3
 8005cdc:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8005ce0:	fb01 3300 	mla	r3, r1, r0, r3
 8005ce4:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8005ce6:	f003 fb0f 	bl	8009308 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
}
 8005cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8005cee:	f000 bdf7 	b.w	80068e0 <z_arm_exc_exit>
 8005cf2:	bf00      	nop
 8005cf4:	20001f2c 	.word	0x20001f2c
 8005cf8:	20001f24 	.word	0x20001f24
 8005cfc:	20001f20 	.word	0x20001f20

08005d00 <sys_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d00:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <sys_clock_driver_init+0x28>)
 8005d02:	2210      	movs	r2, #16
 8005d04:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8005d08:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <sys_clock_driver_init+0x2c>)
 8005d0a:	f242 527f 	movw	r2, #9599	; 0x257f
 8005d0e:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8005d10:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <sys_clock_driver_init+0x30>)
 8005d12:	2000      	movs	r0, #0
 8005d14:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8005d16:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d1a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8005d1c:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	f042 0207 	orr.w	r2, r2, #7
 8005d24:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8005d26:	4770      	bx	lr
 8005d28:	e000ed00 	.word	0xe000ed00
 8005d2c:	20001f28 	.word	0x20001f28
 8005d30:	20001f2c 	.word	0x20001f2c

08005d34 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	4d32      	ldr	r5, [pc, #200]	; (8005e00 <sys_clock_set_timeout+0xcc>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8005d38:	b159      	cbz	r1, 8005d52 <sys_clock_set_timeout+0x1e>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	d109      	bne.n	8005d52 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8005d3e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005d42:	6913      	ldr	r3, [r2, #16]
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8005d4a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8005d4e:	602b      	str	r3, [r5, #0]
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 8005d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8005d52:	f240 63d2 	movw	r3, #1746	; 0x6d2
 8005d56:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005d5a:	bf08      	it	eq
 8005d5c:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005d5e:	1e44      	subs	r4, r0, #1
 8005d60:	2c00      	cmp	r4, #0
	uint32_t last_load_ = last_load;
 8005d62:	682f      	ldr	r7, [r5, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005d64:	dd32      	ble.n	8005dcc <sys_clock_set_timeout+0x98>
 8005d66:	429c      	cmp	r4, r3
 8005d68:	bfa8      	it	ge
 8005d6a:	461c      	movge	r4, r3
	__asm__ volatile(
 8005d6c:	f04f 0310 	mov.w	r3, #16
 8005d70:	f3ef 8611 	mrs	r6, BASEPRI
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8005d7c:	f7ff ff80 	bl	8005c80 <elapsed>
	cycle_count += pending;
 8005d80:	4920      	ldr	r1, [pc, #128]	; (8005e04 <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8005d82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8005d86:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8005d88:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8005d8c:	680b      	ldr	r3, [r1, #0]
 8005d8e:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8005d90:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <sys_clock_set_timeout+0xd4>)
	cycle_count += pending;
 8005d92:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 8005d94:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8005d96:	4b1d      	ldr	r3, [pc, #116]	; (8005e0c <sys_clock_set_timeout+0xd8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8005d9a:	1ac2      	subs	r2, r0, r3
 8005d9c:	d518      	bpl.n	8005dd0 <sys_clock_set_timeout+0x9c>
		last_load = MIN_DELAY;
 8005d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 8005da2:	602b      	str	r3, [r5, #0]
	val2 = SysTick->VAL;
 8005da4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8005da8:	682c      	ldr	r4, [r5, #0]
	val2 = SysTick->VAL;
 8005daa:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 8005dac:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8005dae:	bf38      	it	cc
 8005db0:	44bc      	addcc	ip, r7
	SysTick->LOAD = last_load - 1;
 8005db2:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 8005db4:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 8005db8:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 8005dba:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 8005dbc:	2400      	movs	r4, #0
 8005dbe:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 8005dc0:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8005dc2:	f386 8811 	msr	BASEPRI, r6
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	e7c1      	b.n	8005d50 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005dcc:	2400      	movs	r4, #0
 8005dce:	e7cd      	b.n	8005d6c <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
 8005dd0:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
		delay += unannounced;
 8005dd4:	fb0e 2404 	mla	r4, lr, r4, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8005dd8:	f504 5415 	add.w	r4, r4, #9536	; 0x2540
		delay -= unannounced;
 8005ddc:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8005dde:	343f      	adds	r4, #63	; 0x3f
 8005de0:	fbb4 f4fe 	udiv	r4, r4, lr
		delay -= unannounced;
 8005de4:	fb0e 3404 	mla	r4, lr, r4, r3
		delay = MAX(delay, MIN_DELAY);
 8005de8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005dec:	d904      	bls.n	8005df8 <sys_clock_set_timeout+0xc4>
		if (delay > MAX_CYCLES) {
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <sys_clock_set_timeout+0xdc>)
 8005df0:	429c      	cmp	r4, r3
 8005df2:	d8d6      	bhi.n	8005da2 <sys_clock_set_timeout+0x6e>
			last_load = delay;
 8005df4:	602c      	str	r4, [r5, #0]
 8005df6:	e7d5      	b.n	8005da4 <sys_clock_set_timeout+0x70>
		delay = MAX(delay, MIN_DELAY);
 8005df8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005dfc:	e7fa      	b.n	8005df4 <sys_clock_set_timeout+0xc0>
 8005dfe:	bf00      	nop
 8005e00:	20001f28 	.word	0x20001f28
 8005e04:	20001f24 	.word	0x20001f24
 8005e08:	20001f2c 	.word	0x20001f2c
 8005e0c:	20001f20 	.word	0x20001f20
 8005e10:	00ffc300 	.word	0x00ffc300

08005e14 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 8005e14:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005e16:	f04f 0310 	mov.w	r3, #16
 8005e1a:	f3ef 8411 	mrs	r4, BASEPRI
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8005e26:	f7ff ff2b 	bl	8005c80 <elapsed>
 8005e2a:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <sys_clock_elapsed+0x34>)
 8005e2c:	4a07      	ldr	r2, [pc, #28]	; (8005e4c <sys_clock_elapsed+0x38>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6812      	ldr	r2, [r2, #0]
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	4418      	add	r0, r3
	__asm__ volatile(
 8005e36:	f384 8811 	msr	BASEPRI, r4
 8005e3a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8005e3e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005e42:	fbb0 f0f3 	udiv	r0, r0, r3
 8005e46:	bd10      	pop	{r4, pc}
 8005e48:	20001f24 	.word	0x20001f24
 8005e4c:	20001f20 	.word	0x20001f20

08005e50 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
 8005e50:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005e52:	f04f 0310 	mov.w	r3, #16
 8005e56:	f3ef 8411 	mrs	r4, BASEPRI
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 8005e62:	f7ff ff0d 	bl	8005c80 <elapsed>
 8005e66:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <sys_clock_cycle_get_32+0x28>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4418      	add	r0, r3
	__asm__ volatile(
 8005e6c:	f384 8811 	msr	BASEPRI, r4
 8005e70:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	bf00      	nop
 8005e78:	20001f24 	.word	0x20001f24

08005e7c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8005e7c:	4a0a      	ldr	r2, [pc, #40]	; (8005ea8 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8005e7e:	490b      	ldr	r1, [pc, #44]	; (8005eac <arch_swap+0x30>)
	_current->arch.basepri = key;
 8005e80:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8005e82:	6809      	ldr	r1, [r1, #0]
 8005e84:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005e88:	4909      	ldr	r1, [pc, #36]	; (8005eb0 <arch_swap+0x34>)
	_current->arch.basepri = key;
 8005e8a:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005e8e:	684b      	ldr	r3, [r1, #4]
 8005e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e94:	604b      	str	r3, [r1, #4]
 8005e96:	2300      	movs	r3, #0
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8005ea0:	6893      	ldr	r3, [r2, #8]
}
 8005ea2:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8005ea6:	4770      	bx	lr
 8005ea8:	200020e8 	.word	0x200020e8
 8005eac:	0800f360 	.word	0x0800f360
 8005eb0:	e000ed00 	.word	0xe000ed00

08005eb4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8005eb4:	4922      	ldr	r1, [pc, #136]	; (8005f40 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8005eb6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 8005eb8:	f882 e0f5 	strb.w	lr, [r2, #245]	; 0xf5
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8005ebc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8005ec0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8005ec2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8005ec6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #0x10    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
 8005eca:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
 8005ece:	d103      	bne.n	8005ed8 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8005ed0:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vstmia r0, {s16-s31}
 8005ed4:	ec80 8a10 	vstmia	r0, {s16-s31}

08005ed8 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8005ed8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8005eda:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8005ede:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8005ee2:	4f18      	ldr	r7, [pc, #96]	; (8005f44 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8005ee4:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8005ee8:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8005eea:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8005eec:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 8005eee:	f992 e0f5 	ldrsb.w	lr, [r2, #245]	; 0xf5

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8005ef2:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
 8005ef6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8005ef8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8005efc:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
 8005f00:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
 8005f04:	d003      	beq.n	8005f0e <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 8005f06:	2300      	movs	r3, #0
    vmsr fpscr, r3
 8005f08:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
 8005f0c:	e003      	b.n	8005f16 <in_fp_endif>

08005f0e <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8005f0e:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vldmia r0, {s16-s31}
 8005f12:	ec90 8a10 	vldmia	r0, {s16-s31}

08005f16 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 8005f16:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
 8005f1a:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 8005f1e:	f383 8814 	msr	CONTROL, r3
    isb
 8005f22:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8005f26:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8005f28:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8005f2a:	f000 fd11 	bl	8006950 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8005f2e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8005f32:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8005f36:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8005f3a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8005f3e:	4770      	bx	lr
    ldr r1, =_kernel
 8005f40:	200020e8 	.word	0x200020e8
    ldr v4, =_SCS_ICSR
 8005f44:	e000ed04 	.word	0xe000ed04

08005f48 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 8005f48:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8005f4c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8005f4e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8005f52:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8005f56:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8005f58:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8005f5c:	2902      	cmp	r1, #2
    beq _oops
 8005f5e:	d0ff      	beq.n	8005f60 <_oops>

08005f60 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8005f60:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8005f62:	f006 f8f4 	bl	800c14e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8005f66:	bd01      	pop	{r0, pc}

08005f68 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8005f68:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	db08      	blt.n	8005f80 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f000 001f 	and.w	r0, r0, #31
 8005f74:	fa02 f000 	lsl.w	r0, r2, r0
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	4a02      	ldr	r2, [pc, #8]	; (8005f84 <arch_irq_enable+0x1c>)
 8005f7c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	e000e100 	.word	0xe000e100

08005f88 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8005f88:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8005f8a:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f8c:	bfa8      	it	ge
 8005f8e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8005f92:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f96:	bfb8      	it	lt
 8005f98:	4b06      	ldrlt	r3, [pc, #24]	; (8005fb4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f9a:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8005f9e:	bfac      	ite	ge
 8005fa0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fa4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fa8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005faa:	bfb4      	ite	lt
 8005fac:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fae:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8005fb2:	4770      	bx	lr
 8005fb4:	e000ed14 	.word	0xe000ed14

08005fb8 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8005fb8:	7b01      	ldrb	r1, [r0, #12]
{
 8005fba:	b510      	push	{r4, lr}
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8005fbc:	f011 0402 	ands.w	r4, r1, #2
 8005fc0:	d009      	beq.n	8005fd6 <arch_new_thread+0x1e>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
 8005fc2:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
 8005fc6:	3160      	adds	r1, #96	; 0x60
 8005fc8:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
 8005fcc:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
 8005fd0:	3960      	subs	r1, #96	; 0x60
 8005fd2:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8005fd6:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8005fda:	9b02      	ldr	r3, [sp, #8]
 8005fdc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8005fe0:	490f      	ldr	r1, [pc, #60]	; (8006020 <arch_new_thread+0x68>)
	iframe->a3 = (uint32_t)p2;
 8005fe2:	9b03      	ldr	r3, [sp, #12]
 8005fe4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8005fe8:	9b04      	ldr	r3, [sp, #16]
 8005fea:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8005fee:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8005ff2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ff6:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8005ffa:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8005ffe:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8006000:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8006002:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8006004:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
 8006008:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 800600c:	b91c      	cbnz	r4, 8006016 <arch_new_thread+0x5e>
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
 800600e:	23fd      	movs	r3, #253	; 0xfd
 8006010:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8006014:	bd10      	pop	{r4, pc}
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8006016:	f64f 5308 	movw	r3, #64776	; 0xfd08
 800601a:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
}
 800601e:	e7f9      	b.n	8006014 <arch_new_thread+0x5c>
 8006020:	0800a1cd 	.word	0x0800a1cd

08006024 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * Adjust the MPU stack guard size together with the FPU
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
 8006024:	b530      	push	{r4, r5, lr}
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8006026:	7b01      	ldrb	r1, [r0, #12]
		if ((thread->arch.mode &
 8006028:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
 800602c:	4a1b      	ldr	r2, [pc, #108]	; (800609c <z_arm_mpu_stack_guard_and_fpu_adjust+0x78>)
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 800602e:	f011 0f02 	tst.w	r1, #2
		if ((thread->arch.mode &
 8006032:	f003 0508 	and.w	r5, r3, #8
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8006036:	d103      	bne.n	8006040 <z_arm_mpu_stack_guard_and_fpu_adjust+0x1c>
 8006038:	f890 40f5 	ldrb.w	r4, [r0, #245]	; 0xf5
 800603c:	06e4      	lsls	r4, r4, #27
 800603e:	d417      	bmi.n	8006070 <z_arm_mpu_stack_guard_and_fpu_adjust+0x4c>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
 8006040:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006042:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8006046:	6354      	str	r4, [r2, #52]	; 0x34
		if ((thread->arch.mode &
 8006048:	b96d      	cbnz	r5, 8006066 <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 800604a:	f043 0308 	orr.w	r3, r3, #8
 800604e:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
				thread->stack_info.start +=
 8006052:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8006056:	3360      	adds	r3, #96	; 0x60
 8006058:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
				thread->stack_info.size -=
 800605c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8006060:	3b60      	subs	r3, #96	; 0x60
 8006062:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
 8006066:	f041 0102 	orr.w	r1, r1, #2
 800606a:	7301      	strb	r1, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
 800606c:	2080      	movs	r0, #128	; 0x80
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
 800606e:	bd30      	pop	{r4, r5, pc}
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
 8006070:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006072:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 8006076:	6351      	str	r1, [r2, #52]	; 0x34
		if ((thread->arch.mode &
 8006078:	b16d      	cbz	r5, 8006096 <z_arm_mpu_stack_guard_and_fpu_adjust+0x72>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 800607a:	f023 0308 	bic.w	r3, r3, #8
 800607e:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
				thread->stack_info.start -=
 8006082:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8006086:	3b60      	subs	r3, #96	; 0x60
 8006088:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
				thread->stack_info.size +=
 800608c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8006090:	3360      	adds	r3, #96	; 0x60
 8006092:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	return MPU_GUARD_ALIGN_AND_SIZE;
 8006096:	2020      	movs	r0, #32
 8006098:	e7e9      	b.n	800606e <z_arm_mpu_stack_guard_and_fpu_adjust+0x4a>
 800609a:	bf00      	nop
 800609c:	e000ef00 	.word	0xe000ef00

080060a0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 80060a0:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <z_check_thread_stack_fail+0x38>)
{
 80060a2:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
 80060a4:	6898      	ldr	r0, [r3, #8]
{
 80060a6:	b510      	push	{r4, lr}

	if (thread == NULL) {
 80060a8:	b198      	cbz	r0, 80060d2 <z_check_thread_stack_fail+0x32>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
 80060aa:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80060ae:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 80060b2:	f013 0f08 	tst.w	r3, #8
 80060b6:	bf14      	ite	ne
 80060b8:	2480      	movne	r4, #128	; 0x80
 80060ba:	2420      	moveq	r4, #32
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80060bc:	f112 0f16 	cmn.w	r2, #22
 80060c0:	d004      	beq.n	80060cc <z_check_thread_stack_fail+0x2c>
 80060c2:	1b03      	subs	r3, r0, r4
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d805      	bhi.n	80060d4 <z_check_thread_stack_fail+0x34>
 80060c8:	4282      	cmp	r2, r0
 80060ca:	d203      	bcs.n	80060d4 <z_check_thread_stack_fail+0x34>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 80060cc:	4281      	cmp	r1, r0
 80060ce:	bf28      	it	cs
 80060d0:	2000      	movcs	r0, #0
}
 80060d2:	bd10      	pop	{r4, pc}
	return 0;
 80060d4:	2000      	movs	r0, #0
 80060d6:	e7fc      	b.n	80060d2 <z_check_thread_stack_fail+0x32>
 80060d8:	200020e8 	.word	0x200020e8

080060dc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80060dc:	b508      	push	{r3, lr}
 80060de:	4614      	mov	r4, r2
 80060e0:	460d      	mov	r5, r1
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 80060e2:	2200      	movs	r2, #0
 80060e4:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80060e8:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 80060ec:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80060f0:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80060f4:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80060f8:	4a08      	ldr	r2, [pc, #32]	; (800611c <arch_switch_to_main_thread+0x40>)
 80060fa:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80060fc:	f000 fc28 	bl	8006950 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8006100:	4620      	mov	r0, r4
 8006102:	f385 8809 	msr	PSP, r5
 8006106:	2100      	movs	r1, #0
 8006108:	b663      	cpsie	if
 800610a:	f381 8811 	msr	BASEPRI, r1
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	2200      	movs	r2, #0
 8006114:	2300      	movs	r3, #0
 8006116:	f004 f859 	bl	800a1cc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 800611a:	bf00      	nop
 800611c:	200020e8 	.word	0x200020e8

08006120 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8006120:	4901      	ldr	r1, [pc, #4]	; (8006128 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8006122:	2210      	movs	r2, #16
	str	r2, [r1]
 8006124:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8006126:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8006128:	e000ed10 	.word	0xe000ed10

0800612c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 800612c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800612e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8006130:	f380 8811 	msr	BASEPRI, r0
	isb
 8006134:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8006138:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 800613c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800613e:	b662      	cpsie	i
	isb
 8006140:	f3bf 8f6f 	isb	sy

	bx	lr
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop

08006148 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	4681      	mov	r9, r0
 800614e:	b08b      	sub	sp, #44	; 0x2c

	if (esf != NULL) {
 8006150:	460c      	mov	r4, r1
 8006152:	2900      	cmp	r1, #0
 8006154:	d06e      	beq.n	8006234 <z_arm_fatal_error+0xec>
 8006156:	4e3b      	ldr	r6, [pc, #236]	; (8006244 <z_arm_fatal_error+0xfc>)
 8006158:	4d3b      	ldr	r5, [pc, #236]	; (8006248 <z_arm_fatal_error+0x100>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 800615a:	6833      	ldr	r3, [r6, #0]
 800615c:	1b75      	subs	r5, r6, r5
 800615e:	075a      	lsls	r2, r3, #29
 8006160:	ea4f 0595 	mov.w	r5, r5, lsr #2
 8006164:	d01d      	beq.n	80061a2 <z_arm_fatal_error+0x5a>
 8006166:	01af      	lsls	r7, r5, #6
 8006168:	f047 0701 	orr.w	r7, r7, #1
 800616c:	f8ad 7000 	strh.w	r7, [sp]
 8006170:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8006174:	4835      	ldr	r0, [pc, #212]	; (800624c <z_arm_fatal_error+0x104>)
 8006176:	6809      	ldr	r1, [r1, #0]
 8006178:	f004 fd84 	bl	800ac84 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 800617c:	6833      	ldr	r3, [r6, #0]
 800617e:	075b      	lsls	r3, r3, #29
 8006180:	d00f      	beq.n	80061a2 <z_arm_fatal_error+0x5a>
 8006182:	f8ad 7000 	strh.w	r7, [sp]
 8006186:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800618a:	4831      	ldr	r0, [pc, #196]	; (8006250 <z_arm_fatal_error+0x108>)
 800618c:	68e1      	ldr	r1, [r4, #12]
 800618e:	f004 fd79 	bl	800ac84 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8006192:	6833      	ldr	r3, [r6, #0]
 8006194:	0758      	lsls	r0, r3, #29
 8006196:	d004      	beq.n	80061a2 <z_arm_fatal_error+0x5a>
 8006198:	69e1      	ldr	r1, [r4, #28]
 800619a:	482e      	ldr	r0, [pc, #184]	; (8006254 <z_arm_fatal_error+0x10c>)
 800619c:	463a      	mov	r2, r7
 800619e:	f004 fd41 	bl	800ac24 <log_1>
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 80061a2:	ea4f 1a85 	mov.w	sl, r5, lsl #6
 80061a6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8006260 <z_arm_fatal_error+0x118>
 80061aa:	46a0      	mov	r8, r4
{
 80061ac:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 80061ae:	f04a 0a01 	orr.w	sl, sl, #1
 80061b2:	6833      	ldr	r3, [r6, #0]
 80061b4:	0759      	lsls	r1, r3, #29
 80061b6:	d025      	beq.n	8006204 <z_arm_fatal_error+0xbc>
 80061b8:	edd8 7a08 	vldr	s15, [r8, #32]
 80061bc:	9702      	str	r7, [sp, #8]
 80061be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c2:	1c7b      	adds	r3, r7, #1
 80061c4:	edcd 7a03 	vstr	s15, [sp, #12]
 80061c8:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 80061cc:	9304      	str	r3, [sp, #16]
 80061ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d2:	1cbb      	adds	r3, r7, #2
 80061d4:	edcd 7a05 	vstr	s15, [sp, #20]
 80061d8:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
 80061dc:	9306      	str	r3, [sp, #24]
 80061de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e2:	1cfb      	adds	r3, r7, #3
 80061e4:	edcd 7a07 	vstr	s15, [sp, #28]
 80061e8:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 80061ec:	9308      	str	r3, [sp, #32]
 80061ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061f2:	2208      	movs	r2, #8
 80061f4:	4653      	mov	r3, sl
 80061f6:	eb0d 0102 	add.w	r1, sp, r2
 80061fa:	4658      	mov	r0, fp
 80061fc:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8006200:	f004 fd5f 	bl	800acc2 <log_n>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 8006204:	3704      	adds	r7, #4
 8006206:	2f10      	cmp	r7, #16
 8006208:	f108 0810 	add.w	r8, r8, #16
 800620c:	d1d1      	bne.n	80061b2 <z_arm_fatal_error+0x6a>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
 800620e:	6833      	ldr	r3, [r6, #0]
 8006210:	075a      	lsls	r2, r3, #29
 8006212:	d00f      	beq.n	8006234 <z_arm_fatal_error+0xec>
 8006214:	01ad      	lsls	r5, r5, #6
 8006216:	f045 0501 	orr.w	r5, r5, #1
 800621a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800621c:	480e      	ldr	r0, [pc, #56]	; (8006258 <z_arm_fatal_error+0x110>)
 800621e:	462a      	mov	r2, r5
 8006220:	f004 fd00 	bl	800ac24 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8006224:	6833      	ldr	r3, [r6, #0]
 8006226:	075b      	lsls	r3, r3, #29
 8006228:	d004      	beq.n	8006234 <z_arm_fatal_error+0xec>
 800622a:	69a1      	ldr	r1, [r4, #24]
 800622c:	480b      	ldr	r0, [pc, #44]	; (800625c <z_arm_fatal_error+0x114>)
 800622e:	462a      	mov	r2, r5
 8006230:	f004 fcf8 	bl	800ac24 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8006234:	4621      	mov	r1, r4
 8006236:	4648      	mov	r0, r9
}
 8006238:	b00b      	add	sp, #44	; 0x2c
 800623a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_fatal_error(reason, esf);
 800623e:	f001 bf2d 	b.w	800809c <z_fatal_error>
 8006242:	bf00      	nop
 8006244:	20000354 	.word	0x20000354
 8006248:	2000033c 	.word	0x2000033c
 800624c:	08010384 	.word	0x08010384
 8006250:	080103b3 	.word	0x080103b3
 8006254:	080103e2 	.word	0x080103e2
 8006258:	08010434 	.word	0x08010434
 800625c:	08010443 	.word	0x08010443
 8006260:	080103f1 	.word	0x080103f1

08006264 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8006264:	bf30      	wfi
    b z_SysNmiOnReset
 8006266:	f7ff bffd 	b.w	8006264 <z_SysNmiOnReset>
 800626a:	bf00      	nop

0800626c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800626c:	4a14      	ldr	r2, [pc, #80]	; (80062c0 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 800626e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8006270:	4b14      	ldr	r3, [pc, #80]	; (80062c4 <z_arm_prep_c+0x58>)
 8006272:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006276:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006278:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800627c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8006280:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006284:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 800628c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006290:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8006298:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800629c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
 80062a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80062a4:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
 80062a8:	2300      	movs	r3, #0
 80062aa:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80062ae:	f001 ff6b 	bl	8008188 <z_bss_zero>
	z_data_copy();
 80062b2:	f002 ff4b 	bl	800914c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 80062b6:	f000 fb21 	bl	80068fc <z_arm_interrupt_init>
	z_cstart();
 80062ba:	f001 ff8d 	bl	80081d8 <z_cstart>
 80062be:	bf00      	nop
 80062c0:	08000000 	.word	0x08000000
 80062c4:	e000ed00 	.word	0xe000ed00

080062c8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80062c8:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80062ca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80062ce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80062d2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 80062d6:	4904      	ldr	r1, [pc, #16]	; (80062e8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80062d8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80062da:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 80062dc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80062de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80062e2:	4902      	ldr	r1, [pc, #8]	; (80062ec <_isr_wrapper+0x24>)
	bx r1
 80062e4:	4708      	bx	r1
 80062e6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80062e8:	0800daa8 	.word	0x0800daa8
	ldr r1, =z_arm_int_exit
 80062ec:	080068e1 	.word	0x080068e1

080062f0 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80062f0:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80062f2:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
 80062f6:	480b      	ldr	r0, [pc, #44]	; (8006324 <__start+0x34>)
    ldr r1, =0xaa
 80062f8:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80062fc:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
 8006300:	f007 fa12 	bl	800d728 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8006304:	4807      	ldr	r0, [pc, #28]	; (8006324 <__start+0x34>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8006306:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 800630a:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800630c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8006310:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8006314:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8006316:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8006318:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800631c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8006320:	f7ff ffa4 	bl	800626c <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
 8006324:	20004b80 	.word	0x20004b80

08006328 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8006328:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 800632c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8006330:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8006332:	4672      	mov	r2, lr
	bl z_arm_fault
 8006334:	f000 f9e4 	bl	8006700 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8006338:	bd01      	pop	{r0, pc}
 800633a:	bf00      	nop

0800633c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 800633c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
 8006340:	4c4d      	ldr	r4, [pc, #308]	; (8006478 <mem_manage_fault+0x13c>)
 8006342:	6823      	ldr	r3, [r4, #0]
{
 8006344:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 8006346:	0759      	lsls	r1, r3, #29
{
 8006348:	4607      	mov	r7, r0
 800634a:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 800634c:	d008      	beq.n	8006360 <mem_manage_fault+0x24>
 800634e:	494b      	ldr	r1, [pc, #300]	; (800647c <mem_manage_fault+0x140>)
 8006350:	484b      	ldr	r0, [pc, #300]	; (8006480 <mem_manage_fault+0x144>)
 8006352:	1a61      	subs	r1, r4, r1
 8006354:	0889      	lsrs	r1, r1, #2
 8006356:	0189      	lsls	r1, r1, #6
 8006358:	f041 0101 	orr.w	r1, r1, #1
 800635c:	f004 fc53 	bl	800ac06 <log_0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8006360:	4b48      	ldr	r3, [pc, #288]	; (8006484 <mem_manage_fault+0x148>)
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	06da      	lsls	r2, r3, #27
 8006366:	d50b      	bpl.n	8006380 <mem_manage_fault+0x44>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	075b      	lsls	r3, r3, #29
 800636c:	d008      	beq.n	8006380 <mem_manage_fault+0x44>
 800636e:	4943      	ldr	r1, [pc, #268]	; (800647c <mem_manage_fault+0x140>)
 8006370:	4845      	ldr	r0, [pc, #276]	; (8006488 <mem_manage_fault+0x14c>)
 8006372:	1a61      	subs	r1, r4, r1
 8006374:	0889      	lsrs	r1, r1, #2
 8006376:	0189      	lsls	r1, r1, #6
 8006378:	f041 0101 	orr.w	r1, r1, #1
 800637c:	f004 fc43 	bl	800ac06 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8006380:	4b40      	ldr	r3, [pc, #256]	; (8006484 <mem_manage_fault+0x148>)
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	071e      	lsls	r6, r3, #28
 8006386:	d50b      	bpl.n	80063a0 <mem_manage_fault+0x64>
		PR_FAULT_INFO("  Unstacking error");
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	0758      	lsls	r0, r3, #29
 800638c:	d008      	beq.n	80063a0 <mem_manage_fault+0x64>
 800638e:	493b      	ldr	r1, [pc, #236]	; (800647c <mem_manage_fault+0x140>)
 8006390:	483e      	ldr	r0, [pc, #248]	; (800648c <mem_manage_fault+0x150>)
 8006392:	1a61      	subs	r1, r4, r1
 8006394:	0889      	lsrs	r1, r1, #2
 8006396:	0189      	lsls	r1, r1, #6
 8006398:	f041 0101 	orr.w	r1, r1, #1
 800639c:	f004 fc33 	bl	800ac06 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80063a0:	4b38      	ldr	r3, [pc, #224]	; (8006484 <mem_manage_fault+0x148>)
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	0799      	lsls	r1, r3, #30
 80063a6:	d432      	bmi.n	800640e <mem_manage_fault+0xd2>
	uint32_t mmfar = -EINVAL;
 80063a8:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80063ac:	4b35      	ldr	r3, [pc, #212]	; (8006484 <mem_manage_fault+0x148>)
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	07d9      	lsls	r1, r3, #31
 80063b2:	d50b      	bpl.n	80063cc <mem_manage_fault+0x90>
		PR_FAULT_INFO("  Instruction Access Violation");
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	075a      	lsls	r2, r3, #29
 80063b8:	d008      	beq.n	80063cc <mem_manage_fault+0x90>
 80063ba:	4b30      	ldr	r3, [pc, #192]	; (800647c <mem_manage_fault+0x140>)
 80063bc:	4834      	ldr	r0, [pc, #208]	; (8006490 <mem_manage_fault+0x154>)
 80063be:	1ae3      	subs	r3, r4, r3
 80063c0:	089b      	lsrs	r3, r3, #2
 80063c2:	019b      	lsls	r3, r3, #6
 80063c4:	f043 0101 	orr.w	r1, r3, #1
 80063c8:	f004 fc1d 	bl	800ac06 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80063cc:	4b2d      	ldr	r3, [pc, #180]	; (8006484 <mem_manage_fault+0x148>)
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	069b      	lsls	r3, r3, #26
 80063d2:	d50b      	bpl.n	80063ec <mem_manage_fault+0xb0>
		PR_FAULT_INFO(
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	0758      	lsls	r0, r3, #29
 80063d8:	d008      	beq.n	80063ec <mem_manage_fault+0xb0>
 80063da:	4928      	ldr	r1, [pc, #160]	; (800647c <mem_manage_fault+0x140>)
 80063dc:	482d      	ldr	r0, [pc, #180]	; (8006494 <mem_manage_fault+0x158>)
 80063de:	1a64      	subs	r4, r4, r1
 80063e0:	08a4      	lsrs	r4, r4, #2
 80063e2:	01a4      	lsls	r4, r4, #6
 80063e4:	f044 0101 	orr.w	r1, r4, #1
 80063e8:	f004 fc0d 	bl	800ac06 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80063ec:	4b25      	ldr	r3, [pc, #148]	; (8006484 <mem_manage_fault+0x148>)
 80063ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063f0:	06d1      	lsls	r1, r2, #27
 80063f2:	d433      	bmi.n	800645c <mem_manage_fault+0x120>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80063f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80063f6:	0792      	lsls	r2, r2, #30
 80063f8:	d430      	bmi.n	800645c <mem_manage_fault+0x120>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80063fa:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80063fc:	4a21      	ldr	r2, [pc, #132]	; (8006484 <mem_manage_fault+0x148>)
 80063fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006400:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8006404:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8006406:	2300      	movs	r3, #0
 8006408:	702b      	strb	r3, [r5, #0]

	return reason;
}
 800640a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	075a      	lsls	r2, r3, #29
 8006412:	d008      	beq.n	8006426 <mem_manage_fault+0xea>
 8006414:	4919      	ldr	r1, [pc, #100]	; (800647c <mem_manage_fault+0x140>)
 8006416:	4820      	ldr	r0, [pc, #128]	; (8006498 <mem_manage_fault+0x15c>)
 8006418:	1a61      	subs	r1, r4, r1
 800641a:	0889      	lsrs	r1, r1, #2
 800641c:	0189      	lsls	r1, r1, #6
 800641e:	f041 0101 	orr.w	r1, r1, #1
 8006422:	f004 fbf0 	bl	800ac06 <log_0>
		uint32_t temp = SCB->MMFAR;
 8006426:	4b17      	ldr	r3, [pc, #92]	; (8006484 <mem_manage_fault+0x148>)
 8006428:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	061b      	lsls	r3, r3, #24
 800642e:	d5bb      	bpl.n	80063a8 <mem_manage_fault+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	0758      	lsls	r0, r3, #29
 8006434:	d009      	beq.n	800644a <mem_manage_fault+0x10e>
 8006436:	4a11      	ldr	r2, [pc, #68]	; (800647c <mem_manage_fault+0x140>)
 8006438:	4818      	ldr	r0, [pc, #96]	; (800649c <mem_manage_fault+0x160>)
 800643a:	1aa2      	subs	r2, r4, r2
 800643c:	0892      	lsrs	r2, r2, #2
 800643e:	0192      	lsls	r2, r2, #6
 8006440:	f042 0201 	orr.w	r2, r2, #1
 8006444:	4631      	mov	r1, r6
 8006446:	f004 fbed 	bl	800ac24 <log_1>
			if (from_hard_fault != 0) {
 800644a:	f1b8 0f00 	cmp.w	r8, #0
 800644e:	d0ad      	beq.n	80063ac <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8006450:	4a0c      	ldr	r2, [pc, #48]	; (8006484 <mem_manage_fault+0x148>)
 8006452:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006458:	6293      	str	r3, [r2, #40]	; 0x28
 800645a:	e7a7      	b.n	80063ac <mem_manage_fault+0x70>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	051b      	lsls	r3, r3, #20
 8006460:	d5cb      	bpl.n	80063fa <mem_manage_fault+0xbe>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8006462:	4639      	mov	r1, r7
 8006464:	4630      	mov	r0, r6
 8006466:	f7ff fe1b 	bl	80060a0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 800646a:	2800      	cmp	r0, #0
 800646c:	d0c5      	beq.n	80063fa <mem_manage_fault+0xbe>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800646e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8006472:	2002      	movs	r0, #2
 8006474:	e7c2      	b.n	80063fc <mem_manage_fault+0xc0>
 8006476:	bf00      	nop
 8006478:	20000354 	.word	0x20000354
 800647c:	2000033c 	.word	0x2000033c
 8006480:	08010471 	.word	0x08010471
 8006484:	e000ed00 	.word	0xe000ed00
 8006488:	08010487 	.word	0x08010487
 800648c:	080104ba 	.word	0x080104ba
 8006490:	080104fb 	.word	0x080104fb
 8006494:	0801051a 	.word	0x0801051a
 8006498:	080104cd 	.word	0x080104cd
 800649c:	080104e5 	.word	0x080104e5

080064a0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 80064a0:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 80064a2:	4c3b      	ldr	r4, [pc, #236]	; (8006590 <usage_fault.constprop.0+0xf0>)
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	075b      	lsls	r3, r3, #29
 80064a8:	d008      	beq.n	80064bc <usage_fault.constprop.0+0x1c>
 80064aa:	493a      	ldr	r1, [pc, #232]	; (8006594 <usage_fault.constprop.0+0xf4>)
 80064ac:	483a      	ldr	r0, [pc, #232]	; (8006598 <usage_fault.constprop.0+0xf8>)
 80064ae:	1a61      	subs	r1, r4, r1
 80064b0:	0889      	lsrs	r1, r1, #2
 80064b2:	0189      	lsls	r1, r1, #6
 80064b4:	f041 0101 	orr.w	r1, r1, #1
 80064b8:	f004 fba5 	bl	800ac06 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80064bc:	4b37      	ldr	r3, [pc, #220]	; (800659c <usage_fault.constprop.0+0xfc>)
 80064be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c0:	0198      	lsls	r0, r3, #6
 80064c2:	d50b      	bpl.n	80064dc <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Division by zero");
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	0759      	lsls	r1, r3, #29
 80064c8:	d008      	beq.n	80064dc <usage_fault.constprop.0+0x3c>
 80064ca:	4932      	ldr	r1, [pc, #200]	; (8006594 <usage_fault.constprop.0+0xf4>)
 80064cc:	4834      	ldr	r0, [pc, #208]	; (80065a0 <usage_fault.constprop.0+0x100>)
 80064ce:	1a61      	subs	r1, r4, r1
 80064d0:	0889      	lsrs	r1, r1, #2
 80064d2:	0189      	lsls	r1, r1, #6
 80064d4:	f041 0101 	orr.w	r1, r1, #1
 80064d8:	f004 fb95 	bl	800ac06 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80064dc:	4b2f      	ldr	r3, [pc, #188]	; (800659c <usage_fault.constprop.0+0xfc>)
 80064de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e0:	01da      	lsls	r2, r3, #7
 80064e2:	d50b      	bpl.n	80064fc <usage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unaligned memory access");
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	075b      	lsls	r3, r3, #29
 80064e8:	d008      	beq.n	80064fc <usage_fault.constprop.0+0x5c>
 80064ea:	492a      	ldr	r1, [pc, #168]	; (8006594 <usage_fault.constprop.0+0xf4>)
 80064ec:	482d      	ldr	r0, [pc, #180]	; (80065a4 <usage_fault.constprop.0+0x104>)
 80064ee:	1a61      	subs	r1, r4, r1
 80064f0:	0889      	lsrs	r1, r1, #2
 80064f2:	0189      	lsls	r1, r1, #6
 80064f4:	f041 0101 	orr.w	r1, r1, #1
 80064f8:	f004 fb85 	bl	800ac06 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80064fc:	4b27      	ldr	r3, [pc, #156]	; (800659c <usage_fault.constprop.0+0xfc>)
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	0318      	lsls	r0, r3, #12
 8006502:	d50b      	bpl.n	800651c <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  No coprocessor instructions");
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	0759      	lsls	r1, r3, #29
 8006508:	d008      	beq.n	800651c <usage_fault.constprop.0+0x7c>
 800650a:	4922      	ldr	r1, [pc, #136]	; (8006594 <usage_fault.constprop.0+0xf4>)
 800650c:	4826      	ldr	r0, [pc, #152]	; (80065a8 <usage_fault.constprop.0+0x108>)
 800650e:	1a61      	subs	r1, r4, r1
 8006510:	0889      	lsrs	r1, r1, #2
 8006512:	0189      	lsls	r1, r1, #6
 8006514:	f041 0101 	orr.w	r1, r1, #1
 8006518:	f004 fb75 	bl	800ac06 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800651c:	4b1f      	ldr	r3, [pc, #124]	; (800659c <usage_fault.constprop.0+0xfc>)
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	035a      	lsls	r2, r3, #13
 8006522:	d50b      	bpl.n	800653c <usage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	075b      	lsls	r3, r3, #29
 8006528:	d008      	beq.n	800653c <usage_fault.constprop.0+0x9c>
 800652a:	491a      	ldr	r1, [pc, #104]	; (8006594 <usage_fault.constprop.0+0xf4>)
 800652c:	481f      	ldr	r0, [pc, #124]	; (80065ac <usage_fault.constprop.0+0x10c>)
 800652e:	1a61      	subs	r1, r4, r1
 8006530:	0889      	lsrs	r1, r1, #2
 8006532:	0189      	lsls	r1, r1, #6
 8006534:	f041 0101 	orr.w	r1, r1, #1
 8006538:	f004 fb65 	bl	800ac06 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800653c:	4b17      	ldr	r3, [pc, #92]	; (800659c <usage_fault.constprop.0+0xfc>)
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	0398      	lsls	r0, r3, #14
 8006542:	d50b      	bpl.n	800655c <usage_fault.constprop.0+0xbc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	0759      	lsls	r1, r3, #29
 8006548:	d008      	beq.n	800655c <usage_fault.constprop.0+0xbc>
 800654a:	4912      	ldr	r1, [pc, #72]	; (8006594 <usage_fault.constprop.0+0xf4>)
 800654c:	4818      	ldr	r0, [pc, #96]	; (80065b0 <usage_fault.constprop.0+0x110>)
 800654e:	1a61      	subs	r1, r4, r1
 8006550:	0889      	lsrs	r1, r1, #2
 8006552:	0189      	lsls	r1, r1, #6
 8006554:	f041 0101 	orr.w	r1, r1, #1
 8006558:	f004 fb55 	bl	800ac06 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800655c:	4b0f      	ldr	r3, [pc, #60]	; (800659c <usage_fault.constprop.0+0xfc>)
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	03da      	lsls	r2, r3, #15
 8006562:	d50b      	bpl.n	800657c <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	075b      	lsls	r3, r3, #29
 8006568:	d008      	beq.n	800657c <usage_fault.constprop.0+0xdc>
 800656a:	490a      	ldr	r1, [pc, #40]	; (8006594 <usage_fault.constprop.0+0xf4>)
 800656c:	4811      	ldr	r0, [pc, #68]	; (80065b4 <usage_fault.constprop.0+0x114>)
 800656e:	1a61      	subs	r1, r4, r1
 8006570:	0889      	lsrs	r1, r1, #2
 8006572:	0189      	lsls	r1, r1, #6
 8006574:	f041 0101 	orr.w	r1, r1, #1
 8006578:	f004 fb45 	bl	800ac06 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800657c:	4a07      	ldr	r2, [pc, #28]	; (800659c <usage_fault.constprop.0+0xfc>)
 800657e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006580:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8006584:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8006588:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 800658a:	2000      	movs	r0, #0
 800658c:	bd10      	pop	{r4, pc}
 800658e:	bf00      	nop
 8006590:	20000354 	.word	0x20000354
 8006594:	2000033c 	.word	0x2000033c
 8006598:	08010549 	.word	0x08010549
 800659c:	e000ed00 	.word	0xe000ed00
 80065a0:	08010561 	.word	0x08010561
 80065a4:	08010574 	.word	0x08010574
 80065a8:	0801058e 	.word	0x0801058e
 80065ac:	080105ac 	.word	0x080105ac
 80065b0:	080105d1 	.word	0x080105d1
 80065b4:	080105eb 	.word	0x080105eb

080065b8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 80065b8:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
 80065ba:	4c46      	ldr	r4, [pc, #280]	; (80066d4 <bus_fault.constprop.0+0x11c>)
 80065bc:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 80065be:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 80065c0:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 80065c2:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
 80065c4:	d008      	beq.n	80065d8 <bus_fault.constprop.0+0x20>
 80065c6:	4944      	ldr	r1, [pc, #272]	; (80066d8 <bus_fault.constprop.0+0x120>)
 80065c8:	4844      	ldr	r0, [pc, #272]	; (80066dc <bus_fault.constprop.0+0x124>)
 80065ca:	1a61      	subs	r1, r4, r1
 80065cc:	0889      	lsrs	r1, r1, #2
 80065ce:	0189      	lsls	r1, r1, #6
 80065d0:	f041 0101 	orr.w	r1, r1, #1
 80065d4:	f004 fb17 	bl	800ac06 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80065d8:	4b41      	ldr	r3, [pc, #260]	; (80066e0 <bus_fault.constprop.0+0x128>)
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	04da      	lsls	r2, r3, #19
 80065de:	d50b      	bpl.n	80065f8 <bus_fault.constprop.0+0x40>
		PR_FAULT_INFO("  Stacking error");
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	075b      	lsls	r3, r3, #29
 80065e4:	d008      	beq.n	80065f8 <bus_fault.constprop.0+0x40>
 80065e6:	493c      	ldr	r1, [pc, #240]	; (80066d8 <bus_fault.constprop.0+0x120>)
 80065e8:	483e      	ldr	r0, [pc, #248]	; (80066e4 <bus_fault.constprop.0+0x12c>)
 80065ea:	1a61      	subs	r1, r4, r1
 80065ec:	0889      	lsrs	r1, r1, #2
 80065ee:	0189      	lsls	r1, r1, #6
 80065f0:	f041 0101 	orr.w	r1, r1, #1
 80065f4:	f004 fb07 	bl	800ac06 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80065f8:	4b39      	ldr	r3, [pc, #228]	; (80066e0 <bus_fault.constprop.0+0x128>)
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	0518      	lsls	r0, r3, #20
 80065fe:	d50b      	bpl.n	8006618 <bus_fault.constprop.0+0x60>
		PR_FAULT_INFO("  Unstacking error");
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	0759      	lsls	r1, r3, #29
 8006604:	d008      	beq.n	8006618 <bus_fault.constprop.0+0x60>
 8006606:	4934      	ldr	r1, [pc, #208]	; (80066d8 <bus_fault.constprop.0+0x120>)
 8006608:	4837      	ldr	r0, [pc, #220]	; (80066e8 <bus_fault.constprop.0+0x130>)
 800660a:	1a61      	subs	r1, r4, r1
 800660c:	0889      	lsrs	r1, r1, #2
 800660e:	0189      	lsls	r1, r1, #6
 8006610:	f041 0101 	orr.w	r1, r1, #1
 8006614:	f004 faf7 	bl	800ac06 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8006618:	4b31      	ldr	r3, [pc, #196]	; (80066e0 <bus_fault.constprop.0+0x128>)
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	059a      	lsls	r2, r3, #22
 800661e:	d522      	bpl.n	8006666 <bus_fault.constprop.0+0xae>
		PR_FAULT_INFO("  Precise data bus error");
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	075b      	lsls	r3, r3, #29
 8006624:	d008      	beq.n	8006638 <bus_fault.constprop.0+0x80>
 8006626:	492c      	ldr	r1, [pc, #176]	; (80066d8 <bus_fault.constprop.0+0x120>)
 8006628:	4830      	ldr	r0, [pc, #192]	; (80066ec <bus_fault.constprop.0+0x134>)
 800662a:	1a61      	subs	r1, r4, r1
 800662c:	0889      	lsrs	r1, r1, #2
 800662e:	0189      	lsls	r1, r1, #6
 8006630:	f041 0101 	orr.w	r1, r1, #1
 8006634:	f004 fae7 	bl	800ac06 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 8006638:	4b29      	ldr	r3, [pc, #164]	; (80066e0 <bus_fault.constprop.0+0x128>)
 800663a:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	0418      	lsls	r0, r3, #16
 8006640:	d511      	bpl.n	8006666 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	075a      	lsls	r2, r3, #29
 8006646:	d008      	beq.n	800665a <bus_fault.constprop.0+0xa2>
 8006648:	4a23      	ldr	r2, [pc, #140]	; (80066d8 <bus_fault.constprop.0+0x120>)
 800664a:	4829      	ldr	r0, [pc, #164]	; (80066f0 <bus_fault.constprop.0+0x138>)
 800664c:	1aa2      	subs	r2, r4, r2
 800664e:	0892      	lsrs	r2, r2, #2
 8006650:	0192      	lsls	r2, r2, #6
 8006652:	f042 0201 	orr.w	r2, r2, #1
 8006656:	f004 fae5 	bl	800ac24 <log_1>
			if (from_hard_fault != 0) {
 800665a:	b126      	cbz	r6, 8006666 <bus_fault.constprop.0+0xae>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800665c:	4a20      	ldr	r2, [pc, #128]	; (80066e0 <bus_fault.constprop.0+0x128>)
 800665e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006660:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006664:	6293      	str	r3, [r2, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8006666:	4b1e      	ldr	r3, [pc, #120]	; (80066e0 <bus_fault.constprop.0+0x128>)
 8006668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666a:	055b      	lsls	r3, r3, #21
 800666c:	d50b      	bpl.n	8006686 <bus_fault.constprop.0+0xce>
		PR_FAULT_INFO("  Imprecise data bus error");
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	075e      	lsls	r6, r3, #29
 8006672:	d008      	beq.n	8006686 <bus_fault.constprop.0+0xce>
 8006674:	4918      	ldr	r1, [pc, #96]	; (80066d8 <bus_fault.constprop.0+0x120>)
 8006676:	481f      	ldr	r0, [pc, #124]	; (80066f4 <bus_fault.constprop.0+0x13c>)
 8006678:	1a61      	subs	r1, r4, r1
 800667a:	0889      	lsrs	r1, r1, #2
 800667c:	0189      	lsls	r1, r1, #6
 800667e:	f041 0101 	orr.w	r1, r1, #1
 8006682:	f004 fac0 	bl	800ac06 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8006686:	4b16      	ldr	r3, [pc, #88]	; (80066e0 <bus_fault.constprop.0+0x128>)
 8006688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800668a:	05d0      	lsls	r0, r2, #23
 800668c:	d513      	bpl.n	80066b6 <bus_fault.constprop.0+0xfe>
		PR_FAULT_INFO("  Instruction bus error");
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	0759      	lsls	r1, r3, #29
 8006692:	d008      	beq.n	80066a6 <bus_fault.constprop.0+0xee>
 8006694:	4910      	ldr	r1, [pc, #64]	; (80066d8 <bus_fault.constprop.0+0x120>)
 8006696:	4818      	ldr	r0, [pc, #96]	; (80066f8 <bus_fault.constprop.0+0x140>)
 8006698:	1a64      	subs	r4, r4, r1
 800669a:	08a4      	lsrs	r4, r4, #2
 800669c:	01a4      	lsls	r4, r4, #6
 800669e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 80066a2:	f004 fab0 	bl	800ac06 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80066a6:	4a0e      	ldr	r2, [pc, #56]	; (80066e0 <bus_fault.constprop.0+0x128>)
 80066a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80066aa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80066ac:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80066b0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80066b2:	7028      	strb	r0, [r5, #0]
}
 80066b4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80066b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b8:	049a      	lsls	r2, r3, #18
 80066ba:	d5f4      	bpl.n	80066a6 <bus_fault.constprop.0+0xee>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	075b      	lsls	r3, r3, #29
 80066c0:	d0f1      	beq.n	80066a6 <bus_fault.constprop.0+0xee>
 80066c2:	4905      	ldr	r1, [pc, #20]	; (80066d8 <bus_fault.constprop.0+0x120>)
 80066c4:	480d      	ldr	r0, [pc, #52]	; (80066fc <bus_fault.constprop.0+0x144>)
 80066c6:	1a64      	subs	r4, r4, r1
 80066c8:	08a4      	lsrs	r4, r4, #2
 80066ca:	01a4      	lsls	r4, r4, #6
 80066cc:	f044 0101 	orr.w	r1, r4, #1
 80066d0:	e7e7      	b.n	80066a2 <bus_fault.constprop.0+0xea>
 80066d2:	bf00      	nop
 80066d4:	20000354 	.word	0x20000354
 80066d8:	2000033c 	.word	0x2000033c
 80066dc:	08010616 	.word	0x08010616
 80066e0:	e000ed00 	.word	0xe000ed00
 80066e4:	0801062c 	.word	0x0801062c
 80066e8:	080104ba 	.word	0x080104ba
 80066ec:	0801063d 	.word	0x0801063d
 80066f0:	08010656 	.word	0x08010656
 80066f4:	0801066b 	.word	0x0801066b
 80066f8:	08010686 	.word	0x08010686
 80066fc:	0801051a 	.word	0x0801051a

08006700 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8006700:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8006702:	4b68      	ldr	r3, [pc, #416]	; (80068a4 <z_arm_fault+0x1a4>)
 8006704:	685f      	ldr	r7, [r3, #4]
{
 8006706:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8006708:	f3c7 0408 	ubfx	r4, r7, #0, #9
 800670c:	2500      	movs	r5, #0
 800670e:	f385 8811 	msr	BASEPRI, r5
 8006712:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8006716:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 800671a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800671e:	d111      	bne.n	8006744 <z_arm_fault+0x44>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8006720:	f002 030c 	and.w	r3, r2, #12
 8006724:	2b08      	cmp	r3, #8
 8006726:	d10f      	bne.n	8006748 <z_arm_fault+0x48>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8006728:	495f      	ldr	r1, [pc, #380]	; (80068a8 <z_arm_fault+0x1a8>)
 800672a:	680b      	ldr	r3, [r1, #0]
 800672c:	f013 0307 	ands.w	r3, r3, #7
 8006730:	d01d      	beq.n	800676e <z_arm_fault+0x6e>
 8006732:	4b5e      	ldr	r3, [pc, #376]	; (80068ac <z_arm_fault+0x1ac>)
 8006734:	485e      	ldr	r0, [pc, #376]	; (80068b0 <z_arm_fault+0x1b0>)
 8006736:	1ac9      	subs	r1, r1, r3
 8006738:	0889      	lsrs	r1, r1, #2
 800673a:	0189      	lsls	r1, r1, #6
 800673c:	f041 0101 	orr.w	r1, r1, #1
 8006740:	f004 fa61 	bl	800ac06 <log_0>
		return NULL;
 8006744:	462e      	mov	r6, r5
 8006746:	e004      	b.n	8006752 <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8006748:	0716      	lsls	r6, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 800674a:	bf4e      	itee	mi
 800674c:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
 800674e:	4606      	movpl	r6, r0
			*nested_exc = true;
 8006750:	2501      	movpl	r5, #1
	*recoverable = false;
 8006752:	2300      	movs	r3, #0
 8006754:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
 8006758:	1ee3      	subs	r3, r4, #3
 800675a:	2b09      	cmp	r3, #9
 800675c:	f200 8085 	bhi.w	800686a <z_arm_fault+0x16a>
 8006760:	e8df f003 	tbb	[pc, r3]
 8006764:	69716d07 	.word	0x69716d07
 8006768:	83838383 	.word	0x83838383
 800676c:	7583      	.short	0x7583
	*nested_exc = false;
 800676e:	461d      	mov	r5, r3
 8006770:	e7e8      	b.n	8006744 <z_arm_fault+0x44>
	PR_FAULT_INFO("***** HARD FAULT *****");
 8006772:	4f4d      	ldr	r7, [pc, #308]	; (80068a8 <z_arm_fault+0x1a8>)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	0758      	lsls	r0, r3, #29
 8006778:	d008      	beq.n	800678c <z_arm_fault+0x8c>
 800677a:	494c      	ldr	r1, [pc, #304]	; (80068ac <z_arm_fault+0x1ac>)
 800677c:	484d      	ldr	r0, [pc, #308]	; (80068b4 <z_arm_fault+0x1b4>)
 800677e:	1a79      	subs	r1, r7, r1
 8006780:	0889      	lsrs	r1, r1, #2
 8006782:	0189      	lsls	r1, r1, #6
 8006784:	f041 0101 	orr.w	r1, r1, #1
 8006788:	f004 fa3d 	bl	800ac06 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800678c:	4b45      	ldr	r3, [pc, #276]	; (80068a4 <z_arm_fault+0x1a4>)
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	*recoverable = false;
 8006790:	2400      	movs	r4, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8006792:	0791      	lsls	r1, r2, #30
	*recoverable = false;
 8006794:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8006798:	d526      	bpl.n	80067e8 <z_arm_fault+0xe8>
		PR_EXC("  Bus fault on vector table read");
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	075a      	lsls	r2, r3, #29
 800679e:	d101      	bne.n	80067a4 <z_arm_fault+0xa4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80067a0:	2400      	movs	r4, #0
 80067a2:	e008      	b.n	80067b6 <z_arm_fault+0xb6>
 80067a4:	4941      	ldr	r1, [pc, #260]	; (80068ac <z_arm_fault+0x1ac>)
		PR_EXC("  Bus fault on vector table read");
 80067a6:	4844      	ldr	r0, [pc, #272]	; (80068b8 <z_arm_fault+0x1b8>)
 80067a8:	1a79      	subs	r1, r7, r1
 80067aa:	0889      	lsrs	r1, r1, #2
 80067ac:	0189      	lsls	r1, r1, #6
 80067ae:	f041 0101 	orr.w	r1, r1, #1
 80067b2:	f004 fa28 	bl	800ac06 <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80067b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80067ba:	b99b      	cbnz	r3, 80067e4 <z_arm_fault+0xe4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80067bc:	2268      	movs	r2, #104	; 0x68
 80067be:	4631      	mov	r1, r6
 80067c0:	a802      	add	r0, sp, #8
 80067c2:	f006 ff89 	bl	800d6d8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80067c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c8:	2d00      	cmp	r5, #0
 80067ca:	d065      	beq.n	8006898 <z_arm_fault+0x198>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80067cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067d0:	b922      	cbnz	r2, 80067dc <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80067d2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80067d6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80067da:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 80067dc:	a902      	add	r1, sp, #8
 80067de:	4620      	mov	r0, r4
 80067e0:	f7ff fcb2 	bl	8006148 <z_arm_fatal_error>
}
 80067e4:	b01d      	add	sp, #116	; 0x74
 80067e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	d5d8      	bpl.n	80067a0 <z_arm_fault+0xa0>
		PR_EXC("  Fault escalation (see below)");
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	075c      	lsls	r4, r3, #29
 80067f2:	d008      	beq.n	8006806 <z_arm_fault+0x106>
 80067f4:	492d      	ldr	r1, [pc, #180]	; (80068ac <z_arm_fault+0x1ac>)
 80067f6:	4831      	ldr	r0, [pc, #196]	; (80068bc <z_arm_fault+0x1bc>)
 80067f8:	1a79      	subs	r1, r7, r1
 80067fa:	0889      	lsrs	r1, r1, #2
 80067fc:	0189      	lsls	r1, r1, #6
 80067fe:	f041 0101 	orr.w	r1, r1, #1
 8006802:	f004 fa00 	bl	800ac06 <log_0>
		if (SCB_MMFSR != 0) {
 8006806:	4b27      	ldr	r3, [pc, #156]	; (80068a4 <z_arm_fault+0x1a4>)
 8006808:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800680c:	b132      	cbz	r2, 800681c <z_arm_fault+0x11c>
			reason = mem_manage_fault(esf, 1, recoverable);
 800680e:	f10d 0207 	add.w	r2, sp, #7
 8006812:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8006814:	4630      	mov	r0, r6
 8006816:	f7ff fd91 	bl	800633c <mem_manage_fault>
 800681a:	e00e      	b.n	800683a <z_arm_fault+0x13a>
		} else if (SCB_BFSR != 0) {
 800681c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006820:	b12a      	cbz	r2, 800682e <z_arm_fault+0x12e>
			reason = bus_fault(esf, 1, recoverable);
 8006822:	f10d 0107 	add.w	r1, sp, #7
 8006826:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8006828:	f7ff fec6 	bl	80065b8 <bus_fault.constprop.0>
 800682c:	e005      	b.n	800683a <z_arm_fault+0x13a>
		} else if (SCB_UFSR != 0) {
 800682e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0b4      	beq.n	80067a0 <z_arm_fault+0xa0>
			reason = usage_fault(esf);
 8006836:	f7ff fe33 	bl	80064a0 <usage_fault.constprop.0>
 800683a:	4604      	mov	r4, r0
 800683c:	e7bb      	b.n	80067b6 <z_arm_fault+0xb6>
		reason = mem_manage_fault(esf, 0, recoverable);
 800683e:	f10d 0207 	add.w	r2, sp, #7
 8006842:	2100      	movs	r1, #0
 8006844:	e7e6      	b.n	8006814 <z_arm_fault+0x114>
		reason = bus_fault(esf, 0, recoverable);
 8006846:	f10d 0107 	add.w	r1, sp, #7
 800684a:	2000      	movs	r0, #0
 800684c:	e7ec      	b.n	8006828 <z_arm_fault+0x128>
	PR_FAULT_INFO(
 800684e:	4916      	ldr	r1, [pc, #88]	; (80068a8 <z_arm_fault+0x1a8>)
 8006850:	680b      	ldr	r3, [r1, #0]
 8006852:	0758      	lsls	r0, r3, #29
 8006854:	d0a4      	beq.n	80067a0 <z_arm_fault+0xa0>
 8006856:	4b15      	ldr	r3, [pc, #84]	; (80068ac <z_arm_fault+0x1ac>)
 8006858:	4819      	ldr	r0, [pc, #100]	; (80068c0 <z_arm_fault+0x1c0>)
 800685a:	1ac9      	subs	r1, r1, r3
 800685c:	0889      	lsrs	r1, r1, #2
 800685e:	0189      	lsls	r1, r1, #6
 8006860:	f041 0101 	orr.w	r1, r1, #1
 8006864:	f004 f9cf 	bl	800ac06 <log_0>
 8006868:	e79a      	b.n	80067a0 <z_arm_fault+0xa0>
	PR_FAULT_INFO("***** %s %d) *****",
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <z_arm_fault+0x1a8>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	0752      	lsls	r2, r2, #29
 8006870:	d096      	beq.n	80067a0 <z_arm_fault+0xa0>
 8006872:	4a0e      	ldr	r2, [pc, #56]	; (80068ac <z_arm_fault+0x1ac>)
 8006874:	4813      	ldr	r0, [pc, #76]	; (80068c4 <z_arm_fault+0x1c4>)
 8006876:	4914      	ldr	r1, [pc, #80]	; (80068c8 <z_arm_fault+0x1c8>)
 8006878:	1a9b      	subs	r3, r3, r2
 800687a:	089b      	lsrs	r3, r3, #2
 800687c:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
 8006880:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8006884:	bf18      	it	ne
 8006886:	4601      	movne	r1, r0
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	480f      	ldr	r0, [pc, #60]	; (80068cc <z_arm_fault+0x1cc>)
 800688e:	f1a4 0210 	sub.w	r2, r4, #16
 8006892:	f004 f9de 	bl	800ac52 <log_2>
 8006896:	e783      	b.n	80067a0 <z_arm_fault+0xa0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8006898:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	e79b      	b.n	80067da <z_arm_fault+0xda>
 80068a2:	bf00      	nop
 80068a4:	e000ed00 	.word	0xe000ed00
 80068a8:	20000354 	.word	0x20000354
 80068ac:	2000033c 	.word	0x2000033c
 80068b0:	0801069e 	.word	0x0801069e
 80068b4:	080106c9 	.word	0x080106c9
 80068b8:	080106e0 	.word	0x080106e0
 80068bc:	08010701 	.word	0x08010701
 80068c0:	08010720 	.word	0x08010720
 80068c4:	08010759 	.word	0x08010759
 80068c8:	08010744 	.word	0x08010744
 80068cc:	08010772 	.word	0x08010772

080068d0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80068d0:	4a02      	ldr	r2, [pc, #8]	; (80068dc <z_arm_fault_init+0xc>)
 80068d2:	6953      	ldr	r3, [r2, #20]
 80068d4:	f043 0310 	orr.w	r3, r3, #16
 80068d8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80068da:	4770      	bx	lr
 80068dc:	e000ed00 	.word	0xe000ed00

080068e0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 80068e0:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 80068e2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 80068e4:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
 80068e6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 80068e8:	d003      	beq.n	80068f2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 80068ea:	4903      	ldr	r1, [pc, #12]	; (80068f8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 80068ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 80068f0:	600a      	str	r2, [r1, #0]

080068f2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 80068f2:	4770      	bx	lr
	ldr r3, =_kernel
 80068f4:	200020e8 	.word	0x200020e8
	ldr r1, =_SCS_ICSR
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <z_arm_interrupt_init>:
 80068fc:	4804      	ldr	r0, [pc, #16]	; (8006910 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	2110      	movs	r1, #16
 8006902:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8006904:	3301      	adds	r3, #1
 8006906:	2b61      	cmp	r3, #97	; 0x61
 8006908:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 800690c:	d1f9      	bne.n	8006902 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 800690e:	4770      	bx	lr
 8006910:	e000e100 	.word	0xe000e100

08006914 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8006914:	4b06      	ldr	r3, [pc, #24]	; (8006930 <z_impl_k_thread_abort+0x1c>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	4283      	cmp	r3, r0
 800691a:	d107      	bne.n	800692c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800691c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8006920:	b123      	cbz	r3, 800692c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8006922:	4a04      	ldr	r2, [pc, #16]	; (8006934 <z_impl_k_thread_abort+0x20>)
 8006924:	6853      	ldr	r3, [r2, #4]
 8006926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800692a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 800692c:	f002 bba6 	b.w	800907c <z_thread_abort>
 8006930:	200020e8 	.word	0x200020e8
 8006934:	e000ed00 	.word	0xe000ed00

08006938 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8006938:	4b02      	ldr	r3, [pc, #8]	; (8006944 <z_arm_configure_static_mpu_regions+0xc>)
 800693a:	4a03      	ldr	r2, [pc, #12]	; (8006948 <z_arm_configure_static_mpu_regions+0x10>)
 800693c:	4803      	ldr	r0, [pc, #12]	; (800694c <z_arm_configure_static_mpu_regions+0x14>)
 800693e:	2101      	movs	r1, #1
 8006940:	f000 b89a 	b.w	8006a78 <arm_core_mpu_configure_static_mpu_regions>
 8006944:	20020000 	.word	0x20020000
 8006948:	20000000 	.word	0x20000000
 800694c:	0800f018 	.word	0x0800f018

08006950 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8006950:	b510      	push	{r4, lr}
 8006952:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
 8006954:	f7ff fb66 	bl	8006024 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8006958:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 800695c:	4b05      	ldr	r3, [pc, #20]	; (8006974 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
 800695e:	1a12      	subs	r2, r2, r0
	dynamic_regions[region_num].size = guard_size;
 8006960:	e9c3 2000 	strd	r2, r0, [r3]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8006964:	4a04      	ldr	r2, [pc, #16]	; (8006978 <z_arm_configure_dynamic_mpu_regions+0x28>)
 8006966:	609a      	str	r2, [r3, #8]
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
 8006968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 800696c:	2101      	movs	r1, #1
 800696e:	4618      	mov	r0, r3
 8006970:	f000 b88c 	b.w	8006a8c <arm_core_mpu_configure_dynamic_mpu_regions>
 8006974:	20001f30 	.word	0x20001f30
 8006978:	150b0000 	.word	0x150b0000

0800697c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 800697e:	4f2e      	ldr	r7, [pc, #184]	; (8006a38 <mpu_configure_regions+0xbc>)
 8006980:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8006982:	2100      	movs	r1, #0
 8006984:	42b1      	cmp	r1, r6
 8006986:	db01      	blt.n	800698c <mpu_configure_regions+0x10>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8006988:	4610      	mov	r0, r2
 800698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 800698c:	6844      	ldr	r4, [r0, #4]
 800698e:	2c00      	cmp	r4, #0
 8006990:	d04e      	beq.n	8006a30 <mpu_configure_regions+0xb4>
		if (do_sanity_check &&
 8006992:	b1c3      	cbz	r3, 80069c6 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8006994:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8006998:	ea14 0f0c 	tst.w	r4, ip
 800699c:	d00d      	beq.n	80069ba <mpu_configure_regions+0x3e>
			LOG_ERR("Partition %u: sanity check failed.", i);
 800699e:	4a27      	ldr	r2, [pc, #156]	; (8006a3c <mpu_configure_regions+0xc0>)
 80069a0:	6813      	ldr	r3, [r2, #0]
 80069a2:	0758      	lsls	r0, r3, #29
 80069a4:	d026      	beq.n	80069f4 <mpu_configure_regions+0x78>
 80069a6:	4b26      	ldr	r3, [pc, #152]	; (8006a40 <mpu_configure_regions+0xc4>)
 80069a8:	4826      	ldr	r0, [pc, #152]	; (8006a44 <mpu_configure_regions+0xc8>)
 80069aa:	1ad2      	subs	r2, r2, r3
 80069ac:	0892      	lsrs	r2, r2, #2
 80069ae:	0192      	lsls	r2, r2, #6
 80069b0:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80069b4:	f004 f936 	bl	800ac24 <log_1>
		if (reg_index == -EINVAL) {
 80069b8:	e01c      	b.n	80069f4 <mpu_configure_regions+0x78>
		&&
 80069ba:	2c1f      	cmp	r4, #31
 80069bc:	d9ef      	bls.n	800699e <mpu_configure_regions+0x22>
		((part->start & (part->size - 1U)) == 0U);
 80069be:	6805      	ldr	r5, [r0, #0]
		&&
 80069c0:	ea1c 0f05 	tst.w	ip, r5
 80069c4:	d1eb      	bne.n	800699e <mpu_configure_regions+0x22>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80069c6:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80069c8:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80069ca:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
 80069ce:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
 80069d0:	d913      	bls.n	80069fa <mpu_configure_regions+0x7e>
	if (size > (1UL << 31)) {
 80069d2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80069d6:	d812      	bhi.n	80069fe <mpu_configure_regions+0x82>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80069d8:	3c01      	subs	r4, #1
 80069da:	fab4 f484 	clz	r4, r4
 80069de:	f1c4 041f 	rsb	r4, r4, #31
 80069e2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80069e4:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80069e6:	ea4c 0404 	orr.w	r4, ip, r4
 80069ea:	d913      	bls.n	8006a14 <mpu_configure_regions+0x98>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80069ec:	4a13      	ldr	r2, [pc, #76]	; (8006a3c <mpu_configure_regions+0xc0>)
 80069ee:	6813      	ldr	r3, [r2, #0]
 80069f0:	075b      	lsls	r3, r3, #29
 80069f2:	d106      	bne.n	8006a02 <mpu_configure_regions+0x86>
			return -EINVAL;
 80069f4:	f06f 0215 	mvn.w	r2, #21
 80069f8:	e7c6      	b.n	8006988 <mpu_configure_regions+0xc>
		return REGION_32B;
 80069fa:	2408      	movs	r4, #8
 80069fc:	e7f2      	b.n	80069e4 <mpu_configure_regions+0x68>
		return REGION_4G;
 80069fe:	243e      	movs	r4, #62	; 0x3e
 8006a00:	e7f0      	b.n	80069e4 <mpu_configure_regions+0x68>
 8006a02:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <mpu_configure_regions+0xc4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8006a04:	4810      	ldr	r0, [pc, #64]	; (8006a48 <mpu_configure_regions+0xcc>)
 8006a06:	1ad2      	subs	r2, r2, r3
 8006a08:	0892      	lsrs	r2, r2, #2
 8006a0a:	0192      	lsls	r2, r2, #6
 8006a0c:	f042 0201 	orr.w	r2, r2, #1
 8006a10:	4629      	mov	r1, r5
 8006a12:	e7cf      	b.n	80069b4 <mpu_configure_regions+0x38>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8006a14:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
 8006a18:	432a      	orrs	r2, r5
 8006a1a:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8006a1e:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 8006a22:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8006a26:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8006a2a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
 8006a2e:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
 8006a30:	3101      	adds	r1, #1
 8006a32:	300c      	adds	r0, #12
 8006a34:	e7a6      	b.n	8006984 <mpu_configure_regions+0x8>
 8006a36:	bf00      	nop
 8006a38:	e000ed00 	.word	0xe000ed00
 8006a3c:	20000350 	.word	0x20000350
 8006a40:	2000033c 	.word	0x2000033c
 8006a44:	08010789 	.word	0x08010789
 8006a48:	080107ac 	.word	0x080107ac

08006a4c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8006a4c:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <arm_core_mpu_enable+0x14>)
 8006a4e:	2205      	movs	r2, #5
 8006a50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8006a54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006a58:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	e000ed00 	.word	0xe000ed00

08006a64 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006a64:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8006a68:	4b02      	ldr	r3, [pc, #8]	; (8006a74 <arm_core_mpu_disable+0x10>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	e000ed00 	.word	0xe000ed00

08006a78 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8006a78:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8006a7a:	4c03      	ldr	r4, [pc, #12]	; (8006a88 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	7822      	ldrb	r2, [r4, #0]
 8006a80:	f7ff ff7c 	bl	800697c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8006a84:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8006a86:	bd10      	pop	{r4, pc}
 8006a88:	20002879 	.word	0x20002879

08006a8c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8006a8c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8006a8e:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8006a90:	2300      	movs	r3, #0
 8006a92:	7812      	ldrb	r2, [r2, #0]
 8006a94:	f7ff ff72 	bl	800697c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8006a98:	f110 0f16 	cmn.w	r0, #22
 8006a9c:	d003      	beq.n	8006aa6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8006a9e:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 8006aa0:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8006aa2:	2807      	cmp	r0, #7
 8006aa4:	dd00      	ble.n	8006aa8 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8006aa6:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8006aa8:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
 8006aac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	e7f6      	b.n	8006aa2 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8006ab4:	20002879 	.word	0x20002879
 8006ab8:	e000ed00 	.word	0xe000ed00

08006abc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8006abc:	4914      	ldr	r1, [pc, #80]	; (8006b10 <z_arm_mpu_init+0x54>)
 8006abe:	6808      	ldr	r0, [r1, #0]
 8006ac0:	2808      	cmp	r0, #8
{
 8006ac2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8006ac4:	d821      	bhi.n	8006b0a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8006ac6:	f7ff ffcd 	bl	8006a64 <arm_core_mpu_disable>
	MPU->RNR = index;
 8006aca:	4c12      	ldr	r4, [pc, #72]	; (8006b14 <z_arm_mpu_init+0x58>)
 8006acc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8006ace:	2200      	movs	r2, #0
 8006ad0:	4290      	cmp	r0, r2
 8006ad2:	f101 010c 	add.w	r1, r1, #12
 8006ad6:	d105      	bne.n	8006ae4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8006ad8:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <z_arm_mpu_init+0x5c>)
 8006ada:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8006adc:	f7ff ffb6 	bl	8006a4c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8006ae0:	2000      	movs	r0, #0
}
 8006ae2:	bd10      	pop	{r4, pc}
 8006ae4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8006ae8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8006aec:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8006af6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8006afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006afe:	f043 0301 	orr.w	r3, r3, #1
 8006b02:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8006b06:	3201      	adds	r2, #1
 8006b08:	e7e2      	b.n	8006ad0 <z_arm_mpu_init+0x14>
		return -1;
 8006b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b0e:	e7e8      	b.n	8006ae2 <z_arm_mpu_init+0x26>
 8006b10:	0800f024 	.word	0x0800f024
 8006b14:	e000ed00 	.word	0xe000ed00
 8006b18:	20002879 	.word	0x20002879

08006b1c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8006b1c:	4b01      	ldr	r3, [pc, #4]	; (8006b24 <__stdout_hook_install+0x8>)
 8006b1e:	6018      	str	r0, [r3, #0]
}
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	200000a0 	.word	0x200000a0

08006b28 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8006b28:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8006b2a:	4c07      	ldr	r4, [pc, #28]	; (8006b48 <_sbrk+0x20>)
 8006b2c:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8006b2e:	18c2      	adds	r2, r0, r3
 8006b30:	4806      	ldr	r0, [pc, #24]	; (8006b4c <_sbrk+0x24>)
 8006b32:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
 8006b36:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 8006b3a:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
 8006b3c:	bf3a      	itte	cc
 8006b3e:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
 8006b40:	6022      	strcc	r2, [r4, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
 8006b42:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8006b46:	bd10      	pop	{r4, pc}
 8006b48:	20001f3c 	.word	0x20001f3c
 8006b4c:	20005f10 	.word	0x20005f10

08006b50 <__malloc_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8006b50:	4803      	ldr	r0, [pc, #12]	; (8006b60 <__malloc_lock+0x10>)
 8006b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b5a:	f001 be33 	b.w	80087c4 <z_impl_k_mutex_lock>
 8006b5e:	bf00      	nop
 8006b60:	200000a4 	.word	0x200000a4

08006b64 <__malloc_unlock>:
	return z_impl_k_mutex_unlock(mutex);
 8006b64:	4801      	ldr	r0, [pc, #4]	; (8006b6c <__malloc_unlock+0x8>)
 8006b66:	f001 bea5 	b.w	80088b4 <z_impl_k_mutex_unlock>
 8006b6a:	bf00      	nop
 8006b6c:	200000a4 	.word	0x200000a4

08006b70 <clock_control_on.constprop.0>:
 *
 * @param dev Device structure whose driver controls the clock.
 * @param sys Opaque data representing the clock.
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
 8006b70:	b513      	push	{r0, r1, r4, lr}
 8006b72:	9001      	str	r0, [sp, #4]
 8006b74:	4c08      	ldr	r4, [pc, #32]	; (8006b98 <clock_control_on.constprop.0+0x28>)
 8006b76:	4620      	mov	r0, r4
 8006b78:	f006 f8b1 	bl	800ccde <z_device_ready>
 8006b7c:	b138      	cbz	r0, 8006b8e <clock_control_on.constprop.0+0x1e>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8006b7e:	68a3      	ldr	r3, [r4, #8]
 8006b80:	9901      	ldr	r1, [sp, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4620      	mov	r0, r4
}
 8006b86:	b002      	add	sp, #8
 8006b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->on(dev, sys);
 8006b8c:	4718      	bx	r3
}
 8006b8e:	f06f 0012 	mvn.w	r0, #18
 8006b92:	b002      	add	sp, #8
 8006b94:	bd10      	pop	{r4, pc}
 8006b96:	bf00      	nop
 8006b98:	200001bc 	.word	0x200001bc

08006b9c <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8006b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8006ba2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 8006ba6:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8006ba8:	6902      	ldr	r2, [r0, #16]
{
 8006baa:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8006bac:	d123      	bne.n	8006bf6 <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006bae:	f004 0303 	and.w	r3, r4, #3
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	009a      	lsls	r2, r3, #2
 8006bb6:	230f      	movs	r3, #15
 8006bb8:	4093      	lsls	r3, r2
 8006bba:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	4933      	ldr	r1, [pc, #204]	; (8006c90 <gpio_stm32_pin_interrupt_configure+0xf4>)
 8006bc2:	3202      	adds	r2, #2
 8006bc4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006bc8:	0c19      	lsrs	r1, r3, #16
 8006bca:	ea02 4313 	and.w	r3, r2, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bce:	fa91 f2a1 	rbit	r2, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8006bd2:	fab2 f282 	clz	r2, r2
 8006bd6:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d109      	bne.n	8006bf2 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 8006bde:	4620      	mov	r0, r4
 8006be0:	f7fe fed6 	bl	8005990 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8006be4:	4620      	mov	r0, r4
 8006be6:	f7fe ff27 	bl	8005a38 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8006bea:	2100      	movs	r1, #0
 8006bec:	4620      	mov	r0, r4
 8006bee:	f7fe fedd 	bl	80059ac <stm32_exti_trigger>
	int err = 0;
 8006bf2:	2500      	movs	r5, #0
 8006bf4:	e03e      	b.n	8006c74 <gpio_stm32_pin_interrupt_configure+0xd8>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8006bf6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006bfa:	d042      	beq.n	8006c82 <gpio_stm32_pin_interrupt_configure+0xe6>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8006bfc:	4925      	ldr	r1, [pc, #148]	; (8006c94 <gpio_stm32_pin_interrupt_configure+0xf8>)
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f7fe ff08 	bl	8005a14 <stm32_exti_set_callback>
 8006c04:	4605      	mov	r5, r0
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d13e      	bne.n	8006c88 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 8006c0a:	4a23      	ldr	r2, [pc, #140]	; (8006c98 <gpio_stm32_pin_interrupt_configure+0xfc>)
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8006c0c:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 8006c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c12:	466b      	mov	r3, sp
 8006c14:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff ffa9 	bl	8006b70 <clock_control_on.constprop.0>
	if (ret != 0) {
 8006c1e:	b9c0      	cbnz	r0, 8006c52 <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006c20:	f004 0103 	and.w	r1, r4, #3
 8006c24:	3104      	adds	r1, #4
 8006c26:	008b      	lsls	r3, r1, #2
 8006c28:	210f      	movs	r1, #15
 8006c2a:	4099      	lsls	r1, r3
 8006c2c:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8006c30:	b2ca      	uxtb	r2, r1
 8006c32:	0092      	lsls	r2, r2, #2
 8006c34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006c38:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8006c3c:	0c0b      	lsrs	r3, r1, #16
 8006c3e:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c40:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8006c44:	fab3 f383 	clz	r3, r3
 8006c48:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 8006c4c:	409f      	lsls	r7, r3
 8006c4e:	430f      	orrs	r7, r1
 8006c50:	6097      	str	r7, [r2, #8]

	switch (trig) {
 8006c52:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8006c56:	d010      	beq.n	8006c7a <gpio_stm32_pin_interrupt_configure+0xde>
 8006c58:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 8006c5c:	d00f      	beq.n	8006c7e <gpio_stm32_pin_interrupt_configure+0xe2>
 8006c5e:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 8006c62:	bf14      	ite	ne
 8006c64:	2100      	movne	r1, #0
 8006c66:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f7fe fe9f 	bl	80059ac <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f7fe fe80 	bl	8005974 <stm32_exti_enable>

exit:
	return err;
}
 8006c74:	4628      	mov	r0, r5
 8006c76:	b003      	add	sp, #12
 8006c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	e7f4      	b.n	8006c68 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 8006c7e:	2103      	movs	r1, #3
 8006c80:	e7f2      	b.n	8006c68 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 8006c82:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8006c86:	e7f5      	b.n	8006c74 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 8006c88:	f06f 050f 	mvn.w	r5, #15
	return err;
 8006c8c:	e7f2      	b.n	8006c74 <gpio_stm32_pin_interrupt_configure+0xd8>
 8006c8e:	bf00      	nop
 8006c90:	40013800 	.word	0x40013800
 8006c94:	0800c205 	.word	0x0800c205
 8006c98:	0800df64 	.word	0x0800df64

08006c9c <gpio_stm32_clock_request>:
{
 8006c9c:	b570      	push	{r4, r5, r6, lr}
					(clock_control_subsys_t *)&cfg->pclken);
 8006c9e:	6844      	ldr	r4, [r0, #4]
 8006ca0:	340c      	adds	r4, #12
	if (on) {
 8006ca2:	b121      	cbz	r1, 8006cae <gpio_stm32_clock_request+0x12>
		ret = clock_control_on(clk,
 8006ca4:	4620      	mov	r0, r4
}
 8006ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = clock_control_on(clk,
 8006caa:	f7ff bf61 	b.w	8006b70 <clock_control_on.constprop.0>
 8006cae:	4d07      	ldr	r5, [pc, #28]	; (8006ccc <gpio_stm32_clock_request+0x30>)
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f006 f814 	bl	800ccde <z_device_ready>
 8006cb6:	b130      	cbz	r0, 8006cc6 <gpio_stm32_clock_request+0x2a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8006cb8:	68ab      	ldr	r3, [r5, #8]
 8006cba:	4621      	mov	r1, r4
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	685b      	ldr	r3, [r3, #4]
}
 8006cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cc4:	4718      	bx	r3
 8006cc6:	f06f 0012 	mvn.w	r0, #18
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	200001bc 	.word	0x200001bc

08006cd0 <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
 8006cd0:	b510      	push	{r4, lr}
 8006cd2:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, I2C_DEVICE_PREFIX);
 8006cd4:	4905      	ldr	r1, [pc, #20]	; (8006cec <device_name_get+0x1c>)
 8006cd6:	f004 fccd 	bl	800b674 <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
 8006cda:	b100      	cbz	r0, 8006cde <device_name_get+0xe>
 8006cdc:	6800      	ldr	r0, [r0, #0]
 8006cde:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
 8006ce0:	2300      	movs	r3, #0
	entry->help = NULL;
	entry->subcmd = NULL;
 8006ce2:	e9c4 3301 	strd	r3, r3, [r4, #4]
	entry->handler = NULL;
 8006ce6:	60e3      	str	r3, [r4, #12]
}
 8006ce8:	bd10      	pop	{r4, pc}
 8006cea:	bf00      	nop
 8006cec:	08010809 	.word	0x08010809

08006cf0 <cmd_i2c_write_byte>:
{
 8006cf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006cf4:	4605      	mov	r5, r0
 8006cf6:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
 8006cf8:	6850      	ldr	r0, [r2, #4]
 8006cfa:	f001 f949 	bl	8007f90 <z_impl_device_get_binding>
	if (!dev) {
 8006cfe:	4606      	mov	r6, r0
 8006d00:	b950      	cbnz	r0, 8006d18 <cmd_i2c_write_byte+0x28>
		shell_error(shell, "I2C: Device driver %s not found.",
 8006d02:	4628      	mov	r0, r5
 8006d04:	6863      	ldr	r3, [r4, #4]
 8006d06:	4a1c      	ldr	r2, [pc, #112]	; (8006d78 <cmd_i2c_write_byte+0x88>)
 8006d08:	2102      	movs	r1, #2
 8006d0a:	f004 fbc6 	bl	800b49a <shell_fprintf>
		return -ENODEV;
 8006d0e:	f06f 0012 	mvn.w	r0, #18
}
 8006d12:	b004      	add	sp, #16
 8006d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dev_addr = strtol(argv[2], NULL, 16);
 8006d18:	2210      	movs	r2, #16
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	68a0      	ldr	r0, [r4, #8]
 8006d1e:	f003 f81d 	bl	8009d5c <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
 8006d22:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
 8006d24:	4680      	mov	r8, r0
	reg_addr = strtol(argv[3], NULL, 16);
 8006d26:	2100      	movs	r1, #0
 8006d28:	68e0      	ldr	r0, [r4, #12]
 8006d2a:	f003 f817 	bl	8009d5c <strtol>
	out_byte = strtol(argv[4], NULL, 16);
 8006d2e:	2210      	movs	r2, #16
	reg_addr = strtol(argv[3], NULL, 16);
 8006d30:	4607      	mov	r7, r0
	out_byte = strtol(argv[4], NULL, 16);
 8006d32:	2100      	movs	r1, #0
 8006d34:	6920      	ldr	r0, [r4, #16]
 8006d36:	f003 f811 	bl	8009d5c <strtol>
	if (i2c_reg_write_byte(dev, dev_addr, reg_addr, out_byte) < 0) {
 8006d3a:	f88d 7000 	strb.w	r7, [sp]
 8006d3e:	f88d 0001 	strb.w	r0, [sp, #1]
			    uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
 8006d42:	2702      	movs	r7, #2
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;

	return i2c_transfer(dev, &msg, 1, addr);
 8006d44:	fa1f f388 	uxth.w	r3, r8
 8006d48:	2201      	movs	r2, #1
 8006d4a:	a901      	add	r1, sp, #4
 8006d4c:	4630      	mov	r0, r6
	msg.buf = (uint8_t *)buf;
 8006d4e:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
 8006d52:	9702      	str	r7, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8006d54:	f88d 700c 	strb.w	r7, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
 8006d58:	f005 fb2f 	bl	800c3ba <i2c_transfer>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	da08      	bge.n	8006d72 <cmd_i2c_write_byte+0x82>
		shell_error(shell, "Failed to write to device: %s", argv[1]);
 8006d60:	4628      	mov	r0, r5
 8006d62:	6863      	ldr	r3, [r4, #4]
 8006d64:	4a05      	ldr	r2, [pc, #20]	; (8006d7c <cmd_i2c_write_byte+0x8c>)
 8006d66:	4639      	mov	r1, r7
 8006d68:	f004 fb97 	bl	800b49a <shell_fprintf>
		return -EIO;
 8006d6c:	f06f 0004 	mvn.w	r0, #4
 8006d70:	e7cf      	b.n	8006d12 <cmd_i2c_write_byte+0x22>
	return 0;
 8006d72:	2000      	movs	r0, #0
 8006d74:	e7cd      	b.n	8006d12 <cmd_i2c_write_byte+0x22>
 8006d76:	bf00      	nop
 8006d78:	0801080e 	.word	0x0801080e
 8006d7c:	08010830 	.word	0x08010830

08006d80 <cmd_i2c_read>:
{
 8006d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	4606      	mov	r6, r0
 8006d86:	b08c      	sub	sp, #48	; 0x30
	dev = device_get_binding(argv[1]);
 8006d88:	6850      	ldr	r0, [r2, #4]
{
 8006d8a:	460f      	mov	r7, r1
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	f001 f8ff 	bl	8007f90 <z_impl_device_get_binding>
	if (!dev) {
 8006d92:	4680      	mov	r8, r0
 8006d94:	b950      	cbnz	r0, 8006dac <cmd_i2c_read+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
 8006d96:	4630      	mov	r0, r6
 8006d98:	6863      	ldr	r3, [r4, #4]
 8006d9a:	4a26      	ldr	r2, [pc, #152]	; (8006e34 <cmd_i2c_read+0xb4>)
 8006d9c:	2102      	movs	r1, #2
 8006d9e:	f004 fb7c 	bl	800b49a <shell_fprintf>
		return -ENODEV;
 8006da2:	f06f 0012 	mvn.w	r0, #18
}
 8006da6:	b00c      	add	sp, #48	; 0x30
 8006da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	dev_addr = strtol(argv[2], NULL, 16);
 8006dac:	2210      	movs	r2, #16
 8006dae:	2100      	movs	r1, #0
 8006db0:	68a0      	ldr	r0, [r4, #8]
 8006db2:	f002 ffd3 	bl	8009d5c <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
 8006db6:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
 8006db8:	4681      	mov	r9, r0
	reg_addr = strtol(argv[3], NULL, 16);
 8006dba:	2100      	movs	r1, #0
 8006dbc:	68e0      	ldr	r0, [r4, #12]
 8006dbe:	f002 ffcd 	bl	8009d5c <strtol>
	if (argc > 4) {
 8006dc2:	2f04      	cmp	r7, #4
	reg_addr = strtol(argv[3], NULL, 16);
 8006dc4:	4605      	mov	r5, r0
	if (argc > 4) {
 8006dc6:	d92b      	bls.n	8006e20 <cmd_i2c_read+0xa0>
		num_bytes = strtol(argv[4], NULL, 16);
 8006dc8:	6920      	ldr	r0, [r4, #16]
 8006dca:	2210      	movs	r2, #16
 8006dcc:	2100      	movs	r1, #0
 8006dce:	f002 ffc5 	bl	8009d5c <strtol>
		if (num_bytes > MAX_I2C_BYTES)
 8006dd2:	2810      	cmp	r0, #16
 8006dd4:	bfa8      	it	ge
 8006dd6:	2010      	movge	r0, #16
 8006dd8:	4607      	mov	r7, r0
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
 8006dda:	f10d 0307 	add.w	r3, sp, #7
 8006dde:	9306      	str	r3, [sp, #24]
	msg[0].len = num_write;
 8006de0:	2301      	movs	r3, #1
 8006de2:	9307      	str	r3, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8006de4:	2307      	movs	r3, #7
	if (i2c_burst_read(dev, dev_addr, reg_addr, buf, num_bytes) < 0) {
 8006de6:	f88d 5007 	strb.w	r5, [sp, #7]
 8006dea:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	msg[0].flags = I2C_MSG_WRITE;
 8006dee:	2500      	movs	r5, #0
	msg[1].buf = (uint8_t *)read_buf;
 8006df0:	f10d 0a08 	add.w	sl, sp, #8

	return i2c_transfer(dev, msg, 2, addr);
 8006df4:	fa1f f389 	uxth.w	r3, r9
 8006df8:	2202      	movs	r2, #2
 8006dfa:	a906      	add	r1, sp, #24
 8006dfc:	4640      	mov	r0, r8
	msg[1].len = num_read;
 8006dfe:	e9cd a709 	strd	sl, r7, [sp, #36]	; 0x24
	msg[0].flags = I2C_MSG_WRITE;
 8006e02:	f88d 5020 	strb.w	r5, [sp, #32]
	return i2c_transfer(dev, msg, 2, addr);
 8006e06:	f005 fad8 	bl	800c3ba <i2c_transfer>
 8006e0a:	42a8      	cmp	r0, r5
 8006e0c:	da0a      	bge.n	8006e24 <cmd_i2c_read+0xa4>
		shell_error(shell, "Failed to read from device: %s", argv[1]);
 8006e0e:	4630      	mov	r0, r6
 8006e10:	6863      	ldr	r3, [r4, #4]
 8006e12:	4a09      	ldr	r2, [pc, #36]	; (8006e38 <cmd_i2c_read+0xb8>)
 8006e14:	2102      	movs	r1, #2
 8006e16:	f004 fb40 	bl	800b49a <shell_fprintf>
		return -EIO;
 8006e1a:	f06f 0004 	mvn.w	r0, #4
 8006e1e:	e7c2      	b.n	8006da6 <cmd_i2c_read+0x26>
		num_bytes = MAX_I2C_BYTES;
 8006e20:	2710      	movs	r7, #16
 8006e22:	e7da      	b.n	8006dda <cmd_i2c_read+0x5a>
	shell_hexdump(shell, buf, num_bytes);
 8006e24:	4630      	mov	r0, r6
 8006e26:	463a      	mov	r2, r7
 8006e28:	4651      	mov	r1, sl
 8006e2a:	f004 fb43 	bl	800b4b4 <shell_hexdump>
	return 0;
 8006e2e:	4628      	mov	r0, r5
 8006e30:	e7b9      	b.n	8006da6 <cmd_i2c_read+0x26>
 8006e32:	bf00      	nop
 8006e34:	0801080e 	.word	0x0801080e
 8006e38:	0801084f 	.word	0x0801084f

08006e3c <cmd_i2c_scan>:
{
 8006e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	4604      	mov	r4, r0
 8006e42:	b087      	sub	sp, #28
	dev = device_get_binding(argv[1]);
 8006e44:	6850      	ldr	r0, [r2, #4]
{
 8006e46:	4690      	mov	r8, r2
 8006e48:	f001 f8a2 	bl	8007f90 <z_impl_device_get_binding>
	if (!dev) {
 8006e4c:	4681      	mov	r9, r0
 8006e4e:	b958      	cbnz	r0, 8006e68 <cmd_i2c_scan+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.",
 8006e50:	4620      	mov	r0, r4
 8006e52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e56:	4a2b      	ldr	r2, [pc, #172]	; (8006f04 <cmd_i2c_scan+0xc8>)
 8006e58:	2102      	movs	r1, #2
 8006e5a:	f004 fb1e 	bl	800b49a <shell_fprintf>
		return -ENODEV;
 8006e5e:	f06f 0012 	mvn.w	r0, #18
}
 8006e62:	b007      	add	sp, #28
 8006e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	shell_print(shell,
 8006e68:	4a27      	ldr	r2, [pc, #156]	; (8006f08 <cmd_i2c_scan+0xcc>)
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f004 fb14 	bl	800b49a <shell_fprintf>
 8006e72:	2600      	movs	r6, #0
	uint8_t cnt = 0, first = 0x40, last = 0x77;
 8006e74:	4637      	mov	r7, r6
		shell_fprintf(shell, SHELL_NORMAL, "%02x: ", i);
 8006e76:	4a25      	ldr	r2, [pc, #148]	; (8006f0c <cmd_i2c_scan+0xd0>)
				shell_fprintf(shell, SHELL_NORMAL,
 8006e78:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8006f1c <cmd_i2c_scan+0xe0>
				shell_fprintf(shell, SHELL_NORMAL, "   ");
 8006e7c:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8006f20 <cmd_i2c_scan+0xe4>
		shell_fprintf(shell, SHELL_NORMAL, "%02x: ", i);
 8006e80:	4633      	mov	r3, r6
 8006e82:	2100      	movs	r1, #0
 8006e84:	4620      	mov	r0, r4
 8006e86:	f004 fb08 	bl	800b49a <shell_fprintf>
 8006e8a:	4635      	mov	r5, r6
			if (i + j < first || i + j > last) {
 8006e8c:	f1a5 0340 	sub.w	r3, r5, #64	; 0x40
 8006e90:	2b37      	cmp	r3, #55	; 0x37
 8006e92:	d907      	bls.n	8006ea4 <cmd_i2c_scan+0x68>
				shell_fprintf(shell, SHELL_NORMAL, "   ");
 8006e94:	465a      	mov	r2, fp
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
 8006e96:	2100      	movs	r1, #0
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f004 fafe 	bl	800b49a <shell_fprintf>
 8006e9e:	e018      	b.n	8006ed2 <cmd_i2c_scan+0x96>
 8006ea0:	462e      	mov	r6, r5
 8006ea2:	e7e8      	b.n	8006e76 <cmd_i2c_scan+0x3a>
			msgs[0].buf = &dst;
 8006ea4:	f10d 030b 	add.w	r3, sp, #11
 8006ea8:	9303      	str	r3, [sp, #12]
			msgs[0].len = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9304      	str	r3, [sp, #16]
			msgs[0].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	f88d 3014 	strb.w	r3, [sp, #20]
			if (i2c_transfer(dev, &msgs[0], 1, i + j) == 0) {
 8006eb4:	a903      	add	r1, sp, #12
 8006eb6:	b2ab      	uxth	r3, r5
 8006eb8:	2201      	movs	r2, #1
 8006eba:	4648      	mov	r0, r9
 8006ebc:	f005 fa7d 	bl	800c3ba <i2c_transfer>
 8006ec0:	4601      	mov	r1, r0
 8006ec2:	b9e8      	cbnz	r0, 8006f00 <cmd_i2c_scan+0xc4>
				shell_fprintf(shell, SHELL_NORMAL,
 8006ec4:	462b      	mov	r3, r5
 8006ec6:	4652      	mov	r2, sl
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f004 fae6 	bl	800b49a <shell_fprintf>
				++cnt;
 8006ece:	3701      	adds	r7, #1
 8006ed0:	b2ff      	uxtb	r7, r7
		for (uint8_t j = 0; j < 16; j++) {
 8006ed2:	3501      	adds	r5, #1
 8006ed4:	f106 0310 	add.w	r3, r6, #16
 8006ed8:	429d      	cmp	r5, r3
 8006eda:	d1d7      	bne.n	8006e8c <cmd_i2c_scan+0x50>
		shell_print(shell, "");
 8006edc:	4a0c      	ldr	r2, [pc, #48]	; (8006f10 <cmd_i2c_scan+0xd4>)
 8006ede:	2100      	movs	r1, #0
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f004 fada 	bl	800b49a <shell_fprintf>
	for (uint8_t i = 0; i <= last; i += 16) {
 8006ee6:	2d80      	cmp	r5, #128	; 0x80
 8006ee8:	d1da      	bne.n	8006ea0 <cmd_i2c_scan+0x64>
	shell_print(shell, "%u devices found on %s",
 8006eea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	4a08      	ldr	r2, [pc, #32]	; (8006f14 <cmd_i2c_scan+0xd8>)
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	f004 facf 	bl	800b49a <shell_fprintf>
	return 0;
 8006efc:	2000      	movs	r0, #0
 8006efe:	e7b0      	b.n	8006e62 <cmd_i2c_scan+0x26>
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
 8006f00:	4a05      	ldr	r2, [pc, #20]	; (8006f18 <cmd_i2c_scan+0xdc>)
 8006f02:	e7c8      	b.n	8006e96 <cmd_i2c_scan+0x5a>
 8006f04:	0801080e 	.word	0x0801080e
 8006f08:	0801086f 	.word	0x0801086f
 8006f0c:	080108a4 	.word	0x080108a4
 8006f10:	0800f965 	.word	0x0800f965
 8006f14:	080108af 	.word	0x080108af
 8006f18:	080108ab 	.word	0x080108ab
 8006f1c:	0800f4b4 	.word	0x0800f4b4
 8006f20:	0800f4ba 	.word	0x0800f4ba

08006f24 <cmd_i2c_recover>:
{
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4605      	mov	r5, r0
 8006f28:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
 8006f2a:	6850      	ldr	r0, [r2, #4]
 8006f2c:	f001 f830 	bl	8007f90 <z_impl_device_get_binding>
	if (!dev) {
 8006f30:	b948      	cbnz	r0, 8006f46 <cmd_i2c_recover+0x22>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
 8006f32:	6863      	ldr	r3, [r4, #4]
 8006f34:	4a0c      	ldr	r2, [pc, #48]	; (8006f68 <cmd_i2c_recover+0x44>)
 8006f36:	2102      	movs	r1, #2
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f004 faae 	bl	800b49a <shell_fprintf>
 8006f3e:	f06f 0412 	mvn.w	r4, #18
}
 8006f42:	4620      	mov	r0, r4
 8006f44:	bd38      	pop	{r3, r4, r5, pc}
	if (api->recover_bus == NULL) {
 8006f46:	6883      	ldr	r3, [r0, #8]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	b153      	cbz	r3, 8006f62 <cmd_i2c_recover+0x3e>
	return api->recover_bus(dev);
 8006f4c:	4798      	blx	r3
	if (err) {
 8006f4e:	4604      	mov	r4, r0
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d0f6      	beq.n	8006f42 <cmd_i2c_recover+0x1e>
		shell_error(shell, "I2C: Bus recovery failed (err %d)", err);
 8006f54:	4a05      	ldr	r2, [pc, #20]	; (8006f6c <cmd_i2c_recover+0x48>)
 8006f56:	4623      	mov	r3, r4
 8006f58:	2102      	movs	r1, #2
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f004 fa9d 	bl	800b49a <shell_fprintf>
		return err;
 8006f60:	e7ef      	b.n	8006f42 <cmd_i2c_recover+0x1e>
		return -ENOSYS;
 8006f62:	f06f 0457 	mvn.w	r4, #87	; 0x57
 8006f66:	e7f5      	b.n	8006f54 <cmd_i2c_recover+0x30>
 8006f68:	0801080e 	.word	0x0801080e
 8006f6c:	080108c7 	.word	0x080108c7

08006f70 <cmd_i2c_read_byte>:
{
 8006f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f74:	4606      	mov	r6, r0
 8006f76:	b088      	sub	sp, #32
	dev = device_get_binding(argv[1]);
 8006f78:	6850      	ldr	r0, [r2, #4]
{
 8006f7a:	4615      	mov	r5, r2
 8006f7c:	f001 f808 	bl	8007f90 <z_impl_device_get_binding>
	if (!dev) {
 8006f80:	4607      	mov	r7, r0
 8006f82:	b950      	cbnz	r0, 8006f9a <cmd_i2c_read_byte+0x2a>
		shell_error(shell, "I2C: Device driver %s not found.",
 8006f84:	4630      	mov	r0, r6
 8006f86:	686b      	ldr	r3, [r5, #4]
 8006f88:	4a1f      	ldr	r2, [pc, #124]	; (8007008 <cmd_i2c_read_byte+0x98>)
 8006f8a:	2102      	movs	r1, #2
 8006f8c:	f004 fa85 	bl	800b49a <shell_fprintf>
		return -ENODEV;
 8006f90:	f06f 0012 	mvn.w	r0, #18
}
 8006f94:	b008      	add	sp, #32
 8006f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dev_addr = strtol(argv[2], NULL, 16);
 8006f9a:	2210      	movs	r2, #16
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	68a8      	ldr	r0, [r5, #8]
 8006fa0:	f002 fedc 	bl	8009d5c <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
 8006fa4:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
 8006fa6:	4680      	mov	r8, r0
	reg_addr = strtol(argv[3], NULL, 16);
 8006fa8:	2100      	movs	r1, #0
 8006faa:	68e8      	ldr	r0, [r5, #12]
 8006fac:	f002 fed6 	bl	8009d5c <strtol>
	msg[0].buf = (uint8_t *)write_buf;
 8006fb0:	f10d 0307 	add.w	r3, sp, #7
 8006fb4:	9302      	str	r3, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
 8006fb6:	f10d 0206 	add.w	r2, sp, #6
	msg[0].len = num_write;
 8006fba:	2301      	movs	r3, #1
	msg[1].len = num_read;
 8006fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
	msg[0].len = num_write;
 8006fc0:	9303      	str	r3, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8006fc2:	2307      	movs	r3, #7
	if (i2c_reg_read_byte(dev, dev_addr, reg_addr, &out) < 0) {
 8006fc4:	f88d 0007 	strb.w	r0, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
 8006fc8:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8006fca:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
 8006fce:	2202      	movs	r2, #2
 8006fd0:	fa1f f388 	uxth.w	r3, r8
 8006fd4:	a902      	add	r1, sp, #8
 8006fd6:	4638      	mov	r0, r7
	msg[0].flags = I2C_MSG_WRITE;
 8006fd8:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
 8006fdc:	f005 f9ed 	bl	800c3ba <i2c_transfer>
 8006fe0:	42a0      	cmp	r0, r4
 8006fe2:	da08      	bge.n	8006ff6 <cmd_i2c_read_byte+0x86>
		shell_error(shell, "Failed to read from device: %s", argv[1]);
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	686b      	ldr	r3, [r5, #4]
 8006fe8:	4a08      	ldr	r2, [pc, #32]	; (800700c <cmd_i2c_read_byte+0x9c>)
 8006fea:	2102      	movs	r1, #2
 8006fec:	f004 fa55 	bl	800b49a <shell_fprintf>
		return -EIO;
 8006ff0:	f06f 0004 	mvn.w	r0, #4
 8006ff4:	e7ce      	b.n	8006f94 <cmd_i2c_read_byte+0x24>
	shell_print(shell, "Output: 0x%x", out);
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006ffc:	4a04      	ldr	r2, [pc, #16]	; (8007010 <cmd_i2c_read_byte+0xa0>)
 8006ffe:	4621      	mov	r1, r4
 8007000:	f004 fa4b 	bl	800b49a <shell_fprintf>
	return 0;
 8007004:	4620      	mov	r0, r4
 8007006:	e7c5      	b.n	8006f94 <cmd_i2c_read_byte+0x24>
 8007008:	0801080e 	.word	0x0801080e
 800700c:	0801084f 	.word	0x0801084f
 8007010:	080108ea 	.word	0x080108ea

08007014 <cmd_i2c_write>:
{
 8007014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007018:	4606      	mov	r6, r0
 800701a:	b08f      	sub	sp, #60	; 0x3c
	dev = device_get_binding(argv[1]);
 800701c:	6850      	ldr	r0, [r2, #4]
{
 800701e:	460c      	mov	r4, r1
 8007020:	4615      	mov	r5, r2
 8007022:	f000 ffb5 	bl	8007f90 <z_impl_device_get_binding>
	if (!dev) {
 8007026:	4607      	mov	r7, r0
 8007028:	b950      	cbnz	r0, 8007040 <cmd_i2c_write+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
 800702a:	4630      	mov	r0, r6
 800702c:	686b      	ldr	r3, [r5, #4]
 800702e:	4a28      	ldr	r2, [pc, #160]	; (80070d0 <cmd_i2c_write+0xbc>)
 8007030:	2102      	movs	r1, #2
 8007032:	f004 fa32 	bl	800b49a <shell_fprintf>
		return -ENODEV;
 8007036:	f06f 0012 	mvn.w	r0, #18
}
 800703a:	b00f      	add	sp, #60	; 0x3c
 800703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dev_addr = strtol(argv[2], NULL, 16);
 8007040:	2210      	movs	r2, #16
 8007042:	2100      	movs	r1, #0
 8007044:	68a8      	ldr	r0, [r5, #8]
 8007046:	f002 fe89 	bl	8009d5c <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
 800704a:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
 800704c:	4683      	mov	fp, r0
	reg_addr = strtol(argv[3], NULL, 16);
 800704e:	2100      	movs	r1, #0
 8007050:	68e8      	ldr	r0, [r5, #12]
 8007052:	f002 fe83 	bl	8009d5c <strtol>
	if (num_bytes < 0) {
 8007056:	3c04      	subs	r4, #4
	reg_addr = strtol(argv[3], NULL, 16);
 8007058:	4681      	mov	r9, r0
	if (num_bytes < 0) {
 800705a:	d501      	bpl.n	8007060 <cmd_i2c_write+0x4c>
		return 0;
 800705c:	2000      	movs	r0, #0
 800705e:	e7ec      	b.n	800703a <cmd_i2c_write+0x26>
	for (i = 0; i < num_bytes; i++) {
 8007060:	2c10      	cmp	r4, #16
 8007062:	f105 080c 	add.w	r8, r5, #12
 8007066:	bfa8      	it	ge
 8007068:	2410      	movge	r4, #16
 800706a:	f10d 0a10 	add.w	sl, sp, #16
 800706e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8007072:	4598      	cmp	r8, r3
 8007074:	d121      	bne.n	80070ba <cmd_i2c_write+0xa6>
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
 8007076:	f10d 030f 	add.w	r3, sp, #15
 800707a:	9308      	str	r3, [sp, #32]
	msg[0].len = 1U;
 800707c:	2301      	movs	r3, #1
 800707e:	9309      	str	r3, [sp, #36]	; 0x24
	msg[0].flags = I2C_MSG_WRITE;
 8007080:	2300      	movs	r3, #0
 8007082:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28

	msg[1].buf = (uint8_t *)buf;
 8007086:	ab04      	add	r3, sp, #16
	msg[1].len = num_bytes;
 8007088:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800708c:	2402      	movs	r4, #2

	return i2c_transfer(dev, msg, 2, dev_addr);
 800708e:	fa1f f38b 	uxth.w	r3, fp
 8007092:	4622      	mov	r2, r4
 8007094:	a908      	add	r1, sp, #32
 8007096:	4638      	mov	r0, r7
	if (i2c_burst_write(dev, dev_addr, reg_addr, buf, num_bytes) < 0) {
 8007098:	f88d 900f 	strb.w	r9, [sp, #15]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800709c:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
	return i2c_transfer(dev, msg, 2, dev_addr);
 80070a0:	f005 f98b 	bl	800c3ba <i2c_transfer>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	dad9      	bge.n	800705c <cmd_i2c_write+0x48>
		shell_error(shell, "Failed to write to device: %s", argv[1]);
 80070a8:	4630      	mov	r0, r6
 80070aa:	686b      	ldr	r3, [r5, #4]
 80070ac:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <cmd_i2c_write+0xc0>)
 80070ae:	4621      	mov	r1, r4
 80070b0:	f004 f9f3 	bl	800b49a <shell_fprintf>
		return -EIO;
 80070b4:	f06f 0004 	mvn.w	r0, #4
 80070b8:	e7bf      	b.n	800703a <cmd_i2c_write+0x26>
		buf[i] = (uint8_t)strtol(argv[4 + i], NULL, 16);
 80070ba:	f858 0f04 	ldr.w	r0, [r8, #4]!
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	2210      	movs	r2, #16
 80070c2:	2100      	movs	r1, #0
 80070c4:	f002 fe4a 	bl	8009d5c <strtol>
 80070c8:	9b01      	ldr	r3, [sp, #4]
 80070ca:	f80a 0b01 	strb.w	r0, [sl], #1
 80070ce:	e7d0      	b.n	8007072 <cmd_i2c_write+0x5e>
 80070d0:	0801080e 	.word	0x0801080e
 80070d4:	08010830 	.word	0x08010830

080070d8 <stm32_i2c_configure_timing>:
{
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
	struct i2c_stm32_data *data = DEV_DATA(dev);
	I2C_TypeDef *i2c = cfg->i2c;

	switch (I2C_SPEED_GET(data->dev_config)) {
 80070d8:	6902      	ldr	r2, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 80070da:	6843      	ldr	r3, [r0, #4]
	switch (I2C_SPEED_GET(data->dev_config)) {
 80070dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
	I2C_TypeDef *i2c = cfg->i2c;
 80070de:	68db      	ldr	r3, [r3, #12]
	switch (I2C_SPEED_GET(data->dev_config)) {
 80070e0:	f3c2 0242 	ubfx	r2, r2, #1, #3
 80070e4:	2a01      	cmp	r2, #1
{
 80070e6:	b510      	push	{r4, lr}
	switch (I2C_SPEED_GET(data->dev_config)) {
 80070e8:	d004      	beq.n	80070f4 <stm32_i2c_configure_timing+0x1c>
 80070ea:	2a02      	cmp	r2, #2
 80070ec:	d021      	beq.n	8007132 <stm32_i2c_configure_timing+0x5a>
 80070ee:	f06f 0015 	mvn.w	r0, #21
	default:
		return -EINVAL;
	}

	return 0;
}
 80070f2:	bd10      	pop	{r4, pc}

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80070f4:	6858      	ldr	r0, [r3, #4]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80070f6:	4a23      	ldr	r2, [pc, #140]	; (8007184 <stm32_i2c_configure_timing+0xac>)
 80070f8:	fbb1 f2f2 	udiv	r2, r1, r2
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80070fc:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8007100:	4310      	orrs	r0, r2
 8007102:	6058      	str	r0, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8007104:	6a18      	ldr	r0, [r3, #32]
 8007106:	3201      	adds	r2, #1
 8007108:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800710c:	4302      	orrs	r2, r0
 800710e:	621a      	str	r2, [r3, #32]
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8007110:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <stm32_i2c_configure_timing+0xb0>)
 8007112:	fbb1 f1f2 	udiv	r1, r1, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8007116:	f640 72fc 	movw	r2, #4092	; 0xffc
 800711a:	4211      	tst	r1, r2
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800711c:	69da      	ldr	r2, [r3, #28]
 800711e:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8007122:	bf08      	it	eq
 8007124:	2104      	moveq	r1, #4
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8007126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800712a:	430a      	orrs	r2, r1
 800712c:	61da      	str	r2, [r3, #28]
	return 0;
 800712e:	2000      	movs	r0, #0
}
 8007130:	e7df      	b.n	80070f2 <stm32_i2c_configure_timing+0x1a>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8007132:	6858      	ldr	r0, [r3, #4]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8007134:	4a13      	ldr	r2, [pc, #76]	; (8007184 <stm32_i2c_configure_timing+0xac>)
 8007136:	fbb1 f2f2 	udiv	r2, r1, r2
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800713a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800713e:	4310      	orrs	r0, r2
 8007140:	6058      	str	r0, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8007142:	6a18      	ldr	r0, [r3, #32]
 8007144:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8007148:	4362      	muls	r2, r4
 800714a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800714e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8007152:	fbb2 f2f4 	udiv	r2, r2, r4
 8007156:	3201      	adds	r2, #1
 8007158:	4302      	orrs	r2, r0
 800715a:	621a      	str	r2, [r3, #32]
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800715c:	4a0b      	ldr	r2, [pc, #44]	; (800718c <stm32_i2c_configure_timing+0xb4>)
 800715e:	4291      	cmp	r1, r2
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8007160:	bf84      	itt	hi
 8007162:	3201      	addhi	r2, #1
 8007164:	fbb1 f1f2 	udivhi	r1, r1, r2
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8007168:	69da      	ldr	r2, [r3, #28]
 800716a:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800716e:	bf8c      	ite	hi
 8007170:	f441 4100 	orrhi.w	r1, r1, #32768	; 0x8000
 8007174:	f248 0101 	movwls	r1, #32769	; 0x8001
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8007178:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800717c:	4311      	orrs	r1, r2
 800717e:	61d9      	str	r1, [r3, #28]
 8007180:	e7d5      	b.n	800712e <stm32_i2c_configure_timing+0x56>
 8007182:	bf00      	nop
 8007184:	000f4240 	.word	0x000f4240
 8007188:	00030d40 	.word	0x00030d40
 800718c:	00124f7f 	.word	0x00124f7f

08007190 <i2c_stm32_runtime_configure>:
LOG_MODULE_REGISTER(i2c_ll_stm32);

#include "i2c-priv.h"

int i2c_stm32_runtime_configure(const struct device *dev, uint32_t config)
{
 8007190:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007194:	460f      	mov	r7, r1
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8007196:	6841      	ldr	r1, [r0, #4]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8007198:	f8d0 8010 	ldr.w	r8, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800719c:	68ce      	ldr	r6, [r1, #12]
	uint32_t clock = 0U;
 800719e:	2200      	movs	r2, #0
	 */
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
	clock = rcc_clocks.SYSCLK_Frequency;
#else
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			(clock_control_subsys_t *) &cfg->pclken, &clock) < 0) {
 80071a0:	3104      	adds	r1, #4
{
 80071a2:	4604      	mov	r4, r0
	uint32_t clock = 0U;
 80071a4:	9203      	str	r2, [sp, #12]
			(clock_control_subsys_t *) &cfg->pclken, &clock) < 0) {
 80071a6:	9101      	str	r1, [sp, #4]
 80071a8:	4d1e      	ldr	r5, [pc, #120]	; (8007224 <i2c_stm32_runtime_configure+0x94>)
 80071aa:	4628      	mov	r0, r5
 80071ac:	f005 fd97 	bl	800ccde <z_device_ready>
 80071b0:	9901      	ldr	r1, [sp, #4]
 80071b2:	b978      	cbnz	r0, 80071d4 <i2c_stm32_runtime_configure+0x44>
		LOG_ERR("Failed call clock_control_get_rate");
 80071b4:	491c      	ldr	r1, [pc, #112]	; (8007228 <i2c_stm32_runtime_configure+0x98>)
 80071b6:	680b      	ldr	r3, [r1, #0]
 80071b8:	075b      	lsls	r3, r3, #29
 80071ba:	d008      	beq.n	80071ce <i2c_stm32_runtime_configure+0x3e>
 80071bc:	4b1b      	ldr	r3, [pc, #108]	; (800722c <i2c_stm32_runtime_configure+0x9c>)
 80071be:	481c      	ldr	r0, [pc, #112]	; (8007230 <i2c_stm32_runtime_configure+0xa0>)
 80071c0:	1ac9      	subs	r1, r1, r3
 80071c2:	0889      	lsrs	r1, r1, #2
 80071c4:	0189      	lsls	r1, r1, #6
 80071c6:	f041 0101 	orr.w	r1, r1, #1
 80071ca:	f003 fd1c 	bl	800ac06 <log_0>
		return -EIO;
 80071ce:	f06f 0404 	mvn.w	r4, #4
 80071d2:	e023      	b.n	800721c <i2c_stm32_runtime_configure+0x8c>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80071d4:	68ab      	ldr	r3, [r5, #8]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0eb      	beq.n	80071b4 <i2c_stm32_runtime_configure+0x24>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80071dc:	aa03      	add	r2, sp, #12
 80071de:	4628      	mov	r0, r5
 80071e0:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 80071e2:	2800      	cmp	r0, #0
 80071e4:	dbe6      	blt.n	80071b4 <i2c_stm32_runtime_configure+0x24>
	}

#endif /* CONFIG_SOC_SERIES_STM32F3X) || CONFIG_SOC_SERIES_STM32F0X */

	data->dev_config = config;
 80071e6:	f8c8 7030 	str.w	r7, [r8, #48]	; 0x30

	k_sem_take(&data->bus_mutex, K_FOREVER);
 80071ea:	f108 0818 	add.w	r8, r8, #24
	return z_impl_k_sem_take(sem, timeout);
 80071ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071f6:	4640      	mov	r0, r8
 80071f8:	f001 fbf8 	bl	80089ec <z_impl_k_sem_take>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80071fc:	6833      	ldr	r3, [r6, #0]
	LL_I2C_Disable(i2c);
	LL_I2C_SetMode(i2c, LL_I2C_MODE_I2C);
	ret = stm32_i2c_configure_timing(dev, clock);
 80071fe:	9903      	ldr	r1, [sp, #12]
 8007200:	f023 0301 	bic.w	r3, r3, #1
 8007204:	6033      	str	r3, [r6, #0]
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8007206:	6833      	ldr	r3, [r6, #0]
 8007208:	f023 031a 	bic.w	r3, r3, #26
 800720c:	6033      	str	r3, [r6, #0]
 800720e:	4620      	mov	r0, r4
 8007210:	f7ff ff62 	bl	80070d8 <stm32_i2c_configure_timing>
 8007214:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
 8007216:	4640      	mov	r0, r8
 8007218:	f001 fbc2 	bl	80089a0 <z_impl_k_sem_give>
	k_sem_give(&data->bus_mutex);

	return ret;
}
 800721c:	4620      	mov	r0, r4
 800721e:	b004      	add	sp, #16
 8007220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007224:	200001bc 	.word	0x200001bc
 8007228:	20000340 	.word	0x20000340
 800722c:	2000033c 	.word	0x2000033c
 8007230:	080109e0 	.word	0x080109e0

08007234 <i2c_stm32_init>:
	.slave_unregister = i2c_stm32_slave_unregister,
#endif
};

static int i2c_stm32_init(const struct device *dev)
{
 8007234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct device *clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8007236:	6846      	ldr	r6, [r0, #4]
	uint32_t bitrate_cfg;
	int ret;
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8007238:	6907      	ldr	r7, [r0, #16]
{
 800723a:	4605      	mov	r5, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
 800723c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007240:	2100      	movs	r1, #0
 8007242:	4638      	mov	r0, r7
 8007244:	f005 fe6e 	bl	800cf24 <z_impl_k_sem_init>
#ifdef CONFIG_I2C_STM32_INTERRUPT
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	cfg->irq_config_func(dev);
 8007248:	6833      	ldr	r3, [r6, #0]
 800724a:	4628      	mov	r0, r5
 800724c:	4798      	blx	r3
#endif

	/* Configure dt provided device signals when available */
	ret = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 800724e:	e9d6 0105 	ldrd	r0, r1, [r6, #20]
 8007252:	68f2      	ldr	r2, [r6, #12]
 8007254:	f7fe fcdc 	bl	8005c10 <stm32_dt_pinctrl_configure>
					 cfg->pinctrl_list_size,
					 (uint32_t)cfg->i2c);
	if (ret < 0) {
 8007258:	1e04      	subs	r4, r0, #0
 800725a:	da10      	bge.n	800727e <i2c_stm32_init+0x4a>
		LOG_ERR("I2C pinctrl setup failed (%d)", ret);
 800725c:	4a3c      	ldr	r2, [pc, #240]	; (8007350 <i2c_stm32_init+0x11c>)
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	0759      	lsls	r1, r3, #29
 8007262:	d009      	beq.n	8007278 <i2c_stm32_init+0x44>
 8007264:	4b3b      	ldr	r3, [pc, #236]	; (8007354 <i2c_stm32_init+0x120>)
 8007266:	483c      	ldr	r0, [pc, #240]	; (8007358 <i2c_stm32_init+0x124>)
 8007268:	1ad2      	subs	r2, r2, r3
 800726a:	0892      	lsrs	r2, r2, #2
 800726c:	0192      	lsls	r2, r2, #6
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	4621      	mov	r1, r4
 8007274:	f003 fcd6 	bl	800ac24 <log_1>
		LOG_ERR("i2c: failure initializing");
		return ret;
	}

	return 0;
}
 8007278:	4620      	mov	r0, r4
 800727a:	b003      	add	sp, #12
 800727c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800727e:	2201      	movs	r2, #1
 8007280:	4611      	mov	r1, r2
 8007282:	f107 0018 	add.w	r0, r7, #24
 8007286:	f005 fe4d 	bl	800cf24 <z_impl_k_sem_init>
		(clock_control_subsys_t *) &cfg->pclken) != 0) {
 800728a:	1d31      	adds	r1, r6, #4
 800728c:	9101      	str	r1, [sp, #4]
 800728e:	4c33      	ldr	r4, [pc, #204]	; (800735c <i2c_stm32_init+0x128>)
 8007290:	4620      	mov	r0, r4
 8007292:	f005 fd24 	bl	800ccde <z_device_ready>
 8007296:	9901      	ldr	r1, [sp, #4]
 8007298:	b978      	cbnz	r0, 80072ba <i2c_stm32_init+0x86>
		LOG_ERR("i2c: failure enabling clock");
 800729a:	492d      	ldr	r1, [pc, #180]	; (8007350 <i2c_stm32_init+0x11c>)
 800729c:	680b      	ldr	r3, [r1, #0]
 800729e:	075a      	lsls	r2, r3, #29
 80072a0:	d008      	beq.n	80072b4 <i2c_stm32_init+0x80>
 80072a2:	4b2c      	ldr	r3, [pc, #176]	; (8007354 <i2c_stm32_init+0x120>)
 80072a4:	482e      	ldr	r0, [pc, #184]	; (8007360 <i2c_stm32_init+0x12c>)
 80072a6:	1ac9      	subs	r1, r1, r3
 80072a8:	0889      	lsrs	r1, r1, #2
 80072aa:	0189      	lsls	r1, r1, #6
 80072ac:	f041 0101 	orr.w	r1, r1, #1
 80072b0:	f003 fca9 	bl	800ac06 <log_0>
		return -EIO;
 80072b4:	f06f 0404 	mvn.w	r4, #4
 80072b8:	e7de      	b.n	8007278 <i2c_stm32_init+0x44>
	return api->on(dev, sys);
 80072ba:	68a3      	ldr	r3, [r4, #8]
 80072bc:	4620      	mov	r0, r4
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4798      	blx	r3
	if (clock_control_on(clock,
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d1e9      	bne.n	800729a <i2c_stm32_init+0x66>
	bitrate_cfg = i2c_map_dt_bitrate(cfg->bitrate);
 80072c6:	6933      	ldr	r3, [r6, #16]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
 80072c8:	4a26      	ldr	r2, [pc, #152]	; (8007364 <i2c_stm32_init+0x130>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d035      	beq.n	800733a <i2c_stm32_init+0x106>
 80072ce:	d829      	bhi.n	8007324 <i2c_stm32_init+0xf0>
 80072d0:	4a25      	ldr	r2, [pc, #148]	; (8007368 <i2c_stm32_init+0x134>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d033      	beq.n	800733e <i2c_stm32_init+0x10a>
 80072d6:	4a25      	ldr	r2, [pc, #148]	; (800736c <i2c_stm32_init+0x138>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d032      	beq.n	8007342 <i2c_stm32_init+0x10e>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");
 80072dc:	4b1c      	ldr	r3, [pc, #112]	; (8007350 <i2c_stm32_init+0x11c>)
 80072de:	6819      	ldr	r1, [r3, #0]
 80072e0:	f011 0107 	ands.w	r1, r1, #7
 80072e4:	d009      	beq.n	80072fa <i2c_stm32_init+0xc6>
 80072e6:	491b      	ldr	r1, [pc, #108]	; (8007354 <i2c_stm32_init+0x120>)
 80072e8:	4821      	ldr	r0, [pc, #132]	; (8007370 <i2c_stm32_init+0x13c>)
 80072ea:	1a59      	subs	r1, r3, r1
 80072ec:	0889      	lsrs	r1, r1, #2
 80072ee:	0189      	lsls	r1, r1, #6
 80072f0:	f041 0101 	orr.w	r1, r1, #1
 80072f4:	f003 fc87 	bl	800ac06 <log_0>

	return 0;
 80072f8:	2100      	movs	r1, #0
	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_MASTER | bitrate_cfg);
 80072fa:	f041 0110 	orr.w	r1, r1, #16
 80072fe:	4628      	mov	r0, r5
 8007300:	f7ff ff46 	bl	8007190 <i2c_stm32_runtime_configure>
	if (ret < 0) {
 8007304:	1e04      	subs	r4, r0, #0
 8007306:	da20      	bge.n	800734a <i2c_stm32_init+0x116>
		LOG_ERR("i2c: failure initializing");
 8007308:	4911      	ldr	r1, [pc, #68]	; (8007350 <i2c_stm32_init+0x11c>)
 800730a:	680b      	ldr	r3, [r1, #0]
 800730c:	075b      	lsls	r3, r3, #29
 800730e:	d0b3      	beq.n	8007278 <i2c_stm32_init+0x44>
 8007310:	4b10      	ldr	r3, [pc, #64]	; (8007354 <i2c_stm32_init+0x120>)
 8007312:	4818      	ldr	r0, [pc, #96]	; (8007374 <i2c_stm32_init+0x140>)
 8007314:	1ac9      	subs	r1, r1, r3
 8007316:	0889      	lsrs	r1, r1, #2
 8007318:	0189      	lsls	r1, r1, #6
 800731a:	f041 0101 	orr.w	r1, r1, #1
 800731e:	f003 fc72 	bl	800ac06 <log_0>
 8007322:	e7a9      	b.n	8007278 <i2c_stm32_init+0x44>
	switch (bitrate) {
 8007324:	4a14      	ldr	r2, [pc, #80]	; (8007378 <i2c_stm32_init+0x144>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00d      	beq.n	8007346 <i2c_stm32_init+0x112>
 800732a:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 800732e:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 8007332:	4293      	cmp	r3, r2
 8007334:	d1d2      	bne.n	80072dc <i2c_stm32_init+0xa8>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 8007336:	210a      	movs	r1, #10
 8007338:	e7df      	b.n	80072fa <i2c_stm32_init+0xc6>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 800733a:	2106      	movs	r1, #6
 800733c:	e7dd      	b.n	80072fa <i2c_stm32_init+0xc6>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 800733e:	2102      	movs	r1, #2
 8007340:	e7db      	b.n	80072fa <i2c_stm32_init+0xc6>
	switch (bitrate) {
 8007342:	2104      	movs	r1, #4
 8007344:	e7d9      	b.n	80072fa <i2c_stm32_init+0xc6>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 8007346:	2108      	movs	r1, #8
 8007348:	e7d7      	b.n	80072fa <i2c_stm32_init+0xc6>
	return 0;
 800734a:	2400      	movs	r4, #0
 800734c:	e794      	b.n	8007278 <i2c_stm32_init+0x44>
 800734e:	bf00      	nop
 8007350:	20000340 	.word	0x20000340
 8007354:	2000033c 	.word	0x2000033c
 8007358:	08010a03 	.word	0x08010a03
 800735c:	200001bc 	.word	0x200001bc
 8007360:	08010a21 	.word	0x08010a21
 8007364:	000f4240 	.word	0x000f4240
 8007368:	000186a0 	.word	0x000186a0
 800736c:	00061a80 	.word	0x00061a80
 8007370:	08010a3d 	.word	0x08010a3d
 8007374:	08010a58 	.word	0x08010a58
 8007378:	0033e140 	.word	0x0033e140

0800737c <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 800737c:	b570      	push	{r4, r5, r6, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 800737e:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8007380:	6844      	ldr	r4, [r0, #4]
 8007382:	4d1c      	ldr	r5, [pc, #112]	; (80073f4 <spi_stm32_init+0x78>)
 8007384:	4628      	mov	r0, r5
 8007386:	f005 fcaa 	bl	800ccde <z_device_ready>
 800738a:	b978      	cbnz	r0, 80073ac <spi_stm32_init+0x30>
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken) != 0) {
		LOG_ERR("Could not enable SPI clock");
 800738c:	491a      	ldr	r1, [pc, #104]	; (80073f8 <spi_stm32_init+0x7c>)
 800738e:	680b      	ldr	r3, [r1, #0]
 8007390:	075a      	lsls	r2, r3, #29
 8007392:	d008      	beq.n	80073a6 <spi_stm32_init+0x2a>
 8007394:	4b19      	ldr	r3, [pc, #100]	; (80073fc <spi_stm32_init+0x80>)
 8007396:	481a      	ldr	r0, [pc, #104]	; (8007400 <spi_stm32_init+0x84>)
 8007398:	1ac9      	subs	r1, r1, r3
 800739a:	0889      	lsrs	r1, r1, #2
 800739c:	0189      	lsls	r1, r1, #6
 800739e:	f041 0101 	orr.w	r1, r1, #1
 80073a2:	f003 fc30 	bl	800ac06 <log_0>
		return -EIO;
 80073a6:	f06f 0404 	mvn.w	r4, #4
 80073aa:	e01c      	b.n	80073e6 <spi_stm32_init+0x6a>
 80073ac:	68ab      	ldr	r3, [r5, #8]
 80073ae:	4628      	mov	r0, r5
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4621      	mov	r1, r4
 80073b4:	4798      	blx	r3
	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 80073b6:	4605      	mov	r5, r0
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d1e7      	bne.n	800738c <spi_stm32_init+0x10>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 80073bc:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80073c0:	68a2      	ldr	r2, [r4, #8]
 80073c2:	f7fe fc25 	bl	8005c10 <stm32_dt_pinctrl_configure>
					 cfg->pinctrl_list_size,
					 (uint32_t)cfg->spi);
	if (err < 0) {
 80073c6:	1e04      	subs	r4, r0, #0
 80073c8:	da0f      	bge.n	80073ea <spi_stm32_init+0x6e>
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
 80073ca:	4a0b      	ldr	r2, [pc, #44]	; (80073f8 <spi_stm32_init+0x7c>)
 80073cc:	6813      	ldr	r3, [r2, #0]
 80073ce:	075b      	lsls	r3, r3, #29
 80073d0:	d009      	beq.n	80073e6 <spi_stm32_init+0x6a>
 80073d2:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <spi_stm32_init+0x80>)
 80073d4:	480b      	ldr	r0, [pc, #44]	; (8007404 <spi_stm32_init+0x88>)
 80073d6:	1ad2      	subs	r2, r2, r3
 80073d8:	0892      	lsrs	r2, r2, #2
 80073da:	0192      	lsls	r2, r2, #6
 80073dc:	f042 0201 	orr.w	r2, r2, #1
 80073e0:	4621      	mov	r1, r4
 80073e2:	f003 fc1f 	bl	800ac24 <log_1>
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 80073e6:	4620      	mov	r0, r4
 80073e8:	bd70      	pop	{r4, r5, r6, pc}
	spi_context_unlock_unconditionally(&data->ctx);
 80073ea:	4630      	mov	r0, r6
 80073ec:	f005 fb44 	bl	800ca78 <spi_context_unlock_unconditionally>
	return 0;
 80073f0:	462c      	mov	r4, r5
 80073f2:	e7f8      	b.n	80073e6 <spi_stm32_init+0x6a>
 80073f4:	200001bc 	.word	0x200001bc
 80073f8:	20000360 	.word	0x20000360
 80073fc:	2000033c 	.word	0x2000033c
 8007400:	08010a8b 	.word	0x08010a8b
 8007404:	08010aa6 	.word	0x08010aa6

08007408 <spi_stm32_transceive>:
{
 8007408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	461f      	mov	r7, r3
	SPI_TypeDef *spi = cfg->spi;
 800740e:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 8007410:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8007412:	689e      	ldr	r6, [r3, #8]
{
 8007414:	b08f      	sub	sp, #60	; 0x3c
 8007416:	4605      	mov	r5, r0
 8007418:	4688      	mov	r8, r1
	if (!tx_bufs && !rx_bufs) {
 800741a:	4691      	mov	r9, r2
 800741c:	b90a      	cbnz	r2, 8007422 <spi_stm32_transceive+0x1a>
 800741e:	2f00      	cmp	r7, #0
 8007420:	d040      	beq.n	80074a4 <spi_stm32_transceive+0x9c>
static inline void spi_context_lock(struct spi_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal,
				    const struct spi_config *spi_cfg)
{
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8007422:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007426:	045b      	lsls	r3, r3, #17
 8007428:	d440      	bmi.n	80074ac <spi_stm32_transceive+0xa4>
	return z_impl_k_sem_take(sem, timeout);
 800742a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800742e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007432:	f104 0008 	add.w	r0, r4, #8
 8007436:	f001 fad9 	bl	80089ec <z_impl_k_sem_take>
		(ctx->owner == spi_cfg)) {
			return;
	}

	k_sem_take(&ctx->lock, K_FOREVER);
	ctx->owner = spi_cfg;
 800743a:	f8c4 8004 	str.w	r8, [r4, #4]
	const uint32_t scaler[] = {
 800743e:	f8df c13c 	ldr.w	ip, [pc, #316]	; 800757c <spi_stm32_transceive+0x174>
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8007442:	686b      	ldr	r3, [r5, #4]
 8007444:	9303      	str	r3, [sp, #12]
	const uint32_t scaler[] = {
 8007446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	struct spi_stm32_data *data = DEV_DATA(dev);
 800744a:	f8d5 b010 	ldr.w	fp, [r5, #16]
	const uint32_t scaler[] = {
 800744e:	ad06      	add	r5, sp, #24
 8007450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007452:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8007456:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 800745a:	f8db 3000 	ldr.w	r3, [fp]
 800745e:	4598      	cmp	r8, r3
 8007460:	f000 80d4 	beq.w	800760c <spi_stm32_transceive+0x204>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8007464:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007468:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800746c:	2b08      	cmp	r3, #8
 800746e:	d002      	beq.n	8007476 <spi_stm32_transceive+0x6e>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8007470:	2b10      	cmp	r3, #16
 8007472:	f040 8173 	bne.w	800775c <spi_stm32_transceive+0x354>
	SPI_TypeDef *spi = cfg->spi;
 8007476:	9b03      	ldr	r3, [sp, #12]
 8007478:	689d      	ldr	r5, [r3, #8]
 800747a:	f8df a104 	ldr.w	sl, [pc, #260]	; 8007580 <spi_stm32_transceive+0x178>
 800747e:	4650      	mov	r0, sl
 8007480:	f005 fc2d 	bl	800ccde <z_device_ready>
 8007484:	b9c8      	cbnz	r0, 80074ba <spi_stm32_transceive+0xb2>
		LOG_ERR("Failed call clock_control_get_rate");
 8007486:	4939      	ldr	r1, [pc, #228]	; (800756c <spi_stm32_transceive+0x164>)
 8007488:	680b      	ldr	r3, [r1, #0]
 800748a:	075c      	lsls	r4, r3, #29
 800748c:	d008      	beq.n	80074a0 <spi_stm32_transceive+0x98>
 800748e:	4b38      	ldr	r3, [pc, #224]	; (8007570 <spi_stm32_transceive+0x168>)
 8007490:	4838      	ldr	r0, [pc, #224]	; (8007574 <spi_stm32_transceive+0x16c>)
 8007492:	1ac9      	subs	r1, r1, r3
 8007494:	0889      	lsrs	r1, r1, #2
 8007496:	0189      	lsls	r1, r1, #6
 8007498:	f041 0101 	orr.w	r1, r1, #1
 800749c:	f003 fbb3 	bl	800ac06 <log_0>
		return -EIO;
 80074a0:	f06f 0704 	mvn.w	r7, #4
}
 80074a4:	4638      	mov	r0, r7
 80074a6:	b00f      	add	sp, #60	; 0x3c
 80074a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1bb      	bne.n	800742a <spi_stm32_transceive+0x22>
		(k_sem_count_get(&ctx->lock) == 0) &&
 80074b2:	6863      	ldr	r3, [r4, #4]
 80074b4:	4598      	cmp	r8, r3
 80074b6:	d1b8      	bne.n	800742a <spi_stm32_transceive+0x22>
 80074b8:	e7c1      	b.n	800743e <spi_stm32_transceive+0x36>
	if (api->get_rate == NULL) {
 80074ba:	f8da 3008 	ldr.w	r3, [sl, #8]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0e0      	beq.n	8007486 <spi_stm32_transceive+0x7e>
	return api->get_rate(dev, sys, rate);
 80074c4:	9903      	ldr	r1, [sp, #12]
 80074c6:	aa05      	add	r2, sp, #20
 80074c8:	4650      	mov	r0, sl
 80074ca:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 80074cc:	2800      	cmp	r0, #0
 80074ce:	dbda      	blt.n	8007486 <spi_stm32_transceive+0x7e>
		uint32_t clk = clock >> br;
 80074d0:	9a05      	ldr	r2, [sp, #20]
		if (clk <= config->frequency) {
 80074d2:	f8d8 1000 	ldr.w	r1, [r8]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80074d6:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 80074d8:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 80074dc:	4288      	cmp	r0, r1
 80074de:	f240 8215 	bls.w	800790c <spi_stm32_transceive+0x504>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80074e2:	3301      	adds	r3, #1
 80074e4:	2b09      	cmp	r3, #9
 80074e6:	d1f7      	bne.n	80074d8 <spi_stm32_transceive+0xd0>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 80074e8:	4b20      	ldr	r3, [pc, #128]	; (800756c <spi_stm32_transceive+0x164>)
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	0740      	lsls	r0, r0, #29
 80074ee:	d00c      	beq.n	800750a <spi_stm32_transceive+0x102>
 80074f0:	481f      	ldr	r0, [pc, #124]	; (8007570 <spi_stm32_transceive+0x168>)
 80074f2:	1a1b      	subs	r3, r3, r0
 80074f4:	089b      	lsrs	r3, r3, #2
 80074f6:	019b      	lsls	r3, r3, #6
 80074f8:	f043 0301 	orr.w	r3, r3, #1
 80074fc:	f8ad 3000 	strh.w	r3, [sp]
 8007500:	481d      	ldr	r0, [pc, #116]	; (8007578 <spi_stm32_transceive+0x170>)
 8007502:	0a13      	lsrs	r3, r2, #8
 8007504:	0852      	lsrs	r2, r2, #1
 8007506:	f003 fbbd 	bl	800ac84 <log_3>
		return -EINVAL;
 800750a:	f06f 0715 	mvn.w	r7, #21
 800750e:	e7c9      	b.n	80074a4 <spi_stm32_transceive+0x9c>
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8007510:	682a      	ldr	r2, [r5, #0]
 8007512:	f042 0202 	orr.w	r2, r2, #2
 8007516:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8007518:	682a      	ldr	r2, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 800751a:	0758      	lsls	r0, r3, #29
 800751c:	bf4c      	ite	mi
 800751e:	f042 0201 	orrmi.w	r2, r2, #1
 8007522:	f022 0201 	bicpl.w	r2, r2, #1
 8007526:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8007528:	682a      	ldr	r2, [r5, #0]
 800752a:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 800752e:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8007530:	682a      	ldr	r2, [r5, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8007532:	06d9      	lsls	r1, r3, #27
 8007534:	bf4c      	ite	mi
 8007536:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 800753a:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 800753e:	602a      	str	r2, [r5, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8007540:	682a      	ldr	r2, [r5, #0]
 8007542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007546:	602a      	str	r2, [r5, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8007548:	f8d8 2008 	ldr.w	r2, [r8, #8]
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800754c:	6829      	ldr	r1, [r5, #0]
 800754e:	f003 0001 	and.w	r0, r3, #1
 8007552:	b1ba      	cbz	r2, 8007584 <spi_stm32_transceive+0x17c>
 8007554:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007558:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800755a:	6869      	ldr	r1, [r5, #4]
 800755c:	f021 0104 	bic.w	r1, r1, #4
 8007560:	6069      	str	r1, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8007562:	b9c8      	cbnz	r0, 8007598 <spi_stm32_transceive+0x190>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8007564:	6829      	ldr	r1, [r5, #0]
 8007566:	f441 7182 	orr.w	r1, r1, #260	; 0x104
 800756a:	e018      	b.n	800759e <spi_stm32_transceive+0x196>
 800756c:	20000360 	.word	0x20000360
 8007570:	2000033c 	.word	0x2000033c
 8007574:	080109e0 	.word	0x080109e0
 8007578:	08010ac4 	.word	0x08010ac4
 800757c:	0800df6c 	.word	0x0800df6c
 8007580:	200001bc 	.word	0x200001bc
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8007584:	f421 7100 	bic.w	r1, r1, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8007588:	2800      	cmp	r0, #0
 800758a:	f000 80ce 	beq.w	800772a <spi_stm32_transceive+0x322>
 800758e:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8007590:	6869      	ldr	r1, [r5, #4]
 8007592:	f021 0104 	bic.w	r1, r1, #4
 8007596:	6069      	str	r1, [r5, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8007598:	6829      	ldr	r1, [r5, #0]
 800759a:	f421 7182 	bic.w	r1, r1, #260	; 0x104
 800759e:	6029      	str	r1, [r5, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 80075a0:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80075a4:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 80075a6:	682b      	ldr	r3, [r5, #0]
 80075a8:	bf0c      	ite	eq
 80075aa:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 80075ae:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 80075b2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80075b4:	686b      	ldr	r3, [r5, #4]
 80075b6:	f023 0310 	bic.w	r3, r3, #16
 80075ba:	606b      	str	r3, [r5, #4]
	data->ctx.config = config;
 80075bc:	f8cb 8000 	str.w	r8, [fp]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 80075c0:	2a00      	cmp	r2, #0
 80075c2:	f000 80ba 	beq.w	800773a <spi_stm32_transceive+0x332>
 80075c6:	6810      	ldr	r0, [r2, #0]
 80075c8:	2800      	cmp	r0, #0
 80075ca:	f000 80b6 	beq.w	800773a <spi_stm32_transceive+0x332>
		/* Validate CS active levels are equivalent */
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 80075ce:	7a11      	ldrb	r1, [r2, #8]
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 80075d0:	7a53      	ldrb	r3, [r2, #9]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 80075d2:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
 80075d6:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80075da:	f8de 5000 	ldr.w	r5, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80075de:	07da      	lsls	r2, r3, #31
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 80075e0:	bf54      	ite	pl
 80075e2:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80075e6:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80075ea:	f04f 0c01 	mov.w	ip, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80075ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80075f2:	fa0c fc01 	lsl.w	ip, ip, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80075f6:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80075f8:	bf4c      	ite	mi
 80075fa:	ea45 050c 	orrmi.w	r5, r5, ip
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80075fe:	ea25 050c 	bicpl.w	r5, r5, ip
	}

	return api->pin_configure(port, pin, flags);
 8007602:	f8d8 3000 	ldr.w	r3, [r8]
 8007606:	f8ce 5000 	str.w	r5, [lr]
 800760a:	4798      	blx	r3
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	if (tx_bufs) {
 800760c:	f1b9 0f00 	cmp.w	r9, #0
 8007610:	f000 80a7 	beq.w	8007762 <spi_stm32_transceive+0x35a>
		ctx->current_tx = tx_bufs->buffers;
 8007614:	f8d9 3000 	ldr.w	r3, [r9]
		ctx->tx_count = tx_bufs->count;
 8007618:	f8d9 2004 	ldr.w	r2, [r9, #4]
		ctx->current_tx = tx_bufs->buffers;
 800761c:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
 800761e:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8007620:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
 8007622:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8007624:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
 8007626:	6523      	str	r3, [r4, #80]	; 0x50
		ctx->tx_count = 0;
		ctx->tx_buf = NULL;
		ctx->tx_len = 0;
	}

	if (rx_bufs) {
 8007628:	2f00      	cmp	r7, #0
 800762a:	f000 809f 	beq.w	800776c <spi_stm32_transceive+0x364>
		ctx->current_rx = rx_bufs->buffers;
 800762e:	683b      	ldr	r3, [r7, #0]
		ctx->rx_count = rx_bufs->count;
 8007630:	687a      	ldr	r2, [r7, #4]
		ctx->current_rx = rx_bufs->buffers;
 8007632:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
 8007634:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8007636:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
 8007638:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800763a:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
 800763c:	65a3      	str	r3, [r4, #88]	; 0x58
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800763e:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = 0;
		ctx->rx_buf = NULL;
		ctx->rx_len = 0;
	}

	ctx->sync_status = 0;
 8007640:	2200      	movs	r2, #0
 8007642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007646:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
 8007648:	2101      	movs	r1, #1
 800764a:	6033      	str	r3, [r6, #0]
 800764c:	4620      	mov	r0, r4
 800764e:	f005 f9ee 	bl	800ca2e <_spi_context_cs_control>
	uint16_t operation = data->ctx.config->operation;
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8007656:	f013 0101 	ands.w	r1, r3, #1
 800765a:	f040 80c8 	bne.w	80077ee <spi_stm32_transceive+0x3e6>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800765e:	68b2      	ldr	r2, [r6, #8]
 8007660:	0790      	lsls	r0, r2, #30
 8007662:	d5fc      	bpl.n	800765e <spi_stm32_transceive+0x256>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8007664:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8007668:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800766a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800766c:	f040 8089 	bne.w	8007782 <spi_stm32_transceive+0x37a>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 8007670:	b112      	cbz	r2, 8007678 <spi_stm32_transceive+0x270>
 8007672:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007674:	b103      	cbz	r3, 8007678 <spi_stm32_transceive+0x270>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8007676:	7811      	ldrb	r1, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8007678:	b2c9      	uxtb	r1, r1
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 800767a:	7331      	strb	r1, [r6, #12]
	if (!ctx->tx_len) {
 800767c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800767e:	b183      	cbz	r3, 80076a2 <spi_stm32_transceive+0x29a>
	ctx->tx_len -= len;
 8007680:	3b01      	subs	r3, #1
 8007682:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->tx_len) {
 8007684:	2b00      	cmp	r3, #0
 8007686:	d176      	bne.n	8007776 <spi_stm32_transceive+0x36e>
		ctx->tx_count--;
 8007688:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800768a:	3b01      	subs	r3, #1
 800768c:	6423      	str	r3, [r4, #64]	; 0x40
		if (ctx->tx_count) {
 800768e:	2b00      	cmp	r3, #0
 8007690:	d075      	beq.n	800777e <spi_stm32_transceive+0x376>
			ctx->current_tx++;
 8007692:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007694:	f103 0208 	add.w	r2, r3, #8
 8007698:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800769a:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 800769c:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800769e:	64e2      	str	r2, [r4, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 80076a0:	6523      	str	r3, [r4, #80]	; 0x50
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80076a2:	68b3      	ldr	r3, [r6, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 80076a4:	07d9      	lsls	r1, r3, #31
 80076a6:	d5fc      	bpl.n	80076a2 <spi_stm32_transceive+0x29a>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	8892      	ldrh	r2, [r2, #4]
 80076ac:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80076b0:	2a08      	cmp	r2, #8
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 80076b2:	e9d4 3115 	ldrd	r3, r1, [r4, #84]	; 0x54
  return (uint8_t)(READ_REG(SPIx->DR));
 80076b6:	68f2      	ldr	r2, [r6, #12]
 80076b8:	f040 8081 	bne.w	80077be <spi_stm32_transceive+0x3b6>
 80076bc:	b10b      	cbz	r3, 80076c2 <spi_stm32_transceive+0x2ba>
 80076be:	b101      	cbz	r1, 80076c2 <spi_stm32_transceive+0x2ba>
 80076c0:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 80076c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076c4:	b193      	cbz	r3, 80076ec <spi_stm32_transceive+0x2e4>
	ctx->rx_len -= len;
 80076c6:	3b01      	subs	r3, #1
 80076c8:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f040 80e1 	bne.w	8007892 <spi_stm32_transceive+0x48a>
		ctx->rx_count--;
 80076d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80076d2:	3b01      	subs	r3, #1
 80076d4:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 80e0 	beq.w	800789c <spi_stm32_transceive+0x494>
			ctx->current_rx++;
 80076dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80076de:	f103 0208 	add.w	r2, r3, #8
 80076e2:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 80076e4:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 80076e6:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 80076e8:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 80076ea:	65a3      	str	r3, [r4, #88]	; 0x58
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 80076ec:	68b2      	ldr	r2, [r6, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 80076ee:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
 80076f2:	f000 80db 	beq.w	80078ac <spi_stm32_transceive+0x4a4>
		LOG_ERR("%s: err=%d", __func__,
 80076f6:	4b91      	ldr	r3, [pc, #580]	; (800793c <spi_stm32_transceive+0x534>)
 80076f8:	6819      	ldr	r1, [r3, #0]
 80076fa:	074f      	lsls	r7, r1, #29
 80076fc:	d009      	beq.n	8007712 <spi_stm32_transceive+0x30a>
 80076fe:	4990      	ldr	r1, [pc, #576]	; (8007940 <spi_stm32_transceive+0x538>)
 8007700:	4890      	ldr	r0, [pc, #576]	; (8007944 <spi_stm32_transceive+0x53c>)
 8007702:	1a5b      	subs	r3, r3, r1
 8007704:	089b      	lsrs	r3, r3, #2
 8007706:	019b      	lsls	r3, r3, #6
 8007708:	498f      	ldr	r1, [pc, #572]	; (8007948 <spi_stm32_transceive+0x540>)
 800770a:	f043 0301 	orr.w	r3, r3, #1
 800770e:	f003 faa0 	bl	800ac52 <log_2>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8007712:	68b3      	ldr	r3, [r6, #8]
 8007714:	065d      	lsls	r5, r3, #25
 8007716:	d505      	bpl.n	8007724 <spi_stm32_transceive+0x31c>
  tmpreg = SPIx->DR;
 8007718:	68f3      	ldr	r3, [r6, #12]
 800771a:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 800771c:	9b05      	ldr	r3, [sp, #20]
  tmpreg = SPIx->SR;
 800771e:	68b3      	ldr	r3, [r6, #8]
 8007720:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 8007722:	9b05      	ldr	r3, [sp, #20]
		return -EIO;
 8007724:	f06f 0704 	mvn.w	r7, #4
 8007728:	e0c8      	b.n	80078bc <spi_stm32_transceive+0x4b4>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800772a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 800772e:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8007730:	6869      	ldr	r1, [r5, #4]
 8007732:	f041 0104 	orr.w	r1, r1, #4
 8007736:	6069      	str	r1, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8007738:	e714      	b.n	8007564 <spi_stm32_transceive+0x15c>
		LOG_INF("CS control inhibited (no GPIO device)");
 800773a:	4980      	ldr	r1, [pc, #512]	; (800793c <spi_stm32_transceive+0x534>)
 800773c:	680b      	ldr	r3, [r1, #0]
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	2b02      	cmp	r3, #2
 8007744:	f67f af62 	bls.w	800760c <spi_stm32_transceive+0x204>
 8007748:	4b7d      	ldr	r3, [pc, #500]	; (8007940 <spi_stm32_transceive+0x538>)
 800774a:	4880      	ldr	r0, [pc, #512]	; (800794c <spi_stm32_transceive+0x544>)
 800774c:	1ac9      	subs	r1, r1, r3
 800774e:	0889      	lsrs	r1, r1, #2
 8007750:	0189      	lsls	r1, r1, #6
 8007752:	f041 0103 	orr.w	r1, r1, #3
 8007756:	f003 fa56 	bl	800ac06 <log_0>
	if (ret) {
 800775a:	e757      	b.n	800760c <spi_stm32_transceive+0x204>
		return -ENOTSUP;
 800775c:	f06f 0785 	mvn.w	r7, #133	; 0x85
 8007760:	e6a0      	b.n	80074a4 <spi_stm32_transceive+0x9c>
		ctx->tx_count = 0;
 8007762:	e9c4 990f 	strd	r9, r9, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
 8007766:	e9c4 9913 	strd	r9, r9, [r4, #76]	; 0x4c
 800776a:	e75d      	b.n	8007628 <spi_stm32_transceive+0x220>
		ctx->rx_count = 0;
 800776c:	e9c4 7711 	strd	r7, r7, [r4, #68]	; 0x44
		ctx->rx_len = 0;
 8007770:	e9c4 7715 	strd	r7, r7, [r4, #84]	; 0x54
 8007774:	e763      	b.n	800763e <spi_stm32_transceive+0x236>
	} else if (ctx->tx_buf) {
 8007776:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007778:	2b00      	cmp	r3, #0
 800777a:	d092      	beq.n	80076a2 <spi_stm32_transceive+0x29a>
		ctx->tx_buf += dfs * len;
 800777c:	3301      	adds	r3, #1
			ctx->tx_buf = NULL;
 800777e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007780:	e78f      	b.n	80076a2 <spi_stm32_transceive+0x29a>
	return !!(ctx->tx_len);
 8007782:	6d23      	ldr	r3, [r4, #80]	; 0x50
	return !!(ctx->tx_buf && ctx->tx_len);
 8007784:	b10a      	cbz	r2, 800778a <spi_stm32_transceive+0x382>
 8007786:	b103      	cbz	r3, 800778a <spi_stm32_transceive+0x382>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8007788:	8811      	ldrh	r1, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800778a:	81b1      	strh	r1, [r6, #12]
	if (!ctx->tx_len) {
 800778c:	2b00      	cmp	r3, #0
 800778e:	d088      	beq.n	80076a2 <spi_stm32_transceive+0x29a>
	ctx->tx_len -= len;
 8007790:	3b01      	subs	r3, #1
 8007792:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->tx_len) {
 8007794:	b96b      	cbnz	r3, 80077b2 <spi_stm32_transceive+0x3aa>
		ctx->tx_count--;
 8007796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007798:	3b01      	subs	r3, #1
 800779a:	6423      	str	r3, [r4, #64]	; 0x40
		if (ctx->tx_count) {
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0ee      	beq.n	800777e <spi_stm32_transceive+0x376>
			ctx->current_tx++;
 80077a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80077a2:	f103 0208 	add.w	r2, r3, #8
 80077a6:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 80077a8:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 80077aa:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 80077ac:	64e2      	str	r2, [r4, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	e776      	b.n	80076a0 <spi_stm32_transceive+0x298>
	} else if (ctx->tx_buf) {
 80077b2:	2a00      	cmp	r2, #0
 80077b4:	f43f af75 	beq.w	80076a2 <spi_stm32_transceive+0x29a>
		ctx->tx_buf += dfs * len;
 80077b8:	3202      	adds	r2, #2
 80077ba:	64e2      	str	r2, [r4, #76]	; 0x4c
 80077bc:	e771      	b.n	80076a2 <spi_stm32_transceive+0x29a>
	return !!(ctx->rx_buf && ctx->rx_len);
 80077be:	b10b      	cbz	r3, 80077c4 <spi_stm32_transceive+0x3bc>
 80077c0:	b101      	cbz	r1, 80077c4 <spi_stm32_transceive+0x3bc>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 80077c2:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 80077c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d090      	beq.n	80076ec <spi_stm32_transceive+0x2e4>
	ctx->rx_len -= len;
 80077ca:	3b01      	subs	r3, #1
 80077cc:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d166      	bne.n	80078a0 <spi_stm32_transceive+0x498>
		ctx->rx_count--;
 80077d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80077d4:	3b01      	subs	r3, #1
 80077d6:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d05f      	beq.n	800789c <spi_stm32_transceive+0x494>
			ctx->current_rx++;
 80077dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80077de:	f103 0208 	add.w	r2, r3, #8
 80077e2:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 80077e4:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 80077e6:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 80077e8:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	e77d      	b.n	80076ea <spi_stm32_transceive+0x2e2>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80077ee:	68b2      	ldr	r2, [r6, #8]
 80077f0:	0792      	lsls	r2, r2, #30
 80077f2:	d549      	bpl.n	8007888 <spi_stm32_transceive+0x480>
	return !!(ctx->tx_len);
 80077f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 80077f6:	2900      	cmp	r1, #0
 80077f8:	d046      	beq.n	8007888 <spi_stm32_transceive+0x480>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80077fa:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80077fe:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8007800:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8007802:	d12b      	bne.n	800785c <spi_stm32_transceive+0x454>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8007804:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 8007806:	7333      	strb	r3, [r6, #12]
	if (!ctx->tx_len) {
 8007808:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800780a:	b19b      	cbz	r3, 8007834 <spi_stm32_transceive+0x42c>
	ctx->tx_len -= len;
 800780c:	3b01      	subs	r3, #1
 800780e:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->tx_len) {
 8007810:	b963      	cbnz	r3, 800782c <spi_stm32_transceive+0x424>
		ctx->tx_count--;
 8007812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007814:	3b01      	subs	r3, #1
 8007816:	6423      	str	r3, [r4, #64]	; 0x40
		if (ctx->tx_count) {
 8007818:	b15b      	cbz	r3, 8007832 <spi_stm32_transceive+0x42a>
			ctx->current_tx++;
 800781a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800781c:	f103 0208 	add.w	r2, r3, #8
 8007820:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8007822:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8007824:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8007826:	64e2      	str	r2, [r4, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8007828:	6523      	str	r3, [r4, #80]	; 0x50
 800782a:	e003      	b.n	8007834 <spi_stm32_transceive+0x42c>
	} else if (ctx->tx_buf) {
 800782c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800782e:	b10b      	cbz	r3, 8007834 <spi_stm32_transceive+0x42c>
		ctx->tx_buf += dfs * len;
 8007830:	3301      	adds	r3, #1
 8007832:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8007834:	68b3      	ldr	r3, [r6, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 8007836:	07db      	lsls	r3, r3, #31
 8007838:	f57f af58 	bpl.w	80076ec <spi_stm32_transceive+0x2e4>
	return !!(ctx->rx_buf && ctx->rx_len);
 800783c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800783e:	2b00      	cmp	r3, #0
 8007840:	f43f af54 	beq.w	80076ec <spi_stm32_transceive+0x2e4>
 8007844:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007846:	2a00      	cmp	r2, #0
 8007848:	f43f af50 	beq.w	80076ec <spi_stm32_transceive+0x2e4>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800784c:	6822      	ldr	r2, [r4, #0]
 800784e:	8892      	ldrh	r2, [r2, #4]
 8007850:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8007854:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 8007856:	68f2      	ldr	r2, [r6, #12]
 8007858:	d1b3      	bne.n	80077c2 <spi_stm32_transceive+0x3ba>
 800785a:	e731      	b.n	80076c0 <spi_stm32_transceive+0x2b8>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800785c:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 800785e:	81b3      	strh	r3, [r6, #12]
	ctx->tx_len -= len;
 8007860:	3901      	subs	r1, #1
 8007862:	6521      	str	r1, [r4, #80]	; 0x50
	if (!ctx->tx_len) {
 8007864:	b969      	cbnz	r1, 8007882 <spi_stm32_transceive+0x47a>
		ctx->tx_count--;
 8007866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007868:	3b01      	subs	r3, #1
 800786a:	6423      	str	r3, [r4, #64]	; 0x40
		if (ctx->tx_count) {
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0e0      	beq.n	8007832 <spi_stm32_transceive+0x42a>
			ctx->current_tx++;
 8007870:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007872:	f103 0208 	add.w	r2, r3, #8
 8007876:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8007878:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 800787a:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800787c:	64e2      	str	r2, [r4, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	e7d2      	b.n	8007828 <spi_stm32_transceive+0x420>
		ctx->tx_buf += dfs * len;
 8007882:	3202      	adds	r2, #2
 8007884:	64e2      	str	r2, [r4, #76]	; 0x4c
 8007886:	e7d5      	b.n	8007834 <spi_stm32_transceive+0x42c>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8007888:	6873      	ldr	r3, [r6, #4]
 800788a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800788e:	6073      	str	r3, [r6, #4]
    defined(CONFIG_SOC_SERIES_STM32H7X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 8007890:	e7d0      	b.n	8007834 <spi_stm32_transceive+0x42c>
	} else if (ctx->rx_buf) {
 8007892:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007894:	2b00      	cmp	r3, #0
 8007896:	f43f af29 	beq.w	80076ec <spi_stm32_transceive+0x2e4>
		ctx->rx_buf += dfs * len;
 800789a:	3301      	adds	r3, #1
 800789c:	6563      	str	r3, [r4, #84]	; 0x54
 800789e:	e725      	b.n	80076ec <spi_stm32_transceive+0x2e4>
	} else if (ctx->rx_buf) {
 80078a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f43f af22 	beq.w	80076ec <spi_stm32_transceive+0x2e4>
		ctx->rx_buf += dfs * len;
 80078a8:	3302      	adds	r3, #2
 80078aa:	e7f7      	b.n	800789c <spi_stm32_transceive+0x494>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 80078ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f47f aecf 	bne.w	8007652 <spi_stm32_transceive+0x24a>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 80078b4:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80078b6:	2f00      	cmp	r7, #0
 80078b8:	f47f aecb 	bne.w	8007652 <spi_stm32_transceive+0x24a>
	_spi_context_cs_control(ctx, on, false);
 80078bc:	2200      	movs	r2, #0
 80078be:	4611      	mov	r1, r2
 80078c0:	4620      	mov	r0, r4
 80078c2:	f005 f8b4 	bl	800ca2e <_spi_context_cs_control>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 80078c6:	6833      	ldr	r3, [r6, #0]
 80078c8:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 80078cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078d0:	d102      	bne.n	80078d8 <spi_stm32_transceive+0x4d0>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80078d2:	68b3      	ldr	r3, [r6, #8]
 80078d4:	0618      	lsls	r0, r3, #24
 80078d6:	d4fc      	bmi.n	80078d2 <spi_stm32_transceive+0x4ca>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 80078d8:	68b3      	ldr	r3, [r6, #8]
 80078da:	0699      	lsls	r1, r3, #26
 80078dc:	d506      	bpl.n	80078ec <spi_stm32_transceive+0x4e4>
  tmpreg_sr = SPIx->SR;
 80078de:	68b3      	ldr	r3, [r6, #8]
 80078e0:	9306      	str	r3, [sp, #24]
  (void) tmpreg_sr;
 80078e2:	9b06      	ldr	r3, [sp, #24]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80078e4:	6833      	ldr	r3, [r6, #0]
 80078e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ea:	6033      	str	r3, [r6, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80078ec:	6833      	ldr	r3, [r6, #0]
 80078ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f2:	6033      	str	r3, [r6, #0]
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	889b      	ldrh	r3, [r3, #4]
 80078f8:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 80078fc:	f47f add2 	bne.w	80074a4 <spi_stm32_transceive+0x9c>
		ctx->owner = NULL;
 8007900:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 8007902:	f104 0008 	add.w	r0, r4, #8
 8007906:	f001 f84b 	bl	80089a0 <z_impl_k_sem_give>
}
 800790a:	e5cb      	b.n	80074a4 <spi_stm32_transceive+0x9c>
 800790c:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 800790e:	a90e      	add	r1, sp, #56	; 0x38
 8007910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007914:	602a      	str	r2, [r5, #0]
 8007916:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800791a:	682a      	ldr	r2, [r5, #0]
 800791c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8007920:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8007924:	4313      	orrs	r3, r2
 8007926:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8007928:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800792c:	079a      	lsls	r2, r3, #30
 800792e:	f53f adef 	bmi.w	8007510 <spi_stm32_transceive+0x108>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8007932:	682a      	ldr	r2, [r5, #0]
 8007934:	f022 0202 	bic.w	r2, r2, #2
 8007938:	e5ed      	b.n	8007516 <spi_stm32_transceive+0x10e>
 800793a:	bf00      	nop
 800793c:	20000360 	.word	0x20000360
 8007940:	2000033c 	.word	0x2000033c
 8007944:	08010b19 	.word	0x08010b19
 8007948:	08010b37 	.word	0x08010b37
 800794c:	08010af3 	.word	0x08010af3

08007950 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007950:	6843      	ldr	r3, [r0, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8007954:	695a      	ldr	r2, [r3, #20]
 8007956:	f042 0201 	orr.w	r2, r2, #1
 800795a:	615a      	str	r2, [r3, #20]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 800795c:	4a0f      	ldr	r2, [pc, #60]	; (800799c <uart_stm32_irq_err_enable+0x4c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <uart_stm32_irq_err_enable+0x3a>
 8007962:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8007966:	4293      	cmp	r3, r2
 8007968:	d00f      	beq.n	800798a <uart_stm32_irq_err_enable+0x3a>
 800796a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800796e:	4293      	cmp	r3, r2
 8007970:	d00b      	beq.n	800798a <uart_stm32_irq_err_enable+0x3a>
 8007972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007976:	4293      	cmp	r3, r2
 8007978:	d007      	beq.n	800798a <uart_stm32_irq_err_enable+0x3a>
 800797a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800797e:	4293      	cmp	r3, r2
 8007980:	d003      	beq.n	800798a <uart_stm32_irq_err_enable+0x3a>
 8007982:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8007986:	4293      	cmp	r3, r2
 8007988:	d103      	bne.n	8007992 <uart_stm32_irq_err_enable+0x42>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800798a:	691a      	ldr	r2, [r3, #16]
 800798c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007990:	611a      	str	r2, [r3, #16]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8007992:	68da      	ldr	r2, [r3, #12]
 8007994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007998:	60da      	str	r2, [r3, #12]
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 800799a:	4770      	bx	lr
 800799c:	40011000 	.word	0x40011000

080079a0 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80079a0:	6843      	ldr	r3, [r0, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80079a4:	695a      	ldr	r2, [r3, #20]
 80079a6:	f022 0201 	bic.w	r2, r2, #1
 80079aa:	615a      	str	r2, [r3, #20]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 80079ac:	4a0f      	ldr	r2, [pc, #60]	; (80079ec <uart_stm32_irq_err_disable+0x4c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d013      	beq.n	80079da <uart_stm32_irq_err_disable+0x3a>
 80079b2:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00f      	beq.n	80079da <uart_stm32_irq_err_disable+0x3a>
 80079ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00b      	beq.n	80079da <uart_stm32_irq_err_disable+0x3a>
 80079c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d007      	beq.n	80079da <uart_stm32_irq_err_disable+0x3a>
 80079ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d003      	beq.n	80079da <uart_stm32_irq_err_disable+0x3a>
 80079d2:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d103      	bne.n	80079e2 <uart_stm32_irq_err_disable+0x42>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 80079da:	691a      	ldr	r2, [r3, #16]
 80079dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079e8:	60da      	str	r2, [r3, #12]
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 80079ea:	4770      	bx	lr
 80079ec:	40011000 	.word	0x40011000

080079f0 <uart_stm32_set_baudrate>:
{
 80079f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (clock_control_get_rate(data->clock,
 80079f2:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80079f4:	6847      	ldr	r7, [r0, #4]
	if (clock_control_get_rate(data->clock,
 80079f6:	685e      	ldr	r6, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80079f8:	f857 4b0c 	ldr.w	r4, [r7], #12
{
 80079fc:	460d      	mov	r5, r1
 80079fe:	4630      	mov	r0, r6
 8007a00:	f005 f96d 	bl	800ccde <z_device_ready>
 8007a04:	b970      	cbnz	r0, 8007a24 <uart_stm32_set_baudrate+0x34>
		LOG_ERR("Failed call clock_control_get_rate");
 8007a06:	4919      	ldr	r1, [pc, #100]	; (8007a6c <uart_stm32_set_baudrate+0x7c>)
 8007a08:	680b      	ldr	r3, [r1, #0]
 8007a0a:	075b      	lsls	r3, r3, #29
 8007a0c:	d008      	beq.n	8007a20 <uart_stm32_set_baudrate+0x30>
 8007a0e:	4b18      	ldr	r3, [pc, #96]	; (8007a70 <uart_stm32_set_baudrate+0x80>)
 8007a10:	4818      	ldr	r0, [pc, #96]	; (8007a74 <uart_stm32_set_baudrate+0x84>)
 8007a12:	1ac9      	subs	r1, r1, r3
 8007a14:	0889      	lsrs	r1, r1, #2
 8007a16:	0189      	lsls	r1, r1, #6
 8007a18:	f041 0101 	orr.w	r1, r1, #1
 8007a1c:	f003 f8f3 	bl	800ac06 <log_0>
}
 8007a20:	b003      	add	sp, #12
 8007a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (api->get_rate == NULL) {
 8007a24:	68b3      	ldr	r3, [r6, #8]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0ec      	beq.n	8007a06 <uart_stm32_set_baudrate+0x16>
	return api->get_rate(dev, sys, rate);
 8007a2c:	aa01      	add	r2, sp, #4
 8007a2e:	4639      	mov	r1, r7
 8007a30:	4630      	mov	r0, r6
 8007a32:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8007a34:	2800      	cmp	r0, #0
 8007a36:	dbe6      	blt.n	8007a06 <uart_stm32_set_baudrate+0x16>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8007a38:	68e3      	ldr	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007a3a:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8007a3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007a40:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8007a42:	60e3      	str	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007a44:	00aa      	lsls	r2, r5, #2
 8007a46:	0fab      	lsrs	r3, r5, #30
 8007a48:	fba0 0101 	umull	r0, r1, r0, r1
 8007a4c:	f7f9 f82e 	bl	8000aac <__aeabi_uldivmod>
 8007a50:	2264      	movs	r2, #100	; 0x64
 8007a52:	fbb0 f1f2 	udiv	r1, r0, r2
 8007a56:	fb02 0311 	mls	r3, r2, r1, r0
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	3332      	adds	r3, #50	; 0x32
 8007a5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a62:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	60a3      	str	r3, [r4, #8]
 8007a6a:	e7d9      	b.n	8007a20 <uart_stm32_set_baudrate+0x30>
 8007a6c:	20000364 	.word	0x20000364
 8007a70:	2000033c 	.word	0x2000033c
 8007a74:	080109e0 	.word	0x080109e0

08007a78 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8007a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8007a7c:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8007a7e:	6906      	ldr	r6, [r0, #16]
	data->clock = clk;
 8007a80:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8007b60 <uart_stm32_init+0xe8>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007a84:	46a9      	mov	r9, r5
{
 8007a86:	4607      	mov	r7, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007a88:	f859 4b0c 	ldr.w	r4, [r9], #12
	data->clock = clk;
 8007a8c:	f8c6 8004 	str.w	r8, [r6, #4]
 8007a90:	4640      	mov	r0, r8
 8007a92:	f005 f924 	bl	800ccde <z_device_ready>
 8007a96:	b918      	cbnz	r0, 8007aa0 <uart_stm32_init+0x28>

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
 8007a98:	f06f 0004 	mvn.w	r0, #4
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8007a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return api->on(dev, sys);
 8007aa0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007aa4:	4640      	mov	r0, r8
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4649      	mov	r1, r9
 8007aaa:	4798      	blx	r3
	if (clock_control_on(data->clock,
 8007aac:	4680      	mov	r8, r0
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d1f2      	bne.n	8007a98 <uart_stm32_init+0x20>
					 (uint32_t)UART_STRUCT(dev));
 8007ab2:	687b      	ldr	r3, [r7, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8007ab4:	e9d5 0107 	ldrd	r0, r1, [r5, #28]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	f7fe f8a9 	bl	8005c10 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	dbec      	blt.n	8007a9c <uart_stm32_init+0x24>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8007ac2:	68e3      	ldr	r3, [r4, #12]
	if (config->parity == 2) {
 8007ac4:	69a9      	ldr	r1, [r5, #24]
 8007ac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aca:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8007acc:	68e3      	ldr	r3, [r4, #12]
 8007ace:	2902      	cmp	r1, #2
 8007ad0:	f043 030c 	orr.w	r3, r3, #12
 8007ad4:	60e3      	str	r3, [r4, #12]
 8007ad6:	d013      	beq.n	8007b00 <uart_stm32_init+0x88>
	} else if (config->parity == 1) {
 8007ad8:	2901      	cmp	r1, #1
 8007ada:	d034      	beq.n	8007b46 <uart_stm32_init+0xce>
		if (config->parity != 0) {
 8007adc:	b171      	cbz	r1, 8007afc <uart_stm32_init+0x84>
			LOG_WRN("Invalid parity setting '%d'."
 8007ade:	4a1d      	ldr	r2, [pc, #116]	; (8007b54 <uart_stm32_init+0xdc>)
 8007ae0:	6813      	ldr	r3, [r2, #0]
 8007ae2:	f013 0306 	ands.w	r3, r3, #6
 8007ae6:	d033      	beq.n	8007b50 <uart_stm32_init+0xd8>
 8007ae8:	4b1b      	ldr	r3, [pc, #108]	; (8007b58 <uart_stm32_init+0xe0>)
 8007aea:	481c      	ldr	r0, [pc, #112]	; (8007b5c <uart_stm32_init+0xe4>)
 8007aec:	1ad2      	subs	r2, r2, r3
 8007aee:	0892      	lsrs	r2, r2, #2
 8007af0:	0192      	lsls	r2, r2, #6
 8007af2:	f042 0202 	orr.w	r2, r2, #2
 8007af6:	f003 f895 	bl	800ac24 <log_1>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8007afa:	4641      	mov	r1, r8
		ll_parity = LL_USART_PARITY_NONE;
 8007afc:	460b      	mov	r3, r1
 8007afe:	e003      	b.n	8007b08 <uart_stm32_init+0x90>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8007b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8007b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8007b08:	68e2      	ldr	r2, [r4, #12]
 8007b0a:	4319      	orrs	r1, r3
 8007b0c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8007b10:	4311      	orrs	r1, r2
 8007b12:	60e1      	str	r1, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b1a:	6123      	str	r3, [r4, #16]
	if (config->hw_flow_control) {
 8007b1c:	7d2b      	ldrb	r3, [r5, #20]
 8007b1e:	b12b      	cbz	r3, 8007b2c <uart_stm32_init+0xb4>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007b24:	6953      	ldr	r3, [r2, #20]
 8007b26:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b2a:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8007b2c:	6831      	ldr	r1, [r6, #0]
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f7ff ff5e 	bl	80079f0 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007b34:	68e3      	ldr	r3, [r4, #12]
 8007b36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007b3a:	60e3      	str	r3, [r4, #12]
	config->uconf.irq_config_func(dev);
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	68ab      	ldr	r3, [r5, #8]
 8007b40:	4798      	blx	r3
	return 0;
 8007b42:	2000      	movs	r0, #0
 8007b44:	e7aa      	b.n	8007a9c <uart_stm32_init+0x24>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8007b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8007b4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007b4e:	e7db      	b.n	8007b08 <uart_stm32_init+0x90>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8007b50:	4619      	mov	r1, r3
 8007b52:	e7d9      	b.n	8007b08 <uart_stm32_init+0x90>
 8007b54:	20000364 	.word	0x20000364
 8007b58:	2000033c 	.word	0x2000033c
 8007b5c:	08010b49 	.word	0x08010b49
 8007b60:	200001bc 	.word	0x200001bc

08007b64 <uart_stm32_configure>:
{
 8007b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8007b68:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007b6a:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8007b6c:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007b6e:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 8007b70:	2a01      	cmp	r2, #1
{
 8007b72:	460d      	mov	r5, r1
	switch (parity) {
 8007b74:	f000 8089 	beq.w	8007c8a <uart_stm32_configure+0x126>
		return LL_USART_PARITY_NONE;
 8007b78:	2a02      	cmp	r2, #2
 8007b7a:	bf0c      	ite	eq
 8007b7c:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8007b80:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8007b82:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8007b86:	f895 e006 	ldrb.w	lr, [r5, #6]
 8007b8a:	f1b9 0f02 	cmp.w	r9, #2
 8007b8e:	bf96      	itet	ls
 8007b90:	4b42      	ldrls	r3, [pc, #264]	; (8007c9c <uart_stm32_configure+0x138>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8007b92:	f44f 5800 	movhi.w	r8, #8192	; 0x2000
 8007b96:	f833 8019 	ldrhls.w	r8, [r3, r9, lsl #1]
	switch (db) {
 8007b9a:	f1be 0f04 	cmp.w	lr, #4
 8007b9e:	d077      	beq.n	8007c90 <uart_stm32_configure+0x12c>
		return LL_USART_DATAWIDTH_9B;
 8007ba0:	2a00      	cmp	r2, #0
 8007ba2:	bf0c      	ite	eq
 8007ba4:	2300      	moveq	r3, #0
 8007ba6:	f44f 5380 	movne.w	r3, #4096	; 0x1000
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8007baa:	79ef      	ldrb	r7, [r5, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8007bac:	f1a2 0a03 	sub.w	sl, r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8007bb0:	2f01      	cmp	r7, #1
 8007bb2:	bf14      	ite	ne
 8007bb4:	f04f 0c00 	movne.w	ip, #0
 8007bb8:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8007bbc:	f1ba 0f01 	cmp.w	sl, #1
 8007bc0:	d969      	bls.n	8007c96 <uart_stm32_configure+0x132>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8007bc2:	b112      	cbz	r2, 8007bca <uart_stm32_configure+0x66>
 8007bc4:	f1be 0f04 	cmp.w	lr, #4
 8007bc8:	d065      	beq.n	8007c96 <uart_stm32_configure+0x132>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8007bca:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8007bce:	d062      	beq.n	8007c96 <uart_stm32_configure+0x132>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8007bd0:	f1be 0f02 	cmp.w	lr, #2
 8007bd4:	d95f      	bls.n	8007c96 <uart_stm32_configure+0x132>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8007bd6:	f1be 0f04 	cmp.w	lr, #4
 8007bda:	d05c      	beq.n	8007c96 <uart_stm32_configure+0x132>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8007bdc:	b1c7      	cbz	r7, 8007c10 <uart_stm32_configure+0xac>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8007bde:	4a30      	ldr	r2, [pc, #192]	; (8007ca0 <uart_stm32_configure+0x13c>)
 8007be0:	4294      	cmp	r4, r2
 8007be2:	d013      	beq.n	8007c0c <uart_stm32_configure+0xa8>
 8007be4:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8007be8:	4294      	cmp	r4, r2
 8007bea:	d00f      	beq.n	8007c0c <uart_stm32_configure+0xa8>
 8007bec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bf0:	4294      	cmp	r4, r2
 8007bf2:	d00b      	beq.n	8007c0c <uart_stm32_configure+0xa8>
 8007bf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bf8:	4294      	cmp	r4, r2
 8007bfa:	d007      	beq.n	8007c0c <uart_stm32_configure+0xa8>
 8007bfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c00:	4294      	cmp	r4, r2
 8007c02:	d003      	beq.n	8007c0c <uart_stm32_configure+0xa8>
 8007c04:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8007c08:	4294      	cmp	r4, r2
 8007c0a:	d144      	bne.n	8007c96 <uart_stm32_configure+0x132>
 8007c0c:	2f01      	cmp	r7, #1
 8007c0e:	d142      	bne.n	8007c96 <uart_stm32_configure+0x132>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8007c10:	68e2      	ldr	r2, [r4, #12]
 8007c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c16:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8007c18:	68e2      	ldr	r2, [r4, #12]
 8007c1a:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8007c1e:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8007c20:	bf1f      	itttt	ne
 8007c22:	68e7      	ldrne	r7, [r4, #12]
 8007c24:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8007c28:	430f      	orrne	r7, r1
 8007c2a:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8007c2c:	6922      	ldr	r2, [r4, #16]
 8007c2e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8007c32:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007c34:	bf1f      	itttt	ne
 8007c36:	6921      	ldrne	r1, [r4, #16]
 8007c38:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8007c3c:	ea41 0108 	orrne.w	r1, r1, r8
 8007c40:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8007c42:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 8007c44:	6829      	ldr	r1, [r5, #0]
 8007c46:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8007c4a:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8007c4c:	bf1f      	itttt	ne
 8007c4e:	68e2      	ldrne	r2, [r4, #12]
 8007c50:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8007c54:	431a      	orrne	r2, r3
 8007c56:	60e2      	strne	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8007c58:	6963      	ldr	r3, [r4, #20]
 8007c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8007c5e:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007c60:	bf1f      	itttt	ne
 8007c62:	6963      	ldrne	r3, [r4, #20]
 8007c64:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8007c68:	ea43 030c 	orrne.w	r3, r3, ip
 8007c6c:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 8007c6e:	6833      	ldr	r3, [r6, #0]
 8007c70:	4299      	cmp	r1, r3
 8007c72:	d003      	beq.n	8007c7c <uart_stm32_configure+0x118>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8007c74:	f7ff febc 	bl	80079f0 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007c7c:	68e3      	ldr	r3, [r4, #12]
 8007c7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007c82:	60e3      	str	r3, [r4, #12]
	return 0;
 8007c84:	2000      	movs	r0, #0
};
 8007c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (parity) {
 8007c8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c8e:	e778      	b.n	8007b82 <uart_stm32_configure+0x1e>
		return LL_USART_DATAWIDTH_9B;
 8007c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c94:	e789      	b.n	8007baa <uart_stm32_configure+0x46>
		return -ENOTSUP;
 8007c96:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007c9a:	e7f4      	b.n	8007c86 <uart_stm32_configure+0x122>
 8007c9c:	0800f3d8 	.word	0x0800f3d8
 8007ca0:	40011000 	.word	0x40011000

08007ca4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8007ca4:	b530      	push	{r4, r5, lr}
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8007ca6:	4c0a      	ldr	r4, [pc, #40]	; (8007cd0 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8007ca8:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8007cac:	6865      	ldr	r5, [r4, #4]
 8007cae:	4909      	ldr	r1, [pc, #36]	; (8007cd4 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8007cb0:	4029      	ands	r1, r5
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	4310      	orrs	r0, r2
 8007cb6:	6060      	str	r0, [r4, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8007cb8:	6862      	ldr	r2, [r4, #4]
 8007cba:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	6062      	str	r2, [r4, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8007cc2:	6862      	ldr	r2, [r4, #4]
 8007cc4:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	6063      	str	r3, [r4, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8007ccc:	bd30      	pop	{r4, r5, pc}
 8007cce:	bf00      	nop
 8007cd0:	40023800 	.word	0x40023800
 8007cd4:	ffbf8000 	.word	0xffbf8000

08007cd8 <UTILS_PLL_IsBusy>:
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8007cd8:	4b08      	ldr	r3, [pc, #32]	; (8007cfc <UTILS_PLL_IsBusy+0x24>)
 8007cda:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 8007cdc:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8007cde:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8007ce0:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 8007ce4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	bf14      	ite	ne
 8007cec:	2001      	movne	r0, #1
 8007cee:	2000      	moveq	r0, #0
    status = ERROR;
  }
#endif /*RCC_PLLSAI_SUPPORT*/
#if defined(RCC_PLLI2S_SUPPORT)
  /* Check if PLLI2S is busy*/
  if(LL_RCC_PLLI2S_IsReady() != 0U)
 8007cf0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8007cf4:	bf18      	it	ne
 8007cf6:	2001      	movne	r0, #1
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40023800 	.word	0x40023800

08007d00 <LL_SetFlashLatency>:
  if(HCLK_Frequency == 0U)
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d04c      	beq.n	8007d9e <LL_SetFlashLatency+0x9e>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8007d04:	4b42      	ldr	r3, [pc, #264]	; (8007e10 <LL_SetFlashLatency+0x110>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8007d0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d10:	d110      	bne.n	8007d34 <LL_SetFlashLatency+0x34>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007d12:	f103 630f 	add.w	r3, r3, #149946368	; 0x8f00000
 8007d16:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8007d1a:	4298      	cmp	r0, r3
 8007d1c:	4a3d      	ldr	r2, [pc, #244]	; (8007e14 <LL_SetFlashLatency+0x114>)
 8007d1e:	d844      	bhi.n	8007daa <LL_SetFlashLatency+0xaa>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007d20:	4b3d      	ldr	r3, [pc, #244]	; (8007e18 <LL_SetFlashLatency+0x118>)
 8007d22:	4298      	cmp	r0, r3
 8007d24:	d871      	bhi.n	8007e0a <LL_SetFlashLatency+0x10a>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007d26:	4290      	cmp	r0, r2
 8007d28:	d83d      	bhi.n	8007da6 <LL_SetFlashLatency+0xa6>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007d2a:	4b3c      	ldr	r3, [pc, #240]	; (8007e1c <LL_SetFlashLatency+0x11c>)
 8007d2c:	4298      	cmp	r0, r3
 8007d2e:	d803      	bhi.n	8007d38 <LL_SetFlashLatency+0x38>
 8007d30:	2300      	movs	r3, #0
 8007d32:	e040      	b.n	8007db6 <LL_SetFlashLatency+0xb6>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8007d34:	2300      	movs	r3, #0
 8007d36:	e044      	b.n	8007dc2 <LL_SetFlashLatency+0xc2>
        latency = LL_FLASH_LATENCY_2;
 8007d38:	2302      	movs	r3, #2
 8007d3a:	e042      	b.n	8007dc2 <LL_SetFlashLatency+0xc2>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007d3c:	4a38      	ldr	r2, [pc, #224]	; (8007e20 <LL_SetFlashLatency+0x120>)
 8007d3e:	4290      	cmp	r0, r2
 8007d40:	d909      	bls.n	8007d56 <LL_SetFlashLatency+0x56>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007d42:	4a34      	ldr	r2, [pc, #208]	; (8007e14 <LL_SetFlashLatency+0x114>)
        latency = LL_FLASH_LATENCY_4;
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bf08      	it	eq
 8007d48:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007d4a:	4290      	cmp	r0, r2
 8007d4c:	d849      	bhi.n	8007de2 <LL_SetFlashLatency+0xe2>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007d4e:	4a33      	ldr	r2, [pc, #204]	; (8007e1c <LL_SetFlashLatency+0x11c>)
 8007d50:	4290      	cmp	r0, r2
 8007d52:	d946      	bls.n	8007de2 <LL_SetFlashLatency+0xe2>
 8007d54:	e003      	b.n	8007d5e <LL_SetFlashLatency+0x5e>
 8007d56:	4a31      	ldr	r2, [pc, #196]	; (8007e1c <LL_SetFlashLatency+0x11c>)
 8007d58:	4290      	cmp	r0, r2
 8007d5a:	d942      	bls.n	8007de2 <LL_SetFlashLatency+0xe2>
 8007d5c:	b11b      	cbz	r3, 8007d66 <LL_SetFlashLatency+0x66>
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	bf38      	it	cc
 8007d62:	2301      	movcc	r3, #1
 8007d64:	e040      	b.n	8007de8 <LL_SetFlashLatency+0xe8>
        latency = LL_FLASH_LATENCY_2;
 8007d66:	2302      	movs	r3, #2
 8007d68:	e03e      	b.n	8007de8 <LL_SetFlashLatency+0xe8>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007d6a:	4a2c      	ldr	r2, [pc, #176]	; (8007e1c <LL_SetFlashLatency+0x11c>)
 8007d6c:	4290      	cmp	r0, r2
 8007d6e:	d903      	bls.n	8007d78 <LL_SetFlashLatency+0x78>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d146      	bne.n	8007e02 <LL_SetFlashLatency+0x102>
        latency = LL_FLASH_LATENCY_2;
 8007d74:	2302      	movs	r3, #2
 8007d76:	e002      	b.n	8007d7e <LL_SetFlashLatency+0x7e>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007d78:	4a2a      	ldr	r2, [pc, #168]	; (8007e24 <LL_SetFlashLatency+0x124>)
 8007d7a:	4290      	cmp	r0, r2
 8007d7c:	d841      	bhi.n	8007e02 <LL_SetFlashLatency+0x102>
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8007d7e:	492a      	ldr	r1, [pc, #168]	; (8007e28 <LL_SetFlashLatency+0x128>)
 8007d80:	680a      	ldr	r2, [r1, #0]
 8007d82:	f022 020f 	bic.w	r2, r2, #15
 8007d86:	431a      	orrs	r2, r3
 8007d88:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8007d8a:	680a      	ldr	r2, [r1, #0]
 8007d8c:	f002 020f 	and.w	r2, r2, #15
    } while ((getlatency != latency) && (timeout > 0));
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d006      	beq.n	8007da2 <LL_SetFlashLatency+0xa2>
 8007d94:	680a      	ldr	r2, [r1, #0]
 8007d96:	f002 020f 	and.w	r2, r2, #15
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d001      	beq.n	8007da2 <LL_SetFlashLatency+0xa2>
    status = ERROR;
 8007d9e:	2001      	movs	r0, #1
 8007da0:	4770      	bx	lr
      status = SUCCESS;
 8007da2:	2000      	movs	r0, #0
}
 8007da4:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8007da6:	2303      	movs	r3, #3
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007da8:	e005      	b.n	8007db6 <LL_SetFlashLatency+0xb6>
        latency = LL_FLASH_LATENCY_5;
 8007daa:	2305      	movs	r3, #5
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007dac:	4290      	cmp	r0, r2
 8007dae:	d802      	bhi.n	8007db6 <LL_SetFlashLatency+0xb6>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007db0:	4a1a      	ldr	r2, [pc, #104]	; (8007e1c <LL_SetFlashLatency+0x11c>)
 8007db2:	4290      	cmp	r0, r2
 8007db4:	d802      	bhi.n	8007dbc <LL_SetFlashLatency+0xbc>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007db6:	4a1b      	ldr	r2, [pc, #108]	; (8007e24 <LL_SetFlashLatency+0x124>)
 8007db8:	4290      	cmp	r0, r2
 8007dba:	d902      	bls.n	8007dc2 <LL_SetFlashLatency+0xc2>
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	bf38      	it	cc
 8007dc0:	2301      	movcc	r3, #1
 8007dc2:	4a13      	ldr	r2, [pc, #76]	; (8007e10 <LL_SetFlashLatency+0x110>)
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8007dca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007dce:	d10b      	bne.n	8007de8 <LL_SetFlashLatency+0xe8>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007dd0:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
 8007dd4:	f502 42a3 	add.w	r2, r2, #20864	; 0x5180
 8007dd8:	4290      	cmp	r0, r2
 8007dda:	d9af      	bls.n	8007d3c <LL_SetFlashLatency+0x3c>
        latency = LL_FLASH_LATENCY_5;
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	bf08      	it	eq
 8007de0:	2305      	moveq	r3, #5
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007de2:	4a10      	ldr	r2, [pc, #64]	; (8007e24 <LL_SetFlashLatency+0x124>)
 8007de4:	4290      	cmp	r0, r2
 8007de6:	d8ba      	bhi.n	8007d5e <LL_SetFlashLatency+0x5e>
 8007de8:	4a09      	ldr	r2, [pc, #36]	; (8007e10 <LL_SetFlashLatency+0x110>)
 8007dea:	6812      	ldr	r2, [r2, #0]
 8007dec:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8007df0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007df4:	d1c3      	bne.n	8007d7e <LL_SetFlashLatency+0x7e>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007df6:	4a07      	ldr	r2, [pc, #28]	; (8007e14 <LL_SetFlashLatency+0x114>)
 8007df8:	4290      	cmp	r0, r2
 8007dfa:	d9b6      	bls.n	8007d6a <LL_SetFlashLatency+0x6a>
        latency = LL_FLASH_LATENCY_3;
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bf08      	it	eq
 8007e00:	2303      	moveq	r3, #3
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	bf38      	it	cc
 8007e06:	2301      	movcc	r3, #1
 8007e08:	e7b9      	b.n	8007d7e <LL_SetFlashLatency+0x7e>
        latency = LL_FLASH_LATENCY_4;
 8007e0a:	2304      	movs	r3, #4
 8007e0c:	e7ce      	b.n	8007dac <LL_SetFlashLatency+0xac>
 8007e0e:	bf00      	nop
 8007e10:	40007000 	.word	0x40007000
 8007e14:	055d4a80 	.word	0x055d4a80
 8007e18:	07270e00 	.word	0x07270e00
 8007e1c:	03938700 	.word	0x03938700
 8007e20:	00b71b00 	.word	0x00b71b00
 8007e24:	01c9c380 	.word	0x01c9c380
 8007e28:	40023c00 	.word	0x40023c00

08007e2c <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8007e2c:	680b      	ldr	r3, [r1, #0]
 8007e2e:	4a21      	ldr	r2, [pc, #132]	; (8007eb4 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 8007e30:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8007e34:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8007e36:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8007e38:	4e1f      	ldr	r6, [pc, #124]	; (8007eb8 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8007e3a:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 8007e3e:	6833      	ldr	r3, [r6, #0]
 8007e40:	42a3      	cmp	r3, r4
{
 8007e42:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 8007e44:	d327      	bcc.n	8007e96 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007e46:	4b1d      	ldr	r3, [pc, #116]	; (8007ebc <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007e4e:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8007e50:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8007e52:	0192      	lsls	r2, r2, #6
 8007e54:	d5fc      	bpl.n	8007e50 <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	6829      	ldr	r1, [r5, #0]
 8007e5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	f022 0203 	bic.w	r2, r2, #3
 8007e68:	f042 0202 	orr.w	r2, r2, #2
 8007e6c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007e6e:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007e76:	2a08      	cmp	r2, #8
 8007e78:	d1fa      	bne.n	8007e70 <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	6869      	ldr	r1, [r5, #4]
 8007e7e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8007e82:	430a      	orrs	r2, r1
 8007e84:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	68a9      	ldr	r1, [r5, #8]
 8007e8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	609a      	str	r2, [r3, #8]
}
 8007e92:	2000      	movs	r0, #0
 8007e94:	e004      	b.n	8007ea0 <UTILS_EnablePLLAndSwitchSystem+0x74>
    status = LL_SetFlashLatency(hclk_frequency);
 8007e96:	4620      	mov	r0, r4
 8007e98:	f7ff ff32 	bl	8007d00 <LL_SetFlashLatency>
  if(status == SUCCESS)
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d0d2      	beq.n	8007e46 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8007ea0:	6833      	ldr	r3, [r6, #0]
 8007ea2:	42a3      	cmp	r3, r4
 8007ea4:	d902      	bls.n	8007eac <UTILS_EnablePLLAndSwitchSystem+0x80>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f7ff ff2a 	bl	8007d00 <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8007eac:	b900      	cbnz	r0, 8007eb0 <UTILS_EnablePLLAndSwitchSystem+0x84>
  SystemCoreClock = HCLKFrequency;
 8007eae:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8007eb0:	bd70      	pop	{r4, r5, r6, pc}
 8007eb2:	bf00      	nop
 8007eb4:	08010b8d 	.word	0x08010b8d
 8007eb8:	20000144 	.word	0x20000144
 8007ebc:	40023800 	.word	0x40023800

08007ec0 <LL_PLL_ConfigSystemClock_HSE>:
{
 8007ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	460f      	mov	r7, r1
 8007ec6:	4614      	mov	r4, r2
 8007ec8:	461e      	mov	r6, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8007eca:	f7ff ff05 	bl	8007cd8 <UTILS_PLL_IsBusy>
 8007ece:	bb60      	cbnz	r0, 8007f2a <LL_PLL_ConfigSystemClock_HSE+0x6a>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8007ed0:	6821      	ldr	r1, [r4, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8007ed2:	6862      	ldr	r2, [r4, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007ed4:	68a3      	ldr	r3, [r4, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8007ed6:	4c16      	ldr	r4, [pc, #88]	; (8007f30 <LL_PLL_ConfigSystemClock_HSE+0x70>)
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8007ed8:	f001 003f 	and.w	r0, r1, #63	; 0x3f
 8007edc:	fbb5 f0f0 	udiv	r0, r5, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8007ee0:	f3c2 0508 	ubfx	r5, r2, #0, #9
 8007ee4:	4345      	muls	r5, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007ee6:	0c18      	lsrs	r0, r3, #16
 8007ee8:	3001      	adds	r0, #1
 8007eea:	0040      	lsls	r0, r0, #1
 8007eec:	fbb5 f5f0 	udiv	r5, r5, r0
 8007ef0:	6820      	ldr	r0, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 8007ef2:	0380      	lsls	r0, r0, #14
 8007ef4:	d40f      	bmi.n	8007f16 <LL_PLL_ConfigSystemClock_HSE+0x56>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8007ef6:	6820      	ldr	r0, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8007ef8:	2f01      	cmp	r7, #1
 8007efa:	bf0c      	ite	eq
 8007efc:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8007f00:	f420 2080 	bicne.w	r0, r0, #262144	; 0x40000
 8007f04:	6020      	str	r0, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007f06:	6820      	ldr	r0, [r4, #0]
 8007f08:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8007f0c:	6020      	str	r0, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8007f0e:	4c08      	ldr	r4, [pc, #32]	; (8007f30 <LL_PLL_ConfigSystemClock_HSE+0x70>)
 8007f10:	6820      	ldr	r0, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8007f12:	0380      	lsls	r0, r0, #14
 8007f14:	d5fc      	bpl.n	8007f10 <LL_PLL_ConfigSystemClock_HSE+0x50>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 8007f16:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007f1a:	f7ff fec3 	bl	8007ca4 <LL_RCC_PLL_ConfigDomain_SYS>
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8007f1e:	4631      	mov	r1, r6
 8007f20:	4628      	mov	r0, r5
}
 8007f22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8007f26:	f7ff bf81 	b.w	8007e2c <UTILS_EnablePLLAndSwitchSystem>
}
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	40023800 	.word	0x40023800

08007f34 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007f34:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <z_sys_init_run_level+0x3c>)
{
 8007f36:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007f38:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8007f42:	42a6      	cmp	r6, r4
 8007f44:	d800      	bhi.n	8007f48 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8007f46:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8007f48:	e9d4 3500 	ldrd	r3, r5, [r4]
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	4798      	blx	r3
		if (dev != NULL) {
 8007f50:	b165      	cbz	r5, 8007f6c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 8007f52:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 8007f54:	b130      	cbz	r0, 8007f64 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8007f56:	2800      	cmp	r0, #0
 8007f58:	bfb8      	it	lt
 8007f5a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8007f5c:	28ff      	cmp	r0, #255	; 0xff
 8007f5e:	bfa8      	it	ge
 8007f60:	20ff      	movge	r0, #255	; 0xff
 8007f62:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8007f64:	785a      	ldrb	r2, [r3, #1]
 8007f66:	f042 0201 	orr.w	r2, r2, #1
 8007f6a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007f6c:	3408      	adds	r4, #8
 8007f6e:	e7e8      	b.n	8007f42 <z_sys_init_run_level+0xe>
 8007f70:	0800f34c 	.word	0x0800f34c

08007f74 <z_device_get_all_static>:
#include <syscalls/device_usable_check_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
 8007f74:	4a03      	ldr	r2, [pc, #12]	; (8007f84 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
 8007f76:	4b04      	ldr	r3, [pc, #16]	; (8007f88 <z_device_get_all_static+0x14>)
	*devices = __device_start;
 8007f78:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
 8007f7a:	1a9b      	subs	r3, r3, r2
}
 8007f7c:	4803      	ldr	r0, [pc, #12]	; (8007f8c <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
 8007f7e:	10db      	asrs	r3, r3, #3
}
 8007f80:	4358      	muls	r0, r3
 8007f82:	4770      	bx	lr
 8007f84:	200001bc 	.word	0x200001bc
 8007f88:	2000033c 	.word	0x2000033c
 8007f8c:	aaaaaaab 	.word	0xaaaaaaab

08007f90 <z_impl_device_get_binding>:
{
 8007f90:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
 8007f92:	4605      	mov	r5, r0
 8007f94:	b910      	cbnz	r0, 8007f9c <z_impl_device_get_binding+0xc>
		return NULL;
 8007f96:	2400      	movs	r4, #0
}
 8007f98:	4620      	mov	r0, r4
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 8007f9c:	7803      	ldrb	r3, [r0, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0f9      	beq.n	8007f96 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 8007fa2:	4c0e      	ldr	r4, [pc, #56]	; (8007fdc <z_impl_device_get_binding+0x4c>)
 8007fa4:	4e0e      	ldr	r6, [pc, #56]	; (8007fe0 <z_impl_device_get_binding+0x50>)
 8007fa6:	42b4      	cmp	r4, r6
 8007fa8:	d108      	bne.n	8007fbc <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 8007faa:	4c0c      	ldr	r4, [pc, #48]	; (8007fdc <z_impl_device_get_binding+0x4c>)
 8007fac:	42b4      	cmp	r4, r6
 8007fae:	d0f2      	beq.n	8007f96 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f004 fe94 	bl	800ccde <z_device_ready>
 8007fb6:	b950      	cbnz	r0, 8007fce <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 8007fb8:	3418      	adds	r4, #24
 8007fba:	e7f7      	b.n	8007fac <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f004 fe8e 	bl	800ccde <z_device_ready>
 8007fc2:	b110      	cbz	r0, 8007fca <z_impl_device_get_binding+0x3a>
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	42ab      	cmp	r3, r5
 8007fc8:	d0e6      	beq.n	8007f98 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 8007fca:	3418      	adds	r4, #24
 8007fcc:	e7eb      	b.n	8007fa6 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8007fce:	6821      	ldr	r1, [r4, #0]
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f7f8 fef1 	bl	8000db8 <strcmp>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d1ee      	bne.n	8007fb8 <z_impl_device_get_binding+0x28>
 8007fda:	e7dd      	b.n	8007f98 <z_impl_device_get_binding+0x8>
 8007fdc:	200001bc 	.word	0x200001bc
 8007fe0:	2000033c 	.word	0x2000033c

08007fe4 <device_required_foreach>:
}

int device_required_foreach(const struct device *dev,
			  device_visitor_callback_t visitor_cb,
			  void *context)
{
 8007fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe8:	6944      	ldr	r4, [r0, #20]
 8007fea:	460f      	mov	r7, r1
 8007fec:	4692      	mov	sl, r2
	if (rv != NULL) {
 8007fee:	bb3c      	cbnz	r4, 8008040 <device_required_foreach+0x5c>
	size_t handle_count = 0;
 8007ff0:	4626      	mov	r6, r4
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	e022      	b.n	800803c <device_required_foreach+0x58>
			++i;
 8007ff6:	3601      	adds	r6, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
 8007ff8:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
 8007ffc:	440b      	add	r3, r1
		while ((rv[i] != DEVICE_HANDLE_ENDS)
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	4293      	cmp	r3, r2
 8008002:	d9f8      	bls.n	8007ff6 <device_required_foreach+0x12>
	size_t numdev = __device_end - __device_start;
 8008004:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8008058 <device_required_foreach+0x74>
 8008008:	4d11      	ldr	r5, [pc, #68]	; (8008050 <device_required_foreach+0x6c>)
 800800a:	4b12      	ldr	r3, [pc, #72]	; (8008054 <device_required_foreach+0x70>)
 800800c:	eba5 0508 	sub.w	r5, r5, r8
 8008010:	10ed      	asrs	r5, r5, #3
 8008012:	435d      	muls	r5, r3
 8008014:	eb04 0946 	add.w	r9, r4, r6, lsl #1
	for (size_t i = 0; i < handle_count; ++i) {
 8008018:	45a1      	cmp	r9, r4
 800801a:	d0ea      	beq.n	8007ff2 <device_required_foreach+0xe>
		device_handle_t dh = handles[i];
 800801c:	f934 0b02 	ldrsh.w	r0, [r4], #2
	if ((dev_handle > 0) && ((size_t)dev_handle < numdev)) {
 8008020:	2800      	cmp	r0, #0
 8008022:	dd13      	ble.n	800804c <device_required_foreach+0x68>
 8008024:	4285      	cmp	r5, r0
 8008026:	d911      	bls.n	800804c <device_required_foreach+0x68>
		dev = &__device_start[dev_handle - 1];
 8008028:	3801      	subs	r0, #1
 800802a:	b200      	sxth	r0, r0
 800802c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8008030:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
		int rc = visitor_cb(rdev, context);
 8008034:	4651      	mov	r1, sl
 8008036:	47b8      	blx	r7
		if (rc < 0) {
 8008038:	2800      	cmp	r0, #0
 800803a:	daed      	bge.n	8008018 <device_required_foreach+0x34>
}
 800803c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		size_t i = 0;
 8008040:	2600      	movs	r6, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
 8008042:	f647 71ff 	movw	r1, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
 8008046:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800804a:	e7d5      	b.n	8007ff8 <device_required_foreach+0x14>
	const struct device *dev = NULL;
 800804c:	2000      	movs	r0, #0
 800804e:	e7f1      	b.n	8008034 <device_required_foreach+0x50>
 8008050:	2000033c 	.word	0x2000033c
 8008054:	aaaaaaab 	.word	0xaaaaaaab
 8008058:	200001bc 	.word	0x200001bc

0800805c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 800805c:	4b01      	ldr	r3, [pc, #4]	; (8008064 <z_impl_z_errno+0x8>)
 800805e:	6898      	ldr	r0, [r3, #8]
}
 8008060:	3098      	adds	r0, #152	; 0x98
 8008062:	4770      	bx	lr
 8008064:	200020e8 	.word	0x200020e8

08008068 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8008068:	b510      	push	{r4, lr}
 800806a:	4604      	mov	r4, r0
	z_impl_log_panic();
 800806c:	f7fb f834 	bl	80030d8 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 8008070:	4907      	ldr	r1, [pc, #28]	; (8008090 <k_sys_fatal_error_handler+0x28>)
 8008072:	680b      	ldr	r3, [r1, #0]
 8008074:	075b      	lsls	r3, r3, #29
 8008076:	d008      	beq.n	800808a <k_sys_fatal_error_handler+0x22>
 8008078:	4b06      	ldr	r3, [pc, #24]	; (8008094 <k_sys_fatal_error_handler+0x2c>)
 800807a:	4807      	ldr	r0, [pc, #28]	; (8008098 <k_sys_fatal_error_handler+0x30>)
 800807c:	1ac9      	subs	r1, r1, r3
 800807e:	0889      	lsrs	r1, r1, #2
 8008080:	0189      	lsls	r1, r1, #6
 8008082:	f041 0101 	orr.w	r1, r1, #1
 8008086:	f002 fdbe 	bl	800ac06 <log_0>
	arch_system_halt(reason);
 800808a:	4620      	mov	r0, r4
 800808c:	f004 fe31 	bl	800ccf2 <arch_system_halt>
 8008090:	20000354 	.word	0x20000354
 8008094:	2000033c 	.word	0x2000033c
 8008098:	08010b9d 	.word	0x08010b9d

0800809c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800809c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80080a0:	4606      	mov	r6, r0
 80080a2:	460f      	mov	r7, r1
	__asm__ volatile(
 80080a4:	f04f 0310 	mov.w	r3, #16
 80080a8:	f3ef 8811 	mrs	r8, BASEPRI
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 80080b4:	4c2c      	ldr	r4, [pc, #176]	; (8008168 <z_fatal_error+0xcc>)
	return z_impl_k_current_get();
 80080b6:	f000 ffcb 	bl	8009050 <z_impl_k_current_get>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	0759      	lsls	r1, r3, #29
 80080be:	4605      	mov	r5, r0
 80080c0:	d04e      	beq.n	8008160 <z_fatal_error+0xc4>
 80080c2:	4b2a      	ldr	r3, [pc, #168]	; (800816c <z_fatal_error+0xd0>)
 80080c4:	482a      	ldr	r0, [pc, #168]	; (8008170 <z_fatal_error+0xd4>)
 80080c6:	1ae3      	subs	r3, r4, r3
 80080c8:	2e04      	cmp	r6, #4
 80080ca:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80080ce:	bf96      	itet	ls
 80080d0:	4a28      	ldrls	r2, [pc, #160]	; (8008174 <z_fatal_error+0xd8>)
 80080d2:	4a29      	ldrhi	r2, [pc, #164]	; (8008178 <z_fatal_error+0xdc>)
 80080d4:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
 80080d8:	019b      	lsls	r3, r3, #6
 80080da:	f043 0301 	orr.w	r3, r3, #1
 80080de:	f8ad 3000 	strh.w	r3, [sp]
 80080e2:	4631      	mov	r1, r6
 80080e4:	2300      	movs	r3, #0
 80080e6:	f002 fdcd 	bl	800ac84 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 80080ea:	b17f      	cbz	r7, 800810c <z_fatal_error+0x70>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f2:	b15b      	cbz	r3, 800810c <z_fatal_error+0x70>
		LOG_ERR("Fault during interrupt handling\n");
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	075a      	lsls	r2, r3, #29
 80080f8:	d01b      	beq.n	8008132 <z_fatal_error+0x96>
 80080fa:	491c      	ldr	r1, [pc, #112]	; (800816c <z_fatal_error+0xd0>)
 80080fc:	481f      	ldr	r0, [pc, #124]	; (800817c <z_fatal_error+0xe0>)
 80080fe:	1a61      	subs	r1, r4, r1
 8008100:	0889      	lsrs	r1, r1, #2
 8008102:	0189      	lsls	r1, r1, #6
 8008104:	f041 0101 	orr.w	r1, r1, #1
 8008108:	f002 fd7d 	bl	800ac06 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	075b      	lsls	r3, r3, #29
 8008110:	d00f      	beq.n	8008132 <z_fatal_error+0x96>
 8008112:	4b16      	ldr	r3, [pc, #88]	; (800816c <z_fatal_error+0xd0>)
 8008114:	1ae4      	subs	r4, r4, r3
 8008116:	08a4      	lsrs	r4, r4, #2
 8008118:	01a4      	lsls	r4, r4, #6
 800811a:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800811e:	b9b5      	cbnz	r5, 800814e <z_fatal_error+0xb2>
		thread_name = "unknown";
 8008120:	4817      	ldr	r0, [pc, #92]	; (8008180 <z_fatal_error+0xe4>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
 8008122:	f7fa fe45 	bl	8002db0 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
 8008126:	4623      	mov	r3, r4
 8008128:	4602      	mov	r2, r0
 800812a:	4629      	mov	r1, r5
 800812c:	4815      	ldr	r0, [pc, #84]	; (8008184 <z_fatal_error+0xe8>)
 800812e:	f002 fd90 	bl	800ac52 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8008132:	4639      	mov	r1, r7
 8008134:	4630      	mov	r0, r6
 8008136:	f7ff ff97 	bl	8008068 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800813a:	f388 8811 	msr	BASEPRI, r8
 800813e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8008142:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8008144:	b002      	add	sp, #8
 8008146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800814a:	f7fe bbe3 	b.w	8006914 <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800814e:	4628      	mov	r0, r5
 8008150:	f004 fe24 	bl	800cd9c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 8008154:	2800      	cmp	r0, #0
 8008156:	d0e3      	beq.n	8008120 <z_fatal_error+0x84>
 8008158:	7803      	ldrb	r3, [r0, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0e0      	beq.n	8008120 <z_fatal_error+0x84>
 800815e:	e7e0      	b.n	8008122 <z_fatal_error+0x86>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8008160:	2f00      	cmp	r7, #0
 8008162:	d1c3      	bne.n	80080ec <z_fatal_error+0x50>
 8008164:	e7e5      	b.n	8008132 <z_fatal_error+0x96>
 8008166:	bf00      	nop
 8008168:	20000354 	.word	0x20000354
 800816c:	2000033c 	.word	0x2000033c
 8008170:	08010bc2 	.word	0x08010bc2
 8008174:	0800f364 	.word	0x0800f364
 8008178:	08010bac 	.word	0x08010bac
 800817c:	08010bea 	.word	0x08010bea
 8008180:	08010bba 	.word	0x08010bba
 8008184:	08010c0b 	.word	0x08010c0b

08008188 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8008188:	4802      	ldr	r0, [pc, #8]	; (8008194 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
 800818a:	4a03      	ldr	r2, [pc, #12]	; (8008198 <z_bss_zero+0x10>)
 800818c:	2100      	movs	r1, #0
 800818e:	1a12      	subs	r2, r2, r0
 8008190:	f005 baca 	b.w	800d728 <memset>
 8008194:	20000408 	.word	0x20000408
 8008198:	20002884 	.word	0x20002884

0800819c <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 800819c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 800819e:	4b0c      	ldr	r3, [pc, #48]	; (80081d0 <bg_thread_main+0x34>)
 80081a0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80081a2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 80081a4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80081a6:	f7ff fec5 	bl	8007f34 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 80081aa:	f001 fa85 	bl	80096b8 <boot_banner>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
 80081ae:	f7fd fb8b 	bl	80058c8 <__do_global_ctors_aux>
	__do_init_array_aux();
 80081b2:	f7fd fb7b 	bl	80058ac <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 80081b6:	2003      	movs	r0, #3
 80081b8:	f7ff febc 	bl	8007f34 <z_sys_init_run_level>

	z_init_static_threads();
 80081bc:	f000 fa02 	bl	80085c4 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
 80081c0:	f7fa fb20 	bl	8002804 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 80081c4:	4a03      	ldr	r2, [pc, #12]	; (80081d4 <bg_thread_main+0x38>)
 80081c6:	7b13      	ldrb	r3, [r2, #12]
 80081c8:	f023 0301 	bic.w	r3, r3, #1
 80081cc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 80081ce:	bd08      	pop	{r3, pc}
 80081d0:	2000287a 	.word	0x2000287a
 80081d4:	20000828 	.word	0x20000828

080081d8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 80081d8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80081dc:	b0c7      	sub	sp, #284	; 0x11c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 80081de:	f7fa fc7b 	bl	8002ad8 <log_core_init>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80081e2:	4b3b      	ldr	r3, [pc, #236]	; (80082d0 <z_cstart+0xf8>)
 80081e4:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 80081e8:	4d3a      	ldr	r5, [pc, #232]	; (80082d4 <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
 80081ea:	4e3b      	ldr	r6, [pc, #236]	; (80082d8 <z_cstart+0x100>)
 80081ec:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80081ee:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80082f8 <z_cstart+0x120>
	z_setup_new_thread(thread, stack,
 80081f2:	4f3a      	ldr	r7, [pc, #232]	; (80082dc <z_cstart+0x104>)
 80081f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081f8:	2400      	movs	r4, #0
 80081fa:	616b      	str	r3, [r5, #20]
 80081fc:	23f0      	movs	r3, #240	; 0xf0
 80081fe:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8008202:	77ec      	strb	r4, [r5, #31]
 8008204:	762c      	strb	r4, [r5, #24]
 8008206:	766c      	strb	r4, [r5, #25]
 8008208:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800820a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800820c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008210:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8008212:	f7fe fb5d 	bl	80068d0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8008216:	f7fd ff83 	bl	8006120 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800821a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800821e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8008220:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8008222:	f7fe fc4b 	bl	8006abc <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8008226:	4d2e      	ldr	r5, [pc, #184]	; (80082e0 <z_cstart+0x108>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8008228:	f7fe fb86 	bl	8006938 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 800822c:	f240 1301 	movw	r3, #257	; 0x101
 8008230:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
 8008234:	ab08      	add	r3, sp, #32
 8008236:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
 8008238:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800823c:	f004 fd4e 	bl	800ccdc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8008240:	4620      	mov	r0, r4
 8008242:	f7ff fe77 	bl	8007f34 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8008246:	2001      	movs	r0, #1
 8008248:	f7ff fe74 	bl	8007f34 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800824c:	f04f 0a01 	mov.w	sl, #1
	z_sched_init();
 8008250:	f000 fe52 	bl	8008ef8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8008254:	4b23      	ldr	r3, [pc, #140]	; (80082e4 <z_cstart+0x10c>)
	_kernel.ready_q.cache = &z_main_thread;
 8008256:	622e      	str	r6, [r5, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8008258:	4923      	ldr	r1, [pc, #140]	; (80082e8 <z_cstart+0x110>)
 800825a:	9305      	str	r3, [sp, #20]
 800825c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008260:	464b      	mov	r3, r9
 8008262:	e9cd 4a03 	strd	r4, sl, [sp, #12]
 8008266:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800826a:	9400      	str	r4, [sp, #0]
 800826c:	4630      	mov	r0, r6
 800826e:	f000 f917 	bl	80084a0 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8008272:	7b73      	ldrb	r3, [r6, #13]
 8008274:	4680      	mov	r8, r0
 8008276:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 800827a:	4630      	mov	r0, r6
	snprintk(tname, 8, "idle %02d", i);
 800827c:	f10d 0b18 	add.w	fp, sp, #24
 8008280:	7373      	strb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
 8008282:	f004 fee4 	bl	800d04e <z_ready_thread>
	snprintk(tname, 8, "idle %02d", i);
 8008286:	4a19      	ldr	r2, [pc, #100]	; (80082ec <z_cstart+0x114>)
 8008288:	4623      	mov	r3, r4
 800828a:	2108      	movs	r1, #8
 800828c:	4658      	mov	r0, fp
 800828e:	f001 ff90 	bl	800a1b2 <snprintk>
	z_setup_new_thread(thread, stack,
 8008292:	230f      	movs	r3, #15
 8008294:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8008298:	4915      	ldr	r1, [pc, #84]	; (80082f0 <z_cstart+0x118>)
 800829a:	4b16      	ldr	r3, [pc, #88]	; (80082f4 <z_cstart+0x11c>)
 800829c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80082a0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80082a4:	e9cd 5400 	strd	r5, r4, [sp]
 80082a8:	4638      	mov	r0, r7
 80082aa:	f000 f8f9 	bl	80084a0 <z_setup_new_thread>
 80082ae:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 80082b0:	60ef      	str	r7, [r5, #12]
 80082b2:	f023 0304 	bic.w	r3, r3, #4
 80082b6:	737b      	strb	r3, [r7, #13]
		_kernel.cpus[i].irq_stack =
 80082b8:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <z_cstart+0xf8>)
 80082ba:	606b      	str	r3, [r5, #4]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 80082bc:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
 80082c0:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
 80082c4:	752c      	strb	r4, [r5, #20]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 80082c6:	464a      	mov	r2, r9
 80082c8:	4641      	mov	r1, r8
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7fd ff06 	bl	80060dc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 80082d0:	20005400 	.word	0x20005400
 80082d4:	e000ed00 	.word	0xe000ed00
 80082d8:	20000828 	.word	0x20000828
 80082dc:	20000730 	.word	0x20000730
 80082e0:	200020e8 	.word	0x200020e8
 80082e4:	08010c6d 	.word	0x08010c6d
 80082e8:	20004580 	.word	0x20004580
 80082ec:	08010c72 	.word	0x08010c72
 80082f0:	20004a00 	.word	0x20004a00
 80082f4:	0800cdc1 	.word	0x0800cdc1
 80082f8:	0800819d 	.word	0x0800819d

080082fc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 80082fc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80082fe:	4b0e      	ldr	r3, [pc, #56]	; (8008338 <init_mem_slab_module+0x3c>)
 8008300:	4c0e      	ldr	r4, [pc, #56]	; (800833c <init_mem_slab_module+0x40>)
 8008302:	42a3      	cmp	r3, r4
 8008304:	d301      	bcc.n	800830a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
 8008306:	2000      	movs	r0, #0
	return rc;
}
 8008308:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800830a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800830e:	ea41 0200 	orr.w	r2, r1, r0
 8008312:	f012 0203 	ands.w	r2, r2, #3
 8008316:	d10b      	bne.n	8008330 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 8008318:	68dd      	ldr	r5, [r3, #12]
	slab->free_list = NULL;
 800831a:	619a      	str	r2, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 800831c:	42aa      	cmp	r2, r5
 800831e:	d101      	bne.n	8008324 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8008320:	3320      	adds	r3, #32
 8008322:	e7ee      	b.n	8008302 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 8008324:	699e      	ldr	r6, [r3, #24]
 8008326:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 8008328:	3201      	adds	r2, #1
		slab->free_list = p;
 800832a:	6199      	str	r1, [r3, #24]
		p += slab->block_size;
 800832c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 800832e:	e7f5      	b.n	800831c <init_mem_slab_module+0x20>
	return rc;
 8008330:	f06f 0015 	mvn.w	r0, #21
 8008334:	e7e8      	b.n	8008308 <init_mem_slab_module+0xc>
 8008336:	bf00      	nop
 8008338:	20000368 	.word	0x20000368
 800833c:	20000368 	.word	0x20000368

08008340 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 8008340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008342:	460c      	mov	r4, r1
	__asm__ volatile(
 8008344:	f04f 0510 	mov.w	r5, #16
 8008348:	f3ef 8111 	mrs	r1, BASEPRI
 800834c:	f385 8811 	msr	BASEPRI, r5
 8008350:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 8008354:	6985      	ldr	r5, [r0, #24]
 8008356:	b15d      	cbz	r5, 8008370 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
 8008358:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 800835a:	682b      	ldr	r3, [r5, #0]
 800835c:	6183      	str	r3, [r0, #24]
		slab->num_used++;
 800835e:	69c3      	ldr	r3, [r0, #28]
 8008360:	3301      	adds	r3, #1
 8008362:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 8008364:	2000      	movs	r0, #0
	__asm__ volatile(
 8008366:	f381 8811 	msr	BASEPRI, r1
 800836a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
 800836e:	e011      	b.n	8008394 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 8008370:	ea52 0c03 	orrs.w	ip, r2, r3
 8008374:	d103      	bne.n	800837e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
 8008376:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
 8008378:	f06f 000b 	mvn.w	r0, #11
 800837c:	e7f3      	b.n	8008366 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 800837e:	e9cd 2300 	strd	r2, r3, [sp]
 8008382:	4602      	mov	r2, r0
 8008384:	3008      	adds	r0, #8
 8008386:	f000 fc3f 	bl	8008c08 <z_pend_curr>
		if (result == 0) {
 800838a:	b918      	cbnz	r0, 8008394 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
 800838c:	4b02      	ldr	r3, [pc, #8]	; (8008398 <k_mem_slab_alloc+0x58>)
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	6023      	str	r3, [r4, #0]
}
 8008394:	b003      	add	sp, #12
 8008396:	bd30      	pop	{r4, r5, pc}
 8008398:	200020e8 	.word	0x200020e8

0800839c <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	Z_STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	4605      	mov	r5, r0
 80083a0:	460f      	mov	r7, r1
	__asm__ volatile(
 80083a2:	f04f 0310 	mov.w	r3, #16
 80083a6:	f3ef 8611 	mrs	r6, BASEPRI
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
 80083b2:	4b06      	ldr	r3, [pc, #24]	; (80083cc <k_thread_foreach+0x30>)
 80083b4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80083b6:	b924      	cbnz	r4, 80083c2 <k_thread_foreach+0x26>
	__asm__ volatile(
 80083b8:	f386 8811 	msr	BASEPRI, r6
 80083bc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
 80083c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
 80083c2:	4620      	mov	r0, r4
 80083c4:	4639      	mov	r1, r7
 80083c6:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
 80083c8:	6f64      	ldr	r4, [r4, #116]	; 0x74
 80083ca:	e7f4      	b.n	80083b6 <k_thread_foreach+0x1a>
 80083cc:	200020e8 	.word	0x200020e8

080083d0 <z_thread_monitor_exit>:
	__asm__ volatile(
 80083d0:	f04f 0310 	mov.w	r3, #16
 80083d4:	f3ef 8111 	mrs	r1, BASEPRI
 80083d8:	f383 8811 	msr	BASEPRI, r3
 80083dc:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
 80083e0:	4a09      	ldr	r2, [pc, #36]	; (8008408 <z_thread_monitor_exit+0x38>)
 80083e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80083e4:	4283      	cmp	r3, r0
 80083e6:	d107      	bne.n	80083f8 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
 80083e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ea:	6313      	str	r3, [r2, #48]	; 0x30
	__asm__ volatile(
 80083ec:	f381 8811 	msr	BASEPRI, r1
 80083f0:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
 80083f4:	4770      	bx	lr
 80083f6:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0f7      	beq.n	80083ec <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
 80083fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
 80083fe:	4282      	cmp	r2, r0
 8008400:	d1f9      	bne.n	80083f6 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
 8008402:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8008404:	675a      	str	r2, [r3, #116]	; 0x74
 8008406:	e7f1      	b.n	80083ec <z_thread_monitor_exit+0x1c>
 8008408:	200020e8 	.word	0x200020e8

0800840c <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
 800840c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
 800840e:	4604      	mov	r4, r0
 8008410:	b908      	cbnz	r0, 8008416 <z_impl_k_thread_name_set+0xa>
		thread = _current;
 8008412:	4b05      	ldr	r3, [pc, #20]	; (8008428 <z_impl_k_thread_name_set+0x1c>)
 8008414:	689c      	ldr	r4, [r3, #8]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8008416:	221f      	movs	r2, #31
 8008418:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800841c:	f005 fa22 	bl	800d864 <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 8008420:	2000      	movs	r0, #0
 8008422:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
 8008426:	bd10      	pop	{r4, pc}
 8008428:	200020e8 	.word	0x200020e8

0800842c <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
 800842c:	7b43      	ldrb	r3, [r0, #13]
 800842e:	2b10      	cmp	r3, #16
 8008430:	d80e      	bhi.n	8008450 <k_thread_state_str+0x24>
 8008432:	2b10      	cmp	r3, #16
 8008434:	d81c      	bhi.n	8008470 <k_thread_state_str+0x44>
 8008436:	e8df f003 	tbb	[pc, r3]
 800843a:	091d      	.short	0x091d
 800843c:	1b151b13 	.word	0x1b151b13
 8008440:	1b171b1b 	.word	0x1b171b1b
 8008444:	1b1b1b1b 	.word	0x1b1b1b1b
 8008448:	1b1b      	.short	0x1b1b
 800844a:	19          	.byte	0x19
 800844b:	00          	.byte	0x00
 800844c:	480b      	ldr	r0, [pc, #44]	; (800847c <k_thread_state_str+0x50>)
 800844e:	4770      	bx	lr
 8008450:	2b20      	cmp	r3, #32
 8008452:	d011      	beq.n	8008478 <k_thread_state_str+0x4c>
		break;
	case _THREAD_ABORTING:
		return "aborting";
		break;
	case _THREAD_QUEUED:
		return "queued";
 8008454:	4a0a      	ldr	r2, [pc, #40]	; (8008480 <k_thread_state_str+0x54>)
 8008456:	480b      	ldr	r0, [pc, #44]	; (8008484 <k_thread_state_str+0x58>)
 8008458:	2b80      	cmp	r3, #128	; 0x80
 800845a:	bf08      	it	eq
 800845c:	4610      	moveq	r0, r2
 800845e:	4770      	bx	lr
		return "pending";
 8008460:	4809      	ldr	r0, [pc, #36]	; (8008488 <k_thread_state_str+0x5c>)
 8008462:	4770      	bx	lr
		return "prestart";
 8008464:	4809      	ldr	r0, [pc, #36]	; (800848c <k_thread_state_str+0x60>)
 8008466:	4770      	bx	lr
		return "dead";
 8008468:	4809      	ldr	r0, [pc, #36]	; (8008490 <k_thread_state_str+0x64>)
 800846a:	4770      	bx	lr
		return "suspended";
 800846c:	4809      	ldr	r0, [pc, #36]	; (8008494 <k_thread_state_str+0x68>)
 800846e:	4770      	bx	lr
		break;
	}
	return "unknown";
 8008470:	4804      	ldr	r0, [pc, #16]	; (8008484 <k_thread_state_str+0x58>)
 8008472:	4770      	bx	lr
		return "";
 8008474:	4808      	ldr	r0, [pc, #32]	; (8008498 <k_thread_state_str+0x6c>)
 8008476:	4770      	bx	lr
		return "aborting";
 8008478:	4808      	ldr	r0, [pc, #32]	; (800849c <k_thread_state_str+0x70>)
}
 800847a:	4770      	bx	lr
 800847c:	08010c9f 	.word	0x08010c9f
 8008480:	08010cae 	.word	0x08010cae
 8008484:	08010bba 	.word	0x08010bba
 8008488:	08010c7f 	.word	0x08010c7f
 800848c:	08010c87 	.word	0x08010c87
 8008490:	08010c90 	.word	0x08010c90
 8008494:	08010c95 	.word	0x08010c95
 8008498:	0800f966 	.word	0x0800f966
 800849c:	08010ca5 	.word	0x08010ca5

080084a0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	b085      	sub	sp, #20
 80084a6:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 80084a8:	f100 0358 	add.w	r3, r0, #88	; 0x58
 80084ac:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 80084b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084b2:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80084b4:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
 80084b6:	2304      	movs	r3, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80084b8:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
 80084bc:	7343      	strb	r3, [r0, #13]

	thread_base->prio = priority;
 80084be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084c0:	7383      	strb	r3, [r0, #14]
	thread_base->pended_on = NULL;
 80084c2:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 80084c4:	f101 0320 	add.w	r3, r1, #32
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80084c8:	f10a 0720 	add.w	r7, sl, #32
{
 80084cc:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 80084ce:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80084d2:	460e      	mov	r6, r1
	thread_base->pended_on = NULL;
 80084d4:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 80084d6:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
 80084d8:	440f      	add	r7, r1
__ssp_bos_icheck3(memset, void *, int)
 80084da:	4652      	mov	r2, sl
 80084dc:	21aa      	movs	r1, #170	; 0xaa
 80084de:	4618      	mov	r0, r3
{
 80084e0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80084e4:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80084e8:	f005 f91e 	bl	800d728 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80084ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084ee:	9302      	str	r3, [sp, #8]
 80084f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->stack_info.delta = delta;
 80084f2:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	new_thread->stack_info.size = stack_buf_size;
 80084f6:	e9c4 0a27 	strd	r0, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80084fa:	e9cd b300 	strd	fp, r3, [sp]
 80084fe:	463a      	mov	r2, r7
 8008500:	4643      	mov	r3, r8
 8008502:	4631      	mov	r1, r6
 8008504:	4620      	mov	r0, r4
 8008506:	f7fd fd57 	bl	8005fb8 <arch_new_thread>
	new_thread->entry.parameter2 = p2;
 800850a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800850c:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
 800850e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
 8008510:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.parameter1 = p1;
 8008512:	e9c4 8b19 	strd	r8, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
 8008516:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
 8008518:	f04f 0210 	mov.w	r2, #16
 800851c:	f3ef 8311 	mrs	r3, BASEPRI
 8008520:	f382 8811 	msr	BASEPRI, r2
 8008524:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
 8008528:	4e0f      	ldr	r6, [pc, #60]	; (8008568 <z_setup_new_thread+0xc8>)
 800852a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800852c:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
 800852e:	6334      	str	r4, [r6, #48]	; 0x30
	__asm__ volatile(
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
 8008538:	f1b9 0f00 	cmp.w	r9, #0
 800853c:	d011      	beq.n	8008562 <z_setup_new_thread+0xc2>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 800853e:	221f      	movs	r2, #31
 8008540:	4649      	mov	r1, r9
 8008542:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8008546:	f005 f98d 	bl	800d864 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 800854a:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
 800854e:	68b3      	ldr	r3, [r6, #8]
 8008550:	b10b      	cbz	r3, 8008556 <z_setup_new_thread+0xb6>
	new_thread->resource_pool = _current->resource_pool;
 8008552:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
 8008556:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
 800855a:	4638      	mov	r0, r7
 800855c:	b005      	add	sp, #20
 800855e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
 8008562:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
 8008566:	e7f2      	b.n	800854e <z_setup_new_thread+0xae>
 8008568:	200020e8 	.word	0x200020e8

0800856c <z_impl_k_thread_create>:
{
 800856c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800856e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8008570:	2700      	movs	r7, #0
 8008572:	9705      	str	r7, [sp, #20]
 8008574:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008576:	9704      	str	r7, [sp, #16]
 8008578:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800857a:	9703      	str	r7, [sp, #12]
 800857c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800857e:	9702      	str	r7, [sp, #8]
{
 8008580:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8008584:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008586:	9701      	str	r7, [sp, #4]
 8008588:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800858a:	9700      	str	r7, [sp, #0]
{
 800858c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800858e:	f7ff ff87 	bl	80084a0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8008592:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008596:	bf08      	it	eq
 8008598:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800859c:	d005      	beq.n	80085aa <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800859e:	ea55 0306 	orrs.w	r3, r5, r6
 80085a2:	d105      	bne.n	80085b0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 80085a4:	4620      	mov	r0, r4
 80085a6:	f000 fc41 	bl	8008e2c <z_sched_start>
}
 80085aa:	4620      	mov	r0, r4
 80085ac:	b007      	add	sp, #28
 80085ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80085b0:	4903      	ldr	r1, [pc, #12]	; (80085c0 <z_impl_k_thread_create+0x54>)
 80085b2:	4632      	mov	r2, r6
 80085b4:	462b      	mov	r3, r5
 80085b6:	f104 0018 	add.w	r0, r4, #24
 80085ba:	f000 fe2d 	bl	8009218 <z_add_timeout>
 80085be:	e7f4      	b.n	80085aa <z_impl_k_thread_create+0x3e>
 80085c0:	0800d06f 	.word	0x0800d06f

080085c4 <z_init_static_threads>:
{
 80085c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085c6:	4c22      	ldr	r4, [pc, #136]	; (8008650 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 80085c8:	4d22      	ldr	r5, [pc, #136]	; (8008654 <z_init_static_threads+0x90>)
{
 80085ca:	b087      	sub	sp, #28
 80085cc:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 80085ce:	42ae      	cmp	r6, r5
 80085d0:	f104 0430 	add.w	r4, r4, #48	; 0x30
 80085d4:	d30b      	bcc.n	80085ee <z_init_static_threads+0x2a>
	k_sched_lock();
 80085d6:	f000 faa5 	bl	8008b24 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80085da:	4c1d      	ldr	r4, [pc, #116]	; (8008650 <z_init_static_threads+0x8c>)
 80085dc:	4f1e      	ldr	r7, [pc, #120]	; (8008658 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
 80085de:	260a      	movs	r6, #10
 80085e0:	42ac      	cmp	r4, r5
 80085e2:	d320      	bcc.n	8008626 <z_init_static_threads+0x62>
}
 80085e4:	b007      	add	sp, #28
 80085e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80085ea:	f000 bb53 	b.w	8008c94 <k_sched_unlock>
		z_setup_new_thread(
 80085ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80085f2:	9305      	str	r3, [sp, #20]
 80085f4:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80085fe:	9303      	str	r3, [sp, #12]
 8008600:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8008604:	9302      	str	r3, [sp, #8]
 8008606:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8008616:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800861a:	f7ff ff41 	bl	80084a0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800861e:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8008622:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8008624:	e7d2      	b.n	80085cc <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8008626:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008628:	1c53      	adds	r3, r2, #1
 800862a:	d009      	beq.n	8008640 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 800862c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8008630:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8008634:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8008638:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800863a:	d103      	bne.n	8008644 <z_init_static_threads+0x80>
	z_sched_start(thread);
 800863c:	f000 fbf6 	bl	8008e2c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8008640:	3430      	adds	r4, #48	; 0x30
 8008642:	e7cd      	b.n	80085e0 <z_init_static_threads+0x1c>
 8008644:	4639      	mov	r1, r7
 8008646:	3018      	adds	r0, #24
 8008648:	f000 fde6 	bl	8009218 <z_add_timeout>
 800864c:	e7f8      	b.n	8008640 <z_init_static_threads+0x7c>
 800864e:	bf00      	nop
 8008650:	20000368 	.word	0x20000368
 8008654:	20000368 	.word	0x20000368
 8008658:	0800d06f 	.word	0x0800d06f

0800865c <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
 800865c:	4800      	ldr	r0, [pc, #0]	; (8008660 <sys_kernel_version_get+0x4>)
 800865e:	4770      	bx	lr
 8008660:	02060000 	.word	0x02060000

08008664 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 8008664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008666:	469c      	mov	ip, r3
 8008668:	b085      	sub	sp, #20
 800866a:	4604      	mov	r4, r0

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 800866c:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 8008670:	f04f 0510 	mov.w	r5, #16
 8008674:	f3ef 8611 	mrs	r6, BASEPRI
 8008678:	f385 8811 	msr	BASEPRI, r5
 800867c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 8008680:	6903      	ldr	r3, [r0, #16]
 8008682:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008684:	429d      	cmp	r5, r3
 8008686:	d230      	bcs.n	80086ea <z_impl_k_msgq_put+0x86>
 8008688:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800868a:	f004 fd27 	bl	800d0dc <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800868e:	68e2      	ldr	r2, [r4, #12]
 8008690:	9903      	ldr	r1, [sp, #12]
 8008692:	4605      	mov	r5, r0
 8008694:	b178      	cbz	r0, 80086b6 <z_impl_k_msgq_put+0x52>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8008696:	2400      	movs	r4, #0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8008698:	6940      	ldr	r0, [r0, #20]
 800869a:	f005 f81d 	bl	800d6d8 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 800869e:	4628      	mov	r0, r5
 80086a0:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
 80086a4:	f004 fcd3 	bl	800d04e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 80086a8:	4638      	mov	r0, r7
 80086aa:	4631      	mov	r1, r6
 80086ac:	f000 fa28 	bl	8008b00 <z_reschedule>
			return 0;
 80086b0:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 80086b2:	b005      	add	sp, #20
 80086b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b6:	6a20      	ldr	r0, [r4, #32]
 80086b8:	f005 f80e 	bl	800d6d8 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 80086bc:	6a23      	ldr	r3, [r4, #32]
 80086be:	68e2      	ldr	r2, [r4, #12]
 80086c0:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 80086c2:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
 80086c4:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 80086c6:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
 80086c8:	bf04      	itt	eq
 80086ca:	6963      	ldreq	r3, [r4, #20]
 80086cc:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
 80086ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086d0:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
 80086d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
			msgq->used_msgs++;
 80086d6:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 80086d8:	2110      	movs	r1, #16
 80086da:	f004 ff1c 	bl	800d516 <z_handle_obj_poll_events>
		result = 0;
 80086de:	2000      	movs	r0, #0
	__asm__ volatile(
 80086e0:	f386 8811 	msr	BASEPRI, r6
 80086e4:	f3bf 8f6f 	isb	sy
	return result;
 80086e8:	e7e3      	b.n	80086b2 <z_impl_k_msgq_put+0x4e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80086ea:	ea52 000c 	orrs.w	r0, r2, ip
 80086ee:	d00a      	beq.n	8008706 <z_impl_k_msgq_put+0xa2>
		_current->base.swap_data = (void *) data;
 80086f0:	4806      	ldr	r0, [pc, #24]	; (800870c <z_impl_k_msgq_put+0xa8>)
 80086f2:	6880      	ldr	r0, [r0, #8]
 80086f4:	6141      	str	r1, [r0, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 80086f6:	e9cd 2c00 	strd	r2, ip, [sp]
 80086fa:	4631      	mov	r1, r6
 80086fc:	4622      	mov	r2, r4
 80086fe:	4638      	mov	r0, r7
 8008700:	f000 fa82 	bl	8008c08 <z_pend_curr>
		return result;
 8008704:	e7d5      	b.n	80086b2 <z_impl_k_msgq_put+0x4e>
		result = -ENOMSG;
 8008706:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800870a:	e7e9      	b.n	80086e0 <z_impl_k_msgq_put+0x7c>
 800870c:	200020e8 	.word	0x200020e8

08008710 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 8008710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008712:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 8008714:	f104 0708 	add.w	r7, r4, #8
{
 8008718:	4608      	mov	r0, r1
	__asm__ volatile(
 800871a:	f04f 0110 	mov.w	r1, #16
 800871e:	f3ef 8611 	mrs	r6, BASEPRI
 8008722:	f381 8811 	msr	BASEPRI, r1
 8008726:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 800872a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800872c:	2900      	cmp	r1, #0
 800872e:	d032      	beq.n	8008796 <z_impl_k_msgq_get+0x86>
 8008730:	68e2      	ldr	r2, [r4, #12]
 8008732:	69e1      	ldr	r1, [r4, #28]
 8008734:	f004 ffd0 	bl	800d6d8 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 8008738:	69e3      	ldr	r3, [r4, #28]
 800873a:	68e2      	ldr	r2, [r4, #12]
 800873c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
 800873e:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
 8008740:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
 8008742:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
 8008744:	bf04      	itt	eq
 8008746:	6963      	ldreq	r3, [r4, #20]
 8008748:	61e3      	streq	r3, [r4, #28]
		}
		msgq->used_msgs--;
 800874a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800874c:	3b01      	subs	r3, #1
 800874e:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8008750:	4620      	mov	r0, r4
 8008752:	f004 fcc3 	bl	800d0dc <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8008756:	4605      	mov	r5, r0
 8008758:	b368      	cbz	r0, 80087b6 <z_impl_k_msgq_get+0xa6>
 800875a:	6941      	ldr	r1, [r0, #20]
 800875c:	68e2      	ldr	r2, [r4, #12]
 800875e:	6a20      	ldr	r0, [r4, #32]
 8008760:	f004 ffba 	bl	800d6d8 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 8008764:	6a23      	ldr	r3, [r4, #32]
 8008766:	68e2      	ldr	r2, [r4, #12]
 8008768:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 800876a:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
 800876c:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 800876e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
 8008770:	bf04      	itt	eq
 8008772:	6963      	ldreq	r3, [r4, #20]
 8008774:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
 8008776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008778:	3301      	adds	r3, #1
 800877a:	6263      	str	r3, [r4, #36]	; 0x24
 800877c:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 800877e:	4628      	mov	r0, r5
 8008780:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
 8008784:	f004 fc63 	bl	800d04e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 8008788:	4638      	mov	r0, r7
 800878a:	4631      	mov	r1, r6
 800878c:	f000 f9b8 	bl	8008b00 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 8008790:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8008792:	b003      	add	sp, #12
 8008794:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8008796:	ea52 0103 	orrs.w	r1, r2, r3
 800879a:	d00a      	beq.n	80087b2 <z_impl_k_msgq_get+0xa2>
		_current->base.swap_data = data;
 800879c:	4908      	ldr	r1, [pc, #32]	; (80087c0 <z_impl_k_msgq_get+0xb0>)
 800879e:	6889      	ldr	r1, [r1, #8]
 80087a0:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 80087a2:	e9cd 2300 	strd	r2, r3, [sp]
 80087a6:	4631      	mov	r1, r6
 80087a8:	4622      	mov	r2, r4
 80087aa:	4638      	mov	r0, r7
 80087ac:	f000 fa2c 	bl	8008c08 <z_pend_curr>
		return result;
 80087b0:	e7ef      	b.n	8008792 <z_impl_k_msgq_get+0x82>
		result = -ENOMSG;
 80087b2:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 80087b6:	f386 8811 	msr	BASEPRI, r6
 80087ba:	f3bf 8f6f 	isb	sy
	return result;
 80087be:	e7e8      	b.n	8008792 <z_impl_k_msgq_get+0x82>
 80087c0:	200020e8 	.word	0x200020e8

080087c4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 80087c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80087c8:	4604      	mov	r4, r0
 80087ca:	4617      	mov	r7, r2
 80087cc:	461e      	mov	r6, r3
	__asm__ volatile(
 80087ce:	f04f 0310 	mov.w	r3, #16
 80087d2:	f3ef 8811 	mrs	r8, BASEPRI
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 80087de:	68c3      	ldr	r3, [r0, #12]
 80087e0:	4a32      	ldr	r2, [pc, #200]	; (80088ac <z_impl_k_mutex_lock+0xe8>)
 80087e2:	b16b      	cbz	r3, 8008800 <z_impl_k_mutex_lock+0x3c>
 80087e4:	6880      	ldr	r0, [r0, #8]
 80087e6:	6891      	ldr	r1, [r2, #8]
 80087e8:	4288      	cmp	r0, r1
 80087ea:	d019      	beq.n	8008820 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 80087ec:	ea57 0306 	orrs.w	r3, r7, r6
 80087f0:	d118      	bne.n	8008824 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 80087f2:	f388 8811 	msr	BASEPRI, r8
 80087f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 80087fa:	f06f 000f 	mvn.w	r0, #15
 80087fe:	e00c      	b.n	800881a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 8008800:	6891      	ldr	r1, [r2, #8]
 8008802:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8008806:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 8008808:	3301      	adds	r3, #1
 800880a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 800880c:	6893      	ldr	r3, [r2, #8]
 800880e:	60a3      	str	r3, [r4, #8]
 8008810:	f388 8811 	msr	BASEPRI, r8
 8008814:	f3bf 8f6f 	isb	sy
		return 0;
 8008818:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800881a:	b002      	add	sp, #8
 800881c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 8008820:	6921      	ldr	r1, [r4, #16]
 8008822:	e7f0      	b.n	8008806 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8008824:	f991 100e 	ldrsb.w	r1, [r1, #14]
 8008828:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
 800882c:	4299      	cmp	r1, r3
 800882e:	bfa8      	it	ge
 8008830:	4619      	movge	r1, r3
 8008832:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 8008836:	4291      	cmp	r1, r2
 8008838:	bfb8      	it	lt
 800883a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800883c:	428b      	cmp	r3, r1
 800883e:	dd2e      	ble.n	800889e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 8008840:	f004 fae4 	bl	800ce0c <adjust_owner_prio.isra.0>
 8008844:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8008846:	e9cd 7600 	strd	r7, r6, [sp]
 800884a:	4819      	ldr	r0, [pc, #100]	; (80088b0 <z_impl_k_mutex_lock+0xec>)
 800884c:	4622      	mov	r2, r4
 800884e:	4641      	mov	r1, r8
 8008850:	f000 f9da 	bl	8008c08 <z_pend_curr>
	if (got_mutex == 0) {
 8008854:	2800      	cmp	r0, #0
 8008856:	d0e0      	beq.n	800881a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 8008858:	f04f 0310 	mov.w	r3, #16
 800885c:	f3ef 8611 	mrs	r6, BASEPRI
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800886c:	429c      	cmp	r4, r3
 800886e:	d00a      	beq.n	8008886 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8008870:	b14b      	cbz	r3, 8008886 <z_impl_k_mutex_lock+0xc2>
 8008872:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8008876:	4299      	cmp	r1, r3
 8008878:	bfa8      	it	ge
 800887a:	4619      	movge	r1, r3
 800887c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8008880:	4299      	cmp	r1, r3
 8008882:	bfb8      	it	lt
 8008884:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8008886:	68a0      	ldr	r0, [r4, #8]
 8008888:	f004 fac0 	bl	800ce0c <adjust_owner_prio.isra.0>
 800888c:	b900      	cbnz	r0, 8008890 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
 800888e:	b145      	cbz	r5, 80088a2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 8008890:	4807      	ldr	r0, [pc, #28]	; (80088b0 <z_impl_k_mutex_lock+0xec>)
 8008892:	4631      	mov	r1, r6
 8008894:	f000 f934 	bl	8008b00 <z_reschedule>
	return -EAGAIN;
 8008898:	f06f 000a 	mvn.w	r0, #10
 800889c:	e7bd      	b.n	800881a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 800889e:	2500      	movs	r5, #0
 80088a0:	e7d1      	b.n	8008846 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
 80088a2:	f386 8811 	msr	BASEPRI, r6
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	e7f5      	b.n	8008898 <z_impl_k_mutex_lock+0xd4>
 80088ac:	200020e8 	.word	0x200020e8
 80088b0:	2000287b 	.word	0x2000287b

080088b4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 80088b4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 80088b6:	6883      	ldr	r3, [r0, #8]
{
 80088b8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d033      	beq.n	8008926 <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 80088be:	4a1d      	ldr	r2, [pc, #116]	; (8008934 <z_impl_k_mutex_unlock+0x80>)
 80088c0:	6892      	ldr	r2, [r2, #8]
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d132      	bne.n	800892c <z_impl_k_mutex_unlock+0x78>
	--_current->base.sched_locked;
 80088c6:	7bda      	ldrb	r2, [r3, #15]
 80088c8:	3a01      	subs	r2, #1
 80088ca:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
 80088cc:	68c3      	ldr	r3, [r0, #12]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d005      	beq.n	80088de <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 80088d2:	3b01      	subs	r3, #1
 80088d4:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
 80088d6:	f000 f9dd 	bl	8008c94 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 80088da:	2000      	movs	r0, #0
}
 80088dc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 80088de:	f04f 0310 	mov.w	r3, #16
 80088e2:	f3ef 8511 	mrs	r5, BASEPRI
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 80088ee:	6901      	ldr	r1, [r0, #16]
 80088f0:	6880      	ldr	r0, [r0, #8]
 80088f2:	f004 fa8b 	bl	800ce0c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 80088f6:	4620      	mov	r0, r4
 80088f8:	f004 fbf0 	bl	800d0dc <z_unpend_first_thread>
	mutex->owner = new_owner;
 80088fc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 80088fe:	b160      	cbz	r0, 800891a <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
 8008900:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8008904:	6122      	str	r2, [r4, #16]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
 800890c:	f004 fb9f 	bl	800d04e <z_ready_thread>
		z_reschedule(&lock, key);
 8008910:	4809      	ldr	r0, [pc, #36]	; (8008938 <z_impl_k_mutex_unlock+0x84>)
 8008912:	4629      	mov	r1, r5
 8008914:	f000 f8f4 	bl	8008b00 <z_reschedule>
 8008918:	e7dd      	b.n	80088d6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800891a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800891c:	f385 8811 	msr	BASEPRI, r5
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	e7d7      	b.n	80088d6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8008926:	f06f 0015 	mvn.w	r0, #21
 800892a:	e7d7      	b.n	80088dc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
 800892c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008930:	e7d4      	b.n	80088dc <z_impl_k_mutex_unlock+0x28>
 8008932:	bf00      	nop
 8008934:	200020e8 	.word	0x200020e8
 8008938:	2000287b 	.word	0x2000287b

0800893c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
 800893c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
 800893e:	f04f 0110 	mov.w	r1, #16
 8008942:	f3ef 8511 	mrs	r5, BASEPRI
 8008946:	f381 8811 	msr	BASEPRI, r1
 800894a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 800894e:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 8008950:	b19c      	cbz	r4, 800897a <z_impl_k_queue_get+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8008952:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8008954:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8008956:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 800895a:	4294      	cmp	r4, r2
	list->head = node;
 800895c:	6003      	str	r3, [r0, #0]
	list->tail = node;
 800895e:	bf08      	it	eq
 8008960:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 8008962:	2101      	movs	r1, #1
 8008964:	4620      	mov	r0, r4
 8008966:	f004 fac6 	bl	800cef6 <z_queue_node_peek>
 800896a:	4604      	mov	r4, r0
	__asm__ volatile(
 800896c:	f385 8811 	msr	BASEPRI, r5
 8008970:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
 8008974:	4620      	mov	r0, r4
 8008976:	b003      	add	sp, #12
 8008978:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800897a:	ea52 0103 	orrs.w	r1, r2, r3
 800897e:	d0f5      	beq.n	800896c <z_impl_k_queue_get+0x30>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
 8008980:	e9cd 2300 	strd	r2, r3, [sp]
 8008984:	4629      	mov	r1, r5
 8008986:	f100 020c 	add.w	r2, r0, #12
 800898a:	3008      	adds	r0, #8
 800898c:	f000 f93c 	bl	8008c08 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
 8008990:	2800      	cmp	r0, #0
 8008992:	d1ef      	bne.n	8008974 <z_impl_k_queue_get+0x38>
 8008994:	4b01      	ldr	r3, [pc, #4]	; (800899c <z_impl_k_queue_get+0x60>)
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	695c      	ldr	r4, [r3, #20]
 800899a:	e7eb      	b.n	8008974 <z_impl_k_queue_get+0x38>
 800899c:	200020e8 	.word	0x200020e8

080089a0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4604      	mov	r4, r0
	__asm__ volatile(
 80089a4:	f04f 0310 	mov.w	r3, #16
 80089a8:	f3ef 8511 	mrs	r5, BASEPRI
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 80089b4:	f004 fb92 	bl	800d0dc <z_unpend_first_thread>

	if (thread != NULL) {
 80089b8:	b150      	cbz	r0, 80089d0 <z_impl_k_sem_give+0x30>
 80089ba:	2200      	movs	r2, #0
 80089bc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 80089c0:	f004 fb45 	bl	800d04e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 80089c4:	4629      	mov	r1, r5
 80089c6:	4808      	ldr	r0, [pc, #32]	; (80089e8 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 80089c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 80089cc:	f000 b898 	b.w	8008b00 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80089d0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	bf18      	it	ne
 80089d8:	3301      	addne	r3, #1
 80089da:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 80089dc:	2102      	movs	r1, #2
 80089de:	f104 0010 	add.w	r0, r4, #16
 80089e2:	f004 fd98 	bl	800d516 <z_handle_obj_poll_events>
}
 80089e6:	e7ed      	b.n	80089c4 <z_impl_k_sem_give+0x24>
 80089e8:	2000287c 	.word	0x2000287c

080089ec <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 80089ec:	b513      	push	{r0, r1, r4, lr}
 80089ee:	f04f 0410 	mov.w	r4, #16
 80089f2:	f3ef 8111 	mrs	r1, BASEPRI
 80089f6:	f384 8811 	msr	BASEPRI, r4
 80089fa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 80089fe:	6884      	ldr	r4, [r0, #8]
 8008a00:	b144      	cbz	r4, 8008a14 <z_impl_k_sem_take+0x28>
		sem->count--;
 8008a02:	3c01      	subs	r4, #1
 8008a04:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8008a06:	f381 8811 	msr	BASEPRI, r1
 8008a0a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8008a0e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8008a10:	b002      	add	sp, #8
 8008a12:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8008a14:	ea52 0403 	orrs.w	r4, r2, r3
 8008a18:	d106      	bne.n	8008a28 <z_impl_k_sem_take+0x3c>
 8008a1a:	f381 8811 	msr	BASEPRI, r1
 8008a1e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8008a22:	f06f 000f 	mvn.w	r0, #15
 8008a26:	e7f3      	b.n	8008a10 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8008a28:	e9cd 2300 	strd	r2, r3, [sp]
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	4802      	ldr	r0, [pc, #8]	; (8008a38 <z_impl_k_sem_take+0x4c>)
 8008a30:	f000 f8ea 	bl	8008c08 <z_pend_curr>
	return ret;
 8008a34:	e7ec      	b.n	8008a10 <z_impl_k_sem_take+0x24>
 8008a36:	bf00      	nop
 8008a38:	2000287c 	.word	0x2000287c

08008a3c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	4604      	mov	r4, r0
	__asm__ volatile(
 8008a40:	f04f 0310 	mov.w	r3, #16
 8008a44:	f3ef 8511 	mrs	r5, BASEPRI
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
 8008a54:	4620      	mov	r0, r4
 8008a56:	f004 fb41 	bl	800d0dc <z_unpend_first_thread>
		if (thread == NULL) {
 8008a5a:	b120      	cbz	r0, 8008a66 <z_impl_k_sem_reset+0x2a>
 8008a5c:	f8c0 60b0 	str.w	r6, [r0, #176]	; 0xb0
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 8008a60:	f004 faf5 	bl	800d04e <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 8008a64:	e7f6      	b.n	8008a54 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
 8008a66:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8008a68:	2102      	movs	r1, #2
 8008a6a:	f104 0010 	add.w	r0, r4, #16
 8008a6e:	f004 fd52 	bl	800d516 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 8008a72:	4629      	mov	r1, r5
 8008a74:	4802      	ldr	r0, [pc, #8]	; (8008a80 <z_impl_k_sem_reset+0x44>)
}
 8008a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 8008a7a:	f000 b841 	b.w	8008b00 <z_reschedule>
 8008a7e:	bf00      	nop
 8008a80:	2000287c 	.word	0x2000287c

08008a84 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8008a84:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8008a86:	4c08      	ldr	r4, [pc, #32]	; (8008aa8 <z_reset_time_slice+0x24>)
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	b15b      	cbz	r3, 8008aa4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8008a8c:	f7fd f9c2 	bl	8005e14 <sys_clock_elapsed>
 8008a90:	6822      	ldr	r2, [r4, #0]
 8008a92:	4906      	ldr	r1, [pc, #24]	; (8008aac <z_reset_time_slice+0x28>)
 8008a94:	4410      	add	r0, r2
 8008a96:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
 8008a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f004 bb78 	b.w	800d194 <z_set_timeout_expiry>
}
 8008aa4:	bd10      	pop	{r4, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20002124 	.word	0x20002124
 8008aac:	200020e8 	.word	0x200020e8

08008ab0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8008ab0:	b510      	push	{r4, lr}
 8008ab2:	f04f 0310 	mov.w	r3, #16
 8008ab6:	f3ef 8411 	mrs	r4, BASEPRI
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8008ac2:	4b0c      	ldr	r3, [pc, #48]	; (8008af4 <k_sched_time_slice_set+0x44>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8008ac8:	4290      	cmp	r0, r2
			return ((uint32_t)t) * (to_hz / from_hz);
 8008aca:	f04f 030a 	mov.w	r3, #10
 8008ace:	4a0a      	ldr	r2, [pc, #40]	; (8008af8 <k_sched_time_slice_set+0x48>)
 8008ad0:	fb00 f303 	mul.w	r3, r0, r3
 8008ad4:	dc09      	bgt.n	8008aea <k_sched_time_slice_set+0x3a>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
 8008ad6:	6013      	str	r3, [r2, #0]
		}
		slice_max_prio = prio;
 8008ad8:	4b08      	ldr	r3, [pc, #32]	; (8008afc <k_sched_time_slice_set+0x4c>)
 8008ada:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8008adc:	f7ff ffd2 	bl	8008a84 <z_reset_time_slice>
	__asm__ volatile(
 8008ae0:	f384 8811 	msr	BASEPRI, r4
 8008ae4:	f3bf 8f6f 	isb	sy
	}
}
 8008ae8:	bd10      	pop	{r4, pc}
			slice_time = MAX(2, slice_time);
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	bfb8      	it	lt
 8008aee:	2302      	movlt	r3, #2
 8008af0:	e7f1      	b.n	8008ad6 <k_sched_time_slice_set+0x26>
 8008af2:	bf00      	nop
 8008af4:	200020e8 	.word	0x200020e8
 8008af8:	20002124 	.word	0x20002124
 8008afc:	20002120 	.word	0x20002120

08008b00 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8008b00:	b949      	cbnz	r1, 8008b16 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b02:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 8008b06:	b930      	cbnz	r0, 8008b16 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8008b08:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8008b0a:	6a1a      	ldr	r2, [r3, #32]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d001      	beq.n	8008b16 <z_reschedule+0x16>
	ret = arch_swap(key);
 8008b12:	f7fd b9b3 	b.w	8005e7c <arch_swap>
 8008b16:	f381 8811 	msr	BASEPRI, r1
 8008b1a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 8008b1e:	4770      	bx	lr
 8008b20:	200020e8 	.word	0x200020e8

08008b24 <k_sched_lock>:
	__asm__ volatile(
 8008b24:	f04f 0310 	mov.w	r3, #16
 8008b28:	f3ef 8111 	mrs	r1, BASEPRI
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	4b04      	ldr	r3, [pc, #16]	; (8008b48 <k_sched_lock+0x24>)
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	7bd3      	ldrb	r3, [r2, #15]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8008b3e:	f381 8811 	msr	BASEPRI, r1
 8008b42:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8008b46:	4770      	bx	lr
 8008b48:	200020e8 	.word	0x200020e8

08008b4c <update_cache>:
{
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8008b50:	480c      	ldr	r0, [pc, #48]	; (8008b84 <update_cache+0x38>)
 8008b52:	4d0d      	ldr	r5, [pc, #52]	; (8008b88 <update_cache+0x3c>)
 8008b54:	f004 fa4b 	bl	800cfee <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8008b58:	4604      	mov	r4, r0
 8008b5a:	b900      	cbnz	r0, 8008b5e <update_cache+0x12>
 8008b5c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8008b5e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8008b60:	b94a      	cbnz	r2, 8008b76 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 8008b62:	7b5a      	ldrb	r2, [r3, #13]
 8008b64:	06d2      	lsls	r2, r2, #27
 8008b66:	d106      	bne.n	8008b76 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8008b68:	69a2      	ldr	r2, [r4, #24]
 8008b6a:	b922      	cbnz	r2, 8008b76 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8008b6c:	89da      	ldrh	r2, [r3, #14]
 8008b6e:	2a7f      	cmp	r2, #127	; 0x7f
 8008b70:	d901      	bls.n	8008b76 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 8008b72:	622b      	str	r3, [r5, #32]
}
 8008b74:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8008b76:	429c      	cmp	r4, r3
 8008b78:	d001      	beq.n	8008b7e <update_cache+0x32>
			z_reset_time_slice();
 8008b7a:	f7ff ff83 	bl	8008a84 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8008b7e:	622c      	str	r4, [r5, #32]
}
 8008b80:	e7f8      	b.n	8008b74 <update_cache+0x28>
 8008b82:	bf00      	nop
 8008b84:	2000210c 	.word	0x2000210c
 8008b88:	200020e8 	.word	0x200020e8

08008b8c <unready_thread>:
{
 8008b8c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8008b8e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8008b92:	7b43      	ldrb	r3, [r0, #13]
 8008b94:	2a00      	cmp	r2, #0
{
 8008b96:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8008b98:	da04      	bge.n	8008ba4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8008ba0:	f004 f9d0 	bl	800cf44 <sys_dlist_remove>
	update_cache(thread == _current);
 8008ba4:	4b04      	ldr	r3, [pc, #16]	; (8008bb8 <unready_thread+0x2c>)
 8008ba6:	6898      	ldr	r0, [r3, #8]
 8008ba8:	1a43      	subs	r3, r0, r1
 8008baa:	4258      	negs	r0, r3
 8008bac:	4158      	adcs	r0, r3
}
 8008bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8008bb2:	f7ff bfcb 	b.w	8008b4c <update_cache>
 8008bb6:	bf00      	nop
 8008bb8:	200020e8 	.word	0x200020e8

08008bbc <pend>:
{
 8008bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	4615      	mov	r5, r2
 8008bc4:	461c      	mov	r4, r3
	__asm__ volatile(
 8008bc6:	f04f 0310 	mov.w	r3, #16
 8008bca:	f3ef 8711 	mrs	r7, BASEPRI
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 8008bd6:	f004 fa10 	bl	800cffa <add_to_waitq_locked>
	__asm__ volatile(
 8008bda:	f387 8811 	msr	BASEPRI, r7
 8008bde:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8008be2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8008be6:	bf08      	it	eq
 8008be8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 8008bec:	d008      	beq.n	8008c00 <pend+0x44>
 8008bee:	462a      	mov	r2, r5
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	f106 0018 	add.w	r0, r6, #24
 8008bf6:	4903      	ldr	r1, [pc, #12]	; (8008c04 <pend+0x48>)
}
 8008bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfc:	f000 bb0c 	b.w	8009218 <z_add_timeout>
 8008c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c04:	0800d06f 	.word	0x0800d06f

08008c08 <z_pend_curr>:
{
 8008c08:	b510      	push	{r4, lr}
	pending_current = _current;
 8008c0a:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <z_pend_curr+0x20>)
 8008c0c:	6898      	ldr	r0, [r3, #8]
 8008c0e:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <z_pend_curr+0x24>)
{
 8008c10:	460c      	mov	r4, r1
	pending_current = _current;
 8008c12:	6018      	str	r0, [r3, #0]
{
 8008c14:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 8008c16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c1a:	f7ff ffcf 	bl	8008bbc <pend>
 8008c1e:	4620      	mov	r0, r4
}
 8008c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c24:	f7fd b92a 	b.w	8005e7c <arch_swap>
 8008c28:	200020e8 	.word	0x200020e8
 8008c2c:	2000211c 	.word	0x2000211c

08008c30 <z_impl_k_thread_suspend>:
{
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8008c34:	3018      	adds	r0, #24
 8008c36:	f004 fa97 	bl	800d168 <z_abort_timeout>
	__asm__ volatile(
 8008c3a:	f04f 0310 	mov.w	r3, #16
 8008c3e:	f3ef 8611 	mrs	r6, BASEPRI
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8008c4a:	f994 200d 	ldrsb.w	r2, [r4, #13]
 8008c4e:	7b63      	ldrb	r3, [r4, #13]
 8008c50:	2a00      	cmp	r2, #0
 8008c52:	da05      	bge.n	8008c60 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c58:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f004 f972 	bl	800cf44 <sys_dlist_remove>
		update_cache(thread == _current);
 8008c60:	4d0b      	ldr	r5, [pc, #44]	; (8008c90 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8008c62:	7b63      	ldrb	r3, [r4, #13]
 8008c64:	68a8      	ldr	r0, [r5, #8]
 8008c66:	f043 0310 	orr.w	r3, r3, #16
 8008c6a:	7363      	strb	r3, [r4, #13]
 8008c6c:	1b03      	subs	r3, r0, r4
 8008c6e:	4258      	negs	r0, r3
 8008c70:	4158      	adcs	r0, r3
 8008c72:	f7ff ff6b 	bl	8008b4c <update_cache>
	__asm__ volatile(
 8008c76:	f386 8811 	msr	BASEPRI, r6
 8008c7a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8008c7e:	68ab      	ldr	r3, [r5, #8]
 8008c80:	42a3      	cmp	r3, r4
 8008c82:	d103      	bne.n	8008c8c <z_impl_k_thread_suspend+0x5c>
}
 8008c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8008c88:	f004 b9a7 	b.w	800cfda <z_reschedule_unlocked>
}
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
 8008c8e:	bf00      	nop
 8008c90:	200020e8 	.word	0x200020e8

08008c94 <k_sched_unlock>:
{
 8008c94:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008c96:	f04f 0310 	mov.w	r3, #16
 8008c9a:	f3ef 8411 	mrs	r4, BASEPRI
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8008ca6:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <k_sched_unlock+0x34>)
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	7bd3      	ldrb	r3, [r2, #15]
 8008cac:	3301      	adds	r3, #1
 8008cae:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	f7ff ff4b 	bl	8008b4c <update_cache>
	__asm__ volatile(
 8008cb6:	f384 8811 	msr	BASEPRI, r4
 8008cba:	f3bf 8f6f 	isb	sy
}
 8008cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8008cc2:	f004 b98a 	b.w	800cfda <z_reschedule_unlocked>
 8008cc6:	bf00      	nop
 8008cc8:	200020e8 	.word	0x200020e8

08008ccc <move_thread_to_end_of_prio_q>:
{
 8008ccc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8008cce:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8008cd2:	7b43      	ldrb	r3, [r0, #13]
 8008cd4:	2a00      	cmp	r2, #0
{
 8008cd6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8008cd8:	da04      	bge.n	8008ce4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cde:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8008ce0:	f004 f930 	bl	800cf44 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8008ce4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 8008ce6:	4a15      	ldr	r2, [pc, #84]	; (8008d3c <move_thread_to_end_of_prio_q+0x70>)
 8008ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cec:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8008cee:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008cf2:	f102 0524 	add.w	r5, r2, #36	; 0x24
 8008cf6:	42ab      	cmp	r3, r5
 8008cf8:	d01b      	beq.n	8008d32 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008cfa:	b1d3      	cbz	r3, 8008d32 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 8008cfc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8008d00:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 8008d04:	4286      	cmp	r6, r0
 8008d06:	d00f      	beq.n	8008d28 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 8008d08:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	dd0c      	ble.n	8008d28 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8008d0e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8008d10:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8008d14:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8008d16:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8008d18:	6890      	ldr	r0, [r2, #8]
 8008d1a:	1a43      	subs	r3, r0, r1
 8008d1c:	4258      	negs	r0, r3
}
 8008d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8008d22:	4158      	adcs	r0, r3
 8008d24:	f7ff bf12 	b.w	8008b4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	d002      	beq.n	8008d32 <move_thread_to_end_of_prio_q+0x66>
 8008d2c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e6      	bne.n	8008d00 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 8008d32:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 8008d36:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8008d38:	6291      	str	r1, [r2, #40]	; 0x28
}
 8008d3a:	e7ed      	b.n	8008d18 <move_thread_to_end_of_prio_q+0x4c>
 8008d3c:	200020e8 	.word	0x200020e8

08008d40 <z_time_slice>:
{
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4601      	mov	r1, r0
	__asm__ volatile(
 8008d44:	f04f 0310 	mov.w	r3, #16
 8008d48:	f3ef 8411 	mrs	r4, BASEPRI
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8008d54:	4b15      	ldr	r3, [pc, #84]	; (8008dac <z_time_slice+0x6c>)
 8008d56:	4a16      	ldr	r2, [pc, #88]	; (8008db0 <z_time_slice+0x70>)
 8008d58:	6898      	ldr	r0, [r3, #8]
 8008d5a:	6815      	ldr	r5, [r2, #0]
 8008d5c:	42a8      	cmp	r0, r5
 8008d5e:	d106      	bne.n	8008d6e <z_time_slice+0x2e>
			z_reset_time_slice();
 8008d60:	f7ff fe90 	bl	8008a84 <z_reset_time_slice>
	__asm__ volatile(
 8008d64:	f384 8811 	msr	BASEPRI, r4
 8008d68:	f3bf 8f6f 	isb	sy
}
 8008d6c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8008d6e:	2500      	movs	r5, #0
 8008d70:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8008d72:	4a10      	ldr	r2, [pc, #64]	; (8008db4 <z_time_slice+0x74>)
 8008d74:	6812      	ldr	r2, [r2, #0]
 8008d76:	b1ba      	cbz	r2, 8008da8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8008d78:	89c2      	ldrh	r2, [r0, #14]
 8008d7a:	2a7f      	cmp	r2, #127	; 0x7f
 8008d7c:	d814      	bhi.n	8008da8 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
 8008d7e:	7b42      	ldrb	r2, [r0, #13]
 8008d80:	06d2      	lsls	r2, r2, #27
 8008d82:	d111      	bne.n	8008da8 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8008d84:	4a0c      	ldr	r2, [pc, #48]	; (8008db8 <z_time_slice+0x78>)
 8008d86:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8008d8a:	6812      	ldr	r2, [r2, #0]
 8008d8c:	4295      	cmp	r5, r2
 8008d8e:	db0b      	blt.n	8008da8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8008d90:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <z_time_slice+0x7c>)
 8008d92:	4290      	cmp	r0, r2
 8008d94:	d008      	beq.n	8008da8 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
 8008d96:	691a      	ldr	r2, [r3, #16]
 8008d98:	428a      	cmp	r2, r1
 8008d9a:	dc02      	bgt.n	8008da2 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
 8008d9c:	f7ff ff96 	bl	8008ccc <move_thread_to_end_of_prio_q>
 8008da0:	e7de      	b.n	8008d60 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
 8008da2:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
 8008da4:	611a      	str	r2, [r3, #16]
 8008da6:	e7dd      	b.n	8008d64 <z_time_slice+0x24>
 8008da8:	2200      	movs	r2, #0
 8008daa:	e7fb      	b.n	8008da4 <z_time_slice+0x64>
 8008dac:	200020e8 	.word	0x200020e8
 8008db0:	2000211c 	.word	0x2000211c
 8008db4:	20002124 	.word	0x20002124
 8008db8:	20002120 	.word	0x20002120
 8008dbc:	20000730 	.word	0x20000730

08008dc0 <ready_thread>:
{
 8008dc0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8008dc2:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8008dc6:	7b43      	ldrb	r3, [r0, #13]
 8008dc8:	2a00      	cmp	r2, #0
 8008dca:	db2a      	blt.n	8008e22 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8008dcc:	06da      	lsls	r2, r3, #27
 8008dce:	d128      	bne.n	8008e22 <ready_thread+0x62>
 8008dd0:	6982      	ldr	r2, [r0, #24]
 8008dd2:	bb32      	cbnz	r2, 8008e22 <ready_thread+0x62>
	return list->head == list;
 8008dd4:	4a14      	ldr	r2, [pc, #80]	; (8008e28 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8008dd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008dda:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 8008ddc:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008de0:	f102 0524 	add.w	r5, r2, #36	; 0x24
 8008de4:	42ab      	cmp	r3, r5
 8008de6:	d017      	beq.n	8008e18 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008de8:	b1b3      	cbz	r3, 8008e18 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 8008dea:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8008dee:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8008df2:	428e      	cmp	r6, r1
 8008df4:	d00b      	beq.n	8008e0e <ready_thread+0x4e>
		return b2 - b1;
 8008df6:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008df8:	2900      	cmp	r1, #0
 8008dfa:	dd08      	ble.n	8008e0e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8008dfc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8008dfe:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8008e02:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8008e04:	6058      	str	r0, [r3, #4]
}
 8008e06:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8008e08:	2000      	movs	r0, #0
 8008e0a:	f7ff be9f 	b.w	8008b4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	d002      	beq.n	8008e18 <ready_thread+0x58>
 8008e12:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1ea      	bne.n	8008dee <ready_thread+0x2e>
	node->prev = tail;
 8008e18:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 8008e1c:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8008e1e:	6290      	str	r0, [r2, #40]	; 0x28
}
 8008e20:	e7f1      	b.n	8008e06 <ready_thread+0x46>
}
 8008e22:	bc70      	pop	{r4, r5, r6}
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	200020e8 	.word	0x200020e8

08008e2c <z_sched_start>:
{
 8008e2c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008e2e:	f04f 0210 	mov.w	r2, #16
 8008e32:	f3ef 8411 	mrs	r4, BASEPRI
 8008e36:	f382 8811 	msr	BASEPRI, r2
 8008e3a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8008e3e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8008e40:	0751      	lsls	r1, r2, #29
 8008e42:	d404      	bmi.n	8008e4e <z_sched_start+0x22>
	__asm__ volatile(
 8008e44:	f384 8811 	msr	BASEPRI, r4
 8008e48:	f3bf 8f6f 	isb	sy
}
 8008e4c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8008e4e:	f022 0204 	bic.w	r2, r2, #4
 8008e52:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8008e54:	f7ff ffb4 	bl	8008dc0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8008e58:	4621      	mov	r1, r4
 8008e5a:	4802      	ldr	r0, [pc, #8]	; (8008e64 <z_sched_start+0x38>)
}
 8008e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8008e60:	f7ff be4e 	b.w	8008b00 <z_reschedule>
 8008e64:	2000287d 	.word	0x2000287d

08008e68 <z_set_prio>:
{
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	4604      	mov	r4, r0
	__asm__ volatile(
 8008e6c:	f04f 0310 	mov.w	r3, #16
 8008e70:	f3ef 8611 	mrs	r6, BASEPRI
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 8008e7c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8008e7e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 8008e80:	b249      	sxtb	r1, r1
 8008e82:	d133      	bne.n	8008eec <z_set_prio+0x84>
		if (need_sched) {
 8008e84:	6982      	ldr	r2, [r0, #24]
 8008e86:	bb8a      	cbnz	r2, 8008eec <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e8c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8008e8e:	f004 f859 	bl	800cf44 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8008e92:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 8008e94:	4a17      	ldr	r2, [pc, #92]	; (8008ef4 <z_set_prio+0x8c>)
				thread->base.prio = prio;
 8008e96:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8008e98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e9c:	7343      	strb	r3, [r0, #13]
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008ea4:	4283      	cmp	r3, r0
 8008ea6:	d01b      	beq.n	8008ee0 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008ea8:	b1d3      	cbz	r3, 8008ee0 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
 8008eaa:	6a97      	ldr	r7, [r2, #40]	; 0x28
	int32_t b2 = thread_2->base.prio;
 8008eac:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
 8008eb0:	42a9      	cmp	r1, r5
 8008eb2:	d010      	beq.n	8008ed6 <z_set_prio+0x6e>
		return b2 - b1;
 8008eb4:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	dd0d      	ble.n	8008ed6 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
 8008eba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8008ebc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8008ec0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8008ec2:	605c      	str	r4, [r3, #4]
			update_cache(1);
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	f7ff fe41 	bl	8008b4c <update_cache>
 8008eca:	2001      	movs	r0, #1
	__asm__ volatile(
 8008ecc:	f386 8811 	msr	BASEPRI, r6
 8008ed0:	f3bf 8f6f 	isb	sy
}
 8008ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8008ed6:	42bb      	cmp	r3, r7
 8008ed8:	d002      	beq.n	8008ee0 <z_set_prio+0x78>
 8008eda:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1e5      	bne.n	8008eac <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
 8008ee0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->prev = tail;
 8008ee2:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
 8008ee6:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8008ee8:	6294      	str	r4, [r2, #40]	; 0x28
}
 8008eea:	e7eb      	b.n	8008ec4 <z_set_prio+0x5c>
			thread->base.prio = prio;
 8008eec:	73a1      	strb	r1, [r4, #14]
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e7ec      	b.n	8008ecc <z_set_prio+0x64>
 8008ef2:	bf00      	nop
 8008ef4:	200020e8 	.word	0x200020e8

08008ef8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8008ef8:	4b04      	ldr	r3, [pc, #16]	; (8008f0c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8008efa:	2100      	movs	r1, #0
 8008efc:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 8008f00:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 8008f04:	4608      	mov	r0, r1
 8008f06:	f7ff bdd3 	b.w	8008ab0 <k_sched_time_slice_set>
 8008f0a:	bf00      	nop
 8008f0c:	200020e8 	.word	0x200020e8

08008f10 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8008f12:	f04f 0310 	mov.w	r3, #16
 8008f16:	f3ef 8511 	mrs	r5, BASEPRI
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
 8008f22:	491a      	ldr	r1, [pc, #104]	; (8008f8c <z_impl_k_yield+0x7c>)
 8008f24:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008f26:	7b43      	ldrb	r3, [r0, #13]
 8008f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f2c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8008f2e:	f004 f809 	bl	800cf44 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
 8008f32:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8008f34:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 8008f36:	4608      	mov	r0, r1
 8008f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f3c:	735a      	strb	r2, [r3, #13]
 8008f3e:	f850 2f24 	ldr.w	r2, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008f42:	4282      	cmp	r2, r0
 8008f44:	d01c      	beq.n	8008f80 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008f46:	b1da      	cbz	r2, 8008f80 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 8008f48:	6a8f      	ldr	r7, [r1, #40]	; 0x28
	int32_t b1 = thread_1->base.prio;
 8008f4a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8008f4e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 8008f52:	42a6      	cmp	r6, r4
 8008f54:	d00f      	beq.n	8008f76 <z_impl_k_yield+0x66>
		return b2 - b1;
 8008f56:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008f58:	2c00      	cmp	r4, #0
 8008f5a:	dd0c      	ble.n	8008f76 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 8008f5c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8008f5e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8008f62:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8008f64:	6053      	str	r3, [r2, #4]
	update_cache(1);
 8008f66:	2001      	movs	r0, #1
 8008f68:	f7ff fdf0 	bl	8008b4c <update_cache>
 8008f6c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8008f6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f72:	f7fc bf83 	b.w	8005e7c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8008f76:	42ba      	cmp	r2, r7
 8008f78:	d002      	beq.n	8008f80 <z_impl_k_yield+0x70>
 8008f7a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008f7c:	2a00      	cmp	r2, #0
 8008f7e:	d1e6      	bne.n	8008f4e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 8008f80:	6a8a      	ldr	r2, [r1, #40]	; 0x28
	node->prev = tail;
 8008f82:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 8008f86:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8008f88:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008f8a:	e7ec      	b.n	8008f66 <z_impl_k_yield+0x56>
 8008f8c:	200020e8 	.word	0x200020e8

08008f90 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8008f90:	ea50 0301 	orrs.w	r3, r0, r1
{
 8008f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f98:	4605      	mov	r5, r0
 8008f9a:	460e      	mov	r6, r1
	if (ticks == 0) {
 8008f9c:	d103      	bne.n	8008fa6 <z_tick_sleep+0x16>
	z_impl_k_yield();
 8008f9e:	f7ff ffb7 	bl	8008f10 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	e033      	b.n	800900e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 8008fa6:	f06f 0401 	mvn.w	r4, #1
 8008faa:	1a24      	subs	r4, r4, r0
 8008fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fb0:	eb63 0301 	sbc.w	r3, r3, r1
 8008fb4:	2c01      	cmp	r4, #1
 8008fb6:	f173 0300 	sbcs.w	r3, r3, #0
 8008fba:	da02      	bge.n	8008fc2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8008fbc:	f004 f905 	bl	800d1ca <sys_clock_tick_get_32>
 8008fc0:	1944      	adds	r4, r0, r5
 8008fc2:	f04f 0310 	mov.w	r3, #16
 8008fc6:	f3ef 8811 	mrs	r8, BASEPRI
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8008fd2:	4f10      	ldr	r7, [pc, #64]	; (8009014 <z_tick_sleep+0x84>)
 8008fd4:	4b10      	ldr	r3, [pc, #64]	; (8009018 <z_tick_sleep+0x88>)
 8008fd6:	68b8      	ldr	r0, [r7, #8]
 8008fd8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8008fda:	f7ff fdd7 	bl	8008b8c <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8008fde:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8008fe0:	490e      	ldr	r1, [pc, #56]	; (800901c <z_tick_sleep+0x8c>)
 8008fe2:	462a      	mov	r2, r5
 8008fe4:	4633      	mov	r3, r6
 8008fe6:	3018      	adds	r0, #24
 8008fe8:	f000 f916 	bl	8009218 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8008fec:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8008fee:	7b53      	ldrb	r3, [r2, #13]
 8008ff0:	f043 0310 	orr.w	r3, r3, #16
 8008ff4:	7353      	strb	r3, [r2, #13]
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	f7fc ff40 	bl	8005e7c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8008ffc:	f004 f8e5 	bl	800d1ca <sys_clock_tick_get_32>
 8009000:	1a20      	subs	r0, r4, r0
 8009002:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8009006:	2801      	cmp	r0, #1
 8009008:	f173 0300 	sbcs.w	r3, r3, #0
 800900c:	dbc9      	blt.n	8008fa2 <z_tick_sleep+0x12>
}
 800900e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009012:	bf00      	nop
 8009014:	200020e8 	.word	0x200020e8
 8009018:	2000211c 	.word	0x2000211c
 800901c:	0800d06f 	.word	0x0800d06f

08009020 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8009020:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8009024:	bf08      	it	eq
 8009026:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 800902a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800902c:	d106      	bne.n	800903c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 800902e:	4b07      	ldr	r3, [pc, #28]	; (800904c <z_impl_k_sleep+0x2c>)
 8009030:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8009032:	f7ff fdfd 	bl	8008c30 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8009036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 800903a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 800903c:	f7ff ffa8 	bl	8008f90 <z_tick_sleep>
			return t / (from_hz / to_hz);
 8009040:	220a      	movs	r2, #10
 8009042:	2300      	movs	r3, #0
 8009044:	17c1      	asrs	r1, r0, #31
 8009046:	f7f7 fd31 	bl	8000aac <__aeabi_uldivmod>
	return ret;
 800904a:	e7f6      	b.n	800903a <z_impl_k_sleep+0x1a>
 800904c:	200020e8 	.word	0x200020e8

08009050 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8009050:	4b01      	ldr	r3, [pc, #4]	; (8009058 <z_impl_k_current_get+0x8>)
 8009052:	6898      	ldr	r0, [r3, #8]
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	200020e8 	.word	0x200020e8

0800905c <z_impl_k_is_preempt_thread>:
 800905c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
 8009060:	b93b      	cbnz	r3, 8009072 <z_impl_k_is_preempt_thread+0x16>
 8009062:	4b05      	ldr	r3, [pc, #20]	; (8009078 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8009064:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
 8009066:	89d8      	ldrh	r0, [r3, #14]
 8009068:	287f      	cmp	r0, #127	; 0x7f
 800906a:	bf8c      	ite	hi
 800906c:	2000      	movhi	r0, #0
 800906e:	2001      	movls	r0, #1
 8009070:	4770      	bx	lr
 8009072:	2000      	movs	r0, #0
}
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	200020e8 	.word	0x200020e8

0800907c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 800907c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009080:	4604      	mov	r4, r0
 8009082:	f04f 0310 	mov.w	r3, #16
 8009086:	f3ef 8611 	mrs	r6, BASEPRI
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8009092:	7b43      	ldrb	r3, [r0, #13]
 8009094:	071a      	lsls	r2, r3, #28
 8009096:	d505      	bpl.n	80090a4 <z_thread_abort+0x28>
	__asm__ volatile(
 8009098:	f386 8811 	msr	BASEPRI, r6
 800909c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 80090a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80090a4:	f023 0220 	bic.w	r2, r3, #32
 80090a8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 80090ac:	09d2      	lsrs	r2, r2, #7
 80090ae:	d123      	bne.n	80090f8 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80090b0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 80090b2:	68a3      	ldr	r3, [r4, #8]
 80090b4:	b113      	cbz	r3, 80090bc <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 80090b6:	4620      	mov	r0, r4
 80090b8:	f003 ff4c 	bl	800cf54 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 80090bc:	f104 0018 	add.w	r0, r4, #24
 80090c0:	f004 f852 	bl	800d168 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80090c4:	f104 0758 	add.w	r7, r4, #88	; 0x58
 80090c8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 80090cc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80090ce:	42bd      	cmp	r5, r7
 80090d0:	d000      	beq.n	80090d4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80090d2:	b9cd      	cbnz	r5, 8009108 <z_thread_abort+0x8c>
		update_cache(1);
 80090d4:	2001      	movs	r0, #1
 80090d6:	f7ff fd39 	bl	8008b4c <update_cache>
		z_thread_monitor_exit(thread);
 80090da:	4620      	mov	r0, r4
 80090dc:	f7ff f978 	bl	80083d0 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
 80090e0:	4b10      	ldr	r3, [pc, #64]	; (8009124 <z_thread_abort+0xa8>)
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	d1d7      	bne.n	8009098 <z_thread_abort+0x1c>
 80090e8:	f3ef 8305 	mrs	r3, IPSR
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1d3      	bne.n	8009098 <z_thread_abort+0x1c>
 80090f0:	4630      	mov	r0, r6
 80090f2:	f7fc fec3 	bl	8005e7c <arch_swap>
	return ret;
 80090f6:	e7cf      	b.n	8009098 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80090f8:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 80090fc:	f043 0308 	orr.w	r3, r3, #8
 8009100:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8009102:	f003 ff1f 	bl	800cf44 <sys_dlist_remove>
}
 8009106:	e7d4      	b.n	80090b2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 8009108:	4628      	mov	r0, r5
 800910a:	f003 ff23 	bl	800cf54 <unpend_thread_no_timeout>
 800910e:	f105 0018 	add.w	r0, r5, #24
 8009112:	f004 f829 	bl	800d168 <z_abort_timeout>
 8009116:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
 800911a:	4628      	mov	r0, r5
 800911c:	f7ff fe50 	bl	8008dc0 <ready_thread>
 8009120:	e7d4      	b.n	80090cc <z_thread_abort+0x50>
 8009122:	bf00      	nop
 8009124:	200020e8 	.word	0x200020e8

08009128 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8009128:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800912a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 800912e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8009130:	e9cd 6700 	strd	r6, r7, [sp]
 8009134:	f7ff fd68 	bl	8008c08 <z_pend_curr>

	if (data != NULL) {
 8009138:	b11c      	cbz	r4, 8009142 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 800913a:	4b03      	ldr	r3, [pc, #12]	; (8009148 <z_sched_wait+0x20>)
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 8009142:	b002      	add	sp, #8
 8009144:	bdd0      	pop	{r4, r6, r7, pc}
 8009146:	bf00      	nop
 8009148:	200020e8 	.word	0x200020e8

0800914c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 800914c:	b508      	push	{r3, lr}
 800914e:	4806      	ldr	r0, [pc, #24]	; (8009168 <z_data_copy+0x1c>)
 8009150:	4a06      	ldr	r2, [pc, #24]	; (800916c <z_data_copy+0x20>)
 8009152:	4907      	ldr	r1, [pc, #28]	; (8009170 <z_data_copy+0x24>)
 8009154:	1a12      	subs	r2, r2, r0
 8009156:	f004 fabf 	bl	800d6d8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800915a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800915e:	4a05      	ldr	r2, [pc, #20]	; (8009174 <z_data_copy+0x28>)
 8009160:	4905      	ldr	r1, [pc, #20]	; (8009178 <z_data_copy+0x2c>)
 8009162:	4806      	ldr	r0, [pc, #24]	; (800917c <z_data_copy+0x30>)
 8009164:	f004 bab8 	b.w	800d6d8 <memcpy>
 8009168:	20000000 	.word	0x20000000
 800916c:	20000404 	.word	0x20000404
 8009170:	08010e38 	.word	0x08010e38
 8009174:	00000000 	.word	0x00000000
 8009178:	08010e38 	.word	0x08010e38
 800917c:	20000000 	.word	0x20000000

08009180 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8009180:	4b03      	ldr	r3, [pc, #12]	; (8009190 <elapsed+0x10>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	b90b      	cbnz	r3, 800918a <elapsed+0xa>
 8009186:	f7fc be45 	b.w	8005e14 <sys_clock_elapsed>
}
 800918a:	2000      	movs	r0, #0
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	20002128 	.word	0x20002128

08009194 <next_timeout>:
	return list->head == list;
 8009194:	4b11      	ldr	r3, [pc, #68]	; (80091dc <next_timeout+0x48>)

static int32_t next_timeout(void)
{
 8009196:	b510      	push	{r4, lr}
 8009198:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800919a:	429c      	cmp	r4, r3
 800919c:	bf08      	it	eq
 800919e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 80091a0:	f7ff ffee 	bl	8009180 <elapsed>
 80091a4:	4602      	mov	r2, r0
	int32_t ret = to == NULL ? MAX_WAIT
 80091a6:	b16c      	cbz	r4, 80091c4 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 80091a8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80091ac:	1a80      	subs	r0, r0, r2
 80091ae:	eb61 72e2 	sbc.w	r2, r1, r2, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 80091b2:	2801      	cmp	r0, #1
 80091b4:	f172 0300 	sbcs.w	r3, r2, #0
 80091b8:	db0d      	blt.n	80091d6 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 80091ba:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80091be:	f172 0300 	sbcs.w	r3, r2, #0
 80091c2:	db01      	blt.n	80091c8 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
 80091c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 80091c8:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <next_timeout+0x4c>)
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	b113      	cbz	r3, 80091d4 <next_timeout+0x40>
 80091ce:	4298      	cmp	r0, r3
 80091d0:	bfa8      	it	ge
 80091d2:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 80091d4:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 80091d6:	2000      	movs	r0, #0
 80091d8:	e7f6      	b.n	80091c8 <next_timeout+0x34>
 80091da:	bf00      	nop
 80091dc:	20000148 	.word	0x20000148
 80091e0:	200020e8 	.word	0x200020e8

080091e4 <remove_timeout>:
{
 80091e4:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 80091e6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80091e8:	b168      	cbz	r0, 8009206 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 80091ea:	4a0a      	ldr	r2, [pc, #40]	; (8009214 <remove_timeout+0x30>)
 80091ec:	6852      	ldr	r2, [r2, #4]
 80091ee:	4290      	cmp	r0, r2
 80091f0:	d009      	beq.n	8009206 <remove_timeout+0x22>
	if (next(t) != NULL) {
 80091f2:	b143      	cbz	r3, 8009206 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80091f4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80091f8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80091fc:	1912      	adds	r2, r2, r4
 80091fe:	eb41 0105 	adc.w	r1, r1, r5
 8009202:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8009206:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8009208:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800920a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800920c:	2300      	movs	r3, #0
	node->prev = NULL;
 800920e:	e9c0 3300 	strd	r3, r3, [r0]
}
 8009212:	bd30      	pop	{r4, r5, pc}
 8009214:	20000148 	.word	0x20000148

08009218 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8009218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800921c:	bf08      	it	eq
 800921e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8009222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009224:	4604      	mov	r4, r0
 8009226:	461f      	mov	r7, r3
 8009228:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800922a:	d065      	beq.n	80092f8 <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800922c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 800922e:	f04f 0310 	mov.w	r3, #16
 8009232:	f3ef 8611 	mrs	r6, BASEPRI
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800923e:	f06f 0201 	mvn.w	r2, #1
 8009242:	1b53      	subs	r3, r2, r5
 8009244:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009248:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800924c:	2b00      	cmp	r3, #0
 800924e:	db1b      	blt.n	8009288 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8009250:	4b2a      	ldr	r3, [pc, #168]	; (80092fc <z_add_timeout+0xe4>)
 8009252:	e9d3 1300 	ldrd	r1, r3, [r3]
 8009256:	1a52      	subs	r2, r2, r1
 8009258:	eb6c 0303 	sbc.w	r3, ip, r3
 800925c:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 800925e:	eb63 0307 	sbc.w	r3, r3, r7
 8009262:	2d01      	cmp	r5, #1
 8009264:	f173 0200 	sbcs.w	r2, r3, #0
 8009268:	da01      	bge.n	800926e <z_add_timeout+0x56>
 800926a:	2501      	movs	r5, #1
 800926c:	2300      	movs	r3, #0
	return list->head == list;
 800926e:	4824      	ldr	r0, [pc, #144]	; (8009300 <z_add_timeout+0xe8>)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8009270:	e9c4 5304 	strd	r5, r3, [r4, #16]
	sys_dnode_t *const tail = list->tail;
 8009274:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009278:	4283      	cmp	r3, r0
 800927a:	d116      	bne.n	80092aa <z_add_timeout+0x92>
	node->prev = tail;
 800927c:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8009280:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8009284:	6044      	str	r4, [r0, #4]
}
 8009286:	e024      	b.n	80092d2 <z_add_timeout+0xba>
 8009288:	f7ff ff7a 	bl	8009180 <elapsed>
 800928c:	3501      	adds	r5, #1
 800928e:	f147 0300 	adc.w	r3, r7, #0
 8009292:	182d      	adds	r5, r5, r0
 8009294:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8009298:	e7e9      	b.n	800926e <z_add_timeout+0x56>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 800929a:	1a52      	subs	r2, r2, r1
 800929c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 80092a0:	4563      	cmp	r3, ip
 80092a2:	e9c4 2504 	strd	r2, r5, [r4, #16]
 80092a6:	d0e9      	beq.n	800927c <z_add_timeout+0x64>
 80092a8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0e6      	beq.n	800927c <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 80092ae:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 80092b2:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 80092b6:	428a      	cmp	r2, r1
 80092b8:	eb75 0e07 	sbcs.w	lr, r5, r7
 80092bc:	daed      	bge.n	800929a <z_add_timeout+0x82>
				t->dticks -= to->dticks;
 80092be:	1a8a      	subs	r2, r1, r2
 80092c0:	eb67 0505 	sbc.w	r5, r7, r5
 80092c4:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 80092c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80092ca:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 80092ce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80092d0:	605c      	str	r4, [r3, #4]
	return list->head == list;
 80092d2:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80092d4:	4283      	cmp	r3, r0
 80092d6:	d00b      	beq.n	80092f0 <z_add_timeout+0xd8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80092d8:	429c      	cmp	r4, r3
 80092da:	d109      	bne.n	80092f0 <z_add_timeout+0xd8>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 80092dc:	f7ff ff5a 	bl	8009194 <next_timeout>

			if (next_time == 0 ||
 80092e0:	b118      	cbz	r0, 80092ea <z_add_timeout+0xd2>
			    _current_cpu->slice_ticks != next_time) {
 80092e2:	4b08      	ldr	r3, [pc, #32]	; (8009304 <z_add_timeout+0xec>)
			if (next_time == 0 ||
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	4283      	cmp	r3, r0
 80092e8:	d002      	beq.n	80092f0 <z_add_timeout+0xd8>
				sys_clock_set_timeout(next_time, false);
 80092ea:	2100      	movs	r1, #0
 80092ec:	f7fc fd22 	bl	8005d34 <sys_clock_set_timeout>
	__asm__ volatile(
 80092f0:	f386 8811 	msr	BASEPRI, r6
 80092f4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 80092f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20000920 	.word	0x20000920
 8009300:	20000148 	.word	0x20000148
 8009304:	200020e8 	.word	0x200020e8

08009308 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8009308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800930c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800930e:	f7ff fd17 	bl	8008d40 <z_time_slice>
	__asm__ volatile(
 8009312:	f04f 0310 	mov.w	r3, #16
 8009316:	f3ef 8411 	mrs	r4, BASEPRI
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8009322:	4e24      	ldr	r6, [pc, #144]	; (80093b4 <sys_clock_announce+0xac>)
	return list->head == list;
 8009324:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80093bc <sys_clock_announce+0xb4>
 8009328:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800932a:	4d23      	ldr	r5, [pc, #140]	; (80093b8 <sys_clock_announce+0xb0>)
 800932c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8009330:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009332:	4540      	cmp	r0, r8
		curr_tick += dt;
 8009334:	e9d5 1e00 	ldrd	r1, lr, [r5]
 8009338:	ea4f 77e2 	mov.w	r7, r2, asr #31
 800933c:	d00b      	beq.n	8009356 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800933e:	b150      	cbz	r0, 8009356 <sys_clock_announce+0x4e>
 8009340:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 8009344:	429a      	cmp	r2, r3
 8009346:	eb77 090c 	sbcs.w	r9, r7, ip
 800934a:	da16      	bge.n	800937a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 800934c:	1a9b      	subs	r3, r3, r2
 800934e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8009352:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8009356:	1852      	adds	r2, r2, r1
 8009358:	eb4e 0707 	adc.w	r7, lr, r7
 800935c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 8009360:	2500      	movs	r5, #0
 8009362:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8009364:	f7ff ff16 	bl	8009194 <next_timeout>
 8009368:	4629      	mov	r1, r5
 800936a:	f7fc fce3 	bl	8005d34 <sys_clock_set_timeout>
	__asm__ volatile(
 800936e:	f384 8811 	msr	BASEPRI, r4
 8009372:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8009376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 800937a:	1859      	adds	r1, r3, r1
 800937c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8009384:	2200      	movs	r2, #0
 8009386:	2300      	movs	r3, #0
 8009388:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 800938c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 8009390:	f7ff ff28 	bl	80091e4 <remove_timeout>
 8009394:	f384 8811 	msr	BASEPRI, r4
 8009398:	f3bf 8f6f 	isb	sy
		t->fn(t);
 800939c:	6883      	ldr	r3, [r0, #8]
 800939e:	4798      	blx	r3
	__asm__ volatile(
 80093a0:	f04f 0310 	mov.w	r3, #16
 80093a4:	f3ef 8411 	mrs	r4, BASEPRI
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80093b0:	e7bc      	b.n	800932c <sys_clock_announce+0x24>
 80093b2:	bf00      	nop
 80093b4:	20002128 	.word	0x20002128
 80093b8:	20000920 	.word	0x20000920
 80093bc:	20000148 	.word	0x20000148

080093c0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 80093c0:	b510      	push	{r4, lr}
 80093c2:	f04f 0310 	mov.w	r3, #16
 80093c6:	f3ef 8411 	mrs	r4, BASEPRI
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 80093d2:	f7fc fd1f 	bl	8005e14 <sys_clock_elapsed>
 80093d6:	4a05      	ldr	r2, [pc, #20]	; (80093ec <sys_clock_tick_get+0x2c>)
 80093d8:	e9d2 3100 	ldrd	r3, r1, [r2]
 80093dc:	18c0      	adds	r0, r0, r3
 80093de:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 80093e2:	f384 8811 	msr	BASEPRI, r4
 80093e6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 80093ea:	bd10      	pop	{r4, pc}
 80093ec:	20000920 	.word	0x20000920

080093f0 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 80093f0:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 80093f2:	4604      	mov	r4, r0
 80093f4:	b178      	cbz	r0, 8009416 <z_impl_k_busy_wait+0x26>
 80093f6:	f7fc fd2b 	bl	8005e50 <sys_clock_cycle_get_32>
 80093fa:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 80093fc:	4806      	ldr	r0, [pc, #24]	; (8009418 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 80093fe:	4a07      	ldr	r2, [pc, #28]	; (800941c <z_impl_k_busy_wait+0x2c>)
 8009400:	fba4 0100 	umull	r0, r1, r4, r0
 8009404:	2300      	movs	r3, #0
 8009406:	f7f7 fb51 	bl	8000aac <__aeabi_uldivmod>
 800940a:	4604      	mov	r4, r0
 800940c:	f7fc fd20 	bl	8005e50 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8009410:	1b43      	subs	r3, r0, r5
 8009412:	42a3      	cmp	r3, r4
 8009414:	d3fa      	bcc.n	800940c <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8009416:	bd38      	pop	{r3, r4, r5, pc}
 8009418:	05b8d800 	.word	0x05b8d800
 800941c:	000f4240 	.word	0x000f4240

08009420 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8009420:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8009422:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 8009426:	3301      	adds	r3, #1
 8009428:	f142 0200 	adc.w	r2, r2, #0
 800942c:	2b02      	cmp	r3, #2
 800942e:	f172 0300 	sbcs.w	r3, r2, #0
{
 8009432:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8009434:	d304      	bcc.n	8009440 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8009436:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800943a:	490d      	ldr	r1, [pc, #52]	; (8009470 <z_timer_expiration_handler+0x50>)
 800943c:	f7ff feec 	bl	8009218 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 8009440:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009442:	3301      	adds	r3, #1
 8009444:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 8009446:	6a23      	ldr	r3, [r4, #32]
 8009448:	b10b      	cbz	r3, 800944e <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
 800944a:	4620      	mov	r0, r4
 800944c:	4798      	blx	r3
	return list->head == list;
 800944e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009452:	42a5      	cmp	r5, r4
 8009454:	d00b      	beq.n	800946e <z_timer_expiration_handler+0x4e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8009456:	b155      	cbz	r5, 800946e <z_timer_expiration_handler+0x4e>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
 8009458:	4628      	mov	r0, r5
 800945a:	f003 fd8e 	bl	800cf7a <z_unpend_thread_no_timeout>
 800945e:	2300      	movs	r3, #0
 8009460:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
 8009464:	4628      	mov	r0, r5
}
 8009466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
 800946a:	f003 bdf0 	b.w	800d04e <z_ready_thread>
}
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	08009421 	.word	0x08009421

08009474 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8009474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8009478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800947c:	bf08      	it	eq
 800947e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8009482:	4605      	mov	r5, r0
 8009484:	4690      	mov	r8, r2
 8009486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800948a:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800948c:	d03c      	beq.n	8009508 <z_impl_k_timer_start+0x94>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800948e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8009492:	bf08      	it	eq
 8009494:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8009498:	4604      	mov	r4, r0
 800949a:	460e      	mov	r6, r1
 800949c:	d013      	beq.n	80094c6 <z_impl_k_timer_start+0x52>
 800949e:	4308      	orrs	r0, r1
 80094a0:	d011      	beq.n	80094c6 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
 80094a2:	f06f 0001 	mvn.w	r0, #1
 80094a6:	1b00      	subs	r0, r0, r4
 80094a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ac:	eb60 0001 	sbc.w	r0, r0, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 80094b0:	2800      	cmp	r0, #0
 80094b2:	da08      	bge.n	80094c6 <z_impl_k_timer_start+0x52>
		period.ticks = MAX(period.ticks - 1, 1);
 80094b4:	3c01      	subs	r4, #1
 80094b6:	f161 0600 	sbc.w	r6, r1, #0
 80094ba:	2c01      	cmp	r4, #1
 80094bc:	f176 0100 	sbcs.w	r1, r6, #0
 80094c0:	bfbc      	itt	lt
 80094c2:	2401      	movlt	r4, #1
 80094c4:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 80094c6:	f06f 0101 	mvn.w	r1, #1
 80094ca:	1a89      	subs	r1, r1, r2
 80094cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80094d0:	eb61 0103 	sbc.w	r1, r1, r3
 80094d4:	2900      	cmp	r1, #0
 80094d6:	da08      	bge.n	80094ea <z_impl_k_timer_start+0x76>
		duration.ticks = MAX(duration.ticks - 1, 0);
 80094d8:	3a01      	subs	r2, #1
 80094da:	f163 0700 	sbc.w	r7, r3, #0
 80094de:	2f00      	cmp	r7, #0
 80094e0:	4690      	mov	r8, r2
 80094e2:	bfbc      	itt	lt
 80094e4:	f04f 0800 	movlt.w	r8, #0
 80094e8:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
 80094ea:	4628      	mov	r0, r5
 80094ec:	f003 fe3c 	bl	800d168 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
 80094f4:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80094f8:	4642      	mov	r2, r8
 80094fa:	463b      	mov	r3, r7
 80094fc:	4628      	mov	r0, r5
 80094fe:	4903      	ldr	r1, [pc, #12]	; (800950c <z_impl_k_timer_start+0x98>)
		     duration);
}
 8009500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8009504:	f7ff be88 	b.w	8009218 <z_add_timeout>
}
 8009508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950c:	08009421 	.word	0x08009421

08009510 <z_impl_k_timer_status_sync>:
}
#include <syscalls/k_timer_status_get_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
 8009510:	b513      	push	{r0, r1, r4, lr}
 8009512:	4604      	mov	r4, r0
	__asm__ volatile(
 8009514:	f04f 0310 	mov.w	r3, #16
 8009518:	f3ef 8111 	mrs	r1, BASEPRI
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy

		return result;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;
 8009524:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if (result == 0U) {
 8009526:	b9a8      	cbnz	r0, 8009554 <z_impl_k_timer_status_sync+0x44>
		if (!z_is_inactive_timeout(&timer->timeout)) {
 8009528:	6823      	ldr	r3, [r4, #0]
 800952a:	b19b      	cbz	r3, 8009554 <z_impl_k_timer_status_sync+0x44>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_timer, status_sync, timer, K_FOREVER);

			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
 800952c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009534:	e9cd 2300 	strd	r2, r3, [sp]
 8009538:	480a      	ldr	r0, [pc, #40]	; (8009564 <z_impl_k_timer_status_sync+0x54>)
 800953a:	f104 0218 	add.w	r2, r4, #24
 800953e:	f7ff fb63 	bl	8008c08 <z_pend_curr>
 8009542:	f04f 0310 	mov.w	r3, #16
 8009546:	f3ef 8111 	mrs	r1, BASEPRI
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
 8009552:	6b20      	ldr	r0, [r4, #48]	; 0x30
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	6323      	str	r3, [r4, #48]	; 0x30
	__asm__ volatile(
 8009558:	f381 8811 	msr	BASEPRI, r1
 800955c:	f3bf 8f6f 	isb	sy
	 * @note	New tracing hook
	 */
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_timer, status_sync, timer, result);

	return result;
}
 8009560:	b002      	add	sp, #8
 8009562:	bd10      	pop	{r4, pc}
 8009564:	2000287e 	.word	0x2000287e

08009568 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 8009568:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800956c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 800956e:	4b29      	ldr	r3, [pc, #164]	; (8009614 <z_impl_k_poll+0xac>)
 8009570:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
 8009572:	2301      	movs	r3, #1
 8009574:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
 8009578:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 800957c:	ea52 0305 	orrs.w	r3, r2, r5
{
 8009580:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
 8009582:	bf0c      	ite	eq
 8009584:	2301      	moveq	r3, #1
 8009586:	2300      	movne	r3, #0
 8009588:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
 800958c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
 800958e:	f003 feab 	bl	800d2e8 <register_events>
 8009592:	4681      	mov	r9, r0
	__asm__ volatile(
 8009594:	f04f 0310 	mov.w	r3, #16
 8009598:	f3ef 8a11 	mrs	sl, BASEPRI
 800959c:	f383 8811 	msr	BASEPRI, r3
 80095a0:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 80095a4:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
 80095a8:	b964      	cbnz	r4, 80095c4 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
 80095aa:	4601      	mov	r1, r0
 80095ac:	4652      	mov	r2, sl
 80095ae:	4640      	mov	r0, r8
 80095b0:	f003 ff73 	bl	800d49a <clear_event_registrations>
	__asm__ volatile(
 80095b4:	f38a 8811 	msr	BASEPRI, sl
 80095b8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 80095bc:	4620      	mov	r0, r4
 80095be:	b002      	add	sp, #8
 80095c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
 80095c4:	2300      	movs	r3, #0
 80095c6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80095ca:	ea56 0305 	orrs.w	r3, r6, r5
 80095ce:	d106      	bne.n	80095de <z_impl_k_poll+0x76>
 80095d0:	f38a 8811 	msr	BASEPRI, sl
 80095d4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 80095d8:	f06f 040a 	mvn.w	r4, #10
 80095dc:	e7ee      	b.n	80095bc <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 80095de:	e9cd 6500 	strd	r6, r5, [sp]
 80095e2:	4a0d      	ldr	r2, [pc, #52]	; (8009618 <z_impl_k_poll+0xb0>)
 80095e4:	480d      	ldr	r0, [pc, #52]	; (800961c <z_impl_k_poll+0xb4>)
 80095e6:	4651      	mov	r1, sl
 80095e8:	f7ff fb0e 	bl	8008c08 <z_pend_curr>
 80095ec:	4604      	mov	r4, r0
	__asm__ volatile(
 80095ee:	f04f 0310 	mov.w	r3, #16
 80095f2:	f3ef 8511 	mrs	r5, BASEPRI
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
 80095fe:	462a      	mov	r2, r5
 8009600:	4649      	mov	r1, r9
 8009602:	4640      	mov	r0, r8
 8009604:	f003 ff49 	bl	800d49a <clear_event_registrations>
	__asm__ volatile(
 8009608:	f385 8811 	msr	BASEPRI, r5
 800960c:	f3bf 8f6f 	isb	sy
	return swap_rc;
 8009610:	e7d4      	b.n	80095bc <z_impl_k_poll+0x54>
 8009612:	bf00      	nop
 8009614:	200020e8 	.word	0x200020e8
 8009618:	20000150 	.word	0x20000150
 800961c:	2000287f 	.word	0x2000287f

08009620 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4603      	mov	r3, r0
	__asm__ volatile(
 8009624:	f04f 0210 	mov.w	r2, #16
 8009628:	f3ef 8511 	mrs	r5, BASEPRI
 800962c:	f382 8811 	msr	BASEPRI, r2
 8009630:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 8009634:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 8009636:	2101      	movs	r1, #1
 8009638:	6081      	str	r1, [r0, #8]
	return list->head == list;
 800963a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800963c:	4283      	cmp	r3, r0
 800963e:	d106      	bne.n	800964e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
 8009640:	f385 8811 	msr	BASEPRI, r5
 8009644:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
 8009648:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
 800964a:	4620      	mov	r0, r4
 800964c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
 800964e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8009652:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8009654:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8009656:	2300      	movs	r3, #0
	node->prev = NULL;
 8009658:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800965c:	f003 fec1 	bl	800d3e2 <signal_poll_event>
	z_reschedule(&lock, key);
 8009660:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8009662:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <z_impl_k_poll_signal_raise+0x4c>)
 8009666:	f7ff fa4b 	bl	8008b00 <z_reschedule>
	return rc;
 800966a:	e7ee      	b.n	800964a <z_impl_k_poll_signal_raise+0x2a>
 800966c:	2000287f 	.word	0x2000287f

08009670 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
 8009670:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
 8009672:	4601      	mov	r1, r0
 8009674:	4801      	ldr	r0, [pc, #4]	; (800967c <k_aligned_alloc+0xc>)
 8009676:	f003 bf69 	b.w	800d54c <z_heap_aligned_alloc>
 800967a:	bf00      	nop
 800967c:	20000368 	.word	0x20000368

08009680 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
 8009680:	b513      	push	{r0, r1, r4, lr}
 8009682:	4604      	mov	r4, r0
 8009684:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
 8009686:	f003 fb83 	bl	800cd90 <k_is_in_isr>
 800968a:	9a01      	ldr	r2, [sp, #4]
 800968c:	b958      	cbnz	r0, 80096a6 <z_thread_aligned_alloc+0x26>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
 800968e:	4b08      	ldr	r3, [pc, #32]	; (80096b0 <z_thread_aligned_alloc+0x30>)
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
 8009696:	b143      	cbz	r3, 80096aa <z_thread_aligned_alloc+0x2a>
		ret = z_heap_aligned_alloc(heap, align, size);
 8009698:	4621      	mov	r1, r4
 800969a:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
 800969c:	b002      	add	sp, #8
 800969e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
 80096a2:	f003 bf53 	b.w	800d54c <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
 80096a6:	4b03      	ldr	r3, [pc, #12]	; (80096b4 <z_thread_aligned_alloc+0x34>)
 80096a8:	e7f6      	b.n	8009698 <z_thread_aligned_alloc+0x18>
}
 80096aa:	b002      	add	sp, #8
 80096ac:	bd10      	pop	{r4, pc}
 80096ae:	bf00      	nop
 80096b0:	200020e8 	.word	0x200020e8
 80096b4:	20000368 	.word	0x20000368

080096b8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 80096b8:	4a02      	ldr	r2, [pc, #8]	; (80096c4 <boot_banner+0xc>)
 80096ba:	4903      	ldr	r1, [pc, #12]	; (80096c8 <boot_banner+0x10>)
 80096bc:	4803      	ldr	r0, [pc, #12]	; (80096cc <boot_banner+0x14>)
 80096be:	f000 bd6b 	b.w	800a198 <printk>
 80096c2:	bf00      	nop
 80096c4:	0800f966 	.word	0x0800f966
 80096c8:	08010cb5 	.word	0x08010cb5
 80096cc:	08010cd1 	.word	0x08010cd1

080096d0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 80096d0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 80096d2:	4c06      	ldr	r4, [pc, #24]	; (80096ec <statics_init+0x1c>)
 80096d4:	4d06      	ldr	r5, [pc, #24]	; (80096f0 <statics_init+0x20>)
 80096d6:	42ac      	cmp	r4, r5
 80096d8:	d301      	bcc.n	80096de <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 80096da:	2000      	movs	r0, #0
 80096dc:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 80096de:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80096e2:	4620      	mov	r0, r4
 80096e4:	f003 ff50 	bl	800d588 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 80096e8:	3418      	adds	r4, #24
 80096ea:	e7f4      	b.n	80096d6 <statics_init+0x6>
 80096ec:	20000368 	.word	0x20000368
 80096f0:	20000380 	.word	0x20000380

080096f4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 80096f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 80096f6:	4b09      	ldr	r3, [pc, #36]	; (800971c <k_sys_work_q_init+0x28>)
 80096f8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 80096fa:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 80096fc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	4907      	ldr	r1, [pc, #28]	; (8009720 <k_sys_work_q_init+0x2c>)
 8009702:	4808      	ldr	r0, [pc, #32]	; (8009724 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 8009704:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 8009708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800970c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009710:	f000 f85a 	bl	80097c8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 8009714:	4620      	mov	r0, r4
 8009716:	b004      	add	sp, #16
 8009718:	bd10      	pop	{r4, pc}
 800971a:	bf00      	nop
 800971c:	08010cf8 	.word	0x08010cf8
 8009720:	20005400 	.word	0x20005400
 8009724:	20001928 	.word	0x20001928

08009728 <submit_to_queue_locked>:
{
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 800972a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800972c:	079a      	lsls	r2, r3, #30
{
 800972e:	4604      	mov	r4, r0
 8009730:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8009732:	f3c3 0540 	ubfx	r5, r3, #1, #1
 8009736:	d41f      	bmi.n	8009778 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 8009738:	075f      	lsls	r7, r3, #29
 800973a:	d41f      	bmi.n	800977c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
 800973c:	680a      	ldr	r2, [r1, #0]
 800973e:	b90a      	cbnz	r2, 8009744 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 8009740:	6882      	ldr	r2, [r0, #8]
 8009742:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 8009744:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
 8009746:	bf44      	itt	mi
 8009748:	68a3      	ldrmi	r3, [r4, #8]
 800974a:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
 800974c:	6837      	ldr	r7, [r6, #0]
			ret = 2;
 800974e:	bf4c      	ite	mi
 8009750:	2502      	movmi	r5, #2
		ret = 1;
 8009752:	2501      	movpl	r5, #1
	if (queue == NULL) {
 8009754:	b37f      	cbz	r7, 80097b6 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8009756:	4b1b      	ldr	r3, [pc, #108]	; (80097c4 <submit_to_queue_locked+0x9c>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	42bb      	cmp	r3, r7
 800975c:	d111      	bne.n	8009782 <submit_to_queue_locked+0x5a>
 800975e:	f003 fb17 	bl	800cd90 <k_is_in_isr>
 8009762:	f080 0001 	eor.w	r0, r0, #1
 8009766:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
 8009768:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800976c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 800976e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8009772:	d523      	bpl.n	80097bc <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
 8009774:	b13a      	cbz	r2, 8009786 <submit_to_queue_locked+0x5e>
 8009776:	b940      	cbnz	r0, 800978a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
 8009778:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
 800977c:	2300      	movs	r3, #0
 800977e:	6033      	str	r3, [r6, #0]
	return ret;
 8009780:	e013      	b.n	80097aa <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8009782:	2000      	movs	r0, #0
 8009784:	e7f0      	b.n	8009768 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
 8009786:	071b      	lsls	r3, r3, #28
 8009788:	d4f6      	bmi.n	8009778 <submit_to_queue_locked+0x50>
	parent->next = child;
 800978a:	2300      	movs	r3, #0
 800978c:	6023      	str	r3, [r4, #0]
	return list->tail;
 800978e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
Z_GENLIST_APPEND(slist, snode)
 8009792:	b963      	cbnz	r3, 80097ae <submit_to_queue_locked+0x86>
	list->head = node;
 8009794:	e9c7 443e 	strd	r4, r4, [r7, #248]	; 0xf8
		(void)notify_queue_locked(queue);
 8009798:	4638      	mov	r0, r7
 800979a:	f003 ff67 	bl	800d66c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 800979e:	68e3      	ldr	r3, [r4, #12]
 80097a0:	f043 0304 	orr.w	r3, r3, #4
 80097a4:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 80097a6:	6833      	ldr	r3, [r6, #0]
 80097a8:	60a3      	str	r3, [r4, #8]
}
 80097aa:	4628      	mov	r0, r5
 80097ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 80097ae:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80097b0:	f8c7 40fc 	str.w	r4, [r7, #252]	; 0xfc
}
 80097b4:	e7f0      	b.n	8009798 <submit_to_queue_locked+0x70>
		return -EINVAL;
 80097b6:	f06f 0515 	mvn.w	r5, #21
 80097ba:	e7df      	b.n	800977c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
 80097bc:	f06f 0512 	mvn.w	r5, #18
 80097c0:	e7dc      	b.n	800977c <submit_to_queue_locked+0x54>
 80097c2:	bf00      	nop
 80097c4:	200020e8 	.word	0x200020e8

080097c8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 80097c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ca:	b089      	sub	sp, #36	; 0x24
 80097cc:	4604      	mov	r4, r0
	list->head = NULL;
 80097ce:	2000      	movs	r0, #0
	list->tail = NULL;
 80097d0:	e9c4 003e 	strd	r0, r0, [r4, #248]	; 0xf8
 80097d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	sys_dlist_init(&w->waitq);
 80097d6:	f504 7080 	add.w	r0, r4, #256	; 0x100
	list->tail = (sys_dnode_t *)list;
 80097da:	e9c4 0040 	strd	r0, r0, [r4, #256]	; 0x100
 80097de:	f504 7084 	add.w	r0, r4, #264	; 0x108
 80097e2:	e9c4 0042 	strd	r0, r0, [r4, #264]	; 0x108

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 80097e6:	b31d      	cbz	r5, 8009830 <k_work_queue_start+0x68>
 80097e8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 80097ea:	2800      	cmp	r0, #0
 80097ec:	f240 1001 	movw	r0, #257	; 0x101
 80097f0:	bf08      	it	eq
 80097f2:	2001      	moveq	r0, #1
	*flagp = flags;
 80097f4:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80097f8:	2000      	movs	r0, #0
 80097fa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80097fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009802:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8009806:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800980a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800980e:	4b09      	ldr	r3, [pc, #36]	; (8009834 <k_work_queue_start+0x6c>)
 8009810:	9400      	str	r4, [sp, #0]
 8009812:	4620      	mov	r0, r4
 8009814:	f7fe feaa 	bl	800856c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 8009818:	b125      	cbz	r5, 8009824 <k_work_queue_start+0x5c>
 800981a:	6829      	ldr	r1, [r5, #0]
 800981c:	b111      	cbz	r1, 8009824 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 800981e:	4620      	mov	r0, r4
 8009820:	f7fe fdf4 	bl	800840c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 8009824:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 8009826:	b009      	add	sp, #36	; 0x24
 8009828:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800982c:	f003 bab8 	b.w	800cda0 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8009830:	2001      	movs	r0, #1
 8009832:	e7df      	b.n	80097f4 <k_work_queue_start+0x2c>
 8009834:	08001b41 	.word	0x08001b41

08009838 <_free_r>:
 8009838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800983a:	2900      	cmp	r1, #0
 800983c:	d044      	beq.n	80098c8 <_free_r+0x90>
 800983e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009842:	9001      	str	r0, [sp, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	f1a1 0404 	sub.w	r4, r1, #4
 800984a:	bfb8      	it	lt
 800984c:	18e4      	addlt	r4, r4, r3
 800984e:	f7fd f97f 	bl	8006b50 <__malloc_lock>
 8009852:	4a1e      	ldr	r2, [pc, #120]	; (80098cc <_free_r+0x94>)
 8009854:	9801      	ldr	r0, [sp, #4]
 8009856:	6813      	ldr	r3, [r2, #0]
 8009858:	b933      	cbnz	r3, 8009868 <_free_r+0x30>
 800985a:	6063      	str	r3, [r4, #4]
 800985c:	6014      	str	r4, [r2, #0]
 800985e:	b003      	add	sp, #12
 8009860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009864:	f7fd b97e 	b.w	8006b64 <__malloc_unlock>
 8009868:	42a3      	cmp	r3, r4
 800986a:	d908      	bls.n	800987e <_free_r+0x46>
 800986c:	6825      	ldr	r5, [r4, #0]
 800986e:	1961      	adds	r1, r4, r5
 8009870:	428b      	cmp	r3, r1
 8009872:	bf01      	itttt	eq
 8009874:	6819      	ldreq	r1, [r3, #0]
 8009876:	685b      	ldreq	r3, [r3, #4]
 8009878:	1949      	addeq	r1, r1, r5
 800987a:	6021      	streq	r1, [r4, #0]
 800987c:	e7ed      	b.n	800985a <_free_r+0x22>
 800987e:	461a      	mov	r2, r3
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	b10b      	cbz	r3, 8009888 <_free_r+0x50>
 8009884:	42a3      	cmp	r3, r4
 8009886:	d9fa      	bls.n	800987e <_free_r+0x46>
 8009888:	6811      	ldr	r1, [r2, #0]
 800988a:	1855      	adds	r5, r2, r1
 800988c:	42a5      	cmp	r5, r4
 800988e:	d10b      	bne.n	80098a8 <_free_r+0x70>
 8009890:	6824      	ldr	r4, [r4, #0]
 8009892:	4421      	add	r1, r4
 8009894:	1854      	adds	r4, r2, r1
 8009896:	42a3      	cmp	r3, r4
 8009898:	6011      	str	r1, [r2, #0]
 800989a:	d1e0      	bne.n	800985e <_free_r+0x26>
 800989c:	681c      	ldr	r4, [r3, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	6053      	str	r3, [r2, #4]
 80098a2:	4421      	add	r1, r4
 80098a4:	6011      	str	r1, [r2, #0]
 80098a6:	e7da      	b.n	800985e <_free_r+0x26>
 80098a8:	d902      	bls.n	80098b0 <_free_r+0x78>
 80098aa:	230c      	movs	r3, #12
 80098ac:	6003      	str	r3, [r0, #0]
 80098ae:	e7d6      	b.n	800985e <_free_r+0x26>
 80098b0:	6825      	ldr	r5, [r4, #0]
 80098b2:	1961      	adds	r1, r4, r5
 80098b4:	428b      	cmp	r3, r1
 80098b6:	bf04      	itt	eq
 80098b8:	6819      	ldreq	r1, [r3, #0]
 80098ba:	685b      	ldreq	r3, [r3, #4]
 80098bc:	6063      	str	r3, [r4, #4]
 80098be:	bf04      	itt	eq
 80098c0:	1949      	addeq	r1, r1, r5
 80098c2:	6021      	streq	r1, [r4, #0]
 80098c4:	6054      	str	r4, [r2, #4]
 80098c6:	e7ca      	b.n	800985e <_free_r+0x26>
 80098c8:	b003      	add	sp, #12
 80098ca:	bd30      	pop	{r4, r5, pc}
 80098cc:	20002134 	.word	0x20002134

080098d0 <_malloc_r>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	1ccd      	adds	r5, r1, #3
 80098d4:	f025 0503 	bic.w	r5, r5, #3
 80098d8:	3508      	adds	r5, #8
 80098da:	2d0c      	cmp	r5, #12
 80098dc:	bf38      	it	cc
 80098de:	250c      	movcc	r5, #12
 80098e0:	2d00      	cmp	r5, #0
 80098e2:	4606      	mov	r6, r0
 80098e4:	db01      	blt.n	80098ea <_malloc_r+0x1a>
 80098e6:	42a9      	cmp	r1, r5
 80098e8:	d903      	bls.n	80098f2 <_malloc_r+0x22>
 80098ea:	230c      	movs	r3, #12
 80098ec:	6033      	str	r3, [r6, #0]
 80098ee:	2000      	movs	r0, #0
 80098f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098f2:	f7fd f92d 	bl	8006b50 <__malloc_lock>
 80098f6:	4921      	ldr	r1, [pc, #132]	; (800997c <_malloc_r+0xac>)
 80098f8:	680a      	ldr	r2, [r1, #0]
 80098fa:	4614      	mov	r4, r2
 80098fc:	b99c      	cbnz	r4, 8009926 <_malloc_r+0x56>
 80098fe:	4f20      	ldr	r7, [pc, #128]	; (8009980 <_malloc_r+0xb0>)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	b923      	cbnz	r3, 800990e <_malloc_r+0x3e>
 8009904:	4621      	mov	r1, r4
 8009906:	4630      	mov	r0, r6
 8009908:	f000 f962 	bl	8009bd0 <_sbrk_r>
 800990c:	6038      	str	r0, [r7, #0]
 800990e:	4629      	mov	r1, r5
 8009910:	4630      	mov	r0, r6
 8009912:	f000 f95d 	bl	8009bd0 <_sbrk_r>
 8009916:	1c43      	adds	r3, r0, #1
 8009918:	d123      	bne.n	8009962 <_malloc_r+0x92>
 800991a:	230c      	movs	r3, #12
 800991c:	6033      	str	r3, [r6, #0]
 800991e:	4630      	mov	r0, r6
 8009920:	f7fd f920 	bl	8006b64 <__malloc_unlock>
 8009924:	e7e3      	b.n	80098ee <_malloc_r+0x1e>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	1b5b      	subs	r3, r3, r5
 800992a:	d417      	bmi.n	800995c <_malloc_r+0x8c>
 800992c:	2b0b      	cmp	r3, #11
 800992e:	d903      	bls.n	8009938 <_malloc_r+0x68>
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	441c      	add	r4, r3
 8009934:	6025      	str	r5, [r4, #0]
 8009936:	e004      	b.n	8009942 <_malloc_r+0x72>
 8009938:	6863      	ldr	r3, [r4, #4]
 800993a:	42a2      	cmp	r2, r4
 800993c:	bf0c      	ite	eq
 800993e:	600b      	streq	r3, [r1, #0]
 8009940:	6053      	strne	r3, [r2, #4]
 8009942:	4630      	mov	r0, r6
 8009944:	f7fd f90e 	bl	8006b64 <__malloc_unlock>
 8009948:	f104 000b 	add.w	r0, r4, #11
 800994c:	1d23      	adds	r3, r4, #4
 800994e:	f020 0007 	bic.w	r0, r0, #7
 8009952:	1ac2      	subs	r2, r0, r3
 8009954:	d0cc      	beq.n	80098f0 <_malloc_r+0x20>
 8009956:	1a1b      	subs	r3, r3, r0
 8009958:	50a3      	str	r3, [r4, r2]
 800995a:	e7c9      	b.n	80098f0 <_malloc_r+0x20>
 800995c:	4622      	mov	r2, r4
 800995e:	6864      	ldr	r4, [r4, #4]
 8009960:	e7cc      	b.n	80098fc <_malloc_r+0x2c>
 8009962:	1cc4      	adds	r4, r0, #3
 8009964:	f024 0403 	bic.w	r4, r4, #3
 8009968:	42a0      	cmp	r0, r4
 800996a:	d0e3      	beq.n	8009934 <_malloc_r+0x64>
 800996c:	1a21      	subs	r1, r4, r0
 800996e:	4630      	mov	r0, r6
 8009970:	f000 f92e 	bl	8009bd0 <_sbrk_r>
 8009974:	3001      	adds	r0, #1
 8009976:	d1dd      	bne.n	8009934 <_malloc_r+0x64>
 8009978:	e7cf      	b.n	800991a <_malloc_r+0x4a>
 800997a:	bf00      	nop
 800997c:	20002134 	.word	0x20002134
 8009980:	20002138 	.word	0x20002138

08009984 <_printf_i>:
 8009984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009988:	7e0f      	ldrb	r7, [r1, #24]
 800998a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800998c:	2f78      	cmp	r7, #120	; 0x78
 800998e:	4691      	mov	r9, r2
 8009990:	4680      	mov	r8, r0
 8009992:	460c      	mov	r4, r1
 8009994:	469a      	mov	sl, r3
 8009996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800999a:	d807      	bhi.n	80099ac <_printf_i+0x28>
 800999c:	2f62      	cmp	r7, #98	; 0x62
 800999e:	d80a      	bhi.n	80099b6 <_printf_i+0x32>
 80099a0:	2f00      	cmp	r7, #0
 80099a2:	f000 80d8 	beq.w	8009b56 <_printf_i+0x1d2>
 80099a6:	2f58      	cmp	r7, #88	; 0x58
 80099a8:	f000 80a3 	beq.w	8009af2 <_printf_i+0x16e>
 80099ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099b4:	e03a      	b.n	8009a2c <_printf_i+0xa8>
 80099b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ba:	2b15      	cmp	r3, #21
 80099bc:	d8f6      	bhi.n	80099ac <_printf_i+0x28>
 80099be:	a101      	add	r1, pc, #4	; (adr r1, 80099c4 <_printf_i+0x40>)
 80099c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099c4:	08009a1d 	.word	0x08009a1d
 80099c8:	08009a31 	.word	0x08009a31
 80099cc:	080099ad 	.word	0x080099ad
 80099d0:	080099ad 	.word	0x080099ad
 80099d4:	080099ad 	.word	0x080099ad
 80099d8:	080099ad 	.word	0x080099ad
 80099dc:	08009a31 	.word	0x08009a31
 80099e0:	080099ad 	.word	0x080099ad
 80099e4:	080099ad 	.word	0x080099ad
 80099e8:	080099ad 	.word	0x080099ad
 80099ec:	080099ad 	.word	0x080099ad
 80099f0:	08009b3d 	.word	0x08009b3d
 80099f4:	08009a61 	.word	0x08009a61
 80099f8:	08009b1f 	.word	0x08009b1f
 80099fc:	080099ad 	.word	0x080099ad
 8009a00:	080099ad 	.word	0x080099ad
 8009a04:	08009b5f 	.word	0x08009b5f
 8009a08:	080099ad 	.word	0x080099ad
 8009a0c:	08009a61 	.word	0x08009a61
 8009a10:	080099ad 	.word	0x080099ad
 8009a14:	080099ad 	.word	0x080099ad
 8009a18:	08009b27 	.word	0x08009b27
 8009a1c:	682b      	ldr	r3, [r5, #0]
 8009a1e:	1d1a      	adds	r2, r3, #4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	602a      	str	r2, [r5, #0]
 8009a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e0a3      	b.n	8009b78 <_printf_i+0x1f4>
 8009a30:	6820      	ldr	r0, [r4, #0]
 8009a32:	6829      	ldr	r1, [r5, #0]
 8009a34:	0606      	lsls	r6, r0, #24
 8009a36:	f101 0304 	add.w	r3, r1, #4
 8009a3a:	d50a      	bpl.n	8009a52 <_printf_i+0xce>
 8009a3c:	680e      	ldr	r6, [r1, #0]
 8009a3e:	602b      	str	r3, [r5, #0]
 8009a40:	2e00      	cmp	r6, #0
 8009a42:	da03      	bge.n	8009a4c <_printf_i+0xc8>
 8009a44:	232d      	movs	r3, #45	; 0x2d
 8009a46:	4276      	negs	r6, r6
 8009a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a4c:	485e      	ldr	r0, [pc, #376]	; (8009bc8 <_printf_i+0x244>)
 8009a4e:	230a      	movs	r3, #10
 8009a50:	e019      	b.n	8009a86 <_printf_i+0x102>
 8009a52:	680e      	ldr	r6, [r1, #0]
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a5a:	bf18      	it	ne
 8009a5c:	b236      	sxthne	r6, r6
 8009a5e:	e7ef      	b.n	8009a40 <_printf_i+0xbc>
 8009a60:	682b      	ldr	r3, [r5, #0]
 8009a62:	6820      	ldr	r0, [r4, #0]
 8009a64:	1d19      	adds	r1, r3, #4
 8009a66:	6029      	str	r1, [r5, #0]
 8009a68:	0601      	lsls	r1, r0, #24
 8009a6a:	d501      	bpl.n	8009a70 <_printf_i+0xec>
 8009a6c:	681e      	ldr	r6, [r3, #0]
 8009a6e:	e002      	b.n	8009a76 <_printf_i+0xf2>
 8009a70:	0646      	lsls	r6, r0, #25
 8009a72:	d5fb      	bpl.n	8009a6c <_printf_i+0xe8>
 8009a74:	881e      	ldrh	r6, [r3, #0]
 8009a76:	4854      	ldr	r0, [pc, #336]	; (8009bc8 <_printf_i+0x244>)
 8009a78:	2f6f      	cmp	r7, #111	; 0x6f
 8009a7a:	bf0c      	ite	eq
 8009a7c:	2308      	moveq	r3, #8
 8009a7e:	230a      	movne	r3, #10
 8009a80:	2100      	movs	r1, #0
 8009a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a86:	6865      	ldr	r5, [r4, #4]
 8009a88:	60a5      	str	r5, [r4, #8]
 8009a8a:	2d00      	cmp	r5, #0
 8009a8c:	bfa2      	ittt	ge
 8009a8e:	6821      	ldrge	r1, [r4, #0]
 8009a90:	f021 0104 	bicge.w	r1, r1, #4
 8009a94:	6021      	strge	r1, [r4, #0]
 8009a96:	b90e      	cbnz	r6, 8009a9c <_printf_i+0x118>
 8009a98:	2d00      	cmp	r5, #0
 8009a9a:	d04d      	beq.n	8009b38 <_printf_i+0x1b4>
 8009a9c:	4615      	mov	r5, r2
 8009a9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009aa2:	fb03 6711 	mls	r7, r3, r1, r6
 8009aa6:	5dc7      	ldrb	r7, [r0, r7]
 8009aa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009aac:	4637      	mov	r7, r6
 8009aae:	42bb      	cmp	r3, r7
 8009ab0:	460e      	mov	r6, r1
 8009ab2:	d9f4      	bls.n	8009a9e <_printf_i+0x11a>
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d10b      	bne.n	8009ad0 <_printf_i+0x14c>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	07de      	lsls	r6, r3, #31
 8009abc:	d508      	bpl.n	8009ad0 <_printf_i+0x14c>
 8009abe:	6923      	ldr	r3, [r4, #16]
 8009ac0:	6861      	ldr	r1, [r4, #4]
 8009ac2:	4299      	cmp	r1, r3
 8009ac4:	bfde      	ittt	le
 8009ac6:	2330      	movle	r3, #48	; 0x30
 8009ac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009acc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009ad0:	1b52      	subs	r2, r2, r5
 8009ad2:	6122      	str	r2, [r4, #16]
 8009ad4:	f8cd a000 	str.w	sl, [sp]
 8009ad8:	464b      	mov	r3, r9
 8009ada:	aa03      	add	r2, sp, #12
 8009adc:	4621      	mov	r1, r4
 8009ade:	4640      	mov	r0, r8
 8009ae0:	f003 fe2a 	bl	800d738 <_printf_common>
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	d14c      	bne.n	8009b82 <_printf_i+0x1fe>
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aec:	b004      	add	sp, #16
 8009aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af2:	4835      	ldr	r0, [pc, #212]	; (8009bc8 <_printf_i+0x244>)
 8009af4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009af8:	6829      	ldr	r1, [r5, #0]
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b00:	6029      	str	r1, [r5, #0]
 8009b02:	061d      	lsls	r5, r3, #24
 8009b04:	d514      	bpl.n	8009b30 <_printf_i+0x1ac>
 8009b06:	07df      	lsls	r7, r3, #31
 8009b08:	bf44      	itt	mi
 8009b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8009b0e:	6023      	strmi	r3, [r4, #0]
 8009b10:	b91e      	cbnz	r6, 8009b1a <_printf_i+0x196>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	f023 0320 	bic.w	r3, r3, #32
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	2310      	movs	r3, #16
 8009b1c:	e7b0      	b.n	8009a80 <_printf_i+0xfc>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	f043 0320 	orr.w	r3, r3, #32
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	2378      	movs	r3, #120	; 0x78
 8009b28:	4828      	ldr	r0, [pc, #160]	; (8009bcc <_printf_i+0x248>)
 8009b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b2e:	e7e3      	b.n	8009af8 <_printf_i+0x174>
 8009b30:	0659      	lsls	r1, r3, #25
 8009b32:	bf48      	it	mi
 8009b34:	b2b6      	uxthmi	r6, r6
 8009b36:	e7e6      	b.n	8009b06 <_printf_i+0x182>
 8009b38:	4615      	mov	r5, r2
 8009b3a:	e7bb      	b.n	8009ab4 <_printf_i+0x130>
 8009b3c:	682b      	ldr	r3, [r5, #0]
 8009b3e:	6826      	ldr	r6, [r4, #0]
 8009b40:	6961      	ldr	r1, [r4, #20]
 8009b42:	1d18      	adds	r0, r3, #4
 8009b44:	6028      	str	r0, [r5, #0]
 8009b46:	0635      	lsls	r5, r6, #24
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	d501      	bpl.n	8009b50 <_printf_i+0x1cc>
 8009b4c:	6019      	str	r1, [r3, #0]
 8009b4e:	e002      	b.n	8009b56 <_printf_i+0x1d2>
 8009b50:	0670      	lsls	r0, r6, #25
 8009b52:	d5fb      	bpl.n	8009b4c <_printf_i+0x1c8>
 8009b54:	8019      	strh	r1, [r3, #0]
 8009b56:	2300      	movs	r3, #0
 8009b58:	6123      	str	r3, [r4, #16]
 8009b5a:	4615      	mov	r5, r2
 8009b5c:	e7ba      	b.n	8009ad4 <_printf_i+0x150>
 8009b5e:	682b      	ldr	r3, [r5, #0]
 8009b60:	1d1a      	adds	r2, r3, #4
 8009b62:	602a      	str	r2, [r5, #0]
 8009b64:	681d      	ldr	r5, [r3, #0]
 8009b66:	6862      	ldr	r2, [r4, #4]
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f7f6 fb30 	bl	80001d0 <memchr>
 8009b70:	b108      	cbz	r0, 8009b76 <_printf_i+0x1f2>
 8009b72:	1b40      	subs	r0, r0, r5
 8009b74:	6060      	str	r0, [r4, #4]
 8009b76:	6863      	ldr	r3, [r4, #4]
 8009b78:	6123      	str	r3, [r4, #16]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b80:	e7a8      	b.n	8009ad4 <_printf_i+0x150>
 8009b82:	6923      	ldr	r3, [r4, #16]
 8009b84:	462a      	mov	r2, r5
 8009b86:	4649      	mov	r1, r9
 8009b88:	4640      	mov	r0, r8
 8009b8a:	47d0      	blx	sl
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d0ab      	beq.n	8009ae8 <_printf_i+0x164>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	079b      	lsls	r3, r3, #30
 8009b94:	d413      	bmi.n	8009bbe <_printf_i+0x23a>
 8009b96:	68e0      	ldr	r0, [r4, #12]
 8009b98:	9b03      	ldr	r3, [sp, #12]
 8009b9a:	4298      	cmp	r0, r3
 8009b9c:	bfb8      	it	lt
 8009b9e:	4618      	movlt	r0, r3
 8009ba0:	e7a4      	b.n	8009aec <_printf_i+0x168>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	4632      	mov	r2, r6
 8009ba6:	4649      	mov	r1, r9
 8009ba8:	4640      	mov	r0, r8
 8009baa:	47d0      	blx	sl
 8009bac:	3001      	adds	r0, #1
 8009bae:	d09b      	beq.n	8009ae8 <_printf_i+0x164>
 8009bb0:	3501      	adds	r5, #1
 8009bb2:	68e3      	ldr	r3, [r4, #12]
 8009bb4:	9903      	ldr	r1, [sp, #12]
 8009bb6:	1a5b      	subs	r3, r3, r1
 8009bb8:	42ab      	cmp	r3, r5
 8009bba:	dcf2      	bgt.n	8009ba2 <_printf_i+0x21e>
 8009bbc:	e7eb      	b.n	8009b96 <_printf_i+0x212>
 8009bbe:	2500      	movs	r5, #0
 8009bc0:	f104 0619 	add.w	r6, r4, #25
 8009bc4:	e7f5      	b.n	8009bb2 <_printf_i+0x22e>
 8009bc6:	bf00      	nop
 8009bc8:	08010e02 	.word	0x08010e02
 8009bcc:	08010e13 	.word	0x08010e13

08009bd0 <_sbrk_r>:
 8009bd0:	b538      	push	{r3, r4, r5, lr}
 8009bd2:	4d06      	ldr	r5, [pc, #24]	; (8009bec <_sbrk_r+0x1c>)
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	4608      	mov	r0, r1
 8009bda:	602b      	str	r3, [r5, #0]
 8009bdc:	f7fc ffa4 	bl	8006b28 <_sbrk>
 8009be0:	1c43      	adds	r3, r0, #1
 8009be2:	d102      	bne.n	8009bea <_sbrk_r+0x1a>
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	b103      	cbz	r3, 8009bea <_sbrk_r+0x1a>
 8009be8:	6023      	str	r3, [r4, #0]
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	2000213c 	.word	0x2000213c

08009bf0 <sniprintf>:
 8009bf0:	b40c      	push	{r2, r3}
 8009bf2:	b530      	push	{r4, r5, lr}
 8009bf4:	4b17      	ldr	r3, [pc, #92]	; (8009c54 <sniprintf+0x64>)
 8009bf6:	1e0c      	subs	r4, r1, #0
 8009bf8:	681d      	ldr	r5, [r3, #0]
 8009bfa:	b09b      	sub	sp, #108	; 0x6c
 8009bfc:	da08      	bge.n	8009c10 <sniprintf+0x20>
 8009bfe:	238b      	movs	r3, #139	; 0x8b
 8009c00:	602b      	str	r3, [r5, #0]
 8009c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c06:	b01b      	add	sp, #108	; 0x6c
 8009c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c0c:	b002      	add	sp, #8
 8009c0e:	4770      	bx	lr
 8009c10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c14:	f8ad 3010 	strh.w	r3, [sp, #16]
 8009c18:	bf14      	ite	ne
 8009c1a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009c1e:	4623      	moveq	r3, r4
 8009c20:	9303      	str	r3, [sp, #12]
 8009c22:	9306      	str	r3, [sp, #24]
 8009c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c28:	9001      	str	r0, [sp, #4]
 8009c2a:	9005      	str	r0, [sp, #20]
 8009c2c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8009c30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009c32:	ab1f      	add	r3, sp, #124	; 0x7c
 8009c34:	a901      	add	r1, sp, #4
 8009c36:	4628      	mov	r0, r5
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	f000 f899 	bl	8009d70 <_svfiprintf_r>
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	bfbc      	itt	lt
 8009c42:	238b      	movlt	r3, #139	; 0x8b
 8009c44:	602b      	strlt	r3, [r5, #0]
 8009c46:	2c00      	cmp	r4, #0
 8009c48:	d0dd      	beq.n	8009c06 <sniprintf+0x16>
 8009c4a:	9b01      	ldr	r3, [sp, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	701a      	strb	r2, [r3, #0]
 8009c50:	e7d9      	b.n	8009c06 <sniprintf+0x16>
 8009c52:	bf00      	nop
 8009c54:	20000158 	.word	0x20000158

08009c58 <_strtol_l.constprop.0>:
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c5e:	d001      	beq.n	8009c64 <_strtol_l.constprop.0+0xc>
 8009c60:	2b24      	cmp	r3, #36	; 0x24
 8009c62:	d906      	bls.n	8009c72 <_strtol_l.constprop.0+0x1a>
 8009c64:	f002 fa81 	bl	800c16a <__errno>
 8009c68:	2316      	movs	r3, #22
 8009c6a:	6003      	str	r3, [r0, #0]
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009d58 <_strtol_l.constprop.0+0x100>
 8009c76:	460d      	mov	r5, r1
 8009c78:	462e      	mov	r6, r5
 8009c7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009c82:	f017 0708 	ands.w	r7, r7, #8
 8009c86:	d1f7      	bne.n	8009c78 <_strtol_l.constprop.0+0x20>
 8009c88:	2c2d      	cmp	r4, #45	; 0x2d
 8009c8a:	d132      	bne.n	8009cf2 <_strtol_l.constprop.0+0x9a>
 8009c8c:	782c      	ldrb	r4, [r5, #0]
 8009c8e:	2701      	movs	r7, #1
 8009c90:	1cb5      	adds	r5, r6, #2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d05b      	beq.n	8009d4e <_strtol_l.constprop.0+0xf6>
 8009c96:	2b10      	cmp	r3, #16
 8009c98:	d109      	bne.n	8009cae <_strtol_l.constprop.0+0x56>
 8009c9a:	2c30      	cmp	r4, #48	; 0x30
 8009c9c:	d107      	bne.n	8009cae <_strtol_l.constprop.0+0x56>
 8009c9e:	782c      	ldrb	r4, [r5, #0]
 8009ca0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ca4:	2c58      	cmp	r4, #88	; 0x58
 8009ca6:	d14d      	bne.n	8009d44 <_strtol_l.constprop.0+0xec>
 8009ca8:	786c      	ldrb	r4, [r5, #1]
 8009caa:	2310      	movs	r3, #16
 8009cac:	3502      	adds	r5, #2
 8009cae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009cb2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009cb6:	f04f 0c00 	mov.w	ip, #0
 8009cba:	fbb8 f9f3 	udiv	r9, r8, r3
 8009cbe:	4666      	mov	r6, ip
 8009cc0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009cc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009cc8:	f1be 0f09 	cmp.w	lr, #9
 8009ccc:	d816      	bhi.n	8009cfc <_strtol_l.constprop.0+0xa4>
 8009cce:	4674      	mov	r4, lr
 8009cd0:	42a3      	cmp	r3, r4
 8009cd2:	dd24      	ble.n	8009d1e <_strtol_l.constprop.0+0xc6>
 8009cd4:	f1bc 0f00 	cmp.w	ip, #0
 8009cd8:	db1e      	blt.n	8009d18 <_strtol_l.constprop.0+0xc0>
 8009cda:	45b1      	cmp	r9, r6
 8009cdc:	d31c      	bcc.n	8009d18 <_strtol_l.constprop.0+0xc0>
 8009cde:	d101      	bne.n	8009ce4 <_strtol_l.constprop.0+0x8c>
 8009ce0:	45a2      	cmp	sl, r4
 8009ce2:	db19      	blt.n	8009d18 <_strtol_l.constprop.0+0xc0>
 8009ce4:	fb06 4603 	mla	r6, r6, r3, r4
 8009ce8:	f04f 0c01 	mov.w	ip, #1
 8009cec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cf0:	e7e8      	b.n	8009cc4 <_strtol_l.constprop.0+0x6c>
 8009cf2:	2c2b      	cmp	r4, #43	; 0x2b
 8009cf4:	bf04      	itt	eq
 8009cf6:	782c      	ldrbeq	r4, [r5, #0]
 8009cf8:	1cb5      	addeq	r5, r6, #2
 8009cfa:	e7ca      	b.n	8009c92 <_strtol_l.constprop.0+0x3a>
 8009cfc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009d00:	f1be 0f19 	cmp.w	lr, #25
 8009d04:	d801      	bhi.n	8009d0a <_strtol_l.constprop.0+0xb2>
 8009d06:	3c37      	subs	r4, #55	; 0x37
 8009d08:	e7e2      	b.n	8009cd0 <_strtol_l.constprop.0+0x78>
 8009d0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009d0e:	f1be 0f19 	cmp.w	lr, #25
 8009d12:	d804      	bhi.n	8009d1e <_strtol_l.constprop.0+0xc6>
 8009d14:	3c57      	subs	r4, #87	; 0x57
 8009d16:	e7db      	b.n	8009cd0 <_strtol_l.constprop.0+0x78>
 8009d18:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009d1c:	e7e6      	b.n	8009cec <_strtol_l.constprop.0+0x94>
 8009d1e:	f1bc 0f00 	cmp.w	ip, #0
 8009d22:	da05      	bge.n	8009d30 <_strtol_l.constprop.0+0xd8>
 8009d24:	2322      	movs	r3, #34	; 0x22
 8009d26:	6003      	str	r3, [r0, #0]
 8009d28:	4646      	mov	r6, r8
 8009d2a:	b942      	cbnz	r2, 8009d3e <_strtol_l.constprop.0+0xe6>
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	e79e      	b.n	8009c6e <_strtol_l.constprop.0+0x16>
 8009d30:	b107      	cbz	r7, 8009d34 <_strtol_l.constprop.0+0xdc>
 8009d32:	4276      	negs	r6, r6
 8009d34:	2a00      	cmp	r2, #0
 8009d36:	d0f9      	beq.n	8009d2c <_strtol_l.constprop.0+0xd4>
 8009d38:	f1bc 0f00 	cmp.w	ip, #0
 8009d3c:	d000      	beq.n	8009d40 <_strtol_l.constprop.0+0xe8>
 8009d3e:	1e69      	subs	r1, r5, #1
 8009d40:	6011      	str	r1, [r2, #0]
 8009d42:	e7f3      	b.n	8009d2c <_strtol_l.constprop.0+0xd4>
 8009d44:	2430      	movs	r4, #48	; 0x30
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1b1      	bne.n	8009cae <_strtol_l.constprop.0+0x56>
 8009d4a:	2308      	movs	r3, #8
 8009d4c:	e7af      	b.n	8009cae <_strtol_l.constprop.0+0x56>
 8009d4e:	2c30      	cmp	r4, #48	; 0x30
 8009d50:	d0a5      	beq.n	8009c9e <_strtol_l.constprop.0+0x46>
 8009d52:	230a      	movs	r3, #10
 8009d54:	e7ab      	b.n	8009cae <_strtol_l.constprop.0+0x56>
 8009d56:	bf00      	nop
 8009d58:	08010d02 	.word	0x08010d02

08009d5c <strtol>:
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	460a      	mov	r2, r1
 8009d60:	4601      	mov	r1, r0
 8009d62:	4802      	ldr	r0, [pc, #8]	; (8009d6c <strtol+0x10>)
 8009d64:	6800      	ldr	r0, [r0, #0]
 8009d66:	f7ff bf77 	b.w	8009c58 <_strtol_l.constprop.0>
 8009d6a:	bf00      	nop
 8009d6c:	20000158 	.word	0x20000158

08009d70 <_svfiprintf_r>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	4698      	mov	r8, r3
 8009d76:	898b      	ldrh	r3, [r1, #12]
 8009d78:	061b      	lsls	r3, r3, #24
 8009d7a:	b09d      	sub	sp, #116	; 0x74
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	460d      	mov	r5, r1
 8009d80:	4614      	mov	r4, r2
 8009d82:	d50e      	bpl.n	8009da2 <_svfiprintf_r+0x32>
 8009d84:	690b      	ldr	r3, [r1, #16]
 8009d86:	b963      	cbnz	r3, 8009da2 <_svfiprintf_r+0x32>
 8009d88:	2140      	movs	r1, #64	; 0x40
 8009d8a:	f7ff fda1 	bl	80098d0 <_malloc_r>
 8009d8e:	6028      	str	r0, [r5, #0]
 8009d90:	6128      	str	r0, [r5, #16]
 8009d92:	b920      	cbnz	r0, 8009d9e <_svfiprintf_r+0x2e>
 8009d94:	230c      	movs	r3, #12
 8009d96:	603b      	str	r3, [r7, #0]
 8009d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d9c:	e0d1      	b.n	8009f42 <_svfiprintf_r+0x1d2>
 8009d9e:	2340      	movs	r3, #64	; 0x40
 8009da0:	616b      	str	r3, [r5, #20]
 8009da2:	2300      	movs	r3, #0
 8009da4:	9309      	str	r3, [sp, #36]	; 0x24
 8009da6:	2320      	movs	r3, #32
 8009da8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8009db0:	2330      	movs	r3, #48	; 0x30
 8009db2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f5c <_svfiprintf_r+0x1ec>
 8009db6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dba:	f04f 0901 	mov.w	r9, #1
 8009dbe:	4623      	mov	r3, r4
 8009dc0:	469a      	mov	sl, r3
 8009dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dc6:	b10a      	cbz	r2, 8009dcc <_svfiprintf_r+0x5c>
 8009dc8:	2a25      	cmp	r2, #37	; 0x25
 8009dca:	d1f9      	bne.n	8009dc0 <_svfiprintf_r+0x50>
 8009dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8009dd0:	d00b      	beq.n	8009dea <_svfiprintf_r+0x7a>
 8009dd2:	465b      	mov	r3, fp
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f003 fd9e 	bl	800d91a <__ssputs_r>
 8009dde:	3001      	adds	r0, #1
 8009de0:	f000 80aa 	beq.w	8009f38 <_svfiprintf_r+0x1c8>
 8009de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009de6:	445a      	add	r2, fp
 8009de8:	9209      	str	r2, [sp, #36]	; 0x24
 8009dea:	f89a 3000 	ldrb.w	r3, [sl]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f000 80a2 	beq.w	8009f38 <_svfiprintf_r+0x1c8>
 8009df4:	2300      	movs	r3, #0
 8009df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dfe:	f10a 0a01 	add.w	sl, sl, #1
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	9307      	str	r3, [sp, #28]
 8009e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8009e0c:	4654      	mov	r4, sl
 8009e0e:	2205      	movs	r2, #5
 8009e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e14:	4851      	ldr	r0, [pc, #324]	; (8009f5c <_svfiprintf_r+0x1ec>)
 8009e16:	f7f6 f9db 	bl	80001d0 <memchr>
 8009e1a:	9a04      	ldr	r2, [sp, #16]
 8009e1c:	b9d8      	cbnz	r0, 8009e56 <_svfiprintf_r+0xe6>
 8009e1e:	06d0      	lsls	r0, r2, #27
 8009e20:	bf44      	itt	mi
 8009e22:	2320      	movmi	r3, #32
 8009e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e28:	0711      	lsls	r1, r2, #28
 8009e2a:	bf44      	itt	mi
 8009e2c:	232b      	movmi	r3, #43	; 0x2b
 8009e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e32:	f89a 3000 	ldrb.w	r3, [sl]
 8009e36:	2b2a      	cmp	r3, #42	; 0x2a
 8009e38:	d015      	beq.n	8009e66 <_svfiprintf_r+0xf6>
 8009e3a:	9a07      	ldr	r2, [sp, #28]
 8009e3c:	4654      	mov	r4, sl
 8009e3e:	2000      	movs	r0, #0
 8009e40:	f04f 0c0a 	mov.w	ip, #10
 8009e44:	4621      	mov	r1, r4
 8009e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e4a:	3b30      	subs	r3, #48	; 0x30
 8009e4c:	2b09      	cmp	r3, #9
 8009e4e:	d94e      	bls.n	8009eee <_svfiprintf_r+0x17e>
 8009e50:	b1b0      	cbz	r0, 8009e80 <_svfiprintf_r+0x110>
 8009e52:	9207      	str	r2, [sp, #28]
 8009e54:	e014      	b.n	8009e80 <_svfiprintf_r+0x110>
 8009e56:	eba0 0308 	sub.w	r3, r0, r8
 8009e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	9304      	str	r3, [sp, #16]
 8009e62:	46a2      	mov	sl, r4
 8009e64:	e7d2      	b.n	8009e0c <_svfiprintf_r+0x9c>
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	1d19      	adds	r1, r3, #4
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	9103      	str	r1, [sp, #12]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	bfbb      	ittet	lt
 8009e72:	425b      	neglt	r3, r3
 8009e74:	f042 0202 	orrlt.w	r2, r2, #2
 8009e78:	9307      	strge	r3, [sp, #28]
 8009e7a:	9307      	strlt	r3, [sp, #28]
 8009e7c:	bfb8      	it	lt
 8009e7e:	9204      	strlt	r2, [sp, #16]
 8009e80:	7823      	ldrb	r3, [r4, #0]
 8009e82:	2b2e      	cmp	r3, #46	; 0x2e
 8009e84:	d10c      	bne.n	8009ea0 <_svfiprintf_r+0x130>
 8009e86:	7863      	ldrb	r3, [r4, #1]
 8009e88:	2b2a      	cmp	r3, #42	; 0x2a
 8009e8a:	d135      	bne.n	8009ef8 <_svfiprintf_r+0x188>
 8009e8c:	9b03      	ldr	r3, [sp, #12]
 8009e8e:	1d1a      	adds	r2, r3, #4
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	9203      	str	r2, [sp, #12]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	bfb8      	it	lt
 8009e98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e9c:	3402      	adds	r4, #2
 8009e9e:	9305      	str	r3, [sp, #20]
 8009ea0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f6c <_svfiprintf_r+0x1fc>
 8009ea4:	7821      	ldrb	r1, [r4, #0]
 8009ea6:	2203      	movs	r2, #3
 8009ea8:	4650      	mov	r0, sl
 8009eaa:	f7f6 f991 	bl	80001d0 <memchr>
 8009eae:	b140      	cbz	r0, 8009ec2 <_svfiprintf_r+0x152>
 8009eb0:	2340      	movs	r3, #64	; 0x40
 8009eb2:	eba0 000a 	sub.w	r0, r0, sl
 8009eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8009eba:	9b04      	ldr	r3, [sp, #16]
 8009ebc:	4303      	orrs	r3, r0
 8009ebe:	3401      	adds	r4, #1
 8009ec0:	9304      	str	r3, [sp, #16]
 8009ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ec6:	4826      	ldr	r0, [pc, #152]	; (8009f60 <_svfiprintf_r+0x1f0>)
 8009ec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ecc:	2206      	movs	r2, #6
 8009ece:	f7f6 f97f 	bl	80001d0 <memchr>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d038      	beq.n	8009f48 <_svfiprintf_r+0x1d8>
 8009ed6:	4b23      	ldr	r3, [pc, #140]	; (8009f64 <_svfiprintf_r+0x1f4>)
 8009ed8:	bb1b      	cbnz	r3, 8009f22 <_svfiprintf_r+0x1b2>
 8009eda:	9b03      	ldr	r3, [sp, #12]
 8009edc:	3307      	adds	r3, #7
 8009ede:	f023 0307 	bic.w	r3, r3, #7
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	9303      	str	r3, [sp, #12]
 8009ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee8:	4433      	add	r3, r6
 8009eea:	9309      	str	r3, [sp, #36]	; 0x24
 8009eec:	e767      	b.n	8009dbe <_svfiprintf_r+0x4e>
 8009eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	2001      	movs	r0, #1
 8009ef6:	e7a5      	b.n	8009e44 <_svfiprintf_r+0xd4>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	3401      	adds	r4, #1
 8009efc:	9305      	str	r3, [sp, #20]
 8009efe:	4619      	mov	r1, r3
 8009f00:	f04f 0c0a 	mov.w	ip, #10
 8009f04:	4620      	mov	r0, r4
 8009f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f0a:	3a30      	subs	r2, #48	; 0x30
 8009f0c:	2a09      	cmp	r2, #9
 8009f0e:	d903      	bls.n	8009f18 <_svfiprintf_r+0x1a8>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0c5      	beq.n	8009ea0 <_svfiprintf_r+0x130>
 8009f14:	9105      	str	r1, [sp, #20]
 8009f16:	e7c3      	b.n	8009ea0 <_svfiprintf_r+0x130>
 8009f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e7f0      	b.n	8009f04 <_svfiprintf_r+0x194>
 8009f22:	ab03      	add	r3, sp, #12
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	462a      	mov	r2, r5
 8009f28:	4b0f      	ldr	r3, [pc, #60]	; (8009f68 <_svfiprintf_r+0x1f8>)
 8009f2a:	a904      	add	r1, sp, #16
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	f3af 8000 	nop.w
 8009f32:	1c42      	adds	r2, r0, #1
 8009f34:	4606      	mov	r6, r0
 8009f36:	d1d6      	bne.n	8009ee6 <_svfiprintf_r+0x176>
 8009f38:	89ab      	ldrh	r3, [r5, #12]
 8009f3a:	065b      	lsls	r3, r3, #25
 8009f3c:	f53f af2c 	bmi.w	8009d98 <_svfiprintf_r+0x28>
 8009f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f42:	b01d      	add	sp, #116	; 0x74
 8009f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f48:	ab03      	add	r3, sp, #12
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	462a      	mov	r2, r5
 8009f4e:	4b06      	ldr	r3, [pc, #24]	; (8009f68 <_svfiprintf_r+0x1f8>)
 8009f50:	a904      	add	r1, sp, #16
 8009f52:	4638      	mov	r0, r7
 8009f54:	f7ff fd16 	bl	8009984 <_printf_i>
 8009f58:	e7eb      	b.n	8009f32 <_svfiprintf_r+0x1c2>
 8009f5a:	bf00      	nop
 8009f5c:	08010e24 	.word	0x08010e24
 8009f60:	08010e2e 	.word	0x08010e2e
 8009f64:	00000000 	.word	0x00000000
 8009f68:	0800d91b 	.word	0x0800d91b
 8009f6c:	08010e2a 	.word	0x08010e2a

08009f70 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
 8009f70:	6883      	ldr	r3, [r0, #8]
 8009f72:	6a1b      	ldr	r3, [r3, #32]
 8009f74:	b103      	cbz	r3, 8009f78 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
 8009f76:	4718      	bx	r3
}
 8009f78:	4770      	bx	lr

08009f7a <crc_accumulate>:
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8009f7a:	880a      	ldrh	r2, [r1, #0]
 8009f7c:	4050      	eors	r0, r2
        tmp ^= (tmp<<4);
 8009f7e:	ea80 1000 	eor.w	r0, r0, r0, lsl #4
 8009f82:	b2c0      	uxtb	r0, r0
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8009f84:	0903      	lsrs	r3, r0, #4
 8009f86:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8009f8a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009f8e:	ea83 00c0 	eor.w	r0, r3, r0, lsl #3
 8009f92:	8008      	strh	r0, [r1, #0]
}
 8009f94:	4770      	bx	lr

08009f96 <mavlink_update_checksum>:
{
 8009f96:	b513      	push	{r0, r1, r4, lr}
 8009f98:	4604      	mov	r4, r0
 8009f9a:	4608      	mov	r0, r1
	uint16_t checksum = msg->checksum;
 8009f9c:	7823      	ldrb	r3, [r4, #0]
 8009f9e:	7862      	ldrb	r2, [r4, #1]
	crc_accumulate(c, &checksum);
 8009fa0:	f10d 0106 	add.w	r1, sp, #6
	uint16_t checksum = msg->checksum;
 8009fa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fa8:	f8ad 3006 	strh.w	r3, [sp, #6]
	crc_accumulate(c, &checksum);
 8009fac:	f7ff ffe5 	bl	8009f7a <crc_accumulate>
	msg->checksum = checksum;
 8009fb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009fb4:	8023      	strh	r3, [r4, #0]
}
 8009fb6:	b002      	add	sp, #8
 8009fb8:	bd10      	pop	{r4, pc}

08009fba <mavlink_msg_to_send_buffer>:
{
 8009fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8009fbc:	788b      	ldrb	r3, [r1, #2]
        uint8_t length = msg->len;
 8009fbe:	78cf      	ldrb	r7, [r1, #3]
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8009fc0:	2bfe      	cmp	r3, #254	; 0xfe
{
 8009fc2:	460d      	mov	r5, r1
 8009fc4:	4604      	mov	r4, r0
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8009fc6:	f101 010c 	add.w	r1, r1, #12
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8009fca:	d029      	beq.n	800a020 <mavlink_msg_to_send_buffer+0x66>
 8009fcc:	463e      	mov	r6, r7
	while (length > 1 && payload[length-1] == 0) {
 8009fce:	2e01      	cmp	r6, #1
 8009fd0:	b2f7      	uxtb	r7, r6
 8009fd2:	d903      	bls.n	8009fdc <mavlink_msg_to_send_buffer+0x22>
 8009fd4:	1e72      	subs	r2, r6, #1
 8009fd6:	5c88      	ldrb	r0, [r1, r2]
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d045      	beq.n	800a068 <mavlink_msg_to_send_buffer+0xae>
		buf[0] = msg->magic;
 8009fdc:	7023      	strb	r3, [r4, #0]
		buf[1] = length;
 8009fde:	7067      	strb	r7, [r4, #1]
		buf[2] = msg->incompat_flags;
 8009fe0:	792b      	ldrb	r3, [r5, #4]
 8009fe2:	70a3      	strb	r3, [r4, #2]
		buf[3] = msg->compat_flags;
 8009fe4:	796b      	ldrb	r3, [r5, #5]
 8009fe6:	70e3      	strb	r3, [r4, #3]
		buf[4] = msg->seq;
 8009fe8:	79ab      	ldrb	r3, [r5, #6]
 8009fea:	7123      	strb	r3, [r4, #4]
		buf[5] = msg->sysid;
 8009fec:	79eb      	ldrb	r3, [r5, #7]
 8009fee:	7163      	strb	r3, [r4, #5]
		buf[6] = msg->compid;
 8009ff0:	7a2b      	ldrb	r3, [r5, #8]
 8009ff2:	71a3      	strb	r3, [r4, #6]
		buf[7] = msg->msgid & 0xFF;
 8009ff4:	7a6b      	ldrb	r3, [r5, #9]
 8009ff6:	71e3      	strb	r3, [r4, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8009ff8:	7aab      	ldrb	r3, [r5, #10]
 8009ffa:	7223      	strb	r3, [r4, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8009ffc:	7aeb      	ldrb	r3, [r5, #11]
 8009ffe:	7263      	strb	r3, [r4, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 800a000:	4632      	mov	r2, r6
 800a002:	f104 000a 	add.w	r0, r4, #10
 800a006:	f003 fb67 	bl	800d6d8 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 800a00a:	f106 000a 	add.w	r0, r6, #10
 800a00e:	4420      	add	r0, r4
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800a010:	792c      	ldrb	r4, [r5, #4]
 800a012:	f014 0401 	ands.w	r4, r4, #1
		header_len = MAVLINK_CORE_HEADER_LEN;
 800a016:	f04f 0609 	mov.w	r6, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800a01a:	bf18      	it	ne
 800a01c:	240d      	movne	r4, #13
 800a01e:	e012      	b.n	800a046 <mavlink_msg_to_send_buffer+0x8c>
		buf[0] = msg->magic;
 800a020:	7003      	strb	r3, [r0, #0]
		buf[1] = length;
 800a022:	7047      	strb	r7, [r0, #1]
		buf[2] = msg->seq;
 800a024:	79ab      	ldrb	r3, [r5, #6]
 800a026:	7083      	strb	r3, [r0, #2]
		buf[3] = msg->sysid;
 800a028:	79eb      	ldrb	r3, [r5, #7]
 800a02a:	70c3      	strb	r3, [r0, #3]
		buf[4] = msg->compid;
 800a02c:	7a2b      	ldrb	r3, [r5, #8]
 800a02e:	7103      	strb	r3, [r0, #4]
		buf[5] = msg->msgid & 0xFF;
 800a030:	7a6b      	ldrb	r3, [r5, #9]
 800a032:	7143      	strb	r3, [r0, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 800a034:	78ea      	ldrb	r2, [r5, #3]
 800a036:	3006      	adds	r0, #6
 800a038:	f003 fb4e 	bl	800d6d8 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 800a03c:	78e8      	ldrb	r0, [r5, #3]
 800a03e:	3006      	adds	r0, #6
 800a040:	4420      	add	r0, r4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800a042:	2605      	movs	r6, #5
		signature_len = 0;
 800a044:	2400      	movs	r4, #0
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800a046:	882b      	ldrh	r3, [r5, #0]
 800a048:	7003      	strb	r3, [r0, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800a04a:	882b      	ldrh	r3, [r5, #0]
 800a04c:	0a1b      	lsrs	r3, r3, #8
 800a04e:	7043      	strb	r3, [r0, #1]
	if (signature_len > 0) {
 800a050:	b12c      	cbz	r4, 800a05e <mavlink_msg_to_send_buffer+0xa4>
		memcpy(&ck[2], msg->signature, signature_len);
 800a052:	4622      	mov	r2, r4
 800a054:	f505 718b 	add.w	r1, r5, #278	; 0x116
 800a058:	3002      	adds	r0, #2
 800a05a:	f003 fb3d 	bl	800d6d8 <memcpy>
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800a05e:	19f0      	adds	r0, r6, r7
 800a060:	3403      	adds	r4, #3
 800a062:	4420      	add	r0, r4
}
 800a064:	b280      	uxth	r0, r0
 800a066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a068:	4616      	mov	r6, r2
 800a06a:	e7b0      	b.n	8009fce <mavlink_msg_to_send_buffer+0x14>

0800a06c <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 800a06c:	b570      	push	{r4, r5, r6, lr}
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 800a06e:	6806      	ldr	r6, [r0, #0]
{
 800a070:	4604      	mov	r4, r0
 800a072:	b092      	sub	sp, #72	; 0x48
    unsigned offset = (m->sz[0] / 8) % 64;
 800a074:	08f6      	lsrs	r6, r6, #3
{
 800a076:	460d      	mov	r5, r1
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
    uint8_t *p = (uint8_t *)&m->counter[0];
    
    *zeros = 0x80;
 800a078:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800a07a:	2247      	movs	r2, #71	; 0x47
 800a07c:	2100      	movs	r1, #0
 800a07e:	f10d 0001 	add.w	r0, sp, #1
 800a082:	f1c6 0677 	rsb	r6, r6, #119	; 0x77
 800a086:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    *zeros = 0x80;
 800a08a:	f88d 3000 	strb.w	r3, [sp]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800a08e:	f003 fb4b 	bl	800d728 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800a092:	6822      	ldr	r2, [r4, #0]
 800a094:	ab12      	add	r3, sp, #72	; 0x48
 800a096:	4433      	add	r3, r6
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 800a098:	0a11      	lsrs	r1, r2, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800a09a:	f803 2c40 	strb.w	r2, [r3, #-64]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 800a09e:	f803 1c41 	strb.w	r1, [r3, #-65]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 800a0a2:	0c11      	lsrs	r1, r2, #16
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800a0a4:	0e12      	lsrs	r2, r2, #24
 800a0a6:	f803 2c43 	strb.w	r2, [r3, #-67]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800a0aa:	6862      	ldr	r2, [r4, #4]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 800a0ac:	f803 1c42 	strb.w	r1, [r3, #-66]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 800a0b0:	0a11      	lsrs	r1, r2, #8
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800a0b2:	f803 2c44 	strb.w	r2, [r3, #-68]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 800a0b6:	f803 1c45 	strb.w	r1, [r3, #-69]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 800a0ba:	0c11      	lsrs	r1, r2, #16
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800a0bc:	0e12      	lsrs	r2, r2, #24
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 800a0be:	f803 1c46 	strb.w	r1, [r3, #-70]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800a0c2:	f803 2c47 	strb.w	r2, [r3, #-71]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800a0c6:	4669      	mov	r1, sp
 800a0c8:	f106 0209 	add.w	r2, r6, #9
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f7f7 fdd3 	bl	8001c78 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 800a0d2:	7ae3      	ldrb	r3, [r4, #11]
 800a0d4:	702b      	strb	r3, [r5, #0]
    result[1] = p[2];
 800a0d6:	7aa3      	ldrb	r3, [r4, #10]
 800a0d8:	706b      	strb	r3, [r5, #1]
    result[2] = p[1];
 800a0da:	7a63      	ldrb	r3, [r4, #9]
 800a0dc:	70ab      	strb	r3, [r5, #2]
    result[3] = p[0];
 800a0de:	7a23      	ldrb	r3, [r4, #8]
 800a0e0:	70eb      	strb	r3, [r5, #3]
    result[4] = p[7];
 800a0e2:	7be3      	ldrb	r3, [r4, #15]
 800a0e4:	712b      	strb	r3, [r5, #4]
    result[5] = p[6];
 800a0e6:	7ba3      	ldrb	r3, [r4, #14]
 800a0e8:	716b      	strb	r3, [r5, #5]
}
 800a0ea:	b012      	add	sp, #72	; 0x48
 800a0ec:	bd70      	pop	{r4, r5, r6, pc}

0800a0ee <_Z14handle_messageR17__mavlink_message>:
void handle_message(mavlink_message_t& msg) {
 800a0ee:	b530      	push	{r4, r5, lr}
	switch(msg.msgid) {
 800a0f0:	7a82      	ldrb	r2, [r0, #10]
 800a0f2:	7a43      	ldrb	r3, [r0, #9]
 800a0f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0f8:	7ac2      	ldrb	r2, [r0, #11]
 800a0fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0fe:	2b18      	cmp	r3, #24
void handle_message(mavlink_message_t& msg) {
 800a100:	b08f      	sub	sp, #60	; 0x3c
 800a102:	4604      	mov	r4, r0
	switch(msg.msgid) {
 800a104:	d112      	bne.n	800a12c <_Z14handle_messageR17__mavlink_message+0x3e>
    gps_raw_int->v_acc = mavlink_msg_gps_raw_int_get_v_acc(msg);
    gps_raw_int->vel_acc = mavlink_msg_gps_raw_int_get_vel_acc(msg);
    gps_raw_int->hdg_acc = mavlink_msg_gps_raw_int_get_hdg_acc(msg);
    gps_raw_int->yaw = mavlink_msg_gps_raw_int_get_yaw(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_GPS_RAW_INT_LEN? msg->len : MAVLINK_MSG_ID_GPS_RAW_INT_LEN;
 800a106:	78c5      	ldrb	r5, [r0, #3]
 800a108:	2d34      	cmp	r5, #52	; 0x34
 800a10a:	bf28      	it	cs
 800a10c:	2534      	movcs	r5, #52	; 0x34
        memset(gps_raw_int, 0, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
 800a10e:	2234      	movs	r2, #52	; 0x34
 800a110:	2100      	movs	r1, #0
 800a112:	a801      	add	r0, sp, #4
 800a114:	f003 fb08 	bl	800d728 <memset>
    memcpy(gps_raw_int, _MAV_PAYLOAD(msg), len);
 800a118:	f104 010c 	add.w	r1, r4, #12
 800a11c:	462a      	mov	r2, r5
 800a11e:	a801      	add	r0, sp, #4
 800a120:	f003 fada 	bl	800d6d8 <memcpy>
		handle_gps_raw_int(msg.sysid, gps_raw_int);
 800a124:	79e0      	ldrb	r0, [r4, #7]
 800a126:	a901      	add	r1, sp, #4
 800a128:	f7f6 fe5a 	bl	8000de0 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t>
}
 800a12c:	b00f      	add	sp, #60	; 0x3c
 800a12e:	bd30      	pop	{r4, r5, pc}

0800a130 <_ZN8PozyxDev9read_byteEh>:
	uint8_t read_byte(uint8_t register_addr) {
 800a130:	b530      	push	{r4, r5, lr}
 800a132:	b089      	sub	sp, #36	; 0x24
	msg[0].buf = (uint8_t *)write_buf;
 800a134:	f10d 0207 	add.w	r2, sp, #7
 800a138:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
 800a13c:	2100      	movs	r1, #0
	msg[0].buf = (uint8_t *)write_buf;
 800a13e:	9202      	str	r2, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
 800a140:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[0].len = num_write;
 800a144:	2201      	movs	r2, #1
	msg[1].buf = (uint8_t *)read_buf;
 800a146:	f10d 0106 	add.w	r1, sp, #6
	msg[1].len = num_read;
 800a14a:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].len = num_write;
 800a14e:	9203      	str	r2, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 800a150:	2207      	movs	r2, #7
		i2c_reg_read_byte(dev, i2c_addr, register_addr, &data);
 800a152:	6804      	ldr	r4, [r0, #0]
 800a154:	8883      	ldrh	r3, [r0, #4]
 800a156:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
 800a15a:	68a2      	ldr	r2, [r4, #8]
 800a15c:	a902      	add	r1, sp, #8
 800a15e:	6855      	ldr	r5, [r2, #4]
 800a160:	4620      	mov	r0, r4
 800a162:	2202      	movs	r2, #2
 800a164:	47a8      	blx	r5
	}
 800a166:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800a16a:	b009      	add	sp, #36	; 0x24
 800a16c:	bd30      	pop	{r4, r5, pc}

0800a16e <arch_printk_char_out>:
}
 800a16e:	2000      	movs	r0, #0
 800a170:	4770      	bx	lr

0800a172 <str_out>:
{
 800a172:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800a174:	688a      	ldr	r2, [r1, #8]
 800a176:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 800a178:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800a17a:	b114      	cbz	r4, 800a182 <str_out+0x10>
 800a17c:	684b      	ldr	r3, [r1, #4]
 800a17e:	4293      	cmp	r3, r2
 800a180:	dc01      	bgt.n	800a186 <str_out+0x14>
		ctx->count++;
 800a182:	608d      	str	r5, [r1, #8]
}
 800a184:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 800a186:	3b01      	subs	r3, #1
 800a188:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 800a18a:	bf08      	it	eq
 800a18c:	2200      	moveq	r2, #0
 800a18e:	608d      	str	r5, [r1, #8]
 800a190:	bf0c      	ite	eq
 800a192:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 800a194:	54a0      	strbne	r0, [r4, r2]
 800a196:	e7f5      	b.n	800a184 <str_out+0x12>

0800a198 <printk>:
{
 800a198:	b40f      	push	{r0, r1, r2, r3}
 800a19a:	b507      	push	{r0, r1, r2, lr}
 800a19c:	a904      	add	r1, sp, #16
 800a19e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800a1a2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 800a1a4:	f7f8 fb9a 	bl	80028dc <vprintk>
}
 800a1a8:	b003      	add	sp, #12
 800a1aa:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1ae:	b004      	add	sp, #16
 800a1b0:	4770      	bx	lr

0800a1b2 <snprintk>:
{
 800a1b2:	b40c      	push	{r2, r3}
 800a1b4:	b507      	push	{r0, r1, r2, lr}
 800a1b6:	ab04      	add	r3, sp, #16
 800a1b8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800a1bc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800a1be:	f7f8 fb9b 	bl	80028f8 <vsnprintk>
}
 800a1c2:	b003      	add	sp, #12
 800a1c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1c8:	b002      	add	sp, #8
 800a1ca:	4770      	bx	lr

0800a1cc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	b508      	push	{r3, lr}
 800a1d0:	4608      	mov	r0, r1
 800a1d2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	47a0      	blx	r4
	return z_impl_k_current_get();
 800a1d8:	f7fe ff3a 	bl	8009050 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 800a1dc:	f7fc fb9a 	bl	8006914 <z_impl_k_thread_abort>

0800a1e0 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 800a1e0:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 800a1e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 800a1e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 800a1ea:	bf2c      	ite	cs
 800a1ec:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 800a1f0:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 800a1f4:	4770      	bx	lr

0800a1f6 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 800a1f6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 800a1fa:	6880      	ldr	r0, [r0, #8]
 800a1fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 800a200:	bf2c      	ite	cs
 800a202:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 800a206:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 800a20a:	4770      	bx	lr

0800a20c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
 800a20c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800a20e:	2201      	movs	r2, #1
 800a210:	f7ff ffe6 	bl	800a1e0 <chunk_field>
}
 800a214:	40d0      	lsrs	r0, r2
 800a216:	bd08      	pop	{r3, pc}

0800a218 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 800a218:	6883      	ldr	r3, [r0, #8]
 800a21a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
 800a21e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 800a222:	d308      	bcc.n	800a236 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800a224:	684b      	ldr	r3, [r1, #4]
		if (used) {
 800a226:	b11a      	cbz	r2, 800a230 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800a228:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 800a22c:	604b      	str	r3, [r1, #4]
 800a22e:	4770      	bx	lr
 800a230:	f023 0301 	bic.w	r3, r3, #1
 800a234:	e7fa      	b.n	800a22c <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800a236:	884b      	ldrh	r3, [r1, #2]
		if (used) {
 800a238:	b11a      	cbz	r2, 800a242 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800a23a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 800a23e:	804b      	strh	r3, [r1, #2]
		}
	}
}
 800a240:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 800a242:	f023 0301 	bic.w	r3, r3, #1
 800a246:	e7fa      	b.n	800a23e <set_chunk_used+0x26>

0800a248 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800a248:	0053      	lsls	r3, r2, #1
 800a24a:	2201      	movs	r2, #1
 800a24c:	f7ff bfd3 	b.w	800a1f6 <chunk_set>

0800a250 <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 800a250:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a254:	bf2c      	ite	cs
 800a256:	2008      	movcs	r0, #8
 800a258:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800a25a:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800a25c:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800a25e:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
 800a262:	fab0 f080 	clz	r0, r0
}
 800a266:	f1c0 001f 	rsb	r0, r0, #31
 800a26a:	4770      	bx	lr

0800a26c <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 800a26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a270:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
 800a272:	2203      	movs	r2, #3
 800a274:	460e      	mov	r6, r1
 800a276:	4604      	mov	r4, r0
 800a278:	f7ff ffb2 	bl	800a1e0 <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
 800a27c:	4286      	cmp	r6, r0
 800a27e:	4605      	mov	r5, r0
 800a280:	f107 0804 	add.w	r8, r7, #4
 800a284:	d10b      	bne.n	800a29e <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
 800a286:	2301      	movs	r3, #1
 800a288:	fa03 f707 	lsl.w	r7, r3, r7
 800a28c:	68e3      	ldr	r3, [r4, #12]
 800a28e:	ea23 0307 	bic.w	r3, r3, r7
 800a292:	60e3      	str	r3, [r4, #12]
		b->next = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
 800a29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
 800a29e:	4631      	mov	r1, r6
 800a2a0:	2202      	movs	r2, #2
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f7ff ff9c 	bl	800a1e0 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
 800a2a8:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
 800a2aa:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
 800a2ac:	4601      	mov	r1, r0
		b->next = second;
 800a2ae:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	2203      	movs	r2, #3
 800a2b6:	f7ff ff9e 	bl	800a1f6 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 800a2ba:	4633      	mov	r3, r6
 800a2bc:	4629      	mov	r1, r5
 800a2be:	4620      	mov	r0, r4
 800a2c0:	2202      	movs	r2, #2
}
 800a2c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c6:	f7ff bf96 	b.w	800a1f6 <chunk_set>

0800a2ca <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
 800a2ca:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
 800a2cc:	6886      	ldr	r6, [r0, #8]
 800a2ce:	460d      	mov	r5, r1
 800a2d0:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 800a2d2:	f7ff ff9b 	bl	800a20c <chunk_size>
 800a2d6:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800a2da:	4601      	mov	r1, r0
 800a2dc:	d301      	bcc.n	800a2e2 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
 800a2de:	2801      	cmp	r0, #1
 800a2e0:	d009      	beq.n	800a2f6 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	f7ff ffb4 	bl	800a250 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
 800a2e8:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
 800a2ea:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
 800a2ec:	4620      	mov	r0, r4
	}
}
 800a2ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
 800a2f2:	f7ff bfbb 	b.w	800a26c <free_list_remove_bidx>
}
 800a2f6:	bd70      	pop	{r4, r5, r6, pc}

0800a2f8 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
 800a2f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2fc:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
 800a2fe:	6880      	ldr	r0, [r0, #8]
{
 800a300:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
 800a302:	f7ff ffa5 	bl	800a250 <bucket_idx.isra.0>
 800a306:	eb04 0980 	add.w	r9, r4, r0, lsl #2
 800a30a:	4605      	mov	r5, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 800a30c:	f8d9 8010 	ldr.w	r8, [r9, #16]
 800a310:	f1b8 0f00 	cmp.w	r8, #0
 800a314:	d01c      	beq.n	800a350 <alloc_chunk+0x58>
 800a316:	2603      	movs	r6, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
 800a318:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
 800a31c:	9101      	str	r1, [sp, #4]
 800a31e:	4620      	mov	r0, r4
 800a320:	f7ff ff74 	bl	800a20c <chunk_size>
 800a324:	42b8      	cmp	r0, r7
 800a326:	9901      	ldr	r1, [sp, #4]
 800a328:	d308      	bcc.n	800a33c <alloc_chunk+0x44>
				free_list_remove_bidx(h, c, bi);
 800a32a:	462a      	mov	r2, r5

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
 800a32c:	4620      	mov	r0, r4
 800a32e:	f7ff ff9d 	bl	800a26c <free_list_remove_bidx>
 800a332:	9901      	ldr	r1, [sp, #4]
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 800a334:	4608      	mov	r0, r1
 800a336:	b003      	add	sp, #12
 800a338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return chunk_field(h, c, FREE_NEXT);
 800a33c:	2203      	movs	r2, #3
 800a33e:	4620      	mov	r0, r4
 800a340:	f7ff ff4e 	bl	800a1e0 <chunk_field>
		} while (--i && b->next != first);
 800a344:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
 800a346:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
 800a34a:	d001      	beq.n	800a350 <alloc_chunk+0x58>
 800a34c:	4580      	cmp	r8, r0
 800a34e:	d1e3      	bne.n	800a318 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
 800a350:	68e3      	ldr	r3, [r4, #12]
 800a352:	3501      	adds	r5, #1
 800a354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a358:	40a9      	lsls	r1, r5
	if (bmask != 0U) {
 800a35a:	4019      	ands	r1, r3
 800a35c:	d0ea      	beq.n	800a334 <alloc_chunk+0x3c>
		int minbucket = __builtin_ctz(bmask);
 800a35e:	fa91 f2a1 	rbit	r2, r1
 800a362:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 800a366:	1d13      	adds	r3, r2, #4
 800a368:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 800a36c:	9101      	str	r1, [sp, #4]
 800a36e:	e7dd      	b.n	800a32c <alloc_chunk+0x34>

0800a370 <split_chunks>:
{
 800a370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a372:	4614      	mov	r4, r2
 800a374:	4605      	mov	r5, r0
 800a376:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
 800a378:	f7ff ff48 	bl	800a20c <chunk_size>
	chunksz_t lsz = rc - lc;
 800a37c:	1ba3      	subs	r3, r4, r6
	chunksz_t rsz = sz0 - lsz;
 800a37e:	1b32      	subs	r2, r6, r4
 800a380:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
 800a382:	4631      	mov	r1, r6
 800a384:	461a      	mov	r2, r3
 800a386:	4628      	mov	r0, r5
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	f7ff ff5d 	bl	800a248 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
 800a38e:	463a      	mov	r2, r7
 800a390:	4621      	mov	r1, r4
 800a392:	4628      	mov	r0, r5
 800a394:	f7ff ff58 	bl	800a248 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 800a398:	9b01      	ldr	r3, [sp, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	4621      	mov	r1, r4
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f7ff ff29 	bl	800a1f6 <chunk_set>
	return c + chunk_size(h, c);
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f7ff ff30 	bl	800a20c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 800a3ac:	463b      	mov	r3, r7
 800a3ae:	1821      	adds	r1, r4, r0
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	4628      	mov	r0, r5
}
 800a3b4:	b003      	add	sp, #12
 800a3b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a3ba:	f7ff bf1c 	b.w	800a1f6 <chunk_set>

0800a3be <merge_chunks>:
{
 800a3be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3c0:	4616      	mov	r6, r2
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 800a3c6:	f7ff ff21 	bl	800a20c <chunk_size>
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f7ff ff1c 	bl	800a20c <chunk_size>
 800a3d4:	182b      	adds	r3, r5, r0
	set_chunk_size(h, lc, newsz);
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	4639      	mov	r1, r7
 800a3da:	4620      	mov	r0, r4
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	f7ff ff33 	bl	800a248 <set_chunk_size>
	return c + chunk_size(h, c);
 800a3e2:	4631      	mov	r1, r6
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f7ff ff11 	bl	800a20c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 800a3ea:	9b01      	ldr	r3, [sp, #4]
 800a3ec:	1831      	adds	r1, r6, r0
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	4620      	mov	r0, r4
}
 800a3f2:	b003      	add	sp, #12
 800a3f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a3f8:	f7ff befd 	b.w	800a1f6 <chunk_set>

0800a3fc <free_list_add>:
{
 800a3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
 800a400:	6886      	ldr	r6, [r0, #8]
 800a402:	460d      	mov	r5, r1
 800a404:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 800a406:	f7ff ff01 	bl	800a20c <chunk_size>
 800a40a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800a40e:	4601      	mov	r1, r0
 800a410:	d301      	bcc.n	800a416 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 800a412:	2801      	cmp	r0, #1
 800a414:	d033      	beq.n	800a47e <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
 800a416:	4630      	mov	r0, r6
 800a418:	f7ff ff1a 	bl	800a250 <bucket_idx.isra.0>
	if (b->next == 0U) {
 800a41c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 800a420:	6916      	ldr	r6, [r2, #16]
 800a422:	b99e      	cbnz	r6, 800a44c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 800a424:	2301      	movs	r3, #1
 800a426:	fa03 f000 	lsl.w	r0, r3, r0
 800a42a:	68e3      	ldr	r3, [r4, #12]
 800a42c:	4303      	orrs	r3, r0
 800a42e:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
 800a430:	4629      	mov	r1, r5
		b->next = c;
 800a432:	6115      	str	r5, [r2, #16]
 800a434:	462b      	mov	r3, r5
 800a436:	2202      	movs	r2, #2
 800a438:	4620      	mov	r0, r4
 800a43a:	f7ff fedc 	bl	800a1f6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 800a43e:	2203      	movs	r2, #3
 800a440:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 800a442:	4620      	mov	r0, r4
}
 800a444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a448:	f7ff bed5 	b.w	800a1f6 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 800a44c:	2202      	movs	r2, #2
 800a44e:	4631      	mov	r1, r6
 800a450:	4620      	mov	r0, r4
 800a452:	f7ff fec5 	bl	800a1e0 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 800a456:	4629      	mov	r1, r5
 800a458:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 800a45a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 800a45c:	4620      	mov	r0, r4
 800a45e:	f7ff feca 	bl	800a1f6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 800a462:	2203      	movs	r2, #3
 800a464:	4633      	mov	r3, r6
 800a466:	4629      	mov	r1, r5
 800a468:	4620      	mov	r0, r4
 800a46a:	f7ff fec4 	bl	800a1f6 <chunk_set>
 800a46e:	4639      	mov	r1, r7
 800a470:	462b      	mov	r3, r5
 800a472:	4620      	mov	r0, r4
 800a474:	f7ff febf 	bl	800a1f6 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 800a478:	2202      	movs	r2, #2
 800a47a:	4631      	mov	r1, r6
 800a47c:	e7e1      	b.n	800a442 <free_list_add+0x46>
 800a47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a482 <free_chunk>:
{
 800a482:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a484:	4605      	mov	r5, r0
 800a486:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
 800a488:	f7ff fec0 	bl	800a20c <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 800a48c:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
 800a48e:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 800a490:	4628      	mov	r0, r5
 800a492:	9101      	str	r1, [sp, #4]
 800a494:	f7ff fea4 	bl	800a1e0 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
 800a498:	f010 0f01 	tst.w	r0, #1
 800a49c:	9901      	ldr	r1, [sp, #4]
 800a49e:	d10b      	bne.n	800a4b8 <free_chunk+0x36>
		free_list_remove(h, right_chunk(h, c));
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	f7ff ff12 	bl	800a2ca <free_list_remove>
	return c + chunk_size(h, c);
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f7ff feaf 	bl	800a20c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	1822      	adds	r2, r4, r0
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f7ff ff83 	bl	800a3be <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	4628      	mov	r0, r5
 800a4be:	f7ff fe8f 	bl	800a1e0 <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 800a4c2:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
 800a4c4:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	9101      	str	r1, [sp, #4]
 800a4ca:	f7ff fe89 	bl	800a1e0 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
 800a4ce:	ea10 0602 	ands.w	r6, r0, r2
 800a4d2:	9901      	ldr	r1, [sp, #4]
 800a4d4:	d112      	bne.n	800a4fc <free_chunk+0x7a>
		free_list_remove(h, left_chunk(h, c));
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f7ff fef7 	bl	800a2ca <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
 800a4dc:	4621      	mov	r1, r4
 800a4de:	4632      	mov	r2, r6
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f7ff fe7d 	bl	800a1e0 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
 800a4e6:	4622      	mov	r2, r4
 800a4e8:	1a21      	subs	r1, r4, r0
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f7ff ff67 	bl	800a3be <merge_chunks>
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4632      	mov	r2, r6
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f7ff fe73 	bl	800a1e0 <chunk_field>
 800a4fa:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	4628      	mov	r0, r5
}
 800a500:	b002      	add	sp, #8
 800a502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
 800a506:	f7ff bf79 	b.w	800a3fc <free_list_add>

0800a50a <sys_heap_free>:
{
 800a50a:	b507      	push	{r0, r1, r2, lr}
	if (mem == NULL) {
 800a50c:	b199      	cbz	r1, 800a536 <sys_heap_free+0x2c>
 800a50e:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
 800a510:	6883      	ldr	r3, [r0, #8]
 800a512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a516:	bf2c      	ite	cs
 800a518:	2308      	movcs	r3, #8
 800a51a:	2304      	movcc	r3, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 800a51c:	1ac9      	subs	r1, r1, r3
 800a51e:	1a09      	subs	r1, r1, r0
 800a520:	08c9      	lsrs	r1, r1, #3
	set_chunk_used(h, c, false);
 800a522:	2200      	movs	r2, #0
 800a524:	9101      	str	r1, [sp, #4]
 800a526:	f7ff fe77 	bl	800a218 <set_chunk_used>
	free_chunk(h, c);
 800a52a:	9901      	ldr	r1, [sp, #4]
}
 800a52c:	b003      	add	sp, #12
 800a52e:	f85d eb04 	ldr.w	lr, [sp], #4
	free_chunk(h, c);
 800a532:	f7ff bfa6 	b.w	800a482 <free_chunk>
}
 800a536:	b003      	add	sp, #12
 800a538:	f85d fb04 	ldr.w	pc, [sp], #4

0800a53c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
 800a53c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 800a53e:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
 800a540:	b909      	cbnz	r1, 800a546 <sys_heap_alloc+0xa>
		return NULL;
 800a542:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
 800a544:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
 800a546:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
 800a548:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800a54c:	d9f9      	bls.n	800a542 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
 800a54e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a552:	bf2c      	ite	cs
 800a554:	2208      	movcs	r2, #8
 800a556:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800a558:	1dcc      	adds	r4, r1, #7
 800a55a:	4414      	add	r4, r2
 800a55c:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
 800a55e:	4621      	mov	r1, r4
 800a560:	4630      	mov	r0, r6
 800a562:	f7ff fec9 	bl	800a2f8 <alloc_chunk>
	if (c == 0U) {
 800a566:	4605      	mov	r5, r0
 800a568:	2800      	cmp	r0, #0
 800a56a:	d0ea      	beq.n	800a542 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
 800a56c:	4601      	mov	r1, r0
 800a56e:	4630      	mov	r0, r6
 800a570:	f7ff fe4c 	bl	800a20c <chunk_size>
 800a574:	42a0      	cmp	r0, r4
 800a576:	d909      	bls.n	800a58c <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
 800a578:	442c      	add	r4, r5
 800a57a:	4629      	mov	r1, r5
 800a57c:	4630      	mov	r0, r6
 800a57e:	4622      	mov	r2, r4
 800a580:	f7ff fef6 	bl	800a370 <split_chunks>
		free_list_add(h, c + chunk_sz);
 800a584:	4621      	mov	r1, r4
 800a586:	4630      	mov	r0, r6
 800a588:	f7ff ff38 	bl	800a3fc <free_list_add>
	set_chunk_used(h, c, true);
 800a58c:	4629      	mov	r1, r5
 800a58e:	4630      	mov	r0, r6
 800a590:	2201      	movs	r2, #1
 800a592:	f7ff fe41 	bl	800a218 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
 800a596:	68b3      	ldr	r3, [r6, #8]
 800a598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a59c:	bf2c      	ite	cs
 800a59e:	2308      	movcs	r3, #8
 800a5a0:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 800a5a2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a5a6:	4428      	add	r0, r5
	return chunk_mem(h, c);
 800a5a8:	e7cc      	b.n	800a544 <sys_heap_alloc+0x8>

0800a5aa <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 800a5aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
 800a5ae:	424b      	negs	r3, r1
	struct z_heap *h = heap->heap;
 800a5b0:	6806      	ldr	r6, [r0, #0]
	rew = align & -align;
 800a5b2:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
 800a5b6:	ea31 0303 	bics.w	r3, r1, r3
{
 800a5ba:	4614      	mov	r4, r2
	return big_heap_chunks(h->end_chunk);
 800a5bc:	68b2      	ldr	r2, [r6, #8]
	if (align != rew) {
 800a5be:	d00e      	beq.n	800a5de <sys_heap_aligned_alloc+0x34>
	return big_heap(h) ? 8 : 4;
 800a5c0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a5c4:	bf2c      	ite	cs
 800a5c6:	2308      	movcs	r3, #8
 800a5c8:	2304      	movcc	r3, #4
 800a5ca:	42bb      	cmp	r3, r7
 800a5cc:	bf28      	it	cs
 800a5ce:	463b      	movcs	r3, r7
 800a5d0:	46b9      	mov	r9, r7
		align -= rew;
 800a5d2:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
 800a5d4:	b994      	cbnz	r4, 800a5fc <sys_heap_aligned_alloc+0x52>
		return NULL;
 800a5d6:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
 800a5d8:	4628      	mov	r0, r5
 800a5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5de:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a5e2:	bf34      	ite	cc
 800a5e4:	2304      	movcc	r3, #4
 800a5e6:	2308      	movcs	r3, #8
		if (align <= chunk_header_bytes(h)) {
 800a5e8:	4299      	cmp	r1, r3
 800a5ea:	d804      	bhi.n	800a5f6 <sys_heap_aligned_alloc+0x4c>
			return sys_heap_alloc(heap, bytes);
 800a5ec:	4621      	mov	r1, r4
}
 800a5ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
 800a5f2:	f7ff bfa3 	b.w	800a53c <sys_heap_alloc>
		rew = 0;
 800a5f6:	f04f 0900 	mov.w	r9, #0
 800a5fa:	e7eb      	b.n	800a5d4 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
 800a5fc:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
 800a600:	d9e9      	bls.n	800a5d6 <sys_heap_aligned_alloc+0x2c>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
 800a602:	1de1      	adds	r1, r4, #7
 800a604:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a608:	4439      	add	r1, r7
 800a60a:	bf2c      	ite	cs
 800a60c:	2208      	movcs	r2, #8
 800a60e:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800a610:	1ac9      	subs	r1, r1, r3
 800a612:	4411      	add	r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 800a614:	08c9      	lsrs	r1, r1, #3
 800a616:	4630      	mov	r0, r6
 800a618:	f7ff fe6e 	bl	800a2f8 <alloc_chunk>
	if (c0 == 0) {
 800a61c:	4680      	mov	r8, r0
 800a61e:	2800      	cmp	r0, #0
 800a620:	d0d9      	beq.n	800a5d6 <sys_heap_aligned_alloc+0x2c>
	return big_heap(h) ? 8 : 4;
 800a622:	68b3      	ldr	r3, [r6, #8]
 800a624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a628:	bf2c      	ite	cs
 800a62a:	2308      	movcs	r3, #8
 800a62c:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 800a62e:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
 800a632:	441d      	add	r5, r3
 800a634:	1e7a      	subs	r2, r7, #1
 800a636:	4435      	add	r5, r6
 800a638:	427f      	negs	r7, r7
 800a63a:	4415      	add	r5, r2
 800a63c:	403d      	ands	r5, r7
 800a63e:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 800a642:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 800a644:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 800a646:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 800a648:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 800a64a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
 800a64e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
 800a650:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 800a654:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
 800a658:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
 800a65c:	d208      	bcs.n	800a670 <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
 800a65e:	4601      	mov	r1, r0
 800a660:	463a      	mov	r2, r7
 800a662:	4630      	mov	r0, r6
 800a664:	f7ff fe84 	bl	800a370 <split_chunks>
		free_list_add(h, c0);
 800a668:	4641      	mov	r1, r8
 800a66a:	4630      	mov	r0, r6
 800a66c:	f7ff fec6 	bl	800a3fc <free_list_add>
	return c + chunk_size(h, c);
 800a670:	4639      	mov	r1, r7
 800a672:	4630      	mov	r0, r6
 800a674:	f7ff fdca 	bl	800a20c <chunk_size>
 800a678:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
 800a67a:	4284      	cmp	r4, r0
 800a67c:	d208      	bcs.n	800a690 <sys_heap_aligned_alloc+0xe6>
		split_chunks(h, c, c_end);
 800a67e:	4639      	mov	r1, r7
 800a680:	4630      	mov	r0, r6
 800a682:	4622      	mov	r2, r4
 800a684:	f7ff fe74 	bl	800a370 <split_chunks>
		free_list_add(h, c_end);
 800a688:	4621      	mov	r1, r4
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff feb6 	bl	800a3fc <free_list_add>
	set_chunk_used(h, c, true);
 800a690:	2201      	movs	r2, #1
 800a692:	4639      	mov	r1, r7
 800a694:	4630      	mov	r0, r6
 800a696:	f7ff fdbf 	bl	800a218 <set_chunk_used>
	return mem;
 800a69a:	e79d      	b.n	800a5d8 <sys_heap_aligned_alloc+0x2e>

0800a69c <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 800a69c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a2:	bf2c      	ite	cs
 800a6a4:	2408      	movcs	r4, #8
 800a6a6:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 800a6a8:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800a6aa:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800a6ac:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800a6ae:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800a6b2:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800a6b6:	1ba4      	subs	r4, r4, r6
 800a6b8:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 800a6ba:	2300      	movs	r3, #0
	heap->heap = h;
 800a6bc:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 800a6be:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
 800a6c0:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
 800a6c2:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f7ff fdc3 	bl	800a250 <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800a6ca:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800a6cc:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 800a6ce:	1c41      	adds	r1, r0, #1
 800a6d0:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 800a6d2:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
 800a6d6:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
 800a6d8:	428b      	cmp	r3, r1
 800a6da:	db2e      	blt.n	800a73a <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 800a6dc:	462a      	mov	r2, r5
 800a6de:	4630      	mov	r0, r6
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	f7ff fdb1 	bl	800a248 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7ff fd82 	bl	800a1f6 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 800a6f2:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f7ff fd8d 	bl	800a218 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 800a6fe:	463a      	mov	r2, r7
 800a700:	4629      	mov	r1, r5
 800a702:	f7ff fda1 	bl	800a248 <set_chunk_size>
 800a706:	462b      	mov	r3, r5
 800a708:	2200      	movs	r2, #0
 800a70a:	4629      	mov	r1, r5
 800a70c:	4630      	mov	r0, r6
 800a70e:	f7ff fd72 	bl	800a1f6 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
 800a712:	4621      	mov	r1, r4
 800a714:	4630      	mov	r0, r6
 800a716:	f7ff fd97 	bl	800a248 <set_chunk_size>
 800a71a:	463b      	mov	r3, r7
 800a71c:	4621      	mov	r1, r4
 800a71e:	4630      	mov	r0, r6
 800a720:	2200      	movs	r2, #0
 800a722:	f7ff fd68 	bl	800a1f6 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
 800a726:	4621      	mov	r1, r4
 800a728:	4630      	mov	r0, r6
 800a72a:	2201      	movs	r2, #1
 800a72c:	f7ff fd74 	bl	800a218 <set_chunk_used>

	free_list_add(h, chunk0_size);
 800a730:	4629      	mov	r1, r5
}
 800a732:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 800a736:	f7ff be61 	b.w	800a3fc <free_list_add>
		h->buckets[i].next = 0;
 800a73a:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 800a73e:	3301      	adds	r3, #1
 800a740:	e7ca      	b.n	800a6d8 <sys_heap_init+0x3c>

0800a742 <_ldiv5>:
	uint32_t v_lo = *v;
 800a742:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 800a746:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 800a748:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 800a74c:	fba2 2403 	umull	r2, r4, r2, r3
 800a750:	18d5      	adds	r5, r2, r3
 800a752:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 800a756:	fba1 1303 	umull	r1, r3, r1, r3
 800a75a:	1852      	adds	r2, r2, r1
 800a75c:	eb44 0403 	adc.w	r4, r4, r3
 800a760:	1952      	adds	r2, r2, r5
 800a762:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 800a766:	1889      	adds	r1, r1, r2
 800a768:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 800a76c:	e9c0 1300 	strd	r1, r3, [r0]
}
 800a770:	bd30      	pop	{r4, r5, pc}

0800a772 <_get_digit>:
	if (*digit_count > 0) {
 800a772:	680b      	ldr	r3, [r1, #0]
 800a774:	2b00      	cmp	r3, #0
{
 800a776:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
 800a778:	dd10      	ble.n	800a79c <_get_digit+0x2a>
		--*digit_count;
 800a77a:	3b01      	subs	r3, #1
 800a77c:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
 800a77e:	6803      	ldr	r3, [r0, #0]
 800a780:	6844      	ldr	r4, [r0, #4]
 800a782:	220a      	movs	r2, #10
 800a784:	fba3 1302 	umull	r1, r3, r3, r2
 800a788:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
 800a78c:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
 800a78e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a792:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
 800a796:	3230      	adds	r2, #48	; 0x30
}
 800a798:	4610      	mov	r0, r2
 800a79a:	bd10      	pop	{r4, pc}
		rval = '0';
 800a79c:	2230      	movs	r2, #48	; 0x30
 800a79e:	e7fb      	b.n	800a798 <_get_digit+0x26>

0800a7a0 <outs>:
{
 800a7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	4689      	mov	r9, r1
 800a7a8:	4616      	mov	r6, r2
 800a7aa:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800a7ac:	4615      	mov	r5, r2
 800a7ae:	42bd      	cmp	r5, r7
 800a7b0:	eba5 0406 	sub.w	r4, r5, r6
 800a7b4:	d305      	bcc.n	800a7c2 <outs+0x22>
 800a7b6:	b10f      	cbz	r7, 800a7bc <outs+0x1c>
	return (int)count;
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	e008      	b.n	800a7ce <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800a7bc:	782b      	ldrb	r3, [r5, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d0fa      	beq.n	800a7b8 <outs+0x18>
		int rc = out((int)*sp++, ctx);
 800a7c2:	f815 0b01 	ldrb.w	r0, [r5], #1
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	47c0      	blx	r8
		if (rc < 0) {
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	daef      	bge.n	800a7ae <outs+0xe>
}
 800a7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a7d2 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
 800a7d2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a7d6:	4770      	bx	lr

0800a7d8 <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 800a7d8:	b570      	push	{r4, r5, r6, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 800a7da:	6985      	ldr	r5, [r0, #24]
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
 800a7dc:	6886      	ldr	r6, [r0, #8]
{
 800a7de:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 800a7e0:	6900      	ldr	r0, [r0, #16]
 800a7e2:	b185      	cbz	r5, 800a806 <ring_buf_put_claim+0x2e>
 800a7e4:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	4403      	add	r3, r0
 800a7ea:	1b9b      	subs	r3, r3, r6
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	bf28      	it	cs
 800a7f0:	461a      	movcs	r2, r3
	trail_size = buf->size - tmp_trail_mod;
 800a7f2:	1b40      	subs	r0, r0, r5

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
 800a7f4:	6963      	ldr	r3, [r4, #20]
	allocated = MIN(trail_size, size);
 800a7f6:	4290      	cmp	r0, r2
 800a7f8:	bf28      	it	cs
 800a7fa:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
 800a7fc:	442b      	add	r3, r5

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
 800a7fe:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
 800a800:	600b      	str	r3, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
 800a802:	60a6      	str	r6, [r4, #8]

	return allocated;
}
 800a804:	bd70      	pop	{r4, r5, r6, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 800a806:	fbb6 f5f0 	udiv	r5, r6, r0
 800a80a:	fb00 6515 	mls	r5, r0, r5, r6
 800a80e:	e7ea      	b.n	800a7e6 <ring_buf_put_claim+0xe>

0800a810 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->tail + size) > (buf->head + buf->size)) {
 800a810:	6843      	ldr	r3, [r0, #4]
 800a812:	6902      	ldr	r2, [r0, #16]
 800a814:	4419      	add	r1, r3
 800a816:	6803      	ldr	r3, [r0, #0]
 800a818:	4413      	add	r3, r2
 800a81a:	4299      	cmp	r1, r3
		return -EINVAL;
	}

	buf->tail += size;
	buf->misc.byte_mode.tmp_tail = buf->tail;
 800a81c:	bf9a      	itte	ls
 800a81e:	e9c0 1101 	strdls	r1, r1, [r0, #4]

	return 0;
 800a822:	2000      	movls	r0, #0
		return -EINVAL;
 800a824:	f06f 0015 	mvnhi.w	r0, #21
}
 800a828:	4770      	bx	lr

0800a82a <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
 800a82a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a82e:	4680      	mov	r8, r0
 800a830:	460e      	mov	r6, r1
 800a832:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 800a834:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
 800a836:	462a      	mov	r2, r5
 800a838:	a901      	add	r1, sp, #4
 800a83a:	4640      	mov	r0, r8
 800a83c:	f7ff ffcc 	bl	800a7d8 <ring_buf_put_claim>
 800a840:	4631      	mov	r1, r6
 800a842:	4604      	mov	r4, r0
 800a844:	4602      	mov	r2, r0
 800a846:	9801      	ldr	r0, [sp, #4]
 800a848:	f002 ff46 	bl	800d6d8 <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 800a84c:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
 800a84e:	4427      	add	r7, r4
		data += partial_size;
 800a850:	4426      	add	r6, r4
	} while (size && partial_size);
 800a852:	d001      	beq.n	800a858 <ring_buf_put+0x2e>
 800a854:	2c00      	cmp	r4, #0
 800a856:	d1ee      	bne.n	800a836 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
 800a858:	4639      	mov	r1, r7
 800a85a:	4640      	mov	r0, r8
 800a85c:	f7ff ffd8 	bl	800a810 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 800a860:	4638      	mov	r0, r7
 800a862:	b002      	add	sp, #8
 800a864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a868 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 800a868:	b570      	push	{r4, r5, r6, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 800a86a:	6984      	ldr	r4, [r0, #24]
	uint32_t space, granted_size, trail_size, tmp_head_mod;

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
 800a86c:	68c5      	ldr	r5, [r0, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 800a86e:	6903      	ldr	r3, [r0, #16]
 800a870:	b18c      	cbz	r4, 800a896 <ring_buf_get_claim+0x2e>
 800a872:	402c      	ands	r4, r5
	space = buf->tail - buf->misc.byte_mode.tmp_head;
 800a874:	6846      	ldr	r6, [r0, #4]
 800a876:	1b76      	subs	r6, r6, r5
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
 800a878:	42b2      	cmp	r2, r6
	trail_size = buf->size - tmp_head_mod;
 800a87a:	eba3 0304 	sub.w	r3, r3, r4
	granted_size = MIN(size, space);
 800a87e:	bf28      	it	cs
 800a880:	4632      	movcs	r2, r6

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
 800a882:	4293      	cmp	r3, r2
 800a884:	bf28      	it	cs
 800a886:	4613      	movcs	r3, r2

	*data = &buf->buf.buf8[tmp_head_mod];
 800a888:	6942      	ldr	r2, [r0, #20]
	buf->misc.byte_mode.tmp_head += granted_size;
 800a88a:	441d      	add	r5, r3
	*data = &buf->buf.buf8[tmp_head_mod];
 800a88c:	4422      	add	r2, r4
 800a88e:	600a      	str	r2, [r1, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
 800a890:	60c5      	str	r5, [r0, #12]

	return granted_size;
}
 800a892:	4618      	mov	r0, r3
 800a894:	bd70      	pop	{r4, r5, r6, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 800a896:	fbb5 f4f3 	udiv	r4, r5, r3
 800a89a:	fb03 5414 	mls	r4, r3, r4, r5
 800a89e:	e7e9      	b.n	800a874 <ring_buf_get_claim+0xc>

0800a8a0 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->head + size) > buf->tail) {
 800a8a0:	6803      	ldr	r3, [r0, #0]
 800a8a2:	4419      	add	r1, r3
 800a8a4:	6843      	ldr	r3, [r0, #4]
 800a8a6:	4299      	cmp	r1, r3
{
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	4604      	mov	r4, r0
	if ((buf->head + size) > buf->tail) {
 800a8ac:	d824      	bhi.n	800a8f8 <ring_buf_get_finish+0x58>
		return -EINVAL;
	}

	buf->head += size;
 800a8ae:	6001      	str	r1, [r0, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
 800a8b0:	60c1      	str	r1, [r0, #12]
	uint32_t threshold = ring_buf_get_rewind_threshold();
 800a8b2:	f7ff ff8e 	bl	800a7d2 <ring_buf_get_rewind_threshold>
	if (buf->head < threshold) {
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	4298      	cmp	r0, r3
 800a8ba:	d81b      	bhi.n	800a8f4 <ring_buf_get_finish+0x54>
	rew = buf->size * (threshold / buf->size);
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	fbb0 f0f3 	udiv	r0, r0, r3
 800a8c2:	4358      	muls	r0, r3
	__asm__ volatile(
 800a8c4:	f04f 0310 	mov.w	r3, #16
 800a8c8:	f3ef 8211 	mrs	r2, BASEPRI
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
	buf->tail -= rew;
 800a8d4:	6863      	ldr	r3, [r4, #4]
 800a8d6:	1a1b      	subs	r3, r3, r0
 800a8d8:	6063      	str	r3, [r4, #4]
	buf->head -= rew;
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	1a1b      	subs	r3, r3, r0
 800a8de:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head -= rew;
 800a8e0:	68e3      	ldr	r3, [r4, #12]
 800a8e2:	1a1b      	subs	r3, r3, r0
 800a8e4:	60e3      	str	r3, [r4, #12]
	buf->misc.byte_mode.tmp_tail -= rew;
 800a8e6:	68a3      	ldr	r3, [r4, #8]
 800a8e8:	1a18      	subs	r0, r3, r0
 800a8ea:	60a0      	str	r0, [r4, #8]
	__asm__ volatile(
 800a8ec:	f382 8811 	msr	BASEPRI, r2
 800a8f0:	f3bf 8f6f 	isb	sy

	byte_indexes_rewind(buf);

	return 0;
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	e001      	b.n	800a8fc <ring_buf_get_finish+0x5c>
		return -EINVAL;
 800a8f8:	f06f 0015 	mvn.w	r0, #21
}
 800a8fc:	bd10      	pop	{r4, pc}

0800a8fe <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
 800a8fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a902:	4680      	mov	r8, r0
 800a904:	460d      	mov	r5, r1
 800a906:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 800a908:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
 800a90a:	4632      	mov	r2, r6
 800a90c:	a901      	add	r1, sp, #4
 800a90e:	4640      	mov	r0, r8
 800a910:	f7ff ffaa 	bl	800a868 <ring_buf_get_claim>
 800a914:	4604      	mov	r4, r0
		if (data) {
 800a916:	b12d      	cbz	r5, 800a924 <ring_buf_get+0x26>
 800a918:	4602      	mov	r2, r0
 800a91a:	9901      	ldr	r1, [sp, #4]
 800a91c:	4628      	mov	r0, r5
 800a91e:	f002 fedb 	bl	800d6d8 <memcpy>
			memcpy(data, src, partial_size);
			data += partial_size;
 800a922:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
 800a924:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 800a926:	4427      	add	r7, r4
	} while (size && partial_size);
 800a928:	d001      	beq.n	800a92e <ring_buf_get+0x30>
 800a92a:	2c00      	cmp	r4, #0
 800a92c:	d1ed      	bne.n	800a90a <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
 800a92e:	4639      	mov	r1, r7
 800a930:	4640      	mov	r0, r8
 800a932:	f7ff ffb5 	bl	800a8a0 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 800a936:	4638      	mov	r0, r7
 800a938:	b002      	add	sp, #8
 800a93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a93e <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
 800a93e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a942:	b087      	sub	sp, #28
 800a944:	468a      	mov	sl, r1
 800a946:	4614      	mov	r4, r2
 800a948:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
 800a94a:	4605      	mov	r5, r0
 800a94c:	b918      	cbnz	r0, 800a956 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
 800a94e:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
 800a950:	b007      	add	sp, #28
 800a952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
 800a956:	2900      	cmp	r1, #0
 800a958:	d0f9      	beq.n	800a94e <fnmatchx+0x10>
    if (recursion-- == 0)
 800a95a:	9b02      	ldr	r3, [sp, #8]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 811a 	beq.w	800ab96 <fnmatchx+0x258>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 800a962:	f004 0304 	and.w	r3, r4, #4
 800a966:	460a      	mov	r2, r1
 800a968:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
 800a96a:	46a8      	mov	r8, r5
 800a96c:	4621      	mov	r1, r4
 800a96e:	f818 0b01 	ldrb.w	r0, [r8], #1
 800a972:	f7f8 f837 	bl	80029e4 <foldcase>
 800a976:	4603      	mov	r3, r0
 800a978:	b2c0      	uxtb	r0, r0
 800a97a:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
 800a97c:	7817      	ldrb	r7, [r2, #0]
 800a97e:	4606      	mov	r6, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
 800a980:	d025      	beq.n	800a9ce <fnmatchx+0x90>
 800a982:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800a986:	d10b      	bne.n	800a9a0 <fnmatchx+0x62>
 800a988:	b1c8      	cbz	r0, 800a9be <fnmatchx+0x80>
 800a98a:	282a      	cmp	r0, #42	; 0x2a
 800a98c:	d036      	beq.n	800a9fc <fnmatchx+0xbe>
            if (c != FOLDCASE(*string++, flags))
 800a98e:	4621      	mov	r1, r4
 800a990:	4638      	mov	r0, r7
 800a992:	f7f8 f827 	bl	80029e4 <foldcase>
 800a996:	4286      	cmp	r6, r0
 800a998:	f102 0201 	add.w	r2, r2, #1
 800a99c:	d01e      	beq.n	800a9dc <fnmatchx+0x9e>
 800a99e:	e7d6      	b.n	800a94e <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
 800a9a0:	285b      	cmp	r0, #91	; 0x5b
 800a9a2:	d07b      	beq.n	800aa9c <fnmatchx+0x15e>
 800a9a4:	285c      	cmp	r0, #92	; 0x5c
 800a9a6:	d1f2      	bne.n	800a98e <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
 800a9a8:	07e3      	lsls	r3, r4, #31
 800a9aa:	d4f0      	bmi.n	800a98e <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
 800a9ac:	7868      	ldrb	r0, [r5, #1]
 800a9ae:	f7f8 f819 	bl	80029e4 <foldcase>
 800a9b2:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 800a9b6:	bf18      	it	ne
 800a9b8:	f105 0802 	addne.w	r8, r5, #2
 800a9bc:	e7e7      	b.n	800a98e <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
 800a9be:	06e4      	lsls	r4, r4, #27
 800a9c0:	d501      	bpl.n	800a9c6 <fnmatchx+0x88>
 800a9c2:	2f2f      	cmp	r7, #47	; 0x2f
 800a9c4:	d0c4      	beq.n	800a950 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
 800a9c6:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
 800a9c8:	bf18      	it	ne
 800a9ca:	2001      	movne	r0, #1
 800a9cc:	e7c0      	b.n	800a950 <fnmatchx+0x12>
            if (*string == EOS)
 800a9ce:	2f00      	cmp	r7, #0
 800a9d0:	d0bd      	beq.n	800a94e <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
 800a9d2:	2f2f      	cmp	r7, #47	; 0x2f
 800a9d4:	d104      	bne.n	800a9e0 <fnmatchx+0xa2>
 800a9d6:	07a1      	lsls	r1, r4, #30
 800a9d8:	d4b9      	bmi.n	800a94e <fnmatchx+0x10>
            ++string;
 800a9da:	3201      	adds	r2, #1
            break;
 800a9dc:	4645      	mov	r5, r8
 800a9de:	e7c4      	b.n	800a96a <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 800a9e0:	2f2e      	cmp	r7, #46	; 0x2e
 800a9e2:	d1fa      	bne.n	800a9da <fnmatchx+0x9c>
 800a9e4:	9b04      	ldr	r3, [sp, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d0f7      	beq.n	800a9da <fnmatchx+0x9c>
 800a9ea:	4552      	cmp	r2, sl
 800a9ec:	d0af      	beq.n	800a94e <fnmatchx+0x10>
                (string == stringstart ||
 800a9ee:	07a3      	lsls	r3, r4, #30
 800a9f0:	d5f3      	bpl.n	800a9da <fnmatchx+0x9c>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 800a9f2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800a9f6:	2b2f      	cmp	r3, #47	; 0x2f
 800a9f8:	d1ef      	bne.n	800a9da <fnmatchx+0x9c>
 800a9fa:	e7a8      	b.n	800a94e <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
 800a9fc:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
 800a9fe:	f7f7 fff1 	bl	80029e4 <foldcase>
 800aa02:	b2c1      	uxtb	r1, r0
            while (c == '*')
 800aa04:	292a      	cmp	r1, #42	; 0x2a
 800aa06:	d018      	beq.n	800aa3a <fnmatchx+0xfc>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 800aa08:	2f2e      	cmp	r7, #46	; 0x2e
 800aa0a:	d109      	bne.n	800aa20 <fnmatchx+0xe2>
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	b13b      	cbz	r3, 800aa20 <fnmatchx+0xe2>
 800aa10:	4552      	cmp	r2, sl
 800aa12:	d09c      	beq.n	800a94e <fnmatchx+0x10>
                (string == stringstart ||
 800aa14:	07a7      	lsls	r7, r4, #30
 800aa16:	d503      	bpl.n	800aa20 <fnmatchx+0xe2>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 800aa18:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800aa1c:	2b2f      	cmp	r3, #47	; 0x2f
 800aa1e:	d096      	beq.n	800a94e <fnmatchx+0x10>
            if (c == EOS) {
 800aa20:	b979      	cbnz	r1, 800aa42 <fnmatchx+0x104>
                if (flags & FNM_PATHNAME)
 800aa22:	f014 0002 	ands.w	r0, r4, #2
 800aa26:	d093      	beq.n	800a950 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
 800aa28:	06e6      	lsls	r6, r4, #27
 800aa2a:	f100 80b6 	bmi.w	800ab9a <fnmatchx+0x25c>
                        strchr(string, '/') == NULL ?
 800aa2e:	212f      	movs	r1, #47	; 0x2f
 800aa30:	4610      	mov	r0, r2
 800aa32:	f002 feee 	bl	800d812 <strchr>
                        0 : FNM_NOMATCH;
 800aa36:	3800      	subs	r0, #0
 800aa38:	e7c6      	b.n	800a9c8 <fnmatchx+0x8a>
                c = FOLDCASE(*++pattern, flags);
 800aa3a:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 800aa3e:	4621      	mov	r1, r4
 800aa40:	e7dd      	b.n	800a9fe <fnmatchx+0xc0>
            } else if (c == '/' && flags & FNM_PATHNAME) {
 800aa42:	292f      	cmp	r1, #47	; 0x2f
 800aa44:	d021      	beq.n	800aa8a <fnmatchx+0x14c>
    if (recursion-- == 0)
 800aa46:	9b02      	ldr	r3, [sp, #8]
 800aa48:	4616      	mov	r6, r2
 800aa4a:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
 800aa4c:	f024 0a04 	bic.w	sl, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
 800aa50:	f004 0902 	and.w	r9, r4, #2
 800aa54:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
 800aa56:	4621      	mov	r1, r4
 800aa58:	f89b 0000 	ldrb.w	r0, [fp]
 800aa5c:	f7f7 ffc2 	bl	80029e4 <foldcase>
 800aa60:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 800aa64:	f106 0601 	add.w	r6, r6, #1
 800aa68:	f43f af71 	beq.w	800a94e <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
 800aa6c:	463b      	mov	r3, r7
 800aa6e:	4652      	mov	r2, sl
 800aa70:	4659      	mov	r1, fp
 800aa72:	4640      	mov	r0, r8
 800aa74:	f7ff ff63 	bl	800a93e <fnmatchx>
 800aa78:	2801      	cmp	r0, #1
 800aa7a:	f47f af69 	bne.w	800a950 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
 800aa7e:	2d2f      	cmp	r5, #47	; 0x2f
 800aa80:	d1e8      	bne.n	800aa54 <fnmatchx+0x116>
 800aa82:	f1b9 0f00 	cmp.w	r9, #0
 800aa86:	d0e5      	beq.n	800aa54 <fnmatchx+0x116>
 800aa88:	e761      	b.n	800a94e <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
 800aa8a:	07a5      	lsls	r5, r4, #30
 800aa8c:	d5db      	bpl.n	800aa46 <fnmatchx+0x108>
                if ((string = strchr(string, '/')) == NULL)
 800aa8e:	4610      	mov	r0, r2
 800aa90:	f002 febf 	bl	800d812 <strchr>
 800aa94:	4602      	mov	r2, r0
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d1a0      	bne.n	800a9dc <fnmatchx+0x9e>
 800aa9a:	e758      	b.n	800a94e <fnmatchx+0x10>
            if (*string == EOS)
 800aa9c:	2f00      	cmp	r7, #0
 800aa9e:	f43f af56 	beq.w	800a94e <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
 800aaa2:	2f2f      	cmp	r7, #47	; 0x2f
 800aaa4:	d102      	bne.n	800aaac <fnmatchx+0x16e>
 800aaa6:	07a0      	lsls	r0, r4, #30
 800aaa8:	f53f af51 	bmi.w	800a94e <fnmatchx+0x10>
            if ((r = rangematch(pattern,
 800aaac:	4621      	mov	r1, r4
 800aaae:	4638      	mov	r0, r7
 800aab0:	f7f7 ff98 	bl	80029e4 <foldcase>
 800aab4:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
 800aab6:	f1b8 0f00 	cmp.w	r8, #0
 800aaba:	f43f af48 	beq.w	800a94e <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 800aabe:	786b      	ldrb	r3, [r5, #1]
 800aac0:	2b21      	cmp	r3, #33	; 0x21
 800aac2:	d001      	beq.n	800aac8 <fnmatchx+0x18a>
 800aac4:	2b5e      	cmp	r3, #94	; 0x5e
 800aac6:	d126      	bne.n	800ab16 <fnmatchx+0x1d8>
        ++pattern;
 800aac8:	3502      	adds	r5, #2
 800aaca:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 800aacc:	9301      	str	r3, [sp, #4]
    need = 1;
 800aace:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 800aad0:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 800aad4:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 800aad8:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 800aada:	462e      	mov	r6, r5
 800aadc:	4621      	mov	r1, r4
 800aade:	f816 0b01 	ldrb.w	r0, [r6], #1
 800aae2:	9305      	str	r3, [sp, #20]
 800aae4:	f7f7 ff7e 	bl	80029e4 <foldcase>
 800aae8:	fa5f f980 	uxtb.w	r9, r0
 800aaec:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 800aaf0:	9b05      	ldr	r3, [sp, #20]
 800aaf2:	d113      	bne.n	800ab1c <fnmatchx+0x1de>
 800aaf4:	bb23      	cbnz	r3, 800ab40 <fnmatchx+0x202>
    return ok == negate ? NULL : pattern;
 800aaf6:	9b01      	ldr	r3, [sp, #4]
 800aaf8:	455b      	cmp	r3, fp
 800aafa:	f43f af28 	beq.w	800a94e <fnmatchx+0x10>
            if ((r = rangematch(pattern,
 800aafe:	2e00      	cmp	r6, #0
 800ab00:	f43f af25 	beq.w	800a94e <fnmatchx+0x10>
            if (r == (void *)-1) {
 800ab04:	1c71      	adds	r1, r6, #1
 800ab06:	d103      	bne.n	800ab10 <fnmatchx+0x1d2>
                if (*string != '[')
 800ab08:	2f5b      	cmp	r7, #91	; 0x5b
 800ab0a:	f47f af20 	bne.w	800a94e <fnmatchx+0x10>
 800ab0e:	4646      	mov	r6, r8
            ++string;
 800ab10:	3201      	adds	r2, #1
            break;
 800ab12:	46b0      	mov	r8, r6
 800ab14:	e762      	b.n	800a9dc <fnmatchx+0x9e>
 800ab16:	4645      	mov	r5, r8
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 800ab18:	2300      	movs	r3, #0
 800ab1a:	e7d7      	b.n	800aacc <fnmatchx+0x18e>
        if (c == '/')
 800ab1c:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
 800ab20:	d0f2      	beq.n	800ab08 <fnmatchx+0x1ca>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 800ab22:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 800ab26:	d107      	bne.n	800ab38 <fnmatchx+0x1fa>
 800ab28:	9b03      	ldr	r3, [sp, #12]
 800ab2a:	b94b      	cbnz	r3, 800ab40 <fnmatchx+0x202>
            c = FOLDCASE(*pattern++, flags);
 800ab2c:	7868      	ldrb	r0, [r5, #1]
 800ab2e:	f7f7 ff59 	bl	80029e4 <foldcase>
 800ab32:	1cae      	adds	r6, r5, #2
 800ab34:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
 800ab38:	f1b9 0f00 	cmp.w	r9, #0
 800ab3c:	f43f af07 	beq.w	800a94e <fnmatchx+0x10>
        if (*pattern == '-' 
 800ab40:	7833      	ldrb	r3, [r6, #0]
 800ab42:	2b2d      	cmp	r3, #45	; 0x2d
 800ab44:	d120      	bne.n	800ab88 <fnmatchx+0x24a>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
 800ab46:	7870      	ldrb	r0, [r6, #1]
 800ab48:	4621      	mov	r1, r4
 800ab4a:	f7f7 ff4b 	bl	80029e4 <foldcase>
 800ab4e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800ab52:	d019      	beq.n	800ab88 <fnmatchx+0x24a>
 800ab54:	285d      	cmp	r0, #93	; 0x5d
 800ab56:	d017      	beq.n	800ab88 <fnmatchx+0x24a>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 800ab58:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
 800ab5a:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 800ab5e:	d10a      	bne.n	800ab76 <fnmatchx+0x238>
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	b943      	cbnz	r3, 800ab76 <fnmatchx+0x238>
                c2 = FOLDCASE(*pattern++, flags);
 800ab64:	78b0      	ldrb	r0, [r6, #2]
 800ab66:	f7f7 ff3d 	bl	80029e4 <foldcase>
            if (c2 == EOS)
 800ab6a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
 800ab6e:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
 800ab72:	f43f aeec 	beq.w	800a94e <fnmatchx+0x10>
            if (c <= test && test <= c2)
 800ab76:	9b00      	ldr	r3, [sp, #0]
 800ab78:	454b      	cmp	r3, r9
 800ab7a:	db03      	blt.n	800ab84 <fnmatchx+0x246>
                ok = 1;
 800ab7c:	4283      	cmp	r3, r0
 800ab7e:	bfd8      	it	le
 800ab80:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
 800ab84:	2300      	movs	r3, #0
 800ab86:	e7a8      	b.n	800aada <fnmatchx+0x19c>
        } else if (c == test)
 800ab88:	9b00      	ldr	r3, [sp, #0]
 800ab8a:	4635      	mov	r5, r6
 800ab8c:	454b      	cmp	r3, r9
 800ab8e:	bf08      	it	eq
 800ab90:	f04f 0b01 	moveq.w	fp, #1
 800ab94:	e7f6      	b.n	800ab84 <fnmatchx+0x246>
        return FNM_NORES;
 800ab96:	2003      	movs	r0, #3
 800ab98:	e6da      	b.n	800a950 <fnmatchx+0x12>
                return 0;
 800ab9a:	4608      	mov	r0, r1
 800ab9c:	e6d8      	b.n	800a950 <fnmatchx+0x12>

0800ab9e <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
 800ab9e:	2340      	movs	r3, #64	; 0x40
 800aba0:	f7ff becd 	b.w	800a93e <fnmatchx>

0800aba4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800aba4:	4770      	bx	lr

0800aba6 <st_stm32_common_config>:
	/* Enable the SWO pin */
	DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN;
#endif

	return 0;
}
 800aba6:	2000      	movs	r0, #0
 800aba8:	4770      	bx	lr

0800abaa <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 800abaa:	2300      	movs	r3, #0
	list->head = NULL;
 800abac:	e9c0 3300 	strd	r3, r3, [r0]
}
 800abb0:	4770      	bx	lr

0800abb2 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 800abb2:	6803      	ldr	r3, [r0, #0]
 800abb4:	b923      	cbnz	r3, 800abc0 <log_list_add_tail+0xe>
		list->head = msg;
 800abb6:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
 800abb8:	2300      	movs	r3, #0
	list->tail = msg;
 800abba:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 800abbc:	600b      	str	r3, [r1, #0]
}
 800abbe:	4770      	bx	lr
		list->tail->next = msg;
 800abc0:	6843      	ldr	r3, [r0, #4]
 800abc2:	6019      	str	r1, [r3, #0]
 800abc4:	e7f8      	b.n	800abb8 <log_list_add_tail+0x6>

0800abc6 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 800abc6:	6800      	ldr	r0, [r0, #0]
 800abc8:	4770      	bx	lr

0800abca <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
 800abca:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
 800abcc:	b10b      	cbz	r3, 800abd2 <log_list_head_get+0x8>
		list->head = list->head->next;
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	4770      	bx	lr

0800abd6 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
 800abd6:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 800abd8:	f7f8 fade 	bl	8003198 <log_msg_chunk_alloc>

	if (msg != NULL) {
 800abdc:	b118      	cbz	r0, 800abe6 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 800abde:	2301      	movs	r3, #1
 800abe0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 800abe2:	2300      	movs	r3, #0
 800abe4:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
 800abe6:	bd08      	pop	{r3, pc}

0800abe8 <default_lf_get_timestamp>:
{
 800abe8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800abea:	f002 faf2 	bl	800d1d2 <z_impl_k_uptime_ticks>
 800abee:	220a      	movs	r2, #10
 800abf0:	2300      	movs	r3, #0
 800abf2:	f7f5 ff5b 	bl	8000aac <__aeabi_uldivmod>
}
 800abf6:	bd08      	pop	{r3, pc}

0800abf8 <dummy_timestamp>:
 800abf8:	2000      	movs	r0, #0
 800abfa:	4770      	bx	lr

0800abfc <log_backend_disable>:
	backend->cb->active = false;
 800abfc:	6843      	ldr	r3, [r0, #4]
 800abfe:	2100      	movs	r1, #0
 800ac00:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
 800ac02:	f7f8 b857 	b.w	8002cb4 <backend_filter_set>

0800ac06 <log_0>:
{
 800ac06:	b513      	push	{r0, r1, r4, lr}
 800ac08:	4604      	mov	r4, r0
 800ac0a:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
 800ac0c:	f7ff ffe3 	bl	800abd6 <z_log_msg_std_alloc>

	if (msg != NULL) {
 800ac10:	b130      	cbz	r0, 800ac20 <log_0+0x1a>
		msg_finalize(msg, src_level);
 800ac12:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
 800ac14:	6104      	str	r4, [r0, #16]
}
 800ac16:	b002      	add	sp, #8
 800ac18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
 800ac1c:	f7f8 b9fa 	b.w	8003014 <msg_finalize>
}
 800ac20:	b002      	add	sp, #8
 800ac22:	bd10      	pop	{r4, pc}

0800ac24 <log_1>:
{
 800ac24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac26:	460c      	mov	r4, r1
 800ac28:	4611      	mov	r1, r2
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 800ac2e:	f7ff ffd2 	bl	800abd6 <z_log_msg_std_alloc>

	if (msg != NULL) {
 800ac32:	b160      	cbz	r0, 800ac4e <log_1+0x2a>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
 800ac34:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
 800ac36:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
 800ac38:	2501      	movs	r5, #1
 800ac3a:	f365 1207 	bfi	r2, r5, #4, #4
 800ac3e:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
 800ac40:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
 800ac42:	6144      	str	r4, [r0, #20]
}
 800ac44:	b003      	add	sp, #12
 800ac46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
 800ac4a:	f7f8 b9e3 	b.w	8003014 <msg_finalize>
}
 800ac4e:	b003      	add	sp, #12
 800ac50:	bd30      	pop	{r4, r5, pc}

0800ac52 <log_2>:
{
 800ac52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac54:	460e      	mov	r6, r1
 800ac56:	4619      	mov	r1, r3
 800ac58:	4607      	mov	r7, r0
 800ac5a:	4615      	mov	r5, r2
 800ac5c:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 800ac5e:	f7ff ffba 	bl	800abd6 <z_log_msg_std_alloc>

	if (msg != NULL) {
 800ac62:	b168      	cbz	r0, 800ac80 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
 800ac64:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 800ac66:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
 800ac68:	2202      	movs	r2, #2
 800ac6a:	f362 1307 	bfi	r3, r2, #4, #4
 800ac6e:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 800ac70:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
 800ac72:	e9c0 6505 	strd	r6, r5, [r0, #20]
}
 800ac76:	b003      	add	sp, #12
 800ac78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
 800ac7c:	f7f8 b9ca 	b.w	8003014 <msg_finalize>
}
 800ac80:	b003      	add	sp, #12
 800ac82:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac84 <log_3>:
{
 800ac84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ac88:	460f      	mov	r7, r1
 800ac8a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 800ac8e:	9101      	str	r1, [sp, #4]
 800ac90:	4680      	mov	r8, r0
 800ac92:	4616      	mov	r6, r2
 800ac94:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 800ac96:	f7ff ff9e 	bl	800abd6 <z_log_msg_std_alloc>

	if (msg != NULL) {
 800ac9a:	b178      	cbz	r0, 800acbc <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
 800ac9c:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 800ac9e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
 800aca2:	2203      	movs	r2, #3
 800aca4:	f362 1307 	bfi	r3, r2, #4, #4
 800aca8:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 800acaa:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
 800acac:	61c5      	str	r5, [r0, #28]
		msg->payload.single.args[1] = arg2;
 800acae:	e9c0 7605 	strd	r7, r6, [r0, #20]
}
 800acb2:	b002      	add	sp, #8
 800acb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
 800acb8:	f7f8 b9ac 	b.w	8003014 <msg_finalize>
}
 800acbc:	b002      	add	sp, #8
 800acbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800acc2 <log_n>:
{
 800acc2:	b510      	push	{r4, lr}
 800acc4:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
 800acc6:	f000 f8a1 	bl	800ae0c <log_msg_create_n>
		if (msg == NULL) {
 800acca:	b120      	cbz	r0, 800acd6 <log_n+0x14>
		msg_finalize(msg, src_level);
 800accc:	4621      	mov	r1, r4
}
 800acce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
 800acd2:	f7f8 b99f 	b.w	8003014 <msg_finalize>
}
 800acd6:	bd10      	pop	{r4, pc}

0800acd8 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 800acd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acdc:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
 800acde:	8903      	ldrh	r3, [r0, #8]
{
 800ace0:	f89d 7020 	ldrb.w	r7, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 800ace4:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 800ace8:	42a3      	cmp	r3, r4
{
 800acea:	460e      	mov	r6, r1
	if (offset >= available_len) {
 800acec:	d803      	bhi.n	800acf6 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 800acf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
 800acf6:	6811      	ldr	r1, [r2, #0]
 800acf8:	4421      	add	r1, r4
 800acfa:	4299      	cmp	r1, r3
		*length = available_len - offset;
 800acfc:	bf84      	itt	hi
 800acfe:	1b19      	subhi	r1, r3, r4
 800ad00:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 800ad02:	2b0c      	cmp	r3, #12
	req_len = *length;
 800ad04:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 800ad08:	d92b      	bls.n	800ad62 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
 800ad0a:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
 800ad0c:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
 800ad10:	d82e      	bhi.n	800ad70 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
 800ad12:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 800ad14:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 800ad16:	454b      	cmp	r3, r9
 800ad18:	bf28      	it	cs
 800ad1a:	464b      	movcs	r3, r9
 800ad1c:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
 800ad1e:	4420      	add	r0, r4
 800ad20:	461a      	mov	r2, r3
		if (put_op) {
 800ad22:	b317      	cbz	r7, 800ad6a <log_msg_hexdump_data_op+0x92>
 800ad24:	4631      	mov	r1, r6
 800ad26:	f002 fcd7 	bl	800d6d8 <memcpy>
		req_len -= cpy_len;
 800ad2a:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
 800ad2e:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
 800ad30:	f1b9 0f00 	cmp.w	r9, #0
 800ad34:	d0dd      	beq.n	800acf2 <log_msg_hexdump_data_op+0x1a>
 800ad36:	f1b8 0f00 	cmp.w	r8, #0
 800ad3a:	d0da      	beq.n	800acf2 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 800ad3c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 800ad40:	454d      	cmp	r5, r9
 800ad42:	bf28      	it	cs
 800ad44:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
 800ad46:	1d20      	adds	r0, r4, #4
 800ad48:	4440      	add	r0, r8
 800ad4a:	462a      	mov	r2, r5
		if (put_op) {
 800ad4c:	b1bf      	cbz	r7, 800ad7e <log_msg_hexdump_data_op+0xa6>
 800ad4e:	4631      	mov	r1, r6
 800ad50:	f002 fcc2 	bl	800d6d8 <memcpy>
		req_len -= cpy_len;
 800ad54:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
 800ad58:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
 800ad5c:	442e      	add	r6, r5
		offset = 0;
 800ad5e:	2400      	movs	r4, #0
 800ad60:	e7e6      	b.n	800ad30 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
 800ad62:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
 800ad64:	f04f 0800 	mov.w	r8, #0
 800ad68:	e7d5      	b.n	800ad16 <log_msg_hexdump_data_op+0x3e>
 800ad6a:	4601      	mov	r1, r0
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	e7da      	b.n	800ad26 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 800ad70:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
 800ad72:	2c1b      	cmp	r4, #27
 800ad74:	d9dc      	bls.n	800ad30 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
 800ad76:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
 800ad7a:	3c1c      	subs	r4, #28
 800ad7c:	e7f9      	b.n	800ad72 <log_msg_hexdump_data_op+0x9a>
 800ad7e:	4601      	mov	r1, r0
 800ad80:	4630      	mov	r0, r6
 800ad82:	e7e5      	b.n	800ad50 <log_msg_hexdump_data_op+0x78>

0800ad84 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800ad84:	3004      	adds	r0, #4
 800ad86:	f3bf 8f5b 	dmb	ish
 800ad8a:	e850 3f00 	ldrex	r3, [r0]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	e840 3200 	strex	r2, r3, [r0]
 800ad94:	2a00      	cmp	r2, #0
 800ad96:	d1f8      	bne.n	800ad8a <log_msg_get+0x6>
 800ad98:	f3bf 8f5b 	dmb	ish
}
 800ad9c:	4770      	bx	lr

0800ad9e <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 800ad9e:	7a40      	ldrb	r0, [r0, #9]
}
 800ada0:	0900      	lsrs	r0, r0, #4
 800ada2:	4770      	bx	lr

0800ada4 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
 800ada4:	7a43      	ldrb	r3, [r0, #9]
 800ada6:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 800adaa:	ea4f 1213 	mov.w	r2, r3, lsr #4
 800adae:	d216      	bcs.n	800adde <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 800adb0:	2a03      	cmp	r2, #3
 800adb2:	d803      	bhi.n	800adbc <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
 800adb4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800adb8:	6940      	ldr	r0, [r0, #20]
 800adba:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 800adbc:	2901      	cmp	r1, #1
 800adbe:	d803      	bhi.n	800adc8 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
 800adc0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800adc4:	6980      	ldr	r0, [r0, #24]
 800adc6:	4770      	bx	lr
	cont = msg->payload.ext.next;
 800adc8:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 800adca:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
 800adcc:	2906      	cmp	r1, #6
 800adce:	d803      	bhi.n	800add8 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
 800add0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800add4:	6848      	ldr	r0, [r1, #4]
 800add6:	4770      	bx	lr
		cont = cont->next;
 800add8:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
 800adda:	3907      	subs	r1, #7
		cont = cont->next;
 800addc:	e7f6      	b.n	800adcc <log_msg_arg_get+0x28>
		return 0;
 800adde:	2000      	movs	r0, #0
}
 800ade0:	4770      	bx	lr

0800ade2 <log_msg_put>:
{
 800ade2:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800ade4:	1d02      	adds	r2, r0, #4
 800ade6:	f3bf 8f5b 	dmb	ish
 800adea:	e852 1f00 	ldrex	r1, [r2]
 800adee:	3901      	subs	r1, #1
 800adf0:	e842 1c00 	strex	ip, r1, [r2]
 800adf4:	f1bc 0f00 	cmp.w	ip, #0
 800adf8:	d1f7      	bne.n	800adea <log_msg_put+0x8>
 800adfa:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	b90b      	cbnz	r3, 800ae06 <log_msg_put+0x24>
		msg_free(msg);
 800ae02:	f7f8 b9dd 	b.w	80031c0 <msg_free>
}
 800ae06:	4770      	bx	lr

0800ae08 <log_msg_str_get>:
}
 800ae08:	6900      	ldr	r0, [r0, #16]
 800ae0a:	4770      	bx	lr

0800ae0c <log_msg_create_n>:
{
 800ae0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	4680      	mov	r8, r0
 800ae12:	460f      	mov	r7, r1
 800ae14:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 800ae16:	f7f8 f9bf 	bl	8003198 <log_msg_chunk_alloc>
	if (msg != NULL) {
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	b358      	cbz	r0, 800ae76 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
 800ae1e:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
 800ae20:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 800ae24:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
 800ae26:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 800ae28:	f8a0 a008 	strh.w	sl, [r0, #8]
 800ae2c:	d90c      	bls.n	800ae48 <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
 800ae2e:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
 800ae30:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
 800ae34:	f043 0302 	orr.w	r3, r3, #2
 800ae38:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
 800ae3a:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
 800ae3e:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
 800ae42:	f1b9 0f00 	cmp.w	r9, #0
 800ae46:	dc0e      	bgt.n	800ae66 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
 800ae48:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
 800ae4a:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
 800ae4e:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 800ae52:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
 800ae54:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 800ae56:	d819      	bhi.n	800ae8c <log_msg_create_n+0x80>
 800ae58:	00aa      	lsls	r2, r5, #2
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	f104 0014 	add.w	r0, r4, #20
 800ae60:	f002 fc3a 	bl	800d6d8 <memcpy>
	while (nargs != 0U) {
 800ae64:	e007      	b.n	800ae76 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
 800ae66:	f7f8 f997 	bl	8003198 <log_msg_chunk_alloc>
		if (cont == NULL) {
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	b930      	cbnz	r0, 800ae7c <log_msg_create_n+0x70>
			msg_free(msg);
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f7f8 f9a6 	bl	80031c0 <msg_free>
			return NULL;
 800ae74:	4634      	mov	r4, r6
}
 800ae76:	4620      	mov	r0, r4
 800ae78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
 800ae7c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
 800ae80:	f1a9 0907 	sub.w	r9, r9, #7
 800ae84:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
 800ae88:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
 800ae8a:	e7da      	b.n	800ae42 <log_msg_create_n+0x36>
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	61a3      	str	r3, [r4, #24]
 800ae90:	687b      	ldr	r3, [r7, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
 800ae92:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800ae96:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
 800ae98:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
 800ae9a:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
 800ae9c:	2d07      	cmp	r5, #7
 800ae9e:	462e      	mov	r6, r5
 800aea0:	bf28      	it	cs
 800aea2:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
 800aea4:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800aea8:	4639      	mov	r1, r7
 800aeaa:	f108 0004 	add.w	r0, r8, #4
 800aeae:	464a      	mov	r2, r9
 800aeb0:	f002 fc12 	bl	800d6d8 <memcpy>
	while (nargs != 0U) {
 800aeb4:	1bad      	subs	r5, r5, r6
		cont = cont->next;
 800aeb6:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
 800aeba:	444f      	add	r7, r9
	while (nargs != 0U) {
 800aebc:	d1ee      	bne.n	800ae9c <log_msg_create_n+0x90>
 800aebe:	e7da      	b.n	800ae76 <log_msg_create_n+0x6a>

0800aec0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 800aec0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 800aec2:	2400      	movs	r4, #0
 800aec4:	9400      	str	r4, [sp, #0]
 800aec6:	f7ff ff07 	bl	800acd8 <log_msg_hexdump_data_op>
}
 800aeca:	b002      	add	sp, #8
 800aecc:	bd10      	pop	{r4, pc}

0800aece <buffer_write>:
{
 800aece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed0:	4606      	mov	r6, r0
 800aed2:	460d      	mov	r5, r1
 800aed4:	4614      	mov	r4, r2
 800aed6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 800aed8:	4621      	mov	r1, r4
 800aeda:	4628      	mov	r0, r5
 800aedc:	463a      	mov	r2, r7
 800aede:	47b0      	blx	r6
	} while (len != 0);
 800aee0:	1a24      	subs	r4, r4, r0
		buf += processed;
 800aee2:	4405      	add	r5, r0
	} while (len != 0);
 800aee4:	d1f8      	bne.n	800aed8 <buffer_write+0xa>
}
 800aee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aee8 <std_print>:
{
 800aee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeec:	b08e      	sub	sp, #56	; 0x38
 800aeee:	af0e      	add	r7, sp, #56	; 0x38
 800aef0:	4680      	mov	r8, r0
 800aef2:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
 800aef4:	f7ff ff88 	bl	800ae08 <log_msg_str_get>
 800aef8:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 800aefa:	4640      	mov	r0, r8
 800aefc:	f7ff ff4f 	bl	800ad9e <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 800af00:	0083      	lsls	r3, r0, #2
 800af02:	3307      	adds	r3, #7
 800af04:	f023 0307 	bic.w	r3, r3, #7
 800af08:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
 800af0c:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 800af0e:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 800af10:	f04f 0900 	mov.w	r9, #0
 800af14:	45d1      	cmp	r9, sl
 800af16:	d116      	bne.n	800af46 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
 800af18:	4640      	mov	r0, r8
 800af1a:	f7ff ff40 	bl	800ad9e <log_msg_nargs_get>
 800af1e:	280f      	cmp	r0, #15
 800af20:	d81e      	bhi.n	800af60 <std_print+0x78>
 800af22:	e8df f010 	tbh	[pc, r0, lsl #1]
 800af26:	0019      	.short	0x0019
 800af28:	00260020 	.word	0x00260020
 800af2c:	0036002d 	.word	0x0036002d
 800af30:	004e0041 	.word	0x004e0041
 800af34:	006e005d 	.word	0x006e005d
 800af38:	00960081 	.word	0x00960081
 800af3c:	00c600ad 	.word	0x00c600ad
 800af40:	00fe00e1 	.word	0x00fe00e1
 800af44:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
 800af46:	4649      	mov	r1, r9
 800af48:	4640      	mov	r0, r8
 800af4a:	f7ff ff2b 	bl	800ada4 <log_msg_arg_get>
 800af4e:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
 800af52:	f109 0901 	add.w	r9, r9, #1
 800af56:	e7dd      	b.n	800af14 <std_print+0x2c>
		print_formatted(output, str);
 800af58:	4631      	mov	r1, r6
 800af5a:	4628      	mov	r0, r5
 800af5c:	f7f8 f96e 	bl	800323c <print_formatted>
}
 800af60:	46bd      	mov	sp, r7
 800af62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
 800af66:	6822      	ldr	r2, [r4, #0]
 800af68:	4631      	mov	r1, r6
 800af6a:	4628      	mov	r0, r5
 800af6c:	f7f8 f966 	bl	800323c <print_formatted>
		break;
 800af70:	e7f6      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
 800af72:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af76:	4631      	mov	r1, r6
 800af78:	4628      	mov	r0, r5
 800af7a:	f7f8 f95f 	bl	800323c <print_formatted>
		break;
 800af7e:	e7ef      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
 800af80:	68a3      	ldr	r3, [r4, #8]
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af88:	4631      	mov	r1, r6
 800af8a:	4628      	mov	r0, r5
 800af8c:	f7f8 f956 	bl	800323c <print_formatted>
		break;
 800af90:	e7e6      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800af92:	68e3      	ldr	r3, [r4, #12]
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af9e:	4631      	mov	r1, r6
 800afa0:	4628      	mov	r0, r5
 800afa2:	f7f8 f94b 	bl	800323c <print_formatted>
		break;
 800afa6:	e7db      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800afa8:	6923      	ldr	r3, [r4, #16]
 800afaa:	9302      	str	r3, [sp, #8]
 800afac:	68e3      	ldr	r3, [r4, #12]
 800afae:	9301      	str	r3, [sp, #4]
 800afb0:	68a3      	ldr	r3, [r4, #8]
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800afb8:	4631      	mov	r1, r6
 800afba:	4628      	mov	r0, r5
 800afbc:	f7f8 f93e 	bl	800323c <print_formatted>
		break;
 800afc0:	e7ce      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800afc2:	6963      	ldr	r3, [r4, #20]
 800afc4:	9303      	str	r3, [sp, #12]
 800afc6:	6923      	ldr	r3, [r4, #16]
 800afc8:	9302      	str	r3, [sp, #8]
 800afca:	68e3      	ldr	r3, [r4, #12]
 800afcc:	9301      	str	r3, [sp, #4]
 800afce:	68a3      	ldr	r3, [r4, #8]
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	f7f8 f92f 	bl	800323c <print_formatted>
		break;
 800afde:	e7bf      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800afe0:	69a3      	ldr	r3, [r4, #24]
 800afe2:	9304      	str	r3, [sp, #16]
 800afe4:	6963      	ldr	r3, [r4, #20]
 800afe6:	9303      	str	r3, [sp, #12]
 800afe8:	6923      	ldr	r3, [r4, #16]
 800afea:	9302      	str	r3, [sp, #8]
 800afec:	68e3      	ldr	r3, [r4, #12]
 800afee:	9301      	str	r3, [sp, #4]
 800aff0:	68a3      	ldr	r3, [r4, #8]
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aff8:	4631      	mov	r1, r6
 800affa:	4628      	mov	r0, r5
 800affc:	f7f8 f91e 	bl	800323c <print_formatted>
		break;
 800b000:	e7ae      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800b002:	69e3      	ldr	r3, [r4, #28]
 800b004:	9305      	str	r3, [sp, #20]
 800b006:	69a3      	ldr	r3, [r4, #24]
 800b008:	9304      	str	r3, [sp, #16]
 800b00a:	6963      	ldr	r3, [r4, #20]
 800b00c:	9303      	str	r3, [sp, #12]
 800b00e:	6923      	ldr	r3, [r4, #16]
 800b010:	9302      	str	r3, [sp, #8]
 800b012:	68e3      	ldr	r3, [r4, #12]
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	68a3      	ldr	r3, [r4, #8]
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b01e:	4631      	mov	r1, r6
 800b020:	4628      	mov	r0, r5
 800b022:	f7f8 f90b 	bl	800323c <print_formatted>
		break;
 800b026:	e79b      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800b028:	6a23      	ldr	r3, [r4, #32]
 800b02a:	9306      	str	r3, [sp, #24]
 800b02c:	69e3      	ldr	r3, [r4, #28]
 800b02e:	9305      	str	r3, [sp, #20]
 800b030:	69a3      	ldr	r3, [r4, #24]
 800b032:	9304      	str	r3, [sp, #16]
 800b034:	6963      	ldr	r3, [r4, #20]
 800b036:	9303      	str	r3, [sp, #12]
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	9302      	str	r3, [sp, #8]
 800b03c:	68e3      	ldr	r3, [r4, #12]
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	68a3      	ldr	r3, [r4, #8]
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b048:	4631      	mov	r1, r6
 800b04a:	4628      	mov	r0, r5
 800b04c:	f7f8 f8f6 	bl	800323c <print_formatted>
		break;
 800b050:	e786      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800b052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b054:	9307      	str	r3, [sp, #28]
 800b056:	6a23      	ldr	r3, [r4, #32]
 800b058:	9306      	str	r3, [sp, #24]
 800b05a:	69e3      	ldr	r3, [r4, #28]
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	69a3      	ldr	r3, [r4, #24]
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	6963      	ldr	r3, [r4, #20]
 800b064:	9303      	str	r3, [sp, #12]
 800b066:	6923      	ldr	r3, [r4, #16]
 800b068:	9302      	str	r3, [sp, #8]
 800b06a:	68e3      	ldr	r3, [r4, #12]
 800b06c:	9301      	str	r3, [sp, #4]
 800b06e:	68a3      	ldr	r3, [r4, #8]
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b076:	4631      	mov	r1, r6
 800b078:	4628      	mov	r0, r5
 800b07a:	f7f8 f8df 	bl	800323c <print_formatted>
		break;
 800b07e:	e76f      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800b080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b082:	9308      	str	r3, [sp, #32]
 800b084:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b086:	9307      	str	r3, [sp, #28]
 800b088:	6a23      	ldr	r3, [r4, #32]
 800b08a:	9306      	str	r3, [sp, #24]
 800b08c:	69e3      	ldr	r3, [r4, #28]
 800b08e:	9305      	str	r3, [sp, #20]
 800b090:	69a3      	ldr	r3, [r4, #24]
 800b092:	9304      	str	r3, [sp, #16]
 800b094:	6963      	ldr	r3, [r4, #20]
 800b096:	9303      	str	r3, [sp, #12]
 800b098:	6923      	ldr	r3, [r4, #16]
 800b09a:	9302      	str	r3, [sp, #8]
 800b09c:	68e3      	ldr	r3, [r4, #12]
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	68a3      	ldr	r3, [r4, #8]
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b0a8:	4631      	mov	r1, r6
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f7f8 f8c6 	bl	800323c <print_formatted>
		break;
 800b0b0:	e756      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800b0b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b0b8:	9308      	str	r3, [sp, #32]
 800b0ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0bc:	9307      	str	r3, [sp, #28]
 800b0be:	6a23      	ldr	r3, [r4, #32]
 800b0c0:	9306      	str	r3, [sp, #24]
 800b0c2:	69e3      	ldr	r3, [r4, #28]
 800b0c4:	9305      	str	r3, [sp, #20]
 800b0c6:	69a3      	ldr	r3, [r4, #24]
 800b0c8:	9304      	str	r3, [sp, #16]
 800b0ca:	6963      	ldr	r3, [r4, #20]
 800b0cc:	9303      	str	r3, [sp, #12]
 800b0ce:	6923      	ldr	r3, [r4, #16]
 800b0d0:	9302      	str	r3, [sp, #8]
 800b0d2:	68e3      	ldr	r3, [r4, #12]
 800b0d4:	9301      	str	r3, [sp, #4]
 800b0d6:	68a3      	ldr	r3, [r4, #8]
 800b0d8:	9300      	str	r3, [sp, #0]
 800b0da:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b0de:	4631      	mov	r1, r6
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	f7f8 f8ab 	bl	800323c <print_formatted>
		break;
 800b0e6:	e73b      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800b0e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b0ea:	930a      	str	r3, [sp, #40]	; 0x28
 800b0ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b0ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b0f2:	9308      	str	r3, [sp, #32]
 800b0f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0f6:	9307      	str	r3, [sp, #28]
 800b0f8:	6a23      	ldr	r3, [r4, #32]
 800b0fa:	9306      	str	r3, [sp, #24]
 800b0fc:	69e3      	ldr	r3, [r4, #28]
 800b0fe:	9305      	str	r3, [sp, #20]
 800b100:	69a3      	ldr	r3, [r4, #24]
 800b102:	9304      	str	r3, [sp, #16]
 800b104:	6963      	ldr	r3, [r4, #20]
 800b106:	9303      	str	r3, [sp, #12]
 800b108:	6923      	ldr	r3, [r4, #16]
 800b10a:	9302      	str	r3, [sp, #8]
 800b10c:	68e3      	ldr	r3, [r4, #12]
 800b10e:	9301      	str	r3, [sp, #4]
 800b110:	68a3      	ldr	r3, [r4, #8]
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b118:	4631      	mov	r1, r6
 800b11a:	4628      	mov	r0, r5
 800b11c:	f7f8 f88e 	bl	800323c <print_formatted>
		break;
 800b120:	e71e      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800b122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b124:	930b      	str	r3, [sp, #44]	; 0x2c
 800b126:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b128:	930a      	str	r3, [sp, #40]	; 0x28
 800b12a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b12c:	9309      	str	r3, [sp, #36]	; 0x24
 800b12e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b130:	9308      	str	r3, [sp, #32]
 800b132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b134:	9307      	str	r3, [sp, #28]
 800b136:	6a23      	ldr	r3, [r4, #32]
 800b138:	9306      	str	r3, [sp, #24]
 800b13a:	69e3      	ldr	r3, [r4, #28]
 800b13c:	9305      	str	r3, [sp, #20]
 800b13e:	69a3      	ldr	r3, [r4, #24]
 800b140:	9304      	str	r3, [sp, #16]
 800b142:	6963      	ldr	r3, [r4, #20]
 800b144:	9303      	str	r3, [sp, #12]
 800b146:	6923      	ldr	r3, [r4, #16]
 800b148:	9302      	str	r3, [sp, #8]
 800b14a:	68e3      	ldr	r3, [r4, #12]
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	68a3      	ldr	r3, [r4, #8]
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b156:	4631      	mov	r1, r6
 800b158:	4628      	mov	r0, r5
 800b15a:	f7f8 f86f 	bl	800323c <print_formatted>
		break;
 800b15e:	e6ff      	b.n	800af60 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800b160:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b162:	930c      	str	r3, [sp, #48]	; 0x30
 800b164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b166:	930b      	str	r3, [sp, #44]	; 0x2c
 800b168:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b16a:	930a      	str	r3, [sp, #40]	; 0x28
 800b16c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b16e:	9309      	str	r3, [sp, #36]	; 0x24
 800b170:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b172:	9308      	str	r3, [sp, #32]
 800b174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b176:	9307      	str	r3, [sp, #28]
 800b178:	6a23      	ldr	r3, [r4, #32]
 800b17a:	9306      	str	r3, [sp, #24]
 800b17c:	69e3      	ldr	r3, [r4, #28]
 800b17e:	9305      	str	r3, [sp, #20]
 800b180:	69a3      	ldr	r3, [r4, #24]
 800b182:	9304      	str	r3, [sp, #16]
 800b184:	6963      	ldr	r3, [r4, #20]
 800b186:	9303      	str	r3, [sp, #12]
 800b188:	6923      	ldr	r3, [r4, #16]
 800b18a:	9302      	str	r3, [sp, #8]
 800b18c:	68e3      	ldr	r3, [r4, #12]
 800b18e:	9301      	str	r3, [sp, #4]
 800b190:	68a3      	ldr	r3, [r4, #8]
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b198:	4631      	mov	r1, r6
 800b19a:	4628      	mov	r0, r5
 800b19c:	f7f8 f84e 	bl	800323c <print_formatted>
}
 800b1a0:	e6de      	b.n	800af60 <std_print+0x78>

0800b1a2 <log_output_flush>:
		     output->control_block->offset,
 800b1a2:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800b1a4:	6881      	ldr	r1, [r0, #8]
{
 800b1a6:	b510      	push	{r4, lr}
 800b1a8:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 800b1aa:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b1ae:	6800      	ldr	r0, [r0, #0]
 800b1b0:	f7ff fe8d 	bl	800aece <buffer_write>
	output->control_block->offset = 0;
 800b1b4:	6863      	ldr	r3, [r4, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	601a      	str	r2, [r3, #0]
}
 800b1ba:	bd10      	pop	{r4, pc}

0800b1bc <out_func>:
{
 800b1bc:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 800b1be:	684b      	ldr	r3, [r1, #4]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68cb      	ldr	r3, [r1, #12]
 800b1c4:	429a      	cmp	r2, r3
{
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800b1ca:	d102      	bne.n	800b1d2 <out_func+0x16>
		log_output_flush(out_ctx);
 800b1cc:	4608      	mov	r0, r1
 800b1ce:	f7ff ffe8 	bl	800b1a2 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800b1d2:	6863      	ldr	r3, [r4, #4]
 800b1d4:	f3bf 8f5b 	dmb	ish
 800b1d8:	e853 2f00 	ldrex	r2, [r3]
 800b1dc:	1c51      	adds	r1, r2, #1
 800b1de:	e843 1000 	strex	r0, r1, [r3]
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d1f8      	bne.n	800b1d8 <out_func+0x1c>
 800b1e6:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800b1ea:	68a3      	ldr	r3, [r4, #8]
 800b1ec:	549d      	strb	r5, [r3, r2]
}
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	bd38      	pop	{r3, r4, r5, pc}

0800b1f2 <log_halt>:
 800b1f2:	684b      	ldr	r3, [r1, #4]
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	7158      	strb	r0, [r3, #5]
}
 800b1f8:	4770      	bx	lr

0800b1fa <log_go>:
	backend->cb->active = true;
 800b1fa:	684b      	ldr	r3, [r1, #4]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	715a      	strb	r2, [r3, #5]
}
 800b200:	2000      	movs	r0, #0
 800b202:	4770      	bx	lr

0800b204 <cmd_log_self_status>:
{
 800b204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b206:	4604      	mov	r4, r0
 800b208:	460d      	mov	r5, r1
 800b20a:	9201      	str	r2, [sp, #4]
	if (!shell_state_precheck(shell)) {
 800b20c:	f7f8 fb2e 	bl	800386c <shell_state_precheck>
 800b210:	b130      	cbz	r0, 800b220 <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
 800b212:	69e1      	ldr	r1, [r4, #28]
 800b214:	9b01      	ldr	r3, [sp, #4]
 800b216:	6809      	ldr	r1, [r1, #0]
 800b218:	462a      	mov	r2, r5
 800b21a:	4620      	mov	r0, r4
 800b21c:	f7f8 fa5c 	bl	80036d8 <log_status>
}
 800b220:	2000      	movs	r0, #0
 800b222:	b003      	add	sp, #12
 800b224:	bd30      	pop	{r4, r5, pc}

0800b226 <cmd_log_self_enable>:
{
 800b226:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b228:	4604      	mov	r4, r0
 800b22a:	460d      	mov	r5, r1
 800b22c:	9201      	str	r2, [sp, #4]
	if (!shell_state_precheck(shell)) {
 800b22e:	f7f8 fb1d 	bl	800386c <shell_state_precheck>
 800b232:	b148      	cbz	r0, 800b248 <cmd_log_self_enable+0x22>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
 800b234:	69e1      	ldr	r1, [r4, #28]
 800b236:	9b01      	ldr	r3, [sp, #4]
 800b238:	6809      	ldr	r1, [r1, #0]
 800b23a:	462a      	mov	r2, r5
 800b23c:	4620      	mov	r0, r4
}
 800b23e:	b003      	add	sp, #12
 800b240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
 800b244:	f7f8 bb8a 	b.w	800395c <log_enable>
}
 800b248:	b003      	add	sp, #12
 800b24a:	bd30      	pop	{r4, r5, pc}

0800b24c <log_disable>:
{
 800b24c:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
 800b24e:	2400      	movs	r4, #0
 800b250:	9400      	str	r4, [sp, #0]
 800b252:	3304      	adds	r3, #4
 800b254:	3a01      	subs	r2, #1
 800b256:	f7f8 fb19 	bl	800388c <filters_set>
}
 800b25a:	4620      	mov	r0, r4
 800b25c:	b002      	add	sp, #8
 800b25e:	bd10      	pop	{r4, pc}

0800b260 <cmd_log_self_disable>:
{
 800b260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b262:	4604      	mov	r4, r0
 800b264:	460d      	mov	r5, r1
 800b266:	9201      	str	r2, [sp, #4]
	if (!shell_state_precheck(shell)) {
 800b268:	f7f8 fb00 	bl	800386c <shell_state_precheck>
 800b26c:	b148      	cbz	r0, 800b282 <cmd_log_self_disable+0x22>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
 800b26e:	69e1      	ldr	r1, [r4, #28]
 800b270:	9b01      	ldr	r3, [sp, #4]
 800b272:	6809      	ldr	r1, [r1, #0]
 800b274:	462a      	mov	r2, r5
 800b276:	4620      	mov	r0, r4
}
 800b278:	b003      	add	sp, #12
 800b27a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
 800b27e:	f7ff bfe5 	b.w	800b24c <log_disable>
}
 800b282:	b003      	add	sp, #12
 800b284:	bd30      	pop	{r4, r5, pc}

0800b286 <cmd_log_self_go>:
{
 800b286:	b510      	push	{r4, lr}
 800b288:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
 800b28a:	f7f8 faef 	bl	800386c <shell_state_precheck>
 800b28e:	b120      	cbz	r0, 800b29a <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
 800b290:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	715a      	strb	r2, [r3, #5]
}
 800b29a:	2000      	movs	r0, #0
 800b29c:	bd10      	pop	{r4, pc}

0800b29e <cmd_log_self_halt>:
{
 800b29e:	b510      	push	{r4, lr}
 800b2a0:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
 800b2a2:	f7f8 fae3 	bl	800386c <shell_state_precheck>
 800b2a6:	b120      	cbz	r0, 800b2b2 <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
 800b2a8:	69e3      	ldr	r3, [r4, #28]
	backend->cb->active = false;
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	715a      	strb	r2, [r3, #5]
}
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	bd10      	pop	{r4, pc}

0800b2b6 <atomic_or>:
 * @param value Value to OR.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
 800b2b6:	4603      	mov	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
 800b2b8:	f3bf 8f5b 	dmb	ish
 800b2bc:	e853 0f00 	ldrex	r0, [r3]
 800b2c0:	ea40 0201 	orr.w	r2, r0, r1
 800b2c4:	e843 2c00 	strex	ip, r2, [r3]
 800b2c8:	f1bc 0f00 	cmp.w	ip, #0
 800b2cc:	d1f6      	bne.n	800b2bc <atomic_or+0x6>
 800b2ce:	f3bf 8f5b 	dmb	ish
 800b2d2:	4770      	bx	lr

0800b2d4 <atomic_and>:
 * @param value Value to AND.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
 800b2d4:	4603      	mov	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
 800b2d6:	f3bf 8f5b 	dmb	ish
 800b2da:	e853 0f00 	ldrex	r0, [r3]
 800b2de:	ea00 0201 	and.w	r2, r0, r1
 800b2e2:	e843 2c00 	strex	ip, r2, [r3]
 800b2e6:	f1bc 0f00 	cmp.w	ip, #0
 800b2ea:	d1f6      	bne.n	800b2da <atomic_and+0x6>
 800b2ec:	f3bf 8f5b 	dmb	ish
 800b2f0:	4770      	bx	lr

0800b2f2 <shell_signal_handle>:
{
 800b2f2:	b530      	push	{r4, r5, lr}
 800b2f4:	4604      	mov	r4, r0
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 800b2f6:	6880      	ldr	r0, [r0, #8]
 800b2f8:	3126      	adds	r1, #38	; 0x26
{
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	4615      	mov	r5, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 800b2fe:	eb00 1001 	add.w	r0, r0, r1, lsl #4
		arch_syscall_invoke3(*(uintptr_t *)&sig, *(uintptr_t *)&signaled, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_CHECK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_check(sig, signaled, result);
 800b302:	aa03      	add	r2, sp, #12
 800b304:	a902      	add	r1, sp, #8
 800b306:	9001      	str	r0, [sp, #4]
 800b308:	f002 f91b 	bl	800d542 <z_impl_k_poll_signal_check>
	if (set) {
 800b30c:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
 800b310:	b11b      	cbz	r3, 800b31a <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
 800b312:	f002 f913 	bl	800d53c <z_impl_k_poll_signal_reset>
		handler(shell);
 800b316:	4620      	mov	r0, r4
 800b318:	47a8      	blx	r5
}
 800b31a:	b005      	add	sp, #20
 800b31c:	bd30      	pop	{r4, r5, pc}

0800b31e <z_shell_strlen>:
{
 800b31e:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
 800b320:	b110      	cbz	r0, 800b328 <z_shell_strlen+0xa>
 800b322:	f7f5 fd53 	bl	8000dcc <strlen>
 800b326:	b280      	uxth	r0, r0
}
 800b328:	bd08      	pop	{r3, pc}

0800b32a <z_shell_raw_fprintf>:
{
 800b32a:	b40e      	push	{r1, r2, r3}
 800b32c:	b503      	push	{r0, r1, lr}
 800b32e:	aa03      	add	r2, sp, #12
 800b330:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 800b334:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 800b336:	f7f9 fbfb 	bl	8004b30 <z_shell_fprintf_fmt>
}
 800b33a:	b002      	add	sp, #8
 800b33c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b340:	b003      	add	sp, #12
 800b342:	4770      	bx	lr

0800b344 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 800b344:	f7fd ba3e 	b.w	80087c4 <z_impl_k_mutex_lock>

0800b348 <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
 800b348:	688b      	ldr	r3, [r1, #8]
 800b34a:	b920      	cbnz	r0, 800b356 <transport_evt_handler+0xe>
 800b34c:	f503 7018 	add.w	r0, r3, #608	; 0x260
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 800b350:	2100      	movs	r1, #0
 800b352:	f7fe b965 	b.w	8009620 <z_impl_k_poll_signal_raise>
 800b356:	f503 7024 	add.w	r0, r3, #656	; 0x290
 800b35a:	e7f9      	b.n	800b350 <transport_evt_handler+0x8>

0800b35c <kill_handler>:
{
 800b35c:	b538      	push	{r3, r4, r5, lr}
	return shell->ctx->internal.flags.processing == 1;
 800b35e:	6883      	ldr	r3, [r0, #8]
 800b360:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
	if (z_flag_processing_get(shell)) {
 800b364:	06db      	lsls	r3, r3, #27
{
 800b366:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
 800b368:	d41d      	bmi.n	800b3a6 <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
 800b36a:	69c0      	ldr	r0, [r0, #28]
 800b36c:	f000 fdbb 	bl	800bee6 <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
 800b370:	6860      	ldr	r0, [r4, #4]
 800b372:	6803      	ldr	r3, [r0, #0]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	4798      	blx	r3
	if (err != 0) {
 800b378:	4605      	mov	r5, r0
 800b37a:	b920      	cbnz	r0, 800b386 <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
 800b37c:	68e0      	ldr	r0, [r4, #12]
 800b37e:	f000 fc77 	bl	800bc70 <z_shell_history_purge>
	shell->ctx->state = state;
 800b382:	68a3      	ldr	r3, [r4, #8]
 800b384:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
 800b386:	68a3      	ldr	r3, [r4, #8]
 800b388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38a:	b113      	cbz	r3, 800b392 <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
 800b38c:	4629      	mov	r1, r5
 800b38e:	4620      	mov	r0, r4
 800b390:	4798      	blx	r3
	shell->ctx->tid = NULL;
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	2200      	movs	r2, #0
 800b396:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	return z_impl_k_current_get();
 800b39a:	f7fd fe59 	bl	8009050 <z_impl_k_current_get>
}
 800b39e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
 800b3a2:	f7fb bab7 	b.w	8006914 <z_impl_k_thread_abort>
		return -EBUSY;
 800b3a6:	f06f 050f 	mvn.w	r5, #15
 800b3aa:	e7ec      	b.n	800b386 <kill_handler+0x2a>

0800b3ac <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, history_exit, val, ret);
 800b3ac:	f500 7017 	add.w	r0, r0, #604	; 0x25c
 800b3b0:	b111      	cbz	r1, 800b3b8 <z_flag_history_exit_set.isra.0+0xc>
 800b3b2:	2180      	movs	r1, #128	; 0x80
 800b3b4:	f7ff bf7f 	b.w	800b2b6 <atomic_or>
 800b3b8:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800b3bc:	f7ff bf8a 	b.w	800b2d4 <atomic_and>

0800b3c0 <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *shell, bool val)
 800b3c0:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(shell, insert_mode, val, ret);
 800b3c2:	f500 7017 	add.w	r0, r0, #604	; 0x25c
 800b3c6:	b129      	cbz	r1, 800b3d4 <z_flag_insert_mode_set.isra.0+0x14>
 800b3c8:	2101      	movs	r1, #1
 800b3ca:	f7ff ff74 	bl	800b2b6 <atomic_or>
}
 800b3ce:	f000 0001 	and.w	r0, r0, #1
 800b3d2:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, insert_mode, val, ret);
 800b3d4:	f06f 0101 	mvn.w	r1, #1
 800b3d8:	f7ff ff7c 	bl	800b2d4 <atomic_and>
 800b3dc:	e7f7      	b.n	800b3ce <z_flag_insert_mode_set.isra.0+0xe>

0800b3de <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 800b3de:	f7fd ba69 	b.w	80088b4 <z_impl_k_mutex_unlock>

0800b3e2 <shell_log_process>:
{
 800b3e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
 800b3e4:	2300      	movs	r3, #0
{
 800b3e6:	4604      	mov	r4, r0
	int signaled = 0;
 800b3e8:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f000 fa2d 	bl	800b84a <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
 800b3f0:	69e0      	ldr	r0, [r4, #28]
 800b3f2:	f000 fd81 	bl	800bef8 <z_shell_log_backend_process>
 800b3f6:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
 800b3f8:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
 800b3fa:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
 800b3fc:	f7f9 fe98 	bl	8005130 <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
 800b400:	68a3      	ldr	r3, [r4, #8]
 800b402:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		struct k_poll_signal *signal =
 800b404:	f506 7618 	add.w	r6, r6, #608	; 0x260
		if (shell->ctx->cmd_buff_len) {
 800b408:	b11b      	cbz	r3, 800b412 <shell_log_process+0x30>
	return z_impl_k_sleep(timeout);
 800b40a:	2096      	movs	r0, #150	; 0x96
 800b40c:	2100      	movs	r1, #0
 800b40e:	f7fd fe07 	bl	8009020 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
 800b412:	aa01      	add	r2, sp, #4
 800b414:	4669      	mov	r1, sp
 800b416:	4630      	mov	r0, r6
 800b418:	f002 f893 	bl	800d542 <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
 800b41c:	b115      	cbz	r5, 800b424 <shell_log_process+0x42>
 800b41e:	9b00      	ldr	r3, [sp, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d0e2      	beq.n	800b3ea <shell_log_process+0x8>
}
 800b424:	b002      	add	sp, #8
 800b426:	bd70      	pop	{r4, r5, r6, pc}

0800b428 <shell_vfprintf>:
{
 800b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42a:	4604      	mov	r4, r0
	return shell->ctx->state;
 800b42c:	6880      	ldr	r0, [r0, #8]
{
 800b42e:	461f      	mov	r7, r3
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
 800b430:	7903      	ldrb	r3, [r0, #4]
 800b432:	2b02      	cmp	r3, #2
{
 800b434:	460d      	mov	r5, r1
 800b436:	4616      	mov	r6, r2
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
 800b438:	d007      	beq.n	800b44a <shell_vfprintf+0x22>
}
 800b43a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(shell, print_noinit, val, ret);
 800b43e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800b442:	f500 7017 	add.w	r0, r0, #604	; 0x25c
 800b446:	f7ff bf36 	b.w	800b2b6 <atomic_or>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 800b44a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b44e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b452:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
 800b456:	f7ff ff75 	bl	800b344 <k_mutex_lock.constprop.0.isra.0>
	return shell->ctx->internal.flags.cmd_ctx == 1;
 800b45a:	68a3      	ldr	r3, [r4, #8]
 800b45c:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
	if (!z_flag_cmd_ctx_get(shell)) {
 800b460:	03da      	lsls	r2, r3, #15
 800b462:	d402      	bmi.n	800b46a <shell_vfprintf+0x42>
		z_shell_cmd_line_erase(shell);
 800b464:	4620      	mov	r0, r4
 800b466:	f000 f9f0 	bl	800b84a <z_shell_cmd_line_erase>
	z_shell_vfprintf(shell, color, fmt, args);
 800b46a:	463b      	mov	r3, r7
 800b46c:	4632      	mov	r2, r6
 800b46e:	4629      	mov	r1, r5
 800b470:	4620      	mov	r0, r4
 800b472:	f000 fa45 	bl	800b900 <z_shell_vfprintf>
 800b476:	68a3      	ldr	r3, [r4, #8]
 800b478:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
	if (!z_flag_cmd_ctx_get(shell)) {
 800b47c:	03db      	lsls	r3, r3, #15
 800b47e:	d402      	bmi.n	800b486 <shell_vfprintf+0x5e>
		z_shell_print_prompt_and_cmd(shell);
 800b480:	4620      	mov	r0, r4
 800b482:	f7f9 fe55 	bl	8005130 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
 800b486:	6960      	ldr	r0, [r4, #20]
 800b488:	f000 f82a 	bl	800b4e0 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&shell->ctx->wr_mtx);
 800b48c:	68a0      	ldr	r0, [r4, #8]
}
 800b48e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
 800b492:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
 800b496:	f7ff bfa2 	b.w	800b3de <k_mutex_unlock.isra.0>

0800b49a <shell_fprintf>:
{
 800b49a:	b40c      	push	{r2, r3}
 800b49c:	b507      	push	{r0, r1, r2, lr}
 800b49e:	ab04      	add	r3, sp, #16
 800b4a0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
 800b4a4:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
 800b4a6:	f7ff ffbf 	bl	800b428 <shell_vfprintf>
}
 800b4aa:	b003      	add	sp, #12
 800b4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4b0:	b002      	add	sp, #8
 800b4b2:	4770      	bx	lr

0800b4b4 <shell_hexdump>:
{
 800b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b8:	4680      	mov	r8, r0
 800b4ba:	460e      	mov	r6, r1
 800b4bc:	4614      	mov	r4, r2
	const uint8_t *p = data;
 800b4be:	460d      	mov	r5, r1
	while (len) {
 800b4c0:	b90c      	cbnz	r4, 800b4c6 <shell_hexdump+0x12>
}
 800b4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
 800b4c6:	2c10      	cmp	r4, #16
 800b4c8:	4627      	mov	r7, r4
 800b4ca:	bf28      	it	cs
 800b4cc:	2710      	movcs	r7, #16
		shell_hexdump_line(shell, p - data, p, line_len);
 800b4ce:	462a      	mov	r2, r5
 800b4d0:	1ba9      	subs	r1, r5, r6
 800b4d2:	463b      	mov	r3, r7
 800b4d4:	4640      	mov	r0, r8
 800b4d6:	f7f9 fabf 	bl	8004a58 <shell_hexdump_line>
		len -= line_len;
 800b4da:	1be4      	subs	r4, r4, r7
		p += line_len;
 800b4dc:	443d      	add	r5, r7
 800b4de:	e7ef      	b.n	800b4c0 <shell_hexdump+0xc>

0800b4e0 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 800b4e0:	6902      	ldr	r2, [r0, #16]
 800b4e2:	6883      	ldr	r3, [r0, #8]
 800b4e4:	6812      	ldr	r2, [r2, #0]
 800b4e6:	6801      	ldr	r1, [r0, #0]
{
 800b4e8:	b510      	push	{r4, lr}
 800b4ea:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 800b4ec:	68c0      	ldr	r0, [r0, #12]
 800b4ee:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
 800b4f0:	6923      	ldr	r3, [r4, #16]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]
}
 800b4f6:	bd10      	pop	{r4, pc}

0800b4f8 <out_func>:
{
 800b4f8:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 800b4fa:	68cb      	ldr	r3, [r1, #12]
 800b4fc:	7c1b      	ldrb	r3, [r3, #16]
 800b4fe:	2b02      	cmp	r3, #2
{
 800b500:	4605      	mov	r5, r0
 800b502:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 800b504:	d104      	bne.n	800b510 <out_func+0x18>
 800b506:	280a      	cmp	r0, #10
 800b508:	d102      	bne.n	800b510 <out_func+0x18>
		(void)out_func('\r', ctx);
 800b50a:	200d      	movs	r0, #13
 800b50c:	f7ff fff4 	bl	800b4f8 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	6822      	ldr	r2, [r4, #0]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
 800b518:	6922      	ldr	r2, [r4, #16]
 800b51a:	6813      	ldr	r3, [r2, #0]
 800b51c:	3301      	adds	r3, #1
 800b51e:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
 800b520:	6862      	ldr	r2, [r4, #4]
 800b522:	4293      	cmp	r3, r2
 800b524:	d102      	bne.n	800b52c <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
 800b526:	4620      	mov	r0, r4
 800b528:	f7ff ffda 	bl	800b4e0 <z_shell_fprintf_buffer_flush>
}
 800b52c:	2000      	movs	r0, #0
 800b52e:	bd38      	pop	{r3, r4, r5, pc}

0800b530 <z_shell_strlen>:
{
 800b530:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
 800b532:	b110      	cbz	r0, 800b53a <z_shell_strlen+0xa>
 800b534:	f7f5 fc4a 	bl	8000dcc <strlen>
 800b538:	b280      	uxth	r0, r0
}
 800b53a:	bd08      	pop	{r3, pc}

0800b53c <z_column_span_with_buffer_offsets_get>:
{
 800b53c:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
 800b53e:	7b03      	ldrb	r3, [r0, #12]
 800b540:	8940      	ldrh	r0, [r0, #10]
 800b542:	441a      	add	r2, r3
 800b544:	4419      	add	r1, r3
 800b546:	fbb2 f4f0 	udiv	r4, r2, r0
 800b54a:	fbb1 f3f0 	udiv	r3, r1, r0
 800b54e:	fb00 2214 	mls	r2, r0, r4, r2
 800b552:	fb00 1013 	mls	r0, r0, r3, r1
}
 800b556:	1a10      	subs	r0, r2, r0
 800b558:	bd10      	pop	{r4, pc}

0800b55a <z_row_span_with_buffer_offsets_get>:
{
 800b55a:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
 800b55c:	7b04      	ldrb	r4, [r0, #12]
 800b55e:	8943      	ldrh	r3, [r0, #10]
 800b560:	4422      	add	r2, r4
 800b562:	4421      	add	r1, r4
 800b564:	fbb2 f0f3 	udiv	r0, r2, r3
 800b568:	fbb1 f1f3 	udiv	r1, r1, r3
}
 800b56c:	1a40      	subs	r0, r0, r1
 800b56e:	bd10      	pop	{r4, pc}

0800b570 <z_shell_multiline_data_calc>:
{
 800b570:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 800b572:	7b05      	ldrb	r5, [r0, #12]
 800b574:	8943      	ldrh	r3, [r0, #10]
 800b576:	4429      	add	r1, r5
 800b578:	fbb1 f4f3 	udiv	r4, r1, r3
 800b57c:	fb03 1114 	mls	r1, r3, r4, r1
 800b580:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 800b582:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 800b584:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 800b586:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 800b588:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 800b58c:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 800b590:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 800b592:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 800b594:	1c4c      	adds	r4, r1, #1
 800b596:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 800b598:	8042      	strh	r2, [r0, #2]
}
 800b59a:	bd30      	pop	{r4, r5, pc}

0800b59c <z_shell_pattern_remove>:
{
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
 800b5a0:	4611      	mov	r1, r2
{
 800b5a2:	4615      	mov	r5, r2
 800b5a4:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
 800b5a6:	f002 f97c 	bl	800d8a2 <strstr>
 800b5aa:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	f7ff ffbf 	bl	800b530 <z_shell_strlen>
 800b5b2:	4605      	mov	r5, r0
	if (!pattern_addr) {
 800b5b4:	b1c4      	cbz	r4, 800b5e8 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
 800b5b6:	42a7      	cmp	r7, r4
 800b5b8:	d207      	bcs.n	800b5ca <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
 800b5ba:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800b5be:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
 800b5c0:	bf02      	ittt	eq
 800b5c2:	3501      	addeq	r5, #1
 800b5c4:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
 800b5c6:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f7ff ffb0 	bl	800b530 <z_shell_strlen>
	*buff_len -= pattern_len;
 800b5d0:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 800b5d2:	1b40      	subs	r0, r0, r5
	*buff_len -= pattern_len;
 800b5d4:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 800b5d6:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
 800b5d8:	8033      	strh	r3, [r6, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
 800b5da:	1961      	adds	r1, r4, r5
 800b5dc:	4620      	mov	r0, r4
 800b5de:	b292      	uxth	r2, r2
}
 800b5e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b5e4:	f002 b886 	b.w	800d6f4 <memmove>
 800b5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5ea <z_shell_find_cmd>:
{
 800b5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	4688      	mov	r8, r1
 800b5f2:	4617      	mov	r7, r2
	size_t idx = 0;
 800b5f4:	2600      	movs	r6, #0
	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
 800b5f6:	4631      	mov	r1, r6
 800b5f8:	463a      	mov	r2, r7
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	f7f9 fb68 	bl	8004cd0 <z_shell_cmd_get>
 800b600:	3601      	adds	r6, #1
 800b602:	4604      	mov	r4, r0
 800b604:	b128      	cbz	r0, 800b612 <z_shell_find_cmd+0x28>
		if (strcmp(cmd_str, entry->syntax) == 0) {
 800b606:	6821      	ldr	r1, [r4, #0]
 800b608:	4640      	mov	r0, r8
 800b60a:	f7f5 fbd5 	bl	8000db8 <strcmp>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d1f1      	bne.n	800b5f6 <z_shell_find_cmd+0xc>
}
 800b612:	4620      	mov	r0, r4
 800b614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b618 <z_shell_get_last_command>:
{
 800b618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b61c:	461c      	mov	r4, r3
 800b61e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b622:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
 800b626:	2300      	movs	r3, #0
{
 800b628:	460f      	mov	r7, r1
 800b62a:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
 800b62c:	6023      	str	r3, [r4, #0]
	while (*match_arg < argc) {
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	42bb      	cmp	r3, r7
				continue;
 800b632:	4605      	mov	r5, r0
	while (*match_arg < argc) {
 800b634:	d21b      	bcs.n	800b66e <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
 800b636:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 800b63a:	f000 fcc4 	bl	800bfc6 <z_shell_has_wildcard>
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	4682      	mov	sl, r0
 800b642:	b118      	cbz	r0, 800b64c <z_shell_get_last_command+0x34>
				(*match_arg)++;
 800b644:	3301      	adds	r3, #1
 800b646:	6023      	str	r3, [r4, #0]
				continue;
 800b648:	4628      	mov	r0, r5
 800b64a:	e7f0      	b.n	800b62e <z_shell_get_last_command+0x16>
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
 800b64c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800b650:	4642      	mov	r2, r8
 800b652:	4628      	mov	r0, r5
 800b654:	f7ff ffc9 	bl	800b5ea <z_shell_find_cmd>
		if (entry) {
 800b658:	b148      	cbz	r0, 800b66e <z_shell_get_last_command+0x56>
			(*match_arg)++;
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	1c5a      	adds	r2, r3, #1
 800b65e:	6022      	str	r2, [r4, #0]
		if (only_static && (entry == dloc)) {
 800b660:	f1b9 0f00 	cmp.w	r9, #0
 800b664:	d0e3      	beq.n	800b62e <z_shell_get_last_command+0x16>
 800b666:	4580      	cmp	r8, r0
 800b668:	d1e1      	bne.n	800b62e <z_shell_get_last_command+0x16>
			(*match_arg)--;
 800b66a:	6023      	str	r3, [r4, #0]
			return NULL;
 800b66c:	4655      	mov	r5, sl
}
 800b66e:	4628      	mov	r0, r5
 800b670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b674 <shell_device_lookup>:

const struct device *shell_device_lookup(size_t idx,
				   const char *prefix)
{
 800b674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b676:	b085      	sub	sp, #20
 800b678:	4607      	mov	r7, r0
	size_t match_idx = 0;
	const struct device *dev;
	size_t len = z_device_get_all_static(&dev);
 800b67a:	a803      	add	r0, sp, #12
{
 800b67c:	460c      	mov	r4, r1
	size_t len = z_device_get_all_static(&dev);
 800b67e:	f7fc fc79 	bl	8007f74 <z_device_get_all_static>
	const struct device *dev_end = dev + len;
 800b682:	9b03      	ldr	r3, [sp, #12]
 800b684:	2518      	movs	r5, #24
 800b686:	fb05 3500 	mla	r5, r5, r0, r3
	size_t match_idx = 0;
 800b68a:	2600      	movs	r6, #0

	while (dev < dev_end) {
 800b68c:	9803      	ldr	r0, [sp, #12]
 800b68e:	42a8      	cmp	r0, r5
 800b690:	d301      	bcc.n	800b696 <shell_device_lookup+0x22>
			++match_idx;
		}
		++dev;
	}

	return NULL;
 800b692:	2000      	movs	r0, #0
 800b694:	e00c      	b.n	800b6b0 <shell_device_lookup+0x3c>
	return z_device_ready(dev) ? 0 : -ENODEV;
 800b696:	f001 fb22 	bl	800ccde <z_device_ready>
 800b69a:	b1c0      	cbz	r0, 800b6ce <shell_device_lookup+0x5a>
		    && (dev->name != NULL)
 800b69c:	9b03      	ldr	r3, [sp, #12]
 800b69e:	6818      	ldr	r0, [r3, #0]
 800b6a0:	b1a8      	cbz	r0, 800b6ce <shell_device_lookup+0x5a>
		    && (strlen(dev->name) != 0)
 800b6a2:	f7f5 fb93 	bl	8000dcc <strlen>
 800b6a6:	b190      	cbz	r0, 800b6ce <shell_device_lookup+0x5a>
		    && ((prefix == NULL)
 800b6a8:	b924      	cbnz	r4, 800b6b4 <shell_device_lookup+0x40>
			if (match_idx == idx) {
 800b6aa:	42be      	cmp	r6, r7
 800b6ac:	d113      	bne.n	800b6d6 <shell_device_lookup+0x62>
				return dev;
 800b6ae:	9803      	ldr	r0, [sp, #12]
}
 800b6b0:	b005      	add	sp, #20
 800b6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			|| (strncmp(prefix, dev->name,
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	6819      	ldr	r1, [r3, #0]
 800b6ba:	9101      	str	r1, [sp, #4]
 800b6bc:	f7f5 fb86 	bl	8000dcc <strlen>
 800b6c0:	9901      	ldr	r1, [sp, #4]
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f002 f8b9 	bl	800d83c <strncmp>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d0ed      	beq.n	800b6aa <shell_device_lookup+0x36>
		++dev;
 800b6ce:	9b03      	ldr	r3, [sp, #12]
 800b6d0:	3318      	adds	r3, #24
 800b6d2:	9303      	str	r3, [sp, #12]
 800b6d4:	e7da      	b.n	800b68c <shell_device_lookup+0x18>
			++match_idx;
 800b6d6:	3601      	adds	r6, #1
 800b6d8:	e7f9      	b.n	800b6ce <shell_device_lookup+0x5a>

0800b6da <z_shell_raw_fprintf>:
{
 800b6da:	b40e      	push	{r1, r2, r3}
 800b6dc:	b503      	push	{r0, r1, lr}
 800b6de:	aa03      	add	r2, sp, #12
 800b6e0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 800b6e4:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 800b6e6:	f7f9 fa23 	bl	8004b30 <z_shell_fprintf_fmt>
}
 800b6ea:	b002      	add	sp, #8
 800b6ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6f0:	b003      	add	sp, #12
 800b6f2:	4770      	bx	lr

0800b6f4 <full_line_cmd>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
 800b6f4:	6882      	ldr	r2, [r0, #8]
{
 800b6f6:	b538      	push	{r3, r4, r5, lr}
 800b6f8:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
 800b6fa:	6810      	ldr	r0, [r2, #0]
 800b6fc:	8f15      	ldrh	r5, [r2, #56]	; 0x38
	return str == NULL ? 0U : (uint16_t)strlen(str);
 800b6fe:	b168      	cbz	r0, 800b71c <full_line_cmd+0x28>
 800b700:	f7f5 fb64 	bl	8000dcc <strlen>
 800b704:	b283      	uxth	r3, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 800b706:	68a2      	ldr	r2, [r4, #8]
 800b708:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
 800b70a:	442b      	add	r3, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 800b70c:	fbb3 f2f0 	udiv	r2, r3, r0
 800b710:	fb00 3012 	mls	r0, r0, r2, r3
}
 800b714:	fab0 f080 	clz	r0, r0
 800b718:	0940      	lsrs	r0, r0, #5
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
 800b71c:	4603      	mov	r3, r0
 800b71e:	e7f2      	b.n	800b706 <full_line_cmd+0x12>

0800b720 <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
 800b720:	6882      	ldr	r2, [r0, #8]
{
 800b722:	b538      	push	{r3, r4, r5, lr}
 800b724:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
 800b726:	6810      	ldr	r0, [r2, #0]
 800b728:	8f55      	ldrh	r5, [r2, #58]	; 0x3a
 800b72a:	b168      	cbz	r0, 800b748 <z_shell_cursor_in_empty_line+0x28>
 800b72c:	f7f5 fb4e 	bl	8000dcc <strlen>
 800b730:	b283      	uxth	r3, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 800b732:	68a2      	ldr	r2, [r4, #8]
 800b734:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
 800b736:	442b      	add	r3, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 800b738:	fbb3 f2f0 	udiv	r2, r3, r0
 800b73c:	fb00 3012 	mls	r0, r0, r2, r3
}
 800b740:	fab0 f080 	clz	r0, r0
 800b744:	0940      	lsrs	r0, r0, #5
 800b746:	bd38      	pop	{r3, r4, r5, pc}
 800b748:	4603      	mov	r3, r0
 800b74a:	e7f2      	b.n	800b732 <z_shell_cursor_in_empty_line+0x12>

0800b74c <z_shell_op_cond_next_line>:
{
 800b74c:	b510      	push	{r4, lr}
 800b74e:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 800b750:	f7ff ffe6 	bl	800b720 <z_shell_cursor_in_empty_line>
 800b754:	b120      	cbz	r0, 800b760 <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
 800b756:	6960      	ldr	r0, [r4, #20]
}
 800b758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
 800b75c:	f7f9 bb4e 	b.w	8004dfc <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 800b760:	4620      	mov	r0, r4
 800b762:	f7ff ffc7 	bl	800b6f4 <full_line_cmd>
 800b766:	2800      	cmp	r0, #0
 800b768:	d1f5      	bne.n	800b756 <z_shell_op_cond_next_line+0xa>
}
 800b76a:	bd10      	pop	{r4, pc}

0800b76c <z_shell_op_cursor_position_synchronize>:
{
 800b76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 800b76e:	6884      	ldr	r4, [r0, #8]
{
 800b770:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 800b772:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800b774:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 800b776:	f104 0020 	add.w	r0, r4, #32
 800b77a:	f7ff fef9 	bl	800b570 <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
 800b77e:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
 800b780:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
 800b782:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
 800b784:	f7ff ffb6 	bl	800b6f4 <full_line_cmd>
 800b788:	b110      	cbz	r0, 800b790 <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
 800b78a:	6968      	ldr	r0, [r5, #20]
 800b78c:	f7f9 fb36 	bl	8004dfc <z_cursor_next_line_move.isra.0>
	if (last_line) {
 800b790:	42b7      	cmp	r7, r6
 800b792:	d107      	bne.n	800b7a4 <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
 800b794:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
 800b796:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
 800b798:	4628      	mov	r0, r5
 800b79a:	1ac9      	subs	r1, r1, r3
}
 800b79c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
 800b7a0:	f7f9 bb4a 	b.w	8004e38 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
 800b7a4:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800b7a6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	1ac9      	subs	r1, r1, r3
 800b7ac:	f7f9 fb34 	bl	8004e18 <z_shell_op_cursor_vert_move>
 800b7b0:	e7f0      	b.n	800b794 <z_shell_op_cursor_position_synchronize+0x28>

0800b7b2 <z_shell_op_cursor_move>:
{
 800b7b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b4:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 800b7b6:	6880      	ldr	r0, [r0, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
 800b7b8:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 800b7ba:	8f02      	ldrh	r2, [r0, #56]	; 0x38
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
 800b7bc:	18cd      	adds	r5, r1, r3
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 800b7be:	3020      	adds	r0, #32
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	f7ff fed5 	bl	800b570 <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
 800b7c6:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
 800b7c8:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
 800b7ca:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
 800b7cc:	462a      	mov	r2, r5
 800b7ce:	3020      	adds	r0, #32
 800b7d0:	f7ff fec3 	bl	800b55a <z_row_span_with_buffer_offsets_get>
 800b7d4:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
 800b7d6:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
 800b7d8:	462a      	mov	r2, r5
 800b7da:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
 800b7dc:	3020      	adds	r0, #32
 800b7de:	f7ff fead 	bl	800b53c <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
 800b7e2:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
 800b7e4:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f7f9 fb16 	bl	8004e18 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f7f9 fb22 	bl	8004e38 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
 800b7f4:	68a3      	ldr	r3, [r4, #8]
 800b7f6:	875d      	strh	r5, [r3, #58]	; 0x3a
}
 800b7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7fa <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
 800b7fa:	6883      	ldr	r3, [r0, #8]
 800b7fc:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800b7fe:	4249      	negs	r1, r1
 800b800:	b209      	sxth	r1, r1
 800b802:	f7ff bfd6 	b.w	800b7b2 <z_shell_op_cursor_move>

0800b806 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
 800b806:	6883      	ldr	r3, [r0, #8]
 800b808:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800b80a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800b80c:	1ac9      	subs	r1, r1, r3
 800b80e:	b209      	sxth	r1, r1
 800b810:	f7ff bfcf 	b.w	800b7b2 <z_shell_op_cursor_move>

0800b814 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
 800b814:	6883      	ldr	r3, [r0, #8]
 800b816:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800b818:	b11b      	cbz	r3, 800b822 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
 800b81a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b81e:	f7ff bfc8 	b.w	800b7b2 <z_shell_op_cursor_move>
}
 800b822:	4770      	bx	lr

0800b824 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
 800b824:	6883      	ldr	r3, [r0, #8]
 800b826:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800b828:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d202      	bcs.n	800b834 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
 800b82e:	2101      	movs	r1, #1
 800b830:	f7ff bfbf 	b.w	800b7b2 <z_shell_op_cursor_move>
}
 800b834:	4770      	bx	lr

0800b836 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
 800b836:	6883      	ldr	r3, [r0, #8]
 800b838:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800b83a:	871a      	strh	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
 800b83c:	4413      	add	r3, r2
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	z_clear_eos(shell);
 800b844:	6940      	ldr	r0, [r0, #20]
 800b846:	f7f9 badf 	b.w	8004e08 <z_clear_eos.isra.0>

0800b84a <z_shell_cmd_line_erase>:
{
 800b84a:	b510      	push	{r4, lr}
 800b84c:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
 800b84e:	6880      	ldr	r0, [r0, #8]
 800b850:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800b852:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
 800b854:	3020      	adds	r0, #32
 800b856:	f7ff fe8b 	bl	800b570 <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
 800b85e:	4620      	mov	r0, r4
 800b860:	f1c1 0101 	rsb	r1, r1, #1
 800b864:	f7f9 fae8 	bl	8004e38 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
 800b868:	68a3      	ldr	r3, [r4, #8]
 800b86a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800b86c:	4620      	mov	r0, r4
 800b86e:	3901      	subs	r1, #1
 800b870:	f7f9 fad2 	bl	8004e18 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
 800b874:	6960      	ldr	r0, [r4, #20]
}
 800b876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
 800b87a:	f7f9 bac5 	b.w	8004e08 <z_clear_eos.isra.0>

0800b87e <z_shell_write>:
{
 800b87e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b882:	4606      	mov	r6, r0
 800b884:	4688      	mov	r8, r1
 800b886:	4615      	mov	r5, r2
	size_t offset = 0;
 800b888:	2700      	movs	r7, #0
	while (length) {
 800b88a:	b915      	cbnz	r5, 800b892 <z_shell_write+0x14>
}
 800b88c:	b002      	add	sp, #8
 800b88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
 800b892:	6870      	ldr	r0, [r6, #4]
 800b894:	6803      	ldr	r3, [r0, #0]
 800b896:	462a      	mov	r2, r5
 800b898:	68dc      	ldr	r4, [r3, #12]
 800b89a:	eb08 0107 	add.w	r1, r8, r7
 800b89e:	ab01      	add	r3, sp, #4
 800b8a0:	47a0      	blx	r4
		offset += tmp_cnt;
 800b8a2:	9b01      	ldr	r3, [sp, #4]
 800b8a4:	441f      	add	r7, r3
		length -= tmp_cnt;
 800b8a6:	1aed      	subs	r5, r5, r3
		if (tmp_cnt == 0 &&
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1ee      	bne.n	800b88a <z_shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
 800b8ac:	68b4      	ldr	r4, [r6, #8]
 800b8ae:	7923      	ldrb	r3, [r4, #4]
		if (tmp_cnt == 0 &&
 800b8b0:	2b03      	cmp	r3, #3
 800b8b2:	d0ea      	beq.n	800b88a <z_shell_write+0xc>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d80e      	bhi.n	800b8d6 <z_shell_write+0x58>
	return z_impl_k_poll(events, num_events, timeout);
 800b8b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	f504 7037 	add.w	r0, r4, #732	; 0x2dc
 800b8c6:	f7fd fe4f 	bl	8009568 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
 800b8ca:	68b0      	ldr	r0, [r6, #8]
 800b8cc:	f500 7024 	add.w	r0, r0, #656	; 0x290
	z_impl_k_poll_signal_reset(sig);
 800b8d0:	f001 fe34 	bl	800d53c <z_impl_k_poll_signal_reset>
 800b8d4:	e7d9      	b.n	800b88a <z_shell_write+0xc>
	return shell->ctx->internal.flags.tx_rdy == 1;
 800b8d6:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
		while (!z_flag_tx_rdy_get(shell)) {
 800b8da:	069b      	lsls	r3, r3, #26
 800b8dc:	d5fb      	bpl.n	800b8d6 <z_shell_write+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800b8de:	f3bf 8f5b 	dmb	ish
 800b8e2:	f504 7417 	add.w	r4, r4, #604	; 0x25c
 800b8e6:	e854 3f00 	ldrex	r3, [r4]
 800b8ea:	f023 0320 	bic.w	r3, r3, #32
 800b8ee:	e844 3200 	strex	r2, r3, [r4]
 800b8f2:	2a00      	cmp	r2, #0
 800b8f4:	d1f7      	bne.n	800b8e6 <z_shell_write+0x68>
 800b8f6:	f3bf 8f5b 	dmb	ish
	return ret;
 800b8fa:	e7c6      	b.n	800b88a <z_shell_write+0xc>

0800b8fc <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
 800b8fc:	f7ff bfbf 	b.w	800b87e <z_shell_write>

0800b900 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
 800b900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b902:	4615      	mov	r5, r2
 800b904:	461a      	mov	r2, r3
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
 800b906:	6883      	ldr	r3, [r0, #8]
 800b908:	f8d3 725c 	ldr.w	r7, [r3, #604]	; 0x25c
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 800b90c:	07bf      	lsls	r7, r7, #30
{
 800b90e:	b085      	sub	sp, #20
 800b910:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 800b912:	d514      	bpl.n	800b93e <z_shell_vfprintf+0x3e>
	    shell->ctx->internal.flags.use_colors &&
 800b914:	f893 702e 	ldrb.w	r7, [r3, #46]	; 0x2e
 800b918:	428f      	cmp	r7, r1
 800b91a:	d010      	beq.n	800b93e <z_shell_vfprintf+0x3e>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *shell,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
 800b91c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b91e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b922:	9201      	str	r2, [sp, #4]
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
 800b924:	f7f9 fada 	bl	8004edc <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 800b928:	9a01      	ldr	r2, [sp, #4]
 800b92a:	6960      	ldr	r0, [r4, #20]
 800b92c:	4629      	mov	r1, r5
 800b92e:	f7f9 f8ff 	bl	8004b30 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
 800b932:	a903      	add	r1, sp, #12
 800b934:	4620      	mov	r0, r4
 800b936:	f7f9 fb07 	bl	8004f48 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
 800b93a:	b005      	add	sp, #20
 800b93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 800b93e:	6960      	ldr	r0, [r4, #20]
 800b940:	4629      	mov	r1, r5
}
 800b942:	b005      	add	sp, #20
 800b944:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 800b948:	f7f9 b8f2 	b.w	8004b30 <z_shell_fprintf_fmt>

0800b94c <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
 800b94c:	b40c      	push	{r2, r3}
 800b94e:	b507      	push	{r0, r1, r2, lr}
 800b950:	ab04      	add	r3, sp, #16
 800b952:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	va_start(args, fmt);
 800b956:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(shell, color, fmt, args);
 800b958:	f7ff ffd2 	bl	800b900 <z_shell_vfprintf>
	va_end(args);
}
 800b95c:	b003      	add	sp, #12
 800b95e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b962:	b002      	add	sp, #8
 800b964:	4770      	bx	lr

0800b966 <data_insert>:
{
 800b966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 800b96a:	6886      	ldr	r6, [r0, #8]
 800b96c:	8f35      	ldrh	r5, [r6, #56]	; 0x38
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 800b96e:	18ab      	adds	r3, r5, r2
 800b970:	2bff      	cmp	r3, #255	; 0xff
{
 800b972:	4607      	mov	r7, r0
 800b974:	4688      	mov	r8, r1
 800b976:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 800b978:	dc1e      	bgt.n	800b9b8 <data_insert+0x52>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 800b97a:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 800b97c:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 800b97e:	333e      	adds	r3, #62	; 0x3e
 800b980:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 800b982:	b2ad      	uxth	r5, r5
 800b984:	462a      	mov	r2, r5
 800b986:	4631      	mov	r1, r6
 800b988:	1930      	adds	r0, r6, r4
 800b98a:	f001 feb3 	bl	800d6f4 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800b98e:	4622      	mov	r2, r4
 800b990:	4641      	mov	r1, r8
 800b992:	4630      	mov	r0, r6
 800b994:	f001 fea0 	bl	800d6d8 <memcpy>
	shell->ctx->cmd_buff_len += len;
 800b998:	68b9      	ldr	r1, [r7, #8]
 800b99a:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
 800b99c:	4423      	add	r3, r4
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	870b      	strh	r3, [r1, #56]	; 0x38
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 800b9a2:	440b      	add	r3, r1
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	return shell->ctx->internal.flags.echo == 1;
 800b9aa:	f8d1 325c 	ldr.w	r3, [r1, #604]	; 0x25c
	if (!z_flag_echo_get(shell)) {
 800b9ae:	075b      	lsls	r3, r3, #29
 800b9b0:	d404      	bmi.n	800b9bc <data_insert+0x56>
		shell->ctx->cmd_buff_pos += len;
 800b9b2:	8f4a      	ldrh	r2, [r1, #58]	; 0x3a
 800b9b4:	4414      	add	r4, r2
 800b9b6:	874c      	strh	r4, [r1, #58]	; 0x3a
}
 800b9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
 800b9bc:	4629      	mov	r1, r5
 800b9be:	4638      	mov	r0, r7
}
 800b9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
 800b9c4:	f7f9 bb44 	b.w	8005050 <reprint_from_cursor>

0800b9c8 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
 800b9c8:	f7ff bfcd 	b.w	800b966 <data_insert>

0800b9cc <z_shell_op_char_delete>:
{
 800b9cc:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 800b9ce:	6883      	ldr	r3, [r0, #8]
{
 800b9d0:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 800b9d2:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 800b9d4:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 800b9d6:	1a24      	subs	r4, r4, r0
 800b9d8:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
 800b9da:	b18c      	cbz	r4, 800ba00 <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 800b9dc:	303e      	adds	r0, #62	; 0x3e
 800b9de:	4418      	add	r0, r3
__ssp_bos_icheck3(memmove, void *, const void *)
 800b9e0:	4622      	mov	r2, r4
 800b9e2:	1c41      	adds	r1, r0, #1
 800b9e4:	f001 fe86 	bl	800d6f4 <memmove>
	--shell->ctx->cmd_buff_len;
 800b9e8:	68aa      	ldr	r2, [r5, #8]
 800b9ea:	8f13      	ldrh	r3, [r2, #56]	; 0x38
	reprint_from_cursor(shell, --diff, true);
 800b9ec:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	8713      	strh	r3, [r2, #56]	; 0x38
	reprint_from_cursor(shell, --diff, true);
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	2201      	movs	r2, #1
}
 800b9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
 800b9fa:	b289      	uxth	r1, r1
 800b9fc:	f7f9 bb28 	b.w	8005050 <reprint_from_cursor>
}
 800ba00:	bd38      	pop	{r3, r4, r5, pc}

0800ba02 <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
 800ba02:	6883      	ldr	r3, [r0, #8]
 800ba04:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
{
 800ba06:	b510      	push	{r4, lr}
 800ba08:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 800ba0a:	b152      	cbz	r2, 800ba22 <z_shell_op_char_backspace+0x20>
 800ba0c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ba0e:	b143      	cbz	r3, 800ba22 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
 800ba10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ba14:	f7ff fecd 	bl	800b7b2 <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
 800ba18:	4620      	mov	r0, r4
}
 800ba1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
 800ba1e:	f7ff bfd5 	b.w	800b9cc <z_shell_op_char_delete>
}
 800ba22:	bd10      	pop	{r4, pc}

0800ba24 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
 800ba24:	6883      	ldr	r3, [r0, #8]
 800ba26:	6a1b      	ldr	r3, [r3, #32]
 800ba28:	b103      	cbz	r3, 800ba2c <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
 800ba2a:	4718      	bx	r3
}
 800ba2c:	4770      	bx	lr

0800ba2e <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
 800ba2e:	6843      	ldr	r3, [r0, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
{
 800ba32:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
 800ba34:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
 800ba36:	4620      	mov	r0, r4
 800ba38:	f7ff fff4 	bl	800ba24 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
 800ba3c:	68a3      	ldr	r3, [r4, #8]
 800ba3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba40:	b10b      	cbz	r3, 800ba46 <uninit+0x18>
		api->irq_rx_disable(dev);
 800ba42:	4620      	mov	r0, r4
 800ba44:	4798      	blx	r3
}
 800ba46:	2000      	movs	r0, #0
 800ba48:	bd10      	pop	{r4, pc}

0800ba4a <enable>:
{
 800ba4a:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
 800ba4c:	6843      	ldr	r3, [r0, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
 800ba52:	b111      	cbz	r1, 800ba5a <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
 800ba54:	6818      	ldr	r0, [r3, #0]
 800ba56:	f7ff ffe5 	bl	800ba24 <uart_irq_tx_disable>
}
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	bd08      	pop	{r3, pc}

0800ba5e <read>:
{
 800ba5e:	b510      	push	{r4, lr}
 800ba60:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
 800ba62:	6843      	ldr	r3, [r0, #4]
 800ba64:	68d8      	ldr	r0, [r3, #12]
 800ba66:	f7fe ff4a 	bl	800a8fe <ring_buf_get>
 800ba6a:	6020      	str	r0, [r4, #0]
}
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	bd10      	pop	{r4, pc}

0800ba70 <ring_buf_reset>:
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
 800ba70:	2300      	movs	r3, #0
	buf->tail = 0;
 800ba72:	e9c0 3300 	strd	r3, r3, [r0]
__ssp_bos_icheck3(memset, void *, int)
 800ba76:	6083      	str	r3, [r0, #8]
 800ba78:	60c3      	str	r3, [r0, #12]
	memset(&buf->misc, 0, sizeof(buf->misc));
}
 800ba7a:	4770      	bx	lr

0800ba7c <write>:
{
 800ba7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 800ba80:	6845      	ldr	r5, [r0, #4]
{
 800ba82:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
 800ba84:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 800ba86:	7c1b      	ldrb	r3, [r3, #16]
{
 800ba88:	460c      	mov	r4, r1
 800ba8a:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 800ba8c:	b153      	cbz	r3, 800baa4 <write+0x28>
 800ba8e:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
 800ba92:	4544      	cmp	r4, r8
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
 800ba94:	682b      	ldr	r3, [r5, #0]
		for (size_t i = 0; i < length; i++) {
 800ba96:	d120      	bne.n	800bada <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 800ba98:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
 800ba9c:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 800ba9e:	2001      	movs	r0, #1
 800baa0:	4790      	blx	r2
 800baa2:	e017      	b.n	800bad4 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
 800baa4:	68a8      	ldr	r0, [r5, #8]
 800baa6:	f7fe fec0 	bl	800a82a <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800baaa:	682b      	ldr	r3, [r5, #0]
 800baac:	6030      	str	r0, [r6, #0]
 800baae:	330c      	adds	r3, #12
 800bab0:	2101      	movs	r1, #1
 800bab2:	f3bf 8f5b 	dmb	ish
 800bab6:	e853 2f00 	ldrex	r2, [r3]
 800baba:	e843 1000 	strex	r0, r1, [r3]
 800babe:	2800      	cmp	r0, #0
 800bac0:	d1f9      	bne.n	800bab6 <write+0x3a>
 800bac2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
 800bac6:	b92a      	cbnz	r2, 800bad4 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
 800bac8:	682b      	ldr	r3, [r5, #0]
 800baca:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
 800bacc:	6883      	ldr	r3, [r0, #8]
 800bace:	69db      	ldr	r3, [r3, #28]
 800bad0:	b103      	cbz	r3, 800bad4 <write+0x58>
		api->irq_tx_enable(dev);
 800bad2:	4798      	blx	r3
}
 800bad4:	2000      	movs	r0, #0
 800bad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
 800bada:	6818      	ldr	r0, [r3, #0]
 800badc:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
 800bae0:	6883      	ldr	r3, [r0, #8]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 800bae6:	e7d4      	b.n	800ba92 <write+0x16>

0800bae8 <z_shell_raw_fprintf>:
{
 800bae8:	b40e      	push	{r1, r2, r3}
 800baea:	b503      	push	{r0, r1, lr}
 800baec:	aa03      	add	r2, sp, #12
 800baee:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 800baf2:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 800baf4:	f7f9 f81c 	bl	8004b30 <z_shell_fprintf_fmt>
}
 800baf8:	b002      	add	sp, #8
 800bafa:	f85d eb04 	ldr.w	lr, [sp], #4
 800bafe:	b003      	add	sp, #12
 800bb00:	4770      	bx	lr

0800bb02 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
 800bb02:	6983      	ldr	r3, [r0, #24]
 800bb04:	2000      	movs	r0, #0
 800bb06:	6018      	str	r0, [r3, #0]
}
 800bb08:	4770      	bx	lr

0800bb0a <z_shell_raw_fprintf>:
{
 800bb0a:	b40e      	push	{r1, r2, r3}
 800bb0c:	b503      	push	{r0, r1, lr}
 800bb0e:	aa03      	add	r2, sp, #12
 800bb10:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 800bb14:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 800bb16:	f7f9 f80b 	bl	8004b30 <z_shell_fprintf_fmt>
}
 800bb1a:	b002      	add	sp, #8
 800bb1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb20:	b003      	add	sp, #12
 800bb22:	4770      	bx	lr

0800bb24 <cmd_bacskpace_mode_backspace>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800bb24:	6883      	ldr	r3, [r0, #8]
 800bb26:	f3bf 8f5b 	dmb	ish
 800bb2a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800bb2e:	e853 2f00 	ldrex	r2, [r3]
 800bb32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb36:	e843 2100 	strex	r1, r2, [r3]
 800bb3a:	2900      	cmp	r1, #0
 800bb3c:	d1f7      	bne.n	800bb2e <cmd_bacskpace_mode_backspace+0xa>
 800bb3e:	f3bf 8f5b 	dmb	ish
}
 800bb42:	2000      	movs	r0, #0
 800bb44:	4770      	bx	lr

0800bb46 <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800bb46:	6883      	ldr	r3, [r0, #8]
 800bb48:	f3bf 8f5b 	dmb	ish
 800bb4c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800bb50:	e853 2f00 	ldrex	r2, [r3]
 800bb54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb58:	e843 2100 	strex	r1, r2, [r3]
 800bb5c:	2900      	cmp	r1, #0
 800bb5e:	d1f7      	bne.n	800bb50 <cmd_bacskpace_mode_delete+0xa>
 800bb60:	f3bf 8f5b 	dmb	ish
}
 800bb64:	2000      	movs	r0, #0
 800bb66:	4770      	bx	lr

0800bb68 <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800bb68:	6883      	ldr	r3, [r0, #8]
 800bb6a:	f3bf 8f5b 	dmb	ish
 800bb6e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800bb72:	e853 2f00 	ldrex	r2, [r3]
 800bb76:	f022 0204 	bic.w	r2, r2, #4
 800bb7a:	e843 2100 	strex	r1, r2, [r3]
 800bb7e:	2900      	cmp	r1, #0
 800bb80:	d1f7      	bne.n	800bb72 <cmd_echo_off+0xa>
 800bb82:	f3bf 8f5b 	dmb	ish
}
 800bb86:	2000      	movs	r0, #0
 800bb88:	4770      	bx	lr

0800bb8a <cmd_colors_off>:
 800bb8a:	6883      	ldr	r3, [r0, #8]
 800bb8c:	f3bf 8f5b 	dmb	ish
 800bb90:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800bb94:	e853 2f00 	ldrex	r2, [r3]
 800bb98:	f022 0202 	bic.w	r2, r2, #2
 800bb9c:	e843 2100 	strex	r1, r2, [r3]
 800bba0:	2900      	cmp	r1, #0
 800bba2:	d1f7      	bne.n	800bb94 <cmd_colors_off+0xa>
 800bba4:	f3bf 8f5b 	dmb	ish
}
 800bba8:	2000      	movs	r0, #0
 800bbaa:	4770      	bx	lr

0800bbac <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800bbac:	6883      	ldr	r3, [r0, #8]
 800bbae:	f3bf 8f5b 	dmb	ish
 800bbb2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800bbb6:	e853 2f00 	ldrex	r2, [r3]
 800bbba:	f042 0202 	orr.w	r2, r2, #2
 800bbbe:	e843 2100 	strex	r1, r2, [r3]
 800bbc2:	2900      	cmp	r1, #0
 800bbc4:	d1f7      	bne.n	800bbb6 <cmd_colors_on+0xa>
 800bbc6:	f3bf 8f5b 	dmb	ish
}
 800bbca:	2000      	movs	r0, #0
 800bbcc:	4770      	bx	lr

0800bbce <cmd_echo_on>:
 800bbce:	6883      	ldr	r3, [r0, #8]
 800bbd0:	f3bf 8f5b 	dmb	ish
 800bbd4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800bbd8:	e853 2f00 	ldrex	r2, [r3]
 800bbdc:	f042 0204 	orr.w	r2, r2, #4
 800bbe0:	e843 2100 	strex	r1, r2, [r3]
 800bbe4:	2900      	cmp	r1, #0
 800bbe6:	d1f7      	bne.n	800bbd8 <cmd_echo_on+0xa>
 800bbe8:	f3bf 8f5b 	dmb	ish
}
 800bbec:	2000      	movs	r0, #0
 800bbee:	4770      	bx	lr

0800bbf0 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
 800bbf0:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800bbf2:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
 800bbf4:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
 800bbf6:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
 800bbfa:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800bbfc:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800bbfe:	2200      	movs	r2, #0
	node->prev = NULL;
 800bc00:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
 800bc04:	8919      	ldrh	r1, [r3, #8]
 800bc06:	895b      	ldrh	r3, [r3, #10]
 800bc08:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
 800bc0a:	310c      	adds	r1, #12
 800bc0c:	f7fe fe48 	bl	800a8a0 <ring_buf_get_finish>

	return true;
}
 800bc10:	2001      	movs	r0, #1
 800bc12:	bd08      	pop	{r3, pc}

0800bc14 <z_shell_history_mode_exit>:
	history->current = NULL;
 800bc14:	2300      	movs	r3, #0
 800bc16:	60c3      	str	r3, [r0, #12]
}
 800bc18:	4770      	bx	lr

0800bc1a <z_shell_history_get>:
{
 800bc1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1c:	461f      	mov	r7, r3
	return list->head == list;
 800bc1e:	4603      	mov	r3, r0
 800bc20:	4616      	mov	r6, r2
 800bc22:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
 800bc26:	429c      	cmp	r4, r3
 800bc28:	d102      	bne.n	800bc30 <z_shell_history_get+0x16>
		*len = 0U;
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	8038      	strh	r0, [r7, #0]
}
 800bc2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
 800bc30:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
 800bc32:	b9b1      	cbnz	r1, 800bc62 <z_shell_history_get+0x48>
		if (history->current == NULL) {
 800bc34:	2d00      	cmp	r5, #0
 800bc36:	d0f8      	beq.n	800bc2a <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
 800bc38:	42a5      	cmp	r5, r4
 800bc3a:	d102      	bne.n	800bc42 <z_shell_history_get+0x28>
	history->current = l_item;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	60c3      	str	r3, [r0, #12]
	if (l_item) {
 800bc40:	e7f3      	b.n	800bc2a <z_shell_history_get+0x10>
 800bc42:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
 800bc44:	60c4      	str	r4, [r0, #12]
	if (l_item) {
 800bc46:	2c00      	cmp	r4, #0
 800bc48:	d0ef      	beq.n	800bc2a <z_shell_history_get+0x10>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800bc4a:	8922      	ldrh	r2, [r4, #8]
 800bc4c:	f104 010c 	add.w	r1, r4, #12
 800bc50:	4630      	mov	r0, r6
 800bc52:	f001 fd41 	bl	800d6d8 <memcpy>
		*len = h_item->len;
 800bc56:	8923      	ldrh	r3, [r4, #8]
 800bc58:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	54f2      	strb	r2, [r6, r3]
		return true;
 800bc5e:	2001      	movs	r0, #1
 800bc60:	e7e5      	b.n	800bc2e <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
 800bc62:	2d00      	cmp	r5, #0
 800bc64:	d0ee      	beq.n	800bc44 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
 800bc66:	6883      	ldr	r3, [r0, #8]
 800bc68:	429d      	cmp	r5, r3
 800bc6a:	d0e7      	beq.n	800bc3c <z_shell_history_get+0x22>
 800bc6c:	682c      	ldr	r4, [r5, #0]
 800bc6e:	e7e9      	b.n	800bc44 <z_shell_history_get+0x2a>

0800bc70 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
 800bc74:	1d05      	adds	r5, r0, #4
 800bc76:	6863      	ldr	r3, [r4, #4]
 800bc78:	42ab      	cmp	r3, r5
 800bc7a:	d004      	beq.n	800bc86 <z_shell_history_purge+0x16>
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f7ff ffb7 	bl	800bbf0 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
 800bc82:	2800      	cmp	r0, #0
 800bc84:	d1f7      	bne.n	800bc76 <z_shell_history_purge+0x6>
	}
}
 800bc86:	bd38      	pop	{r3, r4, r5, pc}

0800bc88 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
 800bc88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	return buf->size;
 800bc8c:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
 800bc8e:	f102 050c 	add.w	r5, r2, #12
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 800bc92:	f1c5 0800 	rsb	r8, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 800bc96:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 800bc98:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
 800bc9c:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 800bc9e:	429d      	cmp	r5, r3
{
 800bca0:	4604      	mov	r4, r0
 800bca2:	468a      	mov	sl, r1
 800bca4:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 800bca6:	d841      	bhi.n	800bd2c <z_shell_history_put+0xa4>
	history->current = NULL;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
 800bcac:	2a00      	cmp	r2, #0
 800bcae:	d03d      	beq.n	800bd2c <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
 800bcb0:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
 800bcb4:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bcb6:	4581      	cmp	r9, r0
 800bcb8:	d12d      	bne.n	800bd16 <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
 800bcba:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
 800bcbc:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
 800bcc0:	6820      	ldr	r0, [r4, #0]
 800bcc2:	462a      	mov	r2, r5
 800bcc4:	a901      	add	r1, sp, #4
 800bcc6:	f7fe fd87 	bl	800a7d8 <ring_buf_put_claim>
		if (claim_len < total_len) {
 800bcca:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
 800bccc:	4606      	mov	r6, r0
		if (claim_len < total_len) {
 800bcce:	d930      	bls.n	800bd32 <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
 800bcd0:	6820      	ldr	r0, [r4, #0]
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	a901      	add	r1, sp, #4
 800bcd6:	f7fe fd7f 	bl	800a7d8 <ring_buf_put_claim>
			if (claim2_len == total_len) {
 800bcda:	4285      	cmp	r5, r0
 800bcdc:	d12a      	bne.n	800bd34 <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
 800bcde:	4631      	mov	r1, r6
 800bce0:	6820      	ldr	r0, [r4, #0]
 800bce2:	f7fe fd95 	bl	800a810 <ring_buf_put_finish>
				padding += claim_len;
 800bce6:	44b0      	add	r8, r6
 800bce8:	fa1f f888 	uxth.w	r8, r8
 800bcec:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
 800bcee:	9d01      	ldr	r5, [sp, #4]
 800bcf0:	4651      	mov	r1, sl
	item->len = len;
 800bcf2:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
 800bcf4:	f8a5 800a 	strh.w	r8, [r5, #10]
 800bcf8:	463a      	mov	r2, r7
 800bcfa:	f105 000c 	add.w	r0, r5, #12
 800bcfe:	f001 fceb 	bl	800d6d8 <memcpy>
	sys_dnode_t *const head = list->head;
 800bd02:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
 800bd04:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
 800bd06:	e9c5 3900 	strd	r3, r9, [r5]
 800bd0a:	4631      	mov	r1, r6
	head->prev = node;
 800bd0c:	605d      	str	r5, [r3, #4]
	list->head = node;
 800bd0e:	6065      	str	r5, [r4, #4]
 800bd10:	f7fe fd7e 	bl	800a810 <ring_buf_put_finish>
			break;
 800bd14:	e00a      	b.n	800bd2c <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
 800bd16:	9001      	str	r0, [sp, #4]
	if (l_item &&
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d0cf      	beq.n	800bcbc <z_shell_history_put+0x34>
	   (h_item->len == len) &&
 800bd1c:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d1cc      	bne.n	800bcbc <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
 800bd22:	300c      	adds	r0, #12
 800bd24:	f001 fcc8 	bl	800d6b8 <memcmp>
	   (h_item->len == len) &&
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d1c7      	bne.n	800bcbc <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
 800bd2c:	b003      	add	sp, #12
 800bd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
 800bd32:	d0dc      	beq.n	800bcee <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
 800bd34:	6820      	ldr	r0, [r4, #0]
 800bd36:	2100      	movs	r1, #0
 800bd38:	f7fe fd6a 	bl	800a810 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
 800bd3c:	6863      	ldr	r3, [r4, #4]
 800bd3e:	4599      	cmp	r9, r3
 800bd40:	d107      	bne.n	800bd52 <z_shell_history_put+0xca>
			ring_buf_reset(history->ring_buf);
 800bd42:	6823      	ldr	r3, [r4, #0]
	buf->tail = 0;
 800bd44:	e9c3 bb00 	strd	fp, fp, [r3]
__ssp_bos_icheck3(memset, void *, int)
 800bd48:	f8c3 b008 	str.w	fp, [r3, #8]
 800bd4c:	f8c3 b00c 	str.w	fp, [r3, #12]
}
 800bd50:	e7b6      	b.n	800bcc0 <z_shell_history_put+0x38>
 800bd52:	4620      	mov	r0, r4
 800bd54:	f7ff ff4c 	bl	800bbf0 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d1b1      	bne.n	800bcc0 <z_shell_history_put+0x38>
 800bd5c:	e7f1      	b.n	800bd42 <z_shell_history_put+0xba>

0800bd5e <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
 800bd5e:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
 800bd60:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
 800bd64:	2300      	movs	r3, #0
 800bd66:	60c3      	str	r3, [r0, #12]
}
 800bd68:	4770      	bx	lr

0800bd6a <msg_from_fifo.isra.0>:
{
	z_shell_print_stream(ctx, data, length);
	return length;
}

static struct log_msg *msg_from_fifo(const struct shell_log_backend *backend)
 800bd6a:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	2300      	movs	r3, #0
 800bd70:	4669      	mov	r1, sp
 800bd72:	f7fc fccd 	bl	8008710 <z_impl_k_msgq_get>
	struct shell_log_backend_msg msg;
	int err;

	err = k_msgq_get(backend->msgq, &msg, K_NO_WAIT);

	return (err == 0) ? msg.msg : NULL;
 800bd76:	b918      	cbnz	r0, 800bd80 <msg_from_fifo.isra.0+0x16>
 800bd78:	9800      	ldr	r0, [sp, #0]
}
 800bd7a:	b003      	add	sp, #12
 800bd7c:	f85d fb04 	ldr.w	pc, [sp], #4
	return (err == 0) ? msg.msg : NULL;
 800bd80:	2000      	movs	r0, #0
 800bd82:	e7fa      	b.n	800bd7a <msg_from_fifo.isra.0+0x10>

0800bd84 <put>:

	return true;
}

static void put(const struct log_backend *const backend, struct log_msg *msg)
{
 800bd84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 800bd88:	6843      	ldr	r3, [r0, #4]
 800bd8a:	681c      	ldr	r4, [r3, #0]
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			shell->ctx->internal.flags.use_colors;
 800bd8c:	68a3      	ldr	r3, [r4, #8]
	struct k_poll_signal *signal;

	log_msg_get(msg);
 800bd8e:	4608      	mov	r0, r1
			shell->ctx->internal.flags.use_colors;
 800bd90:	f8d3 625c 	ldr.w	r6, [r3, #604]	; 0x25c
{
 800bd94:	460d      	mov	r5, r1
	log_msg_get(msg);
 800bd96:	f7fe fff5 	bl	800ad84 <log_msg_get>

	switch (shell->log_backend->control_block->state) {
 800bd9a:	69e3      	ldr	r3, [r4, #28]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	791b      	ldrb	r3, [r3, #4]
 800bda0:	2b01      	cmp	r3, #1
			shell->ctx->internal.flags.use_colors;
 800bda2:	f3c6 0640 	ubfx	r6, r6, #1, #1
	switch (shell->log_backend->control_block->state) {
 800bda6:	d007      	beq.n	800bdb8 <put+0x34>
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	d04f      	beq.n	800be4c <put+0xc8>

	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		/* Discard message. */
		log_msg_put(msg);
 800bdac:	4628      	mov	r0, r5
	}
}
 800bdae:	b004      	add	sp, #16
 800bdb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		log_msg_put(msg);
 800bdb4:	f7ff b815 	b.w	800ade2 <log_msg_put>
	struct shell_log_backend_msg t_msg = {
 800bdb8:	9500      	str	r5, [sp, #0]
	return z_impl_k_uptime_ticks();
 800bdba:	f001 fa0a 	bl	800d1d2 <z_impl_k_uptime_ticks>
 800bdbe:	220a      	movs	r2, #10
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f7f4 fe73 	bl	8000aac <__aeabi_uldivmod>
			return t * (to_hz / from_hz);
 800bdc6:	260a      	movs	r6, #10
	return (uint32_t)k_uptime_get();
 800bdc8:	9001      	str	r0, [sp, #4]
		err = k_msgq_put(shell->log_backend->msgq, &t_msg,
 800bdca:	69e3      	ldr	r3, [r4, #28]
 800bdcc:	6858      	ldr	r0, [r3, #4]
 800bdce:	691b      	ldr	r3, [r3, #16]
 800bdd0:	fba3 2306 	umull	r2, r3, r3, r6
	return z_impl_k_msgq_put(msgq, data, timeout);
 800bdd4:	4669      	mov	r1, sp
 800bdd6:	f7fc fc45 	bl	8008664 <z_impl_k_msgq_put>
		switch (err) {
 800bdda:	f110 0f23 	cmn.w	r0, #35	; 0x23
 800bdde:	d00a      	beq.n	800bdf6 <put+0x72>
 800bde0:	300b      	adds	r0, #11
 800bde2:	d008      	beq.n	800bdf6 <put+0x72>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
 800bde4:	68a0      	ldr	r0, [r4, #8]
 800bde6:	f500 701c 	add.w	r0, r0, #624	; 0x270
	return z_impl_k_poll_signal_raise(sig, result);
 800bdea:	2100      	movs	r1, #0
}
 800bdec:	b004      	add	sp, #16
 800bdee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf2:	f7fd bc15 	b.w	8009620 <z_impl_k_poll_signal_raise>
	struct k_msgq *msgq = shell->log_backend->msgq;
 800bdf6:	69e3      	ldr	r3, [r4, #28]
 800bdf8:	685f      	ldr	r7, [r3, #4]
	uint32_t timeout = shell->log_backend->timeout;
 800bdfa:	f8d3 8010 	ldr.w	r8, [r3, #16]
	return z_impl_k_uptime_ticks();
 800bdfe:	f001 f9e8 	bl	800d1d2 <z_impl_k_uptime_ticks>
			return t / (from_hz / to_hz);
 800be02:	220a      	movs	r2, #10
 800be04:	2300      	movs	r3, #0
 800be06:	f7f4 fe51 	bl	8000aac <__aeabi_uldivmod>
 800be0a:	4605      	mov	r5, r0
	return z_impl_k_msgq_peek(msgq, data);
 800be0c:	a902      	add	r1, sp, #8
 800be0e:	4638      	mov	r0, r7
 800be10:	f000 ffe2 	bl	800cdd8 <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
 800be14:	2800      	cmp	r0, #0
 800be16:	d1d8      	bne.n	800bdca <put+0x46>
 800be18:	9b03      	ldr	r3, [sp, #12]
 800be1a:	1aeb      	subs	r3, r5, r3
 800be1c:	4598      	cmp	r8, r3
 800be1e:	d2d4      	bcs.n	800bdca <put+0x46>
	return z_impl_k_msgq_get(msgq, data, timeout);
 800be20:	2300      	movs	r3, #0
 800be22:	2200      	movs	r2, #0
 800be24:	a902      	add	r1, sp, #8
 800be26:	4638      	mov	r0, r7
 800be28:	f7fc fc72 	bl	8008710 <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
 800be2c:	9802      	ldr	r0, [sp, #8]
 800be2e:	f7fe ffd8 	bl	800ade2 <log_msg_put>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800be32:	69a3      	ldr	r3, [r4, #24]
 800be34:	f3bf 8f5b 	dmb	ish
 800be38:	e853 2f00 	ldrex	r2, [r3]
 800be3c:	3201      	adds	r2, #1
 800be3e:	e843 2100 	strex	r1, r2, [r3]
 800be42:	2900      	cmp	r1, #0
 800be44:	d1f8      	bne.n	800be38 <put+0xb4>
 800be46:	f3bf 8f5b 	dmb	ish
		err = k_msgq_peek(msgq, &msg);
 800be4a:	e7df      	b.n	800be0c <put+0x88>
		z_shell_cmd_line_erase(shell);
 800be4c:	4620      	mov	r0, r4
 800be4e:	f7ff fcfc 	bl	800b84a <z_shell_cmd_line_erase>
		msg_process(shell->log_backend->log_output, msg, colors);
 800be52:	69e3      	ldr	r3, [r4, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
 800be54:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
 800be56:	6898      	ldr	r0, [r3, #8]
 800be58:	bf0c      	ite	eq
 800be5a:	220e      	moveq	r2, #14
 800be5c:	220f      	movne	r2, #15
 800be5e:	4629      	mov	r1, r5
 800be60:	f7f7 fb20 	bl	80034a4 <log_output_msg_process>
	log_msg_put(msg);
 800be64:	e7a2      	b.n	800bdac <put+0x28>

0800be66 <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 800be66:	6843      	ldr	r3, [r0, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
 800be6e:	f3bf 8f5b 	dmb	ish
 800be72:	e853 0f00 	ldrex	r0, [r3]
 800be76:	4408      	add	r0, r1
 800be78:	e843 0c00 	strex	ip, r0, [r3]
 800be7c:	f1bc 0f00 	cmp.w	ip, #0
 800be80:	d1f7      	bne.n	800be72 <dropped+0xc>
 800be82:	f3bf 8f5b 	dmb	ish
 800be86:	68d3      	ldr	r3, [r2, #12]
 800be88:	f3bf 8f5b 	dmb	ish
 800be8c:	e853 2f00 	ldrex	r2, [r3]
 800be90:	440a      	add	r2, r1
 800be92:	e843 2000 	strex	r0, r2, [r3]
 800be96:	2800      	cmp	r0, #0
 800be98:	d1f8      	bne.n	800be8c <dropped+0x26>
 800be9a:	f3bf 8f5b 	dmb	ish
	const struct shell_log_backend *log_backend = shell->log_backend;

	atomic_add(&shell->stats->log_lost_cnt, cnt);
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
 800be9e:	4770      	bx	lr

0800bea0 <z_shell_log_backend_output_func>:
{
 800bea0:	b510      	push	{r4, lr}
 800bea2:	4613      	mov	r3, r2
 800bea4:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
 800bea6:	460a      	mov	r2, r1
 800bea8:	4601      	mov	r1, r0
 800beaa:	4618      	mov	r0, r3
 800beac:	f7ff fd26 	bl	800b8fc <z_shell_print_stream>
}
 800beb0:	4620      	mov	r0, r4
 800beb2:	bd10      	pop	{r4, pc}

0800beb4 <z_shell_log_backend_enable>:
{
 800beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb6:	4604      	mov	r4, r0
 800beb8:	460e      	mov	r6, r1
 800beba:	4617      	mov	r7, r2
		while ((msg = msg_from_fifo(backend)) != NULL) {
 800bebc:	6860      	ldr	r0, [r4, #4]
 800bebe:	f7ff ff54 	bl	800bd6a <msg_from_fifo.isra.0>
 800bec2:	4605      	mov	r5, r0
 800bec4:	b960      	cbnz	r0, 800bee0 <z_shell_log_backend_enable+0x2c>
		log_backend_enable(backend->backend, ctx, init_log_level);
 800bec6:	463a      	mov	r2, r7
 800bec8:	6820      	ldr	r0, [r4, #0]
 800beca:	4631      	mov	r1, r6
 800becc:	f7f6 ff0a 	bl	8002ce4 <log_backend_enable>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
 800bed0:	68a3      	ldr	r3, [r4, #8]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	605e      	str	r6, [r3, #4]
		backend->control_block->dropped_cnt = 0;
 800bed6:	68e3      	ldr	r3, [r4, #12]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
 800bed8:	2201      	movs	r2, #1
 800beda:	711a      	strb	r2, [r3, #4]
		backend->control_block->dropped_cnt = 0;
 800bedc:	601d      	str	r5, [r3, #0]
}
 800bede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			log_msg_put(msg);
 800bee0:	f7fe ff7f 	bl	800ade2 <log_msg_put>
 800bee4:	e7ea      	b.n	800bebc <z_shell_log_backend_enable+0x8>

0800bee6 <z_shell_log_backend_disable>:
{
 800bee6:	b510      	push	{r4, lr}
 800bee8:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
 800beea:	6800      	ldr	r0, [r0, #0]
 800beec:	f7fe fe86 	bl	800abfc <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
 800bef0:	68e3      	ldr	r3, [r4, #12]
 800bef2:	2202      	movs	r2, #2
 800bef4:	711a      	strb	r2, [r3, #4]
}
 800bef6:	bd10      	pop	{r4, pc}

0800bef8 <z_shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
 800bef8:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
 800befa:	685b      	ldr	r3, [r3, #4]
{
 800befc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct shell *shell =
 800befe:	681e      	ldr	r6, [r3, #0]
			shell->ctx->internal.flags.use_colors;
 800bf00:	68b3      	ldr	r3, [r6, #8]
 800bf02:	f8d3 525c 	ldr.w	r5, [r3, #604]	; 0x25c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800bf06:	68c3      	ldr	r3, [r0, #12]
 800bf08:	f3bf 8f5b 	dmb	ish
{
 800bf0c:	4604      	mov	r4, r0
			shell->ctx->internal.flags.use_colors;
 800bf0e:	f3c5 0540 	ubfx	r5, r5, #1, #1
 800bf12:	2200      	movs	r2, #0
 800bf14:	e853 7f00 	ldrex	r7, [r3]
 800bf18:	e843 2100 	strex	r1, r2, [r3]
 800bf1c:	2900      	cmp	r1, #0
 800bf1e:	d1f9      	bne.n	800bf14 <z_shell_log_backend_process+0x1c>
 800bf20:	f3bf 8f5b 	dmb	ish
	if (dropped) {
 800bf24:	b18f      	cbz	r7, 800bf4a <z_shell_log_backend_process+0x52>
		if (colors) {
 800bf26:	b13d      	cbz	r5, 800bf38 <z_shell_log_backend_process+0x40>
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
 800bf28:	68b3      	ldr	r3, [r6, #8]
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
 800bf2a:	2102      	movs	r1, #2
 800bf2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf2e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800bf32:	4630      	mov	r0, r6
 800bf34:	f7f8 ffd2 	bl	8004edc <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
 800bf38:	68a0      	ldr	r0, [r4, #8]
 800bf3a:	4639      	mov	r1, r7
 800bf3c:	f7f7 fb2e 	bl	800359c <log_output_dropped_process>
		if (colors) {
 800bf40:	b11d      	cbz	r5, 800bf4a <z_shell_log_backend_process+0x52>
			z_shell_vt100_colors_restore(shell, &col);
 800bf42:	a901      	add	r1, sp, #4
 800bf44:	4630      	mov	r0, r6
 800bf46:	f7f8 ffff 	bl	8004f48 <z_shell_vt100_colors_restore>
	struct log_msg *msg = msg_from_fifo(backend);
 800bf4a:	6860      	ldr	r0, [r4, #4]
 800bf4c:	f7ff ff0d 	bl	800bd6a <msg_from_fifo.isra.0>
	if (!msg) {
 800bf50:	4604      	mov	r4, r0
 800bf52:	b168      	cbz	r0, 800bf70 <z_shell_log_backend_process+0x78>
	msg_process(shell->log_backend->log_output, msg, colors);
 800bf54:	69f3      	ldr	r3, [r6, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
 800bf56:	2d00      	cmp	r5, #0
	log_output_msg_process(log_output, msg, flags);
 800bf58:	4601      	mov	r1, r0
 800bf5a:	bf08      	it	eq
 800bf5c:	220e      	moveq	r2, #14
 800bf5e:	6898      	ldr	r0, [r3, #8]
 800bf60:	bf18      	it	ne
 800bf62:	220f      	movne	r2, #15
 800bf64:	f7f7 fa9e 	bl	80034a4 <log_output_msg_process>
	log_msg_put(msg);
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f7fe ff3a 	bl	800ade2 <log_msg_put>
	return true;
 800bf6e:	2001      	movs	r0, #1
}
 800bf70:	b003      	add	sp, #12
 800bf72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf74 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 800bf74:	6843      	ldr	r3, [r0, #4]
{
 800bf76:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 800bf78:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
 800bf7a:	6860      	ldr	r0, [r4, #4]
 800bf7c:	6803      	ldr	r3, [r0, #0]
 800bf7e:	2101      	movs	r1, #1
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	4798      	blx	r3
	if (err == 0) {
 800bf84:	b9d0      	cbnz	r0, 800bfbc <panic+0x48>
		shell->log_backend->control_block->state =
 800bf86:	69e3      	ldr	r3, [r4, #28]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	2203      	movs	r2, #3
 800bf8c:	711a      	strb	r2, [r3, #4]
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
 800bf8e:	68a0      	ldr	r0, [r4, #8]
 800bf90:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800bf92:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
 800bf94:	3020      	adds	r0, #32
 800bf96:	f7ff faeb 	bl	800b570 <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
 800bf9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f7f8 ff3a 	bl	8004e18 <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
 800bfa4:	68a3      	ldr	r3, [r4, #8]
 800bfa6:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	4249      	negs	r1, r1
 800bfac:	f7f8 ff44 	bl	8004e38 <z_shell_op_cursor_horiz_move>
			while (z_shell_log_backend_process(
 800bfb0:	69e0      	ldr	r0, [r4, #28]
 800bfb2:	f7ff ffa1 	bl	800bef8 <z_shell_log_backend_process>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d1fa      	bne.n	800bfb0 <panic+0x3c>
}
 800bfba:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
 800bfbc:	69e0      	ldr	r0, [r4, #28]
}
 800bfbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
 800bfc2:	f7ff bf90 	b.w	800bee6 <z_shell_log_backend_disable>

0800bfc6 <z_shell_has_wildcard>:
{
 800bfc6:	b510      	push	{r4, lr}
 800bfc8:	4604      	mov	r4, r0
 800bfca:	b908      	cbnz	r0, 800bfd0 <z_shell_has_wildcard+0xa>
	return false;
 800bfcc:	2000      	movs	r0, #0
}
 800bfce:	bd10      	pop	{r4, pc}
 800bfd0:	f7f4 fefc 	bl	8000dcc <strlen>
	for (size_t i = 0; i < str_len; i++) {
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	b280      	uxth	r0, r0
 800bfd8:	4283      	cmp	r3, r0
 800bfda:	d2f7      	bcs.n	800bfcc <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
 800bfdc:	5ce2      	ldrb	r2, [r4, r3]
 800bfde:	2a3f      	cmp	r2, #63	; 0x3f
 800bfe0:	d003      	beq.n	800bfea <z_shell_has_wildcard+0x24>
 800bfe2:	2a2a      	cmp	r2, #42	; 0x2a
 800bfe4:	d001      	beq.n	800bfea <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	e7f6      	b.n	800bfd8 <z_shell_has_wildcard+0x12>
			return true;
 800bfea:	2001      	movs	r0, #1
 800bfec:	e7ef      	b.n	800bfce <z_shell_has_wildcard+0x8>

0800bfee <z_shell_wildcard_prepare>:
{
 800bfee:	b510      	push	{r4, lr}
 800bff0:	4604      	mov	r4, r0
 800bff2:	6880      	ldr	r0, [r0, #8]
 800bff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bff8:	2100      	movs	r1, #0
 800bffa:	f500 709f 	add.w	r0, r0, #318	; 0x13e
 800bffe:	f001 fb93 	bl	800d728 <memset>
	memcpy(shell->ctx->temp_buff,
 800c002:	68a0      	ldr	r0, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800c004:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800c006:	f100 013e 	add.w	r1, r0, #62	; 0x3e
 800c00a:	f500 709f 	add.w	r0, r0, #318	; 0x13e
 800c00e:	f001 fb63 	bl	800d6d8 <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
 800c012:	68a0      	ldr	r0, [r4, #8]
 800c014:	f500 709f 	add.w	r0, r0, #318	; 0x13e
 800c018:	f7f8 fe80 	bl	8004d1c <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
 800c01c:	68a3      	ldr	r3, [r4, #8]
 800c01e:	f513 709f 	adds.w	r0, r3, #318	; 0x13e
 800c022:	d006      	beq.n	800c032 <z_shell_wildcard_prepare+0x44>
 800c024:	f7f4 fed2 	bl	8000dcc <strlen>
 800c028:	b283      	uxth	r3, r0
 800c02a:	68a2      	ldr	r2, [r4, #8]
 800c02c:	3301      	adds	r3, #1
 800c02e:	8793      	strh	r3, [r2, #60]	; 0x3c
}
 800c030:	bd10      	pop	{r4, pc}
 800c032:	4603      	mov	r3, r0
 800c034:	e7f9      	b.n	800c02a <z_shell_wildcard_prepare+0x3c>

0800c036 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
 800c036:	b510      	push	{r4, lr}
 800c038:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
 800c03a:	6880      	ldr	r0, [r0, #8]
 800c03c:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800c03e:	f500 719f 	add.w	r1, r0, #318	; 0x13e
 800c042:	303e      	adds	r0, #62	; 0x3e
 800c044:	f001 fb48 	bl	800d6d8 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
 800c048:	68a3      	ldr	r3, [r4, #8]
 800c04a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800c04c:	871a      	strh	r2, [r3, #56]	; 0x38
}
 800c04e:	bd10      	pop	{r4, pc}

0800c050 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800c050:	2200      	movs	r2, #0
{
 800c052:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 800c054:	4611      	mov	r1, r2
 800c056:	2006      	movs	r0, #6
 800c058:	f7f9 ff96 	bl	8005f88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800c05c:	2200      	movs	r2, #0
 800c05e:	4611      	mov	r1, r2
 800c060:	2007      	movs	r0, #7
 800c062:	f7f9 ff91 	bl	8005f88 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800c066:	2200      	movs	r2, #0
 800c068:	4611      	mov	r1, r2
 800c06a:	2008      	movs	r0, #8
 800c06c:	f7f9 ff8c 	bl	8005f88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800c070:	2200      	movs	r2, #0
 800c072:	4611      	mov	r1, r2
 800c074:	2009      	movs	r0, #9
 800c076:	f7f9 ff87 	bl	8005f88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800c07a:	2200      	movs	r2, #0
 800c07c:	4611      	mov	r1, r2
 800c07e:	200a      	movs	r0, #10
 800c080:	f7f9 ff82 	bl	8005f88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800c084:	2200      	movs	r2, #0
 800c086:	4611      	mov	r1, r2
 800c088:	2017      	movs	r0, #23
 800c08a:	f7f9 ff7d 	bl	8005f88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800c08e:	2200      	movs	r2, #0
 800c090:	4611      	mov	r1, r2
 800c092:	2028      	movs	r0, #40	; 0x28
 800c094:	f7f9 ff78 	bl	8005f88 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 800c098:	2200      	movs	r2, #0
 800c09a:	4611      	mov	r1, r2
 800c09c:	2001      	movs	r0, #1
 800c09e:	f7f9 ff73 	bl	8005f88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	202a      	movs	r0, #42	; 0x2a
 800c0a8:	f7f9 ff6e 	bl	8005f88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	2002      	movs	r0, #2
 800c0b2:	f7f9 ff69 	bl	8005f88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	4611      	mov	r1, r2
 800c0ba:	2003      	movs	r0, #3
 800c0bc:	f7f9 ff64 	bl	8005f88 <z_arm_irq_priority_set>
}
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	bd08      	pop	{r3, pc}

0800c0c4 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 800c0c4:	6902      	ldr	r2, [r0, #16]
 800c0c6:	2117      	movs	r1, #23
 800c0c8:	2016      	movs	r0, #22
 800c0ca:	f7f9 bc33 	b.w	8005934 <__stm32_exti_isr.isra.0>

0800c0ce <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 800c0ce:	6902      	ldr	r2, [r0, #16]
 800c0d0:	2116      	movs	r1, #22
 800c0d2:	2015      	movs	r0, #21
 800c0d4:	f7f9 bc2e 	b.w	8005934 <__stm32_exti_isr.isra.0>

0800c0d8 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 800c0d8:	6902      	ldr	r2, [r0, #16]
 800c0da:	2113      	movs	r1, #19
 800c0dc:	2012      	movs	r0, #18
 800c0de:	f7f9 bc29 	b.w	8005934 <__stm32_exti_isr.isra.0>

0800c0e2 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 800c0e2:	6902      	ldr	r2, [r0, #16]
 800c0e4:	2111      	movs	r1, #17
 800c0e6:	2010      	movs	r0, #16
 800c0e8:	f7f9 bc24 	b.w	8005934 <__stm32_exti_isr.isra.0>

0800c0ec <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 800c0ec:	6902      	ldr	r2, [r0, #16]
 800c0ee:	2110      	movs	r1, #16
 800c0f0:	200a      	movs	r0, #10
 800c0f2:	f7f9 bc1f 	b.w	8005934 <__stm32_exti_isr.isra.0>

0800c0f6 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 800c0f6:	6902      	ldr	r2, [r0, #16]
 800c0f8:	210a      	movs	r1, #10
 800c0fa:	2005      	movs	r0, #5
 800c0fc:	f7f9 bc1a 	b.w	8005934 <__stm32_exti_isr.isra.0>

0800c100 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 800c100:	6902      	ldr	r2, [r0, #16]
 800c102:	2105      	movs	r1, #5
 800c104:	2004      	movs	r0, #4
 800c106:	f7f9 bc15 	b.w	8005934 <__stm32_exti_isr.isra.0>

0800c10a <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 800c10a:	6902      	ldr	r2, [r0, #16]
 800c10c:	2104      	movs	r1, #4
 800c10e:	2003      	movs	r0, #3
 800c110:	f7f9 bc10 	b.w	8005934 <__stm32_exti_isr.isra.0>

0800c114 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 800c114:	6902      	ldr	r2, [r0, #16]
 800c116:	2103      	movs	r1, #3
 800c118:	2002      	movs	r0, #2
 800c11a:	f7f9 bc0b 	b.w	8005934 <__stm32_exti_isr.isra.0>

0800c11e <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 800c11e:	6902      	ldr	r2, [r0, #16]
 800c120:	2102      	movs	r1, #2
 800c122:	2001      	movs	r0, #1
 800c124:	f7f9 bc06 	b.w	8005934 <__stm32_exti_isr.isra.0>

0800c128 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 800c128:	6902      	ldr	r2, [r0, #16]
 800c12a:	2101      	movs	r1, #1
 800c12c:	2000      	movs	r0, #0
 800c12e:	f7f9 bc01 	b.w	8005934 <__stm32_exti_isr.isra.0>

0800c132 <config_pll_init>:
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 800c132:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800c136:	2208      	movs	r2, #8
 800c138:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(STM32_PLL_P_DIVISOR);
 800c13c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c140:	6083      	str	r3, [r0, #8]
}
 800c142:	4770      	bx	lr

0800c144 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 800c144:	4770      	bx	lr

0800c146 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800c146:	2100      	movs	r1, #0
 800c148:	2001      	movs	r0, #1
 800c14a:	f7f9 bffd 	b.w	8006148 <z_arm_fatal_error>

0800c14e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800c14e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800c150:	6800      	ldr	r0, [r0, #0]
 800c152:	f7f9 bff9 	b.w	8006148 <z_arm_fatal_error>

0800c156 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 800c156:	b508      	push	{r3, lr}
	handler();
 800c158:	f7fa f884 	bl	8006264 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 800c15c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800c160:	f7fa bbbe 	b.w	80068e0 <z_arm_exc_exit>

0800c164 <_stdout_hook_default>:
}
 800c164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c168:	4770      	bx	lr

0800c16a <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 800c16a:	f7fb bf77 	b.w	800805c <z_impl_z_errno>

0800c16e <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c16e:	6843      	ldr	r3, [r0, #4]
 800c170:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800c172:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800c174:	600b      	str	r3, [r1, #0]
}
 800c176:	2000      	movs	r0, #0
 800c178:	4770      	bx	lr

0800c17a <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c17a:	6843      	ldr	r3, [r0, #4]
 800c17c:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800c17e:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800c180:	4042      	eors	r2, r0
 800c182:	400a      	ands	r2, r1
 800c184:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800c186:	615a      	str	r2, [r3, #20]
}
 800c188:	2000      	movs	r0, #0
 800c18a:	4770      	bx	lr

0800c18c <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c18c:	6843      	ldr	r3, [r0, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
}
 800c190:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 800c192:	6199      	str	r1, [r3, #24]
}
 800c194:	4770      	bx	lr

0800c196 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c196:	6843      	ldr	r3, [r0, #4]
 800c198:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800c19a:	0409      	lsls	r1, r1, #16
 800c19c:	6199      	str	r1, [r3, #24]
}
 800c19e:	2000      	movs	r0, #0
 800c1a0:	4770      	bx	lr

0800c1a2 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c1a2:	6843      	ldr	r3, [r0, #4]
 800c1a4:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800c1a6:	6953      	ldr	r3, [r2, #20]
 800c1a8:	4059      	eors	r1, r3
 800c1aa:	6151      	str	r1, [r2, #20]
}
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	4770      	bx	lr

0800c1b0 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->data;
 800c1b0:	6903      	ldr	r3, [r0, #16]
	return list->head;
 800c1b2:	6898      	ldr	r0, [r3, #8]
{
 800c1b4:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 800c1b6:	b158      	cbz	r0, 800c1d0 <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800c1b8:	2400      	movs	r4, #0
 800c1ba:	4281      	cmp	r1, r0
 800c1bc:	d112      	bne.n	800c1e4 <gpio_stm32_manage_callback+0x34>
	return node->next;
 800c1be:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 800c1c0:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 800c1c2:	b954      	cbnz	r4, 800c1da <gpio_stm32_manage_callback+0x2a>
 800c1c4:	428d      	cmp	r5, r1
	list->head = node;
 800c1c6:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 800c1c8:	d100      	bne.n	800c1cc <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 800c1ca:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 800c1d0:	b96a      	cbnz	r2, 800c1ee <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 800c1d2:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 800c1d4:	bd30      	pop	{r4, r5, pc}
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	e7ef      	b.n	800c1ba <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 800c1da:	428d      	cmp	r5, r1
	parent->next = child;
 800c1dc:	6020      	str	r0, [r4, #0]
	list->tail = node;
 800c1de:	bf08      	it	eq
 800c1e0:	60dc      	streq	r4, [r3, #12]
}
 800c1e2:	e7f3      	b.n	800c1cc <gpio_stm32_manage_callback+0x1c>
	return node->next;
 800c1e4:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	2d00      	cmp	r5, #0
 800c1ea:	d1f4      	bne.n	800c1d6 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 800c1ec:	b13a      	cbz	r2, 800c1fe <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 800c1ee:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 800c1f0:	689a      	ldr	r2, [r3, #8]
 800c1f2:	600a      	str	r2, [r1, #0]
	list->head = node;
 800c1f4:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d1eb      	bne.n	800c1d2 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 800c1fa:	60d9      	str	r1, [r3, #12]
}
 800c1fc:	e7ea      	b.n	800c1d4 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 800c1fe:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 800c202:	e7e7      	b.n	800c1d4 <gpio_stm32_manage_callback+0x24>

0800c204 <gpio_stm32_isr>:
{
 800c204:	460b      	mov	r3, r1
 800c206:	6889      	ldr	r1, [r1, #8]
 800c208:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800c20a:	b171      	cbz	r1, 800c22a <gpio_stm32_isr+0x26>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800c20c:	685e      	ldr	r6, [r3, #4]
	return node->next;
 800c20e:	680c      	ldr	r4, [r1, #0]
 800c210:	2301      	movs	r3, #1
 800c212:	fa03 f500 	lsl.w	r5, r3, r0
		if (cb->pin_mask & pins) {
 800c216:	688a      	ldr	r2, [r1, #8]
 800c218:	402a      	ands	r2, r5
 800c21a:	d002      	beq.n	800c222 <gpio_stm32_isr+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800c21c:	684b      	ldr	r3, [r1, #4]
 800c21e:	4630      	mov	r0, r6
 800c220:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800c222:	b114      	cbz	r4, 800c22a <gpio_stm32_isr+0x26>
 800c224:	4621      	mov	r1, r4
 800c226:	6824      	ldr	r4, [r4, #0]
 800c228:	e7f5      	b.n	800c216 <gpio_stm32_isr+0x12>
}
 800c22a:	bd70      	pop	{r4, r5, r6, pc}

0800c22c <gpio_stm32_configure>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c22c:	6840      	ldr	r0, [r0, #4]
{
 800c22e:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c230:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800c232:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c234:	6867      	ldr	r7, [r4, #4]
 800c236:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800c238:	f3c2 1680 	ubfx	r6, r2, #6, #1
 800c23c:	ea27 0700 	bic.w	r7, r7, r0
 800c240:	408e      	lsls	r6, r1
 800c242:	433e      	orrs	r6, r7
 800c244:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c246:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 800c24a:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800c24e:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800c252:	f04f 0e03 	mov.w	lr, #3
 800c256:	007f      	lsls	r7, r7, #1
 800c258:	fa0e f707 	lsl.w	r7, lr, r7
 800c25c:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c260:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 800c264:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800c268:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 800c26c:	007f      	lsls	r7, r7, #1
 800c26e:	40be      	lsls	r6, r7
 800c270:	ea46 060c 	orr.w	r6, r6, ip
 800c274:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c276:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 800c27a:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c27e:	68e7      	ldr	r7, [r4, #12]
 800c280:	0076      	lsls	r6, r6, #1
 800c282:	fa0e f606 	lsl.w	r6, lr, r6
 800c286:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c28a:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 800c28e:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800c292:	f002 0530 	and.w	r5, r2, #48	; 0x30
 800c296:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800c298:	f3c2 2241 	ubfx	r2, r2, #9, #2
 800c29c:	40b2      	lsls	r2, r6
 800c29e:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 800c2a0:	2d20      	cmp	r5, #32
 800c2a2:	60e2      	str	r2, [r4, #12]
 800c2a4:	d115      	bne.n	800c2d2 <gpio_stm32_configure+0xa6>
		if (pin < 8) {
 800c2a6:	2907      	cmp	r1, #7
 800c2a8:	dc2c      	bgt.n	800c304 <gpio_stm32_configure+0xd8>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2aa:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c2ae:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 800c2b0:	b332      	cbz	r2, 800c300 <gpio_stm32_configure+0xd4>
  return __builtin_clz(value);
 800c2b2:	fab2 f282 	clz	r2, r2
 800c2b6:	0092      	lsls	r2, r2, #2
 800c2b8:	260f      	movs	r6, #15
 800c2ba:	fa06 f202 	lsl.w	r2, r6, r2
 800c2be:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2c2:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 800c2c6:	fab2 f282 	clz	r2, r2
 800c2ca:	0092      	lsls	r2, r2, #2
 800c2cc:	4093      	lsls	r3, r2
 800c2ce:	430b      	orrs	r3, r1
 800c2d0:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2d2:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800c2d6:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c2da:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2dc:	fa90 f0a0 	rbit	r0, r0
 800c2e0:	2103      	movs	r1, #3
 800c2e2:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 800c2e4:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800c2e8:	092d      	lsrs	r5, r5, #4
 800c2ea:	fa01 f303 	lsl.w	r3, r1, r3
 800c2ee:	0040      	lsls	r0, r0, #1
 800c2f0:	ea22 0303 	bic.w	r3, r2, r3
 800c2f4:	fa05 f000 	lsl.w	r0, r5, r0
 800c2f8:	4318      	orrs	r0, r3
 800c2fa:	6020      	str	r0, [r4, #0]
}
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800c300:	462a      	mov	r2, r5
 800c302:	e7d8      	b.n	800c2b6 <gpio_stm32_configure+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c304:	0a02      	lsrs	r2, r0, #8
 800c306:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c308:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800c30c:	b181      	cbz	r1, 800c330 <gpio_stm32_configure+0x104>
  return __builtin_clz(value);
 800c30e:	fab1 f181 	clz	r1, r1
 800c312:	0089      	lsls	r1, r1, #2
 800c314:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c316:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800c31a:	fab2 f282 	clz	r2, r2
 800c31e:	fa07 f101 	lsl.w	r1, r7, r1
 800c322:	0092      	lsls	r2, r2, #2
 800c324:	ea26 0101 	bic.w	r1, r6, r1
 800c328:	4093      	lsls	r3, r2
 800c32a:	430b      	orrs	r3, r1
 800c32c:	6263      	str	r3, [r4, #36]	; 0x24
}
 800c32e:	e7d0      	b.n	800c2d2 <gpio_stm32_configure+0xa6>
    return 32U;
 800c330:	4629      	mov	r1, r5
 800c332:	e7ee      	b.n	800c312 <gpio_stm32_configure+0xe6>

0800c334 <gpio_stm32_config>:
	if ((flags & GPIO_OUTPUT) != 0) {
 800c334:	0593      	lsls	r3, r2, #22
{
 800c336:	b570      	push	{r4, r5, r6, lr}
 800c338:	4605      	mov	r5, r0
 800c33a:	460e      	mov	r6, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 800c33c:	d519      	bpl.n	800c372 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800c33e:	0794      	lsls	r4, r2, #30
 800c340:	d510      	bpl.n	800c364 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800c342:	0750      	lsls	r0, r2, #29
 800c344:	d531      	bpl.n	800c3aa <gpio_stm32_config+0x76>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800c346:	2450      	movs	r4, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 800c348:	06d1      	lsls	r1, r2, #27
 800c34a:	d50d      	bpl.n	800c368 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800c34c:	f444 7400 	orr.w	r4, r4, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800c350:	0513      	lsls	r3, r2, #20
 800c352:	d41f      	bmi.n	800c394 <gpio_stm32_config+0x60>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800c354:	0552      	lsls	r2, r2, #21
 800c356:	d515      	bpl.n	800c384 <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800c358:	2101      	movs	r1, #1
 800c35a:	40b1      	lsls	r1, r6
 800c35c:	4628      	mov	r0, r5
 800c35e:	f7ff ff1a 	bl	800c196 <gpio_stm32_port_clear_bits_raw>
 800c362:	e00f      	b.n	800c384 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800c364:	2410      	movs	r4, #16
 800c366:	e7ef      	b.n	800c348 <gpio_stm32_config+0x14>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800c368:	0693      	lsls	r3, r2, #26
 800c36a:	d5f1      	bpl.n	800c350 <gpio_stm32_config+0x1c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800c36c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
	if (err != 0) {
 800c370:	e7ee      	b.n	800c350 <gpio_stm32_config+0x1c>
	} else if  ((flags & GPIO_INPUT) != 0) {
 800c372:	05d0      	lsls	r0, r2, #23
 800c374:	d514      	bpl.n	800c3a0 <gpio_stm32_config+0x6c>
		if ((flags & GPIO_PULL_UP) != 0) {
 800c376:	06d1      	lsls	r1, r2, #27
 800c378:	d414      	bmi.n	800c3a4 <gpio_stm32_config+0x70>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800c37a:	f012 0420 	ands.w	r4, r2, #32
 800c37e:	bf18      	it	ne
 800c380:	f44f 6480 	movne.w	r4, #1024	; 0x400
	gpio_stm32_configure(dev, pin, pincfg, 0);
 800c384:	2300      	movs	r3, #0
 800c386:	4622      	mov	r2, r4
 800c388:	4631      	mov	r1, r6
 800c38a:	4628      	mov	r0, r5
 800c38c:	f7ff ff4e 	bl	800c22c <gpio_stm32_configure>
 800c390:	2000      	movs	r0, #0
}
 800c392:	bd70      	pop	{r4, r5, r6, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c394:	686a      	ldr	r2, [r5, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800c396:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c398:	6852      	ldr	r2, [r2, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800c39a:	40b3      	lsls	r3, r6
	WRITE_REG(gpio->BSRR, pins);
 800c39c:	6193      	str	r3, [r2, #24]
	return 0;
 800c39e:	e7f1      	b.n	800c384 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800c3a0:	2430      	movs	r4, #48	; 0x30
 800c3a2:	e7ef      	b.n	800c384 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800c3a4:	f44f 7400 	mov.w	r4, #512	; 0x200
 800c3a8:	e7ec      	b.n	800c384 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 800c3aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return err;
 800c3ae:	e7f0      	b.n	800c392 <gpio_stm32_config+0x5e>

0800c3b0 <gpio_stm32_init>:
 */
static int gpio_stm32_init(const struct device *dev)
{
	struct gpio_stm32_data *data = dev->data;

	data->dev = dev;
 800c3b0:	6902      	ldr	r2, [r0, #16]
	return 0;
#else
#ifdef CONFIG_PM_DEVICE
	data->power_state = PM_DEVICE_STATE_ACTIVE;
#endif
	return gpio_stm32_clock_request(dev, true);
 800c3b2:	2101      	movs	r1, #1
	data->dev = dev;
 800c3b4:	6050      	str	r0, [r2, #4]
	return gpio_stm32_clock_request(dev, true);
 800c3b6:	f7fa bc71 	b.w	8006c9c <gpio_stm32_clock_request>

0800c3ba <i2c_transfer>:
}


extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
 800c3ba:	b410      	push	{r4}
 800c3bc:	6884      	ldr	r4, [r0, #8]
 800c3be:	6864      	ldr	r4, [r4, #4]
 800c3c0:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
 800c3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3c6:	4760      	bx	ip

0800c3c8 <handle_txe>:
{
 800c3c8:	4603      	mov	r3, r0
	struct i2c_stm32_data *data = DEV_DATA(dev);
 800c3ca:	6900      	ldr	r0, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c3cc:	685b      	ldr	r3, [r3, #4]
	if (data->current.len) {
 800c3ce:	6d42      	ldr	r2, [r0, #84]	; 0x54
	I2C_TypeDef *i2c = cfg->i2c;
 800c3d0:	68db      	ldr	r3, [r3, #12]
{
 800c3d2:	b410      	push	{r4}
	if (data->current.len) {
 800c3d4:	b192      	cbz	r2, 800c3fc <handle_txe+0x34>
		data->current.len--;
 800c3d6:	3a01      	subs	r2, #1
 800c3d8:	6542      	str	r2, [r0, #84]	; 0x54
		if (data->current.len == 0U) {
 800c3da:	b91a      	cbnz	r2, 800c3e4 <handle_txe+0x1c>
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_BUF(I2C_TypeDef *I2Cx)
{
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3e2:	605a      	str	r2, [r3, #4]
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 800c3e4:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800c3e6:	691a      	ldr	r2, [r3, #16]
 800c3e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3ec:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c3f0:	4322      	orrs	r2, r4
 800c3f2:	611a      	str	r2, [r3, #16]
}
 800c3f4:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->current.buf++;
 800c3f8:	6581      	str	r1, [r0, #88]	; 0x58
}
 800c3fa:	4770      	bx	lr
		if (data->current.flags & I2C_MSG_STOP) {
 800c3fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c3fe:	0791      	lsls	r1, r2, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800c400:	bf42      	ittt	mi
 800c402:	681a      	ldrmi	r2, [r3, #0]
 800c404:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800c408:	601a      	strmi	r2, [r3, #0]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 800c40a:	695a      	ldr	r2, [r3, #20]
		if (LL_I2C_IsActiveFlag_BTF(i2c)) {
 800c40c:	0752      	lsls	r2, r2, #29
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800c40e:	bf48      	it	mi
 800c410:	691b      	ldrmi	r3, [r3, #16]
}
 800c412:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_impl_k_sem_give(sem);
 800c416:	f7fc bac3 	b.w	80089a0 <z_impl_k_sem_give>

0800c41a <stm32_i2c_enable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 800c41a:	68c3      	ldr	r3, [r0, #12]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 800c41c:	685a      	ldr	r2, [r3, #4]
 800c41e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c422:	605a      	str	r2, [r3, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c42a:	605a      	str	r2, [r3, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 800c42c:	685a      	ldr	r2, [r3, #4]
 800c42e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c432:	605a      	str	r2, [r3, #4]
}
 800c434:	4770      	bx	lr

0800c436 <stm32_i2c_disable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 800c436:	68c3      	ldr	r3, [r0, #12]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 800c438:	685a      	ldr	r2, [r3, #4]
 800c43a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800c43e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 800c440:	685a      	ldr	r2, [r3, #4]
 800c442:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800c446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 800c448:	685a      	ldr	r2, [r3, #4]
 800c44a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c44e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 800c450:	685a      	ldr	r2, [r3, #4]
 800c452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 800c458:	685a      	ldr	r2, [r3, #4]
 800c45a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c45e:	605a      	str	r2, [r3, #4]
}
 800c460:	4770      	bx	lr

0800c462 <stm32_i2c_reset.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 800c462:	68c1      	ldr	r1, [r0, #12]
static void stm32_i2c_reset(const struct device *dev)
 800c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800c466:	680b      	ldr	r3, [r1, #0]
 800c468:	f023 0301 	bic.w	r3, r3, #1
 800c46c:	600b      	str	r3, [r1, #0]
	stm32_i2c_disable_transfer_interrupts(dev);
 800c46e:	f7ff ffe2 	bl	800c436 <stm32_i2c_disable_transfer_interrupts.isra.0>
	cr1 = LL_I2C_ReadReg(i2c, CR1);
 800c472:	680f      	ldr	r7, [r1, #0]
	cr2 = LL_I2C_ReadReg(i2c, CR2);
 800c474:	684e      	ldr	r6, [r1, #4]
	oar1 = LL_I2C_ReadReg(i2c, OAR1);
 800c476:	688b      	ldr	r3, [r1, #8]
	oar2 = LL_I2C_ReadReg(i2c, OAR2);
 800c478:	68cd      	ldr	r5, [r1, #12]
	ccr = LL_I2C_ReadReg(i2c, CCR);
 800c47a:	69cc      	ldr	r4, [r1, #28]
	trise = LL_I2C_ReadReg(i2c, TRISE);
 800c47c:	6a08      	ldr	r0, [r1, #32]
	fltr = LL_I2C_ReadReg(i2c, FLTR);
 800c47e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  SET_BIT(I2Cx->CR1, I2C_CR1_SWRST);
 800c480:	f8d1 c000 	ldr.w	ip, [r1]
 800c484:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 800c488:	f8c1 c000 	str.w	ip, [r1]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_SWRST);
 800c48c:	f8d1 c000 	ldr.w	ip, [r1]
	oar1 = LL_I2C_ReadReg(i2c, OAR1);
 800c490:	b29b      	uxth	r3, r3
 800c492:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 800c496:	b2bf      	uxth	r7, r7
 800c498:	b2b6      	uxth	r6, r6
	LL_I2C_WriteReg(i2c, OAR1, oar1);
 800c49a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c49e:	b2ad      	uxth	r5, r5
 800c4a0:	b2a4      	uxth	r4, r4
 800c4a2:	b280      	uxth	r0, r0
 800c4a4:	b292      	uxth	r2, r2
 800c4a6:	f8c1 c000 	str.w	ip, [r1]
	LL_I2C_WriteReg(i2c, CR1, cr1);
 800c4aa:	600f      	str	r7, [r1, #0]
	LL_I2C_WriteReg(i2c, CR2, cr2);
 800c4ac:	604e      	str	r6, [r1, #4]
	LL_I2C_WriteReg(i2c, OAR1, oar1);
 800c4ae:	608b      	str	r3, [r1, #8]
	LL_I2C_WriteReg(i2c, OAR2, oar2);
 800c4b0:	60cd      	str	r5, [r1, #12]
	LL_I2C_WriteReg(i2c, CCR, ccr);
 800c4b2:	61cc      	str	r4, [r1, #28]
	LL_I2C_WriteReg(i2c, TRISE, trise);
 800c4b4:	6208      	str	r0, [r1, #32]
	LL_I2C_WriteReg(i2c, FLTR, fltr);
 800c4b6:	624a      	str	r2, [r1, #36]	; 0x24
}
 800c4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4ba <msg_init.constprop.0>:
static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
 800c4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4be:	461f      	mov	r7, r3
	I2C_TypeDef *i2c = cfg->i2c;
 800c4c0:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 800c4c2:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c4c4:	68dd      	ldr	r5, [r3, #12]
static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
 800c4c6:	460e      	mov	r6, r1
 800c4c8:	4690      	mov	r8, r2
	z_impl_k_sem_reset(sem);
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f7fc fab6 	bl	8008a3c <z_impl_k_sem_reset>
	data->current.len = msg->len;
 800c4d0:	6873      	ldr	r3, [r6, #4]
 800c4d2:	6563      	str	r3, [r4, #84]	; 0x54
	data->current.buf = msg->buf;
 800c4d4:	6833      	ldr	r3, [r6, #0]
 800c4d6:	65a3      	str	r3, [r4, #88]	; 0x58
	data->current.is_write = (transfer == I2C_REQUEST_WRITE);
 800c4d8:	f087 0701 	eor.w	r7, r7, #1
	data->current.is_restart = 0U;
 800c4dc:	2300      	movs	r3, #0
	data->current.flags = msg->flags;
 800c4de:	7a32      	ldrb	r2, [r6, #8]
	data->current.is_restart = 0U;
 800c4e0:	63a3      	str	r3, [r4, #56]	; 0x38
	data->current.is_arlo = 0U;
 800c4e2:	e9c4 7310 	strd	r7, r3, [r4, #64]	; 0x40
	data->current.is_nack = 0U;
 800c4e6:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800c4ea:	682b      	ldr	r3, [r5, #0]
	data->current.flags = msg->flags;
 800c4ec:	63e2      	str	r2, [r4, #60]	; 0x3c
 800c4ee:	f043 0301 	orr.w	r3, r3, #1
	data->current.msg = msg;
 800c4f2:	6526      	str	r6, [r4, #80]	; 0x50
	data->slave_address = slave;
 800c4f4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
 800c4f8:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 800c4fa:	682b      	ldr	r3, [r5, #0]
 800c4fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c500:	602b      	str	r3, [r5, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800c502:	682b      	ldr	r3, [r5, #0]
	if (msg->flags & I2C_MSG_RESTART) {
 800c504:	0751      	lsls	r1, r2, #29
 800c506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c50a:	602b      	str	r3, [r5, #0]
 800c50c:	d50b      	bpl.n	800c526 <msg_init.constprop.0+0x6c>
	uint16_t cr1 = LL_I2C_ReadReg(i2c, CR1);
 800c50e:	682b      	ldr	r3, [r5, #0]
	if (cr1 & I2C_CR1_STOP) {
 800c510:	059a      	lsls	r2, r3, #22
		LL_I2C_WriteReg(i2c, CR1, cr1 & ~I2C_CR1_STOP);
 800c512:	bf41      	itttt	mi
 800c514:	f423 7300 	bicmi.w	r3, r3, #512	; 0x200
 800c518:	041b      	lslmi	r3, r3, #16
 800c51a:	0c1b      	lsrmi	r3, r3, #16
 800c51c:	602b      	strmi	r3, [r5, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800c51e:	682b      	ldr	r3, [r5, #0]
 800c520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c524:	602b      	str	r3, [r5, #0]
}
 800c526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c52a <msg_end.constprop.0>:
	struct i2c_stm32_data *data = DEV_DATA(dev);
 800c52a:	6902      	ldr	r2, [r0, #16]
static int32_t msg_end(const struct device *dev, uint8_t *next_msg_flags,
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4604      	mov	r4, r0
	if (data->current.is_nack || data->current.is_err ||
 800c530:	e9d2 5012 	ldrd	r5, r0, [r2, #72]	; 0x48
 800c534:	ea55 0c00 	orrs.w	ip, r5, r0
	    data->current.is_arlo) {
 800c538:	6c53      	ldr	r3, [r2, #68]	; 0x44
	if (data->current.is_nack || data->current.is_err ||
 800c53a:	d103      	bne.n	800c544 <msg_end.constprop.0+0x1a>
 800c53c:	b1ab      	cbz	r3, 800c56a <msg_end.constprop.0+0x40>
		data->current.is_arlo = 0U;
 800c53e:	2300      	movs	r3, #0
 800c540:	6453      	str	r3, [r2, #68]	; 0x44
 800c542:	e001      	b.n	800c548 <msg_end.constprop.0+0x1e>
	if (data->current.is_arlo) {
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1fa      	bne.n	800c53e <msg_end.constprop.0+0x14>
	if (data->current.is_nack) {
 800c548:	b10d      	cbz	r5, 800c54e <msg_end.constprop.0+0x24>
		data->current.is_nack = 0U;
 800c54a:	2300      	movs	r3, #0
 800c54c:	6493      	str	r3, [r2, #72]	; 0x48
	if (data->current.is_err) {
 800c54e:	b108      	cbz	r0, 800c554 <msg_end.constprop.0+0x2a>
		data->current.is_err = 0U;
 800c550:	2300      	movs	r3, #0
 800c552:	64d3      	str	r3, [r2, #76]	; 0x4c
	stm32_i2c_master_finish(dev);
 800c554:	6860      	ldr	r0, [r4, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 800c556:	68c1      	ldr	r1, [r0, #12]
	stm32_i2c_disable_transfer_interrupts(dev);
 800c558:	f7ff ff6d 	bl	800c436 <stm32_i2c_disable_transfer_interrupts.isra.0>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800c55c:	680b      	ldr	r3, [r1, #0]
 800c55e:	f023 0301 	bic.w	r3, r3, #1
 800c562:	600b      	str	r3, [r1, #0]
	return -EIO;
 800c564:	f06f 0004 	mvn.w	r0, #4
}
 800c568:	e009      	b.n	800c57e <msg_end.constprop.0+0x54>
	if (!next_msg_flags) {
 800c56a:	b949      	cbnz	r1, 800c580 <msg_end.constprop.0+0x56>
		stm32_i2c_master_finish(dev);
 800c56c:	6860      	ldr	r0, [r4, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 800c56e:	68c4      	ldr	r4, [r0, #12]
	stm32_i2c_disable_transfer_interrupts(dev);
 800c570:	f7ff ff61 	bl	800c436 <stm32_i2c_disable_transfer_interrupts.isra.0>
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	f023 0301 	bic.w	r3, r3, #1
 800c57a:	6023      	str	r3, [r4, #0]
	return 0;
 800c57c:	4608      	mov	r0, r1
}
 800c57e:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
 800c580:	4618      	mov	r0, r3
 800c582:	e7fc      	b.n	800c57e <msg_end.constprop.0+0x54>

0800c584 <handle_rxne>:
{
 800c584:	4603      	mov	r3, r0
	struct i2c_stm32_data *data = DEV_DATA(dev);
 800c586:	6900      	ldr	r0, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c588:	685b      	ldr	r3, [r3, #4]
	if (data->current.len > 0) {
 800c58a:	6d42      	ldr	r2, [r0, #84]	; 0x54
	I2C_TypeDef *i2c = cfg->i2c;
 800c58c:	68db      	ldr	r3, [r3, #12]
	if (data->current.len > 0) {
 800c58e:	2a00      	cmp	r2, #0
 800c590:	d037      	beq.n	800c602 <handle_rxne+0x7e>
		switch (data->current.len) {
 800c592:	2a02      	cmp	r2, #2
 800c594:	d020      	beq.n	800c5d8 <handle_rxne+0x54>
 800c596:	2a03      	cmp	r2, #3
 800c598:	d026      	beq.n	800c5e8 <handle_rxne+0x64>
 800c59a:	2a01      	cmp	r2, #1
 800c59c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800c59e:	d128      	bne.n	800c5f2 <handle_rxne+0x6e>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c5ae:	601a      	str	r2, [r3, #0]
			if (data->current.flags & I2C_MSG_STOP) {
 800c5b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c5b2:	0792      	lsls	r2, r2, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800c5b4:	bf42      	ittt	mi
 800c5b6:	681a      	ldrmi	r2, [r3, #0]
 800c5b8:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800c5bc:	601a      	strmi	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 800c5be:	685a      	ldr	r2, [r3, #4]
 800c5c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5c4:	605a      	str	r2, [r3, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800c5c6:	691b      	ldr	r3, [r3, #16]
			data->current.len--;
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	6542      	str	r2, [r0, #84]	; 0x54
 800c5cc:	700b      	strb	r3, [r1, #0]
			data->current.buf++;
 800c5ce:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	6583      	str	r3, [r0, #88]	; 0x58
	z_impl_k_sem_give(sem);
 800c5d4:	f7fc b9e4 	b.w	80089a0 <z_impl_k_sem_give>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5de:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 800c5e8:	685a      	ldr	r2, [r3, #4]
 800c5ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5ee:	605a      	str	r2, [r3, #4]
}
 800c5f0:	4770      	bx	lr
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800c5f2:	691b      	ldr	r3, [r3, #16]
			data->current.len--;
 800c5f4:	3a01      	subs	r2, #1
 800c5f6:	6542      	str	r2, [r0, #84]	; 0x54
 800c5f8:	700b      	strb	r3, [r1, #0]
			data->current.buf++;
 800c5fa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	6583      	str	r3, [r0, #88]	; 0x58
}
 800c600:	4770      	bx	lr
		if (data->current.flags & I2C_MSG_STOP) {
 800c602:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c604:	0792      	lsls	r2, r2, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800c606:	bf42      	ittt	mi
 800c608:	681a      	ldrmi	r2, [r3, #0]
 800c60a:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800c60e:	601a      	strmi	r2, [r3, #0]
}
 800c610:	e7e0      	b.n	800c5d4 <handle_rxne+0x50>

0800c612 <stm32_i2c_event_isr>:
	I2C_TypeDef *i2c = cfg->i2c;
 800c612:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 800c614:	6902      	ldr	r2, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c616:	68db      	ldr	r3, [r3, #12]
{
 800c618:	b410      	push	{r4}
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 800c61a:	695c      	ldr	r4, [r3, #20]
	if (LL_I2C_IsActiveFlag_SB(i2c)) {
 800c61c:	07e4      	lsls	r4, r4, #31
{
 800c61e:	b085      	sub	sp, #20
 800c620:	4601      	mov	r1, r0
	if (LL_I2C_IsActiveFlag_SB(i2c)) {
 800c622:	d531      	bpl.n	800c688 <stm32_i2c_event_isr+0x76>
	if (I2C_ADDR_10_BITS & data->dev_config) {
 800c624:	6b10      	ldr	r0, [r2, #48]	; 0x30
		slave = (((saddr & 0x0300) >> 7) & 0xFF);
 800c626:	8e91      	ldrh	r1, [r2, #52]	; 0x34
	if (I2C_ADDR_10_BITS & data->dev_config) {
 800c628:	f010 0001 	ands.w	r0, r0, #1
 800c62c:	d014      	beq.n	800c658 <stm32_i2c_event_isr+0x46>
		if (data->current.is_restart == 0U) {
 800c62e:	6b94      	ldr	r4, [r2, #56]	; 0x38
		slave = (((saddr & 0x0300) >> 7) & 0xFF);
 800c630:	11c9      	asrs	r1, r1, #7
 800c632:	f001 0106 	and.w	r1, r1, #6
		if (data->current.is_restart == 0U) {
 800c636:	b95c      	cbnz	r4, 800c650 <stm32_i2c_event_isr+0x3e>
		uint8_t header = slave | HEADER;
 800c638:	f041 01f0 	orr.w	r1, r1, #240	; 0xf0
 800c63c:	6390      	str	r0, [r2, #56]	; 0x38
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 800c63e:	691a      	ldr	r2, [r3, #16]
 800c640:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c644:	4311      	orrs	r1, r2
 800c646:	6119      	str	r1, [r3, #16]
}
 800c648:	b005      	add	sp, #20
 800c64a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c64e:	4770      	bx	lr
			header |= I2C_REQUEST_READ;
 800c650:	f041 01f1 	orr.w	r1, r1, #241	; 0xf1
			data->current.is_restart = 0U;
 800c654:	2000      	movs	r0, #0
 800c656:	e7f1      	b.n	800c63c <stm32_i2c_event_isr+0x2a>
	if (data->current.is_write) {
 800c658:	6c10      	ldr	r0, [r2, #64]	; 0x40
	slave = (saddr << 1) & 0xFF;
 800c65a:	0049      	lsls	r1, r1, #1
	if (data->current.is_write) {
 800c65c:	b120      	cbz	r0, 800c668 <stm32_i2c_event_isr+0x56>
 800c65e:	691a      	ldr	r2, [r3, #16]
 800c660:	b2c9      	uxtb	r1, r1
 800c662:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c666:	e7ed      	b.n	800c644 <stm32_i2c_event_isr+0x32>
 800c668:	6918      	ldr	r0, [r3, #16]
		if (data->current.len == 2) {
 800c66a:	6d52      	ldr	r2, [r2, #84]	; 0x54
		LL_I2C_TransmitData8(i2c, slave | I2C_REQUEST_READ);
 800c66c:	f041 0101 	orr.w	r1, r1, #1
 800c670:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800c674:	b2c9      	uxtb	r1, r1
 800c676:	4301      	orrs	r1, r0
		if (data->current.len == 2) {
 800c678:	2a02      	cmp	r2, #2
 800c67a:	6119      	str	r1, [r3, #16]
 800c67c:	d1e4      	bne.n	800c648 <stm32_i2c_event_isr+0x36>
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800c684:	601a      	str	r2, [r3, #0]
}
 800c686:	e7df      	b.n	800c648 <stm32_i2c_event_isr+0x36>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADD10) == (I2C_SR1_ADD10));
 800c688:	695c      	ldr	r4, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_ADD10(i2c)) {
 800c68a:	0724      	lsls	r4, r4, #28
 800c68c:	d507      	bpl.n	800c69e <stm32_i2c_event_isr+0x8c>
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 800c68e:	6919      	ldr	r1, [r3, #16]
 800c690:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c694:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800c698:	430a      	orrs	r2, r1
 800c69a:	611a      	str	r2, [r3, #16]
}
 800c69c:	e7d4      	b.n	800c648 <stm32_i2c_event_isr+0x36>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800c69e:	695c      	ldr	r4, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_ADDR(i2c)) {
 800c6a0:	07a4      	lsls	r4, r4, #30
 800c6a2:	d539      	bpl.n	800c718 <stm32_i2c_event_isr+0x106>
	if (I2C_ADDR_10_BITS & data->dev_config) {
 800c6a4:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (data->current.is_write) {
 800c6a6:	6c11      	ldr	r1, [r2, #64]	; 0x40
	if (I2C_ADDR_10_BITS & data->dev_config) {
 800c6a8:	07c0      	lsls	r0, r0, #31
 800c6aa:	d515      	bpl.n	800c6d8 <stm32_i2c_event_isr+0xc6>
		if (!data->current.is_write && data->current.is_restart) {
 800c6ac:	b9a9      	cbnz	r1, 800c6da <stm32_i2c_event_isr+0xc8>
 800c6ae:	6b90      	ldr	r0, [r2, #56]	; 0x38
 800c6b0:	b1d0      	cbz	r0, 800c6e8 <stm32_i2c_event_isr+0xd6>
			data->current.is_restart = 0U;
 800c6b2:	6391      	str	r1, [r2, #56]	; 0x38
  tmpreg = I2Cx->SR1;
 800c6b4:	695a      	ldr	r2, [r3, #20]
 800c6b6:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800c6b8:	9a01      	ldr	r2, [sp, #4]
  tmpreg = I2Cx->SR2;
 800c6ba:	699a      	ldr	r2, [r3, #24]
 800c6bc:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800c6be:	9a01      	ldr	r2, [sp, #4]
	uint16_t cr1 = LL_I2C_ReadReg(i2c, CR1);
 800c6c0:	681a      	ldr	r2, [r3, #0]
	if (cr1 & I2C_CR1_STOP) {
 800c6c2:	0591      	lsls	r1, r2, #22
		LL_I2C_WriteReg(i2c, CR1, cr1 & ~I2C_CR1_STOP);
 800c6c4:	bf41      	itttt	mi
 800c6c6:	f422 7200 	bicmi.w	r2, r2, #512	; 0x200
 800c6ca:	0412      	lslmi	r2, r2, #16
 800c6cc:	0c12      	lsrmi	r2, r2, #16
 800c6ce:	601a      	strmi	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c6d6:	e7d5      	b.n	800c684 <stm32_i2c_event_isr+0x72>
	if (data->current.is_write) {
 800c6d8:	b131      	cbz	r1, 800c6e8 <stm32_i2c_event_isr+0xd6>
  tmpreg = I2Cx->SR1;
 800c6da:	695a      	ldr	r2, [r3, #20]
 800c6dc:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800c6de:	9a02      	ldr	r2, [sp, #8]
  tmpreg = I2Cx->SR2;
 800c6e0:	699b      	ldr	r3, [r3, #24]
 800c6e2:	9302      	str	r3, [sp, #8]
  (void) tmpreg;
 800c6e4:	9b02      	ldr	r3, [sp, #8]
}
 800c6e6:	e7af      	b.n	800c648 <stm32_i2c_event_isr+0x36>
	} else if (data->current.len == 1U) {
 800c6e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c6ea:	2a01      	cmp	r2, #1
 800c6ec:	d10a      	bne.n	800c704 <stm32_i2c_event_isr+0xf2>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 800c6f4:	601a      	str	r2, [r3, #0]
  tmpreg = I2Cx->SR1;
 800c6f6:	695a      	ldr	r2, [r3, #20]
 800c6f8:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 800c6fa:	9a03      	ldr	r2, [sp, #12]
  tmpreg = I2Cx->SR2;
 800c6fc:	699b      	ldr	r3, [r3, #24]
 800c6fe:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 800c700:	9b03      	ldr	r3, [sp, #12]
}
 800c702:	e7a1      	b.n	800c648 <stm32_i2c_event_isr+0x36>
	} else if (data->current.len == 2U) {
 800c704:	2a02      	cmp	r2, #2
 800c706:	d1f6      	bne.n	800c6f6 <stm32_i2c_event_isr+0xe4>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c70e:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c716:	e7ed      	b.n	800c6f4 <stm32_i2c_event_isr+0xe2>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 800c718:	695c      	ldr	r4, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_BTF(i2c)) {
 800c71a:	0764      	lsls	r4, r4, #29
 800c71c:	d53b      	bpl.n	800c796 <stm32_i2c_event_isr+0x184>
	if (data->current.is_write) {
 800c71e:	6c14      	ldr	r4, [r2, #64]	; 0x40
 800c720:	b12c      	cbz	r4, 800c72e <stm32_i2c_event_isr+0x11c>
		handle_txe(dev);
 800c722:	4608      	mov	r0, r1
}
 800c724:	b005      	add	sp, #20
 800c726:	f85d 4b04 	ldr.w	r4, [sp], #4
		handle_txe(dev);
 800c72a:	f7ff be4d 	b.w	800c3c8 <handle_txe>
		switch (data->current.len) {
 800c72e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800c730:	2902      	cmp	r1, #2
 800c732:	d006      	beq.n	800c742 <stm32_i2c_event_isr+0x130>
 800c734:	2903      	cmp	r1, #3
 800c736:	d021      	beq.n	800c77c <stm32_i2c_event_isr+0x16a>
}
 800c738:	b005      	add	sp, #20
 800c73a:	f85d 4b04 	ldr.w	r4, [sp], #4
		handle_rxne(dev);
 800c73e:	f7ff bf21 	b.w	800c584 <handle_rxne>
			if (data->current.flags & I2C_MSG_STOP) {
 800c742:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800c744:	078c      	lsls	r4, r1, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800c746:	bf42      	ittt	mi
 800c748:	6819      	ldrmi	r1, [r3, #0]
 800c74a:	f441 7100 	orrmi.w	r1, r1, #512	; 0x200
 800c74e:	6019      	strmi	r1, [r3, #0]
				data->current.len--;
 800c750:	2101      	movs	r1, #1
 800c752:	6551      	str	r1, [r2, #84]	; 0x54
				*data->current.buf = LL_I2C_ReceiveData8(i2c);
 800c754:	6d91      	ldr	r1, [r2, #88]	; 0x58
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800c756:	6918      	ldr	r0, [r3, #16]
 800c758:	7008      	strb	r0, [r1, #0]
				data->current.buf++;
 800c75a:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	1c41      	adds	r1, r0, #1
 800c760:	6591      	str	r1, [r2, #88]	; 0x58
				data->current.len--;
 800c762:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800c764:	3901      	subs	r1, #1
 800c766:	6551      	str	r1, [r2, #84]	; 0x54
 800c768:	7043      	strb	r3, [r0, #1]
				data->current.buf++;
 800c76a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c76c:	3301      	adds	r3, #1
 800c76e:	6593      	str	r3, [r2, #88]	; 0x58
 800c770:	4610      	mov	r0, r2
}
 800c772:	b005      	add	sp, #20
 800c774:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c778:	f7fc b912 	b.w	80089a0 <z_impl_k_sem_give>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800c77c:	6819      	ldr	r1, [r3, #0]
 800c77e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800c782:	6019      	str	r1, [r3, #0]
			data->current.len--;
 800c784:	2102      	movs	r1, #2
 800c786:	6551      	str	r1, [r2, #84]	; 0x54
			*data->current.buf = LL_I2C_ReceiveData8(i2c);
 800c788:	6d91      	ldr	r1, [r2, #88]	; 0x58
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	700b      	strb	r3, [r1, #0]
			data->current.buf++;
 800c78e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c790:	3301      	adds	r3, #1
 800c792:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 800c794:	e758      	b.n	800c648 <stm32_i2c_event_isr+0x36>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800c796:	6958      	ldr	r0, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_TXE(i2c) && data->current.is_write) {
 800c798:	0600      	lsls	r0, r0, #24
 800c79a:	d502      	bpl.n	800c7a2 <stm32_i2c_event_isr+0x190>
 800c79c:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d1bf      	bne.n	800c722 <stm32_i2c_event_isr+0x110>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800c7a2:	695b      	ldr	r3, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_RXNE(i2c) && !data->current.is_write) {
 800c7a4:	065b      	lsls	r3, r3, #25
 800c7a6:	f57f af4f 	bpl.w	800c648 <stm32_i2c_event_isr+0x36>
 800c7aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f47f af4b 	bne.w	800c648 <stm32_i2c_event_isr+0x36>
		handle_rxne(dev);
 800c7b2:	4608      	mov	r0, r1
 800c7b4:	e7c0      	b.n	800c738 <stm32_i2c_event_isr+0x126>

0800c7b6 <stm32_i2c_error_isr>:
{
 800c7b6:	4603      	mov	r3, r0
	struct i2c_stm32_data *data = DEV_DATA(dev);
 800c7b8:	6900      	ldr	r0, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	68db      	ldr	r3, [r3, #12]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
 800c7be:	695a      	ldr	r2, [r3, #20]
	if (LL_I2C_IsActiveFlag_AF(i2c)) {
 800c7c0:	f412 6f80 	tst.w	r2, #1024	; 0x400
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
 800c7c4:	695a      	ldr	r2, [r3, #20]
 800c7c6:	d00a      	beq.n	800c7de <stm32_i2c_error_isr+0x28>
 800c7c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7cc:	615a      	str	r2, [r3, #20]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7d4:	601a      	str	r2, [r3, #0]
		data->current.is_nack = 1U;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	6483      	str	r3, [r0, #72]	; 0x48
 800c7da:	f7fc b8e1 	b.w	80089a0 <z_impl_k_sem_give>
	if (LL_I2C_IsActiveFlag_ARLO(i2c)) {
 800c7de:	f412 7f00 	tst.w	r2, #512	; 0x200
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_ARLO);
 800c7e2:	695a      	ldr	r2, [r3, #20]
 800c7e4:	d005      	beq.n	800c7f2 <stm32_i2c_error_isr+0x3c>
 800c7e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c7ea:	615a      	str	r2, [r3, #20]
		data->current.is_arlo = 1U;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	6443      	str	r3, [r0, #68]	; 0x44
		goto end;
 800c7f0:	e7f3      	b.n	800c7da <stm32_i2c_error_isr+0x24>
	if (LL_I2C_IsActiveFlag_BERR(i2c)) {
 800c7f2:	05d2      	lsls	r2, r2, #23
 800c7f4:	d506      	bpl.n	800c804 <stm32_i2c_error_isr+0x4e>
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_BERR);
 800c7f6:	695a      	ldr	r2, [r3, #20]
 800c7f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7fc:	615a      	str	r2, [r3, #20]
		data->current.is_err = 1U;
 800c7fe:	2301      	movs	r3, #1
 800c800:	64c3      	str	r3, [r0, #76]	; 0x4c
		goto end;
 800c802:	e7ea      	b.n	800c7da <stm32_i2c_error_isr+0x24>
}
 800c804:	4770      	bx	lr

0800c806 <stm32_i2c_msg_write>:
{
 800c806:	b570      	push	{r4, r5, r6, lr}
 800c808:	4604      	mov	r4, r0
 800c80a:	4615      	mov	r5, r2
 800c80c:	461a      	mov	r2, r3
	msg_init(dev, msg, next_msg_flags, saddr, I2C_REQUEST_WRITE);
 800c80e:	2300      	movs	r3, #0
	struct i2c_stm32_data *data = DEV_DATA(dev);
 800c810:	6906      	ldr	r6, [r0, #16]
	msg_init(dev, msg, next_msg_flags, saddr, I2C_REQUEST_WRITE);
 800c812:	f7ff fe52 	bl	800c4ba <msg_init.constprop.0>
	stm32_i2c_enable_transfer_interrupts(dev);
 800c816:	6860      	ldr	r0, [r4, #4]
 800c818:	f7ff fdff 	bl	800c41a <stm32_i2c_enable_transfer_interrupts.isra.0>
	return z_impl_k_sem_take(sem, timeout);
 800c81c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c820:	2300      	movs	r3, #0
 800c822:	4630      	mov	r0, r6
 800c824:	f7fc f8e2 	bl	80089ec <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 800c828:	b928      	cbnz	r0, 800c836 <stm32_i2c_msg_write+0x30>
	return msg_end(dev, next_msg_flags, __func__);
 800c82a:	4629      	mov	r1, r5
 800c82c:	4620      	mov	r0, r4
}
 800c82e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return msg_end(dev, next_msg_flags, __func__);
 800c832:	f7ff be7a 	b.w	800c52a <msg_end.constprop.0>
		stm32_i2c_reset(dev);
 800c836:	6860      	ldr	r0, [r4, #4]
 800c838:	f7ff fe13 	bl	800c462 <stm32_i2c_reset.isra.0>
}
 800c83c:	f06f 0004 	mvn.w	r0, #4
 800c840:	bd70      	pop	{r4, r5, r6, pc}

0800c842 <stm32_i2c_msg_read>:
{
 800c842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c844:	4615      	mov	r5, r2
 800c846:	461a      	mov	r2, r3
	I2C_TypeDef *i2c = cfg->i2c;
 800c848:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 800c84a:	6907      	ldr	r7, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c84c:	68de      	ldr	r6, [r3, #12]
{
 800c84e:	4604      	mov	r4, r0
	msg_init(dev, msg, next_msg_flags, saddr, I2C_REQUEST_READ);
 800c850:	2301      	movs	r3, #1
 800c852:	f7ff fe32 	bl	800c4ba <msg_init.constprop.0>
	stm32_i2c_enable_transfer_interrupts(dev);
 800c856:	6860      	ldr	r0, [r4, #4]
 800c858:	f7ff fddf 	bl	800c41a <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 800c85c:	6873      	ldr	r3, [r6, #4]
 800c85e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800c862:	6073      	str	r3, [r6, #4]
 800c864:	f241 3288 	movw	r2, #5000	; 0x1388
 800c868:	2300      	movs	r3, #0
 800c86a:	4638      	mov	r0, r7
 800c86c:	f7fc f8be 	bl	80089ec <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 800c870:	b928      	cbnz	r0, 800c87e <stm32_i2c_msg_read+0x3c>
	return msg_end(dev, next_msg_flags, __func__);
 800c872:	4629      	mov	r1, r5
 800c874:	4620      	mov	r0, r4
}
 800c876:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return msg_end(dev, next_msg_flags, __func__);
 800c87a:	f7ff be56 	b.w	800c52a <msg_end.constprop.0>
		stm32_i2c_reset(dev);
 800c87e:	6860      	ldr	r0, [r4, #4]
 800c880:	f7ff fdef 	bl	800c462 <stm32_i2c_reset.isra.0>
}
 800c884:	f06f 0004 	mvn.w	r0, #4
 800c888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c88a <i2c_stm32_irq_config_func_i2c1>:
STM32_I2C_IRQ_HANDLER(name)

/* I2C instances declaration */

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c1), okay)
STM32_I2C_INIT(i2c1);
 800c88a:	b508      	push	{r3, lr}
 800c88c:	2200      	movs	r2, #0
 800c88e:	4611      	mov	r1, r2
 800c890:	201f      	movs	r0, #31
 800c892:	f7f9 fb79 	bl	8005f88 <z_arm_irq_priority_set>
 800c896:	201f      	movs	r0, #31
 800c898:	f7f9 fb66 	bl	8005f68 <arch_irq_enable>
 800c89c:	2200      	movs	r2, #0
 800c89e:	2020      	movs	r0, #32
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	f7f9 fb71 	bl	8005f88 <z_arm_irq_priority_set>
 800c8a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c8aa:	2020      	movs	r0, #32
 800c8ac:	f7f9 bb5c 	b.w	8005f68 <arch_irq_enable>

0800c8b0 <i2c_stm32_irq_config_func_i2c2>:
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c2), okay)
STM32_I2C_INIT(i2c2);
 800c8b0:	b508      	push	{r3, lr}
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	2021      	movs	r0, #33	; 0x21
 800c8b8:	f7f9 fb66 	bl	8005f88 <z_arm_irq_priority_set>
 800c8bc:	2021      	movs	r0, #33	; 0x21
 800c8be:	f7f9 fb53 	bl	8005f68 <arch_irq_enable>
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	2022      	movs	r0, #34	; 0x22
 800c8c6:	4611      	mov	r1, r2
 800c8c8:	f7f9 fb5e 	bl	8005f88 <z_arm_irq_priority_set>
 800c8cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c8d0:	2022      	movs	r0, #34	; 0x22
 800c8d2:	f7f9 bb49 	b.w	8005f68 <arch_irq_enable>

0800c8d6 <i2c_stm32_irq_config_func_i2c3>:
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c3), okay)
STM32_I2C_INIT(i2c3);
 800c8d6:	b508      	push	{r3, lr}
 800c8d8:	2200      	movs	r2, #0
 800c8da:	4611      	mov	r1, r2
 800c8dc:	2048      	movs	r0, #72	; 0x48
 800c8de:	f7f9 fb53 	bl	8005f88 <z_arm_irq_priority_set>
 800c8e2:	2048      	movs	r0, #72	; 0x48
 800c8e4:	f7f9 fb40 	bl	8005f68 <arch_irq_enable>
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	2049      	movs	r0, #73	; 0x49
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	f7f9 fb4b 	bl	8005f88 <z_arm_irq_priority_set>
 800c8f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c8f6:	2049      	movs	r0, #73	; 0x49
 800c8f8:	f7f9 bb36 	b.w	8005f68 <arch_irq_enable>

0800c8fc <i2c_stm32_transfer>:
{
 800c8fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c900:	4699      	mov	r9, r3
	current->flags |= I2C_MSG_RESTART;
 800c902:	7a0b      	ldrb	r3, [r1, #8]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 800c904:	6907      	ldr	r7, [r0, #16]
	current->flags |= I2C_MSG_RESTART;
 800c906:	f043 0304 	orr.w	r3, r3, #4
{
 800c90a:	4615      	mov	r5, r2
	current->flags |= I2C_MSG_RESTART;
 800c90c:	720b      	strb	r3, [r1, #8]
{
 800c90e:	4606      	mov	r6, r0
 800c910:	460c      	mov	r4, r1
	for (uint8_t i = 1; i <= num_msgs; i++) {
 800c912:	460a      	mov	r2, r1
 800c914:	2301      	movs	r3, #1
 800c916:	42ab      	cmp	r3, r5
 800c918:	d90b      	bls.n	800c932 <i2c_stm32_transfer+0x36>
	k_sem_take(&data->bus_mutex, K_FOREVER);
 800c91a:	f107 0818 	add.w	r8, r7, #24
 800c91e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c926:	4640      	mov	r0, r8
 800c928:	f7fc f860 	bl	80089ec <z_impl_k_sem_take>
	while (num_msgs > 0) {
 800c92c:	3414      	adds	r4, #20
 800c92e:	2300      	movs	r3, #0
 800c930:	e05b      	b.n	800c9ea <i2c_stm32_transfer+0xee>
			if (OPERATION(current) != OPERATION(next)) {
 800c932:	7a11      	ldrb	r1, [r2, #8]
		if (i < num_msgs) {
 800c934:	d20c      	bcs.n	800c950 <i2c_stm32_transfer+0x54>
			if (OPERATION(current) != OPERATION(next)) {
 800c936:	7d10      	ldrb	r0, [r2, #20]
 800c938:	ea80 0c01 	eor.w	ip, r0, r1
 800c93c:	f01c 0f01 	tst.w	ip, #1
 800c940:	d001      	beq.n	800c946 <i2c_stm32_transfer+0x4a>
				if (!(next->flags & I2C_MSG_RESTART)) {
 800c942:	0740      	lsls	r0, r0, #29
 800c944:	d501      	bpl.n	800c94a <i2c_stm32_transfer+0x4e>
			if (current->flags & I2C_MSG_STOP) {
 800c946:	0789      	lsls	r1, r1, #30
 800c948:	d505      	bpl.n	800c956 <i2c_stm32_transfer+0x5a>
 800c94a:	f06f 0315 	mvn.w	r3, #21
 800c94e:	e055      	b.n	800c9fc <i2c_stm32_transfer+0x100>
			current->flags |= I2C_MSG_STOP;
 800c950:	f041 0102 	orr.w	r1, r1, #2
 800c954:	7211      	strb	r1, [r2, #8]
	for (uint8_t i = 1; i <= num_msgs; i++) {
 800c956:	3301      	adds	r3, #1
		current++;
 800c958:	320c      	adds	r2, #12
	for (uint8_t i = 1; i <= num_msgs; i++) {
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	e7db      	b.n	800c916 <i2c_stm32_transfer+0x1a>
		if (num_msgs > 1) {
 800c95e:	2d01      	cmp	r5, #1
 800c960:	bf14      	ite	ne
 800c962:	46a3      	movne	fp, r4
 800c964:	f04f 0b00 	moveq.w	fp, #0
			uint8_t tmp_msg_flags = current->flags & ~I2C_MSG_RESTART;
 800c968:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
			uint32_t temp_len = current->len;
 800c96c:	f854 7c10 	ldr.w	r7, [r4, #-16]
			uint8_t tmp_msg_flags = current->flags & ~I2C_MSG_RESTART;
 800c970:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 800c974:	9200      	str	r2, [sp, #0]
			uint8_t tmp_next_msg_flags = next_msg_flags ?
 800c976:	f1bb 0f00 	cmp.w	fp, #0
 800c97a:	d043      	beq.n	800ca04 <i2c_stm32_transfer+0x108>
 800c97c:	f89b a000 	ldrb.w	sl, [fp]
			if (current->len > 255) {
 800c980:	2fff      	cmp	r7, #255	; 0xff
 800c982:	d90d      	bls.n	800c9a0 <i2c_stm32_transfer+0xa4>
				current->len = 255U;
 800c984:	22ff      	movs	r2, #255	; 0xff
				current->flags &= ~I2C_MSG_STOP;
 800c986:	f023 0002 	bic.w	r0, r3, #2
				current->len = 255U;
 800c98a:	f844 2c10 	str.w	r2, [r4, #-16]
				current->flags &= ~I2C_MSG_STOP;
 800c98e:	f804 0c0c 	strb.w	r0, [r4, #-12]
				if (next_msg_flags) {
 800c992:	f1bb 0f00 	cmp.w	fp, #0
 800c996:	d003      	beq.n	800c9a0 <i2c_stm32_transfer+0xa4>
					*next_msg_flags = current->flags &
 800c998:	f023 0306 	bic.w	r3, r3, #6
 800c99c:	f88b 3000 	strb.w	r3, [fp]
			if ((current->flags & I2C_MSG_RW_MASK) ==
 800c9a0:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
				ret = stm32_i2c_msg_write(dev, current,
 800c9a4:	9101      	str	r1, [sp, #4]
			if ((current->flags & I2C_MSG_RW_MASK) ==
 800c9a6:	f013 0f01 	tst.w	r3, #1
				ret = stm32_i2c_msg_write(dev, current,
 800c9aa:	465a      	mov	r2, fp
 800c9ac:	464b      	mov	r3, r9
 800c9ae:	4630      	mov	r0, r6
			if ((current->flags & I2C_MSG_RW_MASK) ==
 800c9b0:	d12a      	bne.n	800ca08 <i2c_stm32_transfer+0x10c>
				ret = stm32_i2c_msg_write(dev, current,
 800c9b2:	f7ff ff28 	bl	800c806 <stm32_i2c_msg_write>
			if (ret < 0) {
 800c9b6:	2800      	cmp	r0, #0
				ret = stm32_i2c_msg_read(dev, current,
 800c9b8:	9901      	ldr	r1, [sp, #4]
 800c9ba:	4603      	mov	r3, r0
			if (ret < 0) {
 800c9bc:	db19      	blt.n	800c9f2 <i2c_stm32_transfer+0xf6>
			if (next_msg_flags) {
 800c9be:	f1bb 0f00 	cmp.w	fp, #0
 800c9c2:	d001      	beq.n	800c9c8 <i2c_stm32_transfer+0xcc>
				*next_msg_flags = tmp_next_msg_flags;
 800c9c4:	f88b a000 	strb.w	sl, [fp]
			current->buf += current->len;
 800c9c8:	e954 0c05 	ldrd	r0, ip, [r4, #-20]
			current->flags = tmp_msg_flags;
 800c9cc:	9a00      	ldr	r2, [sp, #0]
 800c9ce:	f804 2c0c 	strb.w	r2, [r4, #-12]
			current->buf += current->len;
 800c9d2:	4460      	add	r0, ip
			current->len = temp_len - current->len;
 800c9d4:	eba7 070c 	sub.w	r7, r7, ip
			current->buf += current->len;
 800c9d8:	f844 0c14 	str.w	r0, [r4, #-20]
			current->len = temp_len - current->len;
 800c9dc:	f844 7c10 	str.w	r7, [r4, #-16]
		} while (current->len > 0);
 800c9e0:	2f00      	cmp	r7, #0
 800c9e2:	d1c1      	bne.n	800c968 <i2c_stm32_transfer+0x6c>
		num_msgs--;
 800c9e4:	3d01      	subs	r5, #1
 800c9e6:	b2ed      	uxtb	r5, r5
 800c9e8:	340c      	adds	r4, #12
 800c9ea:	f1a4 0114 	sub.w	r1, r4, #20
	while (num_msgs > 0) {
 800c9ee:	2d00      	cmp	r5, #0
 800c9f0:	d1b5      	bne.n	800c95e <i2c_stm32_transfer+0x62>
 800c9f2:	9300      	str	r3, [sp, #0]
	z_impl_k_sem_give(sem);
 800c9f4:	4640      	mov	r0, r8
 800c9f6:	f7fb ffd3 	bl	80089a0 <z_impl_k_sem_give>
}
 800c9fa:	9b00      	ldr	r3, [sp, #0]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	b003      	add	sp, #12
 800ca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t tmp_next_msg_flags = next_msg_flags ?
 800ca04:	46da      	mov	sl, fp
 800ca06:	e7bb      	b.n	800c980 <i2c_stm32_transfer+0x84>
				ret = stm32_i2c_msg_read(dev, current,
 800ca08:	f7ff ff1b 	bl	800c842 <stm32_i2c_msg_read>
 800ca0c:	e7d3      	b.n	800c9b6 <i2c_stm32_transfer+0xba>

0800ca0e <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800ca0e:	2301      	movs	r3, #1
 800ca10:	fa03 f101 	lsl.w	r1, r3, r1
 800ca14:	6903      	ldr	r3, [r0, #16]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 800ca1a:	bf18      	it	ne
 800ca1c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 800ca20:	b112      	cbz	r2, 800ca28 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 800ca22:	6883      	ldr	r3, [r0, #8]
 800ca24:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 800ca26:	4718      	bx	r3
 800ca28:	6883      	ldr	r3, [r0, #8]
 800ca2a:	691b      	ldr	r3, [r3, #16]
 800ca2c:	e7fb      	b.n	800ca26 <gpio_pin_set.isra.0+0x18>

0800ca2e <_spi_context_cs_control>:
{
 800ca2e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800ca30:	6805      	ldr	r5, [r0, #0]
{
 800ca32:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800ca34:	b1fd      	cbz	r5, 800ca76 <_spi_context_cs_control+0x48>
 800ca36:	68ab      	ldr	r3, [r5, #8]
 800ca38:	b1eb      	cbz	r3, 800ca76 <_spi_context_cs_control+0x48>
 800ca3a:	6818      	ldr	r0, [r3, #0]
 800ca3c:	b1d8      	cbz	r0, 800ca76 <_spi_context_cs_control+0x48>
		if (on) {
 800ca3e:	b151      	cbz	r1, 800ca56 <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800ca40:	7a19      	ldrb	r1, [r3, #8]
 800ca42:	2201      	movs	r2, #1
 800ca44:	f7ff ffe3 	bl	800ca0e <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 800ca48:	6823      	ldr	r3, [r4, #0]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	6858      	ldr	r0, [r3, #4]
}
 800ca4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 800ca52:	f7fc bccd 	b.w	80093f0 <z_impl_k_busy_wait>
			if (!force_off &&
 800ca56:	b912      	cbnz	r2, 800ca5e <_spi_context_cs_control+0x30>
 800ca58:	88aa      	ldrh	r2, [r5, #4]
 800ca5a:	0492      	lsls	r2, r2, #18
 800ca5c:	d40b      	bmi.n	800ca76 <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
 800ca5e:	6858      	ldr	r0, [r3, #4]
 800ca60:	f7fc fcc6 	bl	80093f0 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	7a19      	ldrb	r1, [r3, #8]
 800ca6c:	6818      	ldr	r0, [r3, #0]
}
 800ca6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800ca72:	f7ff bfcc 	b.w	800ca0e <gpio_pin_set.isra.0>
}
 800ca76:	bd38      	pop	{r3, r4, r5, pc}

0800ca78 <spi_context_unlock_unconditionally>:
{
 800ca78:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	2100      	movs	r1, #0
{
 800ca7e:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 800ca80:	f7ff ffd5 	bl	800ca2e <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	b933      	cbnz	r3, 800ca96 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 800ca88:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 800ca8a:	f104 0008 	add.w	r0, r4, #8
}
 800ca8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca92:	f7fb bf85 	b.w	80089a0 <z_impl_k_sem_give>
 800ca96:	bd10      	pop	{r4, pc}

0800ca98 <spi_stm32_release>:
{
 800ca98:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 800ca9a:	6900      	ldr	r0, [r0, #16]
 800ca9c:	f7ff ffec 	bl	800ca78 <spi_context_unlock_unconditionally>
}
 800caa0:	2000      	movs	r0, #0
 800caa2:	bd08      	pop	{r3, pc}

0800caa4 <LL_USART_ClearFlag_FE>:
{
 800caa4:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 800caa6:	6803      	ldr	r3, [r0, #0]
 800caa8:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800caaa:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 800caac:	6843      	ldr	r3, [r0, #4]
 800caae:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800cab0:	9b01      	ldr	r3, [sp, #4]
}
 800cab2:	b002      	add	sp, #8
 800cab4:	4770      	bx	lr

0800cab6 <uart_stm32_poll_in>:
{
 800cab6:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cab8:	6843      	ldr	r3, [r0, #4]
 800caba:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800cabc:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800cabe:	071a      	lsls	r2, r3, #28
 800cac0:	d501      	bpl.n	800cac6 <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(UartInstance);
 800cac2:	f7ff ffef 	bl	800caa4 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800cac6:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 800cac8:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800caca:	bf43      	ittte	mi
 800cacc:	6843      	ldrmi	r3, [r0, #4]
 800cace:	700b      	strbmi	r3, [r1, #0]
	return 0;
 800cad0:	2000      	movmi	r0, #0
		return -1;
 800cad2:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 800cad6:	bd08      	pop	{r3, pc}

0800cad8 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cad8:	6843      	ldr	r3, [r0, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800cadc:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 800cade:	0612      	lsls	r2, r2, #24
 800cae0:	d5fc      	bpl.n	800cadc <uart_stm32_poll_out+0x4>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800cae2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cae6:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800cae8:	6059      	str	r1, [r3, #4]
}
 800caea:	4770      	bx	lr

0800caec <uart_stm32_err_check>:
{
 800caec:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800caee:	6843      	ldr	r3, [r0, #4]
 800caf0:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800caf2:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 800caf4:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 800caf6:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 800caf8:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800cafa:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 800cafe:	bf48      	it	mi
 800cb00:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 800cb04:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 800cb06:	bf48      	it	mi
 800cb08:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 800cb0c:	07d3      	lsls	r3, r2, #31
 800cb0e:	d501      	bpl.n	800cb14 <uart_stm32_err_check+0x28>
		LL_USART_ClearFlag_ORE(UartInstance);
 800cb10:	f7ff ffc8 	bl	800caa4 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 800cb14:	0791      	lsls	r1, r2, #30
 800cb16:	d501      	bpl.n	800cb1c <uart_stm32_err_check+0x30>
		LL_USART_ClearFlag_PE(UartInstance);
 800cb18:	f7ff ffc4 	bl	800caa4 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 800cb1c:	0753      	lsls	r3, r2, #29
 800cb1e:	d501      	bpl.n	800cb24 <uart_stm32_err_check+0x38>
		LL_USART_ClearFlag_FE(UartInstance);
 800cb20:	f7ff ffc0 	bl	800caa4 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 800cb24:	f7ff ffbe 	bl	800caa4 <LL_USART_ClearFlag_FE>
}
 800cb28:	4610      	mov	r0, r2
 800cb2a:	bd08      	pop	{r3, pc}

0800cb2c <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cb2c:	6843      	ldr	r3, [r0, #4]
{
 800cb2e:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cb30:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 800cb32:	2300      	movs	r3, #0
 800cb34:	b2d8      	uxtb	r0, r3
 800cb36:	1a15      	subs	r5, r2, r0
 800cb38:	2d00      	cmp	r5, #0
 800cb3a:	dd04      	ble.n	800cb46 <uart_stm32_fifo_fill+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800cb3c:	6825      	ldr	r5, [r4, #0]
 800cb3e:	062d      	lsls	r5, r5, #24
 800cb40:	f103 0301 	add.w	r3, r3, #1
 800cb44:	d400      	bmi.n	800cb48 <uart_stm32_fifo_fill+0x1c>
}
 800cb46:	bd30      	pop	{r4, r5, pc}
  USARTx->DR = Value;
 800cb48:	5c08      	ldrb	r0, [r1, r0]
 800cb4a:	6060      	str	r0, [r4, #4]
}
 800cb4c:	e7f2      	b.n	800cb34 <uart_stm32_fifo_fill+0x8>

0800cb4e <uart_stm32_fifo_read>:
{
 800cb4e:	b538      	push	{r3, r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cb50:	6843      	ldr	r3, [r0, #4]
 800cb52:	681c      	ldr	r4, [r3, #0]
	while ((size - num_rx > 0) &&
 800cb54:	2500      	movs	r5, #0
 800cb56:	b2e8      	uxtb	r0, r5
 800cb58:	1a13      	subs	r3, r2, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	dd02      	ble.n	800cb64 <uart_stm32_fifo_read+0x16>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	069b      	lsls	r3, r3, #26
 800cb62:	d400      	bmi.n	800cb66 <uart_stm32_fifo_read+0x18>
}
 800cb64:	bd38      	pop	{r3, r4, r5, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800cb66:	6863      	ldr	r3, [r4, #4]
 800cb68:	540b      	strb	r3, [r1, r0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800cb6a:	6823      	ldr	r3, [r4, #0]
		if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800cb6c:	0718      	lsls	r0, r3, #28
 800cb6e:	d502      	bpl.n	800cb76 <uart_stm32_fifo_read+0x28>
			LL_USART_ClearFlag_ORE(UartInstance);
 800cb70:	4620      	mov	r0, r4
 800cb72:	f7ff ff97 	bl	800caa4 <LL_USART_ClearFlag_FE>
 800cb76:	3501      	adds	r5, #1
 800cb78:	e7ed      	b.n	800cb56 <uart_stm32_fifo_read+0x8>

0800cb7a <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cb7a:	6843      	ldr	r3, [r0, #4]
 800cb7c:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800cb7e:	68d3      	ldr	r3, [r2, #12]
 800cb80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb84:	60d3      	str	r3, [r2, #12]
}
 800cb86:	4770      	bx	lr

0800cb88 <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cb88:	6843      	ldr	r3, [r0, #4]
 800cb8a:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800cb8c:	68d3      	ldr	r3, [r2, #12]
 800cb8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb92:	60d3      	str	r3, [r2, #12]
}
 800cb94:	4770      	bx	lr

0800cb96 <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cb96:	6843      	ldr	r3, [r0, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800cb9a:	6818      	ldr	r0, [r3, #0]
	return LL_USART_IsActiveFlag_TXE(UartInstance) &&
 800cb9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 800cba0:	bf1c      	itt	ne
 800cba2:	68d8      	ldrne	r0, [r3, #12]
 800cba4:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 800cba8:	4770      	bx	lr

0800cbaa <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cbaa:	6843      	ldr	r3, [r0, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800cbae:	6818      	ldr	r0, [r3, #0]
}
 800cbb0:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800cbb4:	4770      	bx	lr

0800cbb6 <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cbb6:	6843      	ldr	r3, [r0, #4]
 800cbb8:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800cbba:	68d3      	ldr	r3, [r2, #12]
 800cbbc:	f043 0320 	orr.w	r3, r3, #32
 800cbc0:	60d3      	str	r3, [r2, #12]
}
 800cbc2:	4770      	bx	lr

0800cbc4 <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cbc4:	6843      	ldr	r3, [r0, #4]
 800cbc6:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800cbc8:	68d3      	ldr	r3, [r2, #12]
 800cbca:	f023 0320 	bic.w	r3, r3, #32
 800cbce:	60d3      	str	r3, [r2, #12]
}
 800cbd0:	4770      	bx	lr

0800cbd2 <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cbd2:	6843      	ldr	r3, [r0, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800cbd6:	6818      	ldr	r0, [r3, #0]
}
 800cbd8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800cbdc:	4770      	bx	lr

0800cbde <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cbde:	6843      	ldr	r3, [r0, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 800cbe4:	0691      	lsls	r1, r2, #26
 800cbe6:	d502      	bpl.n	800cbee <uart_stm32_irq_is_pending+0x10>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 800cbe8:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
 800cbea:	0692      	lsls	r2, r2, #26
 800cbec:	d407      	bmi.n	800cbfe <uart_stm32_irq_is_pending+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800cbee:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 800cbf0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800cbf4:	d004      	beq.n	800cc00 <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 800cbf6:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(UartInstance) &&
 800cbf8:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800cbfc:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 800cbfe:	2001      	movs	r0, #1
}
 800cc00:	4770      	bx	lr

0800cc02 <uart_stm32_irq_update>:
}
 800cc02:	2001      	movs	r0, #1
 800cc04:	4770      	bx	lr

0800cc06 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 800cc06:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 800cc08:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 800cc0c:	4770      	bx	lr

0800cc0e <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 800cc0e:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 800cc10:	6893      	ldr	r3, [r2, #8]
 800cc12:	b10b      	cbz	r3, 800cc18 <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 800cc14:	68d1      	ldr	r1, [r2, #12]
 800cc16:	4718      	bx	r3
}
 800cc18:	4770      	bx	lr

0800cc1a <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,	\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 800cc1a:	b508      	push	{r3, lr}
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	2025      	movs	r0, #37	; 0x25
 800cc20:	4611      	mov	r1, r2
 800cc22:	f7f9 f9b1 	bl	8005f88 <z_arm_irq_priority_set>
 800cc26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cc2a:	2025      	movs	r0, #37	; 0x25
 800cc2c:	f7f9 b99c 	b.w	8005f68 <arch_irq_enable>

0800cc30 <uart_stm32_irq_config_func_1>:
 800cc30:	b508      	push	{r3, lr}
 800cc32:	2200      	movs	r2, #0
 800cc34:	2026      	movs	r0, #38	; 0x26
 800cc36:	4611      	mov	r1, r2
 800cc38:	f7f9 f9a6 	bl	8005f88 <z_arm_irq_priority_set>
 800cc3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cc40:	2026      	movs	r0, #38	; 0x26
 800cc42:	f7f9 b991 	b.w	8005f68 <arch_irq_enable>

0800cc46 <uart_stm32_irq_config_func_2>:
 800cc46:	b508      	push	{r3, lr}
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2027      	movs	r0, #39	; 0x27
 800cc4c:	4611      	mov	r1, r2
 800cc4e:	f7f9 f99b 	bl	8005f88 <z_arm_irq_priority_set>
 800cc52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cc56:	2027      	movs	r0, #39	; 0x27
 800cc58:	f7f9 b986 	b.w	8005f68 <arch_irq_enable>

0800cc5c <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 800cc5c:	6903      	ldr	r3, [r0, #16]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cc62:	6843      	ldr	r3, [r0, #4]
 800cc64:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800cc66:	68d3      	ldr	r3, [r2, #12]
 800cc68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800cc6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc70:	d029      	beq.n	800ccc6 <uart_stm32_config_get+0x6a>
		return UART_CFG_PARITY_NONE;
 800cc72:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 800cc76:	f1dc 0300 	rsbs	r3, ip, #0
 800cc7a:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800cc7e:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800cc80:	6913      	ldr	r3, [r2, #16]
 800cc82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800cc86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc8a:	d01e      	beq.n	800ccca <uart_stm32_config_get+0x6e>
 800cc8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cc90:	d01d      	beq.n	800ccce <uart_stm32_config_get+0x72>
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	bf14      	ite	ne
 800cc96:	2303      	movne	r3, #3
 800cc98:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800cc9a:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800cc9c:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800cc9e:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 800cca0:	04c0      	lsls	r0, r0, #19
 800cca2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cca6:	d514      	bpl.n	800ccd2 <uart_stm32_config_get+0x76>
			return UART_CFG_DATA_BITS_9;
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	bf14      	ite	ne
 800ccac:	2303      	movne	r3, #3
 800ccae:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800ccb0:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800ccb2:	6953      	ldr	r3, [r2, #20]
 800ccb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800ccb8:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800ccbc:	4253      	negs	r3, r2
 800ccbe:	4153      	adcs	r3, r2
 800ccc0:	71cb      	strb	r3, [r1, #7]
}
 800ccc2:	2000      	movs	r0, #0
 800ccc4:	4770      	bx	lr
	switch (parity) {
 800ccc6:	2302      	movs	r3, #2
 800ccc8:	e7d9      	b.n	800cc7e <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 800ccca:	2300      	movs	r3, #0
 800cccc:	e7e5      	b.n	800cc9a <uart_stm32_config_get+0x3e>
		return UART_CFG_STOP_BITS_1_5;
 800ccce:	2302      	movs	r3, #2
 800ccd0:	e7e3      	b.n	800cc9a <uart_stm32_config_get+0x3e>
			return UART_CFG_DATA_BITS_7;
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	bf0c      	ite	eq
 800ccd6:	2303      	moveq	r3, #3
 800ccd8:	2302      	movne	r3, #2
 800ccda:	e7e9      	b.n	800ccb0 <uart_stm32_config_get+0x54>

0800ccdc <z_device_state_init>:
}
 800ccdc:	4770      	bx	lr

0800ccde <z_device_ready>:
	if (dev == NULL) {
 800ccde:	b138      	cbz	r0, 800ccf0 <z_device_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
 800cce0:	68c3      	ldr	r3, [r0, #12]
 800cce2:	8818      	ldrh	r0, [r3, #0]
 800cce4:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800cce8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800ccec:	4258      	negs	r0, r3
 800ccee:	4158      	adcs	r0, r3
}
 800ccf0:	4770      	bx	lr

0800ccf2 <arch_system_halt>:
	__asm__ volatile(
 800ccf2:	f04f 0210 	mov.w	r2, #16
 800ccf6:	f3ef 8311 	mrs	r3, BASEPRI
 800ccfa:	f382 8811 	msr	BASEPRI, r2
 800ccfe:	f3bf 8f6f 	isb	sy
	for (;;) {
 800cd02:	e7fe      	b.n	800cd02 <arch_system_halt+0x10>

0800cd04 <k_mem_slab_init>:
{
 800cd04:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
 800cd06:	2400      	movs	r4, #0
 800cd08:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
 800cd0a:	7204      	strb	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800cd0c:	ea41 0402 	orr.w	r4, r1, r2
 800cd10:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
 800cd14:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
 800cd18:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800cd1a:	d10c      	bne.n	800cd36 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
 800cd1c:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 800cd1e:	42a3      	cmp	r3, r4
 800cd20:	d103      	bne.n	800cd2a <k_mem_slab_init+0x26>
 800cd22:	e9c0 0000 	strd	r0, r0, [r0]
}
 800cd26:	2000      	movs	r0, #0
}
 800cd28:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
 800cd2a:	6985      	ldr	r5, [r0, #24]
 800cd2c:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 800cd2e:	3401      	adds	r4, #1
		slab->free_list = p;
 800cd30:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
 800cd32:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
 800cd34:	e7f3      	b.n	800cd1e <k_mem_slab_init+0x1a>
		return -EINVAL;
 800cd36:	f06f 0015 	mvn.w	r0, #21
	return rc;
 800cd3a:	e7f5      	b.n	800cd28 <k_mem_slab_init+0x24>

0800cd3c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3e:	4604      	mov	r4, r0
 800cd40:	460d      	mov	r5, r1
 800cd42:	f04f 0310 	mov.w	r3, #16
 800cd46:	f3ef 8611 	mrs	r6, BASEPRI
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 800cd52:	6987      	ldr	r7, [r0, #24]
 800cd54:	b97f      	cbnz	r7, 800cd76 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 800cd56:	f000 f9c1 	bl	800d0dc <z_unpend_first_thread>

		if (pending_thread != NULL) {
 800cd5a:	b160      	cbz	r0, 800cd76 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 800cd5c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800cd5e:	6142      	str	r2, [r0, #20]
 800cd60:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
			z_ready_thread(pending_thread);
 800cd64:	f000 f973 	bl	800d04e <z_ready_thread>
			z_reschedule(&slab->lock, key);
 800cd68:	4631      	mov	r1, r6
 800cd6a:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 800cd6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
 800cd72:	f7fb bec5 	b.w	8008b00 <z_reschedule>
	**(char ***) mem = slab->free_list;
 800cd76:	682b      	ldr	r3, [r5, #0]
 800cd78:	69a2      	ldr	r2, [r4, #24]
 800cd7a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
 800cd80:	69e3      	ldr	r3, [r4, #28]
 800cd82:	3b01      	subs	r3, #1
 800cd84:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 800cd86:	f386 8811 	msr	BASEPRI, r6
 800cd8a:	f3bf 8f6f 	isb	sy
}
 800cd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd90 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd90:	f3ef 8005 	mrs	r0, IPSR
}
 800cd94:	3800      	subs	r0, #0
 800cd96:	bf18      	it	ne
 800cd98:	2001      	movne	r0, #1
 800cd9a:	4770      	bx	lr

0800cd9c <k_thread_name_get>:
}
 800cd9c:	3078      	adds	r0, #120	; 0x78
 800cd9e:	4770      	bx	lr

0800cda0 <z_impl_k_thread_start>:
	z_sched_start(thread);
 800cda0:	f7fc b844 	b.w	8008e2c <z_sched_start>

0800cda4 <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
 800cda4:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
 800cda6:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
	size_t unused = 0;
 800cdaa:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d102      	bne.n	800cdb6 <z_impl_k_thread_stack_space_get+0x12>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
 800cdb0:	600b      	str	r3, [r1, #0]

	return 0;
}
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
 800cdb6:	5ce0      	ldrb	r0, [r4, r3]
 800cdb8:	28aa      	cmp	r0, #170	; 0xaa
 800cdba:	d1f9      	bne.n	800cdb0 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
 800cdbc:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
 800cdbe:	e7f5      	b.n	800cdac <z_impl_k_thread_stack_space_get+0x8>

0800cdc0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800cdc0:	b508      	push	{r3, lr}
	__asm__ volatile(
 800cdc2:	f04f 0210 	mov.w	r2, #16
 800cdc6:	f3ef 8311 	mrs	r3, BASEPRI
 800cdca:	f382 8811 	msr	BASEPRI, r2
 800cdce:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800cdd2:	f7f9 f9ab 	bl	800612c <arch_cpu_idle>
 800cdd6:	e7f4      	b.n	800cdc2 <idle+0x2>

0800cdd8 <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
 800cdd8:	4603      	mov	r3, r0
 800cdda:	b510      	push	{r4, lr}
 800cddc:	4608      	mov	r0, r1
 800cdde:	f04f 0210 	mov.w	r2, #16
 800cde2:	f3ef 8411 	mrs	r4, BASEPRI
 800cde6:	f382 8811 	msr	BASEPRI, r2
 800cdea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);

	if (msgq->used_msgs > 0U) {
 800cdee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdf0:	b14a      	cbz	r2, 800ce06 <z_impl_k_msgq_peek+0x2e>
 800cdf2:	68da      	ldr	r2, [r3, #12]
 800cdf4:	69d9      	ldr	r1, [r3, #28]
 800cdf6:	f000 fc6f 	bl	800d6d8 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		result = 0;
 800cdfa:	2000      	movs	r0, #0
	__asm__ volatile(
 800cdfc:	f384 8811 	msr	BASEPRI, r4
 800ce00:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, peek, msgq, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800ce04:	bd10      	pop	{r4, pc}
		result = -ENOMSG;
 800ce06:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800ce0a:	e7f7      	b.n	800cdfc <z_impl_k_msgq_peek+0x24>

0800ce0c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 800ce0c:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800ce10:	428b      	cmp	r3, r1
 800ce12:	d001      	beq.n	800ce18 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 800ce14:	f7fc b828 	b.w	8008e68 <z_set_prio>
}
 800ce18:	2000      	movs	r0, #0
 800ce1a:	4770      	bx	lr

0800ce1c <z_impl_k_mutex_init>:
	mutex->owner = NULL;
 800ce1c:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
 800ce1e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800ce22:	e9c0 0000 	strd	r0, r0, [r0]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	4770      	bx	lr

0800ce2a <queue_insert>:
{
 800ce2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce2e:	4699      	mov	r9, r3
 800ce30:	4604      	mov	r4, r0
 800ce32:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800ce36:	460d      	mov	r5, r1
 800ce38:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 800ce3a:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 800ce3e:	f04f 0210 	mov.w	r2, #16
 800ce42:	f3ef 8611 	mrs	r6, BASEPRI
 800ce46:	f382 8811 	msr	BASEPRI, r2
 800ce4a:	f3bf 8f6f 	isb	sy
	if (is_append) {
 800ce4e:	b103      	cbz	r3, 800ce52 <queue_insert+0x28>
	return list->tail;
 800ce50:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 800ce52:	f104 000c 	add.w	r0, r4, #12
 800ce56:	f000 f941 	bl	800d0dc <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
 800ce5a:	b160      	cbz	r0, 800ce76 <queue_insert+0x4c>
 800ce5c:	2400      	movs	r4, #0
 800ce5e:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
 800ce62:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
 800ce66:	f000 f8f2 	bl	800d04e <z_ready_thread>
	z_reschedule(&queue->lock, key);
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	4631      	mov	r1, r6
 800ce6e:	f7fb fe47 	bl	8008b00 <z_reschedule>
	return 0;
 800ce72:	2000      	movs	r0, #0
 800ce74:	e00c      	b.n	800ce90 <queue_insert+0x66>
	if (alloc) {
 800ce76:	f1b9 0f00 	cmp.w	r9, #0
 800ce7a:	d01b      	beq.n	800ceb4 <queue_insert+0x8a>
	return z_thread_aligned_alloc(0, size);
 800ce7c:	2108      	movs	r1, #8
 800ce7e:	f7fc fbff 	bl	8009680 <z_thread_aligned_alloc>
		if (anode == NULL) {
 800ce82:	b938      	cbnz	r0, 800ce94 <queue_insert+0x6a>
	__asm__ volatile(
 800ce84:	f386 8811 	msr	BASEPRI, r6
 800ce88:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
 800ce8c:	f06f 000b 	mvn.w	r0, #11
}
 800ce90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
 800ce94:	2301      	movs	r3, #1
		anode->data = data;
 800ce96:	f8c0 8004 	str.w	r8, [r0, #4]
 800ce9a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800ce9c:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 800ce9e:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
 800cea2:	b95d      	cbnz	r5, 800cebc <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	4313      	orrs	r3, r2
 800cea8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 800ceaa:	6863      	ldr	r3, [r4, #4]
	list->head = node;
 800ceac:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 800ceae:	b973      	cbnz	r3, 800cece <queue_insert+0xa4>
	list->tail = node;
 800ceb0:	6060      	str	r0, [r4, #4]
}
 800ceb2:	e00c      	b.n	800cece <queue_insert+0xa4>
	node->next_and_flags = flags;
 800ceb4:	f8c8 9000 	str.w	r9, [r8]
}
 800ceb8:	4640      	mov	r0, r8
 800ceba:	e7ef      	b.n	800ce9c <queue_insert+0x72>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800cebc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 800cebe:	f033 0303 	bics.w	r3, r3, #3
 800cec2:	d110      	bne.n	800cee6 <queue_insert+0xbc>
	parent->next_and_flags = cur_flags | (unative_t)child;
 800cec4:	6002      	str	r2, [r0, #0]
	return list->tail;
 800cec6:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
 800cec8:	b93a      	cbnz	r2, 800ceda <queue_insert+0xb0>
	list->head = node;
 800ceca:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
 800cece:	2104      	movs	r1, #4
 800ced0:	f104 0014 	add.w	r0, r4, #20
 800ced4:	f000 fb1f 	bl	800d516 <z_handle_obj_poll_events>
 800ced8:	e7c7      	b.n	800ce6a <queue_insert+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800ceda:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 800cedc:	f003 0303 	and.w	r3, r3, #3
 800cee0:	4303      	orrs	r3, r0
 800cee2:	6013      	str	r3, [r2, #0]
 800cee4:	e7e4      	b.n	800ceb0 <queue_insert+0x86>
 800cee6:	4313      	orrs	r3, r2
 800cee8:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800ceea:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 800ceec:	f003 0303 	and.w	r3, r3, #3
 800cef0:	4303      	orrs	r3, r0
 800cef2:	602b      	str	r3, [r5, #0]
}
 800cef4:	e7eb      	b.n	800cece <queue_insert+0xa4>

0800cef6 <z_queue_node_peek>:
{
 800cef6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
 800cef8:	4604      	mov	r4, r0
 800cefa:	b130      	cbz	r0, 800cf0a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800cefc:	6802      	ldr	r2, [r0, #0]
 800cefe:	0793      	lsls	r3, r2, #30
 800cf00:	d003      	beq.n	800cf0a <z_queue_node_peek+0x14>
		ret = anode->data;
 800cf02:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 800cf04:	b109      	cbz	r1, 800cf0a <z_queue_node_peek+0x14>
			k_free(anode);
 800cf06:	f000 fb34 	bl	800d572 <k_free>
}
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	bd10      	pop	{r4, pc}

0800cf0e <k_queue_append>:
{
 800cf0e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
 800cf10:	2301      	movs	r3, #1
 800cf12:	9300      	str	r3, [sp, #0]
 800cf14:	2300      	movs	r3, #0
{
 800cf16:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
 800cf18:	4619      	mov	r1, r3
 800cf1a:	f7ff ff86 	bl	800ce2a <queue_insert>
}
 800cf1e:	b003      	add	sp, #12
 800cf20:	f85d fb04 	ldr.w	pc, [sp], #4

0800cf24 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800cf24:	b15a      	cbz	r2, 800cf3e <z_impl_k_sem_init+0x1a>
 800cf26:	428a      	cmp	r2, r1
 800cf28:	d309      	bcc.n	800cf3e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
 800cf2a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 800cf2e:	e9c0 1202 	strd	r1, r2, [r0, #8]
 800cf32:	e9c0 0000 	strd	r0, r0, [r0]
 800cf36:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
 800cf3a:	2000      	movs	r0, #0
 800cf3c:	4770      	bx	lr
		return -EINVAL;
 800cf3e:	f06f 0015 	mvn.w	r0, #21
}
 800cf42:	4770      	bx	lr

0800cf44 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 800cf44:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800cf48:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800cf4a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800cf4c:	2300      	movs	r3, #0
	node->prev = NULL;
 800cf4e:	e9c0 3300 	strd	r3, r3, [r0]
}
 800cf52:	4770      	bx	lr

0800cf54 <unpend_thread_no_timeout>:
{
 800cf54:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 800cf56:	f7ff fff5 	bl	800cf44 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800cf5a:	7b43      	ldrb	r3, [r0, #13]
 800cf5c:	f023 0302 	bic.w	r3, r3, #2
 800cf60:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	6083      	str	r3, [r0, #8]
}
 800cf66:	bd08      	pop	{r3, pc}

0800cf68 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800cf68:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800cf6c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 800cf70:	4283      	cmp	r3, r0
		return b2 - b1;
 800cf72:	bf14      	ite	ne
 800cf74:	1ac0      	subne	r0, r0, r3
	return 0;
 800cf76:	2000      	moveq	r0, #0
}
 800cf78:	4770      	bx	lr

0800cf7a <z_unpend_thread_no_timeout>:
{
 800cf7a:	b508      	push	{r3, lr}
	__asm__ volatile(
 800cf7c:	f04f 0310 	mov.w	r3, #16
 800cf80:	f3ef 8111 	mrs	r1, BASEPRI
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 800cf8c:	f7ff ffe2 	bl	800cf54 <unpend_thread_no_timeout>
	__asm__ volatile(
 800cf90:	f381 8811 	msr	BASEPRI, r1
 800cf94:	f3bf 8f6f 	isb	sy
}
 800cf98:	bd08      	pop	{r3, pc}

0800cf9a <z_unpend_thread>:
{
 800cf9a:	b510      	push	{r4, lr}
	__asm__ volatile(
 800cf9c:	f04f 0310 	mov.w	r3, #16
 800cfa0:	f3ef 8411 	mrs	r4, BASEPRI
 800cfa4:	f383 8811 	msr	BASEPRI, r3
 800cfa8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 800cfac:	f7ff ffd2 	bl	800cf54 <unpend_thread_no_timeout>
	__asm__ volatile(
 800cfb0:	f384 8811 	msr	BASEPRI, r4
 800cfb4:	f3bf 8f6f 	isb	sy
}
 800cfb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfbc:	3018      	adds	r0, #24
 800cfbe:	f000 b8d3 	b.w	800d168 <z_abort_timeout>

0800cfc2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	b920      	cbnz	r0, 800cfd0 <z_reschedule_irqlock+0xe>
 800cfc6:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 800cfca:	b90a      	cbnz	r2, 800cfd0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 800cfcc:	f7f8 bf56 	b.w	8005e7c <arch_swap>
 800cfd0:	f383 8811 	msr	BASEPRI, r3
 800cfd4:	f3bf 8f6f 	isb	sy
}
 800cfd8:	4770      	bx	lr

0800cfda <z_reschedule_unlocked>:
	__asm__ volatile(
 800cfda:	f04f 0310 	mov.w	r3, #16
 800cfde:	f3ef 8011 	mrs	r0, BASEPRI
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800cfea:	f7ff bfea 	b.w	800cfc2 <z_reschedule_irqlock>

0800cfee <z_priq_dumb_best>:
	return list->head == list;
 800cfee:	6803      	ldr	r3, [r0, #0]
}
 800cff0:	4298      	cmp	r0, r3
 800cff2:	bf14      	ite	ne
 800cff4:	4618      	movne	r0, r3
 800cff6:	2000      	moveq	r0, #0
 800cff8:	4770      	bx	lr

0800cffa <add_to_waitq_locked>:
{
 800cffa:	b538      	push	{r3, r4, r5, lr}
 800cffc:	4604      	mov	r4, r0
 800cffe:	460d      	mov	r5, r1
	unready_thread(thread);
 800d000:	f7fb fdc4 	bl	8008b8c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 800d004:	7b63      	ldrb	r3, [r4, #13]
 800d006:	f043 0302 	orr.w	r3, r3, #2
 800d00a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 800d00c:	b195      	cbz	r5, 800d034 <add_to_waitq_locked+0x3a>
 800d00e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 800d010:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d012:	429d      	cmp	r5, r3
 800d014:	d015      	beq.n	800d042 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800d016:	b1a3      	cbz	r3, 800d042 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 800d018:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 800d01c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 800d020:	4291      	cmp	r1, r2
 800d022:	d008      	beq.n	800d036 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 800d024:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 800d026:	2a00      	cmp	r2, #0
 800d028:	dd05      	ble.n	800d036 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 800d02a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800d02c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800d030:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800d032:	605c      	str	r4, [r3, #4]
}
 800d034:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 800d036:	686a      	ldr	r2, [r5, #4]
 800d038:	4293      	cmp	r3, r2
 800d03a:	d002      	beq.n	800d042 <add_to_waitq_locked+0x48>
 800d03c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1ec      	bne.n	800d01c <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 800d042:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 800d044:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 800d048:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800d04a:	606c      	str	r4, [r5, #4]
}
 800d04c:	e7f2      	b.n	800d034 <add_to_waitq_locked+0x3a>

0800d04e <z_ready_thread>:
{
 800d04e:	b510      	push	{r4, lr}
 800d050:	f04f 0310 	mov.w	r3, #16
 800d054:	f3ef 8411 	mrs	r4, BASEPRI
 800d058:	f383 8811 	msr	BASEPRI, r3
 800d05c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 800d060:	f7fb feae 	bl	8008dc0 <ready_thread>
	__asm__ volatile(
 800d064:	f384 8811 	msr	BASEPRI, r4
 800d068:	f3bf 8f6f 	isb	sy
}
 800d06c:	bd10      	pop	{r4, pc}

0800d06e <z_thread_timeout>:
{
 800d06e:	b510      	push	{r4, lr}
 800d070:	4601      	mov	r1, r0
	__asm__ volatile(
 800d072:	f04f 0310 	mov.w	r3, #16
 800d076:	f3ef 8411 	mrs	r4, BASEPRI
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
		if (!killed) {
 800d082:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 800d086:	f013 0f28 	tst.w	r3, #40	; 0x28
 800d08a:	d10d      	bne.n	800d0a8 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 800d08c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 800d090:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 800d092:	b10b      	cbz	r3, 800d098 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 800d094:	f7ff ff5e 	bl	800cf54 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800d098:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 800d09c:	f023 0314 	bic.w	r3, r3, #20
 800d0a0:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 800d0a4:	f7fb fe8c 	bl	8008dc0 <ready_thread>
	__asm__ volatile(
 800d0a8:	f384 8811 	msr	BASEPRI, r4
 800d0ac:	f3bf 8f6f 	isb	sy
}
 800d0b0:	bd10      	pop	{r4, pc}

0800d0b2 <z_unpend1_no_timeout>:
{
 800d0b2:	b510      	push	{r4, lr}
	__asm__ volatile(
 800d0b4:	f04f 0310 	mov.w	r3, #16
 800d0b8:	f3ef 8411 	mrs	r4, BASEPRI
 800d0bc:	f383 8811 	msr	BASEPRI, r3
 800d0c0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 800d0c4:	f7ff ff93 	bl	800cfee <z_priq_dumb_best>
		if (thread != NULL) {
 800d0c8:	4601      	mov	r1, r0
 800d0ca:	b108      	cbz	r0, 800d0d0 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
 800d0cc:	f7ff ff42 	bl	800cf54 <unpend_thread_no_timeout>
	__asm__ volatile(
 800d0d0:	f384 8811 	msr	BASEPRI, r4
 800d0d4:	f3bf 8f6f 	isb	sy
}
 800d0d8:	4608      	mov	r0, r1
 800d0da:	bd10      	pop	{r4, pc}

0800d0dc <z_unpend_first_thread>:
{
 800d0dc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800d0de:	f04f 0310 	mov.w	r3, #16
 800d0e2:	f3ef 8511 	mrs	r5, BASEPRI
 800d0e6:	f383 8811 	msr	BASEPRI, r3
 800d0ea:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 800d0ee:	f7ff ff7e 	bl	800cfee <z_priq_dumb_best>
		if (thread != NULL) {
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	b120      	cbz	r0, 800d100 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 800d0f6:	f7ff ff2d 	bl	800cf54 <unpend_thread_no_timeout>
 800d0fa:	3018      	adds	r0, #24
 800d0fc:	f000 f834 	bl	800d168 <z_abort_timeout>
	__asm__ volatile(
 800d100:	f385 8811 	msr	BASEPRI, r5
 800d104:	f3bf 8f6f 	isb	sy
}
 800d108:	4620      	mov	r0, r4
 800d10a:	bd38      	pop	{r3, r4, r5, pc}

0800d10c <z_unpend_all>:
{
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	4605      	mov	r5, r0
	int need_sched = 0;
 800d110:	2000      	movs	r0, #0
	return list->head == list;
 800d112:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d114:	42a5      	cmp	r5, r4
 800d116:	d000      	beq.n	800d11a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800d118:	b904      	cbnz	r4, 800d11c <z_unpend_all+0x10>
}
 800d11a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
 800d11c:	4620      	mov	r0, r4
 800d11e:	f7ff ff3c 	bl	800cf9a <z_unpend_thread>
		z_ready_thread(thread);
 800d122:	4620      	mov	r0, r4
 800d124:	f7ff ff93 	bl	800d04e <z_ready_thread>
		need_sched = 1;
 800d128:	2001      	movs	r0, #1
 800d12a:	e7f2      	b.n	800d112 <z_unpend_all+0x6>

0800d12c <z_sched_wake>:
{
 800d12c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800d12e:	f04f 0310 	mov.w	r3, #16
 800d132:	f3ef 8511 	mrs	r5, BASEPRI
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 800d13e:	f7ff ff56 	bl	800cfee <z_priq_dumb_best>
		if (thread != NULL) {
 800d142:	4604      	mov	r4, r0
 800d144:	b158      	cbz	r0, 800d15e <z_sched_wake+0x32>
 800d146:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
 800d14a:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
 800d14c:	f7ff ff02 	bl	800cf54 <unpend_thread_no_timeout>
 800d150:	3018      	adds	r0, #24
 800d152:	f000 f809 	bl	800d168 <z_abort_timeout>
			ready_thread(thread);
 800d156:	4620      	mov	r0, r4
 800d158:	f7fb fe32 	bl	8008dc0 <ready_thread>
			ret = true;
 800d15c:	2001      	movs	r0, #1
	__asm__ volatile(
 800d15e:	f385 8811 	msr	BASEPRI, r5
 800d162:	f3bf 8f6f 	isb	sy
}
 800d166:	bd38      	pop	{r3, r4, r5, pc}

0800d168 <z_abort_timeout>:
{
 800d168:	b510      	push	{r4, lr}
	__asm__ volatile(
 800d16a:	f04f 0210 	mov.w	r2, #16
 800d16e:	f3ef 8411 	mrs	r4, BASEPRI
 800d172:	f382 8811 	msr	BASEPRI, r2
 800d176:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 800d17a:	6803      	ldr	r3, [r0, #0]
 800d17c:	b13b      	cbz	r3, 800d18e <z_abort_timeout+0x26>
			remove_timeout(to);
 800d17e:	f7fc f831 	bl	80091e4 <remove_timeout>
			ret = 0;
 800d182:	2000      	movs	r0, #0
	__asm__ volatile(
 800d184:	f384 8811 	msr	BASEPRI, r4
 800d188:	f3bf 8f6f 	isb	sy
}
 800d18c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 800d18e:	f06f 0015 	mvn.w	r0, #21
 800d192:	e7f7      	b.n	800d184 <z_abort_timeout+0x1c>

0800d194 <z_set_timeout_expiry>:
{
 800d194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d196:	4604      	mov	r4, r0
 800d198:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
 800d19a:	f04f 0310 	mov.w	r3, #16
 800d19e:	f3ef 8511 	mrs	r5, BASEPRI
 800d1a2:	f383 8811 	msr	BASEPRI, r3
 800d1a6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 800d1aa:	f7fb fff3 	bl	8009194 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800d1ae:	2801      	cmp	r0, #1
 800d1b0:	dd05      	ble.n	800d1be <z_set_timeout_expiry+0x2a>
 800d1b2:	42a0      	cmp	r0, r4
 800d1b4:	9901      	ldr	r1, [sp, #4]
 800d1b6:	db02      	blt.n	800d1be <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	f7f8 fdbb 	bl	8005d34 <sys_clock_set_timeout>
	__asm__ volatile(
 800d1be:	f385 8811 	msr	BASEPRI, r5
 800d1c2:	f3bf 8f6f 	isb	sy
}
 800d1c6:	b003      	add	sp, #12
 800d1c8:	bd30      	pop	{r4, r5, pc}

0800d1ca <sys_clock_tick_get_32>:
{
 800d1ca:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800d1cc:	f7fc f8f8 	bl	80093c0 <sys_clock_tick_get>
}
 800d1d0:	bd08      	pop	{r3, pc}

0800d1d2 <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 800d1d2:	f7fc b8f5 	b.w	80093c0 <sys_clock_tick_get>

0800d1d6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800d1d6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800d1da:	bf08      	it	eq
 800d1dc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 800d1e0:	b538      	push	{r3, r4, r5, lr}
 800d1e2:	4605      	mov	r5, r0
 800d1e4:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800d1e6:	d020      	beq.n	800d22a <sys_clock_timeout_end_calc+0x54>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800d1e8:	ea51 0300 	orrs.w	r3, r1, r0
 800d1ec:	d103      	bne.n	800d1f6 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 800d1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
 800d1f2:	f7fc b8e5 	b.w	80093c0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 800d1f6:	f06f 0301 	mvn.w	r3, #1
 800d1fa:	1a1b      	subs	r3, r3, r0
 800d1fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d200:	eb61 0204 	sbc.w	r2, r1, r4
 800d204:	2a00      	cmp	r2, #0
 800d206:	db02      	blt.n	800d20e <sys_clock_timeout_end_calc+0x38>
			return Z_TICK_ABS(dt);
 800d208:	4618      	mov	r0, r3
 800d20a:	4611      	mov	r1, r2
}
 800d20c:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
 800d20e:	f7fc f8d7 	bl	80093c0 <sys_clock_tick_get>
 800d212:	2d01      	cmp	r5, #1
 800d214:	4622      	mov	r2, r4
 800d216:	f174 0400 	sbcs.w	r4, r4, #0
 800d21a:	462b      	mov	r3, r5
 800d21c:	bfbc      	itt	lt
 800d21e:	2301      	movlt	r3, #1
 800d220:	2200      	movlt	r2, #0
 800d222:	1818      	adds	r0, r3, r0
 800d224:	eb41 0102 	adc.w	r1, r1, r2
 800d228:	e7f0      	b.n	800d20c <sys_clock_timeout_end_calc+0x36>
		return UINT64_MAX;
 800d22a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d22e:	4601      	mov	r1, r0
 800d230:	e7ec      	b.n	800d20c <sys_clock_timeout_end_calc+0x36>

0800d232 <k_timer_init>:
	timer->status = 0U;
 800d232:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 800d234:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 800d238:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
 800d23c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 800d240:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 800d244:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 800d246:	6343      	str	r3, [r0, #52]	; 0x34
}
 800d248:	4770      	bx	lr

0800d24a <z_impl_k_timer_stop>:
{
 800d24a:	b510      	push	{r4, lr}
 800d24c:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
 800d24e:	f7ff ff8b 	bl	800d168 <z_abort_timeout>
	if (inactive) {
 800d252:	b9b0      	cbnz	r0, 800d282 <z_impl_k_timer_stop+0x38>
	if (timer->stop_fn != NULL) {
 800d254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d256:	b10b      	cbz	r3, 800d25c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800d258:	4620      	mov	r0, r4
 800d25a:	4798      	blx	r3
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800d25c:	f104 0018 	add.w	r0, r4, #24
 800d260:	f7ff ff27 	bl	800d0b2 <z_unpend1_no_timeout>
		if (pending_thread != NULL) {
 800d264:	b168      	cbz	r0, 800d282 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 800d266:	f7ff fef2 	bl	800d04e <z_ready_thread>
	__asm__ volatile(
 800d26a:	f04f 0310 	mov.w	r3, #16
 800d26e:	f3ef 8011 	mrs	r0, BASEPRI
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
}
 800d27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 800d27e:	f7ff bea0 	b.w	800cfc2 <z_reschedule_irqlock>
 800d282:	bd10      	pop	{r4, pc}

0800d284 <add_event>:
{
 800d284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d286:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800d288:	e9d0 2300 	ldrd	r2, r3, [r0]
 800d28c:	4290      	cmp	r0, r2
 800d28e:	4604      	mov	r4, r0
 800d290:	460d      	mov	r5, r1
 800d292:	d105      	bne.n	800d2a0 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
 800d294:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
 800d296:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
 800d29a:	601d      	str	r5, [r3, #0]
	list->tail = node;
 800d29c:	6065      	str	r5, [r4, #4]
}
 800d29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d0f7      	beq.n	800d294 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800d2a4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800d2a6:	b100      	cbz	r0, 800d2aa <add_event+0x26>
 800d2a8:	3860      	subs	r0, #96	; 0x60
 800d2aa:	b107      	cbz	r7, 800d2ae <add_event+0x2a>
 800d2ac:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800d2ae:	4639      	mov	r1, r7
 800d2b0:	f7ff fe5a 	bl	800cf68 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	dced      	bgt.n	800d294 <add_event+0x10>
	return list->head == list;
 800d2b8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d2ba:	42b4      	cmp	r4, r6
 800d2bc:	d0ea      	beq.n	800d294 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d2be:	2e00      	cmp	r6, #0
 800d2c0:	d0e8      	beq.n	800d294 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
 800d2c2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800d2c4:	b101      	cbz	r1, 800d2c8 <add_event+0x44>
 800d2c6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 800d2c8:	4638      	mov	r0, r7
 800d2ca:	f7ff fe4d 	bl	800cf68 <z_sched_prio_cmp>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	dd05      	ble.n	800d2de <add_event+0x5a>
	sys_dnode_t *const prev = successor->prev;
 800d2d2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
 800d2d4:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
 800d2d8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800d2da:	6075      	str	r5, [r6, #4]
			return;
 800d2dc:	e7df      	b.n	800d29e <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
 800d2de:	6863      	ldr	r3, [r4, #4]
 800d2e0:	429e      	cmp	r6, r3
 800d2e2:	d0d7      	beq.n	800d294 <add_event+0x10>
 800d2e4:	6836      	ldr	r6, [r6, #0]
 800d2e6:	e7ea      	b.n	800d2be <add_event+0x3a>

0800d2e8 <register_events>:
{
 800d2e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
 800d2ec:	2500      	movs	r5, #0
{
 800d2ee:	468b      	mov	fp, r1
 800d2f0:	4614      	mov	r4, r2
 800d2f2:	461f      	mov	r7, r3
 800d2f4:	4682      	mov	sl, r0
	int events_registered = 0;
 800d2f6:	462e      	mov	r6, r5
	event->poller = NULL;
 800d2f8:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
 800d2fa:	455d      	cmp	r5, fp
 800d2fc:	db02      	blt.n	800d304 <register_events+0x1c>
}
 800d2fe:	4630      	mov	r0, r6
 800d300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d304:	f04f 0310 	mov.w	r3, #16
 800d308:	f3ef 8911 	mrs	r9, BASEPRI
 800d30c:	f383 8811 	msr	BASEPRI, r3
 800d310:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 800d314:	f89a 300d 	ldrb.w	r3, [sl, #13]
 800d318:	f003 031f 	and.w	r3, r3, #31
 800d31c:	3b01      	subs	r3, #1
 800d31e:	2b07      	cmp	r3, #7
 800d320:	d80f      	bhi.n	800d342 <register_events+0x5a>
 800d322:	e8df f003 	tbb	[pc, r3]
 800d326:	041e      	.short	0x041e
 800d328:	0e0e0a0e 	.word	0x0e0e0a0e
 800d32c:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
 800d32e:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	b12b      	cbz	r3, 800d342 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 800d336:	2302      	movs	r3, #2
 800d338:	e020      	b.n	800d37c <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
 800d33a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	bb8b      	cbnz	r3, 800d3a6 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
 800d342:	bb47      	cbnz	r7, 800d396 <register_events+0xae>
 800d344:	7823      	ldrb	r3, [r4, #0]
 800d346:	b333      	cbz	r3, 800d396 <register_events+0xae>
	switch (event->type) {
 800d348:	f89a 300d 	ldrb.w	r3, [sl, #13]
 800d34c:	f003 031f 	and.w	r3, r3, #31
 800d350:	3b01      	subs	r3, #1
 800d352:	2b07      	cmp	r3, #7
 800d354:	d830      	bhi.n	800d3b8 <register_events+0xd0>
 800d356:	e8df f003 	tbb	[pc, r3]
 800d35a:	2839      	.short	0x2839
 800d35c:	2f2f332f 	.word	0x2f2f332f
 800d360:	3e2f      	.short	0x3e2f
		if (event->signal->signaled != 0U) {
 800d362:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d0ea      	beq.n	800d342 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
 800d36c:	2301      	movs	r3, #1
 800d36e:	e005      	b.n	800d37c <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
 800d370:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d376:	2b00      	cmp	r3, #0
 800d378:	d0e3      	beq.n	800d342 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 800d37a:	2310      	movs	r3, #16
	event->state |= state;
 800d37c:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
 800d380:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
 800d384:	f3c2 3145 	ubfx	r1, r2, #13, #6
 800d388:	430b      	orrs	r3, r1
 800d38a:	f363 3252 	bfi	r2, r3, #13, #6
 800d38e:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
 800d392:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
 800d396:	f389 8811 	msr	BASEPRI, r9
 800d39a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800d39e:	3501      	adds	r5, #1
 800d3a0:	f10a 0a14 	add.w	sl, sl, #20
 800d3a4:	e7a9      	b.n	800d2fa <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 800d3a6:	2304      	movs	r3, #4
 800d3a8:	e7e8      	b.n	800d37c <register_events+0x94>
		add_event(&event->sem->poll_events, event, poller);
 800d3aa:	f8da 0010 	ldr.w	r0, [sl, #16]
 800d3ae:	4622      	mov	r2, r4
 800d3b0:	4651      	mov	r1, sl
 800d3b2:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
 800d3b4:	f7ff ff66 	bl	800d284 <add_event>
	event->poller = poller;
 800d3b8:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
 800d3bc:	3601      	adds	r6, #1
 800d3be:	e7ea      	b.n	800d396 <register_events+0xae>
		add_event(&event->queue->poll_events, event, poller);
 800d3c0:	f8da 0010 	ldr.w	r0, [sl, #16]
 800d3c4:	4622      	mov	r2, r4
 800d3c6:	4651      	mov	r1, sl
 800d3c8:	3014      	adds	r0, #20
 800d3ca:	e7f3      	b.n	800d3b4 <register_events+0xcc>
		add_event(&event->signal->poll_events, event, poller);
 800d3cc:	f8da 0010 	ldr.w	r0, [sl, #16]
 800d3d0:	4622      	mov	r2, r4
 800d3d2:	4651      	mov	r1, sl
 800d3d4:	e7ee      	b.n	800d3b4 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
 800d3d6:	f8da 0010 	ldr.w	r0, [sl, #16]
 800d3da:	4622      	mov	r2, r4
 800d3dc:	4651      	mov	r1, sl
 800d3de:	3028      	adds	r0, #40	; 0x28
 800d3e0:	e7e8      	b.n	800d3b4 <register_events+0xcc>

0800d3e2 <signal_poll_event>:
{
 800d3e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
 800d3e6:	6884      	ldr	r4, [r0, #8]
{
 800d3e8:	4605      	mov	r5, r0
 800d3ea:	460e      	mov	r6, r1
	if (poller != NULL) {
 800d3ec:	b144      	cbz	r4, 800d400 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
 800d3ee:	7863      	ldrb	r3, [r4, #1]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d137      	bne.n	800d464 <signal_poll_event+0x82>
	if (!z_is_thread_pending(thread)) {
 800d3f4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 800d3f8:	f013 0302 	ands.w	r3, r3, #2
 800d3fc:	d10a      	bne.n	800d414 <signal_poll_event+0x32>
		poller->is_polling = false;
 800d3fe:	7023      	strb	r3, [r4, #0]
	event->state |= state;
 800d400:	68eb      	ldr	r3, [r5, #12]
 800d402:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800d406:	430e      	orrs	r6, r1
	event->poller = NULL;
 800d408:	2000      	movs	r0, #0
	event->state |= state;
 800d40a:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
 800d40e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
 800d410:	60eb      	str	r3, [r5, #12]
	return retcode;
 800d412:	e00b      	b.n	800d42c <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
 800d414:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
 800d418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d41c:	bf08      	it	eq
 800d41e:	f112 0f02 	cmneq.w	r2, #2
 800d422:	d106      	bne.n	800d432 <signal_poll_event+0x50>
		poller->is_polling = false;
 800d424:	2300      	movs	r3, #0
 800d426:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
 800d428:	f06f 000a 	mvn.w	r0, #10
}
 800d42c:	b002      	add	sp, #8
 800d42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800d432:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
	z_unpend_thread(thread);
 800d436:	9001      	str	r0, [sp, #4]
 800d438:	f7ff fdaf 	bl	800cf9a <z_unpend_thread>
	arch_thread_return_value_set(thread,
 800d43c:	2e08      	cmp	r6, #8
 800d43e:	bf0c      	ite	eq
 800d440:	f06f 0303 	mvneq.w	r3, #3
 800d444:	2300      	movne	r3, #0
 800d446:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800d448:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 800d44c:	06db      	lsls	r3, r3, #27
 800d44e:	d103      	bne.n	800d458 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
 800d450:	f854 7c48 	ldr.w	r7, [r4, #-72]
 800d454:	9801      	ldr	r0, [sp, #4]
 800d456:	b10f      	cbz	r7, 800d45c <signal_poll_event+0x7a>
		poller->is_polling = false;
 800d458:	2300      	movs	r3, #0
 800d45a:	e7d0      	b.n	800d3fe <signal_poll_event+0x1c>
	z_ready_thread(thread);
 800d45c:	f7ff fdf7 	bl	800d04e <z_ready_thread>
		poller->is_polling = false;
 800d460:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
 800d462:	e7cd      	b.n	800d400 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
 800d464:	2b02      	cmp	r3, #2
 800d466:	d1f7      	bne.n	800d458 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 800d468:	7823      	ldrb	r3, [r4, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d0c8      	beq.n	800d400 <signal_poll_event+0x1e>
 800d46e:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800d472:	2f00      	cmp	r7, #0
 800d474:	d0f4      	beq.n	800d460 <signal_poll_event+0x7e>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 800d476:	f1a4 0114 	sub.w	r1, r4, #20
		twork->poll_result = 0;
 800d47a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
 800d47e:	f104 0014 	add.w	r0, r4, #20
 800d482:	9101      	str	r1, [sp, #4]
 800d484:	f7ff fe70 	bl	800d168 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
 800d488:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
 800d48a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 800d48e:	4638      	mov	r0, r7
 800d490:	f000 f8f4 	bl	800d67c <k_work_submit_to_queue>
		poller->is_polling = false;
 800d494:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
 800d498:	e7b2      	b.n	800d400 <signal_poll_event+0x1e>

0800d49a <clear_event_registrations>:
	while (num_events--) {
 800d49a:	2314      	movs	r3, #20
{
 800d49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d49e:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
 800d4a2:	2400      	movs	r4, #0
 800d4a4:	2601      	movs	r6, #1
	while (num_events--) {
 800d4a6:	b901      	cbnz	r1, 800d4aa <clear_event_registrations+0x10>
}
 800d4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
 800d4aa:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
 800d4ae:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
 800d4b2:	f003 031f 	and.w	r3, r3, #31
 800d4b6:	2b08      	cmp	r3, #8
 800d4b8:	f1a0 0714 	sub.w	r7, r0, #20
 800d4bc:	d80d      	bhi.n	800d4da <clear_event_registrations+0x40>
 800d4be:	fa06 f303 	lsl.w	r3, r6, r3
 800d4c2:	f413 7f8b 	tst.w	r3, #278	; 0x116
 800d4c6:	d008      	beq.n	800d4da <clear_event_registrations+0x40>
	return node->next != NULL;
 800d4c8:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800d4cc:	b12b      	cbz	r3, 800d4da <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
 800d4ce:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
 800d4d2:	602b      	str	r3, [r5, #0]
	next->prev = prev;
 800d4d4:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
 800d4d6:	e940 4405 	strd	r4, r4, [r0, #-20]
 800d4da:	f382 8811 	msr	BASEPRI, r2
 800d4de:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800d4e2:	f04f 0310 	mov.w	r3, #16
 800d4e6:	f3ef 8211 	mrs	r2, BASEPRI
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	3901      	subs	r1, #1
 800d4f4:	4638      	mov	r0, r7
 800d4f6:	e7d6      	b.n	800d4a6 <clear_event_registrations+0xc>

0800d4f8 <k_poll_event_init>:
{
 800d4f8:	b510      	push	{r4, lr}
	event->type = type;
 800d4fa:	04d2      	lsls	r2, r2, #19
 800d4fc:	0209      	lsls	r1, r1, #8
 800d4fe:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
 800d502:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800d506:	430a      	orrs	r2, r1
 800d508:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
 800d50a:	2400      	movs	r4, #0
	event->type = type;
 800d50c:	430a      	orrs	r2, r1
	event->obj = obj;
 800d50e:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
 800d512:	6084      	str	r4, [r0, #8]
}
 800d514:	bd10      	pop	{r4, pc}

0800d516 <z_handle_obj_poll_events>:
{
 800d516:	4603      	mov	r3, r0
	return list->head == list;
 800d518:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 800d51a:	4283      	cmp	r3, r0
 800d51c:	d008      	beq.n	800d530 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
 800d51e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800d522:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800d524:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800d526:	2300      	movs	r3, #0
	node->prev = NULL;
 800d528:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
 800d52c:	f7ff bf59 	b.w	800d3e2 <signal_poll_event>
}
 800d530:	4770      	bx	lr

0800d532 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
 800d532:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
 800d534:	e9c0 0000 	strd	r0, r0, [r0]
 800d538:	6083      	str	r3, [r0, #8]
}
 800d53a:	4770      	bx	lr

0800d53c <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
 800d53c:	2300      	movs	r3, #0
 800d53e:	6083      	str	r3, [r0, #8]
}
 800d540:	4770      	bx	lr

0800d542 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
 800d542:	6883      	ldr	r3, [r0, #8]
 800d544:	600b      	str	r3, [r1, #0]
	*result = sig->result;
 800d546:	68c3      	ldr	r3, [r0, #12]
 800d548:	6013      	str	r3, [r2, #0]
}
 800d54a:	4770      	bx	lr

0800d54c <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 800d54c:	3204      	adds	r2, #4
{
 800d54e:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 800d550:	4604      	mov	r4, r0
 800d552:	d208      	bcs.n	800d566 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 800d554:	2600      	movs	r6, #0
 800d556:	2700      	movs	r7, #0
 800d558:	e9cd 6700 	strd	r6, r7, [sp]
 800d55c:	f041 0104 	orr.w	r1, r1, #4
 800d560:	f000 f81b 	bl	800d59a <k_heap_aligned_alloc>
	if (mem == NULL) {
 800d564:	b910      	cbnz	r0, 800d56c <z_heap_aligned_alloc+0x20>
		return NULL;
 800d566:	2000      	movs	r0, #0
}
 800d568:	b002      	add	sp, #8
 800d56a:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
 800d56c:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
 800d570:	e7fa      	b.n	800d568 <z_heap_aligned_alloc+0x1c>

0800d572 <k_free>:
	if (ptr != NULL) {
 800d572:	b120      	cbz	r0, 800d57e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
 800d574:	1f01      	subs	r1, r0, #4
 800d576:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800d57a:	f000 b84f 	b.w	800d61c <k_heap_free>
}
 800d57e:	4770      	bx	lr

0800d580 <k_malloc>:
{
 800d580:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
 800d582:	2004      	movs	r0, #4
 800d584:	f7fc b874 	b.w	8009670 <k_aligned_alloc>

0800d588 <k_heap_init>:
{
 800d588:	b410      	push	{r4}
 800d58a:	f100 040c 	add.w	r4, r0, #12
 800d58e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 800d592:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
 800d596:	f7fd b881 	b.w	800a69c <sys_heap_init>

0800d59a <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 800d59a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59e:	b085      	sub	sp, #20
 800d5a0:	4606      	mov	r6, r0
 800d5a2:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800d5a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
 800d5a8:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800d5aa:	f7ff fe14 	bl	800d1d6 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 800d5ae:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800d5b2:	4605      	mov	r5, r0
 800d5b4:	460f      	mov	r7, r1
 800d5b6:	f04f 0310 	mov.w	r3, #16
 800d5ba:	f3ef 8411 	mrs	r4, BASEPRI
 800d5be:	f383 8811 	msr	BASEPRI, r3
 800d5c2:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 800d5c6:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 800d5ca:	464a      	mov	r2, r9
 800d5cc:	4641      	mov	r1, r8
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f7fc ffeb 	bl	800a5aa <sys_heap_aligned_alloc>
 800d5d4:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
 800d5d6:	f7fb fef3 	bl	80093c0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 800d5da:	9b03      	ldr	r3, [sp, #12]
 800d5dc:	b13b      	cbz	r3, 800d5ee <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
 800d5de:	f384 8811 	msr	BASEPRI, r4
 800d5e2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	b005      	add	sp, #20
 800d5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
 800d5ee:	1a28      	subs	r0, r5, r0
 800d5f0:	eb67 0101 	sbc.w	r1, r7, r1
 800d5f4:	2801      	cmp	r0, #1
 800d5f6:	f171 0200 	sbcs.w	r2, r1, #0
 800d5fa:	dbf0      	blt.n	800d5de <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 800d5fc:	e9cd 0100 	strd	r0, r1, [sp]
 800d600:	465a      	mov	r2, fp
 800d602:	4621      	mov	r1, r4
 800d604:	4650      	mov	r0, sl
 800d606:	f7fb faff 	bl	8008c08 <z_pend_curr>
	__asm__ volatile(
 800d60a:	f04f 0310 	mov.w	r3, #16
 800d60e:	f3ef 8411 	mrs	r4, BASEPRI
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	e7d6      	b.n	800d5ca <k_heap_aligned_alloc+0x30>

0800d61c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	4604      	mov	r4, r0
 800d620:	f04f 0310 	mov.w	r3, #16
 800d624:	f3ef 8511 	mrs	r5, BASEPRI
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
 800d630:	f7fc ff6b 	bl	800a50a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
 800d634:	f104 000c 	add.w	r0, r4, #12
 800d638:	f7ff fd68 	bl	800d10c <z_unpend_all>
 800d63c:	b130      	cbz	r0, 800d64c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
 800d63e:	4629      	mov	r1, r5
 800d640:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
 800d644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
 800d648:	f7fb ba5a 	b.w	8008b00 <z_reschedule>
	__asm__ volatile(
 800d64c:	f385 8811 	msr	BASEPRI, r5
 800d650:	f3bf 8f6f 	isb	sy
}
 800d654:	bd38      	pop	{r3, r4, r5, pc}

0800d656 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
 800d656:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 800d658:	2301      	movs	r3, #1
 800d65a:	408b      	lsls	r3, r1
 800d65c:	ea22 0303 	bic.w	r3, r2, r3
 800d660:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 800d662:	fa22 f001 	lsr.w	r0, r2, r1
}
 800d666:	f000 0001 	and.w	r0, r0, #1
 800d66a:	4770      	bx	lr

0800d66c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 800d66c:	b128      	cbz	r0, 800d67a <notify_queue_locked.isra.0+0xe>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 800d66e:	2200      	movs	r2, #0
 800d670:	4611      	mov	r1, r2
 800d672:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800d676:	f7ff bd59 	b.w	800d12c <z_sched_wake>
}
 800d67a:	4770      	bx	lr

0800d67c <k_work_submit_to_queue>:
{
 800d67c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d67e:	9001      	str	r0, [sp, #4]
 800d680:	4608      	mov	r0, r1
	__asm__ volatile(
 800d682:	f04f 0310 	mov.w	r3, #16
 800d686:	f3ef 8511 	mrs	r5, BASEPRI
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800d692:	a901      	add	r1, sp, #4
 800d694:	f7fc f848 	bl	8009728 <submit_to_queue_locked>
 800d698:	4604      	mov	r4, r0
	__asm__ volatile(
 800d69a:	f385 8811 	msr	BASEPRI, r5
 800d69e:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	dd04      	ble.n	800d6b0 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
 800d6a6:	f7fb fcd9 	bl	800905c <z_impl_k_is_preempt_thread>
 800d6aa:	b108      	cbz	r0, 800d6b0 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
 800d6ac:	f7fb fc30 	bl	8008f10 <z_impl_k_yield>
}
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	b003      	add	sp, #12
 800d6b4:	bd30      	pop	{r4, r5, pc}

0800d6b6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800d6b6:	4770      	bx	lr

0800d6b8 <memcmp>:
 800d6b8:	b510      	push	{r4, lr}
 800d6ba:	3901      	subs	r1, #1
 800d6bc:	4402      	add	r2, r0
 800d6be:	4290      	cmp	r0, r2
 800d6c0:	d101      	bne.n	800d6c6 <memcmp+0xe>
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	e005      	b.n	800d6d2 <memcmp+0x1a>
 800d6c6:	7803      	ldrb	r3, [r0, #0]
 800d6c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d6cc:	42a3      	cmp	r3, r4
 800d6ce:	d001      	beq.n	800d6d4 <memcmp+0x1c>
 800d6d0:	1b18      	subs	r0, r3, r4
 800d6d2:	bd10      	pop	{r4, pc}
 800d6d4:	3001      	adds	r0, #1
 800d6d6:	e7f2      	b.n	800d6be <memcmp+0x6>

0800d6d8 <memcpy>:
 800d6d8:	440a      	add	r2, r1
 800d6da:	4291      	cmp	r1, r2
 800d6dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d6e0:	d100      	bne.n	800d6e4 <memcpy+0xc>
 800d6e2:	4770      	bx	lr
 800d6e4:	b510      	push	{r4, lr}
 800d6e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6ee:	4291      	cmp	r1, r2
 800d6f0:	d1f9      	bne.n	800d6e6 <memcpy+0xe>
 800d6f2:	bd10      	pop	{r4, pc}

0800d6f4 <memmove>:
 800d6f4:	4288      	cmp	r0, r1
 800d6f6:	b510      	push	{r4, lr}
 800d6f8:	eb01 0402 	add.w	r4, r1, r2
 800d6fc:	d902      	bls.n	800d704 <memmove+0x10>
 800d6fe:	4284      	cmp	r4, r0
 800d700:	4623      	mov	r3, r4
 800d702:	d807      	bhi.n	800d714 <memmove+0x20>
 800d704:	1e43      	subs	r3, r0, #1
 800d706:	42a1      	cmp	r1, r4
 800d708:	d008      	beq.n	800d71c <memmove+0x28>
 800d70a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d70e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d712:	e7f8      	b.n	800d706 <memmove+0x12>
 800d714:	4402      	add	r2, r0
 800d716:	4601      	mov	r1, r0
 800d718:	428a      	cmp	r2, r1
 800d71a:	d100      	bne.n	800d71e <memmove+0x2a>
 800d71c:	bd10      	pop	{r4, pc}
 800d71e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d726:	e7f7      	b.n	800d718 <memmove+0x24>

0800d728 <memset>:
 800d728:	4402      	add	r2, r0
 800d72a:	4603      	mov	r3, r0
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d100      	bne.n	800d732 <memset+0xa>
 800d730:	4770      	bx	lr
 800d732:	f803 1b01 	strb.w	r1, [r3], #1
 800d736:	e7f9      	b.n	800d72c <memset+0x4>

0800d738 <_printf_common>:
 800d738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d73c:	4616      	mov	r6, r2
 800d73e:	4699      	mov	r9, r3
 800d740:	688a      	ldr	r2, [r1, #8]
 800d742:	690b      	ldr	r3, [r1, #16]
 800d744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d748:	4293      	cmp	r3, r2
 800d74a:	bfb8      	it	lt
 800d74c:	4613      	movlt	r3, r2
 800d74e:	6033      	str	r3, [r6, #0]
 800d750:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d754:	4607      	mov	r7, r0
 800d756:	460c      	mov	r4, r1
 800d758:	b10a      	cbz	r2, 800d75e <_printf_common+0x26>
 800d75a:	3301      	adds	r3, #1
 800d75c:	6033      	str	r3, [r6, #0]
 800d75e:	6823      	ldr	r3, [r4, #0]
 800d760:	0699      	lsls	r1, r3, #26
 800d762:	bf42      	ittt	mi
 800d764:	6833      	ldrmi	r3, [r6, #0]
 800d766:	3302      	addmi	r3, #2
 800d768:	6033      	strmi	r3, [r6, #0]
 800d76a:	6825      	ldr	r5, [r4, #0]
 800d76c:	f015 0506 	ands.w	r5, r5, #6
 800d770:	d106      	bne.n	800d780 <_printf_common+0x48>
 800d772:	f104 0a19 	add.w	sl, r4, #25
 800d776:	68e3      	ldr	r3, [r4, #12]
 800d778:	6832      	ldr	r2, [r6, #0]
 800d77a:	1a9b      	subs	r3, r3, r2
 800d77c:	42ab      	cmp	r3, r5
 800d77e:	dc26      	bgt.n	800d7ce <_printf_common+0x96>
 800d780:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d784:	1e13      	subs	r3, r2, #0
 800d786:	6822      	ldr	r2, [r4, #0]
 800d788:	bf18      	it	ne
 800d78a:	2301      	movne	r3, #1
 800d78c:	0692      	lsls	r2, r2, #26
 800d78e:	d42b      	bmi.n	800d7e8 <_printf_common+0xb0>
 800d790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d794:	4649      	mov	r1, r9
 800d796:	4638      	mov	r0, r7
 800d798:	47c0      	blx	r8
 800d79a:	3001      	adds	r0, #1
 800d79c:	d01e      	beq.n	800d7dc <_printf_common+0xa4>
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	68e5      	ldr	r5, [r4, #12]
 800d7a2:	6832      	ldr	r2, [r6, #0]
 800d7a4:	f003 0306 	and.w	r3, r3, #6
 800d7a8:	2b04      	cmp	r3, #4
 800d7aa:	bf08      	it	eq
 800d7ac:	1aad      	subeq	r5, r5, r2
 800d7ae:	68a3      	ldr	r3, [r4, #8]
 800d7b0:	6922      	ldr	r2, [r4, #16]
 800d7b2:	bf0c      	ite	eq
 800d7b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7b8:	2500      	movne	r5, #0
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	bfc4      	itt	gt
 800d7be:	1a9b      	subgt	r3, r3, r2
 800d7c0:	18ed      	addgt	r5, r5, r3
 800d7c2:	2600      	movs	r6, #0
 800d7c4:	341a      	adds	r4, #26
 800d7c6:	42b5      	cmp	r5, r6
 800d7c8:	d11a      	bne.n	800d800 <_printf_common+0xc8>
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	e008      	b.n	800d7e0 <_printf_common+0xa8>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	4652      	mov	r2, sl
 800d7d2:	4649      	mov	r1, r9
 800d7d4:	4638      	mov	r0, r7
 800d7d6:	47c0      	blx	r8
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d103      	bne.n	800d7e4 <_printf_common+0xac>
 800d7dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7e4:	3501      	adds	r5, #1
 800d7e6:	e7c6      	b.n	800d776 <_printf_common+0x3e>
 800d7e8:	18e1      	adds	r1, r4, r3
 800d7ea:	1c5a      	adds	r2, r3, #1
 800d7ec:	2030      	movs	r0, #48	; 0x30
 800d7ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7f2:	4422      	add	r2, r4
 800d7f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7fc:	3302      	adds	r3, #2
 800d7fe:	e7c7      	b.n	800d790 <_printf_common+0x58>
 800d800:	2301      	movs	r3, #1
 800d802:	4622      	mov	r2, r4
 800d804:	4649      	mov	r1, r9
 800d806:	4638      	mov	r0, r7
 800d808:	47c0      	blx	r8
 800d80a:	3001      	adds	r0, #1
 800d80c:	d0e6      	beq.n	800d7dc <_printf_common+0xa4>
 800d80e:	3601      	adds	r6, #1
 800d810:	e7d9      	b.n	800d7c6 <_printf_common+0x8e>

0800d812 <strchr>:
 800d812:	b2c9      	uxtb	r1, r1
 800d814:	4603      	mov	r3, r0
 800d816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d81a:	b11a      	cbz	r2, 800d824 <strchr+0x12>
 800d81c:	428a      	cmp	r2, r1
 800d81e:	d1f9      	bne.n	800d814 <strchr+0x2>
 800d820:	4618      	mov	r0, r3
 800d822:	4770      	bx	lr
 800d824:	2900      	cmp	r1, #0
 800d826:	bf18      	it	ne
 800d828:	2300      	movne	r3, #0
 800d82a:	e7f9      	b.n	800d820 <strchr+0xe>

0800d82c <strcpy>:
 800d82c:	4603      	mov	r3, r0
 800d82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d832:	f803 2b01 	strb.w	r2, [r3], #1
 800d836:	2a00      	cmp	r2, #0
 800d838:	d1f9      	bne.n	800d82e <strcpy+0x2>
 800d83a:	4770      	bx	lr

0800d83c <strncmp>:
 800d83c:	b510      	push	{r4, lr}
 800d83e:	b17a      	cbz	r2, 800d860 <strncmp+0x24>
 800d840:	4603      	mov	r3, r0
 800d842:	3901      	subs	r1, #1
 800d844:	1884      	adds	r4, r0, r2
 800d846:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d84a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d84e:	4290      	cmp	r0, r2
 800d850:	d101      	bne.n	800d856 <strncmp+0x1a>
 800d852:	42a3      	cmp	r3, r4
 800d854:	d101      	bne.n	800d85a <strncmp+0x1e>
 800d856:	1a80      	subs	r0, r0, r2
 800d858:	bd10      	pop	{r4, pc}
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d1f3      	bne.n	800d846 <strncmp+0xa>
 800d85e:	e7fa      	b.n	800d856 <strncmp+0x1a>
 800d860:	4610      	mov	r0, r2
 800d862:	e7f9      	b.n	800d858 <strncmp+0x1c>

0800d864 <strncpy>:
 800d864:	b510      	push	{r4, lr}
 800d866:	3901      	subs	r1, #1
 800d868:	4603      	mov	r3, r0
 800d86a:	b132      	cbz	r2, 800d87a <strncpy+0x16>
 800d86c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d870:	f803 4b01 	strb.w	r4, [r3], #1
 800d874:	3a01      	subs	r2, #1
 800d876:	2c00      	cmp	r4, #0
 800d878:	d1f7      	bne.n	800d86a <strncpy+0x6>
 800d87a:	441a      	add	r2, r3
 800d87c:	2100      	movs	r1, #0
 800d87e:	4293      	cmp	r3, r2
 800d880:	d100      	bne.n	800d884 <strncpy+0x20>
 800d882:	bd10      	pop	{r4, pc}
 800d884:	f803 1b01 	strb.w	r1, [r3], #1
 800d888:	e7f9      	b.n	800d87e <strncpy+0x1a>

0800d88a <strnlen>:
 800d88a:	b510      	push	{r4, lr}
 800d88c:	4602      	mov	r2, r0
 800d88e:	4401      	add	r1, r0
 800d890:	428a      	cmp	r2, r1
 800d892:	4613      	mov	r3, r2
 800d894:	d003      	beq.n	800d89e <strnlen+0x14>
 800d896:	781c      	ldrb	r4, [r3, #0]
 800d898:	3201      	adds	r2, #1
 800d89a:	2c00      	cmp	r4, #0
 800d89c:	d1f8      	bne.n	800d890 <strnlen+0x6>
 800d89e:	1a18      	subs	r0, r3, r0
 800d8a0:	bd10      	pop	{r4, pc}

0800d8a2 <strstr>:
 800d8a2:	780a      	ldrb	r2, [r1, #0]
 800d8a4:	b570      	push	{r4, r5, r6, lr}
 800d8a6:	b96a      	cbnz	r2, 800d8c4 <strstr+0x22>
 800d8a8:	bd70      	pop	{r4, r5, r6, pc}
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d109      	bne.n	800d8c2 <strstr+0x20>
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d0f6      	beq.n	800d8a8 <strstr+0x6>
 800d8ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d8be:	429e      	cmp	r6, r3
 800d8c0:	d0f7      	beq.n	800d8b2 <strstr+0x10>
 800d8c2:	3001      	adds	r0, #1
 800d8c4:	7803      	ldrb	r3, [r0, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1ef      	bne.n	800d8aa <strstr+0x8>
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	e7ec      	b.n	800d8a8 <strstr+0x6>

0800d8ce <_realloc_r>:
 800d8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8d0:	4607      	mov	r7, r0
 800d8d2:	4614      	mov	r4, r2
 800d8d4:	460e      	mov	r6, r1
 800d8d6:	b921      	cbnz	r1, 800d8e2 <_realloc_r+0x14>
 800d8d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d8dc:	4611      	mov	r1, r2
 800d8de:	f7fb bff7 	b.w	80098d0 <_malloc_r>
 800d8e2:	b922      	cbnz	r2, 800d8ee <_realloc_r+0x20>
 800d8e4:	f7fb ffa8 	bl	8009838 <_free_r>
 800d8e8:	4625      	mov	r5, r4
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ee:	f000 f86f 	bl	800d9d0 <_malloc_usable_size_r>
 800d8f2:	42a0      	cmp	r0, r4
 800d8f4:	d20f      	bcs.n	800d916 <_realloc_r+0x48>
 800d8f6:	4621      	mov	r1, r4
 800d8f8:	4638      	mov	r0, r7
 800d8fa:	f7fb ffe9 	bl	80098d0 <_malloc_r>
 800d8fe:	4605      	mov	r5, r0
 800d900:	2800      	cmp	r0, #0
 800d902:	d0f2      	beq.n	800d8ea <_realloc_r+0x1c>
 800d904:	4631      	mov	r1, r6
 800d906:	4622      	mov	r2, r4
 800d908:	f7ff fee6 	bl	800d6d8 <memcpy>
 800d90c:	4631      	mov	r1, r6
 800d90e:	4638      	mov	r0, r7
 800d910:	f7fb ff92 	bl	8009838 <_free_r>
 800d914:	e7e9      	b.n	800d8ea <_realloc_r+0x1c>
 800d916:	4635      	mov	r5, r6
 800d918:	e7e7      	b.n	800d8ea <_realloc_r+0x1c>

0800d91a <__ssputs_r>:
 800d91a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d91e:	688e      	ldr	r6, [r1, #8]
 800d920:	429e      	cmp	r6, r3
 800d922:	4682      	mov	sl, r0
 800d924:	460c      	mov	r4, r1
 800d926:	4690      	mov	r8, r2
 800d928:	461f      	mov	r7, r3
 800d92a:	d838      	bhi.n	800d99e <__ssputs_r+0x84>
 800d92c:	898a      	ldrh	r2, [r1, #12]
 800d92e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d932:	d032      	beq.n	800d99a <__ssputs_r+0x80>
 800d934:	6825      	ldr	r5, [r4, #0]
 800d936:	6909      	ldr	r1, [r1, #16]
 800d938:	eba5 0901 	sub.w	r9, r5, r1
 800d93c:	6965      	ldr	r5, [r4, #20]
 800d93e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d942:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d946:	3301      	adds	r3, #1
 800d948:	444b      	add	r3, r9
 800d94a:	106d      	asrs	r5, r5, #1
 800d94c:	429d      	cmp	r5, r3
 800d94e:	bf38      	it	cc
 800d950:	461d      	movcc	r5, r3
 800d952:	0553      	lsls	r3, r2, #21
 800d954:	d531      	bpl.n	800d9ba <__ssputs_r+0xa0>
 800d956:	4629      	mov	r1, r5
 800d958:	f7fb ffba 	bl	80098d0 <_malloc_r>
 800d95c:	4606      	mov	r6, r0
 800d95e:	b950      	cbnz	r0, 800d976 <__ssputs_r+0x5c>
 800d960:	230c      	movs	r3, #12
 800d962:	f8ca 3000 	str.w	r3, [sl]
 800d966:	89a3      	ldrh	r3, [r4, #12]
 800d968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d96c:	81a3      	strh	r3, [r4, #12]
 800d96e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d976:	6921      	ldr	r1, [r4, #16]
 800d978:	464a      	mov	r2, r9
 800d97a:	f7ff fead 	bl	800d6d8 <memcpy>
 800d97e:	89a3      	ldrh	r3, [r4, #12]
 800d980:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d988:	81a3      	strh	r3, [r4, #12]
 800d98a:	6126      	str	r6, [r4, #16]
 800d98c:	6165      	str	r5, [r4, #20]
 800d98e:	444e      	add	r6, r9
 800d990:	eba5 0509 	sub.w	r5, r5, r9
 800d994:	6026      	str	r6, [r4, #0]
 800d996:	60a5      	str	r5, [r4, #8]
 800d998:	463e      	mov	r6, r7
 800d99a:	42be      	cmp	r6, r7
 800d99c:	d900      	bls.n	800d9a0 <__ssputs_r+0x86>
 800d99e:	463e      	mov	r6, r7
 800d9a0:	6820      	ldr	r0, [r4, #0]
 800d9a2:	4632      	mov	r2, r6
 800d9a4:	4641      	mov	r1, r8
 800d9a6:	f7ff fea5 	bl	800d6f4 <memmove>
 800d9aa:	68a3      	ldr	r3, [r4, #8]
 800d9ac:	1b9b      	subs	r3, r3, r6
 800d9ae:	60a3      	str	r3, [r4, #8]
 800d9b0:	6823      	ldr	r3, [r4, #0]
 800d9b2:	4433      	add	r3, r6
 800d9b4:	6023      	str	r3, [r4, #0]
 800d9b6:	2000      	movs	r0, #0
 800d9b8:	e7db      	b.n	800d972 <__ssputs_r+0x58>
 800d9ba:	462a      	mov	r2, r5
 800d9bc:	f7ff ff87 	bl	800d8ce <_realloc_r>
 800d9c0:	4606      	mov	r6, r0
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	d1e1      	bne.n	800d98a <__ssputs_r+0x70>
 800d9c6:	6921      	ldr	r1, [r4, #16]
 800d9c8:	4650      	mov	r0, sl
 800d9ca:	f7fb ff35 	bl	8009838 <_free_r>
 800d9ce:	e7c7      	b.n	800d960 <__ssputs_r+0x46>

0800d9d0 <_malloc_usable_size_r>:
 800d9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9d4:	1f18      	subs	r0, r3, #4
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	bfbc      	itt	lt
 800d9da:	580b      	ldrlt	r3, [r1, r0]
 800d9dc:	18c0      	addlt	r0, r0, r3
 800d9de:	4770      	bx	lr
