
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	00 29 00 20 ed 63 00 08 9d 95 00 08 19 64 00 08     .). .c.......d..
 8000010:	19 64 00 08 19 64 00 08 19 64 00 08 00 00 00 00     .d...d...d......
	...
 800002c:	91 60 00 08 19 64 00 08 00 00 00 00 01 60 00 08     .`...d.......`..
 800003c:	39 5e 00 08                                         9^..

08000040 <_irq_vector_table>:
 8000040:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000050:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000060:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000070:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000080:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000090:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 80000a0:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 80000b0:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 80000c0:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 80000d0:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 80000e0:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 80000f0:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000100:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000110:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000120:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000130:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000140:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000150:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000160:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000170:	c5 63 00 08 c5 63 00 08 c5 63 00 08 c5 63 00 08     .c...c...c...c..
 8000180:	c5 63 00 08 c5 63 00 08                             .c...c..

Disassembly of section text:

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__aeabi_d2f>:
 8000924:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000928:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800092c:	bf24      	itt	cs
 800092e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000932:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000936:	d90d      	bls.n	8000954 <__aeabi_d2f+0x30>
 8000938:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800093c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000940:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000944:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000948:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800094c:	bf08      	it	eq
 800094e:	f020 0001 	biceq.w	r0, r0, #1
 8000952:	4770      	bx	lr
 8000954:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000958:	d121      	bne.n	800099e <__aeabi_d2f+0x7a>
 800095a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800095e:	bfbc      	itt	lt
 8000960:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000964:	4770      	bxlt	lr
 8000966:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800096e:	f1c2 0218 	rsb	r2, r2, #24
 8000972:	f1c2 0c20 	rsb	ip, r2, #32
 8000976:	fa10 f30c 	lsls.w	r3, r0, ip
 800097a:	fa20 f002 	lsr.w	r0, r0, r2
 800097e:	bf18      	it	ne
 8000980:	f040 0001 	orrne.w	r0, r0, #1
 8000984:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000988:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800098c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000990:	ea40 000c 	orr.w	r0, r0, ip
 8000994:	fa23 f302 	lsr.w	r3, r3, r2
 8000998:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800099c:	e7cc      	b.n	8000938 <__aeabi_d2f+0x14>
 800099e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009a2:	d107      	bne.n	80009b4 <__aeabi_d2f+0x90>
 80009a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a8:	bf1e      	ittt	ne
 80009aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009b2:	4770      	bxne	lr
 80009b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009d8:	f000 b978 	b.w	8000ccc <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	460e      	mov	r6, r1
 80009fc:	4604      	mov	r4, r0
 80009fe:	468e      	mov	lr, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14c      	bne.n	8000a9e <__udivmoddi4+0xaa>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4694      	mov	ip, r2
 8000a08:	d967      	bls.n	8000ada <__udivmoddi4+0xe6>
 8000a0a:	fab2 f282 	clz	r2, r2
 8000a0e:	b152      	cbz	r2, 8000a26 <__udivmoddi4+0x32>
 8000a10:	fa01 f302 	lsl.w	r3, r1, r2
 8000a14:	f1c2 0120 	rsb	r1, r2, #32
 8000a18:	fa20 f101 	lsr.w	r1, r0, r1
 8000a1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a20:	ea41 0e03 	orr.w	lr, r1, r3
 8000a24:	4094      	lsls	r4, r2
 8000a26:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a2a:	0c21      	lsrs	r1, r4, #16
 8000a2c:	fbbe f6f8 	udiv	r6, lr, r8
 8000a30:	fa1f f78c 	uxth.w	r7, ip
 8000a34:	fb08 e316 	mls	r3, r8, r6, lr
 8000a38:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a3c:	fb06 f107 	mul.w	r1, r6, r7
 8000a40:	4299      	cmp	r1, r3
 8000a42:	d90a      	bls.n	8000a5a <__udivmoddi4+0x66>
 8000a44:	eb1c 0303 	adds.w	r3, ip, r3
 8000a48:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a4c:	f080 811e 	bcs.w	8000c8c <__udivmoddi4+0x298>
 8000a50:	4299      	cmp	r1, r3
 8000a52:	f240 811b 	bls.w	8000c8c <__udivmoddi4+0x298>
 8000a56:	3e02      	subs	r6, #2
 8000a58:	4463      	add	r3, ip
 8000a5a:	1a5b      	subs	r3, r3, r1
 8000a5c:	b2a4      	uxth	r4, r4
 8000a5e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a62:	fb08 3310 	mls	r3, r8, r0, r3
 8000a66:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a6a:	fb00 f707 	mul.w	r7, r0, r7
 8000a6e:	42a7      	cmp	r7, r4
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x94>
 8000a72:	eb1c 0404 	adds.w	r4, ip, r4
 8000a76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a7a:	f080 8109 	bcs.w	8000c90 <__udivmoddi4+0x29c>
 8000a7e:	42a7      	cmp	r7, r4
 8000a80:	f240 8106 	bls.w	8000c90 <__udivmoddi4+0x29c>
 8000a84:	4464      	add	r4, ip
 8000a86:	3802      	subs	r0, #2
 8000a88:	1be4      	subs	r4, r4, r7
 8000a8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a8e:	2100      	movs	r1, #0
 8000a90:	b11d      	cbz	r5, 8000a9a <__udivmoddi4+0xa6>
 8000a92:	40d4      	lsrs	r4, r2
 8000a94:	2300      	movs	r3, #0
 8000a96:	e9c5 4300 	strd	r4, r3, [r5]
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0xc0>
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	f000 80ef 	beq.w	8000c86 <__udivmoddi4+0x292>
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	e9c5 0600 	strd	r0, r6, [r5]
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab4:	fab3 f183 	clz	r1, r3
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	d149      	bne.n	8000b50 <__udivmoddi4+0x15c>
 8000abc:	42b3      	cmp	r3, r6
 8000abe:	d302      	bcc.n	8000ac6 <__udivmoddi4+0xd2>
 8000ac0:	4282      	cmp	r2, r0
 8000ac2:	f200 80ff 	bhi.w	8000cc4 <__udivmoddi4+0x2d0>
 8000ac6:	1a84      	subs	r4, r0, r2
 8000ac8:	eb66 0303 	sbc.w	r3, r6, r3
 8000acc:	2001      	movs	r0, #1
 8000ace:	469e      	mov	lr, r3
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d0e2      	beq.n	8000a9a <__udivmoddi4+0xa6>
 8000ad4:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad8:	e7df      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xea>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	f040 808e 	bne.w	8000c04 <__udivmoddi4+0x210>
 8000ae8:	eba1 060c 	sub.w	r6, r1, ip
 8000aec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af0:	fa1f f38c 	uxth.w	r3, ip
 8000af4:	2101      	movs	r1, #1
 8000af6:	fbb6 fef7 	udiv	lr, r6, r7
 8000afa:	fb07 601e 	mls	r0, r7, lr, r6
 8000afe:	0c26      	lsrs	r6, r4, #16
 8000b00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b04:	fb03 f00e 	mul.w	r0, r3, lr
 8000b08:	42b0      	cmp	r0, r6
 8000b0a:	d908      	bls.n	8000b1e <__udivmoddi4+0x12a>
 8000b0c:	eb1c 0606 	adds.w	r6, ip, r6
 8000b10:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8000b14:	d202      	bcs.n	8000b1c <__udivmoddi4+0x128>
 8000b16:	42b0      	cmp	r0, r6
 8000b18:	f200 80d0 	bhi.w	8000cbc <__udivmoddi4+0x2c8>
 8000b1c:	46c6      	mov	lr, r8
 8000b1e:	1a36      	subs	r6, r6, r0
 8000b20:	b2a4      	uxth	r4, r4
 8000b22:	fbb6 f0f7 	udiv	r0, r6, r7
 8000b26:	fb07 6610 	mls	r6, r7, r0, r6
 8000b2a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b2e:	fb00 f303 	mul.w	r3, r0, r3
 8000b32:	42a3      	cmp	r3, r4
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x154>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x152>
 8000b40:	42a3      	cmp	r3, r4
 8000b42:	f200 80b8 	bhi.w	8000cb6 <__udivmoddi4+0x2c2>
 8000b46:	4630      	mov	r0, r6
 8000b48:	1ae4      	subs	r4, r4, r3
 8000b4a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000b4e:	e79f      	b.n	8000a90 <__udivmoddi4+0x9c>
 8000b50:	f1c1 0720 	rsb	r7, r1, #32
 8000b54:	fa22 f407 	lsr.w	r4, r2, r7
 8000b58:	408b      	lsls	r3, r1
 8000b5a:	4323      	orrs	r3, r4
 8000b5c:	fa06 fc01 	lsl.w	ip, r6, r1
 8000b60:	fa26 f407 	lsr.w	r4, r6, r7
 8000b64:	fa20 f607 	lsr.w	r6, r0, r7
 8000b68:	ea46 060c 	orr.w	r6, r6, ip
 8000b6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b70:	fa00 f801 	lsl.w	r8, r0, r1
 8000b74:	fbb4 fef9 	udiv	lr, r4, r9
 8000b78:	0c30      	lsrs	r0, r6, #16
 8000b7a:	fa1f fc83 	uxth.w	ip, r3
 8000b7e:	fb09 441e 	mls	r4, r9, lr, r4
 8000b82:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000b86:	fb0e f00c 	mul.w	r0, lr, ip
 8000b8a:	42a0      	cmp	r0, r4
 8000b8c:	fa02 f201 	lsl.w	r2, r2, r1
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x1b4>
 8000b92:	191c      	adds	r4, r3, r4
 8000b94:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000b98:	f080 808b 	bcs.w	8000cb2 <__udivmoddi4+0x2be>
 8000b9c:	42a0      	cmp	r0, r4
 8000b9e:	f240 8088 	bls.w	8000cb2 <__udivmoddi4+0x2be>
 8000ba2:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ba6:	441c      	add	r4, r3
 8000ba8:	1a24      	subs	r4, r4, r0
 8000baa:	b2b6      	uxth	r6, r6
 8000bac:	fbb4 f0f9 	udiv	r0, r4, r9
 8000bb0:	fb09 4410 	mls	r4, r9, r0, r4
 8000bb4:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000bb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bbc:	45a4      	cmp	ip, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x1dc>
 8000bc0:	191c      	adds	r4, r3, r4
 8000bc2:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
 8000bc6:	d270      	bcs.n	8000caa <__udivmoddi4+0x2b6>
 8000bc8:	45a4      	cmp	ip, r4
 8000bca:	d96e      	bls.n	8000caa <__udivmoddi4+0x2b6>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	441c      	add	r4, r3
 8000bd0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000bd4:	fba0 e602 	umull	lr, r6, r0, r2
 8000bd8:	eba4 040c 	sub.w	r4, r4, ip
 8000bdc:	42b4      	cmp	r4, r6
 8000bde:	46f4      	mov	ip, lr
 8000be0:	46b1      	mov	r9, r6
 8000be2:	d359      	bcc.n	8000c98 <__udivmoddi4+0x2a4>
 8000be4:	d056      	beq.n	8000c94 <__udivmoddi4+0x2a0>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d06e      	beq.n	8000cc8 <__udivmoddi4+0x2d4>
 8000bea:	ebb8 030c 	subs.w	r3, r8, ip
 8000bee:	eb64 0409 	sbc.w	r4, r4, r9
 8000bf2:	40cb      	lsrs	r3, r1
 8000bf4:	fa04 f707 	lsl.w	r7, r4, r7
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	40cc      	lsrs	r4, r1
 8000bfc:	e9c5 7400 	strd	r7, r4, [r5]
 8000c00:	2100      	movs	r1, #0
 8000c02:	e74a      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f100 	lsr.w	r1, r4, r0
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa06 f302 	lsl.w	r3, r6, r2
 8000c14:	fa26 f000 	lsr.w	r0, r6, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	ea41 0603 	orr.w	r6, r1, r3
 8000c20:	fbb0 f1f7 	udiv	r1, r0, r7
 8000c24:	fa1f f38c 	uxth.w	r3, ip
 8000c28:	fb07 0e11 	mls	lr, r7, r1, r0
 8000c2c:	0c30      	lsrs	r0, r6, #16
 8000c2e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c32:	fb01 fe03 	mul.w	lr, r1, r3
 8000c36:	4586      	cmp	lr, r0
 8000c38:	fa04 f402 	lsl.w	r4, r4, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x25c>
 8000c3e:	eb1c 0000 	adds.w	r0, ip, r0
 8000c42:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000c46:	d232      	bcs.n	8000cae <__udivmoddi4+0x2ba>
 8000c48:	4586      	cmp	lr, r0
 8000c4a:	d930      	bls.n	8000cae <__udivmoddi4+0x2ba>
 8000c4c:	3902      	subs	r1, #2
 8000c4e:	4460      	add	r0, ip
 8000c50:	eba0 000e 	sub.w	r0, r0, lr
 8000c54:	b2b6      	uxth	r6, r6
 8000c56:	fbb0 fef7 	udiv	lr, r0, r7
 8000c5a:	fb07 001e 	mls	r0, r7, lr, r0
 8000c5e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c62:	fb0e f003 	mul.w	r0, lr, r3
 8000c66:	42b0      	cmp	r0, r6
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0x28a>
 8000c6a:	eb1c 0606 	adds.w	r6, ip, r6
 8000c6e:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8000c72:	d218      	bcs.n	8000ca6 <__udivmoddi4+0x2b2>
 8000c74:	42b0      	cmp	r0, r6
 8000c76:	d916      	bls.n	8000ca6 <__udivmoddi4+0x2b2>
 8000c78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c7c:	4466      	add	r6, ip
 8000c7e:	1a36      	subs	r6, r6, r0
 8000c80:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
 8000c84:	e737      	b.n	8000af6 <__udivmoddi4+0x102>
 8000c86:	4629      	mov	r1, r5
 8000c88:	4628      	mov	r0, r5
 8000c8a:	e706      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	e6e4      	b.n	8000a5a <__udivmoddi4+0x66>
 8000c90:	4618      	mov	r0, r3
 8000c92:	e6f9      	b.n	8000a88 <__udivmoddi4+0x94>
 8000c94:	45f0      	cmp	r8, lr
 8000c96:	d2a6      	bcs.n	8000be6 <__udivmoddi4+0x1f2>
 8000c98:	ebbe 0c02 	subs.w	ip, lr, r2
 8000c9c:	eb66 0303 	sbc.w	r3, r6, r3
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	4699      	mov	r9, r3
 8000ca4:	e79f      	b.n	8000be6 <__udivmoddi4+0x1f2>
 8000ca6:	46c6      	mov	lr, r8
 8000ca8:	e7e9      	b.n	8000c7e <__udivmoddi4+0x28a>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e790      	b.n	8000bd0 <__udivmoddi4+0x1dc>
 8000cae:	4641      	mov	r1, r8
 8000cb0:	e7ce      	b.n	8000c50 <__udivmoddi4+0x25c>
 8000cb2:	46d6      	mov	lr, sl
 8000cb4:	e778      	b.n	8000ba8 <__udivmoddi4+0x1b4>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e745      	b.n	8000b48 <__udivmoddi4+0x154>
 8000cbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc0:	4466      	add	r6, ip
 8000cc2:	e72c      	b.n	8000b1e <__udivmoddi4+0x12a>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e703      	b.n	8000ad0 <__udivmoddi4+0xdc>
 8000cc8:	4629      	mov	r1, r5
 8000cca:	e6e6      	b.n	8000a9a <__udivmoddi4+0xa6>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__gedf2>:
 8000cd0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000cd4:	e006      	b.n	8000ce4 <__cmpdf2+0x4>
 8000cd6:	bf00      	nop

08000cd8 <__ledf2>:
 8000cd8:	f04f 0c01 	mov.w	ip, #1
 8000cdc:	e002      	b.n	8000ce4 <__cmpdf2+0x4>
 8000cde:	bf00      	nop

08000ce0 <__cmpdf2>:
 8000ce0:	f04f 0c01 	mov.w	ip, #1
 8000ce4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ce8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cfa:	d01b      	beq.n	8000d34 <__cmpdf2+0x54>
 8000cfc:	b001      	add	sp, #4
 8000cfe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d02:	bf0c      	ite	eq
 8000d04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000d08:	ea91 0f03 	teqne	r1, r3
 8000d0c:	bf02      	ittt	eq
 8000d0e:	ea90 0f02 	teqeq	r0, r2
 8000d12:	2000      	moveq	r0, #0
 8000d14:	4770      	bxeq	lr
 8000d16:	f110 0f00 	cmn.w	r0, #0
 8000d1a:	ea91 0f03 	teq	r1, r3
 8000d1e:	bf58      	it	pl
 8000d20:	4299      	cmppl	r1, r3
 8000d22:	bf08      	it	eq
 8000d24:	4290      	cmpeq	r0, r2
 8000d26:	bf2c      	ite	cs
 8000d28:	17d8      	asrcs	r0, r3, #31
 8000d2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d2e:	f040 0001 	orr.w	r0, r0, #1
 8000d32:	4770      	bx	lr
 8000d34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d3c:	d102      	bne.n	8000d44 <__cmpdf2+0x64>
 8000d3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d42:	d107      	bne.n	8000d54 <__cmpdf2+0x74>
 8000d44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d4c:	d1d6      	bne.n	8000cfc <__cmpdf2+0x1c>
 8000d4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d52:	d0d3      	beq.n	8000cfc <__cmpdf2+0x1c>
 8000d54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <__aeabi_cdrcmple>:
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4610      	mov	r0, r2
 8000d60:	4662      	mov	r2, ip
 8000d62:	468c      	mov	ip, r1
 8000d64:	4619      	mov	r1, r3
 8000d66:	4663      	mov	r3, ip
 8000d68:	e000      	b.n	8000d6c <__aeabi_cdcmpeq>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_cdcmpeq>:
 8000d6c:	b501      	push	{r0, lr}
 8000d6e:	f7ff ffb7 	bl	8000ce0 <__cmpdf2>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	bf48      	it	mi
 8000d76:	f110 0f00 	cmnmi.w	r0, #0
 8000d7a:	bd01      	pop	{r0, pc}

08000d7c <__aeabi_dcmpeq>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff fff4 	bl	8000d6c <__aeabi_cdcmpeq>
 8000d84:	bf0c      	ite	eq
 8000d86:	2001      	moveq	r0, #1
 8000d88:	2000      	movne	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_dcmplt>:
 8000d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d94:	f7ff ffea 	bl	8000d6c <__aeabi_cdcmpeq>
 8000d98:	bf34      	ite	cc
 8000d9a:	2001      	movcc	r0, #1
 8000d9c:	2000      	movcs	r0, #0
 8000d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da2:	bf00      	nop

08000da4 <__aeabi_dcmple>:
 8000da4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da8:	f7ff ffe0 	bl	8000d6c <__aeabi_cdcmpeq>
 8000dac:	bf94      	ite	ls
 8000dae:	2001      	movls	r0, #1
 8000db0:	2000      	movhi	r0, #0
 8000db2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000db6:	bf00      	nop

08000db8 <__aeabi_dcmpge>:
 8000db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dbc:	f7ff ffce 	bl	8000d5c <__aeabi_cdrcmple>
 8000dc0:	bf94      	ite	ls
 8000dc2:	2001      	movls	r0, #1
 8000dc4:	2000      	movhi	r0, #0
 8000dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dca:	bf00      	nop

08000dcc <__aeabi_dcmpgt>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff ffc4 	bl	8000d5c <__aeabi_cdrcmple>
 8000dd4:	bf34      	ite	cc
 8000dd6:	2001      	movcc	r0, #1
 8000dd8:	2000      	movcs	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_dcmpun>:
 8000de0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000de4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000de8:	d102      	bne.n	8000df0 <__aeabi_dcmpun+0x10>
 8000dea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dee:	d10a      	bne.n	8000e06 <__aeabi_dcmpun+0x26>
 8000df0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000df4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000df8:	d102      	bne.n	8000e00 <__aeabi_dcmpun+0x20>
 8000dfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dfe:	d102      	bne.n	8000e06 <__aeabi_dcmpun+0x26>
 8000e00:	f04f 0000 	mov.w	r0, #0
 8000e04:	4770      	bx	lr
 8000e06:	f04f 0001 	mov.w	r0, #1
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_d2iz>:
 8000e0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e14:	d215      	bcs.n	8000e42 <__aeabi_d2iz+0x36>
 8000e16:	d511      	bpl.n	8000e3c <__aeabi_d2iz+0x30>
 8000e18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e20:	d912      	bls.n	8000e48 <__aeabi_d2iz+0x3c>
 8000e22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e32:	fa23 f002 	lsr.w	r0, r3, r2
 8000e36:	bf18      	it	ne
 8000e38:	4240      	negne	r0, r0
 8000e3a:	4770      	bx	lr
 8000e3c:	f04f 0000 	mov.w	r0, #0
 8000e40:	4770      	bx	lr
 8000e42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e46:	d105      	bne.n	8000e54 <__aeabi_d2iz+0x48>
 8000e48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e52:	4770      	bx	lr
 8000e54:	f04f 0000 	mov.w	r0, #0
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <strcmp>:
 8000e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e64:	2a01      	cmp	r2, #1
 8000e66:	bf28      	it	cs
 8000e68:	429a      	cmpcs	r2, r3
 8000e6a:	d0f7      	beq.n	8000e5c <strcmp>
 8000e6c:	1ad0      	subs	r0, r2, r3
 8000e6e:	4770      	bx	lr

08000e70 <strlen>:
 8000e70:	4603      	mov	r3, r0
 8000e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e76:	2a00      	cmp	r2, #0
 8000e78:	d1fb      	bne.n	8000e72 <strlen+0x2>
 8000e7a:	1a18      	subs	r0, r3, r0
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	4770      	bx	lr

08000e80 <_Z17calculate_headingRK11coordinatesS1_>:
	float& x = *(quaternion + 1);
	float& y = *(quaternion + 2);
	float& z = *(quaternion + 3);
}

float calculate_heading(const coordinates& p1, const coordinates& p2) {
 8000e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 8000e84:	ed91 7a03 	vldr	s14, [r1, #12]
 8000e88:	edd0 7a03 	vldr	s15, [r0, #12]
float calculate_heading(const coordinates& p1, const coordinates& p2) {
 8000e8c:	ed2d 8b02 	vpush	{d8}
	return degrees * M_PI / 180.0;
 8000e90:	ee77 7a67 	vsub.f32	s15, s14, s15
float calculate_heading(const coordinates& p1, const coordinates& p2) {
 8000e94:	b085      	sub	sp, #20
 8000e96:	4605      	mov	r5, r0
	return degrees * M_PI / 180.0;
 8000e98:	ee17 0a90 	vmov	r0, s15
float calculate_heading(const coordinates& p1, const coordinates& p2) {
 8000e9c:	460c      	mov	r4, r1
	return degrees * M_PI / 180.0;
 8000e9e:	f7ff fad7 	bl	8000450 <__aeabi_f2d>
 8000ea2:	a377      	add	r3, pc, #476	; (adr r3, 8001080 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff fb2a 	bl	8000500 <__aeabi_dmul>
 8000eac:	4b76      	ldr	r3, [pc, #472]	; (8001088 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f7ff fc50 	bl	8000754 <__aeabi_ddiv>
 8000eb4:	f7ff fd36 	bl	8000924 <__aeabi_d2f>
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 8000eb8:	f7ff faca 	bl	8000450 <__aeabi_f2d>
 8000ebc:	ec41 0b10 	vmov	d0, r0, r1
 8000ec0:	f001 f8b2 	bl	8002028 <sin>
	return degrees * M_PI / 180.0;
 8000ec4:	68a0      	ldr	r0, [r4, #8]
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 8000ec6:	ed8d 0b00 	vstr	d0, [sp]
	return degrees * M_PI / 180.0;
 8000eca:	f7ff fac1 	bl	8000450 <__aeabi_f2d>
 8000ece:	a36c      	add	r3, pc, #432	; (adr r3, 8001080 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f7ff fb14 	bl	8000500 <__aeabi_dmul>
 8000ed8:	4b6b      	ldr	r3, [pc, #428]	; (8001088 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f7ff fc3a 	bl	8000754 <__aeabi_ddiv>
 8000ee0:	f7ff fd20 	bl	8000924 <__aeabi_d2f>
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 8000ee4:	f7ff fab4 	bl	8000450 <__aeabi_f2d>
 8000ee8:	ec41 0b10 	vmov	d0, r0, r1
 8000eec:	f001 f854 	bl	8001f98 <cos>
	return degrees * M_PI / 180.0;
 8000ef0:	68a8      	ldr	r0, [r5, #8]
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 8000ef2:	ed8d 0b02 	vstr	d0, [sp, #8]
	return degrees * M_PI / 180.0;
 8000ef6:	f7ff faab 	bl	8000450 <__aeabi_f2d>
 8000efa:	a361      	add	r3, pc, #388	; (adr r3, 8001080 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8000efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f00:	f7ff fafe 	bl	8000500 <__aeabi_dmul>
 8000f04:	4b60      	ldr	r3, [pc, #384]	; (8001088 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f7ff fc24 	bl	8000754 <__aeabi_ddiv>
 8000f0c:	f7ff fd0a 	bl	8000924 <__aeabi_d2f>
	float x = cos(rad(p1.latitude)) * sin(rad(p2.latitude));
 8000f10:	f7ff fa9e 	bl	8000450 <__aeabi_f2d>
 8000f14:	ec41 0b10 	vmov	d0, r0, r1
 8000f18:	f001 f83e 	bl	8001f98 <cos>
	return degrees * M_PI / 180.0;
 8000f1c:	68a0      	ldr	r0, [r4, #8]
	float x = cos(rad(p1.latitude)) * sin(rad(p2.latitude));
 8000f1e:	ec5b ab10 	vmov	sl, fp, d0
	return degrees * M_PI / 180.0;
 8000f22:	f7ff fa95 	bl	8000450 <__aeabi_f2d>
 8000f26:	a356      	add	r3, pc, #344	; (adr r3, 8001080 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fae8 	bl	8000500 <__aeabi_dmul>
 8000f30:	4b55      	ldr	r3, [pc, #340]	; (8001088 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f7ff fc0e 	bl	8000754 <__aeabi_ddiv>
 8000f38:	f7ff fcf4 	bl	8000924 <__aeabi_d2f>
	float x = cos(rad(p1.latitude)) * sin(rad(p2.latitude));
 8000f3c:	f7ff fa88 	bl	8000450 <__aeabi_f2d>
 8000f40:	ec41 0b10 	vmov	d0, r0, r1
 8000f44:	f001 f870 	bl	8002028 <sin>
	return degrees * M_PI / 180.0;
 8000f48:	68a8      	ldr	r0, [r5, #8]
	float x = cos(rad(p1.latitude)) * sin(rad(p2.latitude));
 8000f4a:	ec59 8b10 	vmov	r8, r9, d0
	return degrees * M_PI / 180.0;
 8000f4e:	f7ff fa7f 	bl	8000450 <__aeabi_f2d>
 8000f52:	a34b      	add	r3, pc, #300	; (adr r3, 8001080 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f7ff fad2 	bl	8000500 <__aeabi_dmul>
 8000f5c:	4b4a      	ldr	r3, [pc, #296]	; (8001088 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f7ff fbf8 	bl	8000754 <__aeabi_ddiv>
 8000f64:	f7ff fcde 	bl	8000924 <__aeabi_d2f>
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 8000f68:	f7ff fa72 	bl	8000450 <__aeabi_f2d>
 8000f6c:	ec41 0b10 	vmov	d0, r0, r1
 8000f70:	f001 f85a 	bl	8002028 <sin>
	return degrees * M_PI / 180.0;
 8000f74:	68a0      	ldr	r0, [r4, #8]
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 8000f76:	ec57 6b10 	vmov	r6, r7, d0
	return degrees * M_PI / 180.0;
 8000f7a:	f7ff fa69 	bl	8000450 <__aeabi_f2d>
 8000f7e:	a340      	add	r3, pc, #256	; (adr r3, 8001080 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fabc 	bl	8000500 <__aeabi_dmul>
 8000f88:	4b3f      	ldr	r3, [pc, #252]	; (8001088 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f7ff fbe2 	bl	8000754 <__aeabi_ddiv>
 8000f90:	f7ff fcc8 	bl	8000924 <__aeabi_d2f>
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 8000f94:	f7ff fa5c 	bl	8000450 <__aeabi_f2d>
 8000f98:	ec41 0b10 	vmov	d0, r0, r1
 8000f9c:	f000 fffc 	bl	8001f98 <cos>
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	ec53 2b10 	vmov	r2, r3, d0
 8000fa6:	4639      	mov	r1, r7
 8000fa8:	f7ff faaa 	bl	8000500 <__aeabi_dmul>
 8000fac:	ed94 7a03 	vldr	s14, [r4, #12]
 8000fb0:	edd5 7a03 	vldr	s15, [r5, #12]
	return degrees * M_PI / 180.0;
 8000fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 8000fb8:	4606      	mov	r6, r0
	return degrees * M_PI / 180.0;
 8000fba:	ee17 0a90 	vmov	r0, s15
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 8000fbe:	460f      	mov	r7, r1
	return degrees * M_PI / 180.0;
 8000fc0:	f7ff fa46 	bl	8000450 <__aeabi_f2d>
 8000fc4:	a32e      	add	r3, pc, #184	; (adr r3, 8001080 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fa99 	bl	8000500 <__aeabi_dmul>
 8000fce:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f7ff fbbf 	bl	8000754 <__aeabi_ddiv>
 8000fd6:	f7ff fca5 	bl	8000924 <__aeabi_d2f>
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 8000fda:	f7ff fa39 	bl	8000450 <__aeabi_f2d>
 8000fde:	ec41 0b10 	vmov	d0, r0, r1
 8000fe2:	f000 ffd9 	bl	8001f98 <cos>
	float x = cos(rad(p1.latitude)) * sin(rad(p2.latitude));
 8000fe6:	4642      	mov	r2, r8
 8000fe8:	464b      	mov	r3, r9
 8000fea:	4650      	mov	r0, sl
 8000fec:	4659      	mov	r1, fp
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 8000fee:	ec55 4b10 	vmov	r4, r5, d0
	float x = cos(rad(p1.latitude)) * sin(rad(p2.latitude));
 8000ff2:	f7ff fa85 	bl	8000500 <__aeabi_dmul>
 8000ff6:	f7ff fc95 	bl	8000924 <__aeabi_d2f>
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 8000ffa:	f7ff fa29 	bl	8000450 <__aeabi_f2d>
 8000ffe:	4622      	mov	r2, r4
 8001000:	4680      	mov	r8, r0
 8001002:	4689      	mov	r9, r1
 8001004:	462b      	mov	r3, r5
 8001006:	4630      	mov	r0, r6
 8001008:	4639      	mov	r1, r7
 800100a:	f7ff fa79 	bl	8000500 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4640      	mov	r0, r8
 8001014:	4649      	mov	r1, r9
 8001016:	f7ff f8bb 	bl	8000190 <__aeabi_dsub>
 800101a:	f7ff fc83 	bl	8000924 <__aeabi_d2f>
	return deg(atan2(y, x));	
 800101e:	f7ff fa17 	bl	8000450 <__aeabi_f2d>
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 8001022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	return deg(atan2(y, x));	
 8001026:	ec41 0b18 	vmov	d8, r0, r1
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 800102a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800102e:	f7ff fa67 	bl	8000500 <__aeabi_dmul>
 8001032:	f7ff fc77 	bl	8000924 <__aeabi_d2f>
	return deg(atan2(y, x));	
 8001036:	f7ff fa0b 	bl	8000450 <__aeabi_f2d>
 800103a:	eeb0 1a48 	vmov.f32	s2, s16
 800103e:	eef0 1a68 	vmov.f32	s3, s17
 8001042:	ec41 0b10 	vmov	d0, r0, r1
 8001046:	f007 f8ad 	bl	80081a4 <atan2>
 800104a:	ec51 0b10 	vmov	r0, r1, d0
 800104e:	f7ff fc69 	bl	8000924 <__aeabi_d2f>
	return radians * 180.0 / M_PI;
 8001052:	f7ff f9fd 	bl	8000450 <__aeabi_f2d>
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 8001058:	2200      	movs	r2, #0
 800105a:	f7ff fa51 	bl	8000500 <__aeabi_dmul>
 800105e:	a308      	add	r3, pc, #32	; (adr r3, 8001080 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fb76 	bl	8000754 <__aeabi_ddiv>
 8001068:	f7ff fc5c 	bl	8000924 <__aeabi_d2f>
}
 800106c:	ee00 0a10 	vmov	s0, r0
 8001070:	b005      	add	sp, #20
 8001072:	ecbd 8b02 	vpop	{d8}
 8001076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w
 8001080:	54442d18 	.word	0x54442d18
 8001084:	400921fb 	.word	0x400921fb
 8001088:	40668000 	.word	0x40668000
 800108c:	00000000 	.word	0x00000000

08001090 <_Z18calculate_distanceRK11coordinatesS1_>:

float calculate_distance(const coordinates& p1, const coordinates& p2) {
 8001090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	float r = 6371000.0;
	float a = pow(sin(rad(p2.latitude - p1.latitude) / 2), 2);
 8001094:	ed91 7a02 	vldr	s14, [r1, #8]
 8001098:	edd0 7a02 	vldr	s15, [r0, #8]
	return degrees * M_PI / 180.0;
 800109c:	ee77 7a67 	vsub.f32	s15, s14, s15
float calculate_distance(const coordinates& p1, const coordinates& p2) {
 80010a0:	ed2d 8b04 	vpush	{d8-d9}
 80010a4:	4605      	mov	r5, r0
	return degrees * M_PI / 180.0;
 80010a6:	ee17 0a90 	vmov	r0, s15
float calculate_distance(const coordinates& p1, const coordinates& p2) {
 80010aa:	460c      	mov	r4, r1
	return degrees * M_PI / 180.0;
 80010ac:	f7ff f9d0 	bl	8000450 <__aeabi_f2d>
 80010b0:	a363      	add	r3, pc, #396	; (adr r3, 8001240 <_Z18calculate_distanceRK11coordinatesS1_+0x1b0>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fa23 	bl	8000500 <__aeabi_dmul>
 80010ba:	4b65      	ldr	r3, [pc, #404]	; (8001250 <_Z18calculate_distanceRK11coordinatesS1_+0x1c0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f7ff fb49 	bl	8000754 <__aeabi_ddiv>
 80010c2:	f7ff fc2f 	bl	8000924 <__aeabi_d2f>
	float a = pow(sin(rad(p2.latitude - p1.latitude) / 2), 2);
 80010c6:	ee07 0a90 	vmov	s15, r0
 80010ca:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80010ce:	ee67 7a88 	vmul.f32	s15, s15, s16
 80010d2:	ed9f 9b59 	vldr	d9, [pc, #356]	; 8001238 <_Z18calculate_distanceRK11coordinatesS1_+0x1a8>
 80010d6:	ee17 0a90 	vmov	r0, s15
 80010da:	f7ff f9b9 	bl	8000450 <__aeabi_f2d>
 80010de:	ec41 0b10 	vmov	d0, r0, r1
 80010e2:	f000 ffa1 	bl	8002028 <sin>
 80010e6:	eeb0 1a49 	vmov.f32	s2, s18
 80010ea:	eef0 1a69 	vmov.f32	s3, s19
 80010ee:	f000 ffe3 	bl	80020b8 <pow>
	float dlon = rad(p2.longitude - p1.longitude) / 2;
 80010f2:	ed94 7a03 	vldr	s14, [r4, #12]
 80010f6:	edd5 7a03 	vldr	s15, [r5, #12]
	return degrees * M_PI / 180.0;
 80010fa:	ee77 7a67 	vsub.f32	s15, s14, s15
	float a = pow(sin(rad(p2.latitude - p1.latitude) / 2), 2);
 80010fe:	ec57 6b10 	vmov	r6, r7, d0
	return degrees * M_PI / 180.0;
 8001102:	ee17 0a90 	vmov	r0, s15
 8001106:	f7ff f9a3 	bl	8000450 <__aeabi_f2d>
 800110a:	a34d      	add	r3, pc, #308	; (adr r3, 8001240 <_Z18calculate_distanceRK11coordinatesS1_+0x1b0>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff f9f6 	bl	8000500 <__aeabi_dmul>
 8001114:	4b4e      	ldr	r3, [pc, #312]	; (8001250 <_Z18calculate_distanceRK11coordinatesS1_+0x1c0>)
 8001116:	2200      	movs	r2, #0
 8001118:	f7ff fb1c 	bl	8000754 <__aeabi_ddiv>
 800111c:	f7ff fc02 	bl	8000924 <__aeabi_d2f>
	float dlon = rad(p2.longitude - p1.longitude) / 2;
 8001120:	ee07 0a90 	vmov	s15, r0
	return degrees * M_PI / 180.0;
 8001124:	68a8      	ldr	r0, [r5, #8]
	float dlon = rad(p2.longitude - p1.longitude) / 2;
 8001126:	ee27 8a88 	vmul.f32	s16, s15, s16
	return degrees * M_PI / 180.0;
 800112a:	f7ff f991 	bl	8000450 <__aeabi_f2d>
 800112e:	a344      	add	r3, pc, #272	; (adr r3, 8001240 <_Z18calculate_distanceRK11coordinatesS1_+0x1b0>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff f9e4 	bl	8000500 <__aeabi_dmul>
 8001138:	4b45      	ldr	r3, [pc, #276]	; (8001250 <_Z18calculate_distanceRK11coordinatesS1_+0x1c0>)
 800113a:	2200      	movs	r2, #0
 800113c:	f7ff fb0a 	bl	8000754 <__aeabi_ddiv>
 8001140:	f7ff fbf0 	bl	8000924 <__aeabi_d2f>
	a += cos(rad(p1.latitude)) * cos(rad(p2.latitude)) * pow(sin(dlon), 2);
 8001144:	f7ff f984 	bl	8000450 <__aeabi_f2d>
 8001148:	ec41 0b10 	vmov	d0, r0, r1
 800114c:	f000 ff24 	bl	8001f98 <cos>
	return degrees * M_PI / 180.0;
 8001150:	68a0      	ldr	r0, [r4, #8]
	a += cos(rad(p1.latitude)) * cos(rad(p2.latitude)) * pow(sin(dlon), 2);
 8001152:	ec59 8b10 	vmov	r8, r9, d0
	return degrees * M_PI / 180.0;
 8001156:	f7ff f97b 	bl	8000450 <__aeabi_f2d>
 800115a:	a339      	add	r3, pc, #228	; (adr r3, 8001240 <_Z18calculate_distanceRK11coordinatesS1_+0x1b0>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff f9ce 	bl	8000500 <__aeabi_dmul>
 8001164:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <_Z18calculate_distanceRK11coordinatesS1_+0x1c0>)
 8001166:	2200      	movs	r2, #0
 8001168:	f7ff faf4 	bl	8000754 <__aeabi_ddiv>
 800116c:	f7ff fbda 	bl	8000924 <__aeabi_d2f>
	a += cos(rad(p1.latitude)) * cos(rad(p2.latitude)) * pow(sin(dlon), 2);
 8001170:	f7ff f96e 	bl	8000450 <__aeabi_f2d>
 8001174:	ec41 0b10 	vmov	d0, r0, r1
 8001178:	f000 ff0e 	bl	8001f98 <cos>
 800117c:	4640      	mov	r0, r8
 800117e:	ec53 2b10 	vmov	r2, r3, d0
 8001182:	4649      	mov	r1, r9
 8001184:	f7ff f9bc 	bl	8000500 <__aeabi_dmul>
 8001188:	4604      	mov	r4, r0
 800118a:	ee18 0a10 	vmov	r0, s16
 800118e:	460d      	mov	r5, r1
 8001190:	f7ff f95e 	bl	8000450 <__aeabi_f2d>
 8001194:	ec41 0b10 	vmov	d0, r0, r1
 8001198:	f000 ff46 	bl	8002028 <sin>
 800119c:	eeb0 1a49 	vmov.f32	s2, s18
 80011a0:	eef0 1a69 	vmov.f32	s3, s19
 80011a4:	f000 ff88 	bl	80020b8 <pow>
 80011a8:	4620      	mov	r0, r4
 80011aa:	ec53 2b10 	vmov	r2, r3, d0
 80011ae:	4629      	mov	r1, r5
 80011b0:	f7ff f9a6 	bl	8000500 <__aeabi_dmul>
 80011b4:	4604      	mov	r4, r0
 80011b6:	460d      	mov	r5, r1
	float a = pow(sin(rad(p2.latitude - p1.latitude) / 2), 2);
 80011b8:	4630      	mov	r0, r6
 80011ba:	4639      	mov	r1, r7
 80011bc:	f7ff fbb2 	bl	8000924 <__aeabi_d2f>
	a += cos(rad(p1.latitude)) * cos(rad(p2.latitude)) * pow(sin(dlon), 2);
 80011c0:	f7ff f946 	bl	8000450 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4620      	mov	r0, r4
 80011ca:	4629      	mov	r1, r5
 80011cc:	f7fe ffe2 	bl	8000194 <__adddf3>
 80011d0:	f7ff fba8 	bl	8000924 <__aeabi_d2f>
 80011d4:	ee09 0a10 	vmov	s18, r0
	return r * 2 * atan2(sqrt(a), sqrt(1-a));
 80011d8:	f7ff f93a 	bl	8000450 <__aeabi_f2d>
 80011dc:	ec41 0b10 	vmov	d0, r0, r1
 80011e0:	f006 ffe2 	bl	80081a8 <sqrt>
 80011e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80011e8:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80011ec:	eeb0 8a40 	vmov.f32	s16, s0
 80011f0:	eef0 8a60 	vmov.f32	s17, s1
 80011f4:	ee17 0a90 	vmov	r0, s15
 80011f8:	f7ff f92a 	bl	8000450 <__aeabi_f2d>
 80011fc:	ec41 0b10 	vmov	d0, r0, r1
 8001200:	f006 ffd2 	bl	80081a8 <sqrt>
 8001204:	eeb0 1a40 	vmov.f32	s2, s0
 8001208:	eef0 1a60 	vmov.f32	s3, s1
 800120c:	eeb0 0a48 	vmov.f32	s0, s16
 8001210:	eef0 0a68 	vmov.f32	s1, s17
 8001214:	f006 ffc6 	bl	80081a4 <atan2>
 8001218:	a30b      	add	r3, pc, #44	; (adr r3, 8001248 <_Z18calculate_distanceRK11coordinatesS1_+0x1b8>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	ec51 0b10 	vmov	r0, r1, d0
 8001222:	f7ff f96d 	bl	8000500 <__aeabi_dmul>
 8001226:	f7ff fb7d 	bl	8000924 <__aeabi_d2f>
}
 800122a:	ecbd 8b04 	vpop	{d8-d9}
 800122e:	ee00 0a10 	vmov	s0, r0
 8001232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001236:	bf00      	nop
 8001238:	00000000 	.word	0x00000000
 800123c:	40000000 	.word	0x40000000
 8001240:	54442d18 	.word	0x54442d18
 8001244:	400921fb 	.word	0x400921fb
 8001248:	00000000 	.word	0x00000000
 800124c:	41684dae 	.word	0x41684dae
 8001250:	40668000 	.word	0x40668000
 8001254:	00000000 	.word	0x00000000

08001258 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t>:
		mavlink_msg_gps_raw_int_decode(&msg, &gps_raw_int);
		handle_gps_raw_int(msg.sysid, gps_raw_int);
	}
}

void handle_gps_raw_int(uint8_t sys_id, mavlink_gps_raw_int_t& gps_raw_int) {
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	4606      	mov	r6, r0
	size_t size = sizeof(struct coordinates);
        void* mem_ptr = k_malloc(size);
 800125c:	2014      	movs	r0, #20
void handle_gps_raw_int(uint8_t sys_id, mavlink_gps_raw_int_t& gps_raw_int) {
 800125e:	460d      	mov	r5, r1
        void* mem_ptr = k_malloc(size);
 8001260:	f008 fe71 	bl	8009f46 <k_malloc>
	struct coordinates* coords = reinterpret_cast<struct coordinates*>(mem_ptr);
	coords->sys_id = sys_id;
 8001264:	7106      	strb	r6, [r0, #4]
        void* mem_ptr = k_malloc(size);
 8001266:	4604      	mov	r4, r0
	coords->latitude = gps_raw_int.lat / 1e7;
 8001268:	68a8      	ldr	r0, [r5, #8]
 800126a:	f7ff f8df 	bl	800042c <__aeabi_i2d>
 800126e:	a314      	add	r3, pc, #80	; (adr r3, 80012c0 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x68>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff fa6e 	bl	8000754 <__aeabi_ddiv>
 8001278:	f7ff fb54 	bl	8000924 <__aeabi_d2f>
 800127c:	60a0      	str	r0, [r4, #8]
	coords->longitude = gps_raw_int.lon / 1e7;
 800127e:	68e8      	ldr	r0, [r5, #12]
 8001280:	f7ff f8d4 	bl	800042c <__aeabi_i2d>
 8001284:	a30e      	add	r3, pc, #56	; (adr r3, 80012c0 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x68>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff fa63 	bl	8000754 <__aeabi_ddiv>
 800128e:	f7ff fb49 	bl	8000924 <__aeabi_d2f>
 8001292:	60e0      	str	r0, [r4, #12]
	coords->altitude = gps_raw_int.alt / 1e3;
 8001294:	6928      	ldr	r0, [r5, #16]
 8001296:	f7ff f8c9 	bl	800042c <__aeabi_i2d>
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x60>)
 800129c:	2200      	movs	r2, #0
 800129e:	f7ff fa59 	bl	8000754 <__aeabi_ddiv>
 80012a2:	f7ff fb3f 	bl	8000924 <__aeabi_d2f>
	k_fifo_put(&coords_fifo, mem_ptr);
 80012a6:	4621      	mov	r1, r4
	coords->altitude = gps_raw_int.alt / 1e3;
 80012a8:	6120      	str	r0, [r4, #16]
}
 80012aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_fifo_put(&coords_fifo, mem_ptr);
 80012ae:	4803      	ldr	r0, [pc, #12]	; (80012bc <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t+0x64>)
 80012b0:	f008 bc9f 	b.w	8009bf2 <k_queue_append>
 80012b4:	f3af 8000 	nop.w
 80012b8:	408f4000 	.word	0x408f4000
 80012bc:	200001f4 	.word	0x200001f4
 80012c0:	00000000 	.word	0x00000000
 80012c4:	416312d0 	.word	0x416312d0

080012c8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 80012c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012cc:	ed2d 8b02 	vpush	{d8}
	uint64_t round = BIT64(59); /* 0.5 */
 80012d0:	ed9f 8bab 	vldr	d8, [pc, #684]	; 8001580 <cbvprintf+0x2b8>
{
 80012d4:	b09b      	sub	sp, #108	; 0x6c
 80012d6:	4681      	mov	r9, r0
 80012d8:	468a      	mov	sl, r1
 80012da:	4615      	mov	r5, r2
 80012dc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80012de:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80012e0:	7828      	ldrb	r0, [r5, #0]
 80012e2:	b910      	cbnz	r0, 80012ea <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80012e4:	4630      	mov	r0, r6
 80012e6:	f000 bdc9 	b.w	8001e7c <cbvprintf+0xbb4>
			OUTC(*fp++);
 80012ea:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
 80012ec:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 80012ee:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
 80012f0:	d006      	beq.n	8001300 <cbvprintf+0x38>
			OUTC(*fp++);
 80012f2:	4651      	mov	r1, sl
			OUTC('%');
 80012f4:	47c8      	blx	r9
 80012f6:	2800      	cmp	r0, #0
 80012f8:	f2c0 85c0 	blt.w	8001e7c <cbvprintf+0xbb4>
 80012fc:	3601      	adds	r6, #1
		if (bps == NULL) {
 80012fe:	e22e      	b.n	800175e <cbvprintf+0x496>
		} state = {
 8001300:	2218      	movs	r2, #24
 8001302:	2100      	movs	r1, #0
 8001304:	a80c      	add	r0, sp, #48	; 0x30
 8001306:	f008 fea8 	bl	800a05a <memset>
	if (*sp == '%') {
 800130a:	786b      	ldrb	r3, [r5, #1]
 800130c:	2b25      	cmp	r3, #37	; 0x25
 800130e:	d059      	beq.n	80013c4 <cbvprintf+0xfc>
 8001310:	1c6a      	adds	r2, r5, #1
 8001312:	4617      	mov	r7, r2
		switch (*sp) {
 8001314:	f812 3b01 	ldrb.w	r3, [r2], #1
 8001318:	2b2b      	cmp	r3, #43	; 0x2b
 800131a:	f000 808b 	beq.w	8001434 <cbvprintf+0x16c>
 800131e:	d879      	bhi.n	8001414 <cbvprintf+0x14c>
 8001320:	2b20      	cmp	r3, #32
 8001322:	f000 808c 	beq.w	800143e <cbvprintf+0x176>
 8001326:	2b23      	cmp	r3, #35	; 0x23
 8001328:	f000 808e 	beq.w	8001448 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
 800132c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001330:	f003 0244 	and.w	r2, r3, #68	; 0x44
 8001334:	2a44      	cmp	r2, #68	; 0x44
 8001336:	d103      	bne.n	8001340 <cbvprintf+0x78>
		conv->flag_zero = false;
 8001338:	f36f 1386 	bfc	r3, #6, #1
 800133c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
 8001340:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001344:	970a      	str	r7, [sp, #40]	; 0x28
 8001346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
 800134e:	783b      	ldrb	r3, [r7, #0]
 8001350:	2b2a      	cmp	r3, #42	; 0x2a
 8001352:	d17e      	bne.n	8001452 <cbvprintf+0x18a>
		conv->width_star = true;
 8001354:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
 8001360:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
 8001362:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	2a2e      	cmp	r2, #46	; 0x2e
 8001368:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800136c:	bf0c      	ite	eq
 800136e:	2101      	moveq	r1, #1
 8001370:	2100      	movne	r1, #0
 8001372:	f361 0241 	bfi	r2, r1, #1, #1
 8001376:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
 800137a:	d10b      	bne.n	8001394 <cbvprintf+0xcc>
	++sp;
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
 8001380:	785a      	ldrb	r2, [r3, #1]
 8001382:	2a2a      	cmp	r2, #42	; 0x2a
 8001384:	d17b      	bne.n	800147e <cbvprintf+0x1b6>
		conv->prec_star = true;
 8001386:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800138a:	f042 0204 	orr.w	r2, r2, #4
 800138e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
 8001392:	3302      	adds	r3, #2
	switch (*sp) {
 8001394:	4619      	mov	r1, r3
 8001396:	f811 0b01 	ldrb.w	r0, [r1], #1
 800139a:	286c      	cmp	r0, #108	; 0x6c
 800139c:	f000 80cf 	beq.w	800153e <cbvprintf+0x276>
 80013a0:	d87d      	bhi.n	800149e <cbvprintf+0x1d6>
 80013a2:	2868      	cmp	r0, #104	; 0x68
 80013a4:	f000 8084 	beq.w	80014b0 <cbvprintf+0x1e8>
 80013a8:	286a      	cmp	r0, #106	; 0x6a
 80013aa:	f000 80d2 	beq.w	8001552 <cbvprintf+0x28a>
 80013ae:	284c      	cmp	r0, #76	; 0x4c
 80013b0:	f000 80d6 	beq.w	8001560 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
 80013b4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80013b8:	f36f 02c6 	bfc	r2, #3, #4
 80013bc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
 80013c0:	4619      	mov	r1, r3
 80013c2:	e080      	b.n	80014c6 <cbvprintf+0x1fe>
		conv->specifier = *sp++;
 80013c4:	1caa      	adds	r2, r5, #2
 80013c6:	9202      	str	r2, [sp, #8]
 80013c8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
 80013cc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80013d0:	07df      	lsls	r7, r3, #31
 80013d2:	f140 8178 	bpl.w	80016c6 <cbvprintf+0x3fe>
			width = va_arg(ap, int);
 80013d6:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
 80013da:	f1bb 0f00 	cmp.w	fp, #0
 80013de:	da07      	bge.n	80013f0 <cbvprintf+0x128>
				conv->flag_dash = true;
 80013e0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80013e4:	f042 0204 	orr.w	r2, r2, #4
 80013e8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
 80013ec:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
 80013f0:	0758      	lsls	r0, r3, #29
 80013f2:	f140 8171 	bpl.w	80016d8 <cbvprintf+0x410>
			int arg = va_arg(ap, int);
 80013f6:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 80013fa:	f1b8 0f00 	cmp.w	r8, #0
 80013fe:	f280 8170 	bge.w	80016e2 <cbvprintf+0x41a>
				conv->prec_present = false;
 8001402:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001406:	f36f 0341 	bfc	r3, #1, #1
 800140a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
 800140e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8001412:	e166      	b.n	80016e2 <cbvprintf+0x41a>
		switch (*sp) {
 8001414:	2b2d      	cmp	r3, #45	; 0x2d
 8001416:	d006      	beq.n	8001426 <cbvprintf+0x15e>
 8001418:	2b30      	cmp	r3, #48	; 0x30
 800141a:	d187      	bne.n	800132c <cbvprintf+0x64>
			conv->flag_zero = true;
 800141c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001424:	e003      	b.n	800142e <cbvprintf+0x166>
			conv->flag_dash = true;
 8001426:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800142a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
 800142e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
 8001432:	e76e      	b.n	8001312 <cbvprintf+0x4a>
			conv->flag_plus = true;
 8001434:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	e7f7      	b.n	800142e <cbvprintf+0x166>
			conv->flag_space = true;
 800143e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	e7f2      	b.n	800142e <cbvprintf+0x166>
			conv->flag_hash = true;
 8001448:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800144c:	f043 0320 	orr.w	r3, r3, #32
 8001450:	e7ed      	b.n	800142e <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
 8001452:	a80a      	add	r0, sp, #40	; 0x28
 8001454:	f003 fc92 	bl	8004d7c <extract_decimal>
	if (sp != wp) {
 8001458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800145a:	42bb      	cmp	r3, r7
 800145c:	d081      	beq.n	8001362 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
 800145e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
		conv->width_value = width;
 8001462:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
 8001464:	f3c7 0140 	ubfx	r1, r7, #1, #1
 8001468:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
 800146c:	0052      	lsls	r2, r2, #1
 800146e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001472:	f007 017d 	and.w	r1, r7, #125	; 0x7d
 8001476:	430a      	orrs	r2, r1
 8001478:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800147c:	e771      	b.n	8001362 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
 800147e:	a80a      	add	r0, sp, #40	; 0x28
 8001480:	f003 fc7c 	bl	8004d7c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8001484:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
 8001488:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
 800148a:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800148e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
 8001492:	f360 0341 	bfi	r3, r0, #1, #1
 8001496:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
 800149a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800149c:	e77a      	b.n	8001394 <cbvprintf+0xcc>
	switch (*sp) {
 800149e:	2874      	cmp	r0, #116	; 0x74
 80014a0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80014a4:	d059      	beq.n	800155a <cbvprintf+0x292>
 80014a6:	287a      	cmp	r0, #122	; 0x7a
 80014a8:	d184      	bne.n	80013b4 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
 80014aa:	4613      	mov	r3, r2
 80014ac:	2206      	movs	r2, #6
 80014ae:	e041      	b.n	8001534 <cbvprintf+0x26c>
		if (*++sp == 'h') {
 80014b0:	785a      	ldrb	r2, [r3, #1]
 80014b2:	2a68      	cmp	r2, #104	; 0x68
 80014b4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80014b8:	d13a      	bne.n	8001530 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
 80014ba:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 80014bc:	f361 02c6 	bfi	r2, r1, #3, #4
 80014c0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
 80014c4:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
 80014c6:	460b      	mov	r3, r1
 80014c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014cc:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
 80014ce:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 80014d0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
 80014d4:	f200 80cd 	bhi.w	8001672 <cbvprintf+0x3aa>
 80014d8:	2a57      	cmp	r2, #87	; 0x57
 80014da:	d855      	bhi.n	8001588 <cbvprintf+0x2c0>
 80014dc:	2a41      	cmp	r2, #65	; 0x41
 80014de:	d004      	beq.n	80014ea <cbvprintf+0x222>
 80014e0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	f200 80c4 	bhi.w	8001672 <cbvprintf+0x3aa>
		conv->specifier_cat = SPECIFIER_FP;
 80014ea:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80014ee:	2104      	movs	r1, #4
 80014f0:	f361 0302 	bfi	r3, r1, #0, #3
 80014f4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 80014f8:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80014fc:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
 8001500:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
 8001504:	f1d8 0300 	rsbs	r3, r8, #0
 8001508:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
 800150c:	f363 12c7 	bfi	r2, r3, #7, #1
 8001510:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
 8001514:	b2d3      	uxtb	r3, r2
 8001516:	0612      	lsls	r2, r2, #24
 8001518:	f100 80d3 	bmi.w	80016c2 <cbvprintf+0x3fa>
		if (conv->length_mod == LENGTH_L) {
 800151c:	f003 0278 	and.w	r2, r3, #120	; 0x78
 8001520:	2a18      	cmp	r2, #24
 8001522:	f040 80a3 	bne.w	800166c <cbvprintf+0x3a4>
			conv->length_mod = LENGTH_NONE;
 8001526:	f36f 03c6 	bfc	r3, #3, #4
 800152a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 800152e:	e08a      	b.n	8001646 <cbvprintf+0x37e>
			conv->length_mod = LENGTH_H;
 8001530:	4613      	mov	r3, r2
 8001532:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
 8001534:	f362 03c6 	bfi	r3, r2, #3, #4
 8001538:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 800153c:	e7c3      	b.n	80014c6 <cbvprintf+0x1fe>
		if (*++sp == 'l') {
 800153e:	785a      	ldrb	r2, [r3, #1]
 8001540:	2a6c      	cmp	r2, #108	; 0x6c
 8001542:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8001546:	d101      	bne.n	800154c <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
 8001548:	2104      	movs	r1, #4
 800154a:	e7b7      	b.n	80014bc <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
 800154c:	4613      	mov	r3, r2
 800154e:	2203      	movs	r2, #3
 8001550:	e7f0      	b.n	8001534 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
 8001552:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001556:	2205      	movs	r2, #5
 8001558:	e7ec      	b.n	8001534 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
 800155a:	4613      	mov	r3, r2
 800155c:	2207      	movs	r2, #7
 800155e:	e7e9      	b.n	8001534 <cbvprintf+0x26c>
		conv->unsupported = true;
 8001560:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8001564:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001568:	f023 0302 	bic.w	r3, r3, #2
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
 8001578:	e7a5      	b.n	80014c6 <cbvprintf+0x1fe>
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	00000000 	.word	0x00000000
 8001584:	08000000 	.word	0x08000000
 8001588:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 800158c:	2b20      	cmp	r3, #32
 800158e:	d870      	bhi.n	8001672 <cbvprintf+0x3aa>
 8001590:	a101      	add	r1, pc, #4	; (adr r1, 8001598 <cbvprintf+0x2d0>)
 8001592:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001596:	bf00      	nop
 8001598:	0800164b 	.word	0x0800164b
 800159c:	08001673 	.word	0x08001673
 80015a0:	08001673 	.word	0x08001673
 80015a4:	08001673 	.word	0x08001673
 80015a8:	08001673 	.word	0x08001673
 80015ac:	08001673 	.word	0x08001673
 80015b0:	08001673 	.word	0x08001673
 80015b4:	08001673 	.word	0x08001673
 80015b8:	08001673 	.word	0x08001673
 80015bc:	080014eb 	.word	0x080014eb
 80015c0:	08001673 	.word	0x08001673
 80015c4:	0800164b 	.word	0x0800164b
 80015c8:	0800161d 	.word	0x0800161d
 80015cc:	080014eb 	.word	0x080014eb
 80015d0:	080014eb 	.word	0x080014eb
 80015d4:	080014eb 	.word	0x080014eb
 80015d8:	08001673 	.word	0x08001673
 80015dc:	0800161d 	.word	0x0800161d
 80015e0:	08001673 	.word	0x08001673
 80015e4:	08001673 	.word	0x08001673
 80015e8:	08001673 	.word	0x08001673
 80015ec:	08001673 	.word	0x08001673
 80015f0:	08001681 	.word	0x08001681
 80015f4:	0800164b 	.word	0x0800164b
 80015f8:	080016a5 	.word	0x080016a5
 80015fc:	08001673 	.word	0x08001673
 8001600:	08001673 	.word	0x08001673
 8001604:	080016a5 	.word	0x080016a5
 8001608:	08001673 	.word	0x08001673
 800160c:	0800164b 	.word	0x0800164b
 8001610:	08001673 	.word	0x08001673
 8001614:	08001673 	.word	0x08001673
 8001618:	0800164b 	.word	0x0800164b
		conv->specifier_cat = SPECIFIER_SINT;
 800161c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001620:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
 8001622:	f361 0302 	bfi	r3, r1, #0, #3
 8001626:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 800162a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800162e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001632:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
 8001634:	bf02      	ittt	eq
 8001636:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
 800163a:	f041 0101 	orreq.w	r1, r1, #1
 800163e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
 8001642:	2a63      	cmp	r2, #99	; 0x63
 8001644:	d005      	beq.n	8001652 <cbvprintf+0x38a>
	bool unsupported = false;
 8001646:	2300      	movs	r3, #0
 8001648:	e006      	b.n	8001658 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_UINT;
 800164a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800164e:	2102      	movs	r1, #2
 8001650:	e7e7      	b.n	8001622 <cbvprintf+0x35a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8001652:	3b00      	subs	r3, #0
 8001654:	bf18      	it	ne
 8001656:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8001658:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800165c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8001660:	430b      	orrs	r3, r1
 8001662:	f363 0241 	bfi	r2, r3, #1, #1
 8001666:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
 800166a:	e6af      	b.n	80013cc <cbvprintf+0x104>
		} else if ((conv->length_mod != LENGTH_NONE)
 800166c:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001670:	d0e9      	beq.n	8001646 <cbvprintf+0x37e>
			conv->invalid = true;
 8001672:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 800167e:	e7e2      	b.n	8001646 <cbvprintf+0x37e>
		conv->specifier_cat = SPECIFIER_PTR;
 8001680:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001684:	2203      	movs	r2, #3
 8001686:	f362 0302 	bfi	r3, r2, #0, #3
 800168a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 800168e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001692:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001696:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
 800169a:	f1dc 0300 	rsbs	r3, ip, #0
 800169e:	eb43 030c 	adc.w	r3, r3, ip
 80016a2:	e7d9      	b.n	8001658 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_PTR;
 80016a4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80016a8:	2203      	movs	r2, #3
 80016aa:	f362 0302 	bfi	r3, r2, #0, #3
 80016ae:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
 80016b2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80016b6:	f013 0f78 	tst.w	r3, #120	; 0x78
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	e7ca      	b.n	8001658 <cbvprintf+0x390>
			unsupported = true;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e7c8      	b.n	8001658 <cbvprintf+0x390>
		} else if (conv->width_present) {
 80016c6:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
 80016ca:	2a00      	cmp	r2, #0
			width = conv->width_value;
 80016cc:	bfb4      	ite	lt
 80016ce:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
 80016d2:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
 80016d6:	e68b      	b.n	80013f0 <cbvprintf+0x128>
		} else if (conv->prec_present) {
 80016d8:	0799      	lsls	r1, r3, #30
 80016da:	f57f ae98 	bpl.w	800140e <cbvprintf+0x146>
			precision = conv->prec_value;
 80016de:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
 80016e2:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 80016e6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 80016e8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
 80016ec:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 80016f0:	f003 0207 	and.w	r2, r3, #7
 80016f4:	2a04      	cmp	r2, #4
 80016f6:	d109      	bne.n	800170c <cbvprintf+0x444>
		    && !conv->prec_present) {
 80016f8:	078a      	lsls	r2, r1, #30
 80016fa:	d407      	bmi.n	800170c <cbvprintf+0x444>
			if (conv->specifier_a) {
 80016fc:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
 8001700:	2a00      	cmp	r2, #0
 8001702:	bfb4      	ite	lt
 8001704:	f04f 080d 	movlt.w	r8, #13
 8001708:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
 800170c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8001710:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8001712:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8001716:	d137      	bne.n	8001788 <cbvprintf+0x4c0>
			switch (length_mod) {
 8001718:	1ecb      	subs	r3, r1, #3
 800171a:	2b04      	cmp	r3, #4
 800171c:	d821      	bhi.n	8001762 <cbvprintf+0x49a>
 800171e:	e8df f003 	tbb	[pc, r3]
 8001722:	0903      	.short	0x0903
 8001724:	2009      	.short	0x2009
 8001726:	20          	.byte	0x20
 8001727:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8001728:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 800172c:	17da      	asrs	r2, r3, #31
 800172e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8001732:	e006      	b.n	8001742 <cbvprintf+0x47a>
					(sint_value_type)va_arg(ap, intmax_t);
 8001734:	3407      	adds	r4, #7
 8001736:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 800173a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 800173e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
 8001742:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8001746:	07bb      	lsls	r3, r7, #30
 8001748:	d054      	beq.n	80017f4 <cbvprintf+0x52c>
			OUTS(sp, fp);
 800174a:	9b02      	ldr	r3, [sp, #8]
 800174c:	462a      	mov	r2, r5
 800174e:	4651      	mov	r1, sl
 8001750:	4648      	mov	r0, r9
 8001752:	f007 fa23 	bl	8008b9c <outs>
 8001756:	2800      	cmp	r0, #0
 8001758:	f2c0 8390 	blt.w	8001e7c <cbvprintf+0xbb4>
 800175c:	4406      	add	r6, r0
			while (pad_len-- > 0) {
 800175e:	9d02      	ldr	r5, [sp, #8]
 8001760:	e5be      	b.n	80012e0 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8001762:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8001766:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8001768:	ea4f 72e3 	mov.w	r2, r3, asr #31
 800176c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8001770:	d105      	bne.n	800177e <cbvprintf+0x4b6>
				value->uint = (unsigned char)value->uint;
 8001772:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
 8001776:	930c      	str	r3, [sp, #48]	; 0x30
 8001778:	2300      	movs	r3, #0
 800177a:	930d      	str	r3, [sp, #52]	; 0x34
 800177c:	e7e1      	b.n	8001742 <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
 800177e:	2902      	cmp	r1, #2
 8001780:	d1df      	bne.n	8001742 <cbvprintf+0x47a>
				value->sint = (short)value->sint;
 8001782:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8001786:	e7d1      	b.n	800172c <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8001788:	2b02      	cmp	r3, #2
 800178a:	d123      	bne.n	80017d4 <cbvprintf+0x50c>
			switch (length_mod) {
 800178c:	1ecb      	subs	r3, r1, #3
 800178e:	2b04      	cmp	r3, #4
 8001790:	d813      	bhi.n	80017ba <cbvprintf+0x4f2>
 8001792:	e8df f003 	tbb	[pc, r3]
 8001796:	0a03      	.short	0x0a03
 8001798:	120a      	.short	0x120a
 800179a:	12          	.byte	0x12
 800179b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 800179c:	6820      	ldr	r0, [r4, #0]
 800179e:	900c      	str	r0, [sp, #48]	; 0x30
 80017a0:	2200      	movs	r2, #0
				value->sint = va_arg(ap, int);
 80017a2:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 80017a4:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
 80017a6:	461c      	mov	r4, r3
 80017a8:	e7cb      	b.n	8001742 <cbvprintf+0x47a>
					(uint_value_type)va_arg(ap,
 80017aa:	1de3      	adds	r3, r4, #7
 80017ac:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
 80017b0:	ecb3 7b02 	vldmia	r3!, {d7}
 80017b4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
 80017b8:	e7f5      	b.n	80017a6 <cbvprintf+0x4de>
					(uint_value_type)va_arg(ap, size_t);
 80017ba:	f854 3b04 	ldr.w	r3, [r4], #4
 80017be:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 80017c0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
 80017c8:	d0d3      	beq.n	8001772 <cbvprintf+0x4aa>
			} else if (length_mod == LENGTH_H) {
 80017ca:	2902      	cmp	r1, #2
 80017cc:	d1b9      	bne.n	8001742 <cbvprintf+0x47a>
				value->uint = (unsigned short)value->uint;
 80017ce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80017d2:	e7d0      	b.n	8001776 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_FP) {
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d107      	bne.n	80017e8 <cbvprintf+0x520>
					(sint_value_type)va_arg(ap, long long);
 80017d8:	3407      	adds	r4, #7
 80017da:	f024 0407 	bic.w	r4, r4, #7
 80017de:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
 80017e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80017e6:	e7ac      	b.n	8001742 <cbvprintf+0x47a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 80017e8:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 80017ea:	bf04      	itt	eq
 80017ec:	f854 3b04 	ldreq.w	r3, [r4], #4
 80017f0:	930c      	streq	r3, [sp, #48]	; 0x30
 80017f2:	e7a6      	b.n	8001742 <cbvprintf+0x47a>
		switch (conv->specifier) {
 80017f4:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80017f8:	2a78      	cmp	r2, #120	; 0x78
 80017fa:	d8b0      	bhi.n	800175e <cbvprintf+0x496>
 80017fc:	2a57      	cmp	r2, #87	; 0x57
 80017fe:	f200 808c 	bhi.w	800191a <cbvprintf+0x652>
 8001802:	2a25      	cmp	r2, #37	; 0x25
 8001804:	f000 80d4 	beq.w	80019b0 <cbvprintf+0x6e8>
 8001808:	2a24      	cmp	r2, #36	; 0x24
 800180a:	d9a8      	bls.n	800175e <cbvprintf+0x496>
 800180c:	2a41      	cmp	r2, #65	; 0x41
 800180e:	d003      	beq.n	8001818 <cbvprintf+0x550>
 8001810:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8001814:	2b02      	cmp	r3, #2
 8001816:	d8a2      	bhi.n	800175e <cbvprintf+0x496>
	} u = {
 8001818:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
 800181c:	2b00      	cmp	r3, #0
 800181e:	f2c0 81b7 	blt.w	8001b90 <cbvprintf+0x8c8>
	} else if (conv->flag_plus) {
 8001822:	0738      	lsls	r0, r7, #28
 8001824:	f100 81b6 	bmi.w	8001b94 <cbvprintf+0x8cc>
		*sign = ' ';
 8001828:	f017 0710 	ands.w	r7, r7, #16
 800182c:	bf18      	it	ne
 800182e:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8001830:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 8001834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001838:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
 800183c:	2d00      	cmp	r5, #0
 800183e:	f040 81ab 	bne.w	8001b98 <cbvprintf+0x8d0>
 8001842:	ea51 0003 	orrs.w	r0, r1, r3
 8001846:	bf14      	ite	ne
 8001848:	2001      	movne	r0, #1
 800184a:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
 800184c:	02db      	lsls	r3, r3, #11
 800184e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8001852:	02c9      	lsls	r1, r1, #11
		c = 'f';
 8001854:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
 8001856:	ea45 0e01 	orr.w	lr, r5, r1
 800185a:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
 800185e:	bf08      	it	eq
 8001860:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
 8001862:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 8001866:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
 800186a:	f000 8203 	beq.w	8001c74 <cbvprintf+0x9ac>
		if (is_subnormal) {
 800186e:	2800      	cmp	r0, #0
 8001870:	f040 81cb 	bne.w	8001c0a <cbvprintf+0x942>
		fract |= BIT_63;
 8001874:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001878:	f04f 0c00 	mov.w	ip, #0
 800187c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8001880:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
 8001884:	9109      	str	r1, [sp, #36]	; 0x24
 8001886:	4663      	mov	r3, ip
		fract *= 5U;
 8001888:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
 800188c:	f115 0f02 	cmn.w	r5, #2
 8001890:	f2c0 81c2 	blt.w	8001c18 <cbvprintf+0x950>
 8001894:	f1bc 0f00 	cmp.w	ip, #0
 8001898:	d001      	beq.n	800189e <cbvprintf+0x5d6>
 800189a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
 800189e:	2d00      	cmp	r5, #0
		fract += 2;
 80018a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
 80018a4:	f300 81cd 	bgt.w	8001c42 <cbvprintf+0x97a>
	fract >>= (4 - expo);
 80018a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018aa:	9908      	ldr	r1, [sp, #32]
 80018ac:	f1c5 0c04 	rsb	ip, r5, #4
 80018b0:	351c      	adds	r5, #28
 80018b2:	fa00 f505 	lsl.w	r5, r0, r5
 80018b6:	f1ac 0e20 	sub.w	lr, ip, #32
 80018ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80018be:	fa20 fe0e 	lsr.w	lr, r0, lr
 80018c2:	4329      	orrs	r1, r5
 80018c4:	ea41 010e 	orr.w	r1, r1, lr
 80018c8:	fa20 f00c 	lsr.w	r0, r0, ip
 80018cc:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
 80018d0:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 80018d4:	2947      	cmp	r1, #71	; 0x47
 80018d6:	f040 81d4 	bne.w	8001c82 <cbvprintf+0x9ba>
		if (decexp < (-4 + 1) || decexp > precision) {
 80018da:	1cdd      	adds	r5, r3, #3
 80018dc:	db02      	blt.n	80018e4 <cbvprintf+0x61c>
 80018de:	4598      	cmp	r8, r3
 80018e0:	f280 81cb 	bge.w	8001c7a <cbvprintf+0x9b2>
			c += 'e' - 'g';  /* e or E */
 80018e4:	3a02      	subs	r2, #2
			if (precision > 0) {
 80018e6:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
 80018ea:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
 80018ec:	dd01      	ble.n	80018f2 <cbvprintf+0x62a>
				precision--;
 80018ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
 80018f2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80018f6:	0688      	lsls	r0, r1, #26
 80018f8:	f100 81c3 	bmi.w	8001c82 <cbvprintf+0x9ba>
 80018fc:	f1b8 0f00 	cmp.w	r8, #0
 8001900:	bfd4      	ite	le
 8001902:	2100      	movle	r1, #0
 8001904:	2101      	movgt	r1, #1
	if (c == 'f') {
 8001906:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
 8001908:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
 800190a:	f040 81bc 	bne.w	8001c86 <cbvprintf+0x9be>
		if (decimals < 0) {
 800190e:	eb13 0108 	adds.w	r1, r3, r8
 8001912:	f140 81ba 	bpl.w	8001c8a <cbvprintf+0x9c2>
			decimals = 0;
 8001916:	2100      	movs	r1, #0
 8001918:	e1ba      	b.n	8001c90 <cbvprintf+0x9c8>
 800191a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 800191e:	2b20      	cmp	r3, #32
 8001920:	f63f af1d 	bhi.w	800175e <cbvprintf+0x496>
 8001924:	a001      	add	r0, pc, #4	; (adr r0, 800192c <cbvprintf+0x664>)
 8001926:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800192a:	bf00      	nop
 800192c:	08001b33 	.word	0x08001b33
 8001930:	0800175f 	.word	0x0800175f
 8001934:	0800175f 	.word	0x0800175f
 8001938:	0800175f 	.word	0x0800175f
 800193c:	0800175f 	.word	0x0800175f
 8001940:	0800175f 	.word	0x0800175f
 8001944:	0800175f 	.word	0x0800175f
 8001948:	0800175f 	.word	0x0800175f
 800194c:	0800175f 	.word	0x0800175f
 8001950:	08001819 	.word	0x08001819
 8001954:	0800175f 	.word	0x0800175f
 8001958:	080019dd 	.word	0x080019dd
 800195c:	08001ad3 	.word	0x08001ad3
 8001960:	08001819 	.word	0x08001819
 8001964:	08001819 	.word	0x08001819
 8001968:	08001819 	.word	0x08001819
 800196c:	0800175f 	.word	0x0800175f
 8001970:	08001ad3 	.word	0x08001ad3
 8001974:	0800175f 	.word	0x0800175f
 8001978:	0800175f 	.word	0x0800175f
 800197c:	0800175f 	.word	0x0800175f
 8001980:	0800175f 	.word	0x0800175f
 8001984:	08001b69 	.word	0x08001b69
 8001988:	08001b33 	.word	0x08001b33
 800198c:	08001b37 	.word	0x08001b37
 8001990:	0800175f 	.word	0x0800175f
 8001994:	0800175f 	.word	0x0800175f
 8001998:	080019b7 	.word	0x080019b7
 800199c:	0800175f 	.word	0x0800175f
 80019a0:	08001b33 	.word	0x08001b33
 80019a4:	0800175f 	.word	0x0800175f
 80019a8:	0800175f 	.word	0x0800175f
 80019ac:	08001b33 	.word	0x08001b33
			OUTC('%');
 80019b0:	4651      	mov	r1, sl
 80019b2:	4610      	mov	r0, r2
 80019b4:	e49e      	b.n	80012f4 <cbvprintf+0x2c>
			if (precision >= 0) {
 80019b6:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 80019ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
 80019bc:	db09      	blt.n	80019d2 <cbvprintf+0x70a>
				len = strnlen(bps, precision);
 80019be:	4641      	mov	r1, r8
 80019c0:	4610      	mov	r0, r2
 80019c2:	9203      	str	r2, [sp, #12]
 80019c4:	f008 fb64 	bl	800a090 <strnlen>
				len = strlen(bps);
 80019c8:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
 80019ca:	2700      	movs	r7, #0
			bpe = bps + len;
 80019cc:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
 80019ce:	b962      	cbnz	r2, 80019ea <cbvprintf+0x722>
 80019d0:	e6c5      	b.n	800175e <cbvprintf+0x496>
				len = strlen(bps);
 80019d2:	4610      	mov	r0, r2
 80019d4:	9203      	str	r2, [sp, #12]
 80019d6:	f7ff fa4b 	bl	8000e70 <strlen>
 80019da:	e7f5      	b.n	80019c8 <cbvprintf+0x700>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 80019dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80019de:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
 80019e2:	2700      	movs	r7, #0
			bpe = buf + 1;
 80019e4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
 80019e8:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
 80019ea:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
 80019ec:	b107      	cbz	r7, 80019f0 <cbvprintf+0x728>
			nj_len += 1U;
 80019ee:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 80019f0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
 80019f4:	06c1      	lsls	r1, r0, #27
 80019f6:	f140 8235 	bpl.w	8001e64 <cbvprintf+0xb9c>
			nj_len += 2U;
 80019fa:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
 80019fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
 80019fe:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
 8001a00:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8001a02:	bf44      	itt	mi
 8001a04:	9910      	ldrmi	r1, [sp, #64]	; 0x40
 8001a06:	185b      	addmi	r3, r3, r1
		if (width > 0) {
 8001a08:	f1bb 0f00 	cmp.w	fp, #0
 8001a0c:	dd23      	ble.n	8001a56 <cbvprintf+0x78e>
			width -= (int)nj_len;
 8001a0e:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
 8001a12:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001a16:	0759      	lsls	r1, r3, #29
 8001a18:	f3c3 0880 	ubfx	r8, r3, #2, #1
 8001a1c:	d41b      	bmi.n	8001a56 <cbvprintf+0x78e>
				if (conv->flag_zero) {
 8001a1e:	0658      	lsls	r0, r3, #25
 8001a20:	f140 8236 	bpl.w	8001e90 <cbvprintf+0xbc8>
					if (sign != 0) {
 8001a24:	2f00      	cmp	r7, #0
 8001a26:	f000 8236 	beq.w	8001e96 <cbvprintf+0xbce>
						OUTC(sign);
 8001a2a:	4651      	mov	r1, sl
 8001a2c:	4638      	mov	r0, r7
 8001a2e:	9203      	str	r2, [sp, #12]
 8001a30:	47c8      	blx	r9
 8001a32:	2800      	cmp	r0, #0
 8001a34:	f2c0 8222 	blt.w	8001e7c <cbvprintf+0xbb4>
 8001a38:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
 8001a3a:	4647      	mov	r7, r8
						OUTC(sign);
 8001a3c:	3601      	adds	r6, #1
					pad = '0';
 8001a3e:	f04f 0830 	mov.w	r8, #48	; 0x30
 8001a42:	445e      	add	r6, fp
 8001a44:	465b      	mov	r3, fp
				while (width-- > 0) {
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	eba6 000b 	sub.w	r0, r6, fp
 8001a4c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8001a50:	f300 820c 	bgt.w	8001e6c <cbvprintf+0xba4>
 8001a54:	4606      	mov	r6, r0
		if (sign != 0) {
 8001a56:	b147      	cbz	r7, 8001a6a <cbvprintf+0x7a2>
			OUTC(sign);
 8001a58:	4651      	mov	r1, sl
 8001a5a:	4638      	mov	r0, r7
 8001a5c:	9203      	str	r2, [sp, #12]
 8001a5e:	47c8      	blx	r9
 8001a60:	2800      	cmp	r0, #0
 8001a62:	f2c0 820b 	blt.w	8001e7c <cbvprintf+0xbb4>
 8001a66:	9a03      	ldr	r2, [sp, #12]
 8001a68:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 8001a6a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001a6e:	0659      	lsls	r1, r3, #25
 8001a70:	f140 8265 	bpl.w	8001f3e <cbvprintf+0xc76>
			if (conv->specifier_a) {
 8001a74:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	eba6 0602 	sub.w	r6, r6, r2
 8001a7e:	f280 8219 	bge.w	8001eb4 <cbvprintf+0xbec>
 8001a82:	4617      	mov	r7, r2
 8001a84:	46b8      	mov	r8, r7
 8001a86:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
 8001a88:	f817 0b01 	ldrb.w	r0, [r7], #1
 8001a8c:	2870      	cmp	r0, #112	; 0x70
 8001a8e:	f040 8205 	bne.w	8001e9c <cbvprintf+0xbd4>
			while (pad_len-- > 0) {
 8001a92:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001a94:	461e      	mov	r6, r3
 8001a96:	441f      	add	r7, r3
 8001a98:	1bbb      	subs	r3, r7, r6
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f300 8248 	bgt.w	8001f30 <cbvprintf+0xc68>
			OUTS(cp, bpe);
 8001aa0:	462b      	mov	r3, r5
 8001aa2:	4642      	mov	r2, r8
			OUTS(bps, bpe);
 8001aa4:	4651      	mov	r1, sl
 8001aa6:	4648      	mov	r0, r9
 8001aa8:	f007 f878 	bl	8008b9c <outs>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	f2c0 81e5 	blt.w	8001e7c <cbvprintf+0xbb4>
 8001ab2:	4430      	add	r0, r6
			while (pad_len-- > 0) {
 8001ab4:	4606      	mov	r6, r0
 8001ab6:	4483      	add	fp, r0
		while (width > 0) {
 8001ab8:	ebab 0306 	sub.w	r3, fp, r6
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f77f ae4e 	ble.w	800175e <cbvprintf+0x496>
			OUTC(' ');
 8001ac2:	4651      	mov	r1, sl
 8001ac4:	2020      	movs	r0, #32
 8001ac6:	47c8      	blx	r9
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	f2c0 81d7 	blt.w	8001e7c <cbvprintf+0xbb4>
 8001ace:	3601      	adds	r6, #1
			--width;
 8001ad0:	e7f2      	b.n	8001ab8 <cbvprintf+0x7f0>
			if (conv->flag_plus) {
 8001ad2:	073d      	lsls	r5, r7, #28
 8001ad4:	d42b      	bmi.n	8001b2e <cbvprintf+0x866>
				sign = ' ';
 8001ad6:	f017 0710 	ands.w	r7, r7, #16
 8001ada:	bf18      	it	ne
 8001adc:	2720      	movne	r7, #32
			sint = value->sint;
 8001ade:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	da05      	bge.n	8001af2 <cbvprintf+0x82a>
				value->uint = (uint_value_type)-sint;
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001aec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
 8001af0:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 8001af2:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	aa0e      	add	r2, sp, #56	; 0x38
 8001afa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001afe:	ab13      	add	r3, sp, #76	; 0x4c
 8001b00:	f003 f952 	bl	8004da8 <encode_uint>
 8001b04:	4602      	mov	r2, r0
			if (precision >= 0) {
 8001b06:	f1b8 0f00 	cmp.w	r8, #0
 8001b0a:	f10d 0565 	add.w	r5, sp, #101	; 0x65
 8001b0e:	f6ff af5e 	blt.w	80019ce <cbvprintf+0x706>
				conv->flag_zero = false;
 8001b12:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
 8001b16:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
 8001b18:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
 8001b1c:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8001b1e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
 8001b22:	f67f af54 	bls.w	80019ce <cbvprintf+0x706>
					conv->pad0_value = precision - (int)len;
 8001b26:	eba8 0303 	sub.w	r3, r8, r3
 8001b2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8001b2c:	e74f      	b.n	80019ce <cbvprintf+0x706>
				sign = '+';
 8001b2e:	272b      	movs	r7, #43	; 0x2b
 8001b30:	e7d5      	b.n	8001ade <cbvprintf+0x816>
		switch (conv->specifier) {
 8001b32:	2700      	movs	r7, #0
 8001b34:	e7dd      	b.n	8001af2 <cbvprintf+0x82a>
			if (value->ptr != NULL) {
 8001b36:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	f000 818f 	beq.w	8001e5c <cbvprintf+0xb94>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8001b3e:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	aa0e      	add	r2, sp, #56	; 0x38
 8001b46:	ab13      	add	r3, sp, #76	; 0x4c
 8001b48:	2100      	movs	r1, #0
 8001b4a:	f003 f92d 	bl	8004da8 <encode_uint>
				conv->altform_0c = true;
 8001b4e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8001b52:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8001b56:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8001b5e:	4602      	mov	r2, r0
				conv->altform_0c = true;
 8001b60:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
 8001b64:	2700      	movs	r7, #0
				goto prec_int_pad0;
 8001b66:	e7ce      	b.n	8001b06 <cbvprintf+0x83e>
				store_count(conv, value->ptr, count);
 8001b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
 8001b6a:	2907      	cmp	r1, #7
 8001b6c:	f63f adf7 	bhi.w	800175e <cbvprintf+0x496>
 8001b70:	e8df f001 	tbb	[pc, r1]
 8001b74:	0c06040c 	.word	0x0c06040c
 8001b78:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8001b7c:	701e      	strb	r6, [r3, #0]
		break;
 8001b7e:	e5ee      	b.n	800175e <cbvprintf+0x496>
		*(short *)dp = (short)count;
 8001b80:	801e      	strh	r6, [r3, #0]
		break;
 8001b82:	e5ec      	b.n	800175e <cbvprintf+0x496>
		*(intmax_t *)dp = (intmax_t)count;
 8001b84:	17f2      	asrs	r2, r6, #31
 8001b86:	e9c3 6200 	strd	r6, r2, [r3]
		break;
 8001b8a:	e5e8      	b.n	800175e <cbvprintf+0x496>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8001b8c:	601e      	str	r6, [r3, #0]
		break;
 8001b8e:	e5e6      	b.n	800175e <cbvprintf+0x496>
		*sign = '-';
 8001b90:	272d      	movs	r7, #45	; 0x2d
 8001b92:	e64d      	b.n	8001830 <cbvprintf+0x568>
		*sign = '+';
 8001b94:	272b      	movs	r7, #43	; 0x2b
 8001b96:	e64b      	b.n	8001830 <cbvprintf+0x568>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8001b98:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001b9c:	4285      	cmp	r5, r0
 8001b9e:	d131      	bne.n	8001c04 <cbvprintf+0x93c>
			if (isupper((int)c)) {
 8001ba0:	3201      	adds	r2, #1
 8001ba2:	48b9      	ldr	r0, [pc, #740]	; (8001e88 <cbvprintf+0xbc0>)
 8001ba4:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	5c12      	ldrb	r2, [r2, r0]
 8001baa:	f002 0203 	and.w	r2, r2, #3
 8001bae:	d11b      	bne.n	8001be8 <cbvprintf+0x920>
			if (isupper((int)c)) {
 8001bb0:	2a01      	cmp	r2, #1
 8001bb2:	d111      	bne.n	8001bd8 <cbvprintf+0x910>
				*buf++ = 'I';
 8001bb4:	2349      	movs	r3, #73	; 0x49
 8001bb6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
 8001bba:	234e      	movs	r3, #78	; 0x4e
 8001bbc:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
 8001bc0:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
 8001bc2:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
 8001bc6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001bca:	f36f 1386 	bfc	r3, #6, #1
 8001bce:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
 8001bd2:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
 8001bd6:	e707      	b.n	80019e8 <cbvprintf+0x720>
				*buf++ = 'i';
 8001bd8:	2369      	movs	r3, #105	; 0x69
 8001bda:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 8001bde:	236e      	movs	r3, #110	; 0x6e
 8001be0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
 8001be4:	2366      	movs	r3, #102	; 0x66
 8001be6:	e7ec      	b.n	8001bc2 <cbvprintf+0x8fa>
			if (isupper((int)c)) {
 8001be8:	2a01      	cmp	r2, #1
				*buf++ = 'N';
 8001bea:	bf07      	ittee	eq
 8001bec:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
 8001bee:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
 8001bf0:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
 8001bf2:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
 8001bf4:	bf0c      	ite	eq
 8001bf6:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 8001bfa:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
 8001bfe:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 8001c02:	e7de      	b.n	8001bc2 <cbvprintf+0x8fa>
	bool is_subnormal = (expo == 0) && (fract != 0);
 8001c04:	2000      	movs	r0, #0
 8001c06:	e621      	b.n	800184c <cbvprintf+0x584>
				expo--;
 8001c08:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 8001c0a:	1849      	adds	r1, r1, r1
 8001c0c:	415b      	adcs	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	dafa      	bge.n	8001c08 <cbvprintf+0x940>
 8001c12:	e9cd 1308 	strd	r1, r3, [sp, #32]
 8001c16:	e62d      	b.n	8001874 <cbvprintf+0x5ac>
			fract >>= 1;
 8001c18:	0840      	lsrs	r0, r0, #1
 8001c1a:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8001c1e:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8001c20:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
 8001c24:	46ac      	mov	ip, r5
			expo++;
 8001c26:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8001c2a:	d2f5      	bcs.n	8001c18 <cbvprintf+0x950>
		fract *= 5U;
 8001c2c:	fb0e f501 	mul.w	r5, lr, r1
 8001c30:	fba0 010e 	umull	r0, r1, r0, lr
 8001c34:	4429      	add	r1, r5
		decexp--;
 8001c36:	3b01      	subs	r3, #1
		expo++;
 8001c38:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
 8001c3c:	f04f 0c01 	mov.w	ip, #1
 8001c40:	e624      	b.n	800188c <cbvprintf+0x5c4>
		fract += 2;
 8001c42:	3002      	adds	r0, #2
 8001c44:	f141 0100 	adc.w	r1, r1, #0
 8001c48:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
 8001c4c:	a808      	add	r0, sp, #32
 8001c4e:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8001c52:	f006 ff74 	bl	8008b3e <_ldiv5>
		decexp++;
 8001c56:	9b04      	ldr	r3, [sp, #16]
 8001c58:	9a03      	ldr	r2, [sp, #12]
 8001c5a:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
 8001c5e:	3d01      	subs	r5, #1
		decexp++;
 8001c60:	3301      	adds	r3, #1
			fract <<= 1;
 8001c62:	1849      	adds	r1, r1, r1
 8001c64:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
 8001c66:	2800      	cmp	r0, #0
			expo--;
 8001c68:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
 8001c6c:	daf9      	bge.n	8001c62 <cbvprintf+0x99a>
 8001c6e:	e9cd 1008 	strd	r1, r0, [sp, #32]
 8001c72:	e614      	b.n	800189e <cbvprintf+0x5d6>
 8001c74:	2300      	movs	r3, #0
 8001c76:	461d      	mov	r5, r3
 8001c78:	e616      	b.n	80018a8 <cbvprintf+0x5e0>
			precision -= decexp;
 8001c7a:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
 8001c7e:	2266      	movs	r2, #102	; 0x66
 8001c80:	e637      	b.n	80018f2 <cbvprintf+0x62a>
	bool prune_zero = false;
 8001c82:	2100      	movs	r1, #0
 8001c84:	e63f      	b.n	8001906 <cbvprintf+0x63e>
		decimals = precision + 1;
 8001c86:	f108 0101 	add.w	r1, r8, #1
	if (decimals > 16) {
 8001c8a:	2910      	cmp	r1, #16
 8001c8c:	bfa8      	it	ge
 8001c8e:	2110      	movge	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
 8001c90:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8001c94:	2010      	movs	r0, #16
 8001c96:	9007      	str	r0, [sp, #28]
	while (decimals--) {
 8001c98:	460d      	mov	r5, r1
	*v >>= 1;
 8001c9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	while (decimals--) {
 8001c9e:	b9a5      	cbnz	r5, 8001cca <cbvprintf+0xa02>
	fract += round;
 8001ca0:	9d08      	ldr	r5, [sp, #32]
 8001ca2:	1940      	adds	r0, r0, r5
 8001ca4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001ca6:	eb41 0105 	adc.w	r1, r1, r5
	if (fract >= BIT64(60)) {
 8001caa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8001cae:	d21b      	bcs.n	8001ce8 <cbvprintf+0xa20>
	fract += round;
 8001cb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
	if (c == 'f') {
 8001cb4:	2a66      	cmp	r2, #102	; 0x66
 8001cb6:	f040 8099 	bne.w	8001dec <cbvprintf+0xb24>
		if (decexp > 0) {
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	dc23      	bgt.n	8001d06 <cbvprintf+0xa3e>
			*buf++ = '0';
 8001cbe:	2130      	movs	r1, #48	; 0x30
 8001cc0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 8001cc4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8001cc8:	e02f      	b.n	8001d2a <cbvprintf+0xa62>
	*v >>= 1;
 8001cca:	0840      	lsrs	r0, r0, #1
 8001ccc:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8001cd0:	0849      	lsrs	r1, r1, #1
 8001cd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	_ldiv5(v);
 8001cd6:	a80a      	add	r0, sp, #40	; 0x28
 8001cd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cdc:	3d01      	subs	r5, #1
 8001cde:	f006 ff2e 	bl	8008b3e <_ldiv5>
 8001ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
 8001ce6:	e7d8      	b.n	8001c9a <cbvprintf+0x9d2>
	*v >>= 1;
 8001ce8:	0840      	lsrs	r0, r0, #1
 8001cea:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8001cee:	0849      	lsrs	r1, r1, #1
 8001cf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
	_ldiv5(v);
 8001cf4:	a808      	add	r0, sp, #32
 8001cf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cfa:	f006 ff20 	bl	8008b3e <_ldiv5>
		decexp++;
 8001cfe:	9b05      	ldr	r3, [sp, #20]
 8001d00:	9a04      	ldr	r2, [sp, #16]
 8001d02:	3301      	adds	r3, #1
 8001d04:	e7d6      	b.n	8001cb4 <cbvprintf+0x9ec>
	char *buf = bps;
 8001d06:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
 8001d08:	9907      	ldr	r1, [sp, #28]
 8001d0a:	2900      	cmp	r1, #0
 8001d0c:	dd0b      	ble.n	8001d26 <cbvprintf+0xa5e>
				*buf++ = _get_digit(&fract, &digit_count);
 8001d0e:	a907      	add	r1, sp, #28
 8001d10:	a808      	add	r0, sp, #32
 8001d12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d16:	f006 ff2a 	bl	8008b6e <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 8001d1a:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
 8001d1c:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
 8001d20:	3b01      	subs	r3, #1
 8001d22:	9a04      	ldr	r2, [sp, #16]
 8001d24:	d1f0      	bne.n	8001d08 <cbvprintf+0xa40>
			conv->pad0_value = decexp;
 8001d26:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
 8001d28:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
 8001d2a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8001d2e:	0689      	lsls	r1, r1, #26
 8001d30:	d402      	bmi.n	8001d38 <cbvprintf+0xa70>
 8001d32:	f1b8 0f00 	cmp.w	r8, #0
 8001d36:	dd1d      	ble.n	8001d74 <cbvprintf+0xaac>
			*buf++ = '.';
 8001d38:	212e      	movs	r1, #46	; 0x2e
 8001d3a:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
 8001d3e:	b19b      	cbz	r3, 8001d68 <cbvprintf+0xaa0>
 8001d40:	f1b8 0f00 	cmp.w	r8, #0
 8001d44:	dd16      	ble.n	8001d74 <cbvprintf+0xaac>
			conv->pad0_value = -decexp;
 8001d46:	4259      	negs	r1, r3
 8001d48:	4541      	cmp	r1, r8
 8001d4a:	bfa8      	it	ge
 8001d4c:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
 8001d4e:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
 8001d52:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
 8001d54:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
 8001d56:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
 8001d5a:	bfd4      	ite	le
 8001d5c:	2100      	movle	r1, #0
 8001d5e:	2101      	movgt	r1, #1
 8001d60:	f361 1045 	bfi	r0, r1, #5, #1
 8001d64:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
 8001d68:	f1b8 0f00 	cmp.w	r8, #0
 8001d6c:	dd02      	ble.n	8001d74 <cbvprintf+0xaac>
 8001d6e:	9907      	ldr	r1, [sp, #28]
 8001d70:	2900      	cmp	r1, #0
 8001d72:	dc56      	bgt.n	8001e22 <cbvprintf+0xb5a>
	if (prune_zero) {
 8001d74:	9903      	ldr	r1, [sp, #12]
 8001d76:	2900      	cmp	r1, #0
 8001d78:	d163      	bne.n	8001e42 <cbvprintf+0xb7a>
	conv->pad0_pre_exp = precision;
 8001d7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
 8001d7e:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8001d82:	2945      	cmp	r1, #69	; 0x45
 8001d84:	d121      	bne.n	8001dca <cbvprintf+0xb02>
		if (decexp < 0) {
 8001d86:	2b00      	cmp	r3, #0
		*buf++ = c;
 8001d88:	4629      	mov	r1, r5
			decexp = -decexp;
 8001d8a:	bfb8      	it	lt
 8001d8c:	425b      	neglt	r3, r3
		*buf++ = c;
 8001d8e:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
 8001d92:	bfb4      	ite	lt
 8001d94:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
 8001d96:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
 8001d98:	2b63      	cmp	r3, #99	; 0x63
 8001d9a:	706a      	strb	r2, [r5, #1]
 8001d9c:	dd09      	ble.n	8001db2 <cbvprintf+0xaea>
			*buf++ = (decexp / 100) + '0';
 8001d9e:	2064      	movs	r0, #100	; 0x64
 8001da0:	fb93 f2f0 	sdiv	r2, r3, r0
 8001da4:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 8001da8:	1ce9      	adds	r1, r5, #3
 8001daa:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
 8001dae:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 8001db2:	200a      	movs	r0, #10
 8001db4:	460d      	mov	r5, r1
 8001db6:	fb93 f2f0 	sdiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
 8001dba:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 8001dbe:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 8001dc2:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 8001dc4:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
 8001dc8:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
 8001dca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	dc43      	bgt.n	8001e58 <cbvprintf+0xb90>
 8001dd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bfd4      	ite	le
 8001dd6:	2300      	movle	r3, #0
 8001dd8:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 8001dda:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8001dde:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 8001de2:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 8001de4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
 8001de8:	702b      	strb	r3, [r5, #0]
	return bps;
 8001dea:	e5fd      	b.n	80019e8 <cbvprintf+0x720>
		*buf = _get_digit(&fract, &digit_count);
 8001dec:	a907      	add	r1, sp, #28
 8001dee:	a808      	add	r0, sp, #32
 8001df0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001df4:	f006 febb 	bl	8008b6e <_get_digit>
		if (*buf++ != '0') {
 8001df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
 8001dfc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
 8001e00:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
 8001e04:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8001e06:	bf18      	it	ne
 8001e08:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
 8001e0c:	0688      	lsls	r0, r1, #26
 8001e0e:	d402      	bmi.n	8001e16 <cbvprintf+0xb4e>
 8001e10:	f1b8 0f00 	cmp.w	r8, #0
 8001e14:	dd12      	ble.n	8001e3c <cbvprintf+0xb74>
			*buf++ = '.';
 8001e16:	212e      	movs	r1, #46	; 0x2e
 8001e18:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
 8001e1c:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
 8001e20:	e7a2      	b.n	8001d68 <cbvprintf+0xaa0>
		*buf++ = _get_digit(&fract, &digit_count);
 8001e22:	a907      	add	r1, sp, #28
 8001e24:	a808      	add	r0, sp, #32
 8001e26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001e2a:	f006 fea0 	bl	8008b6e <_get_digit>
		precision--;
 8001e2e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8001e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
 8001e36:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
 8001e3a:	e795      	b.n	8001d68 <cbvprintf+0xaa0>
		if (*buf++ != '0') {
 8001e3c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8001e40:	e798      	b.n	8001d74 <cbvprintf+0xaac>
		conv->pad0_pre_exp = 0;
 8001e42:	2100      	movs	r1, #0
 8001e44:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
 8001e46:	4628      	mov	r0, r5
 8001e48:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8001e4c:	2930      	cmp	r1, #48	; 0x30
 8001e4e:	d0fa      	beq.n	8001e46 <cbvprintf+0xb7e>
		if (*buf != '.') {
 8001e50:	292e      	cmp	r1, #46	; 0x2e
 8001e52:	bf18      	it	ne
 8001e54:	4605      	movne	r5, r0
 8001e56:	e792      	b.n	8001d7e <cbvprintf+0xab6>
		|| (conv->pad0_pre_exp > 0);
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e7be      	b.n	8001dda <cbvprintf+0xb12>
			bpe = bps + 5;
 8001e5c:	4d0b      	ldr	r5, [pc, #44]	; (8001e8c <cbvprintf+0xbc4>)
		char sign = 0;
 8001e5e:	4607      	mov	r7, r0
			bps = "(nil)";
 8001e60:	1f6a      	subs	r2, r5, #5
 8001e62:	e5c2      	b.n	80019ea <cbvprintf+0x722>
		} else if (conv->altform_0) {
 8001e64:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
 8001e66:	bf48      	it	mi
 8001e68:	3301      	addmi	r3, #1
 8001e6a:	e5c7      	b.n	80019fc <cbvprintf+0x734>
					OUTC(pad);
 8001e6c:	4651      	mov	r1, sl
 8001e6e:	4640      	mov	r0, r8
 8001e70:	9203      	str	r2, [sp, #12]
 8001e72:	47c8      	blx	r9
 8001e74:	2800      	cmp	r0, #0
 8001e76:	9a03      	ldr	r2, [sp, #12]
 8001e78:	f6bf ade4 	bge.w	8001a44 <cbvprintf+0x77c>
#undef OUTS
#undef OUTC
}
 8001e7c:	b01b      	add	sp, #108	; 0x6c
 8001e7e:	ecbd 8b02 	vpop	{d8}
 8001e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e86:	bf00      	nop
 8001e88:	0800bcb7 	.word	0x0800bcb7
 8001e8c:	0800b51c 	.word	0x0800b51c
				char pad = ' ';
 8001e90:	f04f 0820 	mov.w	r8, #32
 8001e94:	e5d5      	b.n	8001a42 <cbvprintf+0x77a>
					pad = '0';
 8001e96:	f04f 0830 	mov.w	r8, #48	; 0x30
 8001e9a:	e5d2      	b.n	8001a42 <cbvprintf+0x77a>
					OUTC(*cp++);
 8001e9c:	4651      	mov	r1, sl
 8001e9e:	47c8      	blx	r9
 8001ea0:	2800      	cmp	r0, #0
 8001ea2:	f6bf adef 	bge.w	8001a84 <cbvprintf+0x7bc>
 8001ea6:	e7e9      	b.n	8001e7c <cbvprintf+0xbb4>
					OUTC(*cp++);
 8001ea8:	4651      	mov	r1, sl
 8001eaa:	9203      	str	r2, [sp, #12]
 8001eac:	47c8      	blx	r9
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	9a03      	ldr	r2, [sp, #12]
 8001eb2:	dbe3      	blt.n	8001e7c <cbvprintf+0xbb4>
				while (isdigit((int)*cp)) {
 8001eb4:	7810      	ldrb	r0, [r2, #0]
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <cbvprintf+0xccc>)
 8001eb8:	5cc3      	ldrb	r3, [r0, r3]
 8001eba:	075b      	lsls	r3, r3, #29
 8001ebc:	4617      	mov	r7, r2
 8001ebe:	eb06 0802 	add.w	r8, r6, r2
 8001ec2:	f102 0201 	add.w	r2, r2, #1
 8001ec6:	d4ef      	bmi.n	8001ea8 <cbvprintf+0xbe0>
				if (!conv->pad_postdp) {
 8001ec8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
 8001ecc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
 8001ece:	0699      	lsls	r1, r3, #26
 8001ed0:	d407      	bmi.n	8001ee2 <cbvprintf+0xc1a>
 8001ed2:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
 8001ed4:	2e00      	cmp	r6, #0
 8001ed6:	eba8 0206 	sub.w	r2, r8, r6
 8001eda:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8001ede:	dc0f      	bgt.n	8001f00 <cbvprintf+0xc38>
 8001ee0:	4690      	mov	r8, r2
				if (*cp == '.') {
 8001ee2:	7838      	ldrb	r0, [r7, #0]
 8001ee4:	282e      	cmp	r0, #46	; 0x2e
 8001ee6:	d108      	bne.n	8001efa <cbvprintf+0xc32>
					OUTC(*cp++);
 8001ee8:	4651      	mov	r1, sl
 8001eea:	47c8      	blx	r9
						OUTC('0');
 8001eec:	2800      	cmp	r0, #0
 8001eee:	dbc5      	blt.n	8001e7c <cbvprintf+0xbb4>
					while (pad_len-- > 0) {
 8001ef0:	2e00      	cmp	r6, #0
						OUTC('0');
 8001ef2:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
 8001ef6:	dc09      	bgt.n	8001f0c <cbvprintf+0xc44>
					OUTC(*cp++);
 8001ef8:	3701      	adds	r7, #1
 8001efa:	eba8 0607 	sub.w	r6, r8, r7
 8001efe:	e00e      	b.n	8001f1e <cbvprintf+0xc56>
						OUTC('0');
 8001f00:	4651      	mov	r1, sl
 8001f02:	2030      	movs	r0, #48	; 0x30
 8001f04:	47c8      	blx	r9
 8001f06:	2800      	cmp	r0, #0
 8001f08:	dae4      	bge.n	8001ed4 <cbvprintf+0xc0c>
 8001f0a:	e7b7      	b.n	8001e7c <cbvprintf+0xbb4>
						OUTC('0');
 8001f0c:	4651      	mov	r1, sl
 8001f0e:	2030      	movs	r0, #48	; 0x30
 8001f10:	47c8      	blx	r9
 8001f12:	3e01      	subs	r6, #1
 8001f14:	e7ea      	b.n	8001eec <cbvprintf+0xc24>
					OUTC(*cp++);
 8001f16:	4651      	mov	r1, sl
 8001f18:	47c8      	blx	r9
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	dbae      	blt.n	8001e7c <cbvprintf+0xbb4>
				while (isdigit((int)*cp)) {
 8001f1e:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <cbvprintf+0xccc>)
 8001f20:	46b8      	mov	r8, r7
 8001f22:	19f3      	adds	r3, r6, r7
 8001f24:	f817 0b01 	ldrb.w	r0, [r7], #1
 8001f28:	5c12      	ldrb	r2, [r2, r0]
 8001f2a:	0752      	lsls	r2, r2, #29
 8001f2c:	d4f3      	bmi.n	8001f16 <cbvprintf+0xc4e>
 8001f2e:	e5b0      	b.n	8001a92 <cbvprintf+0x7ca>
				OUTC('0');
 8001f30:	4651      	mov	r1, sl
 8001f32:	2030      	movs	r0, #48	; 0x30
 8001f34:	47c8      	blx	r9
 8001f36:	2800      	cmp	r0, #0
 8001f38:	dba0      	blt.n	8001e7c <cbvprintf+0xbb4>
 8001f3a:	3601      	adds	r6, #1
 8001f3c:	e5ac      	b.n	8001a98 <cbvprintf+0x7d0>
			if (conv->altform_0c | conv->altform_0) {
 8001f3e:	06d8      	lsls	r0, r3, #27
 8001f40:	d401      	bmi.n	8001f46 <cbvprintf+0xc7e>
 8001f42:	0719      	lsls	r1, r3, #28
 8001f44:	d507      	bpl.n	8001f56 <cbvprintf+0xc8e>
				OUTC('0');
 8001f46:	4651      	mov	r1, sl
 8001f48:	2030      	movs	r0, #48	; 0x30
 8001f4a:	9203      	str	r2, [sp, #12]
 8001f4c:	47c8      	blx	r9
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	db94      	blt.n	8001e7c <cbvprintf+0xbb4>
 8001f52:	9a03      	ldr	r2, [sp, #12]
 8001f54:	3601      	adds	r6, #1
			if (conv->altform_0c) {
 8001f56:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001f5a:	06db      	lsls	r3, r3, #27
 8001f5c:	d508      	bpl.n	8001f70 <cbvprintf+0xca8>
				OUTC(conv->specifier);
 8001f5e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8001f62:	9203      	str	r2, [sp, #12]
 8001f64:	4651      	mov	r1, sl
 8001f66:	47c8      	blx	r9
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	db87      	blt.n	8001e7c <cbvprintf+0xbb4>
 8001f6c:	9a03      	ldr	r2, [sp, #12]
 8001f6e:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
 8001f70:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8001f72:	4437      	add	r7, r6
 8001f74:	1bbb      	subs	r3, r7, r6
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	dc01      	bgt.n	8001f7e <cbvprintf+0xcb6>
			OUTS(bps, bpe);
 8001f7a:	462b      	mov	r3, r5
 8001f7c:	e592      	b.n	8001aa4 <cbvprintf+0x7dc>
				OUTC('0');
 8001f7e:	4651      	mov	r1, sl
 8001f80:	2030      	movs	r0, #48	; 0x30
 8001f82:	9203      	str	r2, [sp, #12]
 8001f84:	47c8      	blx	r9
 8001f86:	2800      	cmp	r0, #0
 8001f88:	f6ff af78 	blt.w	8001e7c <cbvprintf+0xbb4>
 8001f8c:	9a03      	ldr	r2, [sp, #12]
 8001f8e:	3601      	adds	r6, #1
 8001f90:	e7f0      	b.n	8001f74 <cbvprintf+0xcac>
 8001f92:	bf00      	nop
 8001f94:	0800bcb8 	.word	0x0800bcb8

08001f98 <cos>:
 8001f98:	ec51 0b10 	vmov	r0, r1, d0
 8001f9c:	4a20      	ldr	r2, [pc, #128]	; (8002020 <cos+0x88>)
 8001f9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	dd20      	ble.n	8001fe8 <cos+0x50>
 8001fa6:	b500      	push	{lr}
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <cos+0x8c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	b085      	sub	sp, #20
 8001fae:	dd09      	ble.n	8001fc4 <cos+0x2c>
 8001fb0:	ee10 2a10 	vmov	r2, s0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	f7fe f8eb 	bl	8000190 <__aeabi_dsub>
 8001fba:	ec41 0b10 	vmov	d0, r0, r1
 8001fbe:	b005      	add	sp, #20
 8001fc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fc4:	4668      	mov	r0, sp
 8001fc6:	f000 ffbf 	bl	8002f48 <__ieee754_rem_pio2>
 8001fca:	f000 0003 	and.w	r0, r0, #3
 8001fce:	2801      	cmp	r0, #1
 8001fd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001fd4:	ed9d 0b00 	vldr	d0, [sp]
 8001fd8:	d00a      	beq.n	8001ff0 <cos+0x58>
 8001fda:	2802      	cmp	r0, #2
 8001fdc:	d016      	beq.n	800200c <cos+0x74>
 8001fde:	b190      	cbz	r0, 8002006 <cos+0x6e>
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f001 ff45 	bl	8003e70 <__kernel_sin>
 8001fe6:	e7ea      	b.n	8001fbe <cos+0x26>
 8001fe8:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8002018 <cos+0x80>
 8001fec:	f001 b9d4 	b.w	8003398 <__kernel_cos>
 8001ff0:	f001 ff3e 	bl	8003e70 <__kernel_sin>
 8001ff4:	ec53 2b10 	vmov	r2, r3, d0
 8001ff8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001ffc:	ee00 3a90 	vmov	s1, r3
 8002000:	b005      	add	sp, #20
 8002002:	f85d fb04 	ldr.w	pc, [sp], #4
 8002006:	f001 f9c7 	bl	8003398 <__kernel_cos>
 800200a:	e7d8      	b.n	8001fbe <cos+0x26>
 800200c:	f001 f9c4 	bl	8003398 <__kernel_cos>
 8002010:	e7f0      	b.n	8001ff4 <cos+0x5c>
 8002012:	bf00      	nop
 8002014:	f3af 8000 	nop.w
	...
 8002020:	3fe921fb 	.word	0x3fe921fb
 8002024:	7fefffff 	.word	0x7fefffff

08002028 <sin>:
 8002028:	ec51 0b10 	vmov	r0, r1, d0
 800202c:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <sin+0x88>)
 800202e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002032:	4293      	cmp	r3, r2
 8002034:	dd27      	ble.n	8002086 <sin+0x5e>
 8002036:	b500      	push	{lr}
 8002038:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <sin+0x8c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	b085      	sub	sp, #20
 800203e:	dd09      	ble.n	8002054 <sin+0x2c>
 8002040:	ee10 2a10 	vmov	r2, s0
 8002044:	460b      	mov	r3, r1
 8002046:	f7fe f8a3 	bl	8000190 <__aeabi_dsub>
 800204a:	ec41 0b10 	vmov	d0, r0, r1
 800204e:	b005      	add	sp, #20
 8002050:	f85d fb04 	ldr.w	pc, [sp], #4
 8002054:	4668      	mov	r0, sp
 8002056:	f000 ff77 	bl	8002f48 <__ieee754_rem_pio2>
 800205a:	f000 0003 	and.w	r0, r0, #3
 800205e:	2801      	cmp	r0, #1
 8002060:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002064:	ed9d 0b00 	vldr	d0, [sp]
 8002068:	d012      	beq.n	8002090 <sin+0x68>
 800206a:	2802      	cmp	r0, #2
 800206c:	d017      	beq.n	800209e <sin+0x76>
 800206e:	b190      	cbz	r0, 8002096 <sin+0x6e>
 8002070:	f001 f992 	bl	8003398 <__kernel_cos>
 8002074:	ec53 2b10 	vmov	r2, r3, d0
 8002078:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800207c:	ee00 3a90 	vmov	s1, r3
 8002080:	b005      	add	sp, #20
 8002082:	f85d fb04 	ldr.w	pc, [sp], #4
 8002086:	ed9f 1b08 	vldr	d1, [pc, #32]	; 80020a8 <sin+0x80>
 800208a:	2000      	movs	r0, #0
 800208c:	f001 bef0 	b.w	8003e70 <__kernel_sin>
 8002090:	f001 f982 	bl	8003398 <__kernel_cos>
 8002094:	e7db      	b.n	800204e <sin+0x26>
 8002096:	2001      	movs	r0, #1
 8002098:	f001 feea 	bl	8003e70 <__kernel_sin>
 800209c:	e7d7      	b.n	800204e <sin+0x26>
 800209e:	2001      	movs	r0, #1
 80020a0:	f001 fee6 	bl	8003e70 <__kernel_sin>
 80020a4:	e7e6      	b.n	8002074 <sin+0x4c>
 80020a6:	bf00      	nop
	...
 80020b0:	3fe921fb 	.word	0x3fe921fb
 80020b4:	7fefffff 	.word	0x7fefffff

080020b8 <pow>:
 80020b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ba:	ed2d 8b02 	vpush	{d8}
 80020be:	ec57 6b10 	vmov	r6, r7, d0
 80020c2:	ec55 4b11 	vmov	r4, r5, d1
 80020c6:	f000 f9a3 	bl	8002410 <__ieee754_pow>
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <pow+0x1a0>)
 80020cc:	eeb0 8a40 	vmov.f32	s16, s0
 80020d0:	eef0 8a60 	vmov.f32	s17, s1
 80020d4:	f993 3000 	ldrsb.w	r3, [r3]
 80020d8:	3301      	adds	r3, #1
 80020da:	d02a      	beq.n	8002132 <pow+0x7a>
 80020dc:	4622      	mov	r2, r4
 80020de:	462b      	mov	r3, r5
 80020e0:	4620      	mov	r0, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	f7fe fe7c 	bl	8000de0 <__aeabi_dcmpun>
 80020e8:	bb18      	cbnz	r0, 8002132 <pow+0x7a>
 80020ea:	4632      	mov	r2, r6
 80020ec:	463b      	mov	r3, r7
 80020ee:	4630      	mov	r0, r6
 80020f0:	4639      	mov	r1, r7
 80020f2:	f7fe fe75 	bl	8000de0 <__aeabi_dcmpun>
 80020f6:	2800      	cmp	r0, #0
 80020f8:	d144      	bne.n	8002184 <pow+0xcc>
 80020fa:	2200      	movs	r2, #0
 80020fc:	2300      	movs	r3, #0
 80020fe:	4630      	mov	r0, r6
 8002100:	4639      	mov	r1, r7
 8002102:	f7fe fe3b 	bl	8000d7c <__aeabi_dcmpeq>
 8002106:	b1d8      	cbz	r0, 8002140 <pow+0x88>
 8002108:	2200      	movs	r2, #0
 800210a:	2300      	movs	r3, #0
 800210c:	4620      	mov	r0, r4
 800210e:	4629      	mov	r1, r5
 8002110:	f7fe fe34 	bl	8000d7c <__aeabi_dcmpeq>
 8002114:	2800      	cmp	r0, #0
 8002116:	d13d      	bne.n	8002194 <pow+0xdc>
 8002118:	ec45 4b10 	vmov	d0, r4, r5
 800211c:	f006 f950 	bl	80083c0 <finite>
 8002120:	b138      	cbz	r0, 8002132 <pow+0x7a>
 8002122:	4620      	mov	r0, r4
 8002124:	4629      	mov	r1, r5
 8002126:	2200      	movs	r2, #0
 8002128:	2300      	movs	r3, #0
 800212a:	f7fe fe31 	bl	8000d90 <__aeabi_dcmplt>
 800212e:	2800      	cmp	r0, #0
 8002130:	d15c      	bne.n	80021ec <pow+0x134>
 8002132:	eeb0 0a48 	vmov.f32	s0, s16
 8002136:	eef0 0a68 	vmov.f32	s1, s17
 800213a:	ecbd 8b02 	vpop	{d8}
 800213e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002140:	eeb0 0a48 	vmov.f32	s0, s16
 8002144:	eef0 0a68 	vmov.f32	s1, s17
 8002148:	f006 f93a 	bl	80083c0 <finite>
 800214c:	b358      	cbz	r0, 80021a6 <pow+0xee>
 800214e:	ec51 0b18 	vmov	r0, r1, d8
 8002152:	2200      	movs	r2, #0
 8002154:	2300      	movs	r3, #0
 8002156:	f7fe fe11 	bl	8000d7c <__aeabi_dcmpeq>
 800215a:	2800      	cmp	r0, #0
 800215c:	d0e9      	beq.n	8002132 <pow+0x7a>
 800215e:	ec47 6b10 	vmov	d0, r6, r7
 8002162:	f006 f92d 	bl	80083c0 <finite>
 8002166:	2800      	cmp	r0, #0
 8002168:	d0e3      	beq.n	8002132 <pow+0x7a>
 800216a:	ec45 4b10 	vmov	d0, r4, r5
 800216e:	f006 f927 	bl	80083c0 <finite>
 8002172:	2800      	cmp	r0, #0
 8002174:	d0dd      	beq.n	8002132 <pow+0x7a>
 8002176:	f007 fa1b 	bl	80095b0 <__errno>
 800217a:	2322      	movs	r3, #34	; 0x22
 800217c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 8002238 <pow+0x180>
 8002180:	6003      	str	r3, [r0, #0]
 8002182:	e7d6      	b.n	8002132 <pow+0x7a>
 8002184:	4620      	mov	r0, r4
 8002186:	4629      	mov	r1, r5
 8002188:	2200      	movs	r2, #0
 800218a:	2300      	movs	r3, #0
 800218c:	f7fe fdf6 	bl	8000d7c <__aeabi_dcmpeq>
 8002190:	2800      	cmp	r0, #0
 8002192:	d0ce      	beq.n	8002132 <pow+0x7a>
 8002194:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 8002240 <pow+0x188>
 8002198:	eeb0 0a48 	vmov.f32	s0, s16
 800219c:	eef0 0a68 	vmov.f32	s1, s17
 80021a0:	ecbd 8b02 	vpop	{d8}
 80021a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021a6:	ec47 6b10 	vmov	d0, r6, r7
 80021aa:	f006 f909 	bl	80083c0 <finite>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d0cd      	beq.n	800214e <pow+0x96>
 80021b2:	ec45 4b10 	vmov	d0, r4, r5
 80021b6:	f006 f903 	bl	80083c0 <finite>
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d0c7      	beq.n	800214e <pow+0x96>
 80021be:	ec53 2b18 	vmov	r2, r3, d8
 80021c2:	ee18 0a10 	vmov	r0, s16
 80021c6:	4619      	mov	r1, r3
 80021c8:	f7fe fe0a 	bl	8000de0 <__aeabi_dcmpun>
 80021cc:	bb20      	cbnz	r0, 8002218 <pow+0x160>
 80021ce:	f007 f9ef 	bl	80095b0 <__errno>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2222      	movs	r2, #34	; 0x22
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	4630      	mov	r0, r6
 80021da:	4639      	mov	r1, r7
 80021dc:	2200      	movs	r2, #0
 80021de:	2300      	movs	r3, #0
 80021e0:	f7fe fdd6 	bl	8000d90 <__aeabi_dcmplt>
 80021e4:	b948      	cbnz	r0, 80021fa <pow+0x142>
 80021e6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8002248 <pow+0x190>
 80021ea:	e7a2      	b.n	8002132 <pow+0x7a>
 80021ec:	f007 f9e0 	bl	80095b0 <__errno>
 80021f0:	2321      	movs	r3, #33	; 0x21
 80021f2:	ed9f 8b17 	vldr	d8, [pc, #92]	; 8002250 <pow+0x198>
 80021f6:	6003      	str	r3, [r0, #0]
 80021f8:	e79b      	b.n	8002132 <pow+0x7a>
 80021fa:	ec45 4b10 	vmov	d0, r4, r5
 80021fe:	f006 f8eb 	bl	80083d8 <rint>
 8002202:	4622      	mov	r2, r4
 8002204:	ec51 0b10 	vmov	r0, r1, d0
 8002208:	462b      	mov	r3, r5
 800220a:	f7fe fdb7 	bl	8000d7c <__aeabi_dcmpeq>
 800220e:	2800      	cmp	r0, #0
 8002210:	d1e9      	bne.n	80021e6 <pow+0x12e>
 8002212:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 8002250 <pow+0x198>
 8002216:	e78c      	b.n	8002132 <pow+0x7a>
 8002218:	f007 f9ca 	bl	80095b0 <__errno>
 800221c:	2200      	movs	r2, #0
 800221e:	2300      	movs	r3, #0
 8002220:	2121      	movs	r1, #33	; 0x21
 8002222:	6001      	str	r1, [r0, #0]
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	f7fe fa94 	bl	8000754 <__aeabi_ddiv>
 800222c:	ec41 0b18 	vmov	d8, r0, r1
 8002230:	e77f      	b.n	8002132 <pow+0x7a>
 8002232:	bf00      	nop
 8002234:	f3af 8000 	nop.w
	...
 8002244:	3ff00000 	.word	0x3ff00000
 8002248:	00000000 	.word	0x00000000
 800224c:	7ff00000 	.word	0x7ff00000
 8002250:	00000000 	.word	0x00000000
 8002254:	fff00000 	.word	0xfff00000
 8002258:	20000060 	.word	0x20000060
 800225c:	00000000 	.word	0x00000000

08002260 <__ieee754_atan2>:
 8002260:	ec51 0b11 	vmov	r0, r1, d1
 8002264:	4243      	negs	r3, r0
 8002266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800226a:	4303      	orrs	r3, r0
 800226c:	4e64      	ldr	r6, [pc, #400]	; (8002400 <__ieee754_atan2+0x1a0>)
 800226e:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8002272:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 8002276:	42b3      	cmp	r3, r6
 8002278:	ec55 4b10 	vmov	r4, r5, d0
 800227c:	d83e      	bhi.n	80022fc <__ieee754_atan2+0x9c>
 800227e:	4263      	negs	r3, r4
 8002280:	4323      	orrs	r3, r4
 8002282:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 8002286:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 800228a:	42b3      	cmp	r3, r6
 800228c:	46a9      	mov	r9, r5
 800228e:	d835      	bhi.n	80022fc <__ieee754_atan2+0x9c>
 8002290:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8002294:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002298:	4303      	orrs	r3, r0
 800229a:	d03e      	beq.n	800231a <__ieee754_atan2+0xba>
 800229c:	178f      	asrs	r7, r1, #30
 800229e:	f007 0702 	and.w	r7, r7, #2
 80022a2:	ea5a 0304 	orrs.w	r3, sl, r4
 80022a6:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 80022aa:	d02f      	beq.n	800230c <__ieee754_atan2+0xac>
 80022ac:	ea5e 0300 	orrs.w	r3, lr, r0
 80022b0:	d037      	beq.n	8002322 <__ieee754_atan2+0xc2>
 80022b2:	45b6      	cmp	lr, r6
 80022b4:	d044      	beq.n	8002340 <__ieee754_atan2+0xe0>
 80022b6:	45b2      	cmp	sl, r6
 80022b8:	d033      	beq.n	8002322 <__ieee754_atan2+0xc2>
 80022ba:	ebaa 0e0e 	sub.w	lr, sl, lr
 80022be:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
 80022c2:	ea4f 532e 	mov.w	r3, lr, asr #20
 80022c6:	da38      	bge.n	800233a <__ieee754_atan2+0xda>
 80022c8:	2900      	cmp	r1, #0
 80022ca:	da45      	bge.n	8002358 <__ieee754_atan2+0xf8>
 80022cc:	333c      	adds	r3, #60	; 0x3c
 80022ce:	da43      	bge.n	8002358 <__ieee754_atan2+0xf8>
 80022d0:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 80023c8 <__ieee754_atan2+0x168>
 80022d4:	2f01      	cmp	r7, #1
 80022d6:	d05d      	beq.n	8002394 <__ieee754_atan2+0x134>
 80022d8:	2f02      	cmp	r7, #2
 80022da:	d04a      	beq.n	8002372 <__ieee754_atan2+0x112>
 80022dc:	b1a7      	cbz	r7, 8002308 <__ieee754_atan2+0xa8>
 80022de:	ec51 0b10 	vmov	r0, r1, d0
 80022e2:	a33b      	add	r3, pc, #236	; (adr r3, 80023d0 <__ieee754_atan2+0x170>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fd ff52 	bl	8000190 <__aeabi_dsub>
 80022ec:	a33a      	add	r3, pc, #232	; (adr r3, 80023d8 <__ieee754_atan2+0x178>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fd ff4d 	bl	8000190 <__aeabi_dsub>
 80022f6:	ec41 0b10 	vmov	d0, r0, r1
 80022fa:	e005      	b.n	8002308 <__ieee754_atan2+0xa8>
 80022fc:	4622      	mov	r2, r4
 80022fe:	462b      	mov	r3, r5
 8002300:	f7fd ff48 	bl	8000194 <__adddf3>
 8002304:	ec41 0b10 	vmov	d0, r0, r1
 8002308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800230c:	2f02      	cmp	r7, #2
 800230e:	d00e      	beq.n	800232e <__ieee754_atan2+0xce>
 8002310:	2f03      	cmp	r7, #3
 8002312:	d1f9      	bne.n	8002308 <__ieee754_atan2+0xa8>
 8002314:	ed9f 0b32 	vldr	d0, [pc, #200]	; 80023e0 <__ieee754_atan2+0x180>
 8002318:	e7f6      	b.n	8002308 <__ieee754_atan2+0xa8>
 800231a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800231e:	f001 be67 	b.w	8003ff0 <atan>
 8002322:	f1b9 0f00 	cmp.w	r9, #0
 8002326:	db05      	blt.n	8002334 <__ieee754_atan2+0xd4>
 8002328:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 80023e8 <__ieee754_atan2+0x188>
 800232c:	e7ec      	b.n	8002308 <__ieee754_atan2+0xa8>
 800232e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 80023d8 <__ieee754_atan2+0x178>
 8002332:	e7e9      	b.n	8002308 <__ieee754_atan2+0xa8>
 8002334:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 80023f0 <__ieee754_atan2+0x190>
 8002338:	e7e6      	b.n	8002308 <__ieee754_atan2+0xa8>
 800233a:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 80023e8 <__ieee754_atan2+0x188>
 800233e:	e7c9      	b.n	80022d4 <__ieee754_atan2+0x74>
 8002340:	45f2      	cmp	sl, lr
 8002342:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8002346:	d02e      	beq.n	80023a6 <__ieee754_atan2+0x146>
 8002348:	2f02      	cmp	r7, #2
 800234a:	d834      	bhi.n	80023b6 <__ieee754_atan2+0x156>
 800234c:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <__ieee754_atan2+0x1a4>)
 800234e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8002352:	ed97 0b00 	vldr	d0, [r7]
 8002356:	e7d7      	b.n	8002308 <__ieee754_atan2+0xa8>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4620      	mov	r0, r4
 800235e:	4629      	mov	r1, r5
 8002360:	f7fe f9f8 	bl	8000754 <__aeabi_ddiv>
 8002364:	ec41 0b10 	vmov	d0, r0, r1
 8002368:	f006 f820 	bl	80083ac <fabs>
 800236c:	f001 fe40 	bl	8003ff0 <atan>
 8002370:	e7b0      	b.n	80022d4 <__ieee754_atan2+0x74>
 8002372:	a317      	add	r3, pc, #92	; (adr r3, 80023d0 <__ieee754_atan2+0x170>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	ec51 0b10 	vmov	r0, r1, d0
 800237c:	f7fd ff08 	bl	8000190 <__aeabi_dsub>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	a114      	add	r1, pc, #80	; (adr r1, 80023d8 <__ieee754_atan2+0x178>)
 8002386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800238a:	f7fd ff01 	bl	8000190 <__aeabi_dsub>
 800238e:	ec41 0b10 	vmov	d0, r0, r1
 8002392:	e7b9      	b.n	8002308 <__ieee754_atan2+0xa8>
 8002394:	ee10 1a90 	vmov	r1, s1
 8002398:	ec53 2b10 	vmov	r2, r3, d0
 800239c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80023a0:	ec43 2b10 	vmov	d0, r2, r3
 80023a4:	e7b0      	b.n	8002308 <__ieee754_atan2+0xa8>
 80023a6:	2f02      	cmp	r7, #2
 80023a8:	d808      	bhi.n	80023bc <__ieee754_atan2+0x15c>
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <__ieee754_atan2+0x1a8>)
 80023ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80023b0:	ed97 0b00 	vldr	d0, [r7]
 80023b4:	e7a8      	b.n	8002308 <__ieee754_atan2+0xa8>
 80023b6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80023c8 <__ieee754_atan2+0x168>
 80023ba:	e7a5      	b.n	8002308 <__ieee754_atan2+0xa8>
 80023bc:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80023f8 <__ieee754_atan2+0x198>
 80023c0:	e7a2      	b.n	8002308 <__ieee754_atan2+0xa8>
 80023c2:	bf00      	nop
 80023c4:	f3af 8000 	nop.w
	...
 80023d0:	33145c07 	.word	0x33145c07
 80023d4:	3ca1a626 	.word	0x3ca1a626
 80023d8:	54442d18 	.word	0x54442d18
 80023dc:	400921fb 	.word	0x400921fb
 80023e0:	54442d18 	.word	0x54442d18
 80023e4:	c00921fb 	.word	0xc00921fb
 80023e8:	54442d18 	.word	0x54442d18
 80023ec:	3ff921fb 	.word	0x3ff921fb
 80023f0:	54442d18 	.word	0x54442d18
 80023f4:	bff921fb 	.word	0xbff921fb
 80023f8:	54442d18 	.word	0x54442d18
 80023fc:	3fe921fb 	.word	0x3fe921fb
 8002400:	7ff00000 	.word	0x7ff00000
 8002404:	0800a4f0 	.word	0x0800a4f0
 8002408:	0800a4d8 	.word	0x0800a4d8
 800240c:	00000000 	.word	0x00000000

08002410 <__ieee754_pow>:
 8002410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002414:	ec57 6b11 	vmov	r6, r7, d1
 8002418:	ed2d 8b0c 	vpush	{d8-d13}
 800241c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
 8002420:	ea5a 0206 	orrs.w	r2, sl, r6
 8002424:	b087      	sub	sp, #28
 8002426:	d03d      	beq.n	80024a4 <__ieee754_pow+0x94>
 8002428:	ec55 4b10 	vmov	r4, r5, d0
 800242c:	4972      	ldr	r1, [pc, #456]	; (80025f8 <__ieee754_pow+0x1e8>)
 800242e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8002432:	4588      	cmp	r8, r1
 8002434:	ee10 2a10 	vmov	r2, s0
 8002438:	46a9      	mov	r9, r5
 800243a:	dc2c      	bgt.n	8002496 <__ieee754_pow+0x86>
 800243c:	ee11 3a10 	vmov	r3, s2
 8002440:	46bb      	mov	fp, r7
 8002442:	d036      	beq.n	80024b2 <__ieee754_pow+0xa2>
 8002444:	458a      	cmp	sl, r1
 8002446:	dc26      	bgt.n	8002496 <__ieee754_pow+0x86>
 8002448:	496b      	ldr	r1, [pc, #428]	; (80025f8 <__ieee754_pow+0x1e8>)
 800244a:	458a      	cmp	sl, r1
 800244c:	d021      	beq.n	8002492 <__ieee754_pow+0x82>
 800244e:	f1b9 0f00 	cmp.w	r9, #0
 8002452:	db39      	blt.n	80024c8 <__ieee754_pow+0xb8>
 8002454:	2100      	movs	r1, #0
 8002456:	9100      	str	r1, [sp, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d151      	bne.n	8002500 <__ieee754_pow+0xf0>
 800245c:	4b66      	ldr	r3, [pc, #408]	; (80025f8 <__ieee754_pow+0x1e8>)
 800245e:	459a      	cmp	sl, r3
 8002460:	f000 80a2 	beq.w	80025a8 <__ieee754_pow+0x198>
 8002464:	4b65      	ldr	r3, [pc, #404]	; (80025fc <__ieee754_pow+0x1ec>)
 8002466:	459a      	cmp	sl, r3
 8002468:	f000 80b0 	beq.w	80025cc <__ieee754_pow+0x1bc>
 800246c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 8002470:	f000 84c0 	beq.w	8002df4 <__ieee754_pow+0x9e4>
 8002474:	4b62      	ldr	r3, [pc, #392]	; (8002600 <__ieee754_pow+0x1f0>)
 8002476:	459b      	cmp	fp, r3
 8002478:	d142      	bne.n	8002500 <__ieee754_pow+0xf0>
 800247a:	f1b9 0f00 	cmp.w	r9, #0
 800247e:	db3f      	blt.n	8002500 <__ieee754_pow+0xf0>
 8002480:	ec45 4b10 	vmov	d0, r4, r5
 8002484:	b007      	add	sp, #28
 8002486:	ecbd 8b0c 	vpop	{d8-d13}
 800248a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800248e:	f005 bec5 	b.w	800821c <__ieee754_sqrt>
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0db      	beq.n	800244e <__ieee754_pow+0x3e>
 8002496:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800249a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800249e:	ea58 0302 	orrs.w	r3, r8, r2
 80024a2:	d109      	bne.n	80024b8 <__ieee754_pow+0xa8>
 80024a4:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80025e8 <__ieee754_pow+0x1d8>
 80024a8:	b007      	add	sp, #28
 80024aa:	ecbd 8b0c 	vpop	{d8-d13}
 80024ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b2:	b90c      	cbnz	r4, 80024b8 <__ieee754_pow+0xa8>
 80024b4:	45c2      	cmp	sl, r8
 80024b6:	ddc7      	ble.n	8002448 <__ieee754_pow+0x38>
 80024b8:	4852      	ldr	r0, [pc, #328]	; (8002604 <__ieee754_pow+0x1f4>)
 80024ba:	b007      	add	sp, #28
 80024bc:	ecbd 8b0c 	vpop	{d8-d13}
 80024c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c4:	f001 bfb0 	b.w	8004428 <nan>
 80024c8:	494f      	ldr	r1, [pc, #316]	; (8002608 <__ieee754_pow+0x1f8>)
 80024ca:	458a      	cmp	sl, r1
 80024cc:	f300 8085 	bgt.w	80025da <__ieee754_pow+0x1ca>
 80024d0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80024d4:	458a      	cmp	sl, r1
 80024d6:	dd0f      	ble.n	80024f8 <__ieee754_pow+0xe8>
 80024d8:	ea4f 512a 	mov.w	r1, sl, asr #20
 80024dc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80024e0:	2914      	cmp	r1, #20
 80024e2:	f340 849b 	ble.w	8002e1c <__ieee754_pow+0xa0c>
 80024e6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80024ea:	fa23 f001 	lsr.w	r0, r3, r1
 80024ee:	fa00 f101 	lsl.w	r1, r0, r1
 80024f2:	4299      	cmp	r1, r3
 80024f4:	f000 84ed 	beq.w	8002ed2 <__ieee754_pow+0xac2>
 80024f8:	2100      	movs	r1, #0
 80024fa:	9100      	str	r1, [sp, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0b1      	beq.n	8002464 <__ieee754_pow+0x54>
 8002500:	ec45 4b10 	vmov	d0, r4, r5
 8002504:	9202      	str	r2, [sp, #8]
 8002506:	f005 ff51 	bl	80083ac <fabs>
 800250a:	9a02      	ldr	r2, [sp, #8]
 800250c:	bb5a      	cbnz	r2, 8002566 <__ieee754_pow+0x156>
 800250e:	f1b8 0f00 	cmp.w	r8, #0
 8002512:	d004      	beq.n	800251e <__ieee754_pow+0x10e>
 8002514:	4b39      	ldr	r3, [pc, #228]	; (80025fc <__ieee754_pow+0x1ec>)
 8002516:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800251a:	429a      	cmp	r2, r3
 800251c:	d123      	bne.n	8002566 <__ieee754_pow+0x156>
 800251e:	f1bb 0f00 	cmp.w	fp, #0
 8002522:	da07      	bge.n	8002534 <__ieee754_pow+0x124>
 8002524:	ec53 2b10 	vmov	r2, r3, d0
 8002528:	4934      	ldr	r1, [pc, #208]	; (80025fc <__ieee754_pow+0x1ec>)
 800252a:	2000      	movs	r0, #0
 800252c:	f7fe f912 	bl	8000754 <__aeabi_ddiv>
 8002530:	ec41 0b10 	vmov	d0, r0, r1
 8002534:	f1b9 0f00 	cmp.w	r9, #0
 8002538:	dab6      	bge.n	80024a8 <__ieee754_pow+0x98>
 800253a:	9b00      	ldr	r3, [sp, #0]
 800253c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8002540:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8002544:	ea58 0303 	orrs.w	r3, r8, r3
 8002548:	f040 848d 	bne.w	8002e66 <__ieee754_pow+0xa56>
 800254c:	ec53 2b10 	vmov	r2, r3, d0
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f7fd fe1c 	bl	8000190 <__aeabi_dsub>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	f7fe f8fa 	bl	8000754 <__aeabi_ddiv>
 8002560:	ec41 0b10 	vmov	d0, r0, r1
 8002564:	e7a0      	b.n	80024a8 <__ieee754_pow+0x98>
 8002566:	9a00      	ldr	r2, [sp, #0]
 8002568:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800256c:	3b01      	subs	r3, #1
 800256e:	9304      	str	r3, [sp, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	d035      	beq.n	80025e0 <__ieee754_pow+0x1d0>
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <__ieee754_pow+0x1fc>)
 8002576:	459a      	cmp	sl, r3
 8002578:	dd4c      	ble.n	8002614 <__ieee754_pow+0x204>
 800257a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800257e:	459a      	cmp	sl, r3
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <__ieee754_pow+0x200>)
 8002582:	f340 83db 	ble.w	8002d3c <__ieee754_pow+0x92c>
 8002586:	4598      	cmp	r8, r3
 8002588:	f340 8360 	ble.w	8002c4c <__ieee754_pow+0x83c>
 800258c:	f1bb 0f00 	cmp.w	fp, #0
 8002590:	f340 8360 	ble.w	8002c54 <__ieee754_pow+0x844>
 8002594:	a316      	add	r3, pc, #88	; (adr r3, 80025f0 <__ieee754_pow+0x1e0>)
 8002596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	f7fd ffaf 	bl	8000500 <__aeabi_dmul>
 80025a2:	ec41 0b10 	vmov	d0, r0, r1
 80025a6:	e77f      	b.n	80024a8 <__ieee754_pow+0x98>
 80025a8:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
 80025ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f43f af77 	beq.w	80024a4 <__ieee754_pow+0x94>
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <__ieee754_pow+0x200>)
 80025b8:	4598      	cmp	r8, r3
 80025ba:	f340 837a 	ble.w	8002cb2 <__ieee754_pow+0x8a2>
 80025be:	f1bb 0f00 	cmp.w	fp, #0
 80025c2:	f2c0 8347 	blt.w	8002c54 <__ieee754_pow+0x844>
 80025c6:	ec47 6b10 	vmov	d0, r6, r7
 80025ca:	e76d      	b.n	80024a8 <__ieee754_pow+0x98>
 80025cc:	f1bb 0f00 	cmp.w	fp, #0
 80025d0:	f2c0 841a 	blt.w	8002e08 <__ieee754_pow+0x9f8>
 80025d4:	ec45 4b10 	vmov	d0, r4, r5
 80025d8:	e766      	b.n	80024a8 <__ieee754_pow+0x98>
 80025da:	2102      	movs	r1, #2
 80025dc:	9100      	str	r1, [sp, #0]
 80025de:	e73b      	b.n	8002458 <__ieee754_pow+0x48>
 80025e0:	4622      	mov	r2, r4
 80025e2:	462b      	mov	r3, r5
 80025e4:	e7b4      	b.n	8002550 <__ieee754_pow+0x140>
 80025e6:	bf00      	nop
 80025e8:	00000000 	.word	0x00000000
 80025ec:	3ff00000 	.word	0x3ff00000
 80025f0:	8800759c 	.word	0x8800759c
 80025f4:	7e37e43c 	.word	0x7e37e43c
 80025f8:	7ff00000 	.word	0x7ff00000
 80025fc:	3ff00000 	.word	0x3ff00000
 8002600:	3fe00000 	.word	0x3fe00000
 8002604:	0800b344 	.word	0x0800b344
 8002608:	433fffff 	.word	0x433fffff
 800260c:	41e00000 	.word	0x41e00000
 8002610:	3fefffff 	.word	0x3fefffff
 8002614:	4be4      	ldr	r3, [pc, #912]	; (80029a8 <__ieee754_pow+0x598>)
 8002616:	ea09 0303 	and.w	r3, r9, r3
 800261a:	2200      	movs	r2, #0
 800261c:	b953      	cbnz	r3, 8002634 <__ieee754_pow+0x224>
 800261e:	ec51 0b10 	vmov	r0, r1, d0
 8002622:	4be2      	ldr	r3, [pc, #904]	; (80029ac <__ieee754_pow+0x59c>)
 8002624:	f7fd ff6c 	bl	8000500 <__aeabi_dmul>
 8002628:	ec41 0b10 	vmov	d0, r0, r1
 800262c:	ee10 8a90 	vmov	r8, s1
 8002630:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002634:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002638:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800263c:	189a      	adds	r2, r3, r2
 800263e:	4bdc      	ldr	r3, [pc, #880]	; (80029b0 <__ieee754_pow+0x5a0>)
 8002640:	9205      	str	r2, [sp, #20]
 8002642:	f3c8 0813 	ubfx	r8, r8, #0, #20
 8002646:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
 800264a:	4598      	cmp	r8, r3
 800264c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8002650:	dd07      	ble.n	8002662 <__ieee754_pow+0x252>
 8002652:	4bd8      	ldr	r3, [pc, #864]	; (80029b4 <__ieee754_pow+0x5a4>)
 8002654:	4598      	cmp	r8, r3
 8002656:	f340 8414 	ble.w	8002e82 <__ieee754_pow+0xa72>
 800265a:	3201      	adds	r2, #1
 800265c:	9205      	str	r2, [sp, #20]
 800265e:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
 8002662:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8002948 <__ieee754_pow+0x538>
 8002666:	ed9f 7bba 	vldr	d7, [pc, #744]	; 8002950 <__ieee754_pow+0x540>
 800266a:	ec53 2b16 	vmov	r2, r3, d6
 800266e:	eeb0 ca47 	vmov.f32	s24, s14
 8002672:	eef0 ca67 	vmov.f32	s25, s15
 8002676:	2500      	movs	r5, #0
 8002678:	eeb0 da47 	vmov.f32	s26, s14
 800267c:	eef0 da67 	vmov.f32	s27, s15
 8002680:	ec5b ab10 	vmov	sl, fp, d0
 8002684:	46a3      	mov	fp, r4
 8002686:	4650      	mov	r0, sl
 8002688:	4659      	mov	r1, fp
 800268a:	ec43 2b1a 	vmov	d10, r2, r3
 800268e:	f7fd fd7f 	bl	8000190 <__aeabi_dsub>
 8002692:	ec53 2b1a 	vmov	r2, r3, d10
 8002696:	4680      	mov	r8, r0
 8002698:	4689      	mov	r9, r1
 800269a:	4650      	mov	r0, sl
 800269c:	4659      	mov	r1, fp
 800269e:	f7fd fd79 	bl	8000194 <__adddf3>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	2000      	movs	r0, #0
 80026a8:	49c3      	ldr	r1, [pc, #780]	; (80029b8 <__ieee754_pow+0x5a8>)
 80026aa:	f7fe f853 	bl	8000754 <__aeabi_ddiv>
 80026ae:	ec41 0b1b 	vmov	d11, r0, r1
 80026b2:	4640      	mov	r0, r8
 80026b4:	ec53 2b1b 	vmov	r2, r3, d11
 80026b8:	4649      	mov	r1, r9
 80026ba:	f7fd ff21 	bl	8000500 <__aeabi_dmul>
 80026be:	ec41 0b18 	vmov	d8, r0, r1
 80026c2:	460a      	mov	r2, r1
 80026c4:	4601      	mov	r1, r0
 80026c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80026ca:	2100      	movs	r1, #0
 80026cc:	9102      	str	r1, [sp, #8]
 80026ce:	1064      	asrs	r4, r4, #1
 80026d0:	ec4b ab19 	vmov	d9, sl, fp
 80026d4:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80026d8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80026dc:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
 80026e0:	2000      	movs	r0, #0
 80026e2:	1959      	adds	r1, r3, r5
 80026e4:	4604      	mov	r4, r0
 80026e6:	460d      	mov	r5, r1
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4650      	mov	r0, sl
 80026ee:	4659      	mov	r1, fp
 80026f0:	f7fd ff06 	bl	8000500 <__aeabi_dmul>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4640      	mov	r0, r8
 80026fa:	4649      	mov	r1, r9
 80026fc:	f7fd fd48 	bl	8000190 <__aeabi_dsub>
 8002700:	ec53 2b1a 	vmov	r2, r3, d10
 8002704:	4680      	mov	r8, r0
 8002706:	4689      	mov	r9, r1
 8002708:	4620      	mov	r0, r4
 800270a:	4629      	mov	r1, r5
 800270c:	f7fd fd40 	bl	8000190 <__aeabi_dsub>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	ec51 0b19 	vmov	r0, r1, d9
 8002718:	f7fd fd3a 	bl	8000190 <__aeabi_dsub>
 800271c:	4652      	mov	r2, sl
 800271e:	465b      	mov	r3, fp
 8002720:	f7fd feee 	bl	8000500 <__aeabi_dmul>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4640      	mov	r0, r8
 800272a:	4649      	mov	r1, r9
 800272c:	f7fd fd30 	bl	8000190 <__aeabi_dsub>
 8002730:	ec53 2b1b 	vmov	r2, r3, d11
 8002734:	f7fd fee4 	bl	8000500 <__aeabi_dmul>
 8002738:	ec53 2b18 	vmov	r2, r3, d8
 800273c:	ec41 0b19 	vmov	d9, r0, r1
 8002740:	ec51 0b18 	vmov	r0, r1, d8
 8002744:	f7fd fedc 	bl	8000500 <__aeabi_dmul>
 8002748:	a383      	add	r3, pc, #524	; (adr r3, 8002958 <__ieee754_pow+0x548>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	4604      	mov	r4, r0
 8002750:	460d      	mov	r5, r1
 8002752:	f7fd fed5 	bl	8000500 <__aeabi_dmul>
 8002756:	a382      	add	r3, pc, #520	; (adr r3, 8002960 <__ieee754_pow+0x550>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fd fd1a 	bl	8000194 <__adddf3>
 8002760:	4622      	mov	r2, r4
 8002762:	462b      	mov	r3, r5
 8002764:	f7fd fecc 	bl	8000500 <__aeabi_dmul>
 8002768:	a37f      	add	r3, pc, #508	; (adr r3, 8002968 <__ieee754_pow+0x558>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fd fd11 	bl	8000194 <__adddf3>
 8002772:	4622      	mov	r2, r4
 8002774:	462b      	mov	r3, r5
 8002776:	f7fd fec3 	bl	8000500 <__aeabi_dmul>
 800277a:	a37d      	add	r3, pc, #500	; (adr r3, 8002970 <__ieee754_pow+0x560>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	f7fd fd08 	bl	8000194 <__adddf3>
 8002784:	4622      	mov	r2, r4
 8002786:	462b      	mov	r3, r5
 8002788:	f7fd feba 	bl	8000500 <__aeabi_dmul>
 800278c:	a37a      	add	r3, pc, #488	; (adr r3, 8002978 <__ieee754_pow+0x568>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	f7fd fcff 	bl	8000194 <__adddf3>
 8002796:	4622      	mov	r2, r4
 8002798:	462b      	mov	r3, r5
 800279a:	f7fd feb1 	bl	8000500 <__aeabi_dmul>
 800279e:	a378      	add	r3, pc, #480	; (adr r3, 8002980 <__ieee754_pow+0x570>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f7fd fcf6 	bl	8000194 <__adddf3>
 80027a8:	4622      	mov	r2, r4
 80027aa:	4680      	mov	r8, r0
 80027ac:	4689      	mov	r9, r1
 80027ae:	462b      	mov	r3, r5
 80027b0:	4620      	mov	r0, r4
 80027b2:	4629      	mov	r1, r5
 80027b4:	f7fd fea4 	bl	8000500 <__aeabi_dmul>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4640      	mov	r0, r8
 80027be:	4649      	mov	r1, r9
 80027c0:	f7fd fe9e 	bl	8000500 <__aeabi_dmul>
 80027c4:	4652      	mov	r2, sl
 80027c6:	4604      	mov	r4, r0
 80027c8:	460d      	mov	r5, r1
 80027ca:	465b      	mov	r3, fp
 80027cc:	ec51 0b18 	vmov	r0, r1, d8
 80027d0:	f7fd fce0 	bl	8000194 <__adddf3>
 80027d4:	ec53 2b19 	vmov	r2, r3, d9
 80027d8:	f7fd fe92 	bl	8000500 <__aeabi_dmul>
 80027dc:	4622      	mov	r2, r4
 80027de:	462b      	mov	r3, r5
 80027e0:	f7fd fcd8 	bl	8000194 <__adddf3>
 80027e4:	4652      	mov	r2, sl
 80027e6:	4680      	mov	r8, r0
 80027e8:	4689      	mov	r9, r1
 80027ea:	465b      	mov	r3, fp
 80027ec:	4650      	mov	r0, sl
 80027ee:	4659      	mov	r1, fp
 80027f0:	f7fd fe86 	bl	8000500 <__aeabi_dmul>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	ec43 2b1a 	vmov	d10, r2, r3
 80027fc:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <__ieee754_pow+0x5ac>)
 80027fe:	2200      	movs	r2, #0
 8002800:	f7fd fcc8 	bl	8000194 <__adddf3>
 8002804:	4642      	mov	r2, r8
 8002806:	464b      	mov	r3, r9
 8002808:	f7fd fcc4 	bl	8000194 <__adddf3>
 800280c:	2400      	movs	r4, #0
 800280e:	460d      	mov	r5, r1
 8002810:	4622      	mov	r2, r4
 8002812:	462b      	mov	r3, r5
 8002814:	4650      	mov	r0, sl
 8002816:	4659      	mov	r1, fp
 8002818:	f7fd fe72 	bl	8000500 <__aeabi_dmul>
 800281c:	4b67      	ldr	r3, [pc, #412]	; (80029bc <__ieee754_pow+0x5ac>)
 800281e:	4682      	mov	sl, r0
 8002820:	468b      	mov	fp, r1
 8002822:	2200      	movs	r2, #0
 8002824:	4620      	mov	r0, r4
 8002826:	4629      	mov	r1, r5
 8002828:	f7fd fcb2 	bl	8000190 <__aeabi_dsub>
 800282c:	ec53 2b1a 	vmov	r2, r3, d10
 8002830:	f7fd fcae 	bl	8000190 <__aeabi_dsub>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4640      	mov	r0, r8
 800283a:	4649      	mov	r1, r9
 800283c:	f7fd fca8 	bl	8000190 <__aeabi_dsub>
 8002840:	ec53 2b18 	vmov	r2, r3, d8
 8002844:	f7fd fe5c 	bl	8000500 <__aeabi_dmul>
 8002848:	4622      	mov	r2, r4
 800284a:	462b      	mov	r3, r5
 800284c:	4604      	mov	r4, r0
 800284e:	460d      	mov	r5, r1
 8002850:	ec51 0b19 	vmov	r0, r1, d9
 8002854:	f7fd fe54 	bl	8000500 <__aeabi_dmul>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4620      	mov	r0, r4
 800285e:	4629      	mov	r1, r5
 8002860:	f7fd fc98 	bl	8000194 <__adddf3>
 8002864:	4680      	mov	r8, r0
 8002866:	4689      	mov	r9, r1
 8002868:	4642      	mov	r2, r8
 800286a:	464b      	mov	r3, r9
 800286c:	4650      	mov	r0, sl
 800286e:	4659      	mov	r1, fp
 8002870:	f7fd fc90 	bl	8000194 <__adddf3>
 8002874:	a344      	add	r3, pc, #272	; (adr r3, 8002988 <__ieee754_pow+0x578>)
 8002876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287a:	2000      	movs	r0, #0
 800287c:	4604      	mov	r4, r0
 800287e:	460d      	mov	r5, r1
 8002880:	f7fd fe3e 	bl	8000500 <__aeabi_dmul>
 8002884:	4652      	mov	r2, sl
 8002886:	ec41 0b19 	vmov	d9, r0, r1
 800288a:	465b      	mov	r3, fp
 800288c:	4620      	mov	r0, r4
 800288e:	4629      	mov	r1, r5
 8002890:	f7fd fc7e 	bl	8000190 <__aeabi_dsub>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4640      	mov	r0, r8
 800289a:	4649      	mov	r1, r9
 800289c:	f7fd fc78 	bl	8000190 <__aeabi_dsub>
 80028a0:	a33b      	add	r3, pc, #236	; (adr r3, 8002990 <__ieee754_pow+0x580>)
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f7fd fe2b 	bl	8000500 <__aeabi_dmul>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4620      	mov	r0, r4
 80028b0:	4629      	mov	r1, r5
 80028b2:	4614      	mov	r4, r2
 80028b4:	461d      	mov	r5, r3
 80028b6:	a338      	add	r3, pc, #224	; (adr r3, 8002998 <__ieee754_pow+0x588>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f7fd fe20 	bl	8000500 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4620      	mov	r0, r4
 80028c6:	4629      	mov	r1, r5
 80028c8:	f7fd fc64 	bl	8000194 <__adddf3>
 80028cc:	ec53 2b1d 	vmov	r2, r3, d13
 80028d0:	f7fd fc60 	bl	8000194 <__adddf3>
 80028d4:	4680      	mov	r8, r0
 80028d6:	9805      	ldr	r0, [sp, #20]
 80028d8:	4689      	mov	r9, r1
 80028da:	f7fd fda7 	bl	800042c <__aeabi_i2d>
 80028de:	4642      	mov	r2, r8
 80028e0:	4682      	mov	sl, r0
 80028e2:	468b      	mov	fp, r1
 80028e4:	464b      	mov	r3, r9
 80028e6:	ec51 0b19 	vmov	r0, r1, d9
 80028ea:	f7fd fc53 	bl	8000194 <__adddf3>
 80028ee:	ec53 2b1c 	vmov	r2, r3, d12
 80028f2:	f7fd fc4f 	bl	8000194 <__adddf3>
 80028f6:	4652      	mov	r2, sl
 80028f8:	465b      	mov	r3, fp
 80028fa:	f7fd fc4b 	bl	8000194 <__adddf3>
 80028fe:	4652      	mov	r2, sl
 8002900:	465b      	mov	r3, fp
 8002902:	2000      	movs	r0, #0
 8002904:	4604      	mov	r4, r0
 8002906:	460d      	mov	r5, r1
 8002908:	f7fd fc42 	bl	8000190 <__aeabi_dsub>
 800290c:	ec53 2b1c 	vmov	r2, r3, d12
 8002910:	f7fd fc3e 	bl	8000190 <__aeabi_dsub>
 8002914:	ec53 2b19 	vmov	r2, r3, d9
 8002918:	f7fd fc3a 	bl	8000190 <__aeabi_dsub>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4640      	mov	r0, r8
 8002922:	4649      	mov	r1, r9
 8002924:	f7fd fc34 	bl	8000190 <__aeabi_dsub>
 8002928:	9b00      	ldr	r3, [sp, #0]
 800292a:	9a04      	ldr	r2, [sp, #16]
 800292c:	3b01      	subs	r3, #1
 800292e:	4313      	orrs	r3, r2
 8002930:	4682      	mov	sl, r0
 8002932:	468b      	mov	fp, r1
 8002934:	f040 81b6 	bne.w	8002ca4 <__ieee754_pow+0x894>
 8002938:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80029a0 <__ieee754_pow+0x590>
 800293c:	eeb0 8a47 	vmov.f32	s16, s14
 8002940:	eef0 8a67 	vmov.f32	s17, s15
 8002944:	e03c      	b.n	80029c0 <__ieee754_pow+0x5b0>
 8002946:	bf00      	nop
 8002948:	00000000 	.word	0x00000000
 800294c:	3ff00000 	.word	0x3ff00000
	...
 8002958:	4a454eef 	.word	0x4a454eef
 800295c:	3fca7e28 	.word	0x3fca7e28
 8002960:	93c9db65 	.word	0x93c9db65
 8002964:	3fcd864a 	.word	0x3fcd864a
 8002968:	a91d4101 	.word	0xa91d4101
 800296c:	3fd17460 	.word	0x3fd17460
 8002970:	518f264d 	.word	0x518f264d
 8002974:	3fd55555 	.word	0x3fd55555
 8002978:	db6fabff 	.word	0xdb6fabff
 800297c:	3fdb6db6 	.word	0x3fdb6db6
 8002980:	33333303 	.word	0x33333303
 8002984:	3fe33333 	.word	0x3fe33333
 8002988:	e0000000 	.word	0xe0000000
 800298c:	3feec709 	.word	0x3feec709
 8002990:	dc3a03fd 	.word	0xdc3a03fd
 8002994:	3feec709 	.word	0x3feec709
 8002998:	145b01f5 	.word	0x145b01f5
 800299c:	be3e2fe0 	.word	0xbe3e2fe0
 80029a0:	00000000 	.word	0x00000000
 80029a4:	bff00000 	.word	0xbff00000
 80029a8:	7ff00000 	.word	0x7ff00000
 80029ac:	43400000 	.word	0x43400000
 80029b0:	0003988e 	.word	0x0003988e
 80029b4:	000bb679 	.word	0x000bb679
 80029b8:	3ff00000 	.word	0x3ff00000
 80029bc:	40080000 	.word	0x40080000
 80029c0:	2300      	movs	r3, #0
 80029c2:	e9cd 6700 	strd	r6, r7, [sp]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80029cc:	4630      	mov	r0, r6
 80029ce:	4642      	mov	r2, r8
 80029d0:	464b      	mov	r3, r9
 80029d2:	4639      	mov	r1, r7
 80029d4:	f7fd fbdc 	bl	8000190 <__aeabi_dsub>
 80029d8:	4622      	mov	r2, r4
 80029da:	462b      	mov	r3, r5
 80029dc:	f7fd fd90 	bl	8000500 <__aeabi_dmul>
 80029e0:	4632      	mov	r2, r6
 80029e2:	463b      	mov	r3, r7
 80029e4:	4606      	mov	r6, r0
 80029e6:	460f      	mov	r7, r1
 80029e8:	4650      	mov	r0, sl
 80029ea:	4659      	mov	r1, fp
 80029ec:	f7fd fd88 	bl	8000500 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4630      	mov	r0, r6
 80029f6:	4639      	mov	r1, r7
 80029f8:	f7fd fbcc 	bl	8000194 <__adddf3>
 80029fc:	4642      	mov	r2, r8
 80029fe:	464b      	mov	r3, r9
 8002a00:	4606      	mov	r6, r0
 8002a02:	460f      	mov	r7, r1
 8002a04:	4620      	mov	r0, r4
 8002a06:	4629      	mov	r1, r5
 8002a08:	f7fd fd7a 	bl	8000500 <__aeabi_dmul>
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	460d      	mov	r5, r1
 8002a10:	462b      	mov	r3, r5
 8002a12:	4630      	mov	r0, r6
 8002a14:	4639      	mov	r1, r7
 8002a16:	4622      	mov	r2, r4
 8002a18:	f7fd fbbc 	bl	8000194 <__adddf3>
 8002a1c:	4bc2      	ldr	r3, [pc, #776]	; (8002d28 <__ieee754_pow+0x918>)
 8002a1e:	4299      	cmp	r1, r3
 8002a20:	4680      	mov	r8, r0
 8002a22:	4689      	mov	r9, r1
 8002a24:	468a      	mov	sl, r1
 8002a26:	f340 8118 	ble.w	8002c5a <__ieee754_pow+0x84a>
 8002a2a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002a2e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002a32:	4303      	orrs	r3, r0
 8002a34:	f040 8207 	bne.w	8002e46 <__ieee754_pow+0xa36>
 8002a38:	a3a3      	add	r3, pc, #652	; (adr r3, 8002cc8 <__ieee754_pow+0x8b8>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	4630      	mov	r0, r6
 8002a40:	4639      	mov	r1, r7
 8002a42:	f7fd fba7 	bl	8000194 <__adddf3>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4640      	mov	r0, r8
 8002a4c:	4649      	mov	r1, r9
 8002a4e:	4690      	mov	r8, r2
 8002a50:	4699      	mov	r9, r3
 8002a52:	4622      	mov	r2, r4
 8002a54:	462b      	mov	r3, r5
 8002a56:	f7fd fb9b 	bl	8000190 <__aeabi_dsub>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4640      	mov	r0, r8
 8002a60:	4649      	mov	r1, r9
 8002a62:	f7fe f9b3 	bl	8000dcc <__aeabi_dcmpgt>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	f040 81ed 	bne.w	8002e46 <__ieee754_pow+0xa36>
 8002a6c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8002a70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a74:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002a78:	fa42 f303 	asr.w	r3, r2, r3
 8002a7c:	4453      	add	r3, sl
 8002a7e:	49ab      	ldr	r1, [pc, #684]	; (8002d2c <__ieee754_pow+0x91c>)
 8002a80:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002a84:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002a88:	fa41 fc02 	asr.w	ip, r1, r2
 8002a8c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8002a90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002a94:	f1c2 0214 	rsb	r2, r2, #20
 8002a98:	fa41 f202 	asr.w	r2, r1, r2
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	ea23 010c 	bic.w	r1, r3, ip
 8002aa2:	f1ba 0f00 	cmp.w	sl, #0
 8002aa6:	9200      	str	r2, [sp, #0]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4602      	mov	r2, r0
 8002aac:	da02      	bge.n	8002ab4 <__ieee754_pow+0x6a4>
 8002aae:	9900      	ldr	r1, [sp, #0]
 8002ab0:	4249      	negs	r1, r1
 8002ab2:	9100      	str	r1, [sp, #0]
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	f7fd fb6a 	bl	8000190 <__aeabi_dsub>
 8002abc:	9b00      	ldr	r3, [sp, #0]
 8002abe:	051b      	lsls	r3, r3, #20
 8002ac0:	9302      	str	r3, [sp, #8]
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	460d      	mov	r5, r1
 8002aca:	4630      	mov	r0, r6
 8002acc:	4639      	mov	r1, r7
 8002ace:	f7fd fb61 	bl	8000194 <__adddf3>
 8002ad2:	4689      	mov	r9, r1
 8002ad4:	f04f 0800 	mov.w	r8, #0
 8002ad8:	a37d      	add	r3, pc, #500	; (adr r3, 8002cd0 <__ieee754_pow+0x8c0>)
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	4640      	mov	r0, r8
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	f7fd fd0d 	bl	8000500 <__aeabi_dmul>
 8002ae6:	4622      	mov	r2, r4
 8002ae8:	462b      	mov	r3, r5
 8002aea:	4682      	mov	sl, r0
 8002aec:	468b      	mov	fp, r1
 8002aee:	4640      	mov	r0, r8
 8002af0:	4649      	mov	r1, r9
 8002af2:	f7fd fb4d 	bl	8000190 <__aeabi_dsub>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4630      	mov	r0, r6
 8002afc:	4639      	mov	r1, r7
 8002afe:	f7fd fb47 	bl	8000190 <__aeabi_dsub>
 8002b02:	a375      	add	r3, pc, #468	; (adr r3, 8002cd8 <__ieee754_pow+0x8c8>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f7fd fcfa 	bl	8000500 <__aeabi_dmul>
 8002b0c:	a374      	add	r3, pc, #464	; (adr r3, 8002ce0 <__ieee754_pow+0x8d0>)
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	4604      	mov	r4, r0
 8002b14:	460d      	mov	r5, r1
 8002b16:	4640      	mov	r0, r8
 8002b18:	4649      	mov	r1, r9
 8002b1a:	f7fd fcf1 	bl	8000500 <__aeabi_dmul>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4620      	mov	r0, r4
 8002b24:	4629      	mov	r1, r5
 8002b26:	f7fd fb35 	bl	8000194 <__adddf3>
 8002b2a:	4606      	mov	r6, r0
 8002b2c:	460f      	mov	r7, r1
 8002b2e:	4632      	mov	r2, r6
 8002b30:	463b      	mov	r3, r7
 8002b32:	4650      	mov	r0, sl
 8002b34:	4659      	mov	r1, fp
 8002b36:	f7fd fb2d 	bl	8000194 <__adddf3>
 8002b3a:	4652      	mov	r2, sl
 8002b3c:	465b      	mov	r3, fp
 8002b3e:	4604      	mov	r4, r0
 8002b40:	460d      	mov	r5, r1
 8002b42:	f7fd fb25 	bl	8000190 <__aeabi_dsub>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	4639      	mov	r1, r7
 8002b4e:	f7fd fb1f 	bl	8000190 <__aeabi_dsub>
 8002b52:	4622      	mov	r2, r4
 8002b54:	4680      	mov	r8, r0
 8002b56:	4689      	mov	r9, r1
 8002b58:	462b      	mov	r3, r5
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	f7fd fccf 	bl	8000500 <__aeabi_dmul>
 8002b62:	a361      	add	r3, pc, #388	; (adr r3, 8002ce8 <__ieee754_pow+0x8d8>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	4606      	mov	r6, r0
 8002b6a:	460f      	mov	r7, r1
 8002b6c:	f7fd fcc8 	bl	8000500 <__aeabi_dmul>
 8002b70:	a35f      	add	r3, pc, #380	; (adr r3, 8002cf0 <__ieee754_pow+0x8e0>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fb0b 	bl	8000190 <__aeabi_dsub>
 8002b7a:	4632      	mov	r2, r6
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	f7fd fcbf 	bl	8000500 <__aeabi_dmul>
 8002b82:	a35d      	add	r3, pc, #372	; (adr r3, 8002cf8 <__ieee754_pow+0x8e8>)
 8002b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b88:	f7fd fb04 	bl	8000194 <__adddf3>
 8002b8c:	4632      	mov	r2, r6
 8002b8e:	463b      	mov	r3, r7
 8002b90:	f7fd fcb6 	bl	8000500 <__aeabi_dmul>
 8002b94:	a35a      	add	r3, pc, #360	; (adr r3, 8002d00 <__ieee754_pow+0x8f0>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	f7fd faf9 	bl	8000190 <__aeabi_dsub>
 8002b9e:	4632      	mov	r2, r6
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	f7fd fcad 	bl	8000500 <__aeabi_dmul>
 8002ba6:	a358      	add	r3, pc, #352	; (adr r3, 8002d08 <__ieee754_pow+0x8f8>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f7fd faf2 	bl	8000194 <__adddf3>
 8002bb0:	4632      	mov	r2, r6
 8002bb2:	463b      	mov	r3, r7
 8002bb4:	f7fd fca4 	bl	8000500 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	f7fd fae6 	bl	8000190 <__aeabi_dsub>
 8002bc4:	4606      	mov	r6, r0
 8002bc6:	460f      	mov	r7, r1
 8002bc8:	4632      	mov	r2, r6
 8002bca:	463b      	mov	r3, r7
 8002bcc:	4620      	mov	r0, r4
 8002bce:	4629      	mov	r1, r5
 8002bd0:	f7fd fc96 	bl	8000500 <__aeabi_dmul>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4630      	mov	r0, r6
 8002bda:	4639      	mov	r1, r7
 8002bdc:	4616      	mov	r6, r2
 8002bde:	461f      	mov	r7, r3
 8002be0:	2200      	movs	r2, #0
 8002be2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002be6:	f7fd fad3 	bl	8000190 <__aeabi_dsub>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4630      	mov	r0, r6
 8002bf0:	4639      	mov	r1, r7
 8002bf2:	f7fd fdaf 	bl	8000754 <__aeabi_ddiv>
 8002bf6:	4642      	mov	r2, r8
 8002bf8:	4606      	mov	r6, r0
 8002bfa:	460f      	mov	r7, r1
 8002bfc:	464b      	mov	r3, r9
 8002bfe:	4620      	mov	r0, r4
 8002c00:	4629      	mov	r1, r5
 8002c02:	f7fd fc7d 	bl	8000500 <__aeabi_dmul>
 8002c06:	4642      	mov	r2, r8
 8002c08:	464b      	mov	r3, r9
 8002c0a:	f7fd fac3 	bl	8000194 <__adddf3>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4630      	mov	r0, r6
 8002c14:	4639      	mov	r1, r7
 8002c16:	f7fd fabb 	bl	8000190 <__aeabi_dsub>
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	f7fd fab7 	bl	8000190 <__aeabi_dsub>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	2000      	movs	r0, #0
 8002c28:	4941      	ldr	r1, [pc, #260]	; (8002d30 <__ieee754_pow+0x920>)
 8002c2a:	f7fd fab1 	bl	8000190 <__aeabi_dsub>
 8002c2e:	9a02      	ldr	r2, [sp, #8]
 8002c30:	460b      	mov	r3, r1
 8002c32:	4413      	add	r3, r2
 8002c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c38:	f2c0 8143 	blt.w	8002ec2 <__ieee754_pow+0xab2>
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	ec53 2b18 	vmov	r2, r3, d8
 8002c42:	f7fd fc5d 	bl	8000500 <__aeabi_dmul>
 8002c46:	ec41 0b10 	vmov	d0, r0, r1
 8002c4a:	e42d      	b.n	80024a8 <__ieee754_pow+0x98>
 8002c4c:	f1bb 0f00 	cmp.w	fp, #0
 8002c50:	f6ff aca0 	blt.w	8002594 <__ieee754_pow+0x184>
 8002c54:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8002d10 <__ieee754_pow+0x900>
 8002c58:	e426      	b.n	80024a8 <__ieee754_pow+0x98>
 8002c5a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8002d38 <__ieee754_pow+0x928>
 8002c5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002c62:	4563      	cmp	r3, ip
 8002c64:	f340 80e7 	ble.w	8002e36 <__ieee754_pow+0xa26>
 8002c68:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <__ieee754_pow+0x924>)
 8002c6a:	440b      	add	r3, r1
 8002c6c:	4303      	orrs	r3, r0
 8002c6e:	d10a      	bne.n	8002c86 <__ieee754_pow+0x876>
 8002c70:	4622      	mov	r2, r4
 8002c72:	462b      	mov	r3, r5
 8002c74:	f7fd fa8c 	bl	8000190 <__aeabi_dsub>
 8002c78:	4632      	mov	r2, r6
 8002c7a:	463b      	mov	r3, r7
 8002c7c:	f7fe f89c 	bl	8000db8 <__aeabi_dcmpge>
 8002c80:	2800      	cmp	r0, #0
 8002c82:	f43f aef3 	beq.w	8002a6c <__ieee754_pow+0x65c>
 8002c86:	a324      	add	r3, pc, #144	; (adr r3, 8002d18 <__ieee754_pow+0x908>)
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	ec51 0b18 	vmov	r0, r1, d8
 8002c90:	f7fd fc36 	bl	8000500 <__aeabi_dmul>
 8002c94:	a320      	add	r3, pc, #128	; (adr r3, 8002d18 <__ieee754_pow+0x908>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	f7fd fc31 	bl	8000500 <__aeabi_dmul>
 8002c9e:	ec41 0b10 	vmov	d0, r0, r1
 8002ca2:	e401      	b.n	80024a8 <__ieee754_pow+0x98>
 8002ca4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8002d20 <__ieee754_pow+0x910>
 8002ca8:	eeb0 8a47 	vmov.f32	s16, s14
 8002cac:	eef0 8a67 	vmov.f32	s17, s15
 8002cb0:	e686      	b.n	80029c0 <__ieee754_pow+0x5b0>
 8002cb2:	f1bb 0f00 	cmp.w	fp, #0
 8002cb6:	dacd      	bge.n	8002c54 <__ieee754_pow+0x844>
 8002cb8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8002cbc:	ee00 6a10 	vmov	s0, r6
 8002cc0:	ee00 3a90 	vmov	s1, r3
 8002cc4:	f7ff bbf0 	b.w	80024a8 <__ieee754_pow+0x98>
 8002cc8:	652b82fe 	.word	0x652b82fe
 8002ccc:	3c971547 	.word	0x3c971547
 8002cd0:	00000000 	.word	0x00000000
 8002cd4:	3fe62e43 	.word	0x3fe62e43
 8002cd8:	fefa39ef 	.word	0xfefa39ef
 8002cdc:	3fe62e42 	.word	0x3fe62e42
 8002ce0:	0ca86c39 	.word	0x0ca86c39
 8002ce4:	be205c61 	.word	0xbe205c61
 8002ce8:	72bea4d0 	.word	0x72bea4d0
 8002cec:	3e663769 	.word	0x3e663769
 8002cf0:	c5d26bf1 	.word	0xc5d26bf1
 8002cf4:	3ebbbd41 	.word	0x3ebbbd41
 8002cf8:	af25de2c 	.word	0xaf25de2c
 8002cfc:	3f11566a 	.word	0x3f11566a
 8002d00:	16bebd93 	.word	0x16bebd93
 8002d04:	3f66c16c 	.word	0x3f66c16c
 8002d08:	5555553e 	.word	0x5555553e
 8002d0c:	3fc55555 	.word	0x3fc55555
	...
 8002d18:	c2f8f359 	.word	0xc2f8f359
 8002d1c:	01a56e1f 	.word	0x01a56e1f
 8002d20:	00000000 	.word	0x00000000
 8002d24:	3ff00000 	.word	0x3ff00000
 8002d28:	408fffff 	.word	0x408fffff
 8002d2c:	000fffff 	.word	0x000fffff
 8002d30:	3ff00000 	.word	0x3ff00000
 8002d34:	3f6f3400 	.word	0x3f6f3400
 8002d38:	4090cbff 	.word	0x4090cbff
 8002d3c:	4598      	cmp	r8, r3
 8002d3e:	db85      	blt.n	8002c4c <__ieee754_pow+0x83c>
 8002d40:	4b7d      	ldr	r3, [pc, #500]	; (8002f38 <__ieee754_pow+0xb28>)
 8002d42:	4598      	cmp	r8, r3
 8002d44:	f73f ac22 	bgt.w	800258c <__ieee754_pow+0x17c>
 8002d48:	ec51 0b10 	vmov	r0, r1, d0
 8002d4c:	4b7a      	ldr	r3, [pc, #488]	; (8002f38 <__ieee754_pow+0xb28>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f7fd fa1e 	bl	8000190 <__aeabi_dsub>
 8002d54:	a368      	add	r3, pc, #416	; (adr r3, 8002ef8 <__ieee754_pow+0xae8>)
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	460d      	mov	r5, r1
 8002d5e:	f7fd fbcf 	bl	8000500 <__aeabi_dmul>
 8002d62:	a367      	add	r3, pc, #412	; (adr r3, 8002f00 <__ieee754_pow+0xaf0>)
 8002d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d68:	4682      	mov	sl, r0
 8002d6a:	468b      	mov	fp, r1
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	f7fd fbc6 	bl	8000500 <__aeabi_dmul>
 8002d74:	4b71      	ldr	r3, [pc, #452]	; (8002f3c <__ieee754_pow+0xb2c>)
 8002d76:	ec41 0b18 	vmov	d8, r0, r1
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	4629      	mov	r1, r5
 8002d80:	f7fd fbbe 	bl	8000500 <__aeabi_dmul>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	a15f      	add	r1, pc, #380	; (adr r1, 8002f08 <__ieee754_pow+0xaf8>)
 8002d8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d8e:	f7fd f9ff 	bl	8000190 <__aeabi_dsub>
 8002d92:	4622      	mov	r2, r4
 8002d94:	462b      	mov	r3, r5
 8002d96:	f7fd fbb3 	bl	8000500 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	2000      	movs	r0, #0
 8002da0:	4967      	ldr	r1, [pc, #412]	; (8002f40 <__ieee754_pow+0xb30>)
 8002da2:	f7fd f9f5 	bl	8000190 <__aeabi_dsub>
 8002da6:	4622      	mov	r2, r4
 8002da8:	4680      	mov	r8, r0
 8002daa:	4689      	mov	r9, r1
 8002dac:	462b      	mov	r3, r5
 8002dae:	4620      	mov	r0, r4
 8002db0:	4629      	mov	r1, r5
 8002db2:	f7fd fba5 	bl	8000500 <__aeabi_dmul>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4640      	mov	r0, r8
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	f7fd fb9f 	bl	8000500 <__aeabi_dmul>
 8002dc2:	a353      	add	r3, pc, #332	; (adr r3, 8002f10 <__ieee754_pow+0xb00>)
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	f7fd fb9a 	bl	8000500 <__aeabi_dmul>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	ec51 0b18 	vmov	r0, r1, d8
 8002dd4:	f7fd f9dc 	bl	8000190 <__aeabi_dsub>
 8002dd8:	4680      	mov	r8, r0
 8002dda:	4689      	mov	r9, r1
 8002ddc:	4642      	mov	r2, r8
 8002dde:	464b      	mov	r3, r9
 8002de0:	4650      	mov	r0, sl
 8002de2:	4659      	mov	r1, fp
 8002de4:	f7fd f9d6 	bl	8000194 <__adddf3>
 8002de8:	2000      	movs	r0, #0
 8002dea:	4652      	mov	r2, sl
 8002dec:	465b      	mov	r3, fp
 8002dee:	4604      	mov	r4, r0
 8002df0:	460d      	mov	r5, r1
 8002df2:	e591      	b.n	8002918 <__ieee754_pow+0x508>
 8002df4:	4622      	mov	r2, r4
 8002df6:	462b      	mov	r3, r5
 8002df8:	4620      	mov	r0, r4
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	f7fd fb80 	bl	8000500 <__aeabi_dmul>
 8002e00:	ec41 0b10 	vmov	d0, r0, r1
 8002e04:	f7ff bb50 	b.w	80024a8 <__ieee754_pow+0x98>
 8002e08:	494b      	ldr	r1, [pc, #300]	; (8002f38 <__ieee754_pow+0xb28>)
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	4622      	mov	r2, r4
 8002e0e:	462b      	mov	r3, r5
 8002e10:	f7fd fca0 	bl	8000754 <__aeabi_ddiv>
 8002e14:	ec41 0b10 	vmov	d0, r0, r1
 8002e18:	f7ff bb46 	b.w	80024a8 <__ieee754_pow+0x98>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d144      	bne.n	8002eaa <__ieee754_pow+0xa9a>
 8002e20:	f1c1 0114 	rsb	r1, r1, #20
 8002e24:	fa4a f001 	asr.w	r0, sl, r1
 8002e28:	fa00 f101 	lsl.w	r1, r0, r1
 8002e2c:	4551      	cmp	r1, sl
 8002e2e:	d05a      	beq.n	8002ee6 <__ieee754_pow+0xad6>
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	f7ff bb17 	b.w	8002464 <__ieee754_pow+0x54>
 8002e36:	4a42      	ldr	r2, [pc, #264]	; (8002f40 <__ieee754_pow+0xb30>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	dc5b      	bgt.n	8002ef4 <__ieee754_pow+0xae4>
 8002e3c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8002e40:	9102      	str	r1, [sp, #8]
 8002e42:	9100      	str	r1, [sp, #0]
 8002e44:	e646      	b.n	8002ad4 <__ieee754_pow+0x6c4>
 8002e46:	a334      	add	r3, pc, #208	; (adr r3, 8002f18 <__ieee754_pow+0xb08>)
 8002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4c:	ec51 0b18 	vmov	r0, r1, d8
 8002e50:	f7fd fb56 	bl	8000500 <__aeabi_dmul>
 8002e54:	a330      	add	r3, pc, #192	; (adr r3, 8002f18 <__ieee754_pow+0xb08>)
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	f7fd fb51 	bl	8000500 <__aeabi_dmul>
 8002e5e:	ec41 0b10 	vmov	d0, r0, r1
 8002e62:	f7ff bb21 	b.w	80024a8 <__ieee754_pow+0x98>
 8002e66:	9b00      	ldr	r3, [sp, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	f47f ab1d 	bne.w	80024a8 <__ieee754_pow+0x98>
 8002e6e:	ee10 1a90 	vmov	r1, s1
 8002e72:	ee10 2a10 	vmov	r2, s0
 8002e76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002e7a:	ec43 2b10 	vmov	d0, r2, r3
 8002e7e:	f7ff bb13 	b.w	80024a8 <__ieee754_pow+0x98>
 8002e82:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8002f20 <__ieee754_pow+0xb10>
 8002e86:	eeb0 ca47 	vmov.f32	s24, s14
 8002e8a:	eef0 ca67 	vmov.f32	s25, s15
 8002e8e:	ed9f 7b26 	vldr	d7, [pc, #152]	; 8002f28 <__ieee754_pow+0xb18>
 8002e92:	eeb0 da47 	vmov.f32	s26, s14
 8002e96:	eef0 da67 	vmov.f32	s27, s15
 8002e9a:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8002f30 <__ieee754_pow+0xb20>
 8002e9e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8002ea2:	ec53 2b17 	vmov	r2, r3, d7
 8002ea6:	f7ff bbeb 	b.w	8002680 <__ieee754_pow+0x270>
 8002eaa:	ec45 4b10 	vmov	d0, r4, r5
 8002eae:	9200      	str	r2, [sp, #0]
 8002eb0:	f005 fa7c 	bl	80083ac <fabs>
 8002eb4:	9a00      	ldr	r2, [sp, #0]
 8002eb6:	2a00      	cmp	r2, #0
 8002eb8:	f47f ab92 	bne.w	80025e0 <__ieee754_pow+0x1d0>
 8002ebc:	9200      	str	r2, [sp, #0]
 8002ebe:	f7ff bb26 	b.w	800250e <__ieee754_pow+0xfe>
 8002ec2:	ec41 0b10 	vmov	d0, r0, r1
 8002ec6:	9800      	ldr	r0, [sp, #0]
 8002ec8:	f001 fab6 	bl	8004438 <scalbn>
 8002ecc:	ec51 0b10 	vmov	r0, r1, d0
 8002ed0:	e6b5      	b.n	8002c3e <__ieee754_pow+0x82e>
 8002ed2:	f000 0001 	and.w	r0, r0, #1
 8002ed6:	f1c0 0102 	rsb	r1, r0, #2
 8002eda:	9100      	str	r1, [sp, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f43f aac1 	beq.w	8002464 <__ieee754_pow+0x54>
 8002ee2:	f7ff bb0d 	b.w	8002500 <__ieee754_pow+0xf0>
 8002ee6:	f000 0001 	and.w	r0, r0, #1
 8002eea:	f1c0 0302 	rsb	r3, r0, #2
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	f7ff bab8 	b.w	8002464 <__ieee754_pow+0x54>
 8002ef4:	151b      	asrs	r3, r3, #20
 8002ef6:	e5bb      	b.n	8002a70 <__ieee754_pow+0x660>
 8002ef8:	60000000 	.word	0x60000000
 8002efc:	3ff71547 	.word	0x3ff71547
 8002f00:	f85ddf44 	.word	0xf85ddf44
 8002f04:	3e54ae0b 	.word	0x3e54ae0b
 8002f08:	55555555 	.word	0x55555555
 8002f0c:	3fd55555 	.word	0x3fd55555
 8002f10:	652b82fe 	.word	0x652b82fe
 8002f14:	3ff71547 	.word	0x3ff71547
 8002f18:	8800759c 	.word	0x8800759c
 8002f1c:	7e37e43c 	.word	0x7e37e43c
 8002f20:	40000000 	.word	0x40000000
 8002f24:	3fe2b803 	.word	0x3fe2b803
 8002f28:	43cfd006 	.word	0x43cfd006
 8002f2c:	3e4cfdeb 	.word	0x3e4cfdeb
 8002f30:	00000000 	.word	0x00000000
 8002f34:	3ff80000 	.word	0x3ff80000
 8002f38:	3ff00000 	.word	0x3ff00000
 8002f3c:	3fd00000 	.word	0x3fd00000
 8002f40:	3fe00000 	.word	0x3fe00000
 8002f44:	00000000 	.word	0x00000000

08002f48 <__ieee754_rem_pio2>:
 8002f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4c:	ec53 2b10 	vmov	r2, r3, d0
 8002f50:	ed2d 8b04 	vpush	{d8-d9}
 8002f54:	499e      	ldr	r1, [pc, #632]	; (80031d0 <__ieee754_rem_pio2+0x288>)
 8002f56:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002f5a:	428d      	cmp	r5, r1
 8002f5c:	b089      	sub	sp, #36	; 0x24
 8002f5e:	4604      	mov	r4, r0
 8002f60:	f340 8088 	ble.w	8003074 <__ieee754_rem_pio2+0x12c>
 8002f64:	499b      	ldr	r1, [pc, #620]	; (80031d4 <__ieee754_rem_pio2+0x28c>)
 8002f66:	428d      	cmp	r5, r1
 8002f68:	461f      	mov	r7, r3
 8002f6a:	dc2b      	bgt.n	8002fc4 <__ieee754_rem_pio2+0x7c>
 8002f6c:	2f00      	cmp	r7, #0
 8002f6e:	4619      	mov	r1, r3
 8002f70:	ee10 0a10 	vmov	r0, s0
 8002f74:	a38c      	add	r3, pc, #560	; (adr r3, 80031a8 <__ieee754_rem_pio2+0x260>)
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	f340 81b8 	ble.w	80032ee <__ieee754_rem_pio2+0x3a6>
 8002f7e:	f7fd f907 	bl	8000190 <__aeabi_dsub>
 8002f82:	4b95      	ldr	r3, [pc, #596]	; (80031d8 <__ieee754_rem_pio2+0x290>)
 8002f84:	429d      	cmp	r5, r3
 8002f86:	4680      	mov	r8, r0
 8002f88:	4689      	mov	r9, r1
 8002f8a:	f000 808b 	beq.w	80030a4 <__ieee754_rem_pio2+0x15c>
 8002f8e:	a388      	add	r3, pc, #544	; (adr r3, 80031b0 <__ieee754_rem_pio2+0x268>)
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f7fd f8fc 	bl	8000190 <__aeabi_dsub>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	e9c4 2300 	strd	r2, r3, [r4]
 8002fa0:	4640      	mov	r0, r8
 8002fa2:	4649      	mov	r1, r9
 8002fa4:	f7fd f8f4 	bl	8000190 <__aeabi_dsub>
 8002fa8:	a381      	add	r3, pc, #516	; (adr r3, 80031b0 <__ieee754_rem_pio2+0x268>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f7fd f8ef 	bl	8000190 <__aeabi_dsub>
 8002fb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002fb6:	2601      	movs	r6, #1
 8002fb8:	4630      	mov	r0, r6
 8002fba:	b009      	add	sp, #36	; 0x24
 8002fbc:	ecbd 8b04 	vpop	{d8-d9}
 8002fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc4:	4985      	ldr	r1, [pc, #532]	; (80031dc <__ieee754_rem_pio2+0x294>)
 8002fc6:	428d      	cmp	r5, r1
 8002fc8:	f340 808e 	ble.w	80030e8 <__ieee754_rem_pio2+0x1a0>
 8002fcc:	4984      	ldr	r1, [pc, #528]	; (80031e0 <__ieee754_rem_pio2+0x298>)
 8002fce:	428d      	cmp	r5, r1
 8002fd0:	dc5d      	bgt.n	800308e <__ieee754_rem_pio2+0x146>
 8002fd2:	152e      	asrs	r6, r5, #20
 8002fd4:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8002fd8:	ee10 0a10 	vmov	r0, s0
 8002fdc:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 8002fe0:	4690      	mov	r8, r2
 8002fe2:	4689      	mov	r9, r1
 8002fe4:	f7fd ff12 	bl	8000e0c <__aeabi_d2iz>
 8002fe8:	f7fd fa20 	bl	800042c <__aeabi_i2d>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4640      	mov	r0, r8
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ff8:	f7fd f8ca 	bl	8000190 <__aeabi_dsub>
 8002ffc:	4b79      	ldr	r3, [pc, #484]	; (80031e4 <__ieee754_rem_pio2+0x29c>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	f7fd fa7e 	bl	8000500 <__aeabi_dmul>
 8003004:	4689      	mov	r9, r1
 8003006:	4680      	mov	r8, r0
 8003008:	f7fd ff00 	bl	8000e0c <__aeabi_d2iz>
 800300c:	4605      	mov	r5, r0
 800300e:	f7fd fa0d 	bl	800042c <__aeabi_i2d>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4640      	mov	r0, r8
 8003018:	4649      	mov	r1, r9
 800301a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800301e:	f7fd f8b7 	bl	8000190 <__aeabi_dsub>
 8003022:	4b70      	ldr	r3, [pc, #448]	; (80031e4 <__ieee754_rem_pio2+0x29c>)
 8003024:	2200      	movs	r2, #0
 8003026:	f7fd fa6b 	bl	8000500 <__aeabi_dmul>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003032:	2200      	movs	r2, #0
 8003034:	2300      	movs	r3, #0
 8003036:	f7fd fea1 	bl	8000d7c <__aeabi_dcmpeq>
 800303a:	2800      	cmp	r0, #0
 800303c:	f000 8155 	beq.w	80032ea <__ieee754_rem_pio2+0x3a2>
 8003040:	2d00      	cmp	r5, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2302      	movne	r3, #2
 8003048:	4a67      	ldr	r2, [pc, #412]	; (80031e8 <__ieee754_rem_pio2+0x2a0>)
 800304a:	9201      	str	r2, [sp, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	9200      	str	r2, [sp, #0]
 8003050:	4621      	mov	r1, r4
 8003052:	4632      	mov	r2, r6
 8003054:	a802      	add	r0, sp, #8
 8003056:	f000 fadf 	bl	8003618 <__kernel_rem_pio2>
 800305a:	2f00      	cmp	r7, #0
 800305c:	4606      	mov	r6, r0
 800305e:	daab      	bge.n	8002fb8 <__ieee754_rem_pio2+0x70>
 8003060:	6862      	ldr	r2, [r4, #4]
 8003062:	68e3      	ldr	r3, [r4, #12]
 8003064:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003068:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800306c:	6062      	str	r2, [r4, #4]
 800306e:	60e3      	str	r3, [r4, #12]
 8003070:	4246      	negs	r6, r0
 8003072:	e7a1      	b.n	8002fb8 <__ieee754_rem_pio2+0x70>
 8003074:	2000      	movs	r0, #0
 8003076:	2100      	movs	r1, #0
 8003078:	2600      	movs	r6, #0
 800307a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800307e:	4630      	mov	r0, r6
 8003080:	ed84 0b00 	vstr	d0, [r4]
 8003084:	b009      	add	sp, #36	; 0x24
 8003086:	ecbd 8b04 	vpop	{d8-d9}
 800308a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800308e:	ee10 0a10 	vmov	r0, s0
 8003092:	4619      	mov	r1, r3
 8003094:	f7fd f87c 	bl	8000190 <__aeabi_dsub>
 8003098:	2600      	movs	r6, #0
 800309a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800309e:	e9c4 0100 	strd	r0, r1, [r4]
 80030a2:	e789      	b.n	8002fb8 <__ieee754_rem_pio2+0x70>
 80030a4:	a344      	add	r3, pc, #272	; (adr r3, 80031b8 <__ieee754_rem_pio2+0x270>)
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	f7fd f871 	bl	8000190 <__aeabi_dsub>
 80030ae:	a344      	add	r3, pc, #272	; (adr r3, 80031c0 <__ieee754_rem_pio2+0x278>)
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	4680      	mov	r8, r0
 80030b6:	4689      	mov	r9, r1
 80030b8:	f7fd f86a 	bl	8000190 <__aeabi_dsub>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	e9c4 2300 	strd	r2, r3, [r4]
 80030c4:	4640      	mov	r0, r8
 80030c6:	4649      	mov	r1, r9
 80030c8:	f7fd f862 	bl	8000190 <__aeabi_dsub>
 80030cc:	a33c      	add	r3, pc, #240	; (adr r3, 80031c0 <__ieee754_rem_pio2+0x278>)
 80030ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d2:	f7fd f85d 	bl	8000190 <__aeabi_dsub>
 80030d6:	2601      	movs	r6, #1
 80030d8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80030dc:	4630      	mov	r0, r6
 80030de:	b009      	add	sp, #36	; 0x24
 80030e0:	ecbd 8b04 	vpop	{d8-d9}
 80030e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e8:	f005 f960 	bl	80083ac <fabs>
 80030ec:	ec59 8b10 	vmov	r8, r9, d0
 80030f0:	ee10 0a10 	vmov	r0, s0
 80030f4:	a334      	add	r3, pc, #208	; (adr r3, 80031c8 <__ieee754_rem_pio2+0x280>)
 80030f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fa:	4649      	mov	r1, r9
 80030fc:	f7fd fa00 	bl	8000500 <__aeabi_dmul>
 8003100:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <__ieee754_rem_pio2+0x2a4>)
 8003102:	2200      	movs	r2, #0
 8003104:	f7fd f846 	bl	8000194 <__adddf3>
 8003108:	f7fd fe80 	bl	8000e0c <__aeabi_d2iz>
 800310c:	4606      	mov	r6, r0
 800310e:	f7fd f98d 	bl	800042c <__aeabi_i2d>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	ec43 2b18 	vmov	d8, r2, r3
 800311a:	a323      	add	r3, pc, #140	; (adr r3, 80031a8 <__ieee754_rem_pio2+0x260>)
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	eeb0 9a48 	vmov.f32	s18, s16
 8003124:	eef0 9a68 	vmov.f32	s19, s17
 8003128:	f7fd f9ea 	bl	8000500 <__aeabi_dmul>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4640      	mov	r0, r8
 8003132:	4649      	mov	r1, r9
 8003134:	f7fd f82c 	bl	8000190 <__aeabi_dsub>
 8003138:	a31d      	add	r3, pc, #116	; (adr r3, 80031b0 <__ieee754_rem_pio2+0x268>)
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	4682      	mov	sl, r0
 8003140:	468b      	mov	fp, r1
 8003142:	ec51 0b18 	vmov	r0, r1, d8
 8003146:	f7fd f9db 	bl	8000500 <__aeabi_dmul>
 800314a:	2e1f      	cmp	r6, #31
 800314c:	ec41 0b18 	vmov	d8, r0, r1
 8003150:	dc50      	bgt.n	80031f4 <__ieee754_rem_pio2+0x2ac>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4650      	mov	r0, sl
 8003158:	4659      	mov	r1, fp
 800315a:	f7fd f819 	bl	8000190 <__aeabi_dsub>
 800315e:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <__ieee754_rem_pio2+0x2a8>)
 8003160:	1e72      	subs	r2, r6, #1
 8003162:	4680      	mov	r8, r0
 8003164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003168:	42ab      	cmp	r3, r5
 800316a:	4689      	mov	r9, r1
 800316c:	d04a      	beq.n	8003204 <__ieee754_rem_pio2+0x2bc>
 800316e:	4642      	mov	r2, r8
 8003170:	464b      	mov	r3, r9
 8003172:	e9c4 8900 	strd	r8, r9, [r4]
 8003176:	4650      	mov	r0, sl
 8003178:	4659      	mov	r1, fp
 800317a:	f7fd f809 	bl	8000190 <__aeabi_dsub>
 800317e:	ec53 2b18 	vmov	r2, r3, d8
 8003182:	f7fd f805 	bl	8000190 <__aeabi_dsub>
 8003186:	2f00      	cmp	r7, #0
 8003188:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800318c:	f6bf af14 	bge.w	8002fb8 <__ieee754_rem_pio2+0x70>
 8003190:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003194:	e9c4 8300 	strd	r8, r3, [r4]
 8003198:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800319c:	e9c4 0302 	strd	r0, r3, [r4, #8]
 80031a0:	4276      	negs	r6, r6
 80031a2:	e709      	b.n	8002fb8 <__ieee754_rem_pio2+0x70>
 80031a4:	f3af 8000 	nop.w
 80031a8:	54400000 	.word	0x54400000
 80031ac:	3ff921fb 	.word	0x3ff921fb
 80031b0:	1a626331 	.word	0x1a626331
 80031b4:	3dd0b461 	.word	0x3dd0b461
 80031b8:	1a600000 	.word	0x1a600000
 80031bc:	3dd0b461 	.word	0x3dd0b461
 80031c0:	2e037073 	.word	0x2e037073
 80031c4:	3ba3198a 	.word	0x3ba3198a
 80031c8:	6dc9c883 	.word	0x6dc9c883
 80031cc:	3fe45f30 	.word	0x3fe45f30
 80031d0:	3fe921fb 	.word	0x3fe921fb
 80031d4:	4002d97b 	.word	0x4002d97b
 80031d8:	3ff921fb 	.word	0x3ff921fb
 80031dc:	413921fb 	.word	0x413921fb
 80031e0:	7fefffff 	.word	0x7fefffff
 80031e4:	41700000 	.word	0x41700000
 80031e8:	0800b3c8 	.word	0x0800b3c8
 80031ec:	3fe00000 	.word	0x3fe00000
 80031f0:	0800b348 	.word	0x0800b348
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4650      	mov	r0, sl
 80031fa:	4659      	mov	r1, fp
 80031fc:	f7fc ffc8 	bl	8000190 <__aeabi_dsub>
 8003200:	4680      	mov	r8, r0
 8003202:	4689      	mov	r9, r1
 8003204:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8003208:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
 800320c:	2b10      	cmp	r3, #16
 800320e:	ea4f 5525 	mov.w	r5, r5, asr #20
 8003212:	ddac      	ble.n	800316e <__ieee754_rem_pio2+0x226>
 8003214:	a356      	add	r3, pc, #344	; (adr r3, 8003370 <__ieee754_rem_pio2+0x428>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	ec51 0b19 	vmov	r0, r1, d9
 800321e:	f7fd f96f 	bl	8000500 <__aeabi_dmul>
 8003222:	4680      	mov	r8, r0
 8003224:	4689      	mov	r9, r1
 8003226:	4642      	mov	r2, r8
 8003228:	464b      	mov	r3, r9
 800322a:	4650      	mov	r0, sl
 800322c:	4659      	mov	r1, fp
 800322e:	f7fc ffaf 	bl	8000190 <__aeabi_dsub>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4650      	mov	r0, sl
 8003238:	4659      	mov	r1, fp
 800323a:	4692      	mov	sl, r2
 800323c:	469b      	mov	fp, r3
 800323e:	f7fc ffa7 	bl	8000190 <__aeabi_dsub>
 8003242:	4642      	mov	r2, r8
 8003244:	464b      	mov	r3, r9
 8003246:	f7fc ffa3 	bl	8000190 <__aeabi_dsub>
 800324a:	a34b      	add	r3, pc, #300	; (adr r3, 8003378 <__ieee754_rem_pio2+0x430>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	4680      	mov	r8, r0
 8003252:	4689      	mov	r9, r1
 8003254:	ec51 0b19 	vmov	r0, r1, d9
 8003258:	f7fd f952 	bl	8000500 <__aeabi_dmul>
 800325c:	4642      	mov	r2, r8
 800325e:	464b      	mov	r3, r9
 8003260:	f7fc ff96 	bl	8000190 <__aeabi_dsub>
 8003264:	460b      	mov	r3, r1
 8003266:	4602      	mov	r2, r0
 8003268:	4659      	mov	r1, fp
 800326a:	4650      	mov	r0, sl
 800326c:	ec43 2b18 	vmov	d8, r2, r3
 8003270:	f7fc ff8e 	bl	8000190 <__aeabi_dsub>
 8003274:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003278:	1aed      	subs	r5, r5, r3
 800327a:	2d31      	cmp	r5, #49	; 0x31
 800327c:	4680      	mov	r8, r0
 800327e:	4689      	mov	r9, r1
 8003280:	f77f af75 	ble.w	800316e <__ieee754_rem_pio2+0x226>
 8003284:	a33f      	add	r3, pc, #252	; (adr r3, 8003384 <__ieee754_rem_pio2+0x43c>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	ec51 0b19 	vmov	r0, r1, d9
 800328e:	f7fd f937 	bl	8000500 <__aeabi_dmul>
 8003292:	4680      	mov	r8, r0
 8003294:	4689      	mov	r9, r1
 8003296:	4642      	mov	r2, r8
 8003298:	464b      	mov	r3, r9
 800329a:	4650      	mov	r0, sl
 800329c:	4659      	mov	r1, fp
 800329e:	f7fc ff77 	bl	8000190 <__aeabi_dsub>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4650      	mov	r0, sl
 80032a8:	4659      	mov	r1, fp
 80032aa:	4692      	mov	sl, r2
 80032ac:	469b      	mov	fp, r3
 80032ae:	f7fc ff6f 	bl	8000190 <__aeabi_dsub>
 80032b2:	4642      	mov	r2, r8
 80032b4:	464b      	mov	r3, r9
 80032b6:	f7fc ff6b 	bl	8000190 <__aeabi_dsub>
 80032ba:	a334      	add	r3, pc, #208	; (adr r3, 800338c <__ieee754_rem_pio2+0x444>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	4680      	mov	r8, r0
 80032c2:	4689      	mov	r9, r1
 80032c4:	ec51 0b19 	vmov	r0, r1, d9
 80032c8:	f7fd f91a 	bl	8000500 <__aeabi_dmul>
 80032cc:	4642      	mov	r2, r8
 80032ce:	464b      	mov	r3, r9
 80032d0:	f7fc ff5e 	bl	8000190 <__aeabi_dsub>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4650      	mov	r0, sl
 80032da:	4659      	mov	r1, fp
 80032dc:	ec43 2b18 	vmov	d8, r2, r3
 80032e0:	f7fc ff56 	bl	8000190 <__aeabi_dsub>
 80032e4:	4680      	mov	r8, r0
 80032e6:	4689      	mov	r9, r1
 80032e8:	e741      	b.n	800316e <__ieee754_rem_pio2+0x226>
 80032ea:	2303      	movs	r3, #3
 80032ec:	e6ac      	b.n	8003048 <__ieee754_rem_pio2+0x100>
 80032ee:	f7fc ff51 	bl	8000194 <__adddf3>
 80032f2:	4b23      	ldr	r3, [pc, #140]	; (8003380 <__ieee754_rem_pio2+0x438>)
 80032f4:	429d      	cmp	r5, r3
 80032f6:	4680      	mov	r8, r0
 80032f8:	4689      	mov	r9, r1
 80032fa:	d016      	beq.n	800332a <__ieee754_rem_pio2+0x3e2>
 80032fc:	a31a      	add	r3, pc, #104	; (adr r3, 8003368 <__ieee754_rem_pio2+0x420>)
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	f7fc ff47 	bl	8000194 <__adddf3>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	e9c4 2300 	strd	r2, r3, [r4]
 800330e:	4640      	mov	r0, r8
 8003310:	4649      	mov	r1, r9
 8003312:	f7fc ff3d 	bl	8000190 <__aeabi_dsub>
 8003316:	a314      	add	r3, pc, #80	; (adr r3, 8003368 <__ieee754_rem_pio2+0x420>)
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f7fc ff3a 	bl	8000194 <__adddf3>
 8003320:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003324:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003328:	e646      	b.n	8002fb8 <__ieee754_rem_pio2+0x70>
 800332a:	a311      	add	r3, pc, #68	; (adr r3, 8003370 <__ieee754_rem_pio2+0x428>)
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f7fc ff30 	bl	8000194 <__adddf3>
 8003334:	a310      	add	r3, pc, #64	; (adr r3, 8003378 <__ieee754_rem_pio2+0x430>)
 8003336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333a:	4680      	mov	r8, r0
 800333c:	4689      	mov	r9, r1
 800333e:	f7fc ff29 	bl	8000194 <__adddf3>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	e9c4 2300 	strd	r2, r3, [r4]
 800334a:	4640      	mov	r0, r8
 800334c:	4649      	mov	r1, r9
 800334e:	f7fc ff1f 	bl	8000190 <__aeabi_dsub>
 8003352:	a309      	add	r3, pc, #36	; (adr r3, 8003378 <__ieee754_rem_pio2+0x430>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fc ff1c 	bl	8000194 <__adddf3>
 800335c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003360:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003364:	e628      	b.n	8002fb8 <__ieee754_rem_pio2+0x70>
 8003366:	bf00      	nop
 8003368:	1a626331 	.word	0x1a626331
 800336c:	3dd0b461 	.word	0x3dd0b461
 8003370:	1a600000 	.word	0x1a600000
 8003374:	3dd0b461 	.word	0x3dd0b461
 8003378:	2e037073 	.word	0x2e037073
 800337c:	3ba3198a 	.word	0x3ba3198a
 8003380:	3ff921fb 	.word	0x3ff921fb
 8003384:	2e000000 	.word	0x2e000000
 8003388:	3ba3198a 	.word	0x3ba3198a
 800338c:	252049c1 	.word	0x252049c1
 8003390:	397b839a 	.word	0x397b839a
 8003394:	00000000 	.word	0x00000000

08003398 <__kernel_cos>:
 8003398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800339c:	ec57 6b10 	vmov	r6, r7, d0
 80033a0:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 80033a4:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 80033a8:	ed2d 8b04 	vpush	{d8-d9}
 80033ac:	ec5b ab11 	vmov	sl, fp, d1
 80033b0:	da71      	bge.n	8003496 <__kernel_cos+0xfe>
 80033b2:	ee10 0a10 	vmov	r0, s0
 80033b6:	4639      	mov	r1, r7
 80033b8:	f7fd fd28 	bl	8000e0c <__aeabi_d2iz>
 80033bc:	2800      	cmp	r0, #0
 80033be:	f000 80f6 	beq.w	80035ae <__kernel_cos+0x216>
 80033c2:	4632      	mov	r2, r6
 80033c4:	463b      	mov	r3, r7
 80033c6:	4630      	mov	r0, r6
 80033c8:	4639      	mov	r1, r7
 80033ca:	f7fd f899 	bl	8000500 <__aeabi_dmul>
 80033ce:	a37c      	add	r3, pc, #496	; (adr r3, 80035c0 <__kernel_cos+0x228>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	4604      	mov	r4, r0
 80033d6:	460d      	mov	r5, r1
 80033d8:	f7fd f892 	bl	8000500 <__aeabi_dmul>
 80033dc:	a37a      	add	r3, pc, #488	; (adr r3, 80035c8 <__kernel_cos+0x230>)
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	f7fc fed7 	bl	8000194 <__adddf3>
 80033e6:	4622      	mov	r2, r4
 80033e8:	462b      	mov	r3, r5
 80033ea:	f7fd f889 	bl	8000500 <__aeabi_dmul>
 80033ee:	a378      	add	r3, pc, #480	; (adr r3, 80035d0 <__kernel_cos+0x238>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f7fc fecc 	bl	8000190 <__aeabi_dsub>
 80033f8:	4622      	mov	r2, r4
 80033fa:	462b      	mov	r3, r5
 80033fc:	f7fd f880 	bl	8000500 <__aeabi_dmul>
 8003400:	a375      	add	r3, pc, #468	; (adr r3, 80035d8 <__kernel_cos+0x240>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f7fc fec5 	bl	8000194 <__adddf3>
 800340a:	4622      	mov	r2, r4
 800340c:	462b      	mov	r3, r5
 800340e:	f7fd f877 	bl	8000500 <__aeabi_dmul>
 8003412:	a373      	add	r3, pc, #460	; (adr r3, 80035e0 <__kernel_cos+0x248>)
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f7fc feba 	bl	8000190 <__aeabi_dsub>
 800341c:	4622      	mov	r2, r4
 800341e:	462b      	mov	r3, r5
 8003420:	f7fd f86e 	bl	8000500 <__aeabi_dmul>
 8003424:	a370      	add	r3, pc, #448	; (adr r3, 80035e8 <__kernel_cos+0x250>)
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f7fc feb3 	bl	8000194 <__adddf3>
 800342e:	4622      	mov	r2, r4
 8003430:	462b      	mov	r3, r5
 8003432:	f7fd f865 	bl	8000500 <__aeabi_dmul>
 8003436:	ec41 0b18 	vmov	d8, r0, r1
 800343a:	4b71      	ldr	r3, [pc, #452]	; (8003600 <__kernel_cos+0x268>)
 800343c:	2200      	movs	r2, #0
 800343e:	4620      	mov	r0, r4
 8003440:	4629      	mov	r1, r5
 8003442:	f7fd f85d 	bl	8000500 <__aeabi_dmul>
 8003446:	ec53 2b18 	vmov	r2, r3, d8
 800344a:	4680      	mov	r8, r0
 800344c:	4689      	mov	r9, r1
 800344e:	4620      	mov	r0, r4
 8003450:	4629      	mov	r1, r5
 8003452:	f7fd f855 	bl	8000500 <__aeabi_dmul>
 8003456:	4652      	mov	r2, sl
 8003458:	465b      	mov	r3, fp
 800345a:	4604      	mov	r4, r0
 800345c:	460d      	mov	r5, r1
 800345e:	4630      	mov	r0, r6
 8003460:	4639      	mov	r1, r7
 8003462:	f7fd f84d 	bl	8000500 <__aeabi_dmul>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4620      	mov	r0, r4
 800346c:	4629      	mov	r1, r5
 800346e:	f7fc fe8f 	bl	8000190 <__aeabi_dsub>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4640      	mov	r0, r8
 8003478:	4649      	mov	r1, r9
 800347a:	f7fc fe89 	bl	8000190 <__aeabi_dsub>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	2000      	movs	r0, #0
 8003484:	495f      	ldr	r1, [pc, #380]	; (8003604 <__kernel_cos+0x26c>)
 8003486:	f7fc fe83 	bl	8000190 <__aeabi_dsub>
 800348a:	ecbd 8b04 	vpop	{d8-d9}
 800348e:	ec41 0b10 	vmov	d0, r0, r1
 8003492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003496:	ee10 2a10 	vmov	r2, s0
 800349a:	ee10 0a10 	vmov	r0, s0
 800349e:	463b      	mov	r3, r7
 80034a0:	4639      	mov	r1, r7
 80034a2:	f7fd f82d 	bl	8000500 <__aeabi_dmul>
 80034a6:	a346      	add	r3, pc, #280	; (adr r3, 80035c0 <__kernel_cos+0x228>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	4604      	mov	r4, r0
 80034ae:	460d      	mov	r5, r1
 80034b0:	f7fd f826 	bl	8000500 <__aeabi_dmul>
 80034b4:	a344      	add	r3, pc, #272	; (adr r3, 80035c8 <__kernel_cos+0x230>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f7fc fe6b 	bl	8000194 <__adddf3>
 80034be:	4622      	mov	r2, r4
 80034c0:	462b      	mov	r3, r5
 80034c2:	f7fd f81d 	bl	8000500 <__aeabi_dmul>
 80034c6:	a342      	add	r3, pc, #264	; (adr r3, 80035d0 <__kernel_cos+0x238>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f7fc fe60 	bl	8000190 <__aeabi_dsub>
 80034d0:	4622      	mov	r2, r4
 80034d2:	462b      	mov	r3, r5
 80034d4:	f7fd f814 	bl	8000500 <__aeabi_dmul>
 80034d8:	a33f      	add	r3, pc, #252	; (adr r3, 80035d8 <__kernel_cos+0x240>)
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	f7fc fe59 	bl	8000194 <__adddf3>
 80034e2:	4622      	mov	r2, r4
 80034e4:	462b      	mov	r3, r5
 80034e6:	f7fd f80b 	bl	8000500 <__aeabi_dmul>
 80034ea:	a33d      	add	r3, pc, #244	; (adr r3, 80035e0 <__kernel_cos+0x248>)
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f7fc fe4e 	bl	8000190 <__aeabi_dsub>
 80034f4:	4622      	mov	r2, r4
 80034f6:	462b      	mov	r3, r5
 80034f8:	f7fd f802 	bl	8000500 <__aeabi_dmul>
 80034fc:	a33a      	add	r3, pc, #232	; (adr r3, 80035e8 <__kernel_cos+0x250>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f7fc fe47 	bl	8000194 <__adddf3>
 8003506:	462b      	mov	r3, r5
 8003508:	4622      	mov	r2, r4
 800350a:	f7fc fff9 	bl	8000500 <__aeabi_dmul>
 800350e:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <__kernel_cos+0x270>)
 8003510:	4599      	cmp	r9, r3
 8003512:	ec41 0b18 	vmov	d8, r0, r1
 8003516:	dd90      	ble.n	800343a <__kernel_cos+0xa2>
 8003518:	4b3c      	ldr	r3, [pc, #240]	; (800360c <__kernel_cos+0x274>)
 800351a:	4599      	cmp	r9, r3
 800351c:	dc3c      	bgt.n	8003598 <__kernel_cos+0x200>
 800351e:	2200      	movs	r2, #0
 8003520:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 8003524:	4937      	ldr	r1, [pc, #220]	; (8003604 <__kernel_cos+0x26c>)
 8003526:	2000      	movs	r0, #0
 8003528:	4690      	mov	r8, r2
 800352a:	4699      	mov	r9, r3
 800352c:	f7fc fe30 	bl	8000190 <__aeabi_dsub>
 8003530:	ec41 0b19 	vmov	d9, r0, r1
 8003534:	4b32      	ldr	r3, [pc, #200]	; (8003600 <__kernel_cos+0x268>)
 8003536:	2200      	movs	r2, #0
 8003538:	4620      	mov	r0, r4
 800353a:	4629      	mov	r1, r5
 800353c:	f7fc ffe0 	bl	8000500 <__aeabi_dmul>
 8003540:	4642      	mov	r2, r8
 8003542:	464b      	mov	r3, r9
 8003544:	f7fc fe24 	bl	8000190 <__aeabi_dsub>
 8003548:	ec53 2b18 	vmov	r2, r3, d8
 800354c:	4680      	mov	r8, r0
 800354e:	4689      	mov	r9, r1
 8003550:	4620      	mov	r0, r4
 8003552:	4629      	mov	r1, r5
 8003554:	f7fc ffd4 	bl	8000500 <__aeabi_dmul>
 8003558:	4652      	mov	r2, sl
 800355a:	465b      	mov	r3, fp
 800355c:	4604      	mov	r4, r0
 800355e:	460d      	mov	r5, r1
 8003560:	4630      	mov	r0, r6
 8003562:	4639      	mov	r1, r7
 8003564:	f7fc ffcc 	bl	8000500 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4620      	mov	r0, r4
 800356e:	4629      	mov	r1, r5
 8003570:	f7fc fe0e 	bl	8000190 <__aeabi_dsub>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4640      	mov	r0, r8
 800357a:	4649      	mov	r1, r9
 800357c:	f7fc fe08 	bl	8000190 <__aeabi_dsub>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	ec51 0b19 	vmov	r0, r1, d9
 8003588:	f7fc fe02 	bl	8000190 <__aeabi_dsub>
 800358c:	ecbd 8b04 	vpop	{d8-d9}
 8003590:	ec41 0b10 	vmov	d0, r0, r1
 8003594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003598:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80035f0 <__kernel_cos+0x258>
 800359c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003610 <__kernel_cos+0x278>
 80035a0:	eeb0 9a47 	vmov.f32	s18, s14
 80035a4:	eef0 9a67 	vmov.f32	s19, s15
 80035a8:	f04f 0800 	mov.w	r8, #0
 80035ac:	e7c2      	b.n	8003534 <__kernel_cos+0x19c>
 80035ae:	ecbd 8b04 	vpop	{d8-d9}
 80035b2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80035f8 <__kernel_cos+0x260>
 80035b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ba:	bf00      	nop
 80035bc:	f3af 8000 	nop.w
 80035c0:	be8838d4 	.word	0xbe8838d4
 80035c4:	bda8fae9 	.word	0xbda8fae9
 80035c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80035cc:	3e21ee9e 	.word	0x3e21ee9e
 80035d0:	809c52ad 	.word	0x809c52ad
 80035d4:	3e927e4f 	.word	0x3e927e4f
 80035d8:	19cb1590 	.word	0x19cb1590
 80035dc:	3efa01a0 	.word	0x3efa01a0
 80035e0:	16c15177 	.word	0x16c15177
 80035e4:	3f56c16c 	.word	0x3f56c16c
 80035e8:	5555554c 	.word	0x5555554c
 80035ec:	3fa55555 	.word	0x3fa55555
 80035f0:	00000000 	.word	0x00000000
 80035f4:	3fe70000 	.word	0x3fe70000
 80035f8:	00000000 	.word	0x00000000
 80035fc:	3ff00000 	.word	0x3ff00000
 8003600:	3fe00000 	.word	0x3fe00000
 8003604:	3ff00000 	.word	0x3ff00000
 8003608:	3fd33332 	.word	0x3fd33332
 800360c:	3fe90000 	.word	0x3fe90000
 8003610:	3fd20000 	.word	0x3fd20000
 8003614:	00000000 	.word	0x00000000

08003618 <__kernel_rem_pio2>:
 8003618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003620:	461c      	mov	r4, r3
 8003622:	9308      	str	r3, [sp, #32]
 8003624:	910b      	str	r1, [sp, #44]	; 0x2c
 8003626:	4bbb      	ldr	r3, [pc, #748]	; (8003914 <__kernel_rem_pio2+0x2fc>)
 8003628:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800362a:	9004      	str	r0, [sp, #16]
 800362c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003630:	9105      	str	r1, [sp, #20]
 8003632:	1e63      	subs	r3, r4, #1
 8003634:	f112 0f14 	cmn.w	r2, #20
 8003638:	9303      	str	r3, [sp, #12]
 800363a:	f2c0 834f 	blt.w	8003cdc <__kernel_rem_pio2+0x6c4>
 800363e:	49b6      	ldr	r1, [pc, #728]	; (8003918 <__kernel_rem_pio2+0x300>)
 8003640:	1ed3      	subs	r3, r2, #3
 8003642:	fb81 0103 	smull	r0, r1, r1, r3
 8003646:	17db      	asrs	r3, r3, #31
 8003648:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 800364c:	9307      	str	r3, [sp, #28]
 800364e:	3301      	adds	r3, #1
 8003650:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	18d3      	adds	r3, r2, r3
 8003658:	9306      	str	r3, [sp, #24]
 800365a:	9a07      	ldr	r2, [sp, #28]
 800365c:	9b03      	ldr	r3, [sp, #12]
 800365e:	1ad4      	subs	r4, r2, r3
 8003660:	9a05      	ldr	r2, [sp, #20]
 8003662:	18d6      	adds	r6, r2, r3
 8003664:	d41a      	bmi.n	800369c <__kernel_rem_pio2+0x84>
 8003666:	3601      	adds	r6, #1
 8003668:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 800366a:	4426      	add	r6, r4
 800366c:	ad20      	add	r5, sp, #128	; 0x80
 800366e:	f04f 0800 	mov.w	r8, #0
 8003672:	f04f 0900 	mov.w	r9, #0
 8003676:	e008      	b.n	800368a <__kernel_rem_pio2+0x72>
 8003678:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 800367c:	f7fc fed6 	bl	800042c <__aeabi_i2d>
 8003680:	3401      	adds	r4, #1
 8003682:	42b4      	cmp	r4, r6
 8003684:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003688:	d008      	beq.n	800369c <__kernel_rem_pio2+0x84>
 800368a:	2c00      	cmp	r4, #0
 800368c:	daf4      	bge.n	8003678 <__kernel_rem_pio2+0x60>
 800368e:	3401      	adds	r4, #1
 8003690:	4640      	mov	r0, r8
 8003692:	4649      	mov	r1, r9
 8003694:	42b4      	cmp	r4, r6
 8003696:	e8e5 0102 	strd	r0, r1, [r5], #8
 800369a:	d1f6      	bne.n	800368a <__kernel_rem_pio2+0x72>
 800369c:	9b05      	ldr	r3, [sp, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f2c0 83ca 	blt.w	8003e38 <__kernel_rem_pio2+0x820>
 80036a4:	9b08      	ldr	r3, [sp, #32]
 80036a6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80036aa:	00da      	lsls	r2, r3, #3
 80036ac:	9202      	str	r2, [sp, #8]
 80036ae:	9a05      	ldr	r2, [sp, #20]
 80036b0:	441a      	add	r2, r3
 80036b2:	9201      	str	r2, [sp, #4]
 80036b4:	9a04      	ldr	r2, [sp, #16]
 80036b6:	a920      	add	r1, sp, #128	; 0x80
 80036b8:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 80036bc:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80036c0:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 80036c4:	9b03      	ldr	r3, [sp, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f2c0 81ac 	blt.w	8003a24 <__kernel_rem_pio2+0x40c>
 80036cc:	9e04      	ldr	r6, [sp, #16]
 80036ce:	4657      	mov	r7, sl
 80036d0:	2400      	movs	r4, #0
 80036d2:	2500      	movs	r5, #0
 80036d4:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80036d8:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80036dc:	f7fc ff10 	bl	8000500 <__aeabi_dmul>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4620      	mov	r0, r4
 80036e6:	4629      	mov	r1, r5
 80036e8:	f7fc fd54 	bl	8000194 <__adddf3>
 80036ec:	4546      	cmp	r6, r8
 80036ee:	4604      	mov	r4, r0
 80036f0:	460d      	mov	r5, r1
 80036f2:	d1ef      	bne.n	80036d4 <__kernel_rem_pio2+0xbc>
 80036f4:	9b01      	ldr	r3, [sp, #4]
 80036f6:	f109 0901 	add.w	r9, r9, #1
 80036fa:	4599      	cmp	r9, r3
 80036fc:	e8eb 4502 	strd	r4, r5, [fp], #8
 8003700:	f10a 0a08 	add.w	sl, sl, #8
 8003704:	d1de      	bne.n	80036c4 <__kernel_rem_pio2+0xac>
 8003706:	9a04      	ldr	r2, [sp, #16]
 8003708:	9b02      	ldr	r3, [sp, #8]
 800370a:	4413      	add	r3, r2
 800370c:	469b      	mov	fp, r3
 800370e:	9b05      	ldr	r3, [sp, #20]
 8003710:	a90b      	add	r1, sp, #44	; 0x2c
 8003712:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8003716:	a90c      	add	r1, sp, #48	; 0x30
 8003718:	920a      	str	r2, [sp, #40]	; 0x28
 800371a:	461a      	mov	r2, r3
 800371c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003720:	3b08      	subs	r3, #8
 8003722:	9309      	str	r3, [sp, #36]	; 0x24
 8003724:	9201      	str	r2, [sp, #4]
 8003726:	9a01      	ldr	r2, [sp, #4]
 8003728:	a998      	add	r1, sp, #608	; 0x260
 800372a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 800372e:	2a00      	cmp	r2, #0
 8003730:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8003734:	dd29      	ble.n	800378a <__kernel_rem_pio2+0x172>
 8003736:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800373a:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 800373e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003742:	4b76      	ldr	r3, [pc, #472]	; (800391c <__kernel_rem_pio2+0x304>)
 8003744:	2200      	movs	r2, #0
 8003746:	4620      	mov	r0, r4
 8003748:	4629      	mov	r1, r5
 800374a:	f7fc fed9 	bl	8000500 <__aeabi_dmul>
 800374e:	f7fd fb5d 	bl	8000e0c <__aeabi_d2iz>
 8003752:	f7fc fe6b 	bl	800042c <__aeabi_i2d>
 8003756:	4b72      	ldr	r3, [pc, #456]	; (8003920 <__kernel_rem_pio2+0x308>)
 8003758:	2200      	movs	r2, #0
 800375a:	4606      	mov	r6, r0
 800375c:	460f      	mov	r7, r1
 800375e:	f7fc fecf 	bl	8000500 <__aeabi_dmul>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4620      	mov	r0, r4
 8003768:	4629      	mov	r1, r5
 800376a:	f7fc fd11 	bl	8000190 <__aeabi_dsub>
 800376e:	f7fd fb4d 	bl	8000e0c <__aeabi_d2iz>
 8003772:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8003776:	f849 0b04 	str.w	r0, [r9], #4
 800377a:	4639      	mov	r1, r7
 800377c:	4630      	mov	r0, r6
 800377e:	f7fc fd09 	bl	8000194 <__adddf3>
 8003782:	45d0      	cmp	r8, sl
 8003784:	4604      	mov	r4, r0
 8003786:	460d      	mov	r5, r1
 8003788:	d1db      	bne.n	8003742 <__kernel_rem_pio2+0x12a>
 800378a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800378e:	ec45 4b10 	vmov	d0, r4, r5
 8003792:	4648      	mov	r0, r9
 8003794:	f000 fe50 	bl	8004438 <scalbn>
 8003798:	ec55 4b10 	vmov	r4, r5, d0
 800379c:	2200      	movs	r2, #0
 800379e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80037a2:	ee10 0a10 	vmov	r0, s0
 80037a6:	4629      	mov	r1, r5
 80037a8:	f7fc feaa 	bl	8000500 <__aeabi_dmul>
 80037ac:	ec41 0b10 	vmov	d0, r0, r1
 80037b0:	f000 fdb6 	bl	8004320 <floor>
 80037b4:	4b5b      	ldr	r3, [pc, #364]	; (8003924 <__kernel_rem_pio2+0x30c>)
 80037b6:	ec51 0b10 	vmov	r0, r1, d0
 80037ba:	2200      	movs	r2, #0
 80037bc:	f7fc fea0 	bl	8000500 <__aeabi_dmul>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4620      	mov	r0, r4
 80037c6:	4629      	mov	r1, r5
 80037c8:	f7fc fce2 	bl	8000190 <__aeabi_dsub>
 80037cc:	460d      	mov	r5, r1
 80037ce:	4604      	mov	r4, r0
 80037d0:	f7fd fb1c 	bl	8000e0c <__aeabi_d2iz>
 80037d4:	4680      	mov	r8, r0
 80037d6:	f7fc fe29 	bl	800042c <__aeabi_i2d>
 80037da:	460b      	mov	r3, r1
 80037dc:	4602      	mov	r2, r0
 80037de:	4629      	mov	r1, r5
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7fc fcd5 	bl	8000190 <__aeabi_dsub>
 80037e6:	464b      	mov	r3, r9
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	4606      	mov	r6, r0
 80037ec:	460f      	mov	r7, r1
 80037ee:	f340 809b 	ble.w	8003928 <__kernel_rem_pio2+0x310>
 80037f2:	9a01      	ldr	r2, [sp, #4]
 80037f4:	1e51      	subs	r1, r2, #1
 80037f6:	aa0c      	add	r2, sp, #48	; 0x30
 80037f8:	f1c9 0318 	rsb	r3, r9, #24
 80037fc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003800:	fa42 f003 	asr.w	r0, r2, r3
 8003804:	fa00 f303 	lsl.w	r3, r0, r3
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f1c9 0517 	rsb	r5, r9, #23
 800380e:	aa0c      	add	r2, sp, #48	; 0x30
 8003810:	fa43 f505 	asr.w	r5, r3, r5
 8003814:	2d00      	cmp	r5, #0
 8003816:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800381a:	4480      	add	r8, r0
 800381c:	f300 808e 	bgt.w	800393c <__kernel_rem_pio2+0x324>
 8003820:	2200      	movs	r2, #0
 8003822:	2300      	movs	r3, #0
 8003824:	4630      	mov	r0, r6
 8003826:	4639      	mov	r1, r7
 8003828:	f7fd faa8 	bl	8000d7c <__aeabi_dcmpeq>
 800382c:	2800      	cmp	r0, #0
 800382e:	f000 825f 	beq.w	8003cf0 <__kernel_rem_pio2+0x6d8>
 8003832:	9b01      	ldr	r3, [sp, #4]
 8003834:	9a05      	ldr	r2, [sp, #20]
 8003836:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800383a:	4552      	cmp	r2, sl
 800383c:	dc10      	bgt.n	8003860 <__kernel_rem_pio2+0x248>
 800383e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003842:	aa0c      	add	r2, sp, #48	; 0x30
 8003844:	3b01      	subs	r3, #1
 8003846:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003848:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800384c:	2200      	movs	r2, #0
 800384e:	f853 1904 	ldr.w	r1, [r3], #-4
 8003852:	4283      	cmp	r3, r0
 8003854:	ea42 0201 	orr.w	r2, r2, r1
 8003858:	d1f9      	bne.n	800384e <__kernel_rem_pio2+0x236>
 800385a:	2a00      	cmp	r2, #0
 800385c:	f040 80e5 	bne.w	8003a2a <__kernel_rem_pio2+0x412>
 8003860:	9b05      	ldr	r3, [sp, #20]
 8003862:	aa0c      	add	r2, sp, #48	; 0x30
 8003864:	3b01      	subs	r3, #1
 8003866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 80d5 	bne.w	8003a1a <__kernel_rem_pio2+0x402>
 8003870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003872:	2301      	movs	r3, #1
 8003874:	f852 1904 	ldr.w	r1, [r2], #-4
 8003878:	3301      	adds	r3, #1
 800387a:	2900      	cmp	r1, #0
 800387c:	d0fa      	beq.n	8003874 <__kernel_rem_pio2+0x25c>
 800387e:	9a01      	ldr	r2, [sp, #4]
 8003880:	18d3      	adds	r3, r2, r3
 8003882:	9302      	str	r3, [sp, #8]
 8003884:	1c53      	adds	r3, r2, #1
 8003886:	4699      	mov	r9, r3
 8003888:	9a01      	ldr	r2, [sp, #4]
 800388a:	9908      	ldr	r1, [sp, #32]
 800388c:	440a      	add	r2, r1
 800388e:	4690      	mov	r8, r2
 8003890:	9a07      	ldr	r2, [sp, #28]
 8003892:	eb02 0a03 	add.w	sl, r2, r3
 8003896:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 800389a:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 800389c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80038a0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80038a4:	aa20      	add	r2, sp, #128	; 0x80
 80038a6:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 80038aa:	aa70      	add	r2, sp, #448	; 0x1c0
 80038ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80038b6:	f7fc fdb9 	bl	800042c <__aeabi_i2d>
 80038ba:	460b      	mov	r3, r1
 80038bc:	9903      	ldr	r1, [sp, #12]
 80038be:	4602      	mov	r2, r0
 80038c0:	2900      	cmp	r1, #0
 80038c2:	e9c8 2300 	strd	r2, r3, [r8]
 80038c6:	4647      	mov	r7, r8
 80038c8:	f108 0808 	add.w	r8, r8, #8
 80038cc:	db1e      	blt.n	800390c <__kernel_rem_pio2+0x2f4>
 80038ce:	9e04      	ldr	r6, [sp, #16]
 80038d0:	2400      	movs	r4, #0
 80038d2:	2500      	movs	r5, #0
 80038d4:	e001      	b.n	80038da <__kernel_rem_pio2+0x2c2>
 80038d6:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80038da:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80038de:	f7fc fe0f 	bl	8000500 <__aeabi_dmul>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4620      	mov	r0, r4
 80038e8:	4629      	mov	r1, r5
 80038ea:	f7fc fc53 	bl	8000194 <__adddf3>
 80038ee:	455e      	cmp	r6, fp
 80038f0:	4604      	mov	r4, r0
 80038f2:	460d      	mov	r5, r1
 80038f4:	d1ef      	bne.n	80038d6 <__kernel_rem_pio2+0x2be>
 80038f6:	9b01      	ldr	r3, [sp, #4]
 80038f8:	e8e3 4502 	strd	r4, r5, [r3], #8
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	9b02      	ldr	r3, [sp, #8]
 8003900:	f109 0901 	add.w	r9, r9, #1
 8003904:	4599      	cmp	r9, r3
 8003906:	ddd4      	ble.n	80038b2 <__kernel_rem_pio2+0x29a>
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	e70c      	b.n	8003726 <__kernel_rem_pio2+0x10e>
 800390c:	2400      	movs	r4, #0
 800390e:	2500      	movs	r5, #0
 8003910:	e7f1      	b.n	80038f6 <__kernel_rem_pio2+0x2de>
 8003912:	bf00      	nop
 8003914:	0800b4d0 	.word	0x0800b4d0
 8003918:	2aaaaaab 	.word	0x2aaaaaab
 800391c:	3e700000 	.word	0x3e700000
 8003920:	41700000 	.word	0x41700000
 8003924:	40200000 	.word	0x40200000
 8003928:	d16e      	bne.n	8003a08 <__kernel_rem_pio2+0x3f0>
 800392a:	9b01      	ldr	r3, [sp, #4]
 800392c:	aa0c      	add	r2, sp, #48	; 0x30
 800392e:	3b01      	subs	r3, #1
 8003930:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8003934:	15ed      	asrs	r5, r5, #23
 8003936:	2d00      	cmp	r5, #0
 8003938:	f77f af72 	ble.w	8003820 <__kernel_rem_pio2+0x208>
 800393c:	9b01      	ldr	r3, [sp, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f108 0801 	add.w	r8, r8, #1
 8003944:	f340 81d2 	ble.w	8003cec <__kernel_rem_pio2+0x6d4>
 8003948:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800394a:	2c00      	cmp	r4, #0
 800394c:	d159      	bne.n	8003a02 <__kernel_rem_pio2+0x3ea>
 800394e:	9b01      	ldr	r3, [sp, #4]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d028      	beq.n	80039a6 <__kernel_rem_pio2+0x38e>
 8003954:	a90c      	add	r1, sp, #48	; 0x30
 8003956:	2201      	movs	r2, #1
 8003958:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800395c:	1c53      	adds	r3, r2, #1
 800395e:	b944      	cbnz	r4, 8003972 <__kernel_rem_pio2+0x35a>
 8003960:	9a01      	ldr	r2, [sp, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d01f      	beq.n	80039a6 <__kernel_rem_pio2+0x38e>
 8003966:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800396a:	461a      	mov	r2, r3
 800396c:	1c53      	adds	r3, r2, #1
 800396e:	2c00      	cmp	r4, #0
 8003970:	d0f6      	beq.n	8003960 <__kernel_rem_pio2+0x348>
 8003972:	a90c      	add	r1, sp, #48	; 0x30
 8003974:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 8003978:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 800397c:	9901      	ldr	r1, [sp, #4]
 800397e:	4299      	cmp	r1, r3
 8003980:	dd10      	ble.n	80039a4 <__kernel_rem_pio2+0x38c>
 8003982:	aa0c      	add	r2, sp, #48	; 0x30
 8003984:	a80c      	add	r0, sp, #48	; 0x30
 8003986:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800398a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800398e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003992:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003996:	e000      	b.n	800399a <__kernel_rem_pio2+0x382>
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	1a8a      	subs	r2, r1, r2
 800399c:	f843 2b04 	str.w	r2, [r3], #4
 80039a0:	4283      	cmp	r3, r0
 80039a2:	d1f9      	bne.n	8003998 <__kernel_rem_pio2+0x380>
 80039a4:	2401      	movs	r4, #1
 80039a6:	9b06      	ldr	r3, [sp, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	dd0e      	ble.n	80039ca <__kernel_rem_pio2+0x3b2>
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	f000 8168 	beq.w	8003c82 <__kernel_rem_pio2+0x66a>
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d109      	bne.n	80039ca <__kernel_rem_pio2+0x3b2>
 80039b6:	9b01      	ldr	r3, [sp, #4]
 80039b8:	1e5a      	subs	r2, r3, #1
 80039ba:	ab0c      	add	r3, sp, #48	; 0x30
 80039bc:	a90c      	add	r1, sp, #48	; 0x30
 80039be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80039c6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80039ca:	2d02      	cmp	r5, #2
 80039cc:	f47f af28 	bne.w	8003820 <__kernel_rem_pio2+0x208>
 80039d0:	4632      	mov	r2, r6
 80039d2:	463b      	mov	r3, r7
 80039d4:	49b4      	ldr	r1, [pc, #720]	; (8003ca8 <__kernel_rem_pio2+0x690>)
 80039d6:	2000      	movs	r0, #0
 80039d8:	f7fc fbda 	bl	8000190 <__aeabi_dsub>
 80039dc:	4606      	mov	r6, r0
 80039de:	460f      	mov	r7, r1
 80039e0:	2c00      	cmp	r4, #0
 80039e2:	f43f af1d 	beq.w	8003820 <__kernel_rem_pio2+0x208>
 80039e6:	9806      	ldr	r0, [sp, #24]
 80039e8:	ed9f 0bab 	vldr	d0, [pc, #684]	; 8003c98 <__kernel_rem_pio2+0x680>
 80039ec:	f000 fd24 	bl	8004438 <scalbn>
 80039f0:	4630      	mov	r0, r6
 80039f2:	4639      	mov	r1, r7
 80039f4:	ec53 2b10 	vmov	r2, r3, d0
 80039f8:	f7fc fbca 	bl	8000190 <__aeabi_dsub>
 80039fc:	4606      	mov	r6, r0
 80039fe:	460f      	mov	r7, r1
 8003a00:	e70e      	b.n	8003820 <__kernel_rem_pio2+0x208>
 8003a02:	2301      	movs	r3, #1
 8003a04:	2200      	movs	r2, #0
 8003a06:	e7b4      	b.n	8003972 <__kernel_rem_pio2+0x35a>
 8003a08:	4ba8      	ldr	r3, [pc, #672]	; (8003cac <__kernel_rem_pio2+0x694>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f7fd f9d4 	bl	8000db8 <__aeabi_dcmpge>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	f040 8151 	bne.w	8003cb8 <__kernel_rem_pio2+0x6a0>
 8003a16:	4605      	mov	r5, r0
 8003a18:	e702      	b.n	8003820 <__kernel_rem_pio2+0x208>
 8003a1a:	9b01      	ldr	r3, [sp, #4]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4699      	mov	r9, r3
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	e731      	b.n	8003888 <__kernel_rem_pio2+0x270>
 8003a24:	2400      	movs	r4, #0
 8003a26:	2500      	movs	r5, #0
 8003a28:	e664      	b.n	80036f4 <__kernel_rem_pio2+0xdc>
 8003a2a:	9b06      	ldr	r3, [sp, #24]
 8003a2c:	9504      	str	r5, [sp, #16]
 8003a2e:	f1a3 0218 	sub.w	r2, r3, #24
 8003a32:	ab0c      	add	r3, sp, #48	; 0x30
 8003a34:	f8cd 801c 	str.w	r8, [sp, #28]
 8003a38:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8003a3c:	9206      	str	r2, [sp, #24]
 8003a3e:	b973      	cbnz	r3, 8003a5e <__kernel_rem_pio2+0x446>
 8003a40:	9b01      	ldr	r3, [sp, #4]
 8003a42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a46:	3b02      	subs	r3, #2
 8003a48:	a90c      	add	r1, sp, #48	; 0x30
 8003a4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003a4e:	f853 1904 	ldr.w	r1, [r3], #-4
 8003a52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003a56:	3a18      	subs	r2, #24
 8003a58:	2900      	cmp	r1, #0
 8003a5a:	d0f8      	beq.n	8003a4e <__kernel_rem_pio2+0x436>
 8003a5c:	9206      	str	r2, [sp, #24]
 8003a5e:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 8003c98 <__kernel_rem_pio2+0x680>
 8003a62:	9806      	ldr	r0, [sp, #24]
 8003a64:	f000 fce8 	bl	8004438 <scalbn>
 8003a68:	f1ba 0f00 	cmp.w	sl, #0
 8003a6c:	ec55 4b10 	vmov	r4, r5, d0
 8003a70:	f2c0 81d8 	blt.w	8003e24 <__kernel_rem_pio2+0x80c>
 8003a74:	ab70      	add	r3, sp, #448	; 0x1c0
 8003a76:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 8003a7a:	aa0c      	add	r2, sp, #48	; 0x30
 8003a7c:	f10a 0301 	add.w	r3, sl, #1
 8003a80:	9308      	str	r3, [sp, #32]
 8003a82:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8003a86:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8003cb0 <__kernel_rem_pio2+0x698>
 8003a8a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003a8e:	9306      	str	r3, [sp, #24]
 8003a90:	f10b 0708 	add.w	r7, fp, #8
 8003a94:	f04f 0800 	mov.w	r8, #0
 8003a98:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 8003a9c:	f7fc fcc6 	bl	800042c <__aeabi_i2d>
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	462b      	mov	r3, r5
 8003aa4:	f7fc fd2c 	bl	8000500 <__aeabi_dmul>
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8003aae:	4642      	mov	r2, r8
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	f7fc fd24 	bl	8000500 <__aeabi_dmul>
 8003ab8:	ab0c      	add	r3, sp, #48	; 0x30
 8003aba:	429e      	cmp	r6, r3
 8003abc:	4604      	mov	r4, r0
 8003abe:	460d      	mov	r5, r1
 8003ac0:	d1ea      	bne.n	8003a98 <__kernel_rem_pio2+0x480>
 8003ac2:	ab48      	add	r3, sp, #288	; 0x120
 8003ac4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003ac8:	f8cd b004 	str.w	fp, [sp, #4]
 8003acc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003ad0:	46d3      	mov	fp, sl
 8003ad2:	f8dd a014 	ldr.w	sl, [sp, #20]
 8003ad6:	f04f 0900 	mov.w	r9, #0
 8003ada:	f1ba 0f00 	cmp.w	sl, #0
 8003ade:	f2c0 8102 	blt.w	8003ce6 <__kernel_rem_pio2+0x6ce>
 8003ae2:	a36f      	add	r3, pc, #444	; (adr r3, 8003ca0 <__kernel_rem_pio2+0x688>)
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8003cb4 <__kernel_rem_pio2+0x69c>
 8003aec:	9f01      	ldr	r7, [sp, #4]
 8003aee:	2600      	movs	r6, #0
 8003af0:	2400      	movs	r4, #0
 8003af2:	2500      	movs	r5, #0
 8003af4:	e003      	b.n	8003afe <__kernel_rem_pio2+0x4e6>
 8003af6:	454e      	cmp	r6, r9
 8003af8:	dc10      	bgt.n	8003b1c <__kernel_rem_pio2+0x504>
 8003afa:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8003afe:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8003b02:	f7fc fcfd 	bl	8000500 <__aeabi_dmul>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	f7fc fb41 	bl	8000194 <__adddf3>
 8003b12:	3601      	adds	r6, #1
 8003b14:	45b2      	cmp	sl, r6
 8003b16:	4604      	mov	r4, r0
 8003b18:	460d      	mov	r5, r1
 8003b1a:	daec      	bge.n	8003af6 <__kernel_rem_pio2+0x4de>
 8003b1c:	9b02      	ldr	r3, [sp, #8]
 8003b1e:	e8e3 4502 	strd	r4, r5, [r3], #8
 8003b22:	9302      	str	r3, [sp, #8]
 8003b24:	9b01      	ldr	r3, [sp, #4]
 8003b26:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003b2a:	3b08      	subs	r3, #8
 8003b2c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8003b30:	f109 0901 	add.w	r9, r9, #1
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	d1d0      	bne.n	8003ada <__kernel_rem_pio2+0x4c2>
 8003b38:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003b3a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	dc1e      	bgt.n	8003b80 <__kernel_rem_pio2+0x568>
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f300 810a 	bgt.w	8003d5c <__kernel_rem_pio2+0x744>
 8003b48:	d113      	bne.n	8003b72 <__kernel_rem_pio2+0x55a>
 8003b4a:	9c06      	ldr	r4, [sp, #24]
 8003b4c:	9d03      	ldr	r5, [sp, #12]
 8003b4e:	3408      	adds	r4, #8
 8003b50:	442c      	add	r4, r5
 8003b52:	2000      	movs	r0, #0
 8003b54:	2100      	movs	r1, #0
 8003b56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003b5a:	f7fc fb1b 	bl	8000194 <__adddf3>
 8003b5e:	42ac      	cmp	r4, r5
 8003b60:	d1f9      	bne.n	8003b56 <__kernel_rem_pio2+0x53e>
 8003b62:	9b04      	ldr	r3, [sp, #16]
 8003b64:	b113      	cbz	r3, 8003b6c <__kernel_rem_pio2+0x554>
 8003b66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b6e:	e9c3 0100 	strd	r0, r1, [r3]
 8003b72:	9b07      	ldr	r3, [sp, #28]
 8003b74:	f003 0007 	and.w	r0, r3, #7
 8003b78:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b80:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d1f5      	bne.n	8003b72 <__kernel_rem_pio2+0x55a>
 8003b86:	f1ba 0f00 	cmp.w	sl, #0
 8003b8a:	f000 8167 	beq.w	8003e5c <__kernel_rem_pio2+0x844>
 8003b8e:	9a03      	ldr	r2, [sp, #12]
 8003b90:	9b06      	ldr	r3, [sp, #24]
 8003b92:	18d3      	adds	r3, r2, r3
 8003b94:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b98:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 8003b9c:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	4632      	mov	r2, r6
 8003ba6:	463b      	mov	r3, r7
 8003ba8:	f7fc faf4 	bl	8000194 <__adddf3>
 8003bac:	46a0      	mov	r8, r4
 8003bae:	46a9      	mov	r9, r5
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	460d      	mov	r5, r1
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	462b      	mov	r3, r5
 8003bb8:	4630      	mov	r0, r6
 8003bba:	4639      	mov	r1, r7
 8003bbc:	f7fc fae8 	bl	8000190 <__aeabi_dsub>
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	4642      	mov	r2, r8
 8003bc4:	f7fc fae6 	bl	8000194 <__adddf3>
 8003bc8:	9b03      	ldr	r3, [sp, #12]
 8003bca:	455b      	cmp	r3, fp
 8003bcc:	e9cb 0102 	strd	r0, r1, [fp, #8]
 8003bd0:	e9cb 4500 	strd	r4, r5, [fp]
 8003bd4:	d1e2      	bne.n	8003b9c <__kernel_rem_pio2+0x584>
 8003bd6:	f1ba 0f01 	cmp.w	sl, #1
 8003bda:	f340 813f 	ble.w	8003e5c <__kernel_rem_pio2+0x844>
 8003bde:	9a03      	ldr	r2, [sp, #12]
 8003be0:	9b06      	ldr	r3, [sp, #24]
 8003be2:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
 8003be6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003bea:	4413      	add	r3, r2
 8003bec:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 8003bf0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003bf4:	f101 0a08 	add.w	sl, r1, #8
 8003bf8:	9101      	str	r1, [sp, #4]
 8003bfa:	4492      	add	sl, r2
 8003bfc:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 8003c00:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 8003c04:	4620      	mov	r0, r4
 8003c06:	4629      	mov	r1, r5
 8003c08:	4632      	mov	r2, r6
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	f7fc fac2 	bl	8000194 <__adddf3>
 8003c10:	46a0      	mov	r8, r4
 8003c12:	46a9      	mov	r9, r5
 8003c14:	4604      	mov	r4, r0
 8003c16:	460d      	mov	r5, r1
 8003c18:	4622      	mov	r2, r4
 8003c1a:	462b      	mov	r3, r5
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	4639      	mov	r1, r7
 8003c20:	f7fc fab6 	bl	8000190 <__aeabi_dsub>
 8003c24:	4642      	mov	r2, r8
 8003c26:	464b      	mov	r3, r9
 8003c28:	f7fc fab4 	bl	8000194 <__adddf3>
 8003c2c:	45d3      	cmp	fp, sl
 8003c2e:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003c32:	e9ca 4500 	strd	r4, r5, [sl]
 8003c36:	d1e3      	bne.n	8003c00 <__kernel_rem_pio2+0x5e8>
 8003c38:	9c01      	ldr	r4, [sp, #4]
 8003c3a:	9b03      	ldr	r3, [sp, #12]
 8003c3c:	3410      	adds	r4, #16
 8003c3e:	441c      	add	r4, r3
 8003c40:	f103 0510 	add.w	r5, r3, #16
 8003c44:	2000      	movs	r0, #0
 8003c46:	2100      	movs	r1, #0
 8003c48:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003c4c:	f7fc faa2 	bl	8000194 <__adddf3>
 8003c50:	42a5      	cmp	r5, r4
 8003c52:	d1f9      	bne.n	8003c48 <__kernel_rem_pio2+0x630>
 8003c54:	9b03      	ldr	r3, [sp, #12]
 8003c56:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003c5a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003c5e:	9b04      	ldr	r3, [sp, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f040 80b9 	bne.w	8003dd8 <__kernel_rem_pio2+0x7c0>
 8003c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003c6c:	e9c3 6700 	strd	r6, r7, [r3]
 8003c70:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8003c74:	9b07      	ldr	r3, [sp, #28]
 8003c76:	f003 0007 	and.w	r0, r3, #7
 8003c7a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c82:	9b01      	ldr	r3, [sp, #4]
 8003c84:	1e5a      	subs	r2, r3, #1
 8003c86:	ab0c      	add	r3, sp, #48	; 0x30
 8003c88:	a90c      	add	r1, sp, #48	; 0x30
 8003c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003c92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003c96:	e698      	b.n	80039ca <__kernel_rem_pio2+0x3b2>
 8003c98:	00000000 	.word	0x00000000
 8003c9c:	3ff00000 	.word	0x3ff00000
 8003ca0:	40000000 	.word	0x40000000
 8003ca4:	3ff921fb 	.word	0x3ff921fb
 8003ca8:	3ff00000 	.word	0x3ff00000
 8003cac:	3fe00000 	.word	0x3fe00000
 8003cb0:	3e700000 	.word	0x3e700000
 8003cb4:	0800a510 	.word	0x0800a510
 8003cb8:	9b01      	ldr	r3, [sp, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f108 0801 	add.w	r8, r8, #1
 8003cc0:	bfc8      	it	gt
 8003cc2:	2502      	movgt	r5, #2
 8003cc4:	f73f ae40 	bgt.w	8003948 <__kernel_rem_pio2+0x330>
 8003cc8:	4632      	mov	r2, r6
 8003cca:	463b      	mov	r3, r7
 8003ccc:	4965      	ldr	r1, [pc, #404]	; (8003e64 <__kernel_rem_pio2+0x84c>)
 8003cce:	2000      	movs	r0, #0
 8003cd0:	f7fc fa5e 	bl	8000190 <__aeabi_dsub>
 8003cd4:	2502      	movs	r5, #2
 8003cd6:	4606      	mov	r6, r0
 8003cd8:	460f      	mov	r7, r1
 8003cda:	e5a1      	b.n	8003820 <__kernel_rem_pio2+0x208>
 8003cdc:	2100      	movs	r1, #0
 8003cde:	f06f 0317 	mvn.w	r3, #23
 8003ce2:	9107      	str	r1, [sp, #28]
 8003ce4:	e4b7      	b.n	8003656 <__kernel_rem_pio2+0x3e>
 8003ce6:	2400      	movs	r4, #0
 8003ce8:	2500      	movs	r5, #0
 8003cea:	e717      	b.n	8003b1c <__kernel_rem_pio2+0x504>
 8003cec:	2400      	movs	r4, #0
 8003cee:	e65a      	b.n	80039a6 <__kernel_rem_pio2+0x38e>
 8003cf0:	ec47 6b10 	vmov	d0, r6, r7
 8003cf4:	9e06      	ldr	r6, [sp, #24]
 8003cf6:	9504      	str	r5, [sp, #16]
 8003cf8:	4270      	negs	r0, r6
 8003cfa:	f8cd 801c 	str.w	r8, [sp, #28]
 8003cfe:	f000 fb9b 	bl	8004438 <scalbn>
 8003d02:	ec55 4b10 	vmov	r4, r5, d0
 8003d06:	4b58      	ldr	r3, [pc, #352]	; (8003e68 <__kernel_rem_pio2+0x850>)
 8003d08:	ee10 0a10 	vmov	r0, s0
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	4629      	mov	r1, r5
 8003d10:	f7fd f852 	bl	8000db8 <__aeabi_dcmpge>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d055      	beq.n	8003dc4 <__kernel_rem_pio2+0x7ac>
 8003d18:	4b54      	ldr	r3, [pc, #336]	; (8003e6c <__kernel_rem_pio2+0x854>)
 8003d1a:	9f01      	ldr	r7, [sp, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	3618      	adds	r6, #24
 8003d20:	4620      	mov	r0, r4
 8003d22:	4629      	mov	r1, r5
 8003d24:	9606      	str	r6, [sp, #24]
 8003d26:	f7fc fbeb 	bl	8000500 <__aeabi_dmul>
 8003d2a:	f7fd f86f 	bl	8000e0c <__aeabi_d2iz>
 8003d2e:	4606      	mov	r6, r0
 8003d30:	f7fc fb7c 	bl	800042c <__aeabi_i2d>
 8003d34:	4b4c      	ldr	r3, [pc, #304]	; (8003e68 <__kernel_rem_pio2+0x850>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	f7fc fbe2 	bl	8000500 <__aeabi_dmul>
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4629      	mov	r1, r5
 8003d42:	4620      	mov	r0, r4
 8003d44:	f7fc fa24 	bl	8000190 <__aeabi_dsub>
 8003d48:	f7fd f860 	bl	8000e0c <__aeabi_d2iz>
 8003d4c:	f107 0a01 	add.w	sl, r7, #1
 8003d50:	ab0c      	add	r3, sp, #48	; 0x30
 8003d52:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003d56:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 8003d5a:	e680      	b.n	8003a5e <__kernel_rem_pio2+0x446>
 8003d5c:	9d03      	ldr	r5, [sp, #12]
 8003d5e:	9a08      	ldr	r2, [sp, #32]
 8003d60:	2000      	movs	r0, #0
 8003d62:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 8003d66:	2100      	movs	r1, #0
 8003d68:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003d6c:	f7fc fa12 	bl	8000194 <__adddf3>
 8003d70:	42a5      	cmp	r5, r4
 8003d72:	d1f9      	bne.n	8003d68 <__kernel_rem_pio2+0x750>
 8003d74:	9b04      	ldr	r3, [sp, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d144      	bne.n	8003e04 <__kernel_rem_pio2+0x7ec>
 8003d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d7c:	e9c3 0100 	strd	r0, r1, [r3]
 8003d80:	460b      	mov	r3, r1
 8003d82:	9903      	ldr	r1, [sp, #12]
 8003d84:	4602      	mov	r2, r0
 8003d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d8a:	f7fc fa01 	bl	8000190 <__aeabi_dsub>
 8003d8e:	f1ba 0f00 	cmp.w	sl, #0
 8003d92:	dd0d      	ble.n	8003db0 <__kernel_rem_pio2+0x798>
 8003d94:	ad4a      	add	r5, sp, #296	; 0x128
 8003d96:	2401      	movs	r4, #1
 8003d98:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8003d9c:	3401      	adds	r4, #1
 8003d9e:	f7fc f9f9 	bl	8000194 <__adddf3>
 8003da2:	45a2      	cmp	sl, r4
 8003da4:	daf8      	bge.n	8003d98 <__kernel_rem_pio2+0x780>
 8003da6:	9b04      	ldr	r3, [sp, #16]
 8003da8:	b113      	cbz	r3, 8003db0 <__kernel_rem_pio2+0x798>
 8003daa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003dae:	4619      	mov	r1, r3
 8003db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003db2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003db6:	9b07      	ldr	r3, [sp, #28]
 8003db8:	f003 0007 	and.w	r0, r3, #7
 8003dbc:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	f7fd f820 	bl	8000e0c <__aeabi_d2iz>
 8003dcc:	9b01      	ldr	r3, [sp, #4]
 8003dce:	aa0c      	add	r2, sp, #48	; 0x30
 8003dd0:	469a      	mov	sl, r3
 8003dd2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8003dd6:	e642      	b.n	8003a5e <__kernel_rem_pio2+0x446>
 8003dd8:	4632      	mov	r2, r6
 8003dda:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003ddc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8003de0:	e9c6 2300 	strd	r2, r3, [r6]
 8003de4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003de8:	60f3      	str	r3, [r6, #12]
 8003dea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003dee:	6173      	str	r3, [r6, #20]
 8003df0:	9b07      	ldr	r3, [sp, #28]
 8003df2:	6130      	str	r0, [r6, #16]
 8003df4:	4622      	mov	r2, r4
 8003df6:	f003 0007 	and.w	r0, r3, #7
 8003dfa:	60b2      	str	r2, [r6, #8]
 8003dfc:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e0a:	6053      	str	r3, [r2, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	9903      	ldr	r1, [sp, #12]
 8003e10:	6010      	str	r0, [r2, #0]
 8003e12:	4602      	mov	r2, r0
 8003e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e18:	f7fc f9ba 	bl	8000190 <__aeabi_dsub>
 8003e1c:	f1ba 0f00 	cmp.w	sl, #0
 8003e20:	dcb8      	bgt.n	8003d94 <__kernel_rem_pio2+0x77c>
 8003e22:	e7c2      	b.n	8003daa <__kernel_rem_pio2+0x792>
 8003e24:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	dc0a      	bgt.n	8003e40 <__kernel_rem_pio2+0x828>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	dc11      	bgt.n	8003e52 <__kernel_rem_pio2+0x83a>
 8003e2e:	f47f aea0 	bne.w	8003b72 <__kernel_rem_pio2+0x55a>
 8003e32:	2000      	movs	r0, #0
 8003e34:	2100      	movs	r1, #0
 8003e36:	e694      	b.n	8003b62 <__kernel_rem_pio2+0x54a>
 8003e38:	9b08      	ldr	r3, [sp, #32]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	9302      	str	r3, [sp, #8]
 8003e3e:	e462      	b.n	8003706 <__kernel_rem_pio2+0xee>
 8003e40:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	f47f ae95 	bne.w	8003b72 <__kernel_rem_pio2+0x55a>
 8003e48:	ab48      	add	r3, sp, #288	; 0x120
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	9303      	str	r3, [sp, #12]
 8003e50:	e700      	b.n	8003c54 <__kernel_rem_pio2+0x63c>
 8003e52:	ab48      	add	r3, sp, #288	; 0x120
 8003e54:	2000      	movs	r0, #0
 8003e56:	2100      	movs	r1, #0
 8003e58:	9303      	str	r3, [sp, #12]
 8003e5a:	e78b      	b.n	8003d74 <__kernel_rem_pio2+0x75c>
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	2100      	movs	r1, #0
 8003e60:	e6f8      	b.n	8003c54 <__kernel_rem_pio2+0x63c>
 8003e62:	bf00      	nop
 8003e64:	3ff00000 	.word	0x3ff00000
 8003e68:	41700000 	.word	0x41700000
 8003e6c:	3e700000 	.word	0x3e700000

08003e70 <__kernel_sin>:
 8003e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e74:	ec55 4b10 	vmov	r4, r5, d0
 8003e78:	b085      	sub	sp, #20
 8003e7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003e7e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003e82:	ed8d 1b00 	vstr	d1, [sp]
 8003e86:	9003      	str	r0, [sp, #12]
 8003e88:	da07      	bge.n	8003e9a <__kernel_sin+0x2a>
 8003e8a:	ee10 0a10 	vmov	r0, s0
 8003e8e:	4629      	mov	r1, r5
 8003e90:	f7fc ffbc 	bl	8000e0c <__aeabi_d2iz>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	f000 8089 	beq.w	8003fac <__kernel_sin+0x13c>
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	462b      	mov	r3, r5
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	f7fc fb2d 	bl	8000500 <__aeabi_dmul>
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	460f      	mov	r7, r1
 8003eaa:	4632      	mov	r2, r6
 8003eac:	463b      	mov	r3, r7
 8003eae:	4620      	mov	r0, r4
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	f7fc fb25 	bl	8000500 <__aeabi_dmul>
 8003eb6:	a343      	add	r3, pc, #268	; (adr r3, 8003fc4 <__kernel_sin+0x154>)
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	4682      	mov	sl, r0
 8003ebe:	468b      	mov	fp, r1
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	f7fc fb1c 	bl	8000500 <__aeabi_dmul>
 8003ec8:	a340      	add	r3, pc, #256	; (adr r3, 8003fcc <__kernel_sin+0x15c>)
 8003eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ece:	f7fc f95f 	bl	8000190 <__aeabi_dsub>
 8003ed2:	4632      	mov	r2, r6
 8003ed4:	463b      	mov	r3, r7
 8003ed6:	f7fc fb13 	bl	8000500 <__aeabi_dmul>
 8003eda:	a33e      	add	r3, pc, #248	; (adr r3, 8003fd4 <__kernel_sin+0x164>)
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f7fc f958 	bl	8000194 <__adddf3>
 8003ee4:	4632      	mov	r2, r6
 8003ee6:	463b      	mov	r3, r7
 8003ee8:	f7fc fb0a 	bl	8000500 <__aeabi_dmul>
 8003eec:	a33b      	add	r3, pc, #236	; (adr r3, 8003fdc <__kernel_sin+0x16c>)
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	f7fc f94d 	bl	8000190 <__aeabi_dsub>
 8003ef6:	4632      	mov	r2, r6
 8003ef8:	463b      	mov	r3, r7
 8003efa:	f7fc fb01 	bl	8000500 <__aeabi_dmul>
 8003efe:	a339      	add	r3, pc, #228	; (adr r3, 8003fe4 <__kernel_sin+0x174>)
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	f7fc f946 	bl	8000194 <__adddf3>
 8003f08:	9b03      	ldr	r3, [sp, #12]
 8003f0a:	4680      	mov	r8, r0
 8003f0c:	4689      	mov	r9, r1
 8003f0e:	b3ab      	cbz	r3, 8003f7c <__kernel_sin+0x10c>
 8003f10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f14:	4b2a      	ldr	r3, [pc, #168]	; (8003fc0 <__kernel_sin+0x150>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	f7fc faf2 	bl	8000500 <__aeabi_dmul>
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	464b      	mov	r3, r9
 8003f20:	4680      	mov	r8, r0
 8003f22:	4689      	mov	r9, r1
 8003f24:	4650      	mov	r0, sl
 8003f26:	4659      	mov	r1, fp
 8003f28:	f7fc faea 	bl	8000500 <__aeabi_dmul>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4640      	mov	r0, r8
 8003f32:	4649      	mov	r1, r9
 8003f34:	f7fc f92c 	bl	8000190 <__aeabi_dsub>
 8003f38:	4632      	mov	r2, r6
 8003f3a:	463b      	mov	r3, r7
 8003f3c:	f7fc fae0 	bl	8000500 <__aeabi_dmul>
 8003f40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f44:	f7fc f924 	bl	8000190 <__aeabi_dsub>
 8003f48:	a31b      	add	r3, pc, #108	; (adr r3, 8003fb8 <__kernel_sin+0x148>)
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	4606      	mov	r6, r0
 8003f50:	460f      	mov	r7, r1
 8003f52:	4650      	mov	r0, sl
 8003f54:	4659      	mov	r1, fp
 8003f56:	f7fc fad3 	bl	8000500 <__aeabi_dmul>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4630      	mov	r0, r6
 8003f60:	4639      	mov	r1, r7
 8003f62:	f7fc f917 	bl	8000194 <__adddf3>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7fc f90f 	bl	8000190 <__aeabi_dsub>
 8003f72:	ec41 0b10 	vmov	d0, r0, r1
 8003f76:	b005      	add	sp, #20
 8003f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4630      	mov	r0, r6
 8003f82:	4639      	mov	r1, r7
 8003f84:	f7fc fabc 	bl	8000500 <__aeabi_dmul>
 8003f88:	a30b      	add	r3, pc, #44	; (adr r3, 8003fb8 <__kernel_sin+0x148>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc f8ff 	bl	8000190 <__aeabi_dsub>
 8003f92:	4652      	mov	r2, sl
 8003f94:	465b      	mov	r3, fp
 8003f96:	f7fc fab3 	bl	8000500 <__aeabi_dmul>
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	f7fc f8f9 	bl	8000194 <__adddf3>
 8003fa2:	ec41 0b10 	vmov	d0, r0, r1
 8003fa6:	b005      	add	sp, #20
 8003fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fac:	ec45 4b10 	vmov	d0, r4, r5
 8003fb0:	b005      	add	sp, #20
 8003fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb6:	bf00      	nop
 8003fb8:	55555549 	.word	0x55555549
 8003fbc:	3fc55555 	.word	0x3fc55555
 8003fc0:	3fe00000 	.word	0x3fe00000
 8003fc4:	5acfd57c 	.word	0x5acfd57c
 8003fc8:	3de5d93a 	.word	0x3de5d93a
 8003fcc:	8a2b9ceb 	.word	0x8a2b9ceb
 8003fd0:	3e5ae5e6 	.word	0x3e5ae5e6
 8003fd4:	57b1fe7d 	.word	0x57b1fe7d
 8003fd8:	3ec71de3 	.word	0x3ec71de3
 8003fdc:	19c161d5 	.word	0x19c161d5
 8003fe0:	3f2a01a0 	.word	0x3f2a01a0
 8003fe4:	1110f8a6 	.word	0x1110f8a6
 8003fe8:	3f811111 	.word	0x3f811111
 8003fec:	00000000 	.word	0x00000000

08003ff0 <atan>:
 8003ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff4:	ec55 4b10 	vmov	r4, r5, d0
 8003ff8:	4bbf      	ldr	r3, [pc, #764]	; (80042f8 <atan+0x308>)
 8003ffa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003ffe:	429e      	cmp	r6, r3
 8004000:	46aa      	mov	sl, r5
 8004002:	dd17      	ble.n	8004034 <atan+0x44>
 8004004:	4bbd      	ldr	r3, [pc, #756]	; (80042fc <atan+0x30c>)
 8004006:	429e      	cmp	r6, r3
 8004008:	dc0a      	bgt.n	8004020 <atan+0x30>
 800400a:	d007      	beq.n	800401c <atan+0x2c>
 800400c:	f1ba 0f00 	cmp.w	sl, #0
 8004010:	f340 80cc 	ble.w	80041ac <atan+0x1bc>
 8004014:	ed9f 0b9c 	vldr	d0, [pc, #624]	; 8004288 <atan+0x298>
 8004018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401c:	2c00      	cmp	r4, #0
 800401e:	d0f5      	beq.n	800400c <atan+0x1c>
 8004020:	4622      	mov	r2, r4
 8004022:	462b      	mov	r3, r5
 8004024:	4620      	mov	r0, r4
 8004026:	4629      	mov	r1, r5
 8004028:	f7fc f8b4 	bl	8000194 <__adddf3>
 800402c:	ec41 0b10 	vmov	d0, r0, r1
 8004030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004034:	4bb2      	ldr	r3, [pc, #712]	; (8004300 <atan+0x310>)
 8004036:	429e      	cmp	r6, r3
 8004038:	f300 80bc 	bgt.w	80041b4 <atan+0x1c4>
 800403c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004040:	429e      	cmp	r6, r3
 8004042:	f340 80a1 	ble.w	8004188 <atan+0x198>
 8004046:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800404a:	4622      	mov	r2, r4
 800404c:	462b      	mov	r3, r5
 800404e:	4620      	mov	r0, r4
 8004050:	4629      	mov	r1, r5
 8004052:	f7fc fa55 	bl	8000500 <__aeabi_dmul>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4680      	mov	r8, r0
 800405c:	4689      	mov	r9, r1
 800405e:	f7fc fa4f 	bl	8000500 <__aeabi_dmul>
 8004062:	a38b      	add	r3, pc, #556	; (adr r3, 8004290 <atan+0x2a0>)
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	4606      	mov	r6, r0
 800406a:	460f      	mov	r7, r1
 800406c:	f7fc fa48 	bl	8000500 <__aeabi_dmul>
 8004070:	a389      	add	r3, pc, #548	; (adr r3, 8004298 <atan+0x2a8>)
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	f7fc f88d 	bl	8000194 <__adddf3>
 800407a:	4632      	mov	r2, r6
 800407c:	463b      	mov	r3, r7
 800407e:	f7fc fa3f 	bl	8000500 <__aeabi_dmul>
 8004082:	a387      	add	r3, pc, #540	; (adr r3, 80042a0 <atan+0x2b0>)
 8004084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004088:	f7fc f884 	bl	8000194 <__adddf3>
 800408c:	4632      	mov	r2, r6
 800408e:	463b      	mov	r3, r7
 8004090:	f7fc fa36 	bl	8000500 <__aeabi_dmul>
 8004094:	a384      	add	r3, pc, #528	; (adr r3, 80042a8 <atan+0x2b8>)
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	f7fc f87b 	bl	8000194 <__adddf3>
 800409e:	4632      	mov	r2, r6
 80040a0:	463b      	mov	r3, r7
 80040a2:	f7fc fa2d 	bl	8000500 <__aeabi_dmul>
 80040a6:	a382      	add	r3, pc, #520	; (adr r3, 80042b0 <atan+0x2c0>)
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f7fc f872 	bl	8000194 <__adddf3>
 80040b0:	4632      	mov	r2, r6
 80040b2:	463b      	mov	r3, r7
 80040b4:	f7fc fa24 	bl	8000500 <__aeabi_dmul>
 80040b8:	a37f      	add	r3, pc, #508	; (adr r3, 80042b8 <atan+0x2c8>)
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	f7fc f869 	bl	8000194 <__adddf3>
 80040c2:	4642      	mov	r2, r8
 80040c4:	464b      	mov	r3, r9
 80040c6:	f7fc fa1b 	bl	8000500 <__aeabi_dmul>
 80040ca:	a37d      	add	r3, pc, #500	; (adr r3, 80042c0 <atan+0x2d0>)
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	4680      	mov	r8, r0
 80040d2:	4689      	mov	r9, r1
 80040d4:	4630      	mov	r0, r6
 80040d6:	4639      	mov	r1, r7
 80040d8:	f7fc fa12 	bl	8000500 <__aeabi_dmul>
 80040dc:	a37a      	add	r3, pc, #488	; (adr r3, 80042c8 <atan+0x2d8>)
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	f7fc f855 	bl	8000190 <__aeabi_dsub>
 80040e6:	4632      	mov	r2, r6
 80040e8:	463b      	mov	r3, r7
 80040ea:	f7fc fa09 	bl	8000500 <__aeabi_dmul>
 80040ee:	a378      	add	r3, pc, #480	; (adr r3, 80042d0 <atan+0x2e0>)
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f7fc f84c 	bl	8000190 <__aeabi_dsub>
 80040f8:	4632      	mov	r2, r6
 80040fa:	463b      	mov	r3, r7
 80040fc:	f7fc fa00 	bl	8000500 <__aeabi_dmul>
 8004100:	a375      	add	r3, pc, #468	; (adr r3, 80042d8 <atan+0x2e8>)
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f7fc f843 	bl	8000190 <__aeabi_dsub>
 800410a:	4632      	mov	r2, r6
 800410c:	463b      	mov	r3, r7
 800410e:	f7fc f9f7 	bl	8000500 <__aeabi_dmul>
 8004112:	a373      	add	r3, pc, #460	; (adr r3, 80042e0 <atan+0x2f0>)
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f7fc f83a 	bl	8000190 <__aeabi_dsub>
 800411c:	4632      	mov	r2, r6
 800411e:	463b      	mov	r3, r7
 8004120:	f7fc f9ee 	bl	8000500 <__aeabi_dmul>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4640      	mov	r0, r8
 800412a:	4649      	mov	r1, r9
 800412c:	f7fc f832 	bl	8000194 <__adddf3>
 8004130:	4622      	mov	r2, r4
 8004132:	462b      	mov	r3, r5
 8004134:	f7fc f9e4 	bl	8000500 <__aeabi_dmul>
 8004138:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	d05b      	beq.n	80041fa <atan+0x20a>
 8004142:	4a70      	ldr	r2, [pc, #448]	; (8004304 <atan+0x314>)
 8004144:	4b70      	ldr	r3, [pc, #448]	; (8004308 <atan+0x318>)
 8004146:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800414a:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
 800414e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004152:	f7fc f81d 	bl	8000190 <__aeabi_dsub>
 8004156:	4622      	mov	r2, r4
 8004158:	462b      	mov	r3, r5
 800415a:	f7fc f819 	bl	8000190 <__aeabi_dsub>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	e9db 0100 	ldrd	r0, r1, [fp]
 8004166:	f7fc f813 	bl	8000190 <__aeabi_dsub>
 800416a:	f1ba 0f00 	cmp.w	sl, #0
 800416e:	ec41 0b10 	vmov	d0, r0, r1
 8004172:	f6bf af5d 	bge.w	8004030 <atan+0x40>
 8004176:	ee10 1a90 	vmov	r1, s1
 800417a:	4602      	mov	r2, r0
 800417c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004180:	ec43 2b10 	vmov	d0, r2, r3
 8004184:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004188:	a357      	add	r3, pc, #348	; (adr r3, 80042e8 <atan+0x2f8>)
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	ee10 0a10 	vmov	r0, s0
 8004192:	4629      	mov	r1, r5
 8004194:	f7fb fffe 	bl	8000194 <__adddf3>
 8004198:	4b5c      	ldr	r3, [pc, #368]	; (800430c <atan+0x31c>)
 800419a:	2200      	movs	r2, #0
 800419c:	f7fc fe16 	bl	8000dcc <__aeabi_dcmpgt>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	f43f af50 	beq.w	8004046 <atan+0x56>
 80041a6:	ec45 4b10 	vmov	d0, r4, r5
 80041aa:	e741      	b.n	8004030 <atan+0x40>
 80041ac:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80042f0 <atan+0x300>
 80041b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b4:	f004 f8fa 	bl	80083ac <fabs>
 80041b8:	4b55      	ldr	r3, [pc, #340]	; (8004310 <atan+0x320>)
 80041ba:	429e      	cmp	r6, r3
 80041bc:	ec55 4b10 	vmov	r4, r5, d0
 80041c0:	dc23      	bgt.n	800420a <atan+0x21a>
 80041c2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80041c6:	429e      	cmp	r6, r3
 80041c8:	dc4e      	bgt.n	8004268 <atan+0x278>
 80041ca:	ee10 2a10 	vmov	r2, s0
 80041ce:	462b      	mov	r3, r5
 80041d0:	ee10 0a10 	vmov	r0, s0
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fb ffdd 	bl	8000194 <__adddf3>
 80041da:	4b4c      	ldr	r3, [pc, #304]	; (800430c <atan+0x31c>)
 80041dc:	2200      	movs	r2, #0
 80041de:	f7fb ffd7 	bl	8000190 <__aeabi_dsub>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	4614      	mov	r4, r2
 80041ec:	461d      	mov	r5, r3
 80041ee:	f04f 0b00 	mov.w	fp, #0
 80041f2:	2200      	movs	r2, #0
 80041f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041f8:	e01f      	b.n	800423a <atan+0x24a>
 80041fa:	4620      	mov	r0, r4
 80041fc:	4629      	mov	r1, r5
 80041fe:	f7fb ffc7 	bl	8000190 <__aeabi_dsub>
 8004202:	ec41 0b10 	vmov	d0, r0, r1
 8004206:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800420a:	4b42      	ldr	r3, [pc, #264]	; (8004314 <atan+0x324>)
 800420c:	429e      	cmp	r6, r3
 800420e:	da1f      	bge.n	8004250 <atan+0x260>
 8004210:	4b41      	ldr	r3, [pc, #260]	; (8004318 <atan+0x328>)
 8004212:	2200      	movs	r2, #0
 8004214:	4629      	mov	r1, r5
 8004216:	ee10 0a10 	vmov	r0, s0
 800421a:	f7fb ffb9 	bl	8000190 <__aeabi_dsub>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4620      	mov	r0, r4
 8004224:	4629      	mov	r1, r5
 8004226:	4614      	mov	r4, r2
 8004228:	461d      	mov	r5, r3
 800422a:	2200      	movs	r2, #0
 800422c:	4b3a      	ldr	r3, [pc, #232]	; (8004318 <atan+0x328>)
 800422e:	f04f 0b02 	mov.w	fp, #2
 8004232:	f7fc f965 	bl	8000500 <__aeabi_dmul>
 8004236:	4b35      	ldr	r3, [pc, #212]	; (800430c <atan+0x31c>)
 8004238:	2200      	movs	r2, #0
 800423a:	f7fb ffab 	bl	8000194 <__adddf3>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4620      	mov	r0, r4
 8004244:	4629      	mov	r1, r5
 8004246:	f7fc fa85 	bl	8000754 <__aeabi_ddiv>
 800424a:	4604      	mov	r4, r0
 800424c:	460d      	mov	r5, r1
 800424e:	e6fc      	b.n	800404a <atan+0x5a>
 8004250:	462b      	mov	r3, r5
 8004252:	4932      	ldr	r1, [pc, #200]	; (800431c <atan+0x32c>)
 8004254:	ee10 2a10 	vmov	r2, s0
 8004258:	2000      	movs	r0, #0
 800425a:	f7fc fa7b 	bl	8000754 <__aeabi_ddiv>
 800425e:	f04f 0b03 	mov.w	fp, #3
 8004262:	4604      	mov	r4, r0
 8004264:	460d      	mov	r5, r1
 8004266:	e6f0      	b.n	800404a <atan+0x5a>
 8004268:	4b28      	ldr	r3, [pc, #160]	; (800430c <atan+0x31c>)
 800426a:	2200      	movs	r2, #0
 800426c:	4629      	mov	r1, r5
 800426e:	ee10 0a10 	vmov	r0, s0
 8004272:	f7fb ff8d 	bl	8000190 <__aeabi_dsub>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4620      	mov	r0, r4
 800427c:	4629      	mov	r1, r5
 800427e:	f04f 0b01 	mov.w	fp, #1
 8004282:	4614      	mov	r4, r2
 8004284:	461d      	mov	r5, r3
 8004286:	e7d6      	b.n	8004236 <atan+0x246>
 8004288:	54442d18 	.word	0x54442d18
 800428c:	3ff921fb 	.word	0x3ff921fb
 8004290:	e322da11 	.word	0xe322da11
 8004294:	3f90ad3a 	.word	0x3f90ad3a
 8004298:	24760deb 	.word	0x24760deb
 800429c:	3fa97b4b 	.word	0x3fa97b4b
 80042a0:	a0d03d51 	.word	0xa0d03d51
 80042a4:	3fb10d66 	.word	0x3fb10d66
 80042a8:	c54c206e 	.word	0xc54c206e
 80042ac:	3fb745cd 	.word	0x3fb745cd
 80042b0:	920083ff 	.word	0x920083ff
 80042b4:	3fc24924 	.word	0x3fc24924
 80042b8:	5555550d 	.word	0x5555550d
 80042bc:	3fd55555 	.word	0x3fd55555
 80042c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80042c4:	bfa2b444 	.word	0xbfa2b444
 80042c8:	52defd9a 	.word	0x52defd9a
 80042cc:	3fadde2d 	.word	0x3fadde2d
 80042d0:	af749a6d 	.word	0xaf749a6d
 80042d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80042d8:	fe231671 	.word	0xfe231671
 80042dc:	3fbc71c6 	.word	0x3fbc71c6
 80042e0:	9998ebc4 	.word	0x9998ebc4
 80042e4:	3fc99999 	.word	0x3fc99999
 80042e8:	8800759c 	.word	0x8800759c
 80042ec:	7e37e43c 	.word	0x7e37e43c
 80042f0:	54442d18 	.word	0x54442d18
 80042f4:	bff921fb 	.word	0xbff921fb
 80042f8:	440fffff 	.word	0x440fffff
 80042fc:	7ff00000 	.word	0x7ff00000
 8004300:	3fdbffff 	.word	0x3fdbffff
 8004304:	0800a568 	.word	0x0800a568
 8004308:	0800a548 	.word	0x0800a548
 800430c:	3ff00000 	.word	0x3ff00000
 8004310:	3ff2ffff 	.word	0x3ff2ffff
 8004314:	40038000 	.word	0x40038000
 8004318:	3ff80000 	.word	0x3ff80000
 800431c:	bff00000 	.word	0xbff00000

08004320 <floor>:
 8004320:	ec51 0b10 	vmov	r0, r1, d0
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800432a:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 800432e:	2d13      	cmp	r5, #19
 8004330:	ee10 6a10 	vmov	r6, s0
 8004334:	460c      	mov	r4, r1
 8004336:	dc30      	bgt.n	800439a <floor+0x7a>
 8004338:	2d00      	cmp	r5, #0
 800433a:	db1e      	blt.n	800437a <floor+0x5a>
 800433c:	4f38      	ldr	r7, [pc, #224]	; (8004420 <floor+0x100>)
 800433e:	412f      	asrs	r7, r5
 8004340:	ea01 0307 	and.w	r3, r1, r7
 8004344:	4303      	orrs	r3, r0
 8004346:	d02d      	beq.n	80043a4 <floor+0x84>
 8004348:	a333      	add	r3, pc, #204	; (adr r3, 8004418 <floor+0xf8>)
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f7fb ff21 	bl	8000194 <__adddf3>
 8004352:	2200      	movs	r2, #0
 8004354:	2300      	movs	r3, #0
 8004356:	f7fc fd39 	bl	8000dcc <__aeabi_dcmpgt>
 800435a:	b148      	cbz	r0, 8004370 <floor+0x50>
 800435c:	2c00      	cmp	r4, #0
 800435e:	da04      	bge.n	800436a <floor+0x4a>
 8004360:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004364:	fa43 f505 	asr.w	r5, r3, r5
 8004368:	442c      	add	r4, r5
 800436a:	ea24 0407 	bic.w	r4, r4, r7
 800436e:	2600      	movs	r6, #0
 8004370:	4623      	mov	r3, r4
 8004372:	4632      	mov	r2, r6
 8004374:	ec43 2b10 	vmov	d0, r2, r3
 8004378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800437a:	a327      	add	r3, pc, #156	; (adr r3, 8004418 <floor+0xf8>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f7fb ff08 	bl	8000194 <__adddf3>
 8004384:	2200      	movs	r2, #0
 8004386:	2300      	movs	r3, #0
 8004388:	f7fc fd20 	bl	8000dcc <__aeabi_dcmpgt>
 800438c:	2800      	cmp	r0, #0
 800438e:	d0ef      	beq.n	8004370 <floor+0x50>
 8004390:	2c00      	cmp	r4, #0
 8004392:	db29      	blt.n	80043e8 <floor+0xc8>
 8004394:	2600      	movs	r6, #0
 8004396:	4634      	mov	r4, r6
 8004398:	e7ea      	b.n	8004370 <floor+0x50>
 800439a:	2d33      	cmp	r5, #51	; 0x33
 800439c:	dd05      	ble.n	80043aa <floor+0x8a>
 800439e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80043a2:	d019      	beq.n	80043d8 <floor+0xb8>
 80043a4:	ec41 0b10 	vmov	d0, r0, r1
 80043a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043aa:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80043ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80043b2:	40df      	lsrs	r7, r3
 80043b4:	4207      	tst	r7, r0
 80043b6:	d0f5      	beq.n	80043a4 <floor+0x84>
 80043b8:	a317      	add	r3, pc, #92	; (adr r3, 8004418 <floor+0xf8>)
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f7fb fee9 	bl	8000194 <__adddf3>
 80043c2:	2200      	movs	r2, #0
 80043c4:	2300      	movs	r3, #0
 80043c6:	f7fc fd01 	bl	8000dcc <__aeabi_dcmpgt>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d0d0      	beq.n	8004370 <floor+0x50>
 80043ce:	2c00      	cmp	r4, #0
 80043d0:	db13      	blt.n	80043fa <floor+0xda>
 80043d2:	ea26 0607 	bic.w	r6, r6, r7
 80043d6:	e7cb      	b.n	8004370 <floor+0x50>
 80043d8:	ee10 2a10 	vmov	r2, s0
 80043dc:	460b      	mov	r3, r1
 80043de:	f7fb fed9 	bl	8000194 <__adddf3>
 80043e2:	ec41 0b10 	vmov	d0, r0, r1
 80043e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80043ec:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <floor+0x104>)
 80043ee:	431e      	orrs	r6, r3
 80043f0:	2e00      	cmp	r6, #0
 80043f2:	bf18      	it	ne
 80043f4:	4614      	movne	r4, r2
 80043f6:	2600      	movs	r6, #0
 80043f8:	e7ba      	b.n	8004370 <floor+0x50>
 80043fa:	2d14      	cmp	r5, #20
 80043fc:	d008      	beq.n	8004410 <floor+0xf0>
 80043fe:	2301      	movs	r3, #1
 8004400:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 8004404:	fa03 f505 	lsl.w	r5, r3, r5
 8004408:	19ae      	adds	r6, r5, r6
 800440a:	bf28      	it	cs
 800440c:	18e4      	addcs	r4, r4, r3
 800440e:	e7e0      	b.n	80043d2 <floor+0xb2>
 8004410:	3401      	adds	r4, #1
 8004412:	e7de      	b.n	80043d2 <floor+0xb2>
 8004414:	f3af 8000 	nop.w
 8004418:	8800759c 	.word	0x8800759c
 800441c:	7e37e43c 	.word	0x7e37e43c
 8004420:	000fffff 	.word	0x000fffff
 8004424:	bff00000 	.word	0xbff00000

08004428 <nan>:
 8004428:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004430 <nan+0x8>
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	00000000 	.word	0x00000000
 8004434:	7ff80000 	.word	0x7ff80000

08004438 <scalbn>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	ec53 2b10 	vmov	r2, r3, d0
 800443e:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8004442:	4604      	mov	r4, r0
 8004444:	469c      	mov	ip, r3
 8004446:	bb89      	cbnz	r1, 80044ac <scalbn+0x74>
 8004448:	ee10 1a10 	vmov	r1, s0
 800444c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8004450:	ea5c 0101 	orrs.w	r1, ip, r1
 8004454:	d029      	beq.n	80044aa <scalbn+0x72>
 8004456:	4619      	mov	r1, r3
 8004458:	2200      	movs	r2, #0
 800445a:	4b3d      	ldr	r3, [pc, #244]	; (8004550 <scalbn+0x118>)
 800445c:	4d3d      	ldr	r5, [pc, #244]	; (8004554 <scalbn+0x11c>)
 800445e:	ee10 0a10 	vmov	r0, s0
 8004462:	f7fc f84d 	bl	8000500 <__aeabi_dmul>
 8004466:	42ac      	cmp	r4, r5
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	db16      	blt.n	800449c <scalbn+0x64>
 800446e:	468c      	mov	ip, r1
 8004470:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004474:	3936      	subs	r1, #54	; 0x36
 8004476:	4421      	add	r1, r4
 8004478:	f240 70fe 	movw	r0, #2046	; 0x7fe
 800447c:	4281      	cmp	r1, r0
 800447e:	dc21      	bgt.n	80044c4 <scalbn+0x8c>
 8004480:	2900      	cmp	r1, #0
 8004482:	dc47      	bgt.n	8004514 <scalbn+0xdc>
 8004484:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004488:	da34      	bge.n	80044f4 <scalbn+0xbc>
 800448a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800448e:	428c      	cmp	r4, r1
 8004490:	dc18      	bgt.n	80044c4 <scalbn+0x8c>
 8004492:	2b00      	cmp	r3, #0
 8004494:	a126      	add	r1, pc, #152	; (adr r1, 8004530 <scalbn+0xf8>)
 8004496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800449a:	db44      	blt.n	8004526 <scalbn+0xee>
 800449c:	a324      	add	r3, pc, #144	; (adr r3, 8004530 <scalbn+0xf8>)
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f7fc f82d 	bl	8000500 <__aeabi_dmul>
 80044a6:	ec41 0b10 	vmov	d0, r0, r1
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80044b0:	4281      	cmp	r1, r0
 80044b2:	d1e0      	bne.n	8004476 <scalbn+0x3e>
 80044b4:	ee10 0a10 	vmov	r0, s0
 80044b8:	4619      	mov	r1, r3
 80044ba:	f7fb fe6b 	bl	8000194 <__adddf3>
 80044be:	ec41 0b10 	vmov	d0, r0, r1
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	a11c      	add	r1, pc, #112	; (adr r1, 8004538 <scalbn+0x100>)
 80044c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044cc:	db07      	blt.n	80044de <scalbn+0xa6>
 80044ce:	a31a      	add	r3, pc, #104	; (adr r3, 8004538 <scalbn+0x100>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f7fc f814 	bl	8000500 <__aeabi_dmul>
 80044d8:	ec41 0b10 	vmov	d0, r0, r1
 80044dc:	bd38      	pop	{r3, r4, r5, pc}
 80044de:	a118      	add	r1, pc, #96	; (adr r1, 8004540 <scalbn+0x108>)
 80044e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044e4:	a314      	add	r3, pc, #80	; (adr r3, 8004538 <scalbn+0x100>)
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f7fc f809 	bl	8000500 <__aeabi_dmul>
 80044ee:	ec41 0b10 	vmov	d0, r0, r1
 80044f2:	e7f3      	b.n	80044dc <scalbn+0xa4>
 80044f4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 80044f8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 80044fc:	3136      	adds	r1, #54	; 0x36
 80044fe:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	2200      	movs	r2, #0
 8004508:	4b13      	ldr	r3, [pc, #76]	; (8004558 <scalbn+0x120>)
 800450a:	f7fb fff9 	bl	8000500 <__aeabi_dmul>
 800450e:	ec41 0b10 	vmov	d0, r0, r1
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8004518:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 800451c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
 8004520:	ec43 2b10 	vmov	d0, r2, r3
 8004524:	bd38      	pop	{r3, r4, r5, pc}
 8004526:	a108      	add	r1, pc, #32	; (adr r1, 8004548 <scalbn+0x110>)
 8004528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800452c:	e7b6      	b.n	800449c <scalbn+0x64>
 800452e:	bf00      	nop
 8004530:	c2f8f359 	.word	0xc2f8f359
 8004534:	01a56e1f 	.word	0x01a56e1f
 8004538:	8800759c 	.word	0x8800759c
 800453c:	7e37e43c 	.word	0x7e37e43c
 8004540:	8800759c 	.word	0x8800759c
 8004544:	fe37e43c 	.word	0xfe37e43c
 8004548:	c2f8f359 	.word	0xc2f8f359
 800454c:	81a56e1f 	.word	0x81a56e1f
 8004550:	43500000 	.word	0x43500000
 8004554:	ffff3cb0 	.word	0xffff3cb0
 8004558:	3c900000 	.word	0x3c900000

0800455c <mavlink_sha256_update>:
    G += GG;
    H += HH;
}

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 800455c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *p = (const unsigned char *)v;
    uint32_t old_sz = m->sz[0];
 8004560:	6805      	ldr	r5, [r0, #0]
    uint32_t offset;

    m->sz[0] += len * 8;
 8004562:	00d3      	lsls	r3, r2, #3
 8004564:	195b      	adds	r3, r3, r5
 8004566:	6003      	str	r3, [r0, #0]
    if (m->sz[0] < old_sz)
	++m->sz[1];
 8004568:	bf28      	it	cs
 800456a:	6843      	ldrcs	r3, [r0, #4]
{
 800456c:	b0df      	sub	sp, #380	; 0x17c
	++m->sz[1];
 800456e:	bf24      	itt	cs
 8004570:	3301      	addcs	r3, #1
 8004572:	6043      	strcs	r3, [r0, #4]
    while(len > 0){
	uint32_t l = 64 - offset;
        if (len < l) {
            l = len;
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8004574:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8004578:	930c      	str	r3, [sp, #48]	; 0x30
 800457a:	f100 0340 	add.w	r3, r0, #64	; 0x40
{
 800457e:	4604      	mov	r4, r0
 8004580:	4689      	mov	r9, r1
 8004582:	4616      	mov	r6, r2
    offset = (old_sz / 8) % 64;
 8004584:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    while(len > 0){
 8004588:	930d      	str	r3, [sp, #52]	; 0x34
	uint32_t l = 64 - offset;
 800458a:	f1c5 0740 	rsb	r7, r5, #64	; 0x40
        if (len < l) {
 800458e:	42b7      	cmp	r7, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8004590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004592:	bf28      	it	cs
 8004594:	4637      	movcs	r7, r6
 8004596:	4649      	mov	r1, r9
 8004598:	1958      	adds	r0, r3, r5
 800459a:	463a      	mov	r2, r7
	offset += l;
 800459c:	443d      	add	r5, r7
	memcpy(m->u.save_bytes + offset, p, l);
 800459e:	f005 fd4e 	bl	800a03e <memcpy>
	p += l;
	len -= l;
	if(offset == 64){
 80045a2:	2d40      	cmp	r5, #64	; 0x40
	p += l;
 80045a4:	44b9      	add	r9, r7
	len -= l;
 80045a6:	eba6 0607 	sub.w	r6, r6, r7
	if(offset == 64){
 80045aa:	f040 80a1 	bne.w	80046f0 <mavlink_sha256_update+0x194>
 80045ae:	ab0e      	add	r3, sp, #56	; 0x38
 80045b0:	4622      	mov	r2, r4
 80045b2:	4619      	mov	r1, r3
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
	    for (i = 0; i < 16; i++){
                const uint8_t *p1 = (const uint8_t *)&u[i];
                uint8_t *p2 = (uint8_t *)&current[i];
                p2[0] = p1[3];
 80045b4:	f892 002b 	ldrb.w	r0, [r2, #43]	; 0x2b
 80045b8:	7008      	strb	r0, [r1, #0]
                p2[1] = p1[2];
 80045ba:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
 80045be:	7048      	strb	r0, [r1, #1]
                p2[2] = p1[1];
 80045c0:	f892 0029 	ldrb.w	r0, [r2, #41]	; 0x29
 80045c4:	7088      	strb	r0, [r1, #2]
                p2[3] = p1[0];
 80045c6:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 80045ca:	70c8      	strb	r0, [r1, #3]
	    for (i = 0; i < 16; i++){
 80045cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80045ce:	3204      	adds	r2, #4
 80045d0:	4290      	cmp	r0, r2
 80045d2:	f101 0104 	add.w	r1, r1, #4
 80045d6:	d1ed      	bne.n	80045b4 <mavlink_sha256_update+0x58>
    AA = A;
 80045d8:	68a2      	ldr	r2, [r4, #8]
 80045da:	9201      	str	r2, [sp, #4]
    BB = B;
 80045dc:	68e2      	ldr	r2, [r4, #12]
 80045de:	9202      	str	r2, [sp, #8]
    CC = C;
 80045e0:	6922      	ldr	r2, [r4, #16]
 80045e2:	9203      	str	r2, [sp, #12]
    DD = D;
 80045e4:	6962      	ldr	r2, [r4, #20]
 80045e6:	9204      	str	r2, [sp, #16]
    EE = E;
 80045e8:	69a2      	ldr	r2, [r4, #24]
 80045ea:	9205      	str	r2, [sp, #20]
    FF = F;
 80045ec:	69e2      	ldr	r2, [r4, #28]
 80045ee:	9206      	str	r2, [sp, #24]
    GG = G;
 80045f0:	6a22      	ldr	r2, [r4, #32]
 80045f2:	9207      	str	r2, [sp, #28]
    HH = H;
 80045f4:	a91e      	add	r1, sp, #120	; 0x78
 80045f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80045f8:	9208      	str	r2, [sp, #32]
 80045fa:	4608      	mov	r0, r1
    for (i = 0; i < 16; ++i)
 80045fc:	2200      	movs	r2, #0
 80045fe:	3201      	adds	r2, #1
	data[i] = in[i];
 8004600:	f853 5b04 	ldr.w	r5, [r3], #4
 8004604:	f840 5b04 	str.w	r5, [r0], #4
    for (i = 0; i < 16; ++i)
 8004608:	2a10      	cmp	r2, #16
 800460a:	d1f8      	bne.n	80045fe <mavlink_sha256_update+0xa2>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800460c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800460e:	460f      	mov	r7, r1
 8004610:	ea4f 40f3 	mov.w	r0, r3, ror #19
 8004614:	ea80 4073 	eor.w	r0, r0, r3, ror #17
 8004618:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	683f      	ldr	r7, [r7, #0]
 8004620:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8004624:	443b      	add	r3, r7
 8004626:	4418      	add	r0, r3
 8004628:	ea4f 43b5 	mov.w	r3, r5, ror #18
 800462c:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 8004630:	ea83 03d5 	eor.w	r3, r3, r5, lsr #3
    for (i = 16; i < 64; ++i)
 8004634:	3201      	adds	r2, #1
	    sigma0(data[i-15]) + data[i - 16];
 8004636:	4403      	add	r3, r0
    for (i = 16; i < 64; ++i)
 8004638:	2a40      	cmp	r2, #64	; 0x40
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800463a:	63cb      	str	r3, [r1, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 800463c:	d1e6      	bne.n	800460c <mavlink_sha256_update+0xb0>
 800463e:	4b33      	ldr	r3, [pc, #204]	; (800470c <mavlink_sha256_update+0x1b0>)
 8004640:	930b      	str	r3, [sp, #44]	; 0x2c
    BB = B;
 8004642:	e9dd 7202 	ldrd	r7, r2, [sp, #8]
    FF = F;
 8004646:	e9dd ec06 	ldrd	lr, ip, [sp, #24]
    DD = D;
 800464a:	9b04      	ldr	r3, [sp, #16]
    AA = A;
 800464c:	9d01      	ldr	r5, [sp, #4]
    HH = H;
 800464e:	f8dd b020 	ldr.w	fp, [sp, #32]
    EE = E;
 8004652:	9805      	ldr	r0, [sp, #20]
    DD = D;
 8004654:	930a      	str	r3, [sp, #40]	; 0x28
    for (i = 0; i < 64; i++) {
 8004656:	f04f 0800 	mov.w	r8, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800465a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800465c:	f853 1b04 	ldr.w	r1, [r3], #4
 8004660:	930b      	str	r3, [sp, #44]	; 0x2c
 8004662:	ea4f 23f0 	mov.w	r3, r0, ror #11
 8004666:	ea83 13b0 	eor.w	r3, r3, r0, ror #6
 800466a:	ea83 6a70 	eor.w	sl, r3, r0, ror #25
 800466e:	ab1e      	add	r3, sp, #120	; 0x78
 8004670:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004674:	4419      	add	r1, r3
 8004676:	eb0a 0301 	add.w	r3, sl, r1
 800467a:	ea2c 0a00 	bic.w	sl, ip, r0
 800467e:	ea00 010e 	and.w	r1, r0, lr
 8004682:	ea8a 0101 	eor.w	r1, sl, r1
 8004686:	4419      	add	r1, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004688:	ea87 0302 	eor.w	r3, r7, r2
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800468c:	4459      	add	r1, fp
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800468e:	402b      	ands	r3, r5
 8004690:	ea4f 3a75 	mov.w	sl, r5, ror #13
 8004694:	ea07 0b02 	and.w	fp, r7, r2
 8004698:	ea83 0b0b 	eor.w	fp, r3, fp
 800469c:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
	EE = DD + T1;
 80046a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046a2:	920a      	str	r2, [sp, #40]	; 0x28
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80046a4:	ea8a 5ab5 	eor.w	sl, sl, r5, ror #22
    for (i = 0; i < 64; i++) {
 80046a8:	f108 0801 	add.w	r8, r8, #1
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80046ac:	44da      	add	sl, fp
	EE = DD + T1;
 80046ae:	440b      	add	r3, r1
    for (i = 0; i < 64; i++) {
 80046b0:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
	EE = DD + T1;
 80046b4:	9309      	str	r3, [sp, #36]	; 0x24
	AA = T1 + T2;
 80046b6:	4451      	add	r1, sl
    for (i = 0; i < 64; i++) {
 80046b8:	46e3      	mov	fp, ip
 80046ba:	d11f      	bne.n	80046fc <mavlink_sha256_update+0x1a0>
    A += AA;
 80046bc:	9b01      	ldr	r3, [sp, #4]
 80046be:	440b      	add	r3, r1
 80046c0:	60a3      	str	r3, [r4, #8]
    B += BB;
 80046c2:	9b02      	ldr	r3, [sp, #8]
 80046c4:	442b      	add	r3, r5
 80046c6:	60e3      	str	r3, [r4, #12]
    C += CC;
 80046c8:	9b03      	ldr	r3, [sp, #12]
 80046ca:	443b      	add	r3, r7
 80046cc:	6123      	str	r3, [r4, #16]
    D += DD;
 80046ce:	9b04      	ldr	r3, [sp, #16]
 80046d0:	4413      	add	r3, r2
 80046d2:	6163      	str	r3, [r4, #20]
    E += EE;
 80046d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046d6:	9b05      	ldr	r3, [sp, #20]
 80046d8:	4413      	add	r3, r2
 80046da:	61a3      	str	r3, [r4, #24]
    F += FF;
 80046dc:	9b06      	ldr	r3, [sp, #24]
 80046de:	4403      	add	r3, r0
 80046e0:	61e3      	str	r3, [r4, #28]
    G += GG;
 80046e2:	9b07      	ldr	r3, [sp, #28]
 80046e4:	4473      	add	r3, lr
 80046e6:	6223      	str	r3, [r4, #32]
    H += HH;
 80046e8:	9b08      	ldr	r3, [sp, #32]
 80046ea:	4463      	add	r3, ip
 80046ec:	6263      	str	r3, [r4, #36]	; 0x24
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
 80046ee:	2500      	movs	r5, #0
    while(len > 0){
 80046f0:	2e00      	cmp	r6, #0
 80046f2:	f47f af4a 	bne.w	800458a <mavlink_sha256_update+0x2e>
	}
    }
}
 80046f6:	b05f      	add	sp, #380	; 0x17c
 80046f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fc:	463a      	mov	r2, r7
 80046fe:	46f4      	mov	ip, lr
 8004700:	462f      	mov	r7, r5
 8004702:	4686      	mov	lr, r0
	AA = T1 + T2;
 8004704:	460d      	mov	r5, r1
	EE = DD + T1;
 8004706:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004708:	e7a7      	b.n	800465a <mavlink_sha256_update+0xfe>
 800470a:	bf00      	nop
 800470c:	0800a598 	.word	0x0800a598

08004710 <_Z17coop_thread_entryv>:

void coop_thread_entry(void)
{
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	b0fb      	sub	sp, #492	; 0x1ec
    A = 0x6a09e667;
 8004716:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 80049dc <_Z17coop_thread_entryv+0x2cc>
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800471a:	4dad      	ldr	r5, [pc, #692]	; (80049d0 <_Z17coop_thread_entryv+0x2c0>)
 800471c:	4cad      	ldr	r4, [pc, #692]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
	mavlink_status_t status;
	mavlink_message_t msg;
	int chan = 0;
	while (1) {
		uint8_t c = console_getchar();
 800471e:	f001 f943 	bl	80059a8 <console_getchar>

	switch (status->parse_state)
 8004722:	78eb      	ldrb	r3, [r5, #3]
	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8004724:	2700      	movs	r7, #0
 8004726:	b2c6      	uxtb	r6, r0
 8004728:	702f      	strb	r7, [r5, #0]
	switch (status->parse_state)
 800472a:	2b0f      	cmp	r3, #15
 800472c:	d822      	bhi.n	8004774 <_Z17coop_thread_entryv+0x64>
 800472e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004732:	0012      	.short	0x0012
 8004734:	00510012 	.word	0x00510012
 8004738:	006d0061 	.word	0x006d0061
 800473c:	007a0073 	.word	0x007a0073
 8004740:	00880081 	.word	0x00880081
 8004744:	00b0009a 	.word	0x00b0009a
 8004748:	00d600c6 	.word	0x00d600c6
 800474c:	01160116 	.word	0x01160116
 8004750:	0157      	.short	0x0157
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    _mav_parse_error(status);
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8004752:	70ea      	strb	r2, [r5, #3]
 8004754:	e7e1      	b.n	800471a <_Z17coop_thread_entryv+0xa>
		if (c == MAVLINK_STX)
 8004756:	2efd      	cmp	r6, #253	; 0xfd
 8004758:	d131      	bne.n	80047be <_Z17coop_thread_entryv+0xae>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800475a:	2302      	movs	r3, #2
 800475c:	70eb      	strb	r3, [r5, #3]
			rxmsg->len = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	70e3      	strb	r3, [r4, #3]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8004762:	7b2b      	ldrb	r3, [r5, #12]
			rxmsg->magic = c;
 8004764:	70a6      	strb	r6, [r4, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8004766:	f023 0301 	bic.w	r3, r3, #1
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 800476a:	732b      	strb	r3, [r5, #12]
	msg->checksum = crcTmp;
 800476c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004770:	7023      	strb	r3, [r4, #0]
 8004772:	7063      	strb	r3, [r4, #1]
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8004774:	782a      	ldrb	r2, [r5, #0]
 8004776:	2a01      	cmp	r2, #1
 8004778:	d106      	bne.n	8004788 <_Z17coop_thread_entryv+0x78>
		status->current_rx_seq = rxmsg->seq;
 800477a:	79a3      	ldrb	r3, [r4, #6]
 800477c:	716b      	strb	r3, [r5, #5]
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 800477e:	892b      	ldrh	r3, [r5, #8]
 8004780:	b903      	cbnz	r3, 8004784 <_Z17coop_thread_entryv+0x74>
 8004782:	816b      	strh	r3, [r5, #10]
		status->packet_rx_success_count++;
 8004784:	3301      	adds	r3, #1
 8004786:	812b      	strh	r3, [r5, #8]
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8004788:	78e3      	ldrb	r3, [r4, #3]
 800478a:	f88d 30c7 	strb.w	r3, [sp, #199]	; 0xc7
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 800478e:	2a02      	cmp	r2, #2
       status->parse_error = 0;
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	70ab      	strb	r3, [r5, #2]
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8004796:	f040 8220 	bne.w	8004bda <_Z17coop_thread_entryv+0x4ca>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 800479a:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
 800479e:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
    status->parse_error++;
 80047a2:	2201      	movs	r2, #1
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80047a4:	2300      	movs	r3, #0
	    if (c == MAVLINK_STX)
 80047a6:	2efd      	cmp	r6, #253	; 0xfd
    status->parse_error++;
 80047a8:	70aa      	strb	r2, [r5, #2]
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80047aa:	702b      	strb	r3, [r5, #0]
	    if (c == MAVLINK_STX)
 80047ac:	d1d1      	bne.n	8004752 <_Z17coop_thread_entryv+0x42>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80047ae:	2202      	movs	r2, #2
		    rxmsg->len = 0;
 80047b0:	70e3      	strb	r3, [r4, #3]
	msg->checksum = crcTmp;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80047b6:	70ea      	strb	r2, [r5, #3]
	msg->checksum = crcTmp;
 80047b8:	7023      	strb	r3, [r4, #0]
 80047ba:	7063      	strb	r3, [r4, #1]
 80047bc:	e7ad      	b.n	800471a <_Z17coop_thread_entryv+0xa>
		} else if (c == MAVLINK_STX_MAVLINK1)
 80047be:	2efe      	cmp	r6, #254	; 0xfe
 80047c0:	d1d8      	bne.n	8004774 <_Z17coop_thread_entryv+0x64>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80047c2:	2302      	movs	r3, #2
 80047c4:	70eb      	strb	r3, [r5, #3]
			rxmsg->len = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	70e3      	strb	r3, [r4, #3]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80047ca:	7b2b      	ldrb	r3, [r5, #12]
			rxmsg->magic = c;
 80047cc:	70a6      	strb	r6, [r4, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	e7ca      	b.n	800476a <_Z17coop_thread_entryv+0x5a>
			mavlink_update_checksum(rxmsg, c);
 80047d4:	487f      	ldr	r0, [pc, #508]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
			rxmsg->len = c;
 80047d6:	70e6      	strb	r6, [r4, #3]
			mavlink_update_checksum(rxmsg, c);
 80047d8:	4631      	mov	r1, r6
			status->packet_idx = 0;
 80047da:	712f      	strb	r7, [r5, #4]
			mavlink_update_checksum(rxmsg, c);
 80047dc:	f003 fe96 	bl	800850c <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80047e0:	7b2b      	ldrb	r3, [r5, #12]
 80047e2:	07da      	lsls	r2, r3, #31
 80047e4:	d503      	bpl.n	80047ee <_Z17coop_thread_entryv+0xde>
                            rxmsg->incompat_flags = 0;
 80047e6:	7127      	strb	r7, [r4, #4]
                            rxmsg->compat_flags = 0;
 80047e8:	7167      	strb	r7, [r4, #5]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 80047ea:	2305      	movs	r3, #5
 80047ec:	e000      	b.n	80047f0 <_Z17coop_thread_entryv+0xe0>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 80047ee:	2303      	movs	r3, #3
 80047f0:	70eb      	strb	r3, [r5, #3]
 80047f2:	e7bf      	b.n	8004774 <_Z17coop_thread_entryv+0x64>
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 80047f4:	f010 0ffe 	tst.w	r0, #254	; 0xfe
		rxmsg->incompat_flags = c;
 80047f8:	7126      	strb	r6, [r4, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 80047fa:	d001      	beq.n	8004800 <_Z17coop_thread_entryv+0xf0>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e7f7      	b.n	80047f0 <_Z17coop_thread_entryv+0xe0>
		mavlink_update_checksum(rxmsg, c);
 8004800:	4874      	ldr	r0, [pc, #464]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
 8004802:	4631      	mov	r1, r6
 8004804:	f003 fe82 	bl	800850c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8004808:	2304      	movs	r3, #4
 800480a:	e7f1      	b.n	80047f0 <_Z17coop_thread_entryv+0xe0>
		mavlink_update_checksum(rxmsg, c);
 800480c:	4871      	ldr	r0, [pc, #452]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
		rxmsg->compat_flags = c;
 800480e:	7166      	strb	r6, [r4, #5]
		mavlink_update_checksum(rxmsg, c);
 8004810:	4631      	mov	r1, r6
 8004812:	f003 fe7b 	bl	800850c <mavlink_update_checksum>
 8004816:	e7e8      	b.n	80047ea <_Z17coop_thread_entryv+0xda>
		mavlink_update_checksum(rxmsg, c);
 8004818:	486e      	ldr	r0, [pc, #440]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
		rxmsg->seq = c;
 800481a:	71a6      	strb	r6, [r4, #6]
		mavlink_update_checksum(rxmsg, c);
 800481c:	4631      	mov	r1, r6
 800481e:	f003 fe75 	bl	800850c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8004822:	2306      	movs	r3, #6
 8004824:	e7e4      	b.n	80047f0 <_Z17coop_thread_entryv+0xe0>
		mavlink_update_checksum(rxmsg, c);
 8004826:	486b      	ldr	r0, [pc, #428]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
		rxmsg->sysid = c;
 8004828:	71e6      	strb	r6, [r4, #7]
		mavlink_update_checksum(rxmsg, c);
 800482a:	4631      	mov	r1, r6
 800482c:	f003 fe6e 	bl	800850c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8004830:	2307      	movs	r3, #7
 8004832:	e7dd      	b.n	80047f0 <_Z17coop_thread_entryv+0xe0>
		mavlink_update_checksum(rxmsg, c);
 8004834:	4867      	ldr	r0, [pc, #412]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
		rxmsg->compid = c;
 8004836:	7226      	strb	r6, [r4, #8]
		mavlink_update_checksum(rxmsg, c);
 8004838:	4631      	mov	r1, r6
 800483a:	f003 fe67 	bl	800850c <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 800483e:	2308      	movs	r3, #8
 8004840:	e7d6      	b.n	80047f0 <_Z17coop_thread_entryv+0xe0>
		rxmsg->msgid = c;
 8004842:	2300      	movs	r3, #0
		mavlink_update_checksum(rxmsg, c);
 8004844:	4863      	ldr	r0, [pc, #396]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
		rxmsg->msgid = c;
 8004846:	72a3      	strb	r3, [r4, #10]
		mavlink_update_checksum(rxmsg, c);
 8004848:	4631      	mov	r1, r6
		rxmsg->msgid = c;
 800484a:	72e3      	strb	r3, [r4, #11]
 800484c:	7266      	strb	r6, [r4, #9]
		mavlink_update_checksum(rxmsg, c);
 800484e:	f003 fe5d 	bl	800850c <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8004852:	7b2b      	ldrb	r3, [r5, #12]
 8004854:	07db      	lsls	r3, r3, #31
 8004856:	d504      	bpl.n	8004862 <_Z17coop_thread_entryv+0x152>
			if(rxmsg->len > 0) {
 8004858:	78e3      	ldrb	r3, [r4, #3]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d03d      	beq.n	80048da <_Z17coop_thread_entryv+0x1ca>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800485e:	230b      	movs	r3, #11
 8004860:	e7c6      	b.n	80047f0 <_Z17coop_thread_entryv+0xe0>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8004862:	2309      	movs	r3, #9
 8004864:	e7c4      	b.n	80047f0 <_Z17coop_thread_entryv+0xe0>
		rxmsg->msgid |= c<<8;
 8004866:	7aa2      	ldrb	r2, [r4, #10]
 8004868:	7a63      	ldrb	r3, [r4, #9]
 800486a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800486e:	7ae2      	ldrb	r2, [r4, #11]
 8004870:	0200      	lsls	r0, r0, #8
 8004872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004876:	b280      	uxth	r0, r0
 8004878:	4318      	orrs	r0, r3
 800487a:	7263      	strb	r3, [r4, #9]
 800487c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8004880:	0c00      	lsrs	r0, r0, #16
 8004882:	72e0      	strb	r0, [r4, #11]
		mavlink_update_checksum(rxmsg, c);
 8004884:	4631      	mov	r1, r6
 8004886:	4853      	ldr	r0, [pc, #332]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
		rxmsg->msgid |= c<<8;
 8004888:	72a3      	strb	r3, [r4, #10]
		mavlink_update_checksum(rxmsg, c);
 800488a:	f003 fe3f 	bl	800850c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 800488e:	230a      	movs	r3, #10
 8004890:	e7ae      	b.n	80047f0 <_Z17coop_thread_entryv+0xe0>
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8004892:	7aa2      	ldrb	r2, [r4, #10]
 8004894:	7a63      	ldrb	r3, [r4, #9]
 8004896:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800489a:	7ae2      	ldrb	r2, [r4, #11]
 800489c:	0400      	lsls	r0, r0, #16
 800489e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048a2:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 80048a6:	4318      	orrs	r0, r3
 80048a8:	0c00      	lsrs	r0, r0, #16
 80048aa:	7263      	strb	r3, [r4, #9]
 80048ac:	72e0      	strb	r0, [r4, #11]
 80048ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
		mavlink_update_checksum(rxmsg, c);
 80048b2:	4848      	ldr	r0, [pc, #288]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
		rxmsg->msgid |= ((uint32_t)c)<<16;
 80048b4:	72a3      	strb	r3, [r4, #10]
		mavlink_update_checksum(rxmsg, c);
 80048b6:	4631      	mov	r1, r6
 80048b8:	f003 fe28 	bl	800850c <mavlink_update_checksum>
		if(rxmsg->len > 0){
 80048bc:	e7cc      	b.n	8004858 <_Z17coop_thread_entryv+0x148>
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80048be:	792b      	ldrb	r3, [r5, #4]
		mavlink_update_checksum(rxmsg, c);
 80048c0:	4844      	ldr	r0, [pc, #272]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	4423      	add	r3, r4
		mavlink_update_checksum(rxmsg, c);
 80048c6:	4631      	mov	r1, r6
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80048c8:	731e      	strb	r6, [r3, #12]
 80048ca:	712a      	strb	r2, [r5, #4]
		mavlink_update_checksum(rxmsg, c);
 80048cc:	f003 fe1e 	bl	800850c <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 80048d0:	792a      	ldrb	r2, [r5, #4]
 80048d2:	78e3      	ldrb	r3, [r4, #3]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	f47f af4d 	bne.w	8004774 <_Z17coop_thread_entryv+0x64>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80048da:	230c      	movs	r3, #12
 80048dc:	e788      	b.n	80047f0 <_Z17coop_thread_entryv+0xe0>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80048de:	7aa3      	ldrb	r3, [r4, #10]
 80048e0:	7a61      	ldrb	r1, [r4, #9]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80048e2:	4f3d      	ldr	r7, [pc, #244]	; (80049d8 <_Z17coop_thread_entryv+0x2c8>)
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80048e4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80048e8:	7ae3      	ldrb	r3, [r4, #11]
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 80048ea:	20d6      	movs	r0, #214	; 0xd6
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80048ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80048f0:	f04f 0c0c 	mov.w	ip, #12
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 80048f4:	2300      	movs	r3, #0
            uint32_t mid = (low+1+high)/2;
 80048f6:	181a      	adds	r2, r3, r0
 80048f8:	3201      	adds	r2, #1
 80048fa:	0852      	lsrs	r2, r2, #1
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80048fc:	fb0c fe02 	mul.w	lr, ip, r2
 8004900:	f857 e00e 	ldr.w	lr, [r7, lr]
 8004904:	4571      	cmp	r1, lr
 8004906:	d227      	bcs.n	8004958 <_Z17coop_thread_entryv+0x248>
                high = mid-1;
 8004908:	1e50      	subs	r0, r2, #1
        while (low < high) {
 800490a:	4298      	cmp	r0, r3
 800490c:	d8f3      	bhi.n	80048f6 <_Z17coop_thread_entryv+0x1e6>
        if (mavlink_message_crcs[low].msgid != msgid) {
 800490e:	220c      	movs	r2, #12
 8004910:	4353      	muls	r3, r2
 8004912:	18fa      	adds	r2, r7, r3
 8004914:	58fb      	ldr	r3, [r7, r3]
		mavlink_update_checksum(rxmsg, crc_extra);
 8004916:	482f      	ldr	r0, [pc, #188]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
        if (mavlink_message_crcs[low].msgid != msgid) {
 8004918:	4299      	cmp	r1, r3
        return &mavlink_message_crcs[low];
 800491a:	bf0b      	itete	eq
 800491c:	4617      	moveq	r7, r2
            return NULL;
 800491e:	2700      	movne	r7, #0
		uint8_t crc_extra = e?e->crc_extra:0;
 8004920:	7939      	ldrbeq	r1, [r7, #4]
 8004922:	4639      	movne	r1, r7
		mavlink_update_checksum(rxmsg, crc_extra);
 8004924:	f003 fdf2 	bl	800850c <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8004928:	8823      	ldrh	r3, [r4, #0]
                rxmsg->ck[0] = c;
 800492a:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
		if (c != (rxmsg->checksum & 0xFF)) {
 800492e:	b2db      	uxtb	r3, r3
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8004930:	429e      	cmp	r6, r3
 8004932:	bf14      	ite	ne
 8004934:	230e      	movne	r3, #14
 8004936:	230d      	moveq	r3, #13
 8004938:	70eb      	strb	r3, [r5, #3]
                if (e && status->packet_idx < e->max_msg_len) {
 800493a:	2f00      	cmp	r7, #0
 800493c:	f43f af1a 	beq.w	8004774 <_Z17coop_thread_entryv+0x64>
 8004940:	792b      	ldrb	r3, [r5, #4]
 8004942:	79ba      	ldrb	r2, [r7, #6]
 8004944:	4293      	cmp	r3, r2
 8004946:	f4bf af15 	bcs.w	8004774 <_Z17coop_thread_entryv+0x64>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 800494a:	300c      	adds	r0, #12
 800494c:	1ad2      	subs	r2, r2, r3
 800494e:	2100      	movs	r1, #0
 8004950:	4418      	add	r0, r3
 8004952:	f005 fb82 	bl	800a05a <memset>
 8004956:	e70d      	b.n	8004774 <_Z17coop_thread_entryv+0x64>
                low = mid;
 8004958:	4613      	mov	r3, r2
            if (msgid > mavlink_message_crcs[mid].msgid) {
 800495a:	d9d8      	bls.n	800490e <_Z17coop_thread_entryv+0x1fe>
 800495c:	e7d5      	b.n	800490a <_Z17coop_thread_entryv+0x1fa>
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800495e:	2b0e      	cmp	r3, #14
 8004960:	d016      	beq.n	8004990 <_Z17coop_thread_entryv+0x280>
 8004962:	8823      	ldrh	r3, [r4, #0]
			status->msg_received = MAVLINK_FRAMING_OK;
 8004964:	ebb6 2f13 	cmp.w	r6, r3, lsr #8
 8004968:	bf14      	ite	ne
 800496a:	2302      	movne	r3, #2
 800496c:	2301      	moveq	r3, #1
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 800496e:	7922      	ldrb	r2, [r4, #4]
 8004970:	702b      	strb	r3, [r5, #0]
 8004972:	07d7      	lsls	r7, r2, #31
		rxmsg->ck[1] = c;
 8004974:	f884 6115 	strb.w	r6, [r4, #277]	; 0x115
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8004978:	d50c      	bpl.n	8004994 <_Z17coop_thread_entryv+0x284>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 800497a:	220f      	movs	r2, #15
 800497c:	70ea      	strb	r2, [r5, #3]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800497e:	2b02      	cmp	r3, #2
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8004980:	f04f 020d 	mov.w	r2, #13
 8004984:	736a      	strb	r2, [r5, #13]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8004986:	f43f aef5 	beq.w	8004774 <_Z17coop_thread_entryv+0x64>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800498a:	2300      	movs	r3, #0
 800498c:	702b      	strb	r3, [r5, #0]
 800498e:	e6f1      	b.n	8004774 <_Z17coop_thread_entryv+0x64>
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8004990:	2302      	movs	r3, #2
 8004992:	e7ec      	b.n	800496e <_Z17coop_thread_entryv+0x25e>
			if (status->signing &&
 8004994:	692b      	ldr	r3, [r5, #16]
 8004996:	b12b      	cbz	r3, 80049a4 <_Z17coop_thread_entryv+0x294>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8004998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			if (status->signing &&
 800499a:	b962      	cbnz	r2, 80049b6 <_Z17coop_thread_entryv+0x2a6>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800499c:	782b      	ldrb	r3, [r5, #0]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	f040 8118 	bne.w	8004bd4 <_Z17coop_thread_entryv+0x4c4>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80049a4:	2301      	movs	r3, #1
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80049a6:	490b      	ldr	r1, [pc, #44]	; (80049d4 <_Z17coop_thread_entryv+0x2c4>)
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80049a8:	70eb      	strb	r3, [r5, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80049aa:	f240 1223 	movw	r2, #291	; 0x123
 80049ae:	a831      	add	r0, sp, #196	; 0xc4
 80049b0:	f005 fb45 	bl	800a03e <memcpy>
 80049b4:	e6de      	b.n	8004774 <_Z17coop_thread_entryv+0x64>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80049b6:	7aa1      	ldrb	r1, [r4, #10]
 80049b8:	7a63      	ldrb	r3, [r4, #9]
 80049ba:	4805      	ldr	r0, [pc, #20]	; (80049d0 <_Z17coop_thread_entryv+0x2c0>)
 80049bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80049c0:	7ae1      	ldrb	r1, [r4, #11]
 80049c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80049c6:	4790      	blx	r2
			   	(status->signing->accept_unsigned_callback == NULL ||
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d1eb      	bne.n	80049a4 <_Z17coop_thread_entryv+0x294>
 80049cc:	e7e6      	b.n	800499c <_Z17coop_thread_entryv+0x28c>
 80049ce:	bf00      	nop
 80049d0:	20001548 	.word	0x20001548
 80049d4:	20001848 	.word	0x20001848
 80049d8:	0800a698 	.word	0x0800a698
 80049dc:	6a09e667 	.word	0x6a09e667
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 80049e0:	7b6f      	ldrb	r7, [r5, #13]
 80049e2:	1be3      	subs	r3, r4, r7
		status->signature_wait--;
 80049e4:	3f01      	subs	r7, #1
 80049e6:	b2ff      	uxtb	r7, r7
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 80049e8:	f883 6123 	strb.w	r6, [r3, #291]	; 0x123
		status->signature_wait--;
 80049ec:	736f      	strb	r7, [r5, #13]
		if (status->signature_wait == 0) {
 80049ee:	2f00      	cmp	r7, #0
 80049f0:	f47f aec0 	bne.w	8004774 <_Z17coop_thread_entryv+0x64>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 80049f4:	f8d5 8010 	ldr.w	r8, [r5, #16]
	if (signing == NULL) {
 80049f8:	f1b8 0f00 	cmp.w	r8, #0
 80049fc:	f000 80c6 	beq.w	8004b8c <_Z17coop_thread_entryv+0x47c>
    C = 0x3c6ef372;
 8004a00:	4a7b      	ldr	r2, [pc, #492]	; (8004bf0 <_Z17coop_thread_entryv+0x4e0>)
 8004a02:	4b7c      	ldr	r3, [pc, #496]	; (8004bf4 <_Z17coop_thread_entryv+0x4e4>)
    E = 0x510e527f;
 8004a04:	497c      	ldr	r1, [pc, #496]	; (8004bf8 <_Z17coop_thread_entryv+0x4e8>)
    G = 0x1f83d9ab;
 8004a06:	487d      	ldr	r0, [pc, #500]	; (8004bfc <_Z17coop_thread_entryv+0x4ec>)
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8004a08:	f8d5 9014 	ldr.w	r9, [r5, #20]
    A = 0x6a09e667;
 8004a0c:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
    C = 0x3c6ef372;
 8004a10:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    E = 0x510e527f;
 8004a14:	4b7a      	ldr	r3, [pc, #488]	; (8004c00 <_Z17coop_thread_entryv+0x4f0>)
 8004a16:	e9cd 131c 	strd	r1, r3, [sp, #112]	; 0x70
    G = 0x1f83d9ab;
 8004a1a:	4b7a      	ldr	r3, [pc, #488]	; (8004c04 <_Z17coop_thread_entryv+0x4f4>)
 8004a1c:	e9cd 031e 	strd	r0, r3, [sp, #120]	; 0x78
    H = 0x5be0cd19;
 8004a20:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8004a24:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8004a28:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f108 0110 	add.w	r1, r8, #16
 8004a32:	a817      	add	r0, sp, #92	; 0x5c
 8004a34:	9320      	str	r3, [sp, #128]	; 0x80
    m->sz[1] = 0;
 8004a36:	e9cd 7717 	strd	r7, r7, [sp, #92]	; 0x5c
 8004a3a:	f7ff fd8f 	bl	800455c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 8004a3e:	78e2      	ldrb	r2, [r4, #3]
 8004a40:	4971      	ldr	r1, [pc, #452]	; (8004c08 <_Z17coop_thread_entryv+0x4f8>)
 8004a42:	320a      	adds	r2, #10
 8004a44:	a817      	add	r0, sp, #92	; 0x5c
 8004a46:	f7ff fd89 	bl	800455c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8004a4a:	4970      	ldr	r1, [pc, #448]	; (8004c0c <_Z17coop_thread_entryv+0x4fc>)
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	a817      	add	r0, sp, #92	; 0x5c
 8004a50:	f7ff fd84 	bl	800455c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8004a54:	496e      	ldr	r1, [pc, #440]	; (8004c10 <_Z17coop_thread_entryv+0x500>)
 8004a56:	2207      	movs	r2, #7
 8004a58:	a817      	add	r0, sp, #92	; 0x5c
 8004a5a:	f7ff fd7f 	bl	800455c <mavlink_sha256_update>
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8004a5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a60:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
    uint8_t *p = (uint8_t *)&m->counter[0];
    
    *zeros = 0x80;
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8004a64:	4639      	mov	r1, r7
    *zeros = 0x80;
 8004a66:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8004a68:	2247      	movs	r2, #71	; 0x47
 8004a6a:	f1cb 0b77 	rsb	fp, fp, #119	; 0x77
 8004a6e:	f10d 0011 	add.w	r0, sp, #17
 8004a72:	f00b 0b3f 	and.w	fp, fp, #63	; 0x3f
    *zeros = 0x80;
 8004a76:	f88d 3010 	strb.w	r3, [sp, #16]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8004a7a:	f005 faee 	bl	800a05a <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8004a7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004a80:	ab04      	add	r3, sp, #16
 8004a82:	445b      	add	r3, fp
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8004a84:	0a11      	lsrs	r1, r2, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8004a86:	721a      	strb	r2, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8004a88:	71d9      	strb	r1, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8004a8a:	0c11      	lsrs	r1, r2, #16
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8004a8c:	0e12      	lsrs	r2, r2, #24
 8004a8e:	715a      	strb	r2, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8004a90:	9a18      	ldr	r2, [sp, #96]	; 0x60
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8004a92:	7199      	strb	r1, [r3, #6]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8004a94:	0a11      	lsrs	r1, r2, #8
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8004a96:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8004a98:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8004a9a:	0c11      	lsrs	r1, r2, #16
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8004a9c:	0e12      	lsrs	r2, r2, #24
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8004a9e:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8004aa0:	705a      	strb	r2, [r3, #1]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8004aa2:	a904      	add	r1, sp, #16
 8004aa4:	f10b 0209 	add.w	r2, fp, #9
 8004aa8:	a817      	add	r0, sp, #92	; 0x5c
 8004aaa:	f7ff fd57 	bl	800455c <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8004aae:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8004ab2:	f88d 3000 	strb.w	r3, [sp]
    result[1] = p[2];
 8004ab6:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8004aba:	f88d 3001 	strb.w	r3, [sp, #1]
    result[2] = p[1];
 8004abe:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
 8004ac2:	f88d 3002 	strb.w	r3, [sp, #2]
    result[3] = p[0];
 8004ac6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8004aca:	f88d 3003 	strb.w	r3, [sp, #3]
    result[4] = p[7];
 8004ace:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8004ad2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8004ad6:	494f      	ldr	r1, [pc, #316]	; (8004c14 <_Z17coop_thread_entryv+0x504>)
    result[5] = p[6];
 8004ad8:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 8004adc:	f88d 3005 	strb.w	r3, [sp, #5]
 8004ae0:	2206      	movs	r2, #6
 8004ae2:	4668      	mov	r0, sp
 8004ae4:	f005 fa9b 	bl	800a01e <memcmp>
 8004ae8:	4607      	mov	r7, r0
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d164      	bne.n	8004bb8 <_Z17coop_thread_entryv+0x4a8>
	tstamp.t64 = 0;
 8004aee:	2200      	movs	r2, #0
 8004af0:	2300      	movs	r3, #0
 8004af2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	memcpy(tstamp.t8, psig+1, 6);
 8004af6:	4948      	ldr	r1, [pc, #288]	; (8004c18 <_Z17coop_thread_entryv+0x508>)
	uint8_t link_id = psig[0];
 8004af8:	f894 b116 	ldrb.w	fp, [r4, #278]	; 0x116
	memcpy(tstamp.t8, psig+1, 6);
 8004afc:	2206      	movs	r2, #6
 8004afe:	a802      	add	r0, sp, #8
 8004b00:	f005 fa9d 	bl	800a03e <memcpy>
	if (signing_streams == NULL) {
 8004b04:	f1b9 0f00 	cmp.w	r9, #0
 8004b08:	d056      	beq.n	8004bb8 <_Z17coop_thread_entryv+0x4a8>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8004b0a:	f8b9 3000 	ldrh.w	r3, [r9]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8004b0e:	f894 c007 	ldrb.w	ip, [r4, #7]
		    msg->compid == signing_streams->stream[i].compid &&
 8004b12:	7a21      	ldrb	r1, [r4, #8]
 8004b14:	464a      	mov	r2, r9
 8004b16:	b2b8      	uxth	r0, r7
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8004b18:	4283      	cmp	r3, r0
 8004b1a:	d90b      	bls.n	8004b34 <_Z17coop_thread_entryv+0x424>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8004b1c:	78d0      	ldrb	r0, [r2, #3]
 8004b1e:	4560      	cmp	r0, ip
 8004b20:	d105      	bne.n	8004b2e <_Z17coop_thread_entryv+0x41e>
 8004b22:	7910      	ldrb	r0, [r2, #4]
 8004b24:	4288      	cmp	r0, r1
 8004b26:	d102      	bne.n	8004b2e <_Z17coop_thread_entryv+0x41e>
		    msg->compid == signing_streams->stream[i].compid &&
 8004b28:	7890      	ldrb	r0, [r2, #2]
 8004b2a:	4558      	cmp	r0, fp
 8004b2c:	d030      	beq.n	8004b90 <_Z17coop_thread_entryv+0x480>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8004b2e:	3701      	adds	r7, #1
 8004b30:	3209      	adds	r2, #9
 8004b32:	e7f0      	b.n	8004b16 <_Z17coop_thread_entryv+0x406>
	if (i == signing_streams->num_signing_streams) {
 8004b34:	d12c      	bne.n	8004b90 <_Z17coop_thread_entryv+0x480>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d83e      	bhi.n	8004bb8 <_Z17coop_thread_entryv+0x4a8>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8004b3a:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
 8004b3e:	4937      	ldr	r1, [pc, #220]	; (8004c1c <_Z17coop_thread_entryv+0x50c>)
 8004b40:	1840      	adds	r0, r0, r1
 8004b42:	f142 0e00 	adc.w	lr, r2, #0
 8004b46:	e9d8 1202 	ldrd	r1, r2, [r8, #8]
 8004b4a:	4288      	cmp	r0, r1
 8004b4c:	eb7e 0202 	sbcs.w	r2, lr, r2
 8004b50:	d332      	bcc.n	8004bb8 <_Z17coop_thread_entryv+0x4a8>
		signing_streams->stream[i].sysid = msg->sysid;
 8004b52:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
 8004b56:	444a      	add	r2, r9
		signing_streams->num_signing_streams++;
 8004b58:	3301      	adds	r3, #1
		signing_streams->stream[i].sysid = msg->sysid;
 8004b5a:	f882 c003 	strb.w	ip, [r2, #3]
		signing_streams->stream[i].compid = msg->compid;
 8004b5e:	7a21      	ldrb	r1, [r4, #8]
 8004b60:	7111      	strb	r1, [r2, #4]
		signing_streams->stream[i].link_id = link_id;
 8004b62:	f882 b002 	strb.w	fp, [r2, #2]
		signing_streams->num_signing_streams++;
 8004b66:	f8a9 3000 	strh.w	r3, [r9]
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8004b6a:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 8004b6e:	1d78      	adds	r0, r7, #5
 8004b70:	4929      	ldr	r1, [pc, #164]	; (8004c18 <_Z17coop_thread_entryv+0x508>)
 8004b72:	2206      	movs	r2, #6
 8004b74:	4448      	add	r0, r9
 8004b76:	f005 fa62 	bl	800a03e <memcpy>
	if (tstamp.t64 > signing->timestamp) {
 8004b7a:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8004b7e:	e9d8 1202 	ldrd	r1, r2, [r8, #8]
 8004b82:	4281      	cmp	r1, r0
 8004b84:	419a      	sbcs	r2, r3
 8004b86:	d201      	bcs.n	8004b8c <_Z17coop_thread_entryv+0x47c>
		signing->timestamp = tstamp.t64;
 8004b88:	e9c8 0302 	strd	r0, r3, [r8, #8]
				status->msg_received = MAVLINK_FRAMING_OK;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e022      	b.n	8004bd6 <_Z17coop_thread_entryv+0x4c6>
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8004b90:	eb07 01c7 	add.w	r1, r7, r7, lsl #3
		last_tstamp.t64 = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	2200      	movs	r2, #0
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8004b98:	3105      	adds	r1, #5
		last_tstamp.t64 = 0;
 8004b9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8004b9e:	4449      	add	r1, r9
 8004ba0:	2206      	movs	r2, #6
 8004ba2:	a804      	add	r0, sp, #16
 8004ba4:	f005 fa4b 	bl	800a03e <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8004ba8:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8004bac:	e9dd 0204 	ldrd	r0, r2, [sp, #16]
 8004bb0:	4288      	cmp	r0, r1
 8004bb2:	eb72 0303 	sbcs.w	r3, r2, r3
 8004bb6:	d3d8      	bcc.n	8004b6a <_Z17coop_thread_entryv+0x45a>
			   	(status->signing->accept_unsigned_callback &&
 8004bb8:	692b      	ldr	r3, [r5, #16]
 8004bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			if (!sig_ok &&
 8004bbc:	b152      	cbz	r2, 8004bd4 <_Z17coop_thread_entryv+0x4c4>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8004bbe:	7aa1      	ldrb	r1, [r4, #10]
 8004bc0:	7a63      	ldrb	r3, [r4, #9]
 8004bc2:	4817      	ldr	r0, [pc, #92]	; (8004c20 <_Z17coop_thread_entryv+0x510>)
 8004bc4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004bc8:	7ae1      	ldrb	r1, [r4, #11]
 8004bca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8004bce:	4790      	blx	r2
			   	(status->signing->accept_unsigned_callback &&
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d1db      	bne.n	8004b8c <_Z17coop_thread_entryv+0x47c>
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	702b      	strb	r3, [r5, #0]
 8004bd8:	e6e4      	b.n	80049a4 <_Z17coop_thread_entryv+0x294>
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8004bda:	2a03      	cmp	r2, #3
 8004bdc:	f43f ade1 	beq.w	80047a2 <_Z17coop_thread_entryv+0x92>
		if (mavlink_parse_char(chan, c, &msg, &status)) {
 8004be0:	2a00      	cmp	r2, #0
 8004be2:	f43f ad9a 	beq.w	800471a <_Z17coop_thread_entryv+0xa>
			handle_message(msg);
 8004be6:	a831      	add	r0, sp, #196	; 0xc4
 8004be8:	f003 fc9e 	bl	8008528 <_Z14handle_messageR17__mavlink_message>
 8004bec:	e593      	b.n	8004716 <_Z17coop_thread_entryv+0x6>
 8004bee:	bf00      	nop
 8004bf0:	bb67ae85 	.word	0xbb67ae85
 8004bf4:	3c6ef372 	.word	0x3c6ef372
 8004bf8:	a54ff53a 	.word	0xa54ff53a
 8004bfc:	9b05688c 	.word	0x9b05688c
 8004c00:	510e527f 	.word	0x510e527f
 8004c04:	1f83d9ab 	.word	0x1f83d9ab
 8004c08:	2000184a 	.word	0x2000184a
 8004c0c:	2000195c 	.word	0x2000195c
 8004c10:	2000195e 	.word	0x2000195e
 8004c14:	20001965 	.word	0x20001965
 8004c18:	2000195f 	.word	0x2000195f
 8004c1c:	005b8d80 	.word	0x005b8d80
 8004c20:	20001548 	.word	0x20001548

08004c24 <main>:
		}
	}
}

void main(void)
{
 8004c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c28:	b0a9      	sub	sp, #164	; 0xa4
	const uint8_t SYS_IDS = 2;
	const uint8_t OUR_ID = 1;
	const uint8_t THEIR_ID = 2;
	// Coordinates of the Elbphilharmonie in Hamburg
	struct coordinates coords[SYS_IDS+1];
	coords[OUR_ID].sys_id = 1;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	coords[THEIR_ID].sys_id = 2;
 8004c30:	2302      	movs	r3, #2
 8004c32:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
	coords[THEIR_ID].latitude = 53.541350;
 8004c36:	4b31      	ldr	r3, [pc, #196]	; (8004cfc <main+0xd8>)
 8004c38:	9325      	str	r3, [sp, #148]	; 0x94
	coords[THEIR_ID].longitude = 9.985102;
 8004c3a:	4b31      	ldr	r3, [pc, #196]	; (8004d00 <main+0xdc>)
 8004c3c:	9326      	str	r3, [sp, #152]	; 0x98
	coords[THEIR_ID].altitude = 10.0;
 8004c3e:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <main+0xe0>)
 8004c40:	9327      	str	r3, [sp, #156]	; 0x9c
	console_init();
 8004c42:	f04f 0800 	mov.w	r8, #0
 8004c46:	f000 febf 	bl	80059c8 <console_init>

	struct k_timer timer;

	k_thread_create(&coop_thread, coop_stack, STACKSIZE,
 8004c4a:	f04f 0900 	mov.w	r9, #0
		/* coverity[OVERRUN] */
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8004c4e:	2400      	movs	r4, #0
 8004c50:	f06f 0308 	mvn.w	r3, #8
 8004c54:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8004c58:	492b      	ldr	r1, [pc, #172]	; (8004d08 <main+0xe4>)
 8004c5a:	4b2c      	ldr	r3, [pc, #176]	; (8004d0c <main+0xe8>)
 8004c5c:	482c      	ldr	r0, [pc, #176]	; (8004d10 <main+0xec>)
 8004c5e:	9400      	str	r4, [sp, #0]
 8004c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c64:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004c68:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004c6c:	f002 fc70 	bl	8007550 <z_impl_k_thread_create>
			(k_thread_entry_t) coop_thread_entry,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
	k_timer_init(&timer, NULL, NULL);
 8004c70:	4622      	mov	r2, r4
 8004c72:	4621      	mov	r1, r4
 8004c74:	a80a      	add	r0, sp, #40	; 0x28
 8004c76:	f005 f923 	bl	8009ec0 <k_timer_init>
		/* coverity[OVERRUN] */
		return (void *) arch_syscall_invoke3(*(uintptr_t *)&queue, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
 8004c7a:	4e26      	ldr	r6, [pc, #152]	; (8004d14 <main+0xf0>)
	while (1) {
		while((new_coords = reinterpret_cast<struct coordinates*>(k_fifo_get(&coords_fifo, K_NO_WAIT)))) {
			memcpy(&coords[new_coords->sys_id], new_coords, sizeof(struct coordinates));
			k_free(new_coords);
		}
		printk("%f meters at %f degrees towards Elbphilharmonie\n", 
 8004c7c:	4d26      	ldr	r5, [pc, #152]	; (8004d18 <main+0xf4>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2300      	movs	r3, #0
 8004c82:	4630      	mov	r0, r6
 8004c84:	f002 fcdc 	bl	8007640 <z_impl_k_queue_get>
		while((new_coords = reinterpret_cast<struct coordinates*>(k_fifo_get(&coords_fifo, K_NO_WAIT)))) {
 8004c88:	4604      	mov	r4, r0
 8004c8a:	b168      	cbz	r0, 8004ca8 <main+0x84>
			memcpy(&coords[new_coords->sys_id], new_coords, sizeof(struct coordinates));
 8004c8c:	7900      	ldrb	r0, [r0, #4]
 8004c8e:	ab19      	add	r3, sp, #100	; 0x64
 8004c90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c94:	2214      	movs	r2, #20
 8004c96:	4621      	mov	r1, r4
 8004c98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004c9c:	f005 f9cf 	bl	800a03e <memcpy>
			k_free(new_coords);
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f005 f949 	bl	8009f38 <k_free>
		while((new_coords = reinterpret_cast<struct coordinates*>(k_fifo_get(&coords_fifo, K_NO_WAIT)))) {
 8004ca6:	e7ea      	b.n	8004c7e <main+0x5a>
			calculate_distance(coords[OUR_ID], coords[THEIR_ID]),
 8004ca8:	a923      	add	r1, sp, #140	; 0x8c
 8004caa:	a81e      	add	r0, sp, #120	; 0x78
 8004cac:	f7fc f9f0 	bl	8001090 <_Z18calculate_distanceRK11coordinatesS1_>
			calculate_heading(coords[OUR_ID], coords[THEIR_ID])
 8004cb0:	a923      	add	r1, sp, #140	; 0x8c
 8004cb2:	a81e      	add	r0, sp, #120	; 0x78
			calculate_distance(coords[OUR_ID], coords[THEIR_ID]),
 8004cb4:	ee10 7a10 	vmov	r7, s0
			calculate_heading(coords[OUR_ID], coords[THEIR_ID])
 8004cb8:	f7fc f8e2 	bl	8000e80 <_Z17calculate_headingRK11coordinatesS1_>
		printk("%f meters at %f degrees towards Elbphilharmonie\n", 
 8004cbc:	4638      	mov	r0, r7
			calculate_heading(coords[OUR_ID], coords[THEIR_ID])
 8004cbe:	ee10 4a10 	vmov	r4, s0
		printk("%f meters at %f degrees towards Elbphilharmonie\n", 
 8004cc2:	f7fb fbc5 	bl	8000450 <__aeabi_f2d>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4620      	mov	r0, r4
 8004ccc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004cd0:	f7fb fbbe 	bl	8000450 <__aeabi_f2d>
 8004cd4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cd8:	e9cd 0100 	strd	r0, r1, [sp]
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f003 fc59 	bl	8008594 <printk>
	z_impl_k_timer_start(timer, duration, period);
 8004ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce6:	e9cd 8900 	strd	r8, r9, [sp]
 8004cea:	2300      	movs	r3, #0
 8004cec:	a80a      	add	r0, sp, #40	; 0x28
 8004cee:	f003 f99f 	bl	8008030 <z_impl_k_timer_start>
	return z_impl_k_timer_status_sync(timer);
 8004cf2:	a80a      	add	r0, sp, #40	; 0x28
 8004cf4:	f003 f9ea 	bl	80080cc <z_impl_k_timer_status_sync>
 8004cf8:	e7c1      	b.n	8004c7e <main+0x5a>
 8004cfa:	bf00      	nop
 8004cfc:	42562a58 	.word	0x42562a58
 8004d00:	411fc2fa 	.word	0x411fc2fa
 8004d04:	41200000 	.word	0x41200000
 8004d08:	20001d00 	.word	0x20001d00
 8004d0c:	08004711 	.word	0x08004711
 8004d10:	20000208 	.word	0x20000208
 8004d14:	200001f4 	.word	0x200001f4
 8004d18:	0800b4e6 	.word	0x0800b4e6

08004d1c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8004d1c:	680b      	ldr	r3, [r1, #0]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8004d22:	4b01      	ldr	r3, [pc, #4]	; (8004d28 <char_out+0xc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4718      	bx	r3
 8004d28:	20000000 	.word	0x20000000

08004d2c <__printk_hook_install>:
	_char_out = fn;
 8004d2c:	4b01      	ldr	r3, [pc, #4]	; (8004d34 <__printk_hook_install+0x8>)
 8004d2e:	6018      	str	r0, [r3, #0]
}
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000000 	.word	0x20000000

08004d38 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 8004d38:	b507      	push	{r0, r1, r2, lr}
 8004d3a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8004d3c:	2100      	movs	r1, #0
{
 8004d3e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 8004d40:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 8004d42:	4803      	ldr	r0, [pc, #12]	; (8004d50 <vprintk+0x18>)
 8004d44:	a901      	add	r1, sp, #4
 8004d46:	f7fc fabf 	bl	80012c8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 8004d4a:	b003      	add	sp, #12
 8004d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d50:	08004d1d 	.word	0x08004d1d

08004d54 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8004d54:	b530      	push	{r4, r5, lr}
 8004d56:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 8004d58:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
 8004d5c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8004d5e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
 8004d60:	a901      	add	r1, sp, #4
 8004d62:	4805      	ldr	r0, [pc, #20]	; (8004d78 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
 8004d64:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
 8004d66:	f7fc faaf 	bl	80012c8 <cbvprintf>

	if (ctx.count < ctx.max) {
 8004d6a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8004d6e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 8004d70:	bfb8      	it	lt
 8004d72:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 8004d74:	b005      	add	sp, #20
 8004d76:	bd30      	pop	{r4, r5, pc}
 8004d78:	0800856f 	.word	0x0800856f

08004d7c <extract_decimal>:
{
 8004d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (isdigit((int)(unsigned char)*sp)) {
 8004d7e:	4e09      	ldr	r6, [pc, #36]	; (8004da4 <extract_decimal+0x28>)
 8004d80:	6801      	ldr	r1, [r0, #0]
{
 8004d82:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
 8004d84:	270a      	movs	r7, #10
	size_t val = 0;
 8004d86:	2000      	movs	r0, #0
 8004d88:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
 8004d8a:	3101      	adds	r1, #1
 8004d8c:	7823      	ldrb	r3, [r4, #0]
 8004d8e:	5d9d      	ldrb	r5, [r3, r6]
 8004d90:	076d      	lsls	r5, r5, #29
 8004d92:	d401      	bmi.n	8004d98 <extract_decimal+0x1c>
	*str = sp;
 8004d94:	6014      	str	r4, [r2, #0]
}
 8004d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 8004d98:	fb07 3300 	mla	r3, r7, r0, r3
 8004d9c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004da0:	e7f2      	b.n	8004d88 <extract_decimal+0xc>
 8004da2:	bf00      	nop
 8004da4:	0800bcb8 	.word	0x0800bcb8

08004da8 <encode_uint>:
{
 8004da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dac:	4615      	mov	r5, r2
 8004dae:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8004db0:	78d3      	ldrb	r3, [r2, #3]
 8004db2:	4a22      	ldr	r2, [pc, #136]	; (8004e3c <encode_uint+0x94>)
 8004db4:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
 8004db8:	2b6f      	cmp	r3, #111	; 0x6f
{
 8004dba:	4680      	mov	r8, r0
 8004dbc:	460f      	mov	r7, r1
 8004dbe:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8004dc2:	d029      	beq.n	8004e18 <encode_uint+0x70>
 8004dc4:	d824      	bhi.n	8004e10 <encode_uint+0x68>
		return 16;
 8004dc6:	2b58      	cmp	r3, #88	; 0x58
 8004dc8:	bf14      	ite	ne
 8004dca:	260a      	movne	r6, #10
 8004dcc:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 8004dce:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8004dd2:	4632      	mov	r2, r6
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	4639      	mov	r1, r7
 8004dda:	f7fb fdf3 	bl	80009c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8004dde:	2a09      	cmp	r2, #9
 8004de0:	b2d4      	uxtb	r4, r2
 8004de2:	d81e      	bhi.n	8004e22 <encode_uint+0x7a>
 8004de4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8004de6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8004de8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8004dea:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8004dee:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8004df2:	d301      	bcc.n	8004df8 <encode_uint+0x50>
 8004df4:	45d1      	cmp	r9, sl
 8004df6:	d811      	bhi.n	8004e1c <encode_uint+0x74>
	if (conv->flag_hash) {
 8004df8:	782b      	ldrb	r3, [r5, #0]
 8004dfa:	069b      	lsls	r3, r3, #26
 8004dfc:	d505      	bpl.n	8004e0a <encode_uint+0x62>
		if (radix == 8) {
 8004dfe:	2e08      	cmp	r6, #8
 8004e00:	d115      	bne.n	8004e2e <encode_uint+0x86>
			conv->altform_0 = true;
 8004e02:	78ab      	ldrb	r3, [r5, #2]
 8004e04:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8004e08:	70ab      	strb	r3, [r5, #2]
}
 8004e0a:	4648      	mov	r0, r9
 8004e0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8004e10:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8004e14:	2b70      	cmp	r3, #112	; 0x70
 8004e16:	e7d7      	b.n	8004dc8 <encode_uint+0x20>
	switch (specifier) {
 8004e18:	2608      	movs	r6, #8
 8004e1a:	e7d8      	b.n	8004dce <encode_uint+0x26>
		value /= radix;
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	460f      	mov	r7, r1
 8004e20:	e7d7      	b.n	8004dd2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8004e22:	f1bb 0f01 	cmp.w	fp, #1
 8004e26:	bf0c      	ite	eq
 8004e28:	3437      	addeq	r4, #55	; 0x37
 8004e2a:	3457      	addne	r4, #87	; 0x57
 8004e2c:	e7db      	b.n	8004de6 <encode_uint+0x3e>
		} else if (radix == 16) {
 8004e2e:	2e10      	cmp	r6, #16
 8004e30:	d1eb      	bne.n	8004e0a <encode_uint+0x62>
			conv->altform_0c = true;
 8004e32:	78ab      	ldrb	r3, [r5, #2]
 8004e34:	f043 0310 	orr.w	r3, r3, #16
 8004e38:	e7e6      	b.n	8004e08 <encode_uint+0x60>
 8004e3a:	bf00      	nop
 8004e3c:	0800bcb8 	.word	0x0800bcb8

08004e40 <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8004e40:	f04f 0210 	mov.w	r2, #16
 8004e44:	f3ef 8311 	mrs	r3, BASEPRI
 8004e48:	f382 8811 	msr	BASEPRI, r2
 8004e4c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8004e58:	4b02      	ldr	r3, [pc, #8]	; (8004e64 <st_stm32f4_init+0x24>)
 8004e5a:	4a03      	ldr	r2, [pc, #12]	; (8004e68 <st_stm32f4_init+0x28>)
 8004e5c:	601a      	str	r2, [r3, #0]

	return 0;
}
 8004e5e:	2000      	movs	r0, #0
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000054 	.word	0x20000054
 8004e68:	00f42400 	.word	0x00f42400

08004e6c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8004e6c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8004e6e:	4910      	ldr	r1, [pc, #64]	; (8004eb0 <enable_logger+0x44>)
 8004e70:	4810      	ldr	r0, [pc, #64]	; (8004eb4 <enable_logger+0x48>)
{
 8004e72:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8004e74:	2200      	movs	r2, #0
 8004e76:	f005 f823 	bl	8009ec0 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8004e7a:	4d0f      	ldr	r5, [pc, #60]	; (8004eb8 <enable_logger+0x4c>)
 8004e7c:	490f      	ldr	r1, [pc, #60]	; (8004ebc <enable_logger+0x50>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2300      	movs	r3, #0
 8004e82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004e86:	2400      	movs	r4, #0
 8004e88:	230e      	movs	r3, #14
 8004e8a:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8004e8e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004e92:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <enable_logger+0x54>)
 8004e94:	9400      	str	r4, [sp, #0]
 8004e96:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f002 fb58 	bl	8007550 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8004ea0:	4908      	ldr	r1, [pc, #32]	; (8004ec4 <enable_logger+0x58>)
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f004 fe27 	bl	8009af6 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	b009      	add	sp, #36	; 0x24
 8004eac:	bd30      	pop	{r4, r5, pc}
 8004eae:	bf00      	nop
 8004eb0:	08004ec9 	.word	0x08004ec9
 8004eb4:	200002c8 	.word	0x200002c8
 8004eb8:	20000300 	.word	0x20000300
 8004ebc:	20002180 	.word	0x20002180
 8004ec0:	08005299 	.word	0x08005299
 8004ec4:	0800b51d 	.word	0x0800b51d

08004ec8 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8004ec8:	4801      	ldr	r0, [pc, #4]	; (8004ed0 <log_process_thread_timer_expiry_fn+0x8>)
 8004eca:	f002 bbeb 	b.w	80076a4 <z_impl_k_sem_give>
 8004ece:	bf00      	nop
 8004ed0:	200001e4 	.word	0x200001e4

08004ed4 <z_log_get_s_mask>:
{
 8004ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed6:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
 8004ed8:	4e0f      	ldr	r6, [pc, #60]	; (8004f18 <z_log_get_s_mask+0x44>)
	uint32_t mask = 0U;
 8004eda:	2000      	movs	r0, #0
	uint32_t arg = 0U;
 8004edc:	4603      	mov	r3, r0
	bool arm = false;
 8004ede:	4602      	mov	r2, r0
				mask |= BIT(arg);
 8004ee0:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
 8004ee2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ee6:	b10c      	cbz	r4, 8004eec <z_log_get_s_mask+0x18>
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	d300      	bcc.n	8004eee <z_log_get_s_mask+0x1a>
}
 8004eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
 8004eee:	2c25      	cmp	r4, #37	; 0x25
 8004ef0:	d102      	bne.n	8004ef8 <z_log_get_s_mask+0x24>
			arm = !arm;
 8004ef2:	f082 0201 	eor.w	r2, r2, #1
 8004ef6:	e7f4      	b.n	8004ee2 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
 8004ef8:	2a00      	cmp	r2, #0
 8004efa:	d0f2      	beq.n	8004ee2 <z_log_get_s_mask+0xe>
 8004efc:	f814 c006 	ldrb.w	ip, [r4, r6]
 8004f00:	f01c 0f03 	tst.w	ip, #3
 8004f04:	d0ed      	beq.n	8004ee2 <z_log_get_s_mask+0xe>
			if (curr == 's') {
 8004f06:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
 8004f08:	bf04      	itt	eq
 8004f0a:	fa07 f203 	lsleq.w	r2, r7, r3
 8004f0e:	4310      	orreq	r0, r2
			arg++;
 8004f10:	3301      	adds	r3, #1
			arm = false;
 8004f12:	2200      	movs	r2, #0
 8004f14:	e7e5      	b.n	8004ee2 <z_log_get_s_mask+0xe>
 8004f16:	bf00      	nop
 8004f18:	0800bcb8 	.word	0x0800bcb8

08004f1c <log_core_init>:
{
 8004f1c:	b510      	push	{r4, lr}
	panic_mode = false;
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <log_core_init+0x30>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_lf_get_timestamp;
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <log_core_init+0x34>)
 8004f26:	4a0b      	ldr	r2, [pc, #44]	; (8004f54 <log_core_init+0x38>)
 8004f28:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8004f2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f2e:	f000 fcc7 	bl	80058c0 <log_output_timestamp_freq_set>
		log_msg_pool_init();
 8004f32:	f000 fa75 	bl	8005420 <log_msg_pool_init>
		log_list_init(&list);
 8004f36:	4808      	ldr	r0, [pc, #32]	; (8004f58 <log_core_init+0x3c>)
 8004f38:	f003 fe4c 	bl	8008bd4 <log_list_init>
}
 8004f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8004f40:	4906      	ldr	r1, [pc, #24]	; (8004f5c <log_core_init+0x40>)
 8004f42:	4807      	ldr	r0, [pc, #28]	; (8004f60 <log_core_init+0x44>)
 8004f44:	2320      	movs	r3, #32
 8004f46:	2228      	movs	r2, #40	; 0x28
 8004f48:	f004 bd8a 	b.w	8009a60 <k_mem_slab_init>
 8004f4c:	20001cd5 	.word	0x20001cd5
 8004f50:	20000004 	.word	0x20000004
 8004f54:	08008c13 	.word	0x08008c13
 8004f58:	200015b4 	.word	0x200015b4
 8004f5c:	20003380 	.word	0x20003380
 8004f60:	200015bc 	.word	0x200015bc

08004f64 <get_msg>:
{
 8004f64:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004f66:	f04f 0310 	mov.w	r3, #16
 8004f6a:	f3ef 8411 	mrs	r4, BASEPRI
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
 8004f76:	4804      	ldr	r0, [pc, #16]	; (8004f88 <get_msg+0x24>)
 8004f78:	f003 fe3c 	bl	8008bf4 <log_list_head_get>
	__asm__ volatile(
 8004f7c:	f384 8811 	msr	BASEPRI, r4
 8004f80:	f3bf 8f6f 	isb	sy
}
 8004f84:	bd10      	pop	{r4, pc}
 8004f86:	bf00      	nop
 8004f88:	200015b4 	.word	0x200015b4

08004f8c <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8004f8c:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <z_log_dropped+0x1c>)
 8004f8e:	f3bf 8f5b 	dmb	ish
 8004f92:	e853 2f00 	ldrex	r2, [r3]
 8004f96:	3201      	adds	r2, #1
 8004f98:	e843 2100 	strex	r1, r2, [r3]
 8004f9c:	2900      	cmp	r1, #0
 8004f9e:	d1f8      	bne.n	8004f92 <z_log_dropped+0x6>
 8004fa0:	f3bf 8f5b 	dmb	ish
}
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	200015ac 	.word	0x200015ac

08004fac <z_log_dropped_read_and_clear>:
}
 8004fac:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8004fae:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <z_log_dropped_read_and_clear+0x1c>)
 8004fb0:	f3bf 8f5b 	dmb	ish
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	e853 0f00 	ldrex	r0, [r3]
 8004fba:	e843 2100 	strex	r1, r2, [r3]
 8004fbe:	2900      	cmp	r1, #0
 8004fc0:	d1f9      	bne.n	8004fb6 <z_log_dropped_read_and_clear+0xa>
 8004fc2:	f3bf 8f5b 	dmb	ish
 8004fc6:	4770      	bx	lr
 8004fc8:	200015ac 	.word	0x200015ac

08004fcc <dropped_notify>:
{
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8004fce:	f7ff ffed 	bl	8004fac <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8004fd2:	4c0a      	ldr	r4, [pc, #40]	; (8004ffc <dropped_notify+0x30>)
 8004fd4:	4d0a      	ldr	r5, [pc, #40]	; (8005000 <dropped_notify+0x34>)
 8004fd6:	1b2d      	subs	r5, r5, r4
 8004fd8:	4607      	mov	r7, r0
 8004fda:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8004fdc:	2600      	movs	r6, #0
 8004fde:	42ae      	cmp	r6, r5
 8004fe0:	db00      	blt.n	8004fe4 <dropped_notify+0x18>
}
 8004fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8004fe4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8004fe6:	795b      	ldrb	r3, [r3, #5]
 8004fe8:	b12b      	cbz	r3, 8004ff6 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	b113      	cbz	r3, 8004ff6 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
 8004ff0:	4639      	mov	r1, r7
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8004ff6:	3601      	adds	r6, #1
 8004ff8:	3410      	adds	r4, #16
 8004ffa:	e7f0      	b.n	8004fde <dropped_notify+0x12>
 8004ffc:	0800a418 	.word	0x0800a418
 8005000:	0800a428 	.word	0x0800a428

08005004 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8005004:	4a04      	ldr	r2, [pc, #16]	; (8005018 <log_source_name_get+0x14>)
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <log_source_name_get+0x18>)
 8005008:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 800500a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 800500e:	bf34      	ite	cc
 8005010:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
 8005014:	2000      	movcs	r0, #0
}
 8005016:	4770      	bx	lr
 8005018:	0800a3f0 	.word	0x0800a3f0
 800501c:	0800a418 	.word	0x0800a418

08005020 <log_backend_enable>:
	id += backend - log_backend_get(0);
 8005020:	4a09      	ldr	r2, [pc, #36]	; (8005048 <log_backend_enable+0x28>)
	backend->cb->id = id;
 8005022:	6843      	ldr	r3, [r0, #4]
 8005024:	1a80      	subs	r0, r0, r2
{
 8005026:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
 8005028:	1100      	asrs	r0, r0, #4
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 800502a:	4c08      	ldr	r4, [pc, #32]	; (800504c <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
 800502c:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
 800502e:	3001      	adds	r0, #1
	backend->cb->active = true;
 8005030:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
 8005032:	7118      	strb	r0, [r3, #4]
 8005034:	715a      	strb	r2, [r3, #5]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8005036:	7823      	ldrb	r3, [r4, #0]
 8005038:	b913      	cbnz	r3, 8005040 <log_backend_enable+0x20>
 800503a:	4805      	ldr	r0, [pc, #20]	; (8005050 <log_backend_enable+0x30>)
 800503c:	f002 fb32 	bl	80076a4 <z_impl_k_sem_give>
	backend_attached = true;
 8005040:	2301      	movs	r3, #1
 8005042:	7023      	strb	r3, [r4, #0]
}
 8005044:	bd10      	pop	{r4, pc}
 8005046:	bf00      	nop
 8005048:	0800a418 	.word	0x0800a418
 800504c:	20001cd4 	.word	0x20001cd4
 8005050:	200001e4 	.word	0x200001e4

08005054 <log_init>:
{
 8005054:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8005056:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <log_init+0x4c>)
 8005058:	f3bf 8f5b 	dmb	ish
 800505c:	e853 5f00 	ldrex	r5, [r3]
 8005060:	1c6a      	adds	r2, r5, #1
 8005062:	e843 2100 	strex	r1, r2, [r3]
 8005066:	2900      	cmp	r1, #0
 8005068:	d1f8      	bne.n	800505c <log_init+0x8>
 800506a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 800506e:	b92d      	cbnz	r5, 800507c <log_init+0x28>
	return __log_backends_end - __log_backends_start;
 8005070:	4c0c      	ldr	r4, [pc, #48]	; (80050a4 <log_init+0x50>)
 8005072:	4e0d      	ldr	r6, [pc, #52]	; (80050a8 <log_init+0x54>)
 8005074:	1b36      	subs	r6, r6, r4
 8005076:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8005078:	42b5      	cmp	r5, r6
 800507a:	db00      	blt.n	800507e <log_init+0x2a>
}
 800507c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 800507e:	7b23      	ldrb	r3, [r4, #12]
 8005080:	b153      	cbz	r3, 8005098 <log_init+0x44>
			if (backend->api->init != NULL) {
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	b10b      	cbz	r3, 800508c <log_init+0x38>
				backend->api->init(backend);
 8005088:	4620      	mov	r0, r4
 800508a:	4798      	blx	r3
			log_backend_enable(backend,
 800508c:	6863      	ldr	r3, [r4, #4]
 800508e:	2204      	movs	r2, #4
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	4620      	mov	r0, r4
 8005094:	f7ff ffc4 	bl	8005020 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8005098:	3501      	adds	r5, #1
 800509a:	3410      	adds	r4, #16
 800509c:	e7ec      	b.n	8005078 <log_init+0x24>
 800509e:	bf00      	nop
 80050a0:	200015b0 	.word	0x200015b0
 80050a4:	0800a418 	.word	0x0800a418
 80050a8:	0800a428 	.word	0x0800a428

080050ac <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
 80050ac:	4b17      	ldr	r3, [pc, #92]	; (800510c <z_log_strdup+0x60>)
 80050ae:	4298      	cmp	r0, r3
{
 80050b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050b2:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 80050b4:	d302      	bcc.n	80050bc <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 80050b6:	4b16      	ldr	r3, [pc, #88]	; (8005110 <z_log_strdup+0x64>)
 80050b8:	4298      	cmp	r0, r3
 80050ba:	d321      	bcc.n	8005100 <z_log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 80050bc:	4815      	ldr	r0, [pc, #84]	; (8005114 <z_log_strdup+0x68>)
 80050be:	2200      	movs	r2, #0
 80050c0:	2300      	movs	r3, #0
 80050c2:	a901      	add	r1, sp, #4
 80050c4:	f002 f9e4 	bl	8007490 <k_mem_slab_alloc>
	if (err != 0) {
 80050c8:	4605      	mov	r5, r0
 80050ca:	b9e0      	cbnz	r0, 8005106 <z_log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80050cc:	2201      	movs	r2, #1
 80050ce:	9b01      	ldr	r3, [sp, #4]
 80050d0:	f3bf 8f5b 	dmb	ish
 80050d4:	e853 1f00 	ldrex	r1, [r3]
 80050d8:	e843 2000 	strex	r0, r2, [r3]
 80050dc:	2800      	cmp	r0, #0
 80050de:	d1f9      	bne.n	80050d4 <z_log_strdup+0x28>
 80050e0:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 80050e4:	9e01      	ldr	r6, [sp, #4]
 80050e6:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 80050e8:	221f      	movs	r2, #31
 80050ea:	4618      	mov	r0, r3
 80050ec:	4621      	mov	r1, r4
 80050ee:	f004 ffbc 	bl	800a06a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 80050f2:	227e      	movs	r2, #126	; 0x7e
 80050f4:	4603      	mov	r3, r0
 80050f6:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 80050fa:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
 80050fe:	461c      	mov	r4, r3
}
 8005100:	4620      	mov	r0, r4
 8005102:	b002      	add	sp, #8
 8005104:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
 8005106:	4b04      	ldr	r3, [pc, #16]	; (8005118 <z_log_strdup+0x6c>)
 8005108:	e7f9      	b.n	80050fe <z_log_strdup+0x52>
 800510a:	bf00      	nop
 800510c:	0800a0b0 	.word	0x0800a0b0
 8005110:	0800bdb8 	.word	0x0800bdb8
 8005114:	200015bc 	.word	0x200015bc
 8005118:	0800b525 	.word	0x0800b525

0800511c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 800511c:	b150      	cbz	r0, 8005134 <log_is_strdup+0x18>
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <log_is_strdup+0x1c>)
 8005120:	4298      	cmp	r0, r3
 8005122:	d306      	bcc.n	8005132 <log_is_strdup+0x16>
 8005124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005128:	4298      	cmp	r0, r3
 800512a:	bf2c      	ite	cs
 800512c:	2000      	movcs	r0, #0
 800512e:	2001      	movcc	r0, #1
 8005130:	4770      	bx	lr
 8005132:	2000      	movs	r0, #0
}
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20003380 	.word	0x20003380

0800513c <z_impl_log_process>:
{
 800513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
 8005140:	4b47      	ldr	r3, [pc, #284]	; (8005260 <z_impl_log_process+0x124>)
 8005142:	781b      	ldrb	r3, [r3, #0]
{
 8005144:	b085      	sub	sp, #20
 8005146:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8005148:	b903      	cbnz	r3, 800514c <z_impl_log_process+0x10>
 800514a:	b300      	cbz	r0, 800518e <z_impl_log_process+0x52>
	msg = get_msg();
 800514c:	f7ff ff0a 	bl	8004f64 <get_msg>
	if (msg.msg) {
 8005150:	4605      	mov	r5, r0
 8005152:	b178      	cbz	r0, 8005174 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8005154:	f3bf 8f5b 	dmb	ish
 8005158:	4b42      	ldr	r3, [pc, #264]	; (8005264 <z_impl_log_process+0x128>)
 800515a:	e853 2f00 	ldrex	r2, [r3]
 800515e:	3a01      	subs	r2, #1
 8005160:	e843 2100 	strex	r1, r2, [r3]
 8005164:	2900      	cmp	r1, #0
 8005166:	d1f8      	bne.n	800515a <z_impl_log_process+0x1e>
 8005168:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
 800516c:	b19c      	cbz	r4, 8005196 <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
 800516e:	4628      	mov	r0, r5
 8005170:	f003 fe47 	bl	8008e02 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
 8005174:	b92c      	cbnz	r4, 8005182 <z_impl_log_process+0x46>
	return dropped_cnt > 0;
 8005176:	4b3c      	ldr	r3, [pc, #240]	; (8005268 <z_impl_log_process+0x12c>)
	if (!bypass && z_log_dropped_pending()) {
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	dd01      	ble.n	8005182 <z_impl_log_process+0x46>
		dropped_notify();
 800517e:	f7ff ff25 	bl	8004fcc <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
 8005182:	483a      	ldr	r0, [pc, #232]	; (800526c <z_impl_log_process+0x130>)
 8005184:	f003 fd34 	bl	8008bf0 <log_list_head_peek>
 8005188:	1e04      	subs	r4, r0, #0
 800518a:	bf18      	it	ne
 800518c:	2401      	movne	r4, #1
}
 800518e:	4620      	mov	r0, r4
 8005190:	b005      	add	sp, #20
 8005192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
 8005196:	4b36      	ldr	r3, [pc, #216]	; (8005270 <z_impl_log_process+0x134>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	b9e3      	cbnz	r3, 80051d6 <z_impl_log_process+0x9a>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 800519c:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
 800519e:	07db      	lsls	r3, r3, #31
 80051a0:	d419      	bmi.n	80051d6 <z_impl_log_process+0x9a>
	msg_str = log_msg_str_get(msg);
 80051a2:	f003 fe41 	bl	8008e28 <log_msg_str_get>
 80051a6:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 80051a8:	4628      	mov	r0, r5
 80051aa:	f003 fe08 	bl	8008dbe <log_msg_nargs_get>
 80051ae:	4601      	mov	r1, r0
 80051b0:	4638      	mov	r0, r7
 80051b2:	f7ff fe8f 	bl	8004ed4 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 80051b6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8005290 <z_impl_log_process+0x154>
 80051ba:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <z_impl_log_process+0x138>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 80051bc:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8005294 <z_impl_log_process+0x158>
 80051c0:	eba3 0308 	sub.w	r3, r3, r8
 80051c4:	08db      	lsrs	r3, r3, #3
 80051c6:	9303      	str	r3, [sp, #12]
 80051c8:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <z_impl_log_process+0x13c>)
 80051ca:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 80051ce:	4606      	mov	r6, r0
 80051d0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
 80051d4:	b936      	cbnz	r6, 80051e4 <z_impl_log_process+0xa8>
 80051d6:	4e29      	ldr	r6, [pc, #164]	; (800527c <z_impl_log_process+0x140>)
 80051d8:	4f29      	ldr	r7, [pc, #164]	; (8005280 <z_impl_log_process+0x144>)
 80051da:	1bbf      	subs	r7, r7, r6
 80051dc:	113f      	asrs	r7, r7, #4
 80051de:	f04f 0800 	mov.w	r8, #0
 80051e2:	e03a      	b.n	800525a <z_impl_log_process+0x11e>
		idx = 31 - __builtin_clz(mask);
 80051e4:	fab6 f186 	clz	r1, r6
 80051e8:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 80051ec:	4649      	mov	r1, r9
 80051ee:	4628      	mov	r0, r5
 80051f0:	f003 fde8 	bl	8008dc4 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
 80051f4:	4b23      	ldr	r3, [pc, #140]	; (8005284 <z_impl_log_process+0x148>)
 80051f6:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
 80051f8:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 80051fa:	d302      	bcc.n	8005202 <z_impl_log_process+0xc6>
		if (!is_rodata(str) && !log_is_strdup(str) &&
 80051fc:	4a22      	ldr	r2, [pc, #136]	; (8005288 <z_impl_log_process+0x14c>)
 80051fe:	4290      	cmp	r0, r2
 8005200:	d31a      	bcc.n	8005238 <z_impl_log_process+0xfc>
 8005202:	4608      	mov	r0, r1
 8005204:	f7ff ff8a 	bl	800511c <log_is_strdup>
 8005208:	4602      	mov	r2, r0
 800520a:	b9a8      	cbnz	r0, 8005238 <z_impl_log_process+0xfc>
 800520c:	4b1f      	ldr	r3, [pc, #124]	; (800528c <z_impl_log_process+0x150>)
 800520e:	4299      	cmp	r1, r3
 8005210:	d012      	beq.n	8005238 <z_impl_log_process+0xfc>
	return msg->hdr.ids.source_id;
 8005212:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8005214:	9903      	ldr	r1, [sp, #12]
 8005216:	f3c3 1389 	ubfx	r3, r3, #6, #10
 800521a:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
 800521c:	bf38      	it	cc
 800521e:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8005222:	ea4f 138a 	mov.w	r3, sl, lsl #6
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	f8ad 3000 	strh.w	r3, [sp]
 800522e:	4649      	mov	r1, r9
 8005230:	463b      	mov	r3, r7
 8005232:	4658      	mov	r0, fp
 8005234:	f003 fd36 	bl	8008ca4 <log_3>
		mask &= ~BIT(idx);
 8005238:	2301      	movs	r3, #1
 800523a:	fa03 f109 	lsl.w	r1, r3, r9
 800523e:	ea26 0601 	bic.w	r6, r6, r1
 8005242:	e7c7      	b.n	80051d4 <z_impl_log_process+0x98>
	return backend->cb->active;
 8005244:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
 8005246:	795b      	ldrb	r3, [r3, #5]
 8005248:	b123      	cbz	r3, 8005254 <z_impl_log_process+0x118>
	backend->api->put(backend, msg);
 800524a:	6833      	ldr	r3, [r6, #0]
 800524c:	4629      	mov	r1, r5
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4630      	mov	r0, r6
 8005252:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 8005254:	f108 0801 	add.w	r8, r8, #1
 8005258:	3610      	adds	r6, #16
 800525a:	45b8      	cmp	r8, r7
 800525c:	dbf2      	blt.n	8005244 <z_impl_log_process+0x108>
 800525e:	e786      	b.n	800516e <z_impl_log_process+0x32>
 8005260:	20001cd4 	.word	0x20001cd4
 8005264:	200015a8 	.word	0x200015a8
 8005268:	200015ac 	.word	0x200015ac
 800526c:	200015b4 	.word	0x200015b4
 8005270:	20001cd5 	.word	0x20001cd5
 8005274:	0800a418 	.word	0x0800a418
 8005278:	0800a3f0 	.word	0x0800a3f0
 800527c:	0800a418 	.word	0x0800a418
 8005280:	0800a428 	.word	0x0800a428
 8005284:	0800a0b0 	.word	0x0800a0b0
 8005288:	0800bdb8 	.word	0x0800bdb8
 800528c:	0800b525 	.word	0x0800b525
 8005290:	0800a3f0 	.word	0x0800a3f0
 8005294:	0800b53f 	.word	0x0800b53f

08005298 <log_process_thread_func>:
{
 8005298:	b510      	push	{r4, lr}
	log_init();
 800529a:	f7ff fedb 	bl	8005054 <log_init>
	return z_impl_k_current_get();
 800529e:	f002 fce7 	bl	8007c70 <z_impl_k_current_get>
	proc_tid = process_tid;
 80052a2:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <log_process_thread_func+0x3c>)
 80052a4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 80052a6:	b130      	cbz	r0, 80052b6 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <log_process_thread_func+0x40>)
	    process_tid &&
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b09      	cmp	r3, #9
 80052ae:	dd02      	ble.n	80052b6 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
 80052b0:	480a      	ldr	r0, [pc, #40]	; (80052dc <log_process_thread_func+0x44>)
 80052b2:	f002 f9f7 	bl	80076a4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 80052b6:	4c09      	ldr	r4, [pc, #36]	; (80052dc <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 80052b8:	2000      	movs	r0, #0
 80052ba:	f7ff ff3f 	bl	800513c <z_impl_log_process>
		if (log_process(false) == false) {
 80052be:	2800      	cmp	r0, #0
 80052c0:	d1fa      	bne.n	80052b8 <log_process_thread_func+0x20>
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ca:	4620      	mov	r0, r4
 80052cc:	f002 fa0a 	bl	80076e4 <z_impl_k_sem_take>
 80052d0:	e7f2      	b.n	80052b8 <log_process_thread_func+0x20>
 80052d2:	bf00      	nop
 80052d4:	200015dc 	.word	0x200015dc
 80052d8:	200015a8 	.word	0x200015a8
 80052dc:	200001e4 	.word	0x200001e4

080052e0 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
 80052e0:	4b29      	ldr	r3, [pc, #164]	; (8005388 <msg_finalize+0xa8>)
{
 80052e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
 80052e4:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
 80052e6:	8141      	strh	r1, [r0, #10]
{
 80052e8:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 80052ea:	4798      	blx	r3
 80052ec:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 80052ee:	f04f 0310 	mov.w	r3, #16
 80052f2:	f3ef 8511 	mrs	r5, BASEPRI
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80052fe:	4823      	ldr	r0, [pc, #140]	; (800538c <msg_finalize+0xac>)
 8005300:	4621      	mov	r1, r4
 8005302:	f003 fc6b 	bl	8008bdc <log_list_add_tail>
	__asm__ volatile(
 8005306:	f385 8811 	msr	BASEPRI, r5
 800530a:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800530e:	f3bf 8f5b 	dmb	ish
 8005312:	4b1f      	ldr	r3, [pc, #124]	; (8005390 <msg_finalize+0xb0>)
 8005314:	e853 2f00 	ldrex	r2, [r3]
 8005318:	3201      	adds	r2, #1
 800531a:	e843 2100 	strex	r1, r2, [r3]
 800531e:	2900      	cmp	r1, #0
 8005320:	d1f8      	bne.n	8005314 <msg_finalize+0x34>
 8005322:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8005326:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <msg_finalize+0xb4>)
 8005328:	7812      	ldrb	r2, [r2, #0]
 800532a:	b182      	cbz	r2, 800534e <msg_finalize+0x6e>
	__asm__ volatile(
 800532c:	f04f 0310 	mov.w	r3, #16
 8005330:	f3ef 8411 	mrs	r4, BASEPRI
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	2000      	movs	r0, #0
 800533e:	f7ff fefd 	bl	800513c <z_impl_log_process>
	__asm__ volatile(
 8005342:	f384 8811 	msr	BASEPRI, r4
 8005346:	f3bf 8f6f 	isb	sy
}
 800534a:	b003      	add	sp, #12
 800534c:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 800534e:	4a12      	ldr	r2, [pc, #72]	; (8005398 <msg_finalize+0xb8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	2a00      	cmp	r2, #0
 8005356:	d0f8      	beq.n	800534a <msg_finalize+0x6a>
 8005358:	2b01      	cmp	r3, #1
 800535a:	d10a      	bne.n	8005372 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
 800535c:	2200      	movs	r2, #0
 800535e:	2300      	movs	r3, #0
 8005360:	e9cd 2300 	strd	r2, r3, [sp]
 8005364:	480d      	ldr	r0, [pc, #52]	; (800539c <msg_finalize+0xbc>)
 8005366:	f242 7210 	movw	r2, #10000	; 0x2710
 800536a:	2300      	movs	r3, #0
 800536c:	f002 fe60 	bl	8008030 <z_impl_k_timer_start>
 8005370:	e7eb      	b.n	800534a <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8005372:	2b0a      	cmp	r3, #10
 8005374:	d1e9      	bne.n	800534a <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
 8005376:	4809      	ldr	r0, [pc, #36]	; (800539c <msg_finalize+0xbc>)
 8005378:	f004 fdae 	bl	8009ed8 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 800537c:	4808      	ldr	r0, [pc, #32]	; (80053a0 <msg_finalize+0xc0>)
}
 800537e:	b003      	add	sp, #12
 8005380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005384:	f002 b98e 	b.w	80076a4 <z_impl_k_sem_give>
 8005388:	20000004 	.word	0x20000004
 800538c:	200015b4 	.word	0x200015b4
 8005390:	200015a8 	.word	0x200015a8
 8005394:	20001cd5 	.word	0x20001cd5
 8005398:	200015dc 	.word	0x200015dc
 800539c:	200002c8 	.word	0x200002c8
 80053a0:	200001e4 	.word	0x200001e4

080053a4 <z_impl_log_panic>:
{
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 80053a6:	4f0e      	ldr	r7, [pc, #56]	; (80053e0 <z_impl_log_panic+0x3c>)
 80053a8:	783d      	ldrb	r5, [r7, #0]
 80053aa:	b975      	cbnz	r5, 80053ca <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
 80053ac:	4c0d      	ldr	r4, [pc, #52]	; (80053e4 <z_impl_log_panic+0x40>)
 80053ae:	4e0e      	ldr	r6, [pc, #56]	; (80053e8 <z_impl_log_panic+0x44>)
	log_init();
 80053b0:	f7ff fe50 	bl	8005054 <log_init>
 80053b4:	1b36      	subs	r6, r6, r4
 80053b6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 80053b8:	42b5      	cmp	r5, r6
 80053ba:	db07      	blt.n	80053cc <z_impl_log_panic+0x28>
 80053bc:	2000      	movs	r0, #0
 80053be:	f7ff febd 	bl	800513c <z_impl_log_process>
		while (log_process(false) == true) {
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d1fa      	bne.n	80053bc <z_impl_log_panic+0x18>
	panic_mode = true;
 80053c6:	2301      	movs	r3, #1
 80053c8:	703b      	strb	r3, [r7, #0]
}
 80053ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 80053cc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 80053ce:	795b      	ldrb	r3, [r3, #5]
 80053d0:	b11b      	cbz	r3, 80053da <z_impl_log_panic+0x36>
	backend->api->panic(backend);
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	4620      	mov	r0, r4
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 80053da:	3501      	adds	r5, #1
 80053dc:	3410      	adds	r4, #16
 80053de:	e7eb      	b.n	80053b8 <z_impl_log_panic+0x14>
 80053e0:	20001cd5 	.word	0x20001cd5
 80053e4:	0800a418 	.word	0x0800a418
 80053e8:	0800a428 	.word	0x0800a428

080053ec <log_free>:
{
 80053ec:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 80053ee:	3804      	subs	r0, #4
 80053f0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80053f2:	f3bf 8f5b 	dmb	ish
 80053f6:	e850 3f00 	ldrex	r3, [r0]
 80053fa:	1e5a      	subs	r2, r3, #1
 80053fc:	e840 2100 	strex	r1, r2, [r0]
 8005400:	2900      	cmp	r1, #0
 8005402:	d1f8      	bne.n	80053f6 <log_free+0xa>
 8005404:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 8005408:	2b01      	cmp	r3, #1
 800540a:	d103      	bne.n	8005414 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 800540c:	4803      	ldr	r0, [pc, #12]	; (800541c <log_free+0x30>)
 800540e:	a901      	add	r1, sp, #4
 8005410:	f004 fb42 	bl	8009a98 <k_mem_slab_free>
}
 8005414:	b003      	add	sp, #12
 8005416:	f85d fb04 	ldr.w	pc, [sp], #4
 800541a:	bf00      	nop
 800541c:	200015bc 	.word	0x200015bc

08005420 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 8005420:	2320      	movs	r3, #32
 8005422:	4902      	ldr	r1, [pc, #8]	; (800542c <log_msg_pool_init+0xc>)
 8005424:	4802      	ldr	r0, [pc, #8]	; (8005430 <log_msg_pool_init+0x10>)
 8005426:	461a      	mov	r2, r3
 8005428:	f004 bb1a 	b.w	8009a60 <k_mem_slab_init>
 800542c:	20003880 	.word	0x20003880
 8005430:	200015e0 	.word	0x200015e0

08005434 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 8005434:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
 8005436:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
 8005438:	4d09      	ldr	r5, [pc, #36]	; (8005460 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	2001      	movs	r0, #1
 800543e:	f7ff fe7d 	bl	800513c <z_impl_log_process>
 8005442:	4604      	mov	r4, r0
			z_log_dropped();
 8005444:	f7ff fda2 	bl	8004f8c <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 8005448:	2200      	movs	r2, #0
 800544a:	2300      	movs	r3, #0
 800544c:	a901      	add	r1, sp, #4
 800544e:	4628      	mov	r0, r5
 8005450:	f002 f81e 	bl	8007490 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 8005454:	b108      	cbz	r0, 800545a <log_msg_no_space_handle+0x26>
 8005456:	2c00      	cmp	r4, #0
 8005458:	d1f0      	bne.n	800543c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
 800545a:	9801      	ldr	r0, [sp, #4]
 800545c:	b003      	add	sp, #12
 800545e:	bd30      	pop	{r4, r5, pc}
 8005460:	200015e0 	.word	0x200015e0

08005464 <log_msg_chunk_alloc>:
{
 8005464:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 800546a:	4807      	ldr	r0, [pc, #28]	; (8005488 <log_msg_chunk_alloc+0x24>)
 800546c:	2200      	movs	r2, #0
 800546e:	2300      	movs	r3, #0
 8005470:	a901      	add	r1, sp, #4
 8005472:	f002 f80d 	bl	8007490 <k_mem_slab_alloc>
	if (err != 0) {
 8005476:	b110      	cbz	r0, 800547e <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
 8005478:	f7ff ffdc 	bl	8005434 <log_msg_no_space_handle>
 800547c:	9001      	str	r0, [sp, #4]
}
 800547e:	9801      	ldr	r0, [sp, #4]
 8005480:	b003      	add	sp, #12
 8005482:	f85d fb04 	ldr.w	pc, [sp], #4
 8005486:	bf00      	nop
 8005488:	200015e0 	.word	0x200015e0

0800548c <msg_free>:
{
 800548c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 800548e:	7a03      	ldrb	r3, [r0, #8]
 8005490:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
 8005492:	07dc      	lsls	r4, r3, #31
{
 8005494:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
 8005496:	d41e      	bmi.n	80054d6 <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
 8005498:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
 800549a:	092d      	lsrs	r5, r5, #4
 800549c:	d01b      	beq.n	80054d6 <msg_free+0x4a>
		uint32_t smask = 0U;
 800549e:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
 80054a0:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
 80054a2:	9801      	ldr	r0, [sp, #4]
 80054a4:	4631      	mov	r1, r6
 80054a6:	f003 fc8d 	bl	8008dc4 <log_msg_arg_get>
 80054aa:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
 80054ac:	f7ff fe36 	bl	800511c <log_is_strdup>
 80054b0:	b170      	cbz	r0, 80054d0 <msg_free+0x44>
				if (smask == 0U) {
 80054b2:	b934      	cbnz	r4, 80054c2 <msg_free+0x36>
					smask = z_log_get_s_mask(
 80054b4:	9b01      	ldr	r3, [sp, #4]
 80054b6:	4629      	mov	r1, r5
 80054b8:	6918      	ldr	r0, [r3, #16]
 80054ba:	f7ff fd0b 	bl	8004ed4 <z_log_get_s_mask>
					if (smask == 0U) {
 80054be:	4604      	mov	r4, r0
 80054c0:	b148      	cbz	r0, 80054d6 <msg_free+0x4a>
				if (smask & BIT(i)) {
 80054c2:	fa24 f306 	lsr.w	r3, r4, r6
 80054c6:	07d9      	lsls	r1, r3, #31
 80054c8:	d502      	bpl.n	80054d0 <msg_free+0x44>
					log_free(buf);
 80054ca:	4638      	mov	r0, r7
 80054cc:	f7ff ff8e 	bl	80053ec <log_free>
		for (i = 0U; i < nargs; i++) {
 80054d0:	3601      	adds	r6, #1
 80054d2:	42ae      	cmp	r6, r5
 80054d4:	d3e5      	bcc.n	80054a2 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
 80054d6:	9b01      	ldr	r3, [sp, #4]
 80054d8:	7a1a      	ldrb	r2, [r3, #8]
 80054da:	0792      	lsls	r2, r2, #30
 80054dc:	d504      	bpl.n	80054e8 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
 80054de:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 80054e0:	4c08      	ldr	r4, [pc, #32]	; (8005504 <msg_free+0x78>)
 80054e2:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
 80054e4:	9b03      	ldr	r3, [sp, #12]
 80054e6:	b92b      	cbnz	r3, 80054f4 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 80054e8:	4806      	ldr	r0, [pc, #24]	; (8005504 <msg_free+0x78>)
 80054ea:	a901      	add	r1, sp, #4
 80054ec:	f004 fad4 	bl	8009a98 <k_mem_slab_free>
}
 80054f0:	b005      	add	sp, #20
 80054f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
 80054f4:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 80054f6:	a903      	add	r1, sp, #12
 80054f8:	4620      	mov	r0, r4
 80054fa:	f004 facd 	bl	8009a98 <k_mem_slab_free>
		cont = next;
 80054fe:	9503      	str	r5, [sp, #12]
 8005500:	e7f0      	b.n	80054e4 <msg_free+0x58>
 8005502:	bf00      	nop
 8005504:	200015e0 	.word	0x200015e0

08005508 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8005508:	b40e      	push	{r1, r2, r3}
 800550a:	b503      	push	{r0, r1, lr}
 800550c:	ab03      	add	r3, sp, #12
 800550e:	4601      	mov	r1, r0
 8005510:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8005514:	4804      	ldr	r0, [pc, #16]	; (8005528 <print_formatted+0x20>)
	va_start(args, fmt);
 8005516:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8005518:	f7fb fed6 	bl	80012c8 <cbvprintf>
	va_end(args);

	return length;
}
 800551c:	b002      	add	sp, #8
 800551e:	f85d eb04 	ldr.w	lr, [sp], #4
 8005522:	b003      	add	sp, #12
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	080091dd 	.word	0x080091dd

0800552c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 800552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	461d      	mov	r5, r3
 8005532:	9b08      	ldr	r3, [sp, #32]
 8005534:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8005536:	06da      	lsls	r2, r3, #27
{
 8005538:	4604      	mov	r4, r0
 800553a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800553c:	d405      	bmi.n	800554a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 800553e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 8005540:	bf4c      	ite	mi
 8005542:	492b      	ldrmi	r1, [pc, #172]	; (80055f0 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
 8005544:	492b      	ldrpl	r1, [pc, #172]	; (80055f4 <hexdump_line_print+0xc8>)
 8005546:	f7ff ffdf 	bl	8005508 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
 800554a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80055fc <hexdump_line_print+0xd0>
{
 800554e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
 8005552:	45a8      	cmp	r8, r5
 8005554:	db2d      	blt.n	80055b2 <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 8005556:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005600 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
 800555a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005604 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
 800555e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80055fc <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8005562:	2500      	movs	r5, #0
		if (i < length) {
 8005564:	42bd      	cmp	r5, r7
 8005566:	d232      	bcs.n	80055ce <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
 8005568:	5d72      	ldrb	r2, [r6, r5]
 800556a:	4649      	mov	r1, r9
 800556c:	4620      	mov	r0, r4
 800556e:	f7ff ffcb 	bl	8005508 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8005572:	3501      	adds	r5, #1
 8005574:	2d10      	cmp	r5, #16
 8005576:	d123      	bne.n	80055c0 <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");
 8005578:	491f      	ldr	r1, [pc, #124]	; (80055f8 <hexdump_line_print+0xcc>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
 800557a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80055fc <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
 800557e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005608 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
 8005582:	f8df a088 	ldr.w	sl, [pc, #136]	; 800560c <hexdump_line_print+0xe0>
	print_formatted(output, "|");
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff ffbe 	bl	8005508 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800558c:	2500      	movs	r5, #0
		if (i < length) {
 800558e:	42af      	cmp	r7, r5
 8005590:	d929      	bls.n	80055e6 <hexdump_line_print+0xba>
			char c = (char)data[i];
 8005592:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
 8005594:	f812 3009 	ldrb.w	r3, [r2, r9]
 8005598:	f013 0f97 	tst.w	r3, #151	; 0x97
 800559c:	bf08      	it	eq
 800559e:	222e      	moveq	r2, #46	; 0x2e
 80055a0:	4651      	mov	r1, sl
 80055a2:	4620      	mov	r0, r4
 80055a4:	f7ff ffb0 	bl	8005508 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80055a8:	3501      	adds	r5, #1
 80055aa:	2d10      	cmp	r5, #16
 80055ac:	d114      	bne.n	80055d8 <hexdump_line_print+0xac>
		}
	}
}
 80055ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
 80055b2:	4649      	mov	r1, r9
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7ff ffa7 	bl	8005508 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80055ba:	f108 0801 	add.w	r8, r8, #1
 80055be:	e7c8      	b.n	8005552 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 80055c0:	076a      	lsls	r2, r5, #29
 80055c2:	d1cf      	bne.n	8005564 <hexdump_line_print+0x38>
			print_formatted(output, " ");
 80055c4:	4651      	mov	r1, sl
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7ff ff9e 	bl	8005508 <print_formatted>
 80055cc:	e7ca      	b.n	8005564 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
 80055ce:	4641      	mov	r1, r8
 80055d0:	4620      	mov	r0, r4
 80055d2:	f7ff ff99 	bl	8005508 <print_formatted>
 80055d6:	e7cc      	b.n	8005572 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 80055d8:	076b      	lsls	r3, r5, #29
 80055da:	d1d8      	bne.n	800558e <hexdump_line_print+0x62>
			print_formatted(output, " ");
 80055dc:	4641      	mov	r1, r8
 80055de:	4620      	mov	r0, r4
 80055e0:	f7ff ff92 	bl	8005508 <print_formatted>
 80055e4:	e7d3      	b.n	800558e <hexdump_line_print+0x62>
			print_formatted(output, " ");
 80055e6:	4641      	mov	r1, r8
 80055e8:	4620      	mov	r0, r4
 80055ea:	f7ff ff8d 	bl	8005508 <print_formatted>
 80055ee:	e7db      	b.n	80055a8 <hexdump_line_print+0x7c>
 80055f0:	0800b583 	.word	0x0800b583
 80055f4:	0800b582 	.word	0x0800b582
 80055f8:	0800b58f 	.word	0x0800b58f
 80055fc:	0800b58d 	.word	0x0800b58d
 8005600:	0800b58b 	.word	0x0800b58b
 8005604:	0800b585 	.word	0x0800b585
 8005608:	0800bcb8 	.word	0x0800bcb8
 800560c:	0800b591 	.word	0x0800b591

08005610 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
 8005616:	f011 0602 	ands.w	r6, r1, #2
{
 800561a:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800561e:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 8005622:	9205      	str	r2, [sp, #20]
 8005624:	4607      	mov	r7, r0
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8005626:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 800562a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
 800562e:	d007      	beq.n	8005640 <prefix_print+0x30>
	if (!format) {
 8005630:	f011 0f44 	tst.w	r1, #68	; 0x44
 8005634:	d139      	bne.n	80056aa <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
 8005636:	4934      	ldr	r1, [pc, #208]	; (8005708 <prefix_print+0xf8>)
 8005638:	461a      	mov	r2, r3
 800563a:	f7ff ff65 	bl	8005508 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 800563e:	4606      	mov	r6, r0
	if (color) {
 8005640:	f1ba 0f00 	cmp.w	sl, #0
 8005644:	d00a      	beq.n	800565c <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
 8005646:	4b31      	ldr	r3, [pc, #196]	; (800570c <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
 8005648:	4931      	ldr	r1, [pc, #196]	; (8005710 <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
 800564a:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
 800564e:	4b31      	ldr	r3, [pc, #196]	; (8005714 <prefix_print+0x104>)
 8005650:	4638      	mov	r0, r7
 8005652:	2a00      	cmp	r2, #0
 8005654:	bf08      	it	eq
 8005656:	461a      	moveq	r2, r3
 8005658:	f7ff ff56 	bl	8005508 <print_formatted>
	if (level_on) {
 800565c:	b13d      	cbz	r5, 800566e <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
 800565e:	4b2e      	ldr	r3, [pc, #184]	; (8005718 <prefix_print+0x108>)
 8005660:	492e      	ldr	r1, [pc, #184]	; (800571c <prefix_print+0x10c>)
 8005662:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8005666:	4638      	mov	r0, r7
 8005668:	f7ff ff4e 	bl	8005508 <print_formatted>
 800566c:	4605      	mov	r5, r0
	if (source_id >= 0) {
 800566e:	f1b9 0f00 	cmp.w	r9, #0
 8005672:	db16      	blt.n	80056a2 <prefix_print+0x92>
		total += print_formatted(output,
 8005674:	9b05      	ldr	r3, [sp, #20]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d043      	beq.n	8005702 <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 800567a:	2301      	movs	r3, #1
 800567c:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
 8005680:	4b27      	ldr	r3, [pc, #156]	; (8005720 <prefix_print+0x110>)
 8005682:	4c28      	ldr	r4, [pc, #160]	; (8005724 <prefix_print+0x114>)
 8005684:	f018 0f10 	tst.w	r8, #16
 8005688:	bf18      	it	ne
 800568a:	461c      	movne	r4, r3
 800568c:	4649      	mov	r1, r9
 800568e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8005692:	f7ff fcb7 	bl	8005004 <log_source_name_get>
 8005696:	4621      	mov	r1, r4
 8005698:	4602      	mov	r2, r0
 800569a:	4638      	mov	r0, r7
 800569c:	f7ff ff34 	bl	8005508 <print_formatted>
 80056a0:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
 80056a2:	19a8      	adds	r0, r5, r6
 80056a4:	b007      	add	sp, #28
 80056a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
 80056aa:	4a1f      	ldr	r2, [pc, #124]	; (8005728 <prefix_print+0x118>)
 80056ac:	6811      	ldr	r1, [r2, #0]
 80056ae:	b331      	cbz	r1, 80056fe <prefix_print+0xee>
		timestamp /= timestamp_div;
 80056b0:	4a1e      	ldr	r2, [pc, #120]	; (800572c <prefix_print+0x11c>)
 80056b2:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 80056b6:	6814      	ldr	r4, [r2, #0]
 80056b8:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
 80056bc:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
 80056c0:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
 80056c4:	fbb4 f2f6 	udiv	r2, r4, r6
 80056c8:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
 80056cc:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
 80056d0:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
 80056d4:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80056d8:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
 80056dc:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80056e0:	fb01 441e 	mls	r4, r1, lr, r4
			length = print_formatted(output,
 80056e4:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80056e8:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
 80056ec:	9600      	str	r6, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80056ee:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
 80056f2:	e9cd e101 	strd	lr, r1, [sp, #4]
 80056f6:	490e      	ldr	r1, [pc, #56]	; (8005730 <prefix_print+0x120>)
 80056f8:	f7ff ff06 	bl	8005508 <print_formatted>
 80056fc:	e79f      	b.n	800563e <prefix_print+0x2e>
		length = 0;
 80056fe:	4608      	mov	r0, r1
 8005700:	e79d      	b.n	800563e <prefix_print+0x2e>
		total += print_formatted(output,
 8005702:	4c08      	ldr	r4, [pc, #32]	; (8005724 <prefix_print+0x114>)
 8005704:	e7c2      	b.n	800568c <prefix_print+0x7c>
 8005706:	bf00      	nop
 8005708:	0800b5a2 	.word	0x0800b5a2
 800570c:	0800b0ac 	.word	0x0800b0ac
 8005710:	0800b5c7 	.word	0x0800b5c7
 8005714:	0800b594 	.word	0x0800b594
 8005718:	0800b0c0 	.word	0x0800b0c0
 800571c:	0800b5ca 	.word	0x0800b5ca
 8005720:	0800b59e 	.word	0x0800b59e
 8005724:	0800b599 	.word	0x0800b599
 8005728:	20001600 	.word	0x20001600
 800572c:	20001604 	.word	0x20001604
 8005730:	0800b5ab 	.word	0x0800b5ab

08005734 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	460c      	mov	r4, r1
	if (color) {
 8005738:	07e1      	lsls	r1, r4, #31
{
 800573a:	4605      	mov	r5, r0
	if (color) {
 800573c:	d503      	bpl.n	8005746 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
 800573e:	4a08      	ldr	r2, [pc, #32]	; (8005760 <postfix_print+0x2c>)
 8005740:	4908      	ldr	r1, [pc, #32]	; (8005764 <postfix_print+0x30>)
 8005742:	f7ff fee1 	bl	8005508 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8005746:	06e2      	lsls	r2, r4, #27
 8005748:	d408      	bmi.n	800575c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 800574a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 800574c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 800574e:	bf4c      	ite	mi
 8005750:	4905      	ldrmi	r1, [pc, #20]	; (8005768 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 8005752:	4906      	ldrpl	r1, [pc, #24]	; (800576c <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
 8005754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 8005758:	f7ff bed6 	b.w	8005508 <print_formatted>
}
 800575c:	bd38      	pop	{r3, r4, r5, pc}
 800575e:	bf00      	nop
 8005760:	0800b594 	.word	0x0800b594
 8005764:	0800b5c7 	.word	0x0800b5c7
 8005768:	0800b583 	.word	0x0800b583
 800576c:	0800b582 	.word	0x0800b582

08005770 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
 8005770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
 8005774:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
 8005776:	f013 0807 	ands.w	r8, r3, #7
{
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	4605      	mov	r5, r0
 800577e:	460e      	mov	r6, r1
 8005780:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
 8005782:	d022      	beq.n	80057ca <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8005784:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
 8005786:	8949      	ldrh	r1, [r1, #10]
 8005788:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800578c:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8005790:	43d2      	mvns	r2, r2
 8005792:	e9cd 8300 	strd	r8, r3, [sp]
 8005796:	9102      	str	r1, [sp, #8]
 8005798:	68f3      	ldr	r3, [r6, #12]
 800579a:	f002 0201 	and.w	r2, r2, #1
 800579e:	4639      	mov	r1, r7
 80057a0:	f7ff ff36 	bl	8005610 <prefix_print>
 80057a4:	4681      	mov	r9, r0
 80057a6:	7a34      	ldrb	r4, [r6, #8]
 80057a8:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
 80057aa:	f014 0401 	ands.w	r4, r4, #1
 80057ae:	d00e      	beq.n	80057ce <log_output_msg_process+0x5e>
		std_print(msg, output);
 80057b0:	4629      	mov	r1, r5
 80057b2:	4630      	mov	r0, r6
 80057b4:	f003 fba8 	bl	8008f08 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
 80057b8:	f1b8 0f00 	cmp.w	r8, #0
 80057bc:	d02b      	beq.n	8005816 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
 80057be:	4642      	mov	r2, r8
 80057c0:	4639      	mov	r1, r7
 80057c2:	4628      	mov	r0, r5
 80057c4:	f7ff ffb6 	bl	8005734 <postfix_print>
 80057c8:	e025      	b.n	8005816 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
 80057ca:	46c1      	mov	r9, r8
 80057cc:	e7eb      	b.n	80057a6 <log_output_msg_process+0x36>
	} else if (raw_string) {
 80057ce:	f1b8 0f00 	cmp.w	r8, #0
 80057d2:	d126      	bne.n	8005822 <log_output_msg_process+0xb2>
	size_t offset = 0;
 80057d4:	4627      	mov	r7, r4
		length = output->size;
 80057d6:	68eb      	ldr	r3, [r5, #12]
 80057d8:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 80057da:	aa06      	add	r2, sp, #24
 80057dc:	463b      	mov	r3, r7
 80057de:	68a9      	ldr	r1, [r5, #8]
 80057e0:	4630      	mov	r0, r6
 80057e2:	f003 fb7d 	bl	8008ee0 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
 80057e6:	9a06      	ldr	r2, [sp, #24]
 80057e8:	686b      	ldr	r3, [r5, #4]
 80057ea:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 80057ec:	b13a      	cbz	r2, 80057fe <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
 80057ee:	68ab      	ldr	r3, [r5, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 80057f6:	f1a4 030a 	sub.w	r3, r4, #10
 80057fa:	425c      	negs	r4, r3
 80057fc:	415c      	adcs	r4, r3
		log_output_flush(output);
 80057fe:	4628      	mov	r0, r5
 8005800:	f003 fcdf 	bl	80091c2 <log_output_flush>
		offset += length;
 8005804:	9b06      	ldr	r3, [sp, #24]
 8005806:	441f      	add	r7, r3
	} while (length > 0);
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e4      	bne.n	80057d6 <log_output_msg_process+0x66>
	if (eol) {
 800580c:	b11c      	cbz	r4, 8005816 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
 800580e:	4914      	ldr	r1, [pc, #80]	; (8005860 <log_output_msg_process+0xf0>)
 8005810:	4628      	mov	r0, r5
 8005812:	f7ff fe79 	bl	8005508 <print_formatted>
	}

	log_output_flush(output);
 8005816:	4628      	mov	r0, r5
}
 8005818:	b00a      	add	sp, #40	; 0x28
 800581a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
 800581e:	f003 bcd0 	b.w	80091c2 <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
 8005822:	4630      	mov	r0, r6
 8005824:	f003 fb00 	bl	8008e28 <log_msg_str_get>
 8005828:	490e      	ldr	r1, [pc, #56]	; (8005864 <log_output_msg_process+0xf4>)
 800582a:	4602      	mov	r2, r0
 800582c:	4628      	mov	r0, r5
 800582e:	f7ff fe6b 	bl	8005508 <print_formatted>
		length = sizeof(buf);
 8005832:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 8005836:	aa05      	add	r2, sp, #20
 8005838:	4623      	mov	r3, r4
 800583a:	a906      	add	r1, sp, #24
 800583c:	4630      	mov	r0, r6
		length = sizeof(buf);
 800583e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 8005842:	f003 fb4d 	bl	8008ee0 <log_msg_hexdump_data_get>
		if (length) {
 8005846:	9a05      	ldr	r2, [sp, #20]
 8005848:	2a00      	cmp	r2, #0
 800584a:	d0b8      	beq.n	80057be <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
 800584c:	464b      	mov	r3, r9
 800584e:	9700      	str	r7, [sp, #0]
 8005850:	a906      	add	r1, sp, #24
 8005852:	4628      	mov	r0, r5
 8005854:	f7ff fe6a 	bl	800552c <hexdump_line_print>
			offset += length;
 8005858:	9b05      	ldr	r3, [sp, #20]
 800585a:	441c      	add	r4, r3
		length = sizeof(buf);
 800585c:	e7eb      	b.n	8005836 <log_output_msg_process+0xc6>
 800585e:	bf00      	nop
 8005860:	0800b5d0 	.word	0x0800b5d0
 8005864:	0800b5c7 	.word	0x0800b5c7

08005868 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8005868:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800586a:	f242 730f 	movw	r3, #9999	; 0x270f
 800586e:	428b      	cmp	r3, r1
 8005870:	bf28      	it	cs
 8005872:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 8005874:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8005876:	4a0f      	ldr	r2, [pc, #60]	; (80058b4 <log_output_dropped_process+0x4c>)
{
 8005878:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800587a:	2105      	movs	r1, #5
 800587c:	4668      	mov	r0, sp
 800587e:	f002 fe96 	bl	80085ae <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8005882:	6863      	ldr	r3, [r4, #4]
 8005884:	490c      	ldr	r1, [pc, #48]	; (80058b8 <log_output_dropped_process+0x50>)
 8005886:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8005888:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 800588a:	220b      	movs	r2, #11
 800588c:	4628      	mov	r0, r5
 800588e:	f003 fb2e 	bl	8008eee <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 8005892:	6863      	ldr	r3, [r4, #4]
 8005894:	4632      	mov	r2, r6
 8005896:	4669      	mov	r1, sp
 8005898:	4628      	mov	r0, r5
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 fb27 	bl	8008eee <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	4906      	ldr	r1, [pc, #24]	; (80058bc <log_output_dropped_process+0x54>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	221b      	movs	r2, #27
 80058a8:	4628      	mov	r0, r5
 80058aa:	f003 fb20 	bl	8008eee <buffer_write>
		     output->control_block->ctx);
}
 80058ae:	b002      	add	sp, #8
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
 80058b2:	bf00      	nop
 80058b4:	0800bbe6 	.word	0x0800bbe6
 80058b8:	0800b60e 	.word	0x0800b60e
 80058bc:	0800b5f2 	.word	0x0800b5f2

080058c0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 80058c0:	4a08      	ldr	r2, [pc, #32]	; (80058e4 <log_output_timestamp_freq_set+0x24>)
{
 80058c2:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 80058c4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80058c6:	4c08      	ldr	r4, [pc, #32]	; (80058e8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 80058c8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 80058ca:	2100      	movs	r1, #0
 80058cc:	42a0      	cmp	r0, r4
 80058ce:	d804      	bhi.n	80058da <log_output_timestamp_freq_set+0x1a>
 80058d0:	b101      	cbz	r1, 80058d4 <log_output_timestamp_freq_set+0x14>
 80058d2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 80058d4:	4b05      	ldr	r3, [pc, #20]	; (80058ec <log_output_timestamp_freq_set+0x2c>)
 80058d6:	6018      	str	r0, [r3, #0]
}
 80058d8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 80058da:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	2101      	movs	r1, #1
 80058e0:	e7f4      	b.n	80058cc <log_output_timestamp_freq_set+0xc>
 80058e2:	bf00      	nop
 80058e4:	20001604 	.word	0x20001604
 80058e8:	000f4240 	.word	0x000f4240
 80058ec:	20001600 	.word	0x20001600

080058f0 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
 80058f2:	4f07      	ldr	r7, [pc, #28]	; (8005910 <char_out+0x20>)
{
 80058f4:	460d      	mov	r5, r1
 80058f6:	4604      	mov	r4, r0
 80058f8:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
 80058fa:	42b4      	cmp	r4, r6
 80058fc:	d101      	bne.n	8005902 <char_out+0x12>
#endif
	}

	return length;
}
 80058fe:	4628      	mov	r0, r5
 8005900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
 8005902:	6838      	ldr	r0, [r7, #0]
 8005904:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8005908:	6883      	ldr	r3, [r0, #8]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 800590e:	e7f4      	b.n	80058fa <char_out+0xa>
 8005910:	2000161c 	.word	0x2000161c

08005914 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8005914:	4801      	ldr	r0, [pc, #4]	; (800591c <panic+0x8>)
 8005916:	f003 bc54 	b.w	80091c2 <log_output_flush>
 800591a:	bf00      	nop
 800591c:	0800b0f0 	.word	0x0800b0f0

08005920 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8005920:	4801      	ldr	r0, [pc, #4]	; (8005928 <dropped+0x8>)
 8005922:	f7ff bfa1 	b.w	8005868 <log_output_dropped_process>
 8005926:	bf00      	nop
 8005928:	0800b0f0 	.word	0x0800b0f0

0800592c <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
 800592c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 800592e:	4803      	ldr	r0, [pc, #12]	; (800593c <log_backend_uart_init+0x10>)
 8005930:	f001 fc26 	bl	8007180 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8005934:	4b02      	ldr	r3, [pc, #8]	; (8005940 <log_backend_uart_init+0x14>)
 8005936:	6018      	str	r0, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
 8005938:	bd08      	pop	{r3, pc}
 800593a:	bf00      	nop
 800593c:	0800b61a 	.word	0x0800b61a
 8005940:	2000161c 	.word	0x2000161c

08005944 <put>:
{
 8005944:	b510      	push	{r4, lr}
	log_msg_get(msg);
 8005946:	4608      	mov	r0, r1
 8005948:	460c      	mov	r4, r1
 800594a:	f003 fa2b 	bl	8008da4 <log_msg_get>
	log_output_msg_process(output, msg, flags);
 800594e:	4805      	ldr	r0, [pc, #20]	; (8005964 <put+0x20>)
 8005950:	4621      	mov	r1, r4
 8005952:	220f      	movs	r2, #15
 8005954:	f7ff ff0c 	bl	8005770 <log_output_msg_process>
	log_msg_put(msg);
 8005958:	4620      	mov	r0, r4
}
 800595a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800595e:	f003 ba50 	b.w	8008e02 <log_msg_put>
 8005962:	bf00      	nop
 8005964:	0800b0f0 	.word	0x0800b0f0

08005968 <tty_init>:

	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
 8005968:	4602      	mov	r2, r0
 800596a:	b510      	push	{r4, lr}
	if (!uart_dev) {
 800596c:	4608      	mov	r0, r1
 800596e:	b199      	cbz	r1, 8005998 <tty_init+0x30>
	}

	tty->uart_dev = uart_dev;

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
 8005970:	2400      	movs	r4, #0
	tty->tx_ringbuf = NULL;
	tty->tx_ringbuf_sz = 0U;

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;

	tty->rx_timeout = SYS_FOREVER_MS;
 8005972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	tty->tx_timeout = SYS_FOREVER_MS;
 8005976:	e9c2 430f 	strd	r4, r3, [r2, #60]	; 0x3c
	tty->rx_timeout = SYS_FOREVER_MS;
 800597a:	6213      	str	r3, [r2, #32]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 800597c:	688b      	ldr	r3, [r1, #8]
	tty->uart_dev = uart_dev;
 800597e:	6011      	str	r1, [r2, #0]
	tty->rx_ringbuf_sz = 0U;
 8005980:	e9c2 4405 	strd	r4, r4, [r2, #20]
	tty->tx_ringbuf_sz = 0U;
 8005984:	e9c2 440d 	strd	r4, r4, [r2, #52]	; 0x34
	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
 8005988:	61d4      	str	r4, [r2, #28]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 800598a:	b143      	cbz	r3, 800599e <tty_init+0x36>
 800598c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598e:	b133      	cbz	r3, 800599e <tty_init+0x36>
		api->irq_callback_set(dev, cb, user_data);
 8005990:	4904      	ldr	r1, [pc, #16]	; (80059a4 <tty_init+0x3c>)
 8005992:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
 8005994:	4620      	mov	r0, r4
}
 8005996:	bd10      	pop	{r4, pc}
		return -ENODEV;
 8005998:	f06f 0012 	mvn.w	r0, #18
 800599c:	e7fb      	b.n	8005996 <tty_init+0x2e>
	return 0;
 800599e:	4618      	mov	r0, r3
 80059a0:	e7f9      	b.n	8005996 <tty_init+0x2e>
 80059a2:	bf00      	nop
 80059a4:	0800929d 	.word	0x0800929d

080059a8 <console_getchar>:
{
	return tty_write(&console_serial, &c, 1);
}

int console_getchar(void)
{
 80059a8:	b507      	push	{r0, r1, r2, lr}
	uint8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
 80059aa:	2201      	movs	r2, #1
 80059ac:	f10d 0107 	add.w	r1, sp, #7
 80059b0:	4804      	ldr	r0, [pc, #16]	; (80059c4 <console_getchar+0x1c>)
 80059b2:	f003 fccb 	bl	800934c <tty_read>
	if (res < 0) {
 80059b6:	2800      	cmp	r0, #0
		return res;
	}

	return c;
 80059b8:	bfa8      	it	ge
 80059ba:	f89d 0007 	ldrbge.w	r0, [sp, #7]
}
 80059be:	b003      	add	sp, #12
 80059c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80059c4:	20001620 	.word	0x20001620

080059c8 <console_init>:

int console_init(void)
{
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	480e      	ldr	r0, [pc, #56]	; (8005a04 <console_init+0x3c>)
 80059cc:	f001 fbd8 	bl	8007180 <z_impl_device_get_binding>
	const struct device *uart_dev;
	int ret;

	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	ret = tty_init(&console_serial, uart_dev);
 80059d0:	4601      	mov	r1, r0
 80059d2:	4605      	mov	r5, r0
 80059d4:	480c      	ldr	r0, [pc, #48]	; (8005a08 <console_init+0x40>)
 80059d6:	f7ff ffc7 	bl	8005968 <tty_init>

	if (ret) {
 80059da:	4604      	mov	r4, r0
 80059dc:	b960      	cbnz	r0, 80059f8 <console_init+0x30>

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
 80059de:	68ab      	ldr	r3, [r5, #8]
 80059e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e2:	b15b      	cbz	r3, 80059fc <console_init+0x34>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
 80059e4:	4909      	ldr	r1, [pc, #36]	; (8005a0c <console_init+0x44>)
 80059e6:	4808      	ldr	r0, [pc, #32]	; (8005a08 <console_init+0x40>)
 80059e8:	2210      	movs	r2, #16
 80059ea:	f003 fd3f 	bl	800946c <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
 80059ee:	4908      	ldr	r1, [pc, #32]	; (8005a10 <console_init+0x48>)
 80059f0:	4805      	ldr	r0, [pc, #20]	; (8005a08 <console_init+0x40>)
 80059f2:	2210      	movs	r2, #16
 80059f4:	f003 fd21 	bl	800943a <tty_set_rx_buf>

	return 0;
}
 80059f8:	4620      	mov	r0, r4
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
			return -ENOTSUP;
 80059fc:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8005a00:	e7fa      	b.n	80059f8 <console_init+0x30>
 8005a02:	bf00      	nop
 8005a04:	0800b61a 	.word	0x0800b61a
 8005a08:	20001620 	.word	0x20001620
 8005a0c:	20001ce7 	.word	0x20001ce7
 8005a10:	20001cd7 	.word	0x20001cd7

08005a14 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 8005a14:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
 8005a16:	4c04      	ldr	r4, [pc, #16]	; (8005a28 <__do_init_array_aux+0x14>)
 8005a18:	4d04      	ldr	r5, [pc, #16]	; (8005a2c <__do_init_array_aux+0x18>)
 8005a1a:	42ac      	cmp	r4, r5
 8005a1c:	d300      	bcc.n	8005a20 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
 8005a20:	f854 3b04 	ldr.w	r3, [r4], #4
 8005a24:	4798      	blx	r3
		func++) {
 8005a26:	e7f8      	b.n	8005a1a <__do_init_array_aux+0x6>
 8005a28:	0800a3f0 	.word	0x0800a3f0
 8005a2c:	0800a3f0 	.word	0x0800a3f0

08005a30 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
 8005a30:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8005a32:	4c05      	ldr	r4, [pc, #20]	; (8005a48 <__do_global_ctors_aux+0x18>)
 8005a34:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
 8005a36:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8005a3a:	b905      	cbnz	r5, 8005a3e <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
 8005a3c:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
 8005a3e:	f854 3904 	ldr.w	r3, [r4], #-4
 8005a42:	3d01      	subs	r5, #1
 8005a44:	4798      	blx	r3
 8005a46:	e7f8      	b.n	8005a3a <__do_global_ctors_aux+0xa>
 8005a48:	0800a3e8 	.word	0x0800a3e8

08005a4c <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <console_out+0x2c>)
{
 8005a4e:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
 8005a50:	b2c6      	uxtb	r6, r0
 8005a52:	681b      	ldr	r3, [r3, #0]
{
 8005a54:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
 8005a56:	4630      	mov	r0, r6
 8005a58:	4798      	blx	r3

	if (handled_by_debug_server) {
 8005a5a:	2801      	cmp	r0, #1
 8005a5c:	d00a      	beq.n	8005a74 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8005a5e:	2c0a      	cmp	r4, #10
 8005a60:	4d06      	ldr	r5, [pc, #24]	; (8005a7c <console_out+0x30>)
 8005a62:	d103      	bne.n	8005a6c <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
 8005a64:	6828      	ldr	r0, [r5, #0]
 8005a66:	210d      	movs	r1, #13
 8005a68:	f003 fd12 	bl	8009490 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
 8005a6c:	6828      	ldr	r0, [r5, #0]
 8005a6e:	4631      	mov	r1, r6
 8005a70:	f003 fd0e 	bl	8009490 <uart_poll_out>

	return c;
}
 8005a74:	4620      	mov	r0, r4
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	20000008 	.word	0x20000008
 8005a7c:	20001664 	.word	0x20001664

08005a80 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8005a80:	b508      	push	{r3, lr}
 8005a82:	4806      	ldr	r0, [pc, #24]	; (8005a9c <uart_console_init+0x1c>)
 8005a84:	f001 fb7c 	bl	8007180 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8005a88:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <uart_console_init+0x20>)
 8005a8a:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 8005a8c:	4805      	ldr	r0, [pc, #20]	; (8005aa4 <uart_console_init+0x24>)
 8005a8e:	f001 f801 	bl	8006a94 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8005a92:	4804      	ldr	r0, [pc, #16]	; (8005aa4 <uart_console_init+0x24>)
 8005a94:	f7ff f94a 	bl	8004d2c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
 8005a98:	2000      	movs	r0, #0
 8005a9a:	bd08      	pop	{r3, pc}
 8005a9c:	0800b61a 	.word	0x0800b61a
 8005aa0:	20001664 	.word	0x20001664
 8005aa4:	08005a4d 	.word	0x08005a4d

08005aa8 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8005aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8005aac:	4f0d      	ldr	r7, [pc, #52]	; (8005ae4 <__stm32_exti_isr.isra.0+0x3c>)
 8005aae:	4604      	mov	r4, r0
 8005ab0:	460e      	mov	r6, r1
 8005ab2:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8005ab4:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8005ab8:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8005abc:	42b4      	cmp	r4, r6
 8005abe:	db01      	blt.n	8005ac4 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8005ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac4:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8005ac6:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8005aca:	ea33 0202 	bics.w	r2, r3, r2
 8005ace:	d107      	bne.n	8005ae0 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8005ad0:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8005ad2:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8005ad6:	b11b      	cbz	r3, 8005ae0 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8005ad8:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8005adc:	4620      	mov	r0, r4
 8005ade:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8005ae0:	3401      	adds	r4, #1
 8005ae2:	e7eb      	b.n	8005abc <__stm32_exti_isr.isra.0+0x14>
 8005ae4:	40013c00 	.word	0x40013c00

08005ae8 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8005ae8:	4a04      	ldr	r2, [pc, #16]	; (8005afc <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8005aea:	2301      	movs	r3, #1
 8005aec:	6811      	ldr	r1, [r2, #0]
 8005aee:	4083      	lsls	r3, r0
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8005af4:	4b02      	ldr	r3, [pc, #8]	; (8005b00 <stm32_exti_enable+0x18>)
 8005af6:	5618      	ldrsb	r0, [r3, r0]
 8005af8:	f000 bada 	b.w	80060b0 <arch_irq_enable>
 8005afc:	40013c00 	.word	0x40013c00
 8005b00:	0800b650 	.word	0x0800b650

08005b04 <stm32_exti_disable>:
	if (line < 32) {
 8005b04:	281f      	cmp	r0, #31
 8005b06:	dc07      	bgt.n	8005b18 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8005b08:	4904      	ldr	r1, [pc, #16]	; (8005b1c <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	680b      	ldr	r3, [r1, #0]
 8005b0e:	fa02 f000 	lsl.w	r0, r2, r0
 8005b12:	ea23 0000 	bic.w	r0, r3, r0
 8005b16:	6008      	str	r0, [r1, #0]
}
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40013c00 	.word	0x40013c00

08005b20 <stm32_exti_trigger>:
	switch (trigger) {
 8005b20:	2903      	cmp	r1, #3
 8005b22:	d80f      	bhi.n	8005b44 <stm32_exti_trigger+0x24>
 8005b24:	e8df f001 	tbb	[pc, r1]
 8005b28:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005b2c:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8005b2e:	2201      	movs	r2, #1
 8005b30:	6899      	ldr	r1, [r3, #8]
 8005b32:	fa02 f000 	lsl.w	r0, r2, r0
 8005b36:	ea21 0100 	bic.w	r1, r1, r0
 8005b3a:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005b42:	60d8      	str	r0, [r3, #12]
}
 8005b44:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8005b46:	2301      	movs	r3, #1
 8005b48:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005b4c:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <stm32_exti_trigger+0x64>)
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	4302      	orrs	r2, r0
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	e7f2      	b.n	8005b3c <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8005b56:	2301      	movs	r3, #1
 8005b58:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005b5c:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <stm32_exti_trigger+0x64>)
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	4302      	orrs	r2, r0
 8005b62:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	ea22 0000 	bic.w	r0, r2, r0
 8005b6a:	6098      	str	r0, [r3, #8]
}
 8005b6c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8005b6e:	2301      	movs	r3, #1
 8005b70:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005b74:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <stm32_exti_trigger+0x64>)
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	4302      	orrs	r2, r0
 8005b7a:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	4310      	orrs	r0, r2
 8005b80:	e7df      	b.n	8005b42 <stm32_exti_trigger+0x22>
 8005b82:	bf00      	nop
 8005b84:	40013c00 	.word	0x40013c00

08005b88 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 8005b88:	b510      	push	{r4, lr}
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8005b8a:	4c07      	ldr	r4, [pc, #28]	; (8005ba8 <stm32_exti_set_callback+0x20>)
 8005b8c:	f854 3030 	ldr.w	r3, [r4, r0, lsl #3]
 8005b90:	b933      	cbnz	r3, 8005ba0 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8005b92:	f844 1030 	str.w	r1, [r4, r0, lsl #3]
	data->cb[line].data = arg;
 8005b96:	eb04 04c0 	add.w	r4, r4, r0, lsl #3

	return 0;
 8005b9a:	4618      	mov	r0, r3
	data->cb[line].data = arg;
 8005b9c:	6062      	str	r2, [r4, #4]
}
 8005b9e:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8005ba0:	f06f 000f 	mvn.w	r0, #15
 8005ba4:	e7fb      	b.n	8005b9e <stm32_exti_set_callback+0x16>
 8005ba6:	bf00      	nop
 8005ba8:	2000166c 	.word	0x2000166c

08005bac <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8005bac:	4b03      	ldr	r3, [pc, #12]	; (8005bbc <stm32_exti_unset_callback+0x10>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8005bb4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8005bb8:	605a      	str	r2, [r3, #4]
}
 8005bba:	4770      	bx	lr
 8005bbc:	2000166c 	.word	0x2000166c

08005bc0 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8005bc0:	680b      	ldr	r3, [r1, #0]
{
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	2b06      	cmp	r3, #6
 8005bc6:	d839      	bhi.n	8005c3c <stm32_clock_control_on+0x7c>
 8005bc8:	e8df f003 	tbb	[pc, r3]
 8005bcc:	2e241004 	.word	0x2e241004
 8005bd0:	3838      	.short	0x3838
 8005bd2:	1a          	.byte	0x1a
 8005bd3:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005bd4:	4a1b      	ldr	r2, [pc, #108]	; (8005c44 <stm32_clock_control_on+0x84>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8005bd6:	684b      	ldr	r3, [r1, #4]
 8005bd8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005bda:	4319      	orrs	r1, r3
 8005bdc:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005bde:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005be0:	4013      	ands	r3, r2
 8005be2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005be4:	9b01      	ldr	r3, [sp, #4]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8005be6:	2000      	movs	r0, #0
}
 8005be8:	b006      	add	sp, #24
 8005bea:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005bec:	4a15      	ldr	r2, [pc, #84]	; (8005c44 <stm32_clock_control_on+0x84>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8005bee:	684b      	ldr	r3, [r1, #4]
 8005bf0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005bf2:	4319      	orrs	r1, r3
 8005bf4:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005bf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8005bfc:	9b02      	ldr	r3, [sp, #8]
 8005bfe:	e7f2      	b.n	8005be6 <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005c00:	4a10      	ldr	r2, [pc, #64]	; (8005c44 <stm32_clock_control_on+0x84>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8005c02:	684b      	ldr	r3, [r1, #4]
 8005c04:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8005c06:	4319      	orrs	r1, r3
 8005c08:	6391      	str	r1, [r2, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005c0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8005c10:	9b03      	ldr	r3, [sp, #12]
 8005c12:	e7e8      	b.n	8005be6 <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8005c14:	4a0b      	ldr	r2, [pc, #44]	; (8005c44 <stm32_clock_control_on+0x84>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8005c16:	684b      	ldr	r3, [r1, #4]
 8005c18:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005c1a:	4319      	orrs	r1, r3
 8005c1c:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005c1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c20:	4013      	ands	r3, r2
 8005c22:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8005c24:	9b04      	ldr	r3, [sp, #16]
 8005c26:	e7de      	b.n	8005be6 <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005c28:	4a06      	ldr	r2, [pc, #24]	; (8005c44 <stm32_clock_control_on+0x84>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8005c2a:	684b      	ldr	r3, [r1, #4]
 8005c2c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005c2e:	4319      	orrs	r1, r3
 8005c30:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005c32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c34:	4013      	ands	r3, r2
 8005c36:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8005c38:	9b05      	ldr	r3, [sp, #20]
 8005c3a:	e7d4      	b.n	8005be6 <stm32_clock_control_on+0x26>
	switch (pclken->bus) {
 8005c3c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005c40:	e7d2      	b.n	8005be8 <stm32_clock_control_on+0x28>
 8005c42:	bf00      	nop
 8005c44:	40023800 	.word	0x40023800

08005c48 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8005c48:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <stm32_clock_control_get_subsys_rate+0x28>)
 8005c4a:	6809      	ldr	r1, [r1, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
	uint32_t apb2_clock = get_bus_clock(ahb_clock, STM32_APB2_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8005c4e:	2906      	cmp	r1, #6
 8005c50:	d80b      	bhi.n	8005c6a <stm32_clock_control_get_subsys_rate+0x22>
 8005c52:	e8df f001 	tbb	[pc, r1]
 8005c56:	0505      	.short	0x0505
 8005c58:	0a0a0804 	.word	0x0a0a0804
 8005c5c:	05          	.byte	0x05
 8005c5d:	00          	.byte	0x00
	return clock / prescaler;
 8005c5e:	089b      	lsrs	r3, r3, #2
		/*
		 * STM32G0x only has one APB, but two reset/clock enable
		 * registers for peripherals, so return the APB1 clock rate here
		 */
#endif /* CONFIG_SOC_SERIES_STM32G0X */
		*rate = apb1_clock;
 8005c60:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8005c62:	2000      	movs	r0, #0
		break;
 8005c64:	4770      	bx	lr
	return clock / prescaler;
 8005c66:	085b      	lsrs	r3, r3, #1
 8005c68:	e7fa      	b.n	8005c60 <stm32_clock_control_get_subsys_rate+0x18>
	switch (pclken->bus) {
 8005c6a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8005c6e:	4770      	bx	lr
 8005c70:	20000054 	.word	0x20000054

08005c74 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8005c74:	b530      	push	{r4, r5, lr}
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8005c76:	2100      	movs	r1, #0
{
 8005c78:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8005c7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005c7e:	e9cd 1300 	strd	r1, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8005c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c86:	9302      	str	r3, [sp, #8]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8005c88:	f000 f870 	bl	8005d6c <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8005c8c:	a803      	add	r0, sp, #12
 8005c8e:	f003 fc75 	bl	800957c <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8005c92:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <stm32_clock_control_init+0x80>)
 8005c94:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8005c96:	0790      	lsls	r0, r2, #30
 8005c98:	d406      	bmi.n	8005ca8 <stm32_clock_control_init+0x34>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	f042 0201 	orr.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8005ca2:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8005ca4:	0792      	lsls	r2, r2, #30
 8005ca6:	d5fc      	bpl.n	8005ca2 <stm32_clock_control_init+0x2e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005ca8:	4c12      	ldr	r4, [pc, #72]	; (8005cf4 <stm32_clock_control_init+0x80>)
 8005caa:	68a3      	ldr	r3, [r4, #8]
 8005cac:	f023 0303 	bic.w	r3, r3, #3
 8005cb0:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005cb2:	68a3      	ldr	r3, [r4, #8]
 8005cb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cb8:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005cba:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8005cbc:	f015 050c 	ands.w	r5, r5, #12
 8005cc0:	d1fb      	bne.n	8005cba <stm32_clock_control_init+0x46>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005cc2:	6823      	ldr	r3, [r4, #0]

	/* Switch to PLL with HSE as clock source */
#ifdef CONFIG_SOC_SERIES_STM32WLX
	LL_RCC_HSE_EnableTcxo();
#endif
	LL_PLL_ConfigSystemClock_HSE(
 8005cc4:	480c      	ldr	r0, [pc, #48]	; (8005cf8 <stm32_clock_control_init+0x84>)
 8005cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cca:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8005ccc:	6863      	ldr	r3, [r4, #4]
 8005cce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005cd2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005cd6:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 8005cd8:	aa03      	add	r2, sp, #12
 8005cda:	466b      	mov	r3, sp
 8005cdc:	4629      	mov	r1, r5
 8005cde:	f001 f9e9 	bl	80070b4 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8005cea:	f003 fc4e 	bl	800958a <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8005cee:	4628      	mov	r0, r5
 8005cf0:	b007      	add	sp, #28
 8005cf2:	bd30      	pop	{r4, r5, pc}
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	00b71b00 	.word	0x00b71b00

08005cfc <stm32_clock_control_off>:
	switch (pclken->bus) {
 8005cfc:	680b      	ldr	r3, [r1, #0]
{
 8005cfe:	b082      	sub	sp, #8
 8005d00:	2b06      	cmp	r3, #6
 8005d02:	d82d      	bhi.n	8005d60 <stm32_clock_control_off+0x64>
 8005d04:	e8df f003 	tbb	[pc, r3]
 8005d08:	251e0d04 	.word	0x251e0d04
 8005d0c:	2c2c      	.short	0x2c2c
 8005d0e:	14          	.byte	0x14
 8005d0f:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8005d10:	4a15      	ldr	r2, [pc, #84]	; (8005d68 <stm32_clock_control_off+0x6c>)
 8005d12:	6849      	ldr	r1, [r1, #4]
 8005d14:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d16:	ea23 0301 	bic.w	r3, r3, r1
 8005d1a:	6313      	str	r3, [r2, #48]	; 0x30
	return 0;
 8005d1c:	2000      	movs	r0, #0
}
 8005d1e:	b002      	add	sp, #8
 8005d20:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8005d22:	4a11      	ldr	r2, [pc, #68]	; (8005d68 <stm32_clock_control_off+0x6c>)
 8005d24:	6849      	ldr	r1, [r1, #4]
 8005d26:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005d28:	ea23 0301 	bic.w	r3, r3, r1
 8005d2c:	6353      	str	r3, [r2, #52]	; 0x34
 8005d2e:	e7f5      	b.n	8005d1c <stm32_clock_control_off+0x20>
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005d30:	4a0d      	ldr	r2, [pc, #52]	; (8005d68 <stm32_clock_control_off+0x6c>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8005d32:	684b      	ldr	r3, [r1, #4]
 8005d34:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8005d36:	4319      	orrs	r1, r3
 8005d38:	6391      	str	r1, [r2, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005d40:	9b01      	ldr	r3, [sp, #4]
 8005d42:	e7eb      	b.n	8005d1c <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8005d44:	4a08      	ldr	r2, [pc, #32]	; (8005d68 <stm32_clock_control_off+0x6c>)
 8005d46:	6849      	ldr	r1, [r1, #4]
 8005d48:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d4a:	ea23 0301 	bic.w	r3, r3, r1
 8005d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8005d50:	e7e4      	b.n	8005d1c <stm32_clock_control_off+0x20>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8005d52:	4a05      	ldr	r2, [pc, #20]	; (8005d68 <stm32_clock_control_off+0x6c>)
 8005d54:	6849      	ldr	r1, [r1, #4]
 8005d56:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005d58:	ea23 0301 	bic.w	r3, r3, r1
 8005d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d5e:	e7dd      	b.n	8005d1c <stm32_clock_control_off+0x20>
	switch (pclken->bus) {
 8005d60:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005d64:	e7db      	b.n	8005d1e <stm32_clock_control_off+0x22>
 8005d66:	bf00      	nop
 8005d68:	40023800 	.word	0x40023800

08005d6c <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8005d6c:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <config_enable_default_clocks+0x1c>)
 8005d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d74:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8005d78:	b082      	sub	sp, #8
 8005d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005d80:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8005d82:	b002      	add	sp, #8
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40023800 	.word	0x40023800

08005d8c <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8005d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct device *port_device;
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 8005d90:	460f      	mov	r7, r1
 8005d92:	b911      	cbnz	r1, 8005d9a <stm32_dt_pinctrl_configure+0xe>
		/* Empty pinctrl. Exit */
		return 0;
 8005d94:	2000      	movs	r0, #0
		ret = pm_device_put(port_device);
#endif
	}

	return ret;
}
 8005d96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < list_size; i++) {
 8005d9a:	2600      	movs	r6, #0
		port_device = gpio_ports[STM32_PORT(pin)];
 8005d9c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8005df8 <stm32_dt_pinctrl_configure+0x6c>
 8005da0:	1d04      	adds	r4, r0, #4
	uint32_t func = 0;
 8005da2:	46b3      	mov	fp, r6
		mux = pinctrl[i].pinmux;
 8005da4:	f854 5c04 	ldr.w	r5, [r4, #-4]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 8005da8:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8005dac:	d11e      	bne.n	8005dec <stm32_dt_pinctrl_configure+0x60>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8005dae:	6822      	ldr	r2, [r4, #0]
 8005db0:	f042 0b20 	orr.w	fp, r2, #32
		port_device = gpio_ports[STM32_PORT(pin)];
 8005db4:	f3c5 3303 	ubfx	r3, r5, #12, #4
		ret = gpio_stm32_clock_request(port_device, true);
 8005db8:	2101      	movs	r1, #1
		port_device = gpio_ports[STM32_PORT(pin)];
 8005dba:	f859 8023 	ldr.w	r8, [r9, r3, lsl #2]
		ret = gpio_stm32_clock_request(port_device, true);
 8005dbe:	4640      	mov	r0, r8
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8005dc0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
		ret = gpio_stm32_clock_request(port_device, true);
 8005dc4:	f000 ff02 	bl	8006bcc <gpio_stm32_clock_request>
		if (ret != 0) {
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d1e4      	bne.n	8005d96 <stm32_dt_pinctrl_configure+0xa>
		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 8005dcc:	b2eb      	uxtb	r3, r5
	if (port_device == NULL) {
 8005dce:	f1b8 0f00 	cmp.w	r8, #0
 8005dd2:	d005      	beq.n	8005de0 <stm32_dt_pinctrl_configure+0x54>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8005dd4:	465a      	mov	r2, fp
 8005dd6:	f00a 010f 	and.w	r1, sl, #15
 8005dda:	4640      	mov	r0, r8
 8005ddc:	f003 fc49 	bl	8009672 <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 8005de0:	3601      	adds	r6, #1
 8005de2:	42b7      	cmp	r7, r6
 8005de4:	f104 0408 	add.w	r4, r4, #8
 8005de8:	d1dc      	bne.n	8005da4 <stm32_dt_pinctrl_configure+0x18>
 8005dea:	e7d3      	b.n	8005d94 <stm32_dt_pinctrl_configure+0x8>
		} else if (STM32_DT_PINMUX_FUNC(mux) == ANALOG) {
 8005dec:	b2eb      	uxtb	r3, r5
			func = STM32_MODER_ANALOG_MODE;
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	bf08      	it	eq
 8005df2:	f04f 0b30 	moveq.w	fp, #48	; 0x30
 8005df6:	e7dd      	b.n	8005db4 <stm32_dt_pinctrl_configure+0x28>
 8005df8:	0800b100 	.word	0x0800b100

08005dfc <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8005dfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8005e00:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8005e02:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8005e04:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8005e06:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8005e08:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <elapsed+0x34>)
 8005e0a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8005e0e:	4909      	ldr	r1, [pc, #36]	; (8005e34 <elapsed+0x38>)
 8005e10:	d101      	bne.n	8005e16 <elapsed+0x1a>
	    || (val1 < val2)) {
 8005e12:	4282      	cmp	r2, r0
 8005e14:	d206      	bcs.n	8005e24 <elapsed+0x28>
		overflow_cyc += last_load;
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	680c      	ldr	r4, [r1, #0]
 8005e1a:	4422      	add	r2, r4
 8005e1c:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8005e1e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005e22:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	680a      	ldr	r2, [r1, #0]
 8005e28:	4413      	add	r3, r2
}
 8005e2a:	1a18      	subs	r0, r3, r0
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	bf00      	nop
 8005e30:	20001738 	.word	0x20001738
 8005e34:	20001734 	.word	0x20001734

08005e38 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 8005e38:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8005e3a:	f7ff ffdf 	bl	8005dfc <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <sys_clock_isr+0x38>)
 8005e40:	4a0c      	ldr	r2, [pc, #48]	; (8005e74 <sys_clock_isr+0x3c>)
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	6811      	ldr	r1, [r2, #0]
 8005e46:	4408      	add	r0, r1
 8005e48:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <sys_clock_isr+0x40>)
 8005e50:	6813      	ldr	r3, [r2, #0]
 8005e52:	f244 11a0 	movw	r1, #16800	; 0x41a0
 8005e56:	1ac0      	subs	r0, r0, r3
 8005e58:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8005e5c:	fb01 3300 	mla	r3, r1, r0, r3
 8005e60:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8005e62:	f002 f847 	bl	8007ef4 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
}
 8005e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8005e6a:	f000 bcfd 	b.w	8006868 <z_arm_exc_exit>
 8005e6e:	bf00      	nop
 8005e70:	20001738 	.word	0x20001738
 8005e74:	20001730 	.word	0x20001730
 8005e78:	2000172c 	.word	0x2000172c

08005e7c <sys_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e7c:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <sys_clock_driver_init+0x28>)
 8005e7e:	2210      	movs	r2, #16
 8005e80:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8005e84:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <sys_clock_driver_init+0x2c>)
 8005e86:	f244 129f 	movw	r2, #16799	; 0x419f
 8005e8a:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8005e8c:	4b07      	ldr	r3, [pc, #28]	; (8005eac <sys_clock_driver_init+0x30>)
 8005e8e:	2000      	movs	r0, #0
 8005e90:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8005e92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e96:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8005e98:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	f042 0207 	orr.w	r2, r2, #7
 8005ea0:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8005ea2:	4770      	bx	lr
 8005ea4:	e000ed00 	.word	0xe000ed00
 8005ea8:	20001734 	.word	0x20001734
 8005eac:	20001738 	.word	0x20001738

08005eb0 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	4d32      	ldr	r5, [pc, #200]	; (8005f7c <sys_clock_set_timeout+0xcc>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8005eb4:	b159      	cbz	r1, 8005ece <sys_clock_set_timeout+0x1e>
 8005eb6:	1c43      	adds	r3, r0, #1
 8005eb8:	d109      	bne.n	8005ece <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8005eba:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005ebe:	6913      	ldr	r3, [r2, #16]
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8005ec6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8005eca:	602b      	str	r3, [r5, #0]
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 8005ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8005ece:	f240 33e5 	movw	r3, #997	; 0x3e5
 8005ed2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005ed6:	bf08      	it	eq
 8005ed8:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005eda:	1e44      	subs	r4, r0, #1
 8005edc:	2c00      	cmp	r4, #0
	uint32_t last_load_ = last_load;
 8005ede:	682f      	ldr	r7, [r5, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005ee0:	dd32      	ble.n	8005f48 <sys_clock_set_timeout+0x98>
 8005ee2:	429c      	cmp	r4, r3
 8005ee4:	bfa8      	it	ge
 8005ee6:	461c      	movge	r4, r3
	__asm__ volatile(
 8005ee8:	f04f 0310 	mov.w	r3, #16
 8005eec:	f3ef 8611 	mrs	r6, BASEPRI
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8005ef8:	f7ff ff80 	bl	8005dfc <elapsed>
	cycle_count += pending;
 8005efc:	4920      	ldr	r1, [pc, #128]	; (8005f80 <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8005efe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8005f02:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8005f04:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8005f08:	680b      	ldr	r3, [r1, #0]
 8005f0a:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8005f0c:	4b1d      	ldr	r3, [pc, #116]	; (8005f84 <sys_clock_set_timeout+0xd4>)
	cycle_count += pending;
 8005f0e:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 8005f10:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8005f12:	4b1d      	ldr	r3, [pc, #116]	; (8005f88 <sys_clock_set_timeout+0xd8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8005f16:	1ac2      	subs	r2, r0, r3
 8005f18:	d518      	bpl.n	8005f4c <sys_clock_set_timeout+0x9c>
		last_load = MIN_DELAY;
 8005f1a:	f240 431a 	movw	r3, #1050	; 0x41a
			last_load = MAX_CYCLES;
 8005f1e:	602b      	str	r3, [r5, #0]
	val2 = SysTick->VAL;
 8005f20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8005f24:	682c      	ldr	r4, [r5, #0]
	val2 = SysTick->VAL;
 8005f26:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 8005f28:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8005f2a:	bf38      	it	cc
 8005f2c:	44bc      	addcc	ip, r7
	SysTick->LOAD = last_load - 1;
 8005f2e:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 8005f30:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 8005f34:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 8005f36:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 8005f38:	2400      	movs	r4, #0
 8005f3a:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 8005f3c:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8005f3e:	f386 8811 	msr	BASEPRI, r6
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	e7c1      	b.n	8005ecc <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005f48:	2400      	movs	r4, #0
 8005f4a:	e7cd      	b.n	8005ee8 <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
 8005f4c:	f244 1ea0 	movw	lr, #16800	; 0x41a0
		delay += unannounced;
 8005f50:	fb0e 2404 	mla	r4, lr, r4, r2
		delay -= unannounced;
 8005f54:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8005f56:	f504 4483 	add.w	r4, r4, #16768	; 0x4180
 8005f5a:	341f      	adds	r4, #31
 8005f5c:	fbb4 f4fe 	udiv	r4, r4, lr
		delay -= unannounced;
 8005f60:	fb0e 3404 	mla	r4, lr, r4, r3
		delay = MAX(delay, MIN_DELAY);
 8005f64:	f240 431a 	movw	r3, #1050	; 0x41a
 8005f68:	429c      	cmp	r4, r3
 8005f6a:	d904      	bls.n	8005f76 <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 8005f6c:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <sys_clock_set_timeout+0xdc>)
 8005f6e:	429c      	cmp	r4, r3
 8005f70:	d8d5      	bhi.n	8005f1e <sys_clock_set_timeout+0x6e>
			last_load = delay;
 8005f72:	602c      	str	r4, [r5, #0]
 8005f74:	e7d4      	b.n	8005f20 <sys_clock_set_timeout+0x70>
		delay = MAX(delay, MIN_DELAY);
 8005f76:	461c      	mov	r4, r3
 8005f78:	e7fb      	b.n	8005f72 <sys_clock_set_timeout+0xc2>
 8005f7a:	bf00      	nop
 8005f7c:	20001734 	.word	0x20001734
 8005f80:	20001730 	.word	0x20001730
 8005f84:	20001738 	.word	0x20001738
 8005f88:	2000172c 	.word	0x2000172c
 8005f8c:	00ff9420 	.word	0x00ff9420

08005f90 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 8005f90:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005f92:	f04f 0310 	mov.w	r3, #16
 8005f96:	f3ef 8411 	mrs	r4, BASEPRI
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8005fa2:	f7ff ff2b 	bl	8005dfc <elapsed>
 8005fa6:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <sys_clock_elapsed+0x34>)
 8005fa8:	4a07      	ldr	r2, [pc, #28]	; (8005fc8 <sys_clock_elapsed+0x38>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	4418      	add	r0, r3
	__asm__ volatile(
 8005fb2:	f384 8811 	msr	BASEPRI, r4
 8005fb6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8005fba:	f244 13a0 	movw	r3, #16800	; 0x41a0
 8005fbe:	fbb0 f0f3 	udiv	r0, r0, r3
 8005fc2:	bd10      	pop	{r4, pc}
 8005fc4:	20001730 	.word	0x20001730
 8005fc8:	2000172c 	.word	0x2000172c

08005fcc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8005fcc:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8005fce:	490a      	ldr	r1, [pc, #40]	; (8005ff8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8005fd0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8005fd2:	6809      	ldr	r1, [r1, #0]
 8005fd4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005fd6:	4909      	ldr	r1, [pc, #36]	; (8005ffc <arch_swap+0x30>)
	_current->arch.basepri = key;
 8005fd8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005fda:	684b      	ldr	r3, [r1, #4]
 8005fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	604b      	str	r3, [r1, #4]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8005fec:	6893      	ldr	r3, [r2, #8]
}
 8005fee:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20001808 	.word	0x20001808
 8005ff8:	0800b32c 	.word	0x0800b32c
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8006000:	4921      	ldr	r1, [pc, #132]	; (8006088 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8006002:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 8006004:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8006008:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 800600c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800600e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8006012:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #0x10    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
 8006016:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
 800601a:	d103      	bne.n	8006024 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 800601c:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
 8006020:	ec80 8a10 	vstmia	r0, {s16-s31}

08006024 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8006024:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8006026:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 800602a:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 800602e:	4f17      	ldr	r7, [pc, #92]	; (800608c <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8006030:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8006034:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8006036:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8006038:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 800603a:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800603e:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8006040:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8006042:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8006044:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
 8006048:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
 800604c:	d003      	beq.n	8006056 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 800604e:	2300      	movs	r3, #0
    vmsr fpscr, r3
 8006050:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
 8006054:	e003      	b.n	800605e <in_fp_endif>

08006056 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8006056:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
 800605a:	ec90 8a10 	vldmia	r0, {s16-s31}

0800605e <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 800605e:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
 8006062:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 8006066:	f383 8814 	msr	CONTROL, r3
    isb
 800606a:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 800606e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8006070:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8006072:	f000 fc31 	bl	80068d8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8006076:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 800607a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 800607e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8006082:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8006086:	4770      	bx	lr
    ldr r1, =_kernel
 8006088:	20001808 	.word	0x20001808
    ldr v4, =_SCS_ICSR
 800608c:	e000ed04 	.word	0xe000ed04

08006090 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 8006090:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8006094:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8006096:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 800609a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800609e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80060a0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80060a4:	2902      	cmp	r1, #2
    beq _oops
 80060a6:	d0ff      	beq.n	80060a8 <_oops>

080060a8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80060a8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80060aa:	f003 fa73 	bl	8009594 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80060ae:	bd01      	pop	{r0, pc}

080060b0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80060b0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	db08      	blt.n	80060c8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060b6:	2201      	movs	r2, #1
 80060b8:	f000 001f 	and.w	r0, r0, #31
 80060bc:	fa02 f000 	lsl.w	r0, r2, r0
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	4a02      	ldr	r2, [pc, #8]	; (80060cc <arch_irq_enable+0x1c>)
 80060c4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	e000e100 	.word	0xe000e100

080060d0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80060d0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80060d2:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d4:	bfa8      	it	ge
 80060d6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 80060da:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060de:	bfb8      	it	lt
 80060e0:	4b06      	ldrlt	r3, [pc, #24]	; (80060fc <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060e2:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80060e6:	bfac      	ite	ge
 80060e8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ec:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060f0:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060f2:	bfb4      	ite	lt
 80060f4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060f6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 80060fa:	4770      	bx	lr
 80060fc:	e000ed14 	.word	0xe000ed14

08006100 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8006100:	7b01      	ldrb	r1, [r0, #12]
{
 8006102:	b510      	push	{r4, lr}
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8006104:	f011 0402 	ands.w	r4, r1, #2
 8006108:	d005      	beq.n	8006116 <arch_new_thread+0x16>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
 800610a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800610c:	3160      	adds	r1, #96	; 0x60
 800610e:	6641      	str	r1, [r0, #100]	; 0x64
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
 8006110:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8006112:	3960      	subs	r1, #96	; 0x60
 8006114:	6681      	str	r1, [r0, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8006116:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 800611a:	9b02      	ldr	r3, [sp, #8]
 800611c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8006120:	490f      	ldr	r1, [pc, #60]	; (8006160 <arch_new_thread+0x60>)
	iframe->a3 = (uint32_t)p2;
 8006122:	9b03      	ldr	r3, [sp, #12]
 8006124:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8006128:	9b04      	ldr	r3, [sp, #16]
 800612a:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 800612e:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8006132:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006136:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 800613a:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 800613e:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8006140:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8006142:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8006144:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
 8006146:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 800614a:	b91c      	cbnz	r4, 8006154 <arch_new_thread+0x54>
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
 800614c:	23fd      	movs	r3, #253	; 0xfd
 800614e:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8006152:	bd10      	pop	{r4, pc}
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8006154:	f64f 5308 	movw	r3, #64776	; 0xfd08
 8006158:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
 800615c:	e7f9      	b.n	8006152 <arch_new_thread+0x52>
 800615e:	bf00      	nop
 8006160:	080085c9 	.word	0x080085c9

08006164 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * Adjust the MPU stack guard size together with the FPU
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
 8006164:	b530      	push	{r4, r5, lr}
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8006166:	7b01      	ldrb	r1, [r0, #12]
		if ((thread->arch.mode &
 8006168:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 800616c:	4a17      	ldr	r2, [pc, #92]	; (80061cc <z_arm_mpu_stack_guard_and_fpu_adjust+0x68>)
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 800616e:	f011 0f02 	tst.w	r1, #2
		if ((thread->arch.mode &
 8006172:	f003 0508 	and.w	r5, r3, #8
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8006176:	d103      	bne.n	8006180 <z_arm_mpu_stack_guard_and_fpu_adjust+0x1c>
 8006178:	f890 40bd 	ldrb.w	r4, [r0, #189]	; 0xbd
 800617c:	06e4      	lsls	r4, r4, #27
 800617e:	d413      	bmi.n	80061a8 <z_arm_mpu_stack_guard_and_fpu_adjust+0x44>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
 8006180:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006182:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8006186:	6354      	str	r4, [r2, #52]	; 0x34
		if ((thread->arch.mode &
 8006188:	b94d      	cbnz	r5, 800619e <z_arm_mpu_stack_guard_and_fpu_adjust+0x3a>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 800618a:	f043 0308 	orr.w	r3, r3, #8
 800618e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start +=
 8006192:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006194:	3360      	adds	r3, #96	; 0x60
 8006196:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size -=
 8006198:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800619a:	3b60      	subs	r3, #96	; 0x60
 800619c:	6683      	str	r3, [r0, #104]	; 0x68

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
 800619e:	f041 0102 	orr.w	r1, r1, #2
 80061a2:	7301      	strb	r1, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
 80061a4:	2080      	movs	r0, #128	; 0x80
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
 80061a6:	bd30      	pop	{r4, r5, pc}
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
 80061a8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80061aa:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 80061ae:	6351      	str	r1, [r2, #52]	; 0x34
		if ((thread->arch.mode &
 80061b0:	b14d      	cbz	r5, 80061c6 <z_arm_mpu_stack_guard_and_fpu_adjust+0x62>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 80061b2:	f023 0308 	bic.w	r3, r3, #8
 80061b6:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start -=
 80061ba:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80061bc:	3b60      	subs	r3, #96	; 0x60
 80061be:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size +=
 80061c0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80061c2:	3360      	adds	r3, #96	; 0x60
 80061c4:	6683      	str	r3, [r0, #104]	; 0x68
	return MPU_GUARD_ALIGN_AND_SIZE;
 80061c6:	2020      	movs	r0, #32
 80061c8:	e7ed      	b.n	80061a6 <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
 80061ca:	bf00      	nop
 80061cc:	e000ef00 	.word	0xe000ef00

080061d0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 80061d0:	4b0d      	ldr	r3, [pc, #52]	; (8006208 <z_check_thread_stack_fail+0x38>)
{
 80061d2:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
 80061d4:	6898      	ldr	r0, [r3, #8]
{
 80061d6:	b510      	push	{r4, lr}

	if (thread == NULL) {
 80061d8:	b190      	cbz	r0, 8006200 <z_check_thread_stack_fail+0x30>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
 80061da:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80061de:	6e40      	ldr	r0, [r0, #100]	; 0x64
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 80061e0:	f013 0f08 	tst.w	r3, #8
 80061e4:	bf14      	ite	ne
 80061e6:	2480      	movne	r4, #128	; 0x80
 80061e8:	2420      	moveq	r4, #32
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80061ea:	f112 0f16 	cmn.w	r2, #22
 80061ee:	d004      	beq.n	80061fa <z_check_thread_stack_fail+0x2a>
 80061f0:	1b03      	subs	r3, r0, r4
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d805      	bhi.n	8006202 <z_check_thread_stack_fail+0x32>
 80061f6:	4282      	cmp	r2, r0
 80061f8:	d203      	bcs.n	8006202 <z_check_thread_stack_fail+0x32>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 80061fa:	4281      	cmp	r1, r0
 80061fc:	bf28      	it	cs
 80061fe:	2000      	movcs	r0, #0
}
 8006200:	bd10      	pop	{r4, pc}
	return 0;
 8006202:	2000      	movs	r0, #0
 8006204:	e7fc      	b.n	8006200 <z_check_thread_stack_fail+0x30>
 8006206:	bf00      	nop
 8006208:	20001808 	.word	0x20001808

0800620c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 800620c:	b508      	push	{r3, lr}
 800620e:	4614      	mov	r4, r2
 8006210:	460d      	mov	r5, r1
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 8006212:	2200      	movs	r2, #0
 8006214:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8006218:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 800621c:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8006220:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006224:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8006228:	4a08      	ldr	r2, [pc, #32]	; (800624c <arch_switch_to_main_thread+0x40>)
 800622a:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800622c:	f000 fb54 	bl	80068d8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8006230:	4620      	mov	r0, r4
 8006232:	f385 8809 	msr	PSP, r5
 8006236:	2100      	movs	r1, #0
 8006238:	b663      	cpsie	if
 800623a:	f381 8811 	msr	BASEPRI, r1
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	2200      	movs	r2, #0
 8006244:	2300      	movs	r3, #0
 8006246:	f002 f9bf 	bl	80085c8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 800624a:	bf00      	nop
 800624c:	20001808 	.word	0x20001808

08006250 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8006250:	4901      	ldr	r1, [pc, #4]	; (8006258 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8006252:	2210      	movs	r2, #16
	str	r2, [r1]
 8006254:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8006256:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8006258:	e000ed10 	.word	0xe000ed10

0800625c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 800625c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800625e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8006260:	f380 8811 	msr	BASEPRI, r0
	isb
 8006264:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8006268:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 800626c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800626e:	b662      	cpsie	i
	isb
 8006270:	f3bf 8f6f 	isb	sy

	bx	lr
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop

08006278 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8006278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800627c:	4607      	mov	r7, r0
 800627e:	b08b      	sub	sp, #44	; 0x2c

	if (esf != NULL) {
 8006280:	460c      	mov	r4, r1
 8006282:	2900      	cmp	r1, #0
 8006284:	d054      	beq.n	8006330 <z_arm_fatal_error+0xb8>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8006286:	4b2e      	ldr	r3, [pc, #184]	; (8006340 <z_arm_fatal_error+0xc8>)
 8006288:	4d2e      	ldr	r5, [pc, #184]	; (8006344 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 800628a:	482f      	ldr	r0, [pc, #188]	; (8006348 <z_arm_fatal_error+0xd0>)
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 800628c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800635c <z_arm_fatal_error+0xe4>
 8006290:	1aed      	subs	r5, r5, r3
 8006292:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8006294:	01ad      	lsls	r5, r5, #6
 8006296:	f045 0501 	orr.w	r5, r5, #1
 800629a:	f8ad 5000 	strh.w	r5, [sp]
 800629e:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 80062a2:	6809      	ldr	r1, [r1, #0]
 80062a4:	f002 fcfe 	bl	8008ca4 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 80062a8:	f8ad 5000 	strh.w	r5, [sp]
 80062ac:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80062b0:	68e1      	ldr	r1, [r4, #12]
 80062b2:	4826      	ldr	r0, [pc, #152]	; (800634c <z_arm_fatal_error+0xd4>)
 80062b4:	f002 fcf6 	bl	8008ca4 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 80062b8:	69e1      	ldr	r1, [r4, #28]
 80062ba:	4825      	ldr	r0, [pc, #148]	; (8006350 <z_arm_fatal_error+0xd8>)
 80062bc:	462a      	mov	r2, r5
 80062be:	f002 fcc1 	bl	8008c44 <log_1>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 80062c2:	46a0      	mov	r8, r4
 80062c4:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 80062c6:	edd8 7a08 	vldr	s15, [r8, #32]
 80062ca:	9602      	str	r6, [sp, #8]
 80062cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062d0:	1c73      	adds	r3, r6, #1
 80062d2:	edcd 7a03 	vstr	s15, [sp, #12]
 80062d6:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 80062da:	9304      	str	r3, [sp, #16]
 80062dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062e0:	1cb3      	adds	r3, r6, #2
 80062e2:	edcd 7a05 	vstr	s15, [sp, #20]
 80062e6:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
 80062ea:	9306      	str	r3, [sp, #24]
 80062ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f0:	1cf3      	adds	r3, r6, #3
 80062f2:	edcd 7a07 	vstr	s15, [sp, #28]
 80062f6:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 80062fa:	9308      	str	r3, [sp, #32]
 80062fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006300:	2208      	movs	r2, #8
 8006302:	462b      	mov	r3, r5
 8006304:	eb0d 0102 	add.w	r1, sp, r2
 8006308:	4648      	mov	r0, r9
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 800630a:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 800630c:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8006310:	f002 fce7 	bl	8008ce2 <log_n>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 8006314:	2e10      	cmp	r6, #16
 8006316:	f108 0810 	add.w	r8, r8, #16
 800631a:	d1d4      	bne.n	80062c6 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
 800631c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800631e:	480d      	ldr	r0, [pc, #52]	; (8006354 <z_arm_fatal_error+0xdc>)
 8006320:	462a      	mov	r2, r5
 8006322:	f002 fc8f 	bl	8008c44 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8006326:	69a1      	ldr	r1, [r4, #24]
 8006328:	480b      	ldr	r0, [pc, #44]	; (8006358 <z_arm_fatal_error+0xe0>)
 800632a:	462a      	mov	r2, r5
 800632c:	f002 fc8a 	bl	8008c44 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8006330:	4621      	mov	r1, r4
 8006332:	4638      	mov	r0, r7
}
 8006334:	b00b      	add	sp, #44	; 0x2c
 8006336:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_fatal_error(reason, esf);
 800633a:	f000 bf69 	b.w	8007210 <z_fatal_error>
 800633e:	bf00      	nop
 8006340:	0800a3f0 	.word	0x0800a3f0
 8006344:	0800a400 	.word	0x0800a400
 8006348:	0800b67e 	.word	0x0800b67e
 800634c:	0800b6ad 	.word	0x0800b6ad
 8006350:	0800b6dc 	.word	0x0800b6dc
 8006354:	0800b72e 	.word	0x0800b72e
 8006358:	0800b73d 	.word	0x0800b73d
 800635c:	0800b6eb 	.word	0x0800b6eb

08006360 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8006360:	bf30      	wfi
    b z_SysNmiOnReset
 8006362:	f7ff bffd 	b.w	8006360 <z_SysNmiOnReset>
 8006366:	bf00      	nop

08006368 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8006368:	4a14      	ldr	r2, [pc, #80]	; (80063bc <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 800636a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800636c:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <z_arm_prep_c+0x58>)
 800636e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006372:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006374:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006378:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 800637c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006380:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8006388:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800638c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8006394:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8006398:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
 800639c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80063a0:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
 80063a4:	2300      	movs	r3, #0
 80063a6:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80063aa:	f000 ff8f 	bl	80072cc <z_bss_zero>
	z_data_copy();
 80063ae:	f001 fcb7 	bl	8007d20 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 80063b2:	f000 fa67 	bl	8006884 <z_arm_interrupt_init>
	z_cstart();
 80063b6:	f000 ffbf 	bl	8007338 <z_cstart>
 80063ba:	bf00      	nop
 80063bc:	08000000 	.word	0x08000000
 80063c0:	e000ed00 	.word	0xe000ed00

080063c4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80063c4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80063c6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80063ca:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80063ce:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 80063d2:	4904      	ldr	r1, [pc, #16]	; (80063e4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80063d4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80063d6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 80063d8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80063da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80063de:	4902      	ldr	r1, [pc, #8]	; (80063e8 <_isr_wrapper+0x24>)
	bx r1
 80063e0:	4708      	bx	r1
 80063e2:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80063e4:	0800a158 	.word	0x0800a158
	ldr r1, =z_arm_int_exit
 80063e8:	08006869 	.word	0x08006869

080063ec <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80063ec:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80063ee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80063f2:	4808      	ldr	r0, [pc, #32]	; (8006414 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80063f4:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 80063f8:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80063fa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80063fe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8006402:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8006404:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8006406:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800640a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800640e:	f7ff ffab 	bl	8006368 <z_arm_prep_c>
 8006412:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8006414:	20002b00 	.word	0x20002b00

08006418 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8006418:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 800641c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8006420:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8006422:	4672      	mov	r2, lr
	bl z_arm_fault
 8006424:	f000 f94e 	bl	80066c4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8006428:	bd01      	pop	{r0, pc}
 800642a:	bf00      	nop

0800642c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 800642c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006430:	4b35      	ldr	r3, [pc, #212]	; (8006508 <mem_manage_fault+0xdc>)
 8006432:	4c36      	ldr	r4, [pc, #216]	; (800650c <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8006434:	4d36      	ldr	r5, [pc, #216]	; (8006510 <mem_manage_fault+0xe4>)
 8006436:	1ae4      	subs	r4, r4, r3
 8006438:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
 800643a:	01a4      	lsls	r4, r4, #6
 800643c:	f044 0901 	orr.w	r9, r4, #1
{
 8006440:	4607      	mov	r7, r0
 8006442:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 8006444:	4833      	ldr	r0, [pc, #204]	; (8006514 <mem_manage_fault+0xe8>)
 8006446:	4649      	mov	r1, r9
{
 8006448:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 800644a:	f002 fbec 	bl	8008c26 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800644e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006450:	06db      	lsls	r3, r3, #27
 8006452:	d503      	bpl.n	800645c <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8006454:	4830      	ldr	r0, [pc, #192]	; (8006518 <mem_manage_fault+0xec>)
 8006456:	4649      	mov	r1, r9
 8006458:	f002 fbe5 	bl	8008c26 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 800645c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800645e:	0718      	lsls	r0, r3, #28
 8006460:	d504      	bpl.n	800646c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
 8006462:	482e      	ldr	r0, [pc, #184]	; (800651c <mem_manage_fault+0xf0>)
 8006464:	f044 0101 	orr.w	r1, r4, #1
 8006468:	f002 fbdd 	bl	8008c26 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800646c:	4d28      	ldr	r5, [pc, #160]	; (8006510 <mem_manage_fault+0xe4>)
 800646e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006470:	0799      	lsls	r1, r3, #30
 8006472:	d423      	bmi.n	80064bc <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
 8006474:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8006478:	4d25      	ldr	r5, [pc, #148]	; (8006510 <mem_manage_fault+0xe4>)
 800647a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800647c:	07db      	lsls	r3, r3, #31
 800647e:	d504      	bpl.n	800648a <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
 8006480:	4827      	ldr	r0, [pc, #156]	; (8006520 <mem_manage_fault+0xf4>)
 8006482:	f044 0101 	orr.w	r1, r4, #1
 8006486:	f002 fbce 	bl	8008c26 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800648a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800648c:	0698      	lsls	r0, r3, #26
 800648e:	d504      	bpl.n	800649a <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
 8006490:	4824      	ldr	r0, [pc, #144]	; (8006524 <mem_manage_fault+0xf8>)
 8006492:	f044 0101 	orr.w	r1, r4, #1
 8006496:	f002 fbc6 	bl	8008c26 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800649a:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <mem_manage_fault+0xe4>)
 800649c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800649e:	06d1      	lsls	r1, r2, #27
 80064a0:	d424      	bmi.n	80064ec <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80064a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80064a4:	0792      	lsls	r2, r2, #30
 80064a6:	d421      	bmi.n	80064ec <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80064a8:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80064aa:	4a19      	ldr	r2, [pc, #100]	; (8006510 <mem_manage_fault+0xe4>)
 80064ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80064ae:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80064b2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 80064b4:	2300      	movs	r3, #0
 80064b6:	7033      	strb	r3, [r6, #0]

	return reason;
}
 80064b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
 80064bc:	f044 0a01 	orr.w	sl, r4, #1
 80064c0:	4819      	ldr	r0, [pc, #100]	; (8006528 <mem_manage_fault+0xfc>)
 80064c2:	4651      	mov	r1, sl
 80064c4:	f002 fbaf 	bl	8008c26 <log_0>
		uint32_t temp = SCB->MMFAR;
 80064c8:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80064cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80064ce:	061a      	lsls	r2, r3, #24
 80064d0:	d5d0      	bpl.n	8006474 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 80064d2:	4816      	ldr	r0, [pc, #88]	; (800652c <mem_manage_fault+0x100>)
 80064d4:	4652      	mov	r2, sl
 80064d6:	4649      	mov	r1, r9
 80064d8:	f002 fbb4 	bl	8008c44 <log_1>
			if (from_hard_fault != 0) {
 80064dc:	f1b8 0f00 	cmp.w	r8, #0
 80064e0:	d0ca      	beq.n	8006478 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80064e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80064e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064e8:	62ab      	str	r3, [r5, #40]	; 0x28
 80064ea:	e7c5      	b.n	8006478 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	051b      	lsls	r3, r3, #20
 80064f0:	d5da      	bpl.n	80064a8 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 80064f2:	4639      	mov	r1, r7
 80064f4:	4648      	mov	r0, r9
 80064f6:	f7ff fe6b 	bl	80061d0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d0d4      	beq.n	80064a8 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80064fe:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8006502:	2002      	movs	r0, #2
 8006504:	e7d1      	b.n	80064aa <mem_manage_fault+0x7e>
 8006506:	bf00      	nop
 8006508:	0800a3f0 	.word	0x0800a3f0
 800650c:	0800a400 	.word	0x0800a400
 8006510:	e000ed00 	.word	0xe000ed00
 8006514:	0800b76b 	.word	0x0800b76b
 8006518:	0800b781 	.word	0x0800b781
 800651c:	0800b7b4 	.word	0x0800b7b4
 8006520:	0800b7f5 	.word	0x0800b7f5
 8006524:	0800b814 	.word	0x0800b814
 8006528:	0800b7c7 	.word	0x0800b7c7
 800652c:	0800b7df 	.word	0x0800b7df

08006530 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	4b23      	ldr	r3, [pc, #140]	; (80065c0 <usage_fault.constprop.0+0x90>)
 8006534:	4c23      	ldr	r4, [pc, #140]	; (80065c4 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8006536:	4d24      	ldr	r5, [pc, #144]	; (80065c8 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
 8006538:	4824      	ldr	r0, [pc, #144]	; (80065cc <usage_fault.constprop.0+0x9c>)
 800653a:	1ae4      	subs	r4, r4, r3
 800653c:	08e4      	lsrs	r4, r4, #3
 800653e:	01a4      	lsls	r4, r4, #6
 8006540:	f044 0601 	orr.w	r6, r4, #1
 8006544:	4631      	mov	r1, r6
 8006546:	f002 fb6e 	bl	8008c26 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800654a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800654c:	019b      	lsls	r3, r3, #6
 800654e:	d503      	bpl.n	8006558 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
 8006550:	481f      	ldr	r0, [pc, #124]	; (80065d0 <usage_fault.constprop.0+0xa0>)
 8006552:	4631      	mov	r1, r6
 8006554:	f002 fb67 	bl	8008c26 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8006558:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800655a:	01dd      	lsls	r5, r3, #7
 800655c:	d504      	bpl.n	8006568 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
 800655e:	481d      	ldr	r0, [pc, #116]	; (80065d4 <usage_fault.constprop.0+0xa4>)
 8006560:	f044 0101 	orr.w	r1, r4, #1
 8006564:	f002 fb5f 	bl	8008c26 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8006568:	4d17      	ldr	r5, [pc, #92]	; (80065c8 <usage_fault.constprop.0+0x98>)
 800656a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800656c:	0318      	lsls	r0, r3, #12
 800656e:	d504      	bpl.n	800657a <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
 8006570:	4819      	ldr	r0, [pc, #100]	; (80065d8 <usage_fault.constprop.0+0xa8>)
 8006572:	f044 0101 	orr.w	r1, r4, #1
 8006576:	f002 fb56 	bl	8008c26 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800657a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800657c:	0359      	lsls	r1, r3, #13
 800657e:	d504      	bpl.n	800658a <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8006580:	4816      	ldr	r0, [pc, #88]	; (80065dc <usage_fault.constprop.0+0xac>)
 8006582:	f044 0101 	orr.w	r1, r4, #1
 8006586:	f002 fb4e 	bl	8008c26 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800658a:	4d0f      	ldr	r5, [pc, #60]	; (80065c8 <usage_fault.constprop.0+0x98>)
 800658c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800658e:	039a      	lsls	r2, r3, #14
 8006590:	d504      	bpl.n	800659c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8006592:	4813      	ldr	r0, [pc, #76]	; (80065e0 <usage_fault.constprop.0+0xb0>)
 8006594:	f044 0101 	orr.w	r1, r4, #1
 8006598:	f002 fb45 	bl	8008c26 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800659c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800659e:	03db      	lsls	r3, r3, #15
 80065a0:	d504      	bpl.n	80065ac <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 80065a2:	4810      	ldr	r0, [pc, #64]	; (80065e4 <usage_fault.constprop.0+0xb4>)
 80065a4:	f044 0101 	orr.w	r1, r4, #1
 80065a8:	f002 fb3d 	bl	8008c26 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80065ac:	4a06      	ldr	r2, [pc, #24]	; (80065c8 <usage_fault.constprop.0+0x98>)
 80065ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80065b0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80065b4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80065b8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 80065ba:	2000      	movs	r0, #0
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
 80065be:	bf00      	nop
 80065c0:	0800a3f0 	.word	0x0800a3f0
 80065c4:	0800a400 	.word	0x0800a400
 80065c8:	e000ed00 	.word	0xe000ed00
 80065cc:	0800b843 	.word	0x0800b843
 80065d0:	0800b85b 	.word	0x0800b85b
 80065d4:	0800b86e 	.word	0x0800b86e
 80065d8:	0800b888 	.word	0x0800b888
 80065dc:	0800b8a6 	.word	0x0800b8a6
 80065e0:	0800b8cb 	.word	0x0800b8cb
 80065e4:	0800b8e5 	.word	0x0800b8e5

080065e8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 80065e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ec:	4b2a      	ldr	r3, [pc, #168]	; (8006698 <bus_fault.constprop.0+0xb0>)
 80065ee:	4c2b      	ldr	r4, [pc, #172]	; (800669c <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80065f0:	4d2b      	ldr	r5, [pc, #172]	; (80066a0 <bus_fault.constprop.0+0xb8>)
 80065f2:	1ae4      	subs	r4, r4, r3
 80065f4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
 80065f6:	01a4      	lsls	r4, r4, #6
 80065f8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 80065fc:	4607      	mov	r7, r0
 80065fe:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 8006600:	4828      	ldr	r0, [pc, #160]	; (80066a4 <bus_fault.constprop.0+0xbc>)
 8006602:	4641      	mov	r1, r8
 8006604:	f002 fb0f 	bl	8008c26 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8006608:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800660a:	04d9      	lsls	r1, r3, #19
 800660c:	d503      	bpl.n	8006616 <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
 800660e:	4826      	ldr	r0, [pc, #152]	; (80066a8 <bus_fault.constprop.0+0xc0>)
 8006610:	4641      	mov	r1, r8
 8006612:	f002 fb08 	bl	8008c26 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8006616:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006618:	051a      	lsls	r2, r3, #20
 800661a:	d504      	bpl.n	8006626 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
 800661c:	4823      	ldr	r0, [pc, #140]	; (80066ac <bus_fault.constprop.0+0xc4>)
 800661e:	f044 0101 	orr.w	r1, r4, #1
 8006622:	f002 fb00 	bl	8008c26 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8006626:	4d1e      	ldr	r5, [pc, #120]	; (80066a0 <bus_fault.constprop.0+0xb8>)
 8006628:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800662a:	059b      	lsls	r3, r3, #22
 800662c:	d512      	bpl.n	8006654 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
 800662e:	f044 0801 	orr.w	r8, r4, #1
 8006632:	481f      	ldr	r0, [pc, #124]	; (80066b0 <bus_fault.constprop.0+0xc8>)
 8006634:	4641      	mov	r1, r8
 8006636:	f002 faf6 	bl	8008c26 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 800663a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800663c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800663e:	0418      	lsls	r0, r3, #16
 8006640:	d508      	bpl.n	8006654 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8006642:	481c      	ldr	r0, [pc, #112]	; (80066b4 <bus_fault.constprop.0+0xcc>)
 8006644:	4642      	mov	r2, r8
 8006646:	f002 fafd 	bl	8008c44 <log_1>
			if (from_hard_fault != 0) {
 800664a:	b11f      	cbz	r7, 8006654 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800664c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800664e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006652:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8006654:	4d12      	ldr	r5, [pc, #72]	; (80066a0 <bus_fault.constprop.0+0xb8>)
 8006656:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006658:	0559      	lsls	r1, r3, #21
 800665a:	d504      	bpl.n	8006666 <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
 800665c:	4816      	ldr	r0, [pc, #88]	; (80066b8 <bus_fault.constprop.0+0xd0>)
 800665e:	f044 0101 	orr.w	r1, r4, #1
 8006662:	f002 fae0 	bl	8008c26 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8006666:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006668:	05da      	lsls	r2, r3, #23
 800666a:	d50d      	bpl.n	8006688 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
 800666c:	4813      	ldr	r0, [pc, #76]	; (80066bc <bus_fault.constprop.0+0xd4>)
 800666e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8006672:	f002 fad8 	bl	8008c26 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8006676:	4a0a      	ldr	r2, [pc, #40]	; (80066a0 <bus_fault.constprop.0+0xb8>)
 8006678:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800667a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800667c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8006680:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8006682:	7030      	strb	r0, [r6, #0]
}
 8006684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8006688:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800668a:	049b      	lsls	r3, r3, #18
 800668c:	d5f3      	bpl.n	8006676 <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 800668e:	480c      	ldr	r0, [pc, #48]	; (80066c0 <bus_fault.constprop.0+0xd8>)
 8006690:	f044 0101 	orr.w	r1, r4, #1
 8006694:	e7ed      	b.n	8006672 <bus_fault.constprop.0+0x8a>
 8006696:	bf00      	nop
 8006698:	0800a3f0 	.word	0x0800a3f0
 800669c:	0800a400 	.word	0x0800a400
 80066a0:	e000ed00 	.word	0xe000ed00
 80066a4:	0800b910 	.word	0x0800b910
 80066a8:	0800b926 	.word	0x0800b926
 80066ac:	0800b7b4 	.word	0x0800b7b4
 80066b0:	0800b937 	.word	0x0800b937
 80066b4:	0800b950 	.word	0x0800b950
 80066b8:	0800b965 	.word	0x0800b965
 80066bc:	0800b980 	.word	0x0800b980
 80066c0:	0800b814 	.word	0x0800b814

080066c4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80066c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80066c8:	4b58      	ldr	r3, [pc, #352]	; (800682c <z_arm_fault+0x168>)
 80066ca:	685e      	ldr	r6, [r3, #4]
{
 80066cc:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80066ce:	f3c6 0408 	ubfx	r4, r6, #0, #9
 80066d2:	2500      	movs	r5, #0
 80066d4:	f385 8811 	msr	BASEPRI, r5
 80066d8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80066dc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80066e0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80066e4:	d10d      	bne.n	8006702 <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80066e6:	f002 030c 	and.w	r3, r2, #12
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d10b      	bne.n	8006706 <z_arm_fault+0x42>
 80066ee:	4950      	ldr	r1, [pc, #320]	; (8006830 <z_arm_fault+0x16c>)
 80066f0:	4b50      	ldr	r3, [pc, #320]	; (8006834 <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 80066f2:	4851      	ldr	r0, [pc, #324]	; (8006838 <z_arm_fault+0x174>)
 80066f4:	1ac9      	subs	r1, r1, r3
 80066f6:	08c9      	lsrs	r1, r1, #3
 80066f8:	0189      	lsls	r1, r1, #6
 80066fa:	f041 0101 	orr.w	r1, r1, #1
 80066fe:	f002 fa92 	bl	8008c26 <log_0>
		return NULL;
 8006702:	462f      	mov	r7, r5
 8006704:	e004      	b.n	8006710 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8006706:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8006708:	bf4e      	itee	mi
 800670a:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
 800670c:	4607      	movpl	r7, r0
			*nested_exc = true;
 800670e:	2501      	movpl	r5, #1
	*recoverable = false;
 8006710:	2300      	movs	r3, #0
 8006712:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
 8006716:	1ee3      	subs	r3, r4, #3
 8006718:	2b09      	cmp	r3, #9
 800671a:	d86e      	bhi.n	80067fa <z_arm_fault+0x136>
 800671c:	e8df f003 	tbb	[pc, r3]
 8006720:	40605c05 	.word	0x40605c05
 8006724:	6d6d6d6d 	.word	0x6d6d6d6d
 8006728:	646d      	.short	0x646d
 800672a:	4b42      	ldr	r3, [pc, #264]	; (8006834 <z_arm_fault+0x170>)
 800672c:	4e40      	ldr	r6, [pc, #256]	; (8006830 <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800672e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800682c <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
 8006732:	4842      	ldr	r0, [pc, #264]	; (800683c <z_arm_fault+0x178>)
 8006734:	1af6      	subs	r6, r6, r3
 8006736:	08f6      	lsrs	r6, r6, #3
 8006738:	01b6      	lsls	r6, r6, #6
 800673a:	f046 0601 	orr.w	r6, r6, #1
 800673e:	4631      	mov	r1, r6
 8006740:	f002 fa71 	bl	8008c26 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8006744:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
 8006748:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800674c:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
 8006750:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8006754:	d005      	beq.n	8006762 <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
 8006756:	483a      	ldr	r0, [pc, #232]	; (8006840 <z_arm_fault+0x17c>)
 8006758:	4631      	mov	r1, r6
	PR_FAULT_INFO(
 800675a:	f002 fa64 	bl	8008c26 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800675e:	2400      	movs	r4, #0
}
 8006760:	e021      	b.n	80067a6 <z_arm_fault+0xe2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8006762:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	d51d      	bpl.n	80067a6 <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
 800676a:	4836      	ldr	r0, [pc, #216]	; (8006844 <z_arm_fault+0x180>)
 800676c:	4631      	mov	r1, r6
 800676e:	f002 fa5a 	bl	8008c26 <log_0>
		if (SCB_MMFSR != 0) {
 8006772:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8006776:	b133      	cbz	r3, 8006786 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
 8006778:	f10d 0207 	add.w	r2, sp, #7
 800677c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800677e:	4638      	mov	r0, r7
 8006780:	f7ff fe54 	bl	800642c <mem_manage_fault>
 8006784:	e00e      	b.n	80067a4 <z_arm_fault+0xe0>
		} else if (SCB_BFSR != 0) {
 8006786:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
 800678a:	b12b      	cbz	r3, 8006798 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
 800678c:	f10d 0107 	add.w	r1, sp, #7
 8006790:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8006792:	f7ff ff29 	bl	80065e8 <bus_fault.constprop.0>
 8006796:	e005      	b.n	80067a4 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
 8006798:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 800679c:	b29b      	uxth	r3, r3
 800679e:	b113      	cbz	r3, 80067a6 <z_arm_fault+0xe2>
			reason = usage_fault(esf);
 80067a0:	f7ff fec6 	bl	8006530 <usage_fault.constprop.0>
 80067a4:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80067a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80067aa:	b993      	cbnz	r3, 80067d2 <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80067ac:	2268      	movs	r2, #104	; 0x68
 80067ae:	4639      	mov	r1, r7
 80067b0:	a802      	add	r0, sp, #8
 80067b2:	f003 fc44 	bl	800a03e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80067b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b8:	b39d      	cbz	r5, 8006822 <z_arm_fault+0x15e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80067ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067be:	b922      	cbnz	r2, 80067ca <z_arm_fault+0x106>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80067c0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80067c4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80067c8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 80067ca:	a902      	add	r1, sp, #8
 80067cc:	4620      	mov	r0, r4
 80067ce:	f7ff fd53 	bl	8006278 <z_arm_fatal_error>
}
 80067d2:	b01d      	add	sp, #116	; 0x74
 80067d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 80067d8:	f10d 0207 	add.w	r2, sp, #7
 80067dc:	2100      	movs	r1, #0
 80067de:	e7ce      	b.n	800677e <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
 80067e0:	f10d 0107 	add.w	r1, sp, #7
 80067e4:	2000      	movs	r0, #0
 80067e6:	e7d4      	b.n	8006792 <z_arm_fault+0xce>
 80067e8:	4911      	ldr	r1, [pc, #68]	; (8006830 <z_arm_fault+0x16c>)
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
 80067ec:	4816      	ldr	r0, [pc, #88]	; (8006848 <z_arm_fault+0x184>)
 80067ee:	1ac9      	subs	r1, r1, r3
 80067f0:	08c9      	lsrs	r1, r1, #3
 80067f2:	0189      	lsls	r1, r1, #6
 80067f4:	f041 0101 	orr.w	r1, r1, #1
 80067f8:	e7af      	b.n	800675a <z_arm_fault+0x96>
 80067fa:	4a0e      	ldr	r2, [pc, #56]	; (8006834 <z_arm_fault+0x170>)
 80067fc:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
 80067fe:	4813      	ldr	r0, [pc, #76]	; (800684c <z_arm_fault+0x188>)
 8006800:	4913      	ldr	r1, [pc, #76]	; (8006850 <z_arm_fault+0x18c>)
 8006802:	1a9b      	subs	r3, r3, r2
 8006804:	08db      	lsrs	r3, r3, #3
 8006806:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
 800680a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800680e:	bf18      	it	ne
 8006810:	4601      	movne	r1, r0
 8006812:	f043 0301 	orr.w	r3, r3, #1
 8006816:	480f      	ldr	r0, [pc, #60]	; (8006854 <z_arm_fault+0x190>)
 8006818:	f1a4 0210 	sub.w	r2, r4, #16
 800681c:	f002 fa29 	bl	8008c72 <log_2>
 8006820:	e79d      	b.n	800675e <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8006822:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	e7cd      	b.n	80067c8 <z_arm_fault+0x104>
 800682c:	e000ed00 	.word	0xe000ed00
 8006830:	0800a400 	.word	0x0800a400
 8006834:	0800a3f0 	.word	0x0800a3f0
 8006838:	0800b998 	.word	0x0800b998
 800683c:	0800b9c3 	.word	0x0800b9c3
 8006840:	0800b9da 	.word	0x0800b9da
 8006844:	0800b9fb 	.word	0x0800b9fb
 8006848:	0800ba1a 	.word	0x0800ba1a
 800684c:	0800ba53 	.word	0x0800ba53
 8006850:	0800ba3e 	.word	0x0800ba3e
 8006854:	0800ba6c 	.word	0x0800ba6c

08006858 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8006858:	4a02      	ldr	r2, [pc, #8]	; (8006864 <z_arm_fault_init+0xc>)
 800685a:	6953      	ldr	r3, [r2, #20]
 800685c:	f043 0310 	orr.w	r3, r3, #16
 8006860:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8006862:	4770      	bx	lr
 8006864:	e000ed00 	.word	0xe000ed00

08006868 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8006868:	4b04      	ldr	r3, [pc, #16]	; (800687c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800686a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 800686c:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
 800686e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8006870:	d003      	beq.n	800687a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8006872:	4903      	ldr	r1, [pc, #12]	; (8006880 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8006874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8006878:	600a      	str	r2, [r1, #0]

0800687a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800687a:	4770      	bx	lr
	ldr r3, =_kernel
 800687c:	20001808 	.word	0x20001808
	ldr r1, =_SCS_ICSR
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <z_arm_interrupt_init>:
 8006884:	4804      	ldr	r0, [pc, #16]	; (8006898 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	2110      	movs	r1, #16
 800688a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800688c:	3301      	adds	r3, #1
 800688e:	2b52      	cmp	r3, #82	; 0x52
 8006890:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8006894:	d1f9      	bne.n	800688a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8006896:	4770      	bx	lr
 8006898:	e000e100 	.word	0xe000e100

0800689c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <z_impl_k_thread_abort+0x1c>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4283      	cmp	r3, r0
 80068a2:	d107      	bne.n	80068b4 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068a4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80068a8:	b123      	cbz	r3, 80068b4 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80068aa:	4a04      	ldr	r2, [pc, #16]	; (80068bc <z_impl_k_thread_abort+0x20>)
 80068ac:	6853      	ldr	r3, [r2, #4]
 80068ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b2:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 80068b4:	f001 b9e2 	b.w	8007c7c <z_thread_abort>
 80068b8:	20001808 	.word	0x20001808
 80068bc:	e000ed00 	.word	0xe000ed00

080068c0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80068c0:	4b02      	ldr	r3, [pc, #8]	; (80068cc <z_arm_configure_static_mpu_regions+0xc>)
 80068c2:	4a03      	ldr	r2, [pc, #12]	; (80068d0 <z_arm_configure_static_mpu_regions+0x10>)
 80068c4:	4803      	ldr	r0, [pc, #12]	; (80068d4 <z_arm_configure_static_mpu_regions+0x14>)
 80068c6:	2101      	movs	r1, #1
 80068c8:	f000 b892 	b.w	80069f0 <arm_core_mpu_configure_static_mpu_regions>
 80068cc:	20020000 	.word	0x20020000
 80068d0:	20000000 	.word	0x20000000
 80068d4:	0800b12c 	.word	0x0800b12c

080068d8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 80068d8:	b510      	push	{r4, lr}
 80068da:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
 80068dc:	f7ff fc42 	bl	8006164 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80068e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80068e2:	4b06      	ldr	r3, [pc, #24]	; (80068fc <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
 80068e4:	1a12      	subs	r2, r2, r0
	dynamic_regions[region_num].size = guard_size;
 80068e6:	e9c3 2000 	strd	r2, r0, [r3]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80068ea:	4a05      	ldr	r2, [pc, #20]	; (8006900 <z_arm_configure_dynamic_mpu_regions+0x28>)
 80068ec:	609a      	str	r2, [r3, #8]
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
 80068ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80068f2:	2101      	movs	r1, #1
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 b885 	b.w	8006a04 <arm_core_mpu_configure_dynamic_mpu_regions>
 80068fa:	bf00      	nop
 80068fc:	2000173c 	.word	0x2000173c
 8006900:	150b0000 	.word	0x150b0000

08006904 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 8006906:	4f2a      	ldr	r7, [pc, #168]	; (80069b0 <mpu_configure_regions+0xac>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8006908:	2600      	movs	r6, #0
 800690a:	428e      	cmp	r6, r1
 800690c:	da15      	bge.n	800693a <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
 800690e:	6844      	ldr	r4, [r0, #4]
 8006910:	2c00      	cmp	r4, #0
 8006912:	d049      	beq.n	80069a8 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8006914:	b1cb      	cbz	r3, 800694a <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8006916:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 800691a:	ea14 0f0c 	tst.w	r4, ip
 800691e:	d00e      	beq.n	800693e <mpu_configure_regions+0x3a>
 8006920:	4a24      	ldr	r2, [pc, #144]	; (80069b4 <mpu_configure_regions+0xb0>)
 8006922:	4b25      	ldr	r3, [pc, #148]	; (80069b8 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 8006924:	4825      	ldr	r0, [pc, #148]	; (80069bc <mpu_configure_regions+0xb8>)
 8006926:	1ad2      	subs	r2, r2, r3
 8006928:	08d2      	lsrs	r2, r2, #3
 800692a:	0192      	lsls	r2, r2, #6
 800692c:	f042 0201 	orr.w	r2, r2, #1
 8006930:	4631      	mov	r1, r6
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8006932:	f002 f987 	bl	8008c44 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8006936:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 800693a:	4610      	mov	r0, r2
 800693c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
 800693e:	2c1f      	cmp	r4, #31
 8006940:	d9ee      	bls.n	8006920 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
 8006942:	6805      	ldr	r5, [r0, #0]
		&&
 8006944:	ea1c 0f05 	tst.w	ip, r5
 8006948:	d1ea      	bne.n	8006920 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 800694a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 800694c:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800694e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
 8006952:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
 8006954:	d916      	bls.n	8006984 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
 8006956:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800695a:	d815      	bhi.n	8006988 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800695c:	3c01      	subs	r4, #1
 800695e:	fab4 f484 	clz	r4, r4
 8006962:	f1c4 041f 	rsb	r4, r4, #31
 8006966:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8006968:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800696a:	ea4c 0404 	orr.w	r4, ip, r4
 800696e:	d90d      	bls.n	800698c <mpu_configure_regions+0x88>
 8006970:	4a10      	ldr	r2, [pc, #64]	; (80069b4 <mpu_configure_regions+0xb0>)
 8006972:	4b11      	ldr	r3, [pc, #68]	; (80069b8 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8006974:	4812      	ldr	r0, [pc, #72]	; (80069c0 <mpu_configure_regions+0xbc>)
 8006976:	1ad2      	subs	r2, r2, r3
 8006978:	08d2      	lsrs	r2, r2, #3
 800697a:	0192      	lsls	r2, r2, #6
 800697c:	f042 0201 	orr.w	r2, r2, #1
 8006980:	4629      	mov	r1, r5
 8006982:	e7d6      	b.n	8006932 <mpu_configure_regions+0x2e>
		return REGION_32B;
 8006984:	2408      	movs	r4, #8
 8006986:	e7ef      	b.n	8006968 <mpu_configure_regions+0x64>
		return REGION_4G;
 8006988:	243e      	movs	r4, #62	; 0x3e
 800698a:	e7ed      	b.n	8006968 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800698c:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
 8006990:	432a      	orrs	r2, r5
 8006992:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8006996:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 800699a:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800699e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80069a2:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
 80069a6:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
 80069a8:	3601      	adds	r6, #1
 80069aa:	300c      	adds	r0, #12
 80069ac:	e7ad      	b.n	800690a <mpu_configure_regions+0x6>
 80069ae:	bf00      	nop
 80069b0:	e000ed00 	.word	0xe000ed00
 80069b4:	0800a3f8 	.word	0x0800a3f8
 80069b8:	0800a3f0 	.word	0x0800a3f0
 80069bc:	0800ba83 	.word	0x0800ba83
 80069c0:	0800baa6 	.word	0x0800baa6

080069c4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80069c4:	4b04      	ldr	r3, [pc, #16]	; (80069d8 <arm_core_mpu_enable+0x14>)
 80069c6:	2205      	movs	r2, #5
 80069c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 80069cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80069d0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	e000ed00 	.word	0xe000ed00

080069dc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80069dc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80069e0:	4b02      	ldr	r3, [pc, #8]	; (80069ec <arm_core_mpu_disable+0x10>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	e000ed00 	.word	0xe000ed00

080069f0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 80069f0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80069f2:	4c03      	ldr	r4, [pc, #12]	; (8006a00 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80069f4:	2301      	movs	r3, #1
 80069f6:	7822      	ldrb	r2, [r4, #0]
 80069f8:	f7ff ff84 	bl	8006904 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80069fc:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 80069fe:	bd10      	pop	{r4, pc}
 8006a00:	20001cf7 	.word	0x20001cf7

08006a04 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8006a04:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8006a06:	4a09      	ldr	r2, [pc, #36]	; (8006a2c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	7812      	ldrb	r2, [r2, #0]
 8006a0c:	f7ff ff7a 	bl	8006904 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8006a10:	f110 0f16 	cmn.w	r0, #22
 8006a14:	d003      	beq.n	8006a1e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8006a16:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 8006a18:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8006a1a:	2807      	cmp	r0, #7
 8006a1c:	dd00      	ble.n	8006a20 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8006a1e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8006a20:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
 8006a24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8006a28:	3001      	adds	r0, #1
 8006a2a:	e7f6      	b.n	8006a1a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8006a2c:	20001cf7 	.word	0x20001cf7
 8006a30:	e000ed00 	.word	0xe000ed00

08006a34 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8006a34:	4914      	ldr	r1, [pc, #80]	; (8006a88 <z_arm_mpu_init+0x54>)
 8006a36:	6808      	ldr	r0, [r1, #0]
 8006a38:	2808      	cmp	r0, #8
{
 8006a3a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8006a3c:	d821      	bhi.n	8006a82 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8006a3e:	f7ff ffcd 	bl	80069dc <arm_core_mpu_disable>
	MPU->RNR = index;
 8006a42:	4c12      	ldr	r4, [pc, #72]	; (8006a8c <z_arm_mpu_init+0x58>)
 8006a44:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8006a46:	2200      	movs	r2, #0
 8006a48:	4290      	cmp	r0, r2
 8006a4a:	f101 010c 	add.w	r1, r1, #12
 8006a4e:	d105      	bne.n	8006a5c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8006a50:	4b0f      	ldr	r3, [pc, #60]	; (8006a90 <z_arm_mpu_init+0x5c>)
 8006a52:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8006a54:	f7ff ffb6 	bl	80069c4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8006a58:	2000      	movs	r0, #0
}
 8006a5a:	bd10      	pop	{r4, pc}
 8006a5c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8006a60:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8006a64:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8006a6e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8006a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a76:	f043 0301 	orr.w	r3, r3, #1
 8006a7a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8006a7e:	3201      	adds	r2, #1
 8006a80:	e7e2      	b.n	8006a48 <z_arm_mpu_init+0x14>
		return -1;
 8006a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a86:	e7e8      	b.n	8006a5a <z_arm_mpu_init+0x26>
 8006a88:	0800b138 	.word	0x0800b138
 8006a8c:	e000ed00 	.word	0xe000ed00
 8006a90:	20001cf7 	.word	0x20001cf7

08006a94 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8006a94:	4b01      	ldr	r3, [pc, #4]	; (8006a9c <__stdout_hook_install+0x8>)
 8006a96:	6018      	str	r0, [r3, #0]
}
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	20000020 	.word	0x20000020

08006aa0 <clock_control_on.constprop.0>:
 *
 * @param dev Device structure whose driver controls the clock.
 * @param sys Opaque data representing the clock.
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
 8006aa0:	b513      	push	{r0, r1, r4, lr}
 8006aa2:	9001      	str	r0, [sp, #4]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8006aa4:	4c08      	ldr	r4, [pc, #32]	; (8006ac8 <clock_control_on.constprop.0+0x28>)
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f002 ffc7 	bl	8009a3a <z_device_ready>
 8006aac:	b138      	cbz	r0, 8006abe <clock_control_on.constprop.0+0x1e>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8006aae:	68a3      	ldr	r3, [r4, #8]
 8006ab0:	9901      	ldr	r1, [sp, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4620      	mov	r0, r4
}
 8006ab6:	b002      	add	sp, #8
 8006ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->on(dev, sys);
 8006abc:	4718      	bx	r3
}
 8006abe:	f06f 0012 	mvn.w	r0, #18
 8006ac2:	b002      	add	sp, #8
 8006ac4:	bd10      	pop	{r4, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000064 	.word	0x20000064

08006acc <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8006acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ace:	460c      	mov	r4, r1
 8006ad0:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8006ad2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 8006ad6:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8006ad8:	6902      	ldr	r2, [r0, #16]
{
 8006ada:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8006adc:	d123      	bne.n	8006b26 <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006ade:	f004 0303 	and.w	r3, r4, #3
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	009a      	lsls	r2, r3, #2
 8006ae6:	230f      	movs	r3, #15
 8006ae8:	4093      	lsls	r3, r2
 8006aea:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	4933      	ldr	r1, [pc, #204]	; (8006bc0 <gpio_stm32_pin_interrupt_configure+0xf4>)
 8006af2:	3202      	adds	r2, #2
 8006af4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006af8:	0c19      	lsrs	r1, r3, #16
 8006afa:	ea02 4313 	and.w	r3, r2, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006afe:	fa91 f2a1 	rbit	r2, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8006b02:	fab2 f282 	clz	r2, r2
 8006b06:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d109      	bne.n	8006b22 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f7fe fff8 	bl	8005b04 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7ff f849 	bl	8005bac <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f7fe ffff 	bl	8005b20 <stm32_exti_trigger>
	int err = 0;
 8006b22:	2500      	movs	r5, #0
 8006b24:	e03e      	b.n	8006ba4 <gpio_stm32_pin_interrupt_configure+0xd8>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8006b26:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006b2a:	d042      	beq.n	8006bb2 <gpio_stm32_pin_interrupt_configure+0xe6>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8006b2c:	4925      	ldr	r1, [pc, #148]	; (8006bc4 <gpio_stm32_pin_interrupt_configure+0xf8>)
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f7ff f82a 	bl	8005b88 <stm32_exti_set_callback>
 8006b34:	4605      	mov	r5, r0
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d13e      	bne.n	8006bb8 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 8006b3a:	4a23      	ldr	r2, [pc, #140]	; (8006bc8 <gpio_stm32_pin_interrupt_configure+0xfc>)
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8006b3c:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 8006b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b42:	466b      	mov	r3, sp
 8006b44:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7ff ffa9 	bl	8006aa0 <clock_control_on.constprop.0>
	if (ret != 0) {
 8006b4e:	b9c0      	cbnz	r0, 8006b82 <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006b50:	f004 0103 	and.w	r1, r4, #3
 8006b54:	3104      	adds	r1, #4
 8006b56:	008b      	lsls	r3, r1, #2
 8006b58:	210f      	movs	r1, #15
 8006b5a:	4099      	lsls	r1, r3
 8006b5c:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8006b60:	b2ca      	uxtb	r2, r1
 8006b62:	0092      	lsls	r2, r2, #2
 8006b64:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006b68:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8006b6c:	0c0b      	lsrs	r3, r1, #16
 8006b6e:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b70:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8006b74:	fab3 f383 	clz	r3, r3
 8006b78:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 8006b7c:	409f      	lsls	r7, r3
 8006b7e:	430f      	orrs	r7, r1
 8006b80:	6097      	str	r7, [r2, #8]

	switch (trig) {
 8006b82:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8006b86:	d010      	beq.n	8006baa <gpio_stm32_pin_interrupt_configure+0xde>
 8006b88:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 8006b8c:	d00f      	beq.n	8006bae <gpio_stm32_pin_interrupt_configure+0xe2>
 8006b8e:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 8006b92:	bf14      	ite	ne
 8006b94:	2100      	movne	r1, #0
 8006b96:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f7fe ffc1 	bl	8005b20 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f7fe ffa2 	bl	8005ae8 <stm32_exti_enable>

exit:
	return err;
}
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	b003      	add	sp, #12
 8006ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8006baa:	2101      	movs	r1, #1
 8006bac:	e7f4      	b.n	8006b98 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 8006bae:	2103      	movs	r1, #3
 8006bb0:	e7f2      	b.n	8006b98 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 8006bb2:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8006bb6:	e7f5      	b.n	8006ba4 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 8006bb8:	f06f 050f 	mvn.w	r5, #15
	return err;
 8006bbc:	e7f2      	b.n	8006ba4 <gpio_stm32_pin_interrupt_configure+0xd8>
 8006bbe:	bf00      	nop
 8006bc0:	40013800 	.word	0x40013800
 8006bc4:	0800964b 	.word	0x0800964b
 8006bc8:	0800a4d0 	.word	0x0800a4d0

08006bcc <gpio_stm32_clock_request>:
{
 8006bcc:	b570      	push	{r4, r5, r6, lr}
					(clock_control_subsys_t *)&cfg->pclken);
 8006bce:	6844      	ldr	r4, [r0, #4]
 8006bd0:	340c      	adds	r4, #12
	if (on) {
 8006bd2:	b121      	cbz	r1, 8006bde <gpio_stm32_clock_request+0x12>
		ret = clock_control_on(clk,
 8006bd4:	4620      	mov	r0, r4
}
 8006bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = clock_control_on(clk,
 8006bda:	f7ff bf61 	b.w	8006aa0 <clock_control_on.constprop.0>
 8006bde:	4d07      	ldr	r5, [pc, #28]	; (8006bfc <gpio_stm32_clock_request+0x30>)
 8006be0:	4628      	mov	r0, r5
 8006be2:	f002 ff2a 	bl	8009a3a <z_device_ready>
 8006be6:	b130      	cbz	r0, 8006bf6 <gpio_stm32_clock_request+0x2a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8006be8:	68ab      	ldr	r3, [r5, #8]
 8006bea:	4621      	mov	r1, r4
 8006bec:	4628      	mov	r0, r5
 8006bee:	685b      	ldr	r3, [r3, #4]
}
 8006bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bf4:	4718      	bx	r3
 8006bf6:	f06f 0012 	mvn.w	r0, #18
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}
 8006bfc:	20000064 	.word	0x20000064

08006c00 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006c00:	6843      	ldr	r3, [r0, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8006c04:	695a      	ldr	r2, [r3, #20]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	615a      	str	r2, [r3, #20]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 8006c0c:	4a0f      	ldr	r2, [pc, #60]	; (8006c4c <uart_stm32_irq_err_enable+0x4c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d013      	beq.n	8006c3a <uart_stm32_irq_err_enable+0x3a>
 8006c12:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00f      	beq.n	8006c3a <uart_stm32_irq_err_enable+0x3a>
 8006c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00b      	beq.n	8006c3a <uart_stm32_irq_err_enable+0x3a>
 8006c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d007      	beq.n	8006c3a <uart_stm32_irq_err_enable+0x3a>
 8006c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d003      	beq.n	8006c3a <uart_stm32_irq_err_enable+0x3a>
 8006c32:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d103      	bne.n	8006c42 <uart_stm32_irq_err_enable+0x42>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c40:	611a      	str	r2, [r3, #16]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c48:	60da      	str	r2, [r3, #12]
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 8006c4a:	4770      	bx	lr
 8006c4c:	40011000 	.word	0x40011000

08006c50 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006c50:	6843      	ldr	r3, [r0, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8006c54:	695a      	ldr	r2, [r3, #20]
 8006c56:	f022 0201 	bic.w	r2, r2, #1
 8006c5a:	615a      	str	r2, [r3, #20]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 8006c5c:	4a0f      	ldr	r2, [pc, #60]	; (8006c9c <uart_stm32_irq_err_disable+0x4c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d013      	beq.n	8006c8a <uart_stm32_irq_err_disable+0x3a>
 8006c62:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00f      	beq.n	8006c8a <uart_stm32_irq_err_disable+0x3a>
 8006c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00b      	beq.n	8006c8a <uart_stm32_irq_err_disable+0x3a>
 8006c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d007      	beq.n	8006c8a <uart_stm32_irq_err_disable+0x3a>
 8006c7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d003      	beq.n	8006c8a <uart_stm32_irq_err_disable+0x3a>
 8006c82:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d103      	bne.n	8006c92 <uart_stm32_irq_err_disable+0x42>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c98:	60da      	str	r2, [r3, #12]
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 8006c9a:	4770      	bx	lr
 8006c9c:	40011000 	.word	0x40011000

08006ca0 <uart_stm32_set_baudrate>:
{
 8006ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (clock_control_get_rate(data->clock,
 8006ca2:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006ca4:	6847      	ldr	r7, [r0, #4]
	if (clock_control_get_rate(data->clock,
 8006ca6:	685e      	ldr	r6, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006ca8:	f857 4b0c 	ldr.w	r4, [r7], #12
{
 8006cac:	460d      	mov	r5, r1
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f002 fec3 	bl	8009a3a <z_device_ready>
 8006cb4:	b958      	cbnz	r0, 8006cce <uart_stm32_set_baudrate+0x2e>
 8006cb6:	4918      	ldr	r1, [pc, #96]	; (8006d18 <uart_stm32_set_baudrate+0x78>)
 8006cb8:	4b18      	ldr	r3, [pc, #96]	; (8006d1c <uart_stm32_set_baudrate+0x7c>)
		LOG_ERR("Failed call clock_control_get_rate");
 8006cba:	4819      	ldr	r0, [pc, #100]	; (8006d20 <uart_stm32_set_baudrate+0x80>)
 8006cbc:	1ac9      	subs	r1, r1, r3
 8006cbe:	08c9      	lsrs	r1, r1, #3
 8006cc0:	0189      	lsls	r1, r1, #6
 8006cc2:	f041 0101 	orr.w	r1, r1, #1
 8006cc6:	f001 ffae 	bl	8008c26 <log_0>
}
 8006cca:	b003      	add	sp, #12
 8006ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8006cce:	68b3      	ldr	r3, [r6, #8]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0ef      	beq.n	8006cb6 <uart_stm32_set_baudrate+0x16>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8006cd6:	aa01      	add	r2, sp, #4
 8006cd8:	4639      	mov	r1, r7
 8006cda:	4630      	mov	r0, r6
 8006cdc:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	dbe9      	blt.n	8006cb6 <uart_stm32_set_baudrate+0x16>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8006ce2:	68e3      	ldr	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006ce4:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8006ce6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006cea:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8006cec:	60e3      	str	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006cee:	00aa      	lsls	r2, r5, #2
 8006cf0:	0fab      	lsrs	r3, r5, #30
 8006cf2:	fba0 0101 	umull	r0, r1, r0, r1
 8006cf6:	f7f9 fe65 	bl	80009c4 <__aeabi_uldivmod>
 8006cfa:	2264      	movs	r2, #100	; 0x64
 8006cfc:	fbb0 f1f2 	udiv	r1, r0, r2
 8006d00:	fb02 0311 	mls	r3, r2, r1, r0
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	3332      	adds	r3, #50	; 0x32
 8006d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d0c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	60a3      	str	r3, [r4, #8]
 8006d14:	e7d9      	b.n	8006cca <uart_stm32_set_baudrate+0x2a>
 8006d16:	bf00      	nop
 8006d18:	0800a410 	.word	0x0800a410
 8006d1c:	0800a3f0 	.word	0x0800a3f0
 8006d20:	0800bb1e 	.word	0x0800bb1e

08006d24 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8006d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8006d28:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8006d2a:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8006d2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e00 <uart_stm32_init+0xdc>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006d30:	46b1      	mov	r9, r6
{
 8006d32:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006d34:	f859 4b0c 	ldr.w	r4, [r9], #12
	data->clock = clk;
 8006d38:	f8c7 8004 	str.w	r8, [r7, #4]
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	f002 fe7c 	bl	8009a3a <z_device_ready>
 8006d42:	b918      	cbnz	r0, 8006d4c <uart_stm32_init+0x28>

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
 8006d44:	f06f 0004 	mvn.w	r0, #4
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8006d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return api->on(dev, sys);
 8006d4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d50:	4640      	mov	r0, r8
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4649      	mov	r1, r9
 8006d56:	4798      	blx	r3
	if (clock_control_on(data->clock,
 8006d58:	4680      	mov	r8, r0
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d1f2      	bne.n	8006d44 <uart_stm32_init+0x20>
					 (uint32_t)UART_STRUCT(dev));
 8006d5e:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8006d60:	e9d6 0107 	ldrd	r0, r1, [r6, #28]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	f7ff f811 	bl	8005d8c <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	dbec      	blt.n	8006d48 <uart_stm32_init+0x24>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8006d6e:	68e3      	ldr	r3, [r4, #12]
	if (config->parity == 2) {
 8006d70:	69b1      	ldr	r1, [r6, #24]
 8006d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d76:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8006d78:	68e3      	ldr	r3, [r4, #12]
 8006d7a:	2902      	cmp	r1, #2
 8006d7c:	f043 030c 	orr.w	r3, r3, #12
 8006d80:	60e3      	str	r3, [r4, #12]
 8006d82:	d00f      	beq.n	8006da4 <uart_stm32_init+0x80>
	} else if (config->parity == 1) {
 8006d84:	2901      	cmp	r1, #1
 8006d86:	d030      	beq.n	8006dea <uart_stm32_init+0xc6>
		if (config->parity != 0) {
 8006d88:	b151      	cbz	r1, 8006da0 <uart_stm32_init+0x7c>
 8006d8a:	4b1a      	ldr	r3, [pc, #104]	; (8006df4 <uart_stm32_init+0xd0>)
 8006d8c:	4a1a      	ldr	r2, [pc, #104]	; (8006df8 <uart_stm32_init+0xd4>)
			LOG_WRN("Invalid parity setting '%d'."
 8006d8e:	481b      	ldr	r0, [pc, #108]	; (8006dfc <uart_stm32_init+0xd8>)
 8006d90:	1ad2      	subs	r2, r2, r3
 8006d92:	08d2      	lsrs	r2, r2, #3
 8006d94:	0192      	lsls	r2, r2, #6
 8006d96:	f042 0202 	orr.w	r2, r2, #2
 8006d9a:	f001 ff53 	bl	8008c44 <log_1>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8006d9e:	4641      	mov	r1, r8
		ll_parity = LL_USART_PARITY_NONE;
 8006da0:	4608      	mov	r0, r1
 8006da2:	e003      	b.n	8006dac <uart_stm32_init+0x88>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8006da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8006da8:	f44f 6080 	mov.w	r0, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8006dac:	68e3      	ldr	r3, [r4, #12]
 8006dae:	4301      	orrs	r1, r0
 8006db0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006db4:	4319      	orrs	r1, r3
 8006db6:	60e1      	str	r1, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006db8:	6923      	ldr	r3, [r4, #16]
 8006dba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006dbe:	6123      	str	r3, [r4, #16]
	if (config->hw_flow_control) {
 8006dc0:	7d33      	ldrb	r3, [r6, #20]
 8006dc2:	b12b      	cbz	r3, 8006dd0 <uart_stm32_init+0xac>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006dc4:	686b      	ldr	r3, [r5, #4]
 8006dc6:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006dc8:	6953      	ldr	r3, [r2, #20]
 8006dca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006dce:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f7ff ff64 	bl	8006ca0 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006dd8:	68e3      	ldr	r3, [r4, #12]
 8006dda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006dde:	60e3      	str	r3, [r4, #12]
	config->uconf.irq_config_func(dev);
 8006de0:	4628      	mov	r0, r5
 8006de2:	68b3      	ldr	r3, [r6, #8]
 8006de4:	4798      	blx	r3
	return 0;
 8006de6:	2000      	movs	r0, #0
 8006de8:	e7ae      	b.n	8006d48 <uart_stm32_init+0x24>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8006dea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8006dee:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8006df2:	e7db      	b.n	8006dac <uart_stm32_init+0x88>
 8006df4:	0800a3f0 	.word	0x0800a3f0
 8006df8:	0800a410 	.word	0x0800a410
 8006dfc:	0800bb41 	.word	0x0800bb41
 8006e00:	20000064 	.word	0x20000064

08006e04 <uart_stm32_configure>:
{
 8006e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8006e08:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006e0a:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8006e0c:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006e0e:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 8006e10:	2a01      	cmp	r2, #1
{
 8006e12:	460d      	mov	r5, r1
	switch (parity) {
 8006e14:	f000 8081 	beq.w	8006f1a <uart_stm32_configure+0x116>
		return LL_USART_PARITY_NONE;
 8006e18:	2a02      	cmp	r2, #2
 8006e1a:	bf0c      	ite	eq
 8006e1c:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8006e20:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8006e22:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8006e26:	f895 e006 	ldrb.w	lr, [r5, #6]
 8006e2a:	f1b9 0f02 	cmp.w	r9, #2
 8006e2e:	bf96      	itet	ls
 8006e30:	4b3e      	ldrls	r3, [pc, #248]	; (8006f2c <uart_stm32_configure+0x128>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8006e32:	f44f 5800 	movhi.w	r8, #8192	; 0x2000
 8006e36:	f833 8019 	ldrhls.w	r8, [r3, r9, lsl #1]
	switch (db) {
 8006e3a:	f1be 0f04 	cmp.w	lr, #4
 8006e3e:	d06f      	beq.n	8006f20 <uart_stm32_configure+0x11c>
		return LL_USART_DATAWIDTH_9B;
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	bf0c      	ite	eq
 8006e44:	2300      	moveq	r3, #0
 8006e46:	f44f 5380 	movne.w	r3, #4096	; 0x1000
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8006e4a:	79ef      	ldrb	r7, [r5, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006e4c:	f1a2 0a03 	sub.w	sl, r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8006e50:	2f01      	cmp	r7, #1
 8006e52:	bf14      	ite	ne
 8006e54:	f04f 0c00 	movne.w	ip, #0
 8006e58:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006e5c:	f1ba 0f01 	cmp.w	sl, #1
 8006e60:	d961      	bls.n	8006f26 <uart_stm32_configure+0x122>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8006e62:	b112      	cbz	r2, 8006e6a <uart_stm32_configure+0x66>
 8006e64:	f1be 0f04 	cmp.w	lr, #4
 8006e68:	d05d      	beq.n	8006f26 <uart_stm32_configure+0x122>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006e6a:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8006e6e:	d05a      	beq.n	8006f26 <uart_stm32_configure+0x122>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8006e70:	f1be 0f02 	cmp.w	lr, #2
 8006e74:	d957      	bls.n	8006f26 <uart_stm32_configure+0x122>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8006e76:	f1be 0f04 	cmp.w	lr, #4
 8006e7a:	d054      	beq.n	8006f26 <uart_stm32_configure+0x122>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8006e7c:	b187      	cbz	r7, 8006ea0 <uart_stm32_configure+0x9c>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8006e7e:	4a2c      	ldr	r2, [pc, #176]	; (8006f30 <uart_stm32_configure+0x12c>)
 8006e80:	4294      	cmp	r4, r2
 8006e82:	d00b      	beq.n	8006e9c <uart_stm32_configure+0x98>
 8006e84:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8006e88:	4294      	cmp	r4, r2
 8006e8a:	d007      	beq.n	8006e9c <uart_stm32_configure+0x98>
 8006e8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e90:	4294      	cmp	r4, r2
 8006e92:	d003      	beq.n	8006e9c <uart_stm32_configure+0x98>
 8006e94:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8006e98:	4294      	cmp	r4, r2
 8006e9a:	d144      	bne.n	8006f26 <uart_stm32_configure+0x122>
 8006e9c:	2f01      	cmp	r7, #1
 8006e9e:	d142      	bne.n	8006f26 <uart_stm32_configure+0x122>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8006ea0:	68e2      	ldr	r2, [r4, #12]
 8006ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ea6:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8006ea8:	68e2      	ldr	r2, [r4, #12]
 8006eaa:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8006eae:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8006eb0:	bf1f      	itttt	ne
 8006eb2:	68e7      	ldrne	r7, [r4, #12]
 8006eb4:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8006eb8:	430f      	orrne	r7, r1
 8006eba:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8006ebc:	6922      	ldr	r2, [r4, #16]
 8006ebe:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8006ec2:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006ec4:	bf1f      	itttt	ne
 8006ec6:	6921      	ldrne	r1, [r4, #16]
 8006ec8:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8006ecc:	ea41 0108 	orrne.w	r1, r1, r8
 8006ed0:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8006ed2:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 8006ed4:	6829      	ldr	r1, [r5, #0]
 8006ed6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8006eda:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8006edc:	bf1f      	itttt	ne
 8006ede:	68e2      	ldrne	r2, [r4, #12]
 8006ee0:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8006ee4:	431a      	orrne	r2, r3
 8006ee6:	60e2      	strne	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8006ee8:	6963      	ldr	r3, [r4, #20]
 8006eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8006eee:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006ef0:	bf1f      	itttt	ne
 8006ef2:	6963      	ldrne	r3, [r4, #20]
 8006ef4:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8006ef8:	ea43 030c 	orrne.w	r3, r3, ip
 8006efc:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 8006efe:	6833      	ldr	r3, [r6, #0]
 8006f00:	4299      	cmp	r1, r3
 8006f02:	d003      	beq.n	8006f0c <uart_stm32_configure+0x108>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8006f04:	f7ff fecc 	bl	8006ca0 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006f0c:	68e3      	ldr	r3, [r4, #12]
 8006f0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f12:	60e3      	str	r3, [r4, #12]
	return 0;
 8006f14:	2000      	movs	r0, #0
};
 8006f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (parity) {
 8006f1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f1e:	e780      	b.n	8006e22 <uart_stm32_configure+0x1e>
		return LL_USART_DATAWIDTH_9B;
 8006f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f24:	e791      	b.n	8006e4a <uart_stm32_configure+0x46>
		return -ENOTSUP;
 8006f26:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006f2a:	e7f4      	b.n	8006f16 <uart_stm32_configure+0x112>
 8006f2c:	0800b4e0 	.word	0x0800b4e0
 8006f30:	40011000 	.word	0x40011000

08006f34 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8006f34:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <UTILS_PLL_IsBusy+0x18>)
 8006f36:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8006f38:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8006f3a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8006f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8006f42:	4313      	orrs	r3, r2
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8006f44:	bf14      	ite	ne
 8006f46:	2001      	movne	r0, #1
 8006f48:	2000      	moveq	r0, #0
 8006f4a:	4770      	bx	lr
 8006f4c:	40023800 	.word	0x40023800

08006f50 <LL_SetFlashLatency>:
  if(HCLK_Frequency == 0U)
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d03a      	beq.n	8006fca <LL_SetFlashLatency+0x7a>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8006f54:	4b2a      	ldr	r3, [pc, #168]	; (8007000 <LL_SetFlashLatency+0xb0>)
 8006f56:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8006f58:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 8006f5c:	d012      	beq.n	8006f84 <LL_SetFlashLatency+0x34>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006f5e:	4b29      	ldr	r3, [pc, #164]	; (8007004 <LL_SetFlashLatency+0xb4>)
 8006f60:	4a29      	ldr	r2, [pc, #164]	; (8007008 <LL_SetFlashLatency+0xb8>)
 8006f62:	4298      	cmp	r0, r3
 8006f64:	d843      	bhi.n	8006fee <LL_SetFlashLatency+0x9e>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006f66:	4b29      	ldr	r3, [pc, #164]	; (800700c <LL_SetFlashLatency+0xbc>)
 8006f68:	4298      	cmp	r0, r3
 8006f6a:	d847      	bhi.n	8006ffc <LL_SetFlashLatency+0xac>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006f6c:	4290      	cmp	r0, r2
 8006f6e:	d83c      	bhi.n	8006fea <LL_SetFlashLatency+0x9a>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006f70:	4b27      	ldr	r3, [pc, #156]	; (8007010 <LL_SetFlashLatency+0xc0>)
 8006f72:	4298      	cmp	r0, r3
 8006f74:	d82b      	bhi.n	8006fce <LL_SetFlashLatency+0x7e>
 8006f76:	2300      	movs	r3, #0
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006f78:	4a26      	ldr	r2, [pc, #152]	; (8007014 <LL_SetFlashLatency+0xc4>)
 8006f7a:	4290      	cmp	r0, r2
 8006f7c:	d902      	bls.n	8006f84 <LL_SetFlashLatency+0x34>
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	bf38      	it	cc
 8006f82:	2301      	movcc	r3, #1
 8006f84:	4a1e      	ldr	r2, [pc, #120]	; (8007000 <LL_SetFlashLatency+0xb0>)
 8006f86:	6812      	ldr	r2, [r2, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8006f88:	0452      	lsls	r2, r2, #17
 8006f8a:	d40e      	bmi.n	8006faa <LL_SetFlashLatency+0x5a>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006f8c:	4a22      	ldr	r2, [pc, #136]	; (8007018 <LL_SetFlashLatency+0xc8>)
 8006f8e:	4290      	cmp	r0, r2
 8006f90:	d91f      	bls.n	8006fd2 <LL_SetFlashLatency+0x82>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006f92:	4a1d      	ldr	r2, [pc, #116]	; (8007008 <LL_SetFlashLatency+0xb8>)
        latency = LL_FLASH_LATENCY_4;
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	bf08      	it	eq
 8006f98:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006f9a:	4290      	cmp	r0, r2
 8006f9c:	d802      	bhi.n	8006fa4 <LL_SetFlashLatency+0x54>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006f9e:	4a1c      	ldr	r2, [pc, #112]	; (8007010 <LL_SetFlashLatency+0xc0>)
 8006fa0:	4290      	cmp	r0, r2
 8006fa2:	d81a      	bhi.n	8006fda <LL_SetFlashLatency+0x8a>
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006fa4:	4a1b      	ldr	r2, [pc, #108]	; (8007014 <LL_SetFlashLatency+0xc4>)
 8006fa6:	4290      	cmp	r0, r2
 8006fa8:	d817      	bhi.n	8006fda <LL_SetFlashLatency+0x8a>
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8006faa:	491c      	ldr	r1, [pc, #112]	; (800701c <LL_SetFlashLatency+0xcc>)
 8006fac:	680a      	ldr	r2, [r1, #0]
 8006fae:	f022 0207 	bic.w	r2, r2, #7
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8006fb6:	680a      	ldr	r2, [r1, #0]
 8006fb8:	f002 0207 	and.w	r2, r2, #7
    } while ((getlatency != latency) && (timeout > 0));
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d012      	beq.n	8006fe6 <LL_SetFlashLatency+0x96>
 8006fc0:	680a      	ldr	r2, [r1, #0]
 8006fc2:	f002 0207 	and.w	r2, r2, #7
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00d      	beq.n	8006fe6 <LL_SetFlashLatency+0x96>
    status = ERROR;
 8006fca:	2001      	movs	r0, #1
 8006fcc:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_2;
 8006fce:	2302      	movs	r3, #2
 8006fd0:	e7d8      	b.n	8006f84 <LL_SetFlashLatency+0x34>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006fd2:	4a0f      	ldr	r2, [pc, #60]	; (8007010 <LL_SetFlashLatency+0xc0>)
 8006fd4:	4290      	cmp	r0, r2
 8006fd6:	d9e5      	bls.n	8006fa4 <LL_SetFlashLatency+0x54>
 8006fd8:	b11b      	cbz	r3, 8006fe2 <LL_SetFlashLatency+0x92>
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	bf38      	it	cc
 8006fde:	2301      	movcc	r3, #1
 8006fe0:	e7e3      	b.n	8006faa <LL_SetFlashLatency+0x5a>
        latency = LL_FLASH_LATENCY_2;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e7e1      	b.n	8006faa <LL_SetFlashLatency+0x5a>
      status = SUCCESS;
 8006fe6:	2000      	movs	r0, #0
}
 8006fe8:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8006fea:	2303      	movs	r3, #3
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006fec:	e7c4      	b.n	8006f78 <LL_SetFlashLatency+0x28>
        latency = LL_FLASH_LATENCY_5;
 8006fee:	2305      	movs	r3, #5
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006ff0:	4290      	cmp	r0, r2
 8006ff2:	d8c1      	bhi.n	8006f78 <LL_SetFlashLatency+0x28>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8006ff4:	4a06      	ldr	r2, [pc, #24]	; (8007010 <LL_SetFlashLatency+0xc0>)
 8006ff6:	4290      	cmp	r0, r2
 8006ff8:	d9be      	bls.n	8006f78 <LL_SetFlashLatency+0x28>
 8006ffa:	e7c0      	b.n	8006f7e <LL_SetFlashLatency+0x2e>
        latency = LL_FLASH_LATENCY_4;
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	e7f7      	b.n	8006ff0 <LL_SetFlashLatency+0xa0>
 8007000:	40007000 	.word	0x40007000
 8007004:	08f0d180 	.word	0x08f0d180
 8007008:	055d4a80 	.word	0x055d4a80
 800700c:	07270e00 	.word	0x07270e00
 8007010:	03938700 	.word	0x03938700
 8007014:	01c9c380 	.word	0x01c9c380
 8007018:	00b71b00 	.word	0x00b71b00
 800701c:	40023c00 	.word	0x40023c00

08007020 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8007020:	680b      	ldr	r3, [r1, #0]
 8007022:	4a21      	ldr	r2, [pc, #132]	; (80070a8 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 8007024:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8007028:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800702a:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 800702c:	4e1f      	ldr	r6, [pc, #124]	; (80070ac <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800702e:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 8007032:	6833      	ldr	r3, [r6, #0]
 8007034:	42a3      	cmp	r3, r4
{
 8007036:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 8007038:	d327      	bcc.n	800708a <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800703a:	4b1d      	ldr	r3, [pc, #116]	; (80070b0 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007042:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8007044:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8007046:	0192      	lsls	r2, r2, #6
 8007048:	d5fc      	bpl.n	8007044 <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	6829      	ldr	r1, [r5, #0]
 800704e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007052:	430a      	orrs	r2, r1
 8007054:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	f022 0203 	bic.w	r2, r2, #3
 800705c:	f042 0202 	orr.w	r2, r2, #2
 8007060:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007062:	4b13      	ldr	r3, [pc, #76]	; (80070b0 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800706a:	2a08      	cmp	r2, #8
 800706c:	d1fa      	bne.n	8007064 <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	6869      	ldr	r1, [r5, #4]
 8007072:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8007076:	430a      	orrs	r2, r1
 8007078:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	68a9      	ldr	r1, [r5, #8]
 800707e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007082:	430a      	orrs	r2, r1
 8007084:	609a      	str	r2, [r3, #8]
}
 8007086:	2000      	movs	r0, #0
 8007088:	e004      	b.n	8007094 <UTILS_EnablePLLAndSwitchSystem+0x74>
    status = LL_SetFlashLatency(hclk_frequency);
 800708a:	4620      	mov	r0, r4
 800708c:	f7ff ff60 	bl	8006f50 <LL_SetFlashLatency>
  if(status == SUCCESS)
 8007090:	2800      	cmp	r0, #0
 8007092:	d0d2      	beq.n	800703a <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8007094:	6833      	ldr	r3, [r6, #0]
 8007096:	42a3      	cmp	r3, r4
 8007098:	d902      	bls.n	80070a0 <UTILS_EnablePLLAndSwitchSystem+0x80>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 800709a:	4620      	mov	r0, r4
 800709c:	f7ff ff58 	bl	8006f50 <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 80070a0:	b900      	cbnz	r0, 80070a4 <UTILS_EnablePLLAndSwitchSystem+0x84>
  SystemCoreClock = HCLKFrequency;
 80070a2:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 80070a4:	bd70      	pop	{r4, r5, r6, pc}
 80070a6:	bf00      	nop
 80070a8:	0800bb8c 	.word	0x0800bb8c
 80070ac:	20000054 	.word	0x20000054
 80070b0:	40023800 	.word	0x40023800

080070b4 <LL_PLL_ConfigSystemClock_HSE>:
{
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	460e      	mov	r6, r1
 80070b8:	4605      	mov	r5, r0
 80070ba:	4614      	mov	r4, r2
 80070bc:	4619      	mov	r1, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 80070be:	f7ff ff39 	bl	8006f34 <UTILS_PLL_IsBusy>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d136      	bne.n	8007134 <LL_PLL_ConfigSystemClock_HSE+0x80>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 80070c6:	6827      	ldr	r7, [r4, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80070c8:	f8d4 c004 	ldr.w	ip, [r4, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80070cc:	68a3      	ldr	r3, [r4, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80070ce:	4c1a      	ldr	r4, [pc, #104]	; (8007138 <LL_PLL_ConfigSystemClock_HSE+0x84>)
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 80070d0:	f007 003f 	and.w	r0, r7, #63	; 0x3f
 80070d4:	fbb5 f5f0 	udiv	r5, r5, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80070d8:	f3cc 0008 	ubfx	r0, ip, #0, #9
 80070dc:	4345      	muls	r5, r0
 80070de:	6822      	ldr	r2, [r4, #0]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80070e0:	0c18      	lsrs	r0, r3, #16
 80070e2:	3001      	adds	r0, #1
 80070e4:	0040      	lsls	r0, r0, #1
 80070e6:	fbb5 f0f0 	udiv	r0, r5, r0
    if(LL_RCC_HSE_IsReady() != 1U)
 80070ea:	0395      	lsls	r5, r2, #14
 80070ec:	d40f      	bmi.n	800710e <LL_PLL_ConfigSystemClock_HSE+0x5a>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80070ee:	6822      	ldr	r2, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 80070f0:	2e01      	cmp	r6, #1
 80070f2:	bf0c      	ite	eq
 80070f4:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80070f8:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 80070fc:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80070fe:	6825      	ldr	r5, [r4, #0]
 8007100:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 8007104:	6025      	str	r5, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8007106:	4c0c      	ldr	r4, [pc, #48]	; (8007138 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 8007108:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 800710a:	0392      	lsls	r2, r2, #14
 800710c:	d5fc      	bpl.n	8007108 <LL_PLL_ConfigSystemClock_HSE+0x54>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800710e:	4c0a      	ldr	r4, [pc, #40]	; (8007138 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 8007110:	4a0a      	ldr	r2, [pc, #40]	; (800713c <LL_PLL_ConfigSystemClock_HSE+0x88>)
 8007112:	6865      	ldr	r5, [r4, #4]
 8007114:	402a      	ands	r2, r5
 8007116:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 800711a:	433a      	orrs	r2, r7
 800711c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007120:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8007122:	6862      	ldr	r2, [r4, #4]
 8007124:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007128:	431a      	orrs	r2, r3
 800712a:	6062      	str	r2, [r4, #4]
}
 800712c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8007130:	f7ff bf76 	b.w	8007020 <UTILS_EnablePLLAndSwitchSystem>
}
 8007134:	2001      	movs	r0, #1
 8007136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007138:	40023800 	.word	0x40023800
 800713c:	ffbf8000 	.word	0xffbf8000

08007140 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007140:	4b0e      	ldr	r3, [pc, #56]	; (800717c <z_sys_init_run_level+0x3c>)
{
 8007142:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007144:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8007148:	3001      	adds	r0, #1
 800714a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800714e:	42a6      	cmp	r6, r4
 8007150:	d800      	bhi.n	8007154 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8007152:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8007154:	e9d4 3500 	ldrd	r3, r5, [r4]
 8007158:	4628      	mov	r0, r5
 800715a:	4798      	blx	r3
		if (dev != NULL) {
 800715c:	b165      	cbz	r5, 8007178 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 800715e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 8007160:	b130      	cbz	r0, 8007170 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8007162:	2800      	cmp	r0, #0
 8007164:	bfb8      	it	lt
 8007166:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8007168:	28ff      	cmp	r0, #255	; 0xff
 800716a:	bfa8      	it	ge
 800716c:	20ff      	movge	r0, #255	; 0xff
 800716e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8007170:	785a      	ldrb	r2, [r3, #1]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007178:	3408      	adds	r4, #8
 800717a:	e7e8      	b.n	800714e <z_sys_init_run_level+0xe>
 800717c:	0800b318 	.word	0x0800b318

08007180 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8007180:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8007182:	4605      	mov	r5, r0
 8007184:	b910      	cbnz	r0, 800718c <z_impl_device_get_binding+0xc>
		return NULL;
 8007186:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 8007188:	4620      	mov	r0, r4
 800718a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 800718c:	7803      	ldrb	r3, [r0, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0f9      	beq.n	8007186 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 8007192:	4c0e      	ldr	r4, [pc, #56]	; (80071cc <z_impl_device_get_binding+0x4c>)
 8007194:	4e0e      	ldr	r6, [pc, #56]	; (80071d0 <z_impl_device_get_binding+0x50>)
 8007196:	42b4      	cmp	r4, r6
 8007198:	d108      	bne.n	80071ac <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 800719a:	4c0c      	ldr	r4, [pc, #48]	; (80071cc <z_impl_device_get_binding+0x4c>)
 800719c:	42b4      	cmp	r4, r6
 800719e:	d0f2      	beq.n	8007186 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 80071a0:	4620      	mov	r0, r4
 80071a2:	f002 fc4a 	bl	8009a3a <z_device_ready>
 80071a6:	b950      	cbnz	r0, 80071be <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 80071a8:	3418      	adds	r4, #24
 80071aa:	e7f7      	b.n	800719c <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
 80071ac:	4620      	mov	r0, r4
 80071ae:	f002 fc44 	bl	8009a3a <z_device_ready>
 80071b2:	b110      	cbz	r0, 80071ba <z_impl_device_get_binding+0x3a>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	42ab      	cmp	r3, r5
 80071b8:	d0e6      	beq.n	8007188 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 80071ba:	3418      	adds	r4, #24
 80071bc:	e7eb      	b.n	8007196 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 80071be:	6821      	ldr	r1, [r4, #0]
 80071c0:	4628      	mov	r0, r5
 80071c2:	f7f9 fe4b 	bl	8000e5c <strcmp>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d1ee      	bne.n	80071a8 <z_impl_device_get_binding+0x28>
 80071ca:	e7dd      	b.n	8007188 <z_impl_device_get_binding+0x8>
 80071cc:	20000064 	.word	0x20000064
 80071d0:	200001cc 	.word	0x200001cc

080071d4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 80071d4:	4b01      	ldr	r3, [pc, #4]	; (80071dc <z_impl_z_errno+0x8>)
 80071d6:	6898      	ldr	r0, [r3, #8]
}
 80071d8:	3060      	adds	r0, #96	; 0x60
 80071da:	4770      	bx	lr
 80071dc:	20001808 	.word	0x20001808

080071e0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80071e0:	b510      	push	{r4, lr}
 80071e2:	4604      	mov	r4, r0
	z_impl_log_panic();
 80071e4:	f7fe f8de 	bl	80053a4 <z_impl_log_panic>
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <k_sys_fatal_error_handler+0x24>)
 80071ea:	4907      	ldr	r1, [pc, #28]	; (8007208 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 80071ec:	4807      	ldr	r0, [pc, #28]	; (800720c <k_sys_fatal_error_handler+0x2c>)
 80071ee:	1ac9      	subs	r1, r1, r3
 80071f0:	08c9      	lsrs	r1, r1, #3
 80071f2:	0189      	lsls	r1, r1, #6
 80071f4:	f041 0101 	orr.w	r1, r1, #1
 80071f8:	f001 fd15 	bl	8008c26 <log_0>
	arch_system_halt(reason);
 80071fc:	4620      	mov	r0, r4
 80071fe:	f002 fc26 	bl	8009a4e <arch_system_halt>
 8007202:	bf00      	nop
 8007204:	0800a3f0 	.word	0x0800a3f0
 8007208:	0800a400 	.word	0x0800a400
 800720c:	0800bb9c 	.word	0x0800bb9c

08007210 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8007210:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007214:	4606      	mov	r6, r0
 8007216:	460f      	mov	r7, r1
	__asm__ volatile(
 8007218:	f04f 0310 	mov.w	r3, #16
 800721c:	f3ef 8811 	mrs	r8, BASEPRI
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 8007228:	f000 fd22 	bl	8007c70 <z_impl_k_current_get>
 800722c:	4c1f      	ldr	r4, [pc, #124]	; (80072ac <z_fatal_error+0x9c>)
 800722e:	4b20      	ldr	r3, [pc, #128]	; (80072b0 <z_fatal_error+0xa0>)
 8007230:	1ae4      	subs	r4, r4, r3
 8007232:	2e04      	cmp	r6, #4
 8007234:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 8007238:	bf96      	itet	ls
 800723a:	4a1e      	ldrls	r2, [pc, #120]	; (80072b4 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800723c:	4a1e      	ldrhi	r2, [pc, #120]	; (80072b8 <z_fatal_error+0xa8>)
 800723e:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
 8007242:	01a4      	lsls	r4, r4, #6
 8007244:	f044 0301 	orr.w	r3, r4, #1
 8007248:	4605      	mov	r5, r0
 800724a:	f8ad 3000 	strh.w	r3, [sp]
 800724e:	481b      	ldr	r0, [pc, #108]	; (80072bc <z_fatal_error+0xac>)
 8007250:	2300      	movs	r3, #0
 8007252:	4631      	mov	r1, r6
 8007254:	f001 fd26 	bl	8008ca4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8007258:	b147      	cbz	r7, 800726c <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007260:	b123      	cbz	r3, 800726c <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
 8007262:	4817      	ldr	r0, [pc, #92]	; (80072c0 <z_fatal_error+0xb0>)
 8007264:	f044 0101 	orr.w	r1, r4, #1
 8007268:	f001 fcdd 	bl	8008c26 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800726c:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8007270:	b12d      	cbz	r5, 800727e <z_fatal_error+0x6e>
 8007272:	4628      	mov	r0, r5
 8007274:	f002 fc42 	bl	8009afc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 8007278:	b108      	cbz	r0, 800727e <z_fatal_error+0x6e>
 800727a:	7803      	ldrb	r3, [r0, #0]
 800727c:	b903      	cbnz	r3, 8007280 <z_fatal_error+0x70>
		thread_name = "unknown";
 800727e:	4811      	ldr	r0, [pc, #68]	; (80072c4 <z_fatal_error+0xb4>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
 8007280:	f7fd ff14 	bl	80050ac <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
 8007284:	4623      	mov	r3, r4
 8007286:	4602      	mov	r2, r0
 8007288:	4629      	mov	r1, r5
 800728a:	480f      	ldr	r0, [pc, #60]	; (80072c8 <z_fatal_error+0xb8>)
 800728c:	f001 fcf1 	bl	8008c72 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8007290:	4639      	mov	r1, r7
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff ffa4 	bl	80071e0 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8007298:	f388 8811 	msr	BASEPRI, r8
 800729c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80072a0:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 80072a2:	b002      	add	sp, #8
 80072a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072a8:	f7ff baf8 	b.w	800689c <z_impl_k_thread_abort>
 80072ac:	0800a400 	.word	0x0800a400
 80072b0:	0800a3f0 	.word	0x0800a3f0
 80072b4:	0800b330 	.word	0x0800b330
 80072b8:	0800bbab 	.word	0x0800bbab
 80072bc:	0800bbc1 	.word	0x0800bbc1
 80072c0:	0800bbe9 	.word	0x0800bbe9
 80072c4:	0800bbb9 	.word	0x0800bbb9
 80072c8:	0800bc0a 	.word	0x0800bc0a

080072cc <z_bss_zero>:
 *
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
 80072cc:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 80072ce:	4807      	ldr	r0, [pc, #28]	; (80072ec <z_bss_zero+0x20>)
__ssp_bos_icheck3(memset, void *, int)
 80072d0:	4a07      	ldr	r2, [pc, #28]	; (80072f0 <z_bss_zero+0x24>)
 80072d2:	2100      	movs	r1, #0
 80072d4:	1a12      	subs	r2, r2, r0
 80072d6:	f002 fec0 	bl	800a05a <memset>
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_ccm), okay)
	(void)memset(&__ccm_bss_start, 0,
 80072da:	4806      	ldr	r0, [pc, #24]	; (80072f4 <z_bss_zero+0x28>)
 80072dc:	4a06      	ldr	r2, [pc, #24]	; (80072f8 <z_bss_zero+0x2c>)
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((uintptr_t) &__gcov_bss_end - (uintptr_t) &__gcov_bss_start));
#endif
}
 80072de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80072e2:	1a12      	subs	r2, r2, r0
 80072e4:	2100      	movs	r1, #0
 80072e6:	f002 beb8 	b.w	800a05a <memset>
 80072ea:	bf00      	nop
 80072ec:	20000208 	.word	0x20000208
 80072f0:	20001cfc 	.word	0x20001cfc
 80072f4:	10000000 	.word	0x10000000
 80072f8:	10000000 	.word	0x10000000

080072fc <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 80072fc:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 80072fe:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <bg_thread_main+0x34>)
 8007300:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8007302:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8007304:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8007306:	f7ff ff1b 	bl	8007140 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 800730a:	f000 ff2d 	bl	8008168 <boot_banner>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
 800730e:	f7fe fb8f 	bl	8005a30 <__do_global_ctors_aux>
	__do_init_array_aux();
 8007312:	f7fe fb7f 	bl	8005a14 <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8007316:	2003      	movs	r0, #3
 8007318:	f7ff ff12 	bl	8007140 <z_sys_init_run_level>

	z_init_static_threads();
 800731c:	f000 f944 	bl	80075a8 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
 8007320:	f7fd fc80 	bl	8004c24 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8007324:	4a03      	ldr	r2, [pc, #12]	; (8007334 <bg_thread_main+0x38>)
 8007326:	7b13      	ldrb	r3, [r2, #12]
 8007328:	f023 0301 	bic.w	r3, r3, #1
 800732c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800732e:	bd08      	pop	{r3, pc}
 8007330:	20001cf8 	.word	0x20001cf8
 8007334:	20000480 	.word	0x20000480

08007338 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8007338:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800733c:	b0b7      	sub	sp, #220	; 0xdc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 800733e:	f7fd fded 	bl	8004f1c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8007342:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007444 <z_cstart+0x10c>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8007346:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800734a:	4d36      	ldr	r5, [pc, #216]	; (8007424 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
 800734c:	4e36      	ldr	r6, [pc, #216]	; (8007428 <z_cstart+0xf0>)
 800734e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8007350:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8007448 <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
 8007354:	4f35      	ldr	r7, [pc, #212]	; (800742c <z_cstart+0xf4>)
 8007356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800735a:	2400      	movs	r4, #0
 800735c:	616b      	str	r3, [r5, #20]
 800735e:	23f0      	movs	r3, #240	; 0xf0
 8007360:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8007364:	77ec      	strb	r4, [r5, #31]
 8007366:	762c      	strb	r4, [r5, #24]
 8007368:	766c      	strb	r4, [r5, #25]
 800736a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800736c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800736e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007372:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8007374:	f7ff fa70 	bl	8006858 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8007378:	f7fe ff6a 	bl	8006250 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800737c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007380:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8007382:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8007384:	f7ff fb56 	bl	8006a34 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8007388:	4d29      	ldr	r5, [pc, #164]	; (8007430 <z_cstart+0xf8>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800738a:	f7ff fa99 	bl	80068c0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 800738e:	f240 1301 	movw	r3, #257	; 0x101
 8007392:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8007396:	ab06      	add	r3, sp, #24
 8007398:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
 800739a:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800739e:	f002 fb4b 	bl	8009a38 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80073a2:	4620      	mov	r0, r4
 80073a4:	f7ff fecc 	bl	8007140 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80073a8:	2001      	movs	r0, #1
 80073aa:	f7ff fec9 	bl	8007140 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80073ae:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
 80073b2:	f000 fbb1 	bl	8007b18 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80073b6:	4b1f      	ldr	r3, [pc, #124]	; (8007434 <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
 80073b8:	622e      	str	r6, [r5, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80073ba:	491f      	ldr	r1, [pc, #124]	; (8007438 <z_cstart+0x100>)
 80073bc:	9305      	str	r3, [sp, #20]
 80073be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073c2:	4653      	mov	r3, sl
 80073c4:	e9cd 4b03 	strd	r4, fp, [sp, #12]
 80073c8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80073cc:	9400      	str	r4, [sp, #0]
 80073ce:	4630      	mov	r0, r6
 80073d0:	f000 f88c 	bl	80074ec <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80073d4:	7b73      	ldrb	r3, [r6, #13]
 80073d6:	4680      	mov	r8, r0
 80073d8:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 80073dc:	4630      	mov	r0, r6
 80073de:	7373      	strb	r3, [r6, #13]
 80073e0:	f002 fc9a 	bl	8009d18 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 80073e4:	230f      	movs	r3, #15
 80073e6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80073ea:	4914      	ldr	r1, [pc, #80]	; (800743c <z_cstart+0x104>)
 80073ec:	4b14      	ldr	r3, [pc, #80]	; (8007440 <z_cstart+0x108>)
 80073ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80073f2:	e9cd b404 	strd	fp, r4, [sp, #16]
 80073f6:	e9cd 5400 	strd	r5, r4, [sp]
 80073fa:	4638      	mov	r0, r7
 80073fc:	f000 f876 	bl	80074ec <z_setup_new_thread>
 8007400:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8007402:	60ef      	str	r7, [r5, #12]
 8007404:	f023 0304 	bic.w	r3, r3, #4
 8007408:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 800740a:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
 800740e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
 8007412:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
 8007414:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8007418:	4652      	mov	r2, sl
 800741a:	4641      	mov	r1, r8
 800741c:	4630      	mov	r0, r6
 800741e:	f7fe fef5 	bl	800620c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8007422:	bf00      	nop
 8007424:	e000ed00 	.word	0xe000ed00
 8007428:	20000480 	.word	0x20000480
 800742c:	200003c0 	.word	0x200003c0
 8007430:	20001808 	.word	0x20001808
 8007434:	0800bc6c 	.word	0x0800bc6c
 8007438:	20002500 	.word	0x20002500
 800743c:	20002980 	.word	0x20002980
 8007440:	08009b01 	.word	0x08009b01
 8007444:	20003380 	.word	0x20003380
 8007448:	080072fd 	.word	0x080072fd

0800744c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 800744c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800744e:	4b0e      	ldr	r3, [pc, #56]	; (8007488 <init_mem_slab_module+0x3c>)
 8007450:	4c0e      	ldr	r4, [pc, #56]	; (800748c <init_mem_slab_module+0x40>)
 8007452:	42a3      	cmp	r3, r4
 8007454:	d301      	bcc.n	800745a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
 8007456:	2000      	movs	r0, #0
	return rc;
}
 8007458:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800745a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800745e:	ea41 0200 	orr.w	r2, r1, r0
 8007462:	f012 0203 	ands.w	r2, r2, #3
 8007466:	d10b      	bne.n	8007480 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 8007468:	68dd      	ldr	r5, [r3, #12]
	slab->free_list = NULL;
 800746a:	619a      	str	r2, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 800746c:	42aa      	cmp	r2, r5
 800746e:	d101      	bne.n	8007474 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8007470:	3320      	adds	r3, #32
 8007472:	e7ee      	b.n	8007452 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 8007474:	699e      	ldr	r6, [r3, #24]
 8007476:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 8007478:	3201      	adds	r2, #1
		slab->free_list = p;
 800747a:	6199      	str	r1, [r3, #24]
		p += slab->block_size;
 800747c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 800747e:	e7f5      	b.n	800746c <init_mem_slab_module+0x20>
	return rc;
 8007480:	f06f 0015 	mvn.w	r0, #21
 8007484:	e7e8      	b.n	8007458 <init_mem_slab_module+0xc>
 8007486:	bf00      	nop
 8007488:	200001cc 	.word	0x200001cc
 800748c:	200001cc 	.word	0x200001cc

08007490 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 8007490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007492:	460c      	mov	r4, r1
	__asm__ volatile(
 8007494:	f04f 0510 	mov.w	r5, #16
 8007498:	f3ef 8111 	mrs	r1, BASEPRI
 800749c:	f385 8811 	msr	BASEPRI, r5
 80074a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 80074a4:	6985      	ldr	r5, [r0, #24]
 80074a6:	b15d      	cbz	r5, 80074c0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
 80074a8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 80074aa:	682b      	ldr	r3, [r5, #0]
 80074ac:	6183      	str	r3, [r0, #24]
		slab->num_used++;
 80074ae:	69c3      	ldr	r3, [r0, #28]
 80074b0:	3301      	adds	r3, #1
 80074b2:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 80074b4:	2000      	movs	r0, #0
	__asm__ volatile(
 80074b6:	f381 8811 	msr	BASEPRI, r1
 80074ba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
 80074be:	e011      	b.n	80074e4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 80074c0:	ea52 0c03 	orrs.w	ip, r2, r3
 80074c4:	d103      	bne.n	80074ce <k_mem_slab_alloc+0x3e>
		*mem = NULL;
 80074c6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
 80074c8:	f06f 000b 	mvn.w	r0, #11
 80074cc:	e7f3      	b.n	80074b6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 80074ce:	e9cd 2300 	strd	r2, r3, [sp]
 80074d2:	4602      	mov	r2, r0
 80074d4:	3008      	adds	r0, #8
 80074d6:	f000 f9ef 	bl	80078b8 <z_pend_curr>
		if (result == 0) {
 80074da:	b918      	cbnz	r0, 80074e4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
 80074dc:	4b02      	ldr	r3, [pc, #8]	; (80074e8 <k_mem_slab_alloc+0x58>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	6023      	str	r3, [r4, #0]
}
 80074e4:	b003      	add	sp, #12
 80074e6:	bd30      	pop	{r4, r5, pc}
 80074e8:	20001808 	.word	0x20001808

080074ec <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 80074ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 80074f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80074f2:	7306      	strb	r6, [r0, #12]
{
 80074f4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80074f6:	3207      	adds	r2, #7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 80074f8:	f100 0558 	add.w	r5, r0, #88	; 0x58
 80074fc:	f022 0207 	bic.w	r2, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
 8007500:	2604      	movs	r6, #4

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8007502:	3720      	adds	r7, #32
 8007504:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	new_thread->stack_info.size = stack_buf_size;
 8007508:	e9c0 7219 	strd	r7, r2, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 800750c:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
 800750e:	7346      	strb	r6, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8007510:	f102 0820 	add.w	r8, r2, #32

	thread_base->prio = priority;
 8007514:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8007518:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 800751a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
 800751e:	7386      	strb	r6, [r0, #14]

	thread_base->sched_locked = 0U;
 8007520:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8007522:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007524:	9202      	str	r2, [sp, #8]
 8007526:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007528:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 800752a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800752c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800752e:	9200      	str	r2, [sp, #0]
 8007530:	4642      	mov	r2, r8
{
 8007532:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007534:	f7fe fde4 	bl	8006100 <arch_new_thread>
	if (!_current) {
 8007538:	4b04      	ldr	r3, [pc, #16]	; (800754c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 800753a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	b103      	cbz	r3, 8007542 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8007540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 8007542:	6723      	str	r3, [r4, #112]	; 0x70
}
 8007544:	4640      	mov	r0, r8
 8007546:	b004      	add	sp, #16
 8007548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800754c:	20001808 	.word	0x20001808

08007550 <z_impl_k_thread_create>:
{
 8007550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007552:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8007554:	2700      	movs	r7, #0
 8007556:	9705      	str	r7, [sp, #20]
 8007558:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800755a:	9704      	str	r7, [sp, #16]
 800755c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800755e:	9703      	str	r7, [sp, #12]
 8007560:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007562:	9702      	str	r7, [sp, #8]
{
 8007564:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8007568:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800756a:	9701      	str	r7, [sp, #4]
 800756c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800756e:	9700      	str	r7, [sp, #0]
{
 8007570:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8007572:	f7ff ffbb 	bl	80074ec <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8007576:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800757a:	bf08      	it	eq
 800757c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8007580:	d005      	beq.n	800758e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007582:	ea55 0306 	orrs.w	r3, r5, r6
 8007586:	d105      	bne.n	8007594 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 8007588:	4620      	mov	r0, r4
 800758a:	f000 faa7 	bl	8007adc <z_sched_start>
}
 800758e:	4620      	mov	r0, r4
 8007590:	b007      	add	sp, #28
 8007592:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8007594:	4903      	ldr	r1, [pc, #12]	; (80075a4 <z_impl_k_thread_create+0x54>)
 8007596:	4632      	mov	r2, r6
 8007598:	462b      	mov	r3, r5
 800759a:	f104 0018 	add.w	r0, r4, #24
 800759e:	f000 fc31 	bl	8007e04 <z_add_timeout>
 80075a2:	e7f4      	b.n	800758e <z_impl_k_thread_create+0x3e>
 80075a4:	08009d39 	.word	0x08009d39

080075a8 <z_init_static_threads>:
{
 80075a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075aa:	4c22      	ldr	r4, [pc, #136]	; (8007634 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 80075ac:	4d22      	ldr	r5, [pc, #136]	; (8007638 <z_init_static_threads+0x90>)
{
 80075ae:	b087      	sub	sp, #28
 80075b0:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 80075b2:	42ae      	cmp	r6, r5
 80075b4:	f104 0430 	add.w	r4, r4, #48	; 0x30
 80075b8:	d30b      	bcc.n	80075d2 <z_init_static_threads+0x2a>
	k_sched_lock();
 80075ba:	f000 f90b 	bl	80077d4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80075be:	4c1d      	ldr	r4, [pc, #116]	; (8007634 <z_init_static_threads+0x8c>)
 80075c0:	4f1e      	ldr	r7, [pc, #120]	; (800763c <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
 80075c2:	260a      	movs	r6, #10
 80075c4:	42ac      	cmp	r4, r5
 80075c6:	d320      	bcc.n	800760a <z_init_static_threads+0x62>
}
 80075c8:	b007      	add	sp, #28
 80075ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80075ce:	f000 b9b9 	b.w	8007944 <k_sched_unlock>
		z_setup_new_thread(
 80075d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80075d6:	9305      	str	r3, [sp, #20]
 80075d8:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80075dc:	9304      	str	r3, [sp, #16]
 80075de:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80075e2:	9303      	str	r3, [sp, #12]
 80075e4:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80075e8:	9302      	str	r3, [sp, #8]
 80075ea:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80075fa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80075fe:	f7ff ff75 	bl	80074ec <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8007602:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8007606:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8007608:	e7d2      	b.n	80075b0 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800760a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800760c:	1c53      	adds	r3, r2, #1
 800760e:	d009      	beq.n	8007624 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 8007610:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007614:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007618:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 800761c:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800761e:	d103      	bne.n	8007628 <z_init_static_threads+0x80>
	z_sched_start(thread);
 8007620:	f000 fa5c 	bl	8007adc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8007624:	3430      	adds	r4, #48	; 0x30
 8007626:	e7cd      	b.n	80075c4 <z_init_static_threads+0x1c>
 8007628:	4639      	mov	r1, r7
 800762a:	3018      	adds	r0, #24
 800762c:	f000 fbea 	bl	8007e04 <z_add_timeout>
 8007630:	e7f8      	b.n	8007624 <z_init_static_threads+0x7c>
 8007632:	bf00      	nop
 8007634:	200001cc 	.word	0x200001cc
 8007638:	200001cc 	.word	0x200001cc
 800763c:	08009d39 	.word	0x08009d39

08007640 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
 8007640:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
 8007642:	f04f 0110 	mov.w	r1, #16
 8007646:	f3ef 8511 	mrs	r5, BASEPRI
 800764a:	f381 8811 	msr	BASEPRI, r1
 800764e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 8007652:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 8007654:	b19c      	cbz	r4, 800767e <z_impl_k_queue_get+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8007656:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8007658:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800765a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 800765e:	4294      	cmp	r4, r2
	list->head = node;
 8007660:	6003      	str	r3, [r0, #0]
	list->tail = node;
 8007662:	bf08      	it	eq
 8007664:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 8007666:	2101      	movs	r1, #1
 8007668:	4620      	mov	r0, r4
 800766a:	f002 fab6 	bl	8009bda <z_queue_node_peek>
 800766e:	4604      	mov	r4, r0
	__asm__ volatile(
 8007670:	f385 8811 	msr	BASEPRI, r5
 8007674:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
 8007678:	4620      	mov	r0, r4
 800767a:	b003      	add	sp, #12
 800767c:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800767e:	ea52 0103 	orrs.w	r1, r2, r3
 8007682:	d0f5      	beq.n	8007670 <z_impl_k_queue_get+0x30>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
 8007684:	e9cd 2300 	strd	r2, r3, [sp]
 8007688:	4629      	mov	r1, r5
 800768a:	f100 020c 	add.w	r2, r0, #12
 800768e:	3008      	adds	r0, #8
 8007690:	f000 f912 	bl	80078b8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
 8007694:	2800      	cmp	r0, #0
 8007696:	d1ef      	bne.n	8007678 <z_impl_k_queue_get+0x38>
 8007698:	4b01      	ldr	r3, [pc, #4]	; (80076a0 <z_impl_k_queue_get+0x60>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	695c      	ldr	r4, [r3, #20]
 800769e:	e7eb      	b.n	8007678 <z_impl_k_queue_get+0x38>
 80076a0:	20001808 	.word	0x20001808

080076a4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4604      	mov	r4, r0
	__asm__ volatile(
 80076a8:	f04f 0310 	mov.w	r3, #16
 80076ac:	f3ef 8511 	mrs	r5, BASEPRI
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 80076b8:	f002 fb75 	bl	8009da6 <z_unpend_first_thread>

	if (thread != NULL) {
 80076bc:	b148      	cbz	r0, 80076d2 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80076be:	2200      	movs	r2, #0
 80076c0:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 80076c2:	f002 fb29 	bl	8009d18 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 80076c6:	4629      	mov	r1, r5
 80076c8:	4805      	ldr	r0, [pc, #20]	; (80076e0 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 80076ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 80076ce:	f000 b86f 	b.w	80077b0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80076d2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	bf18      	it	ne
 80076da:	3301      	addne	r3, #1
 80076dc:	60a3      	str	r3, [r4, #8]
}
 80076de:	e7f2      	b.n	80076c6 <z_impl_k_sem_give+0x22>
 80076e0:	20001cf9 	.word	0x20001cf9

080076e4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 80076e4:	b513      	push	{r0, r1, r4, lr}
 80076e6:	f04f 0410 	mov.w	r4, #16
 80076ea:	f3ef 8111 	mrs	r1, BASEPRI
 80076ee:	f384 8811 	msr	BASEPRI, r4
 80076f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 80076f6:	6884      	ldr	r4, [r0, #8]
 80076f8:	b144      	cbz	r4, 800770c <z_impl_k_sem_take+0x28>
		sem->count--;
 80076fa:	3c01      	subs	r4, #1
 80076fc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 80076fe:	f381 8811 	msr	BASEPRI, r1
 8007702:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8007706:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8007708:	b002      	add	sp, #8
 800770a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800770c:	ea52 0403 	orrs.w	r4, r2, r3
 8007710:	d106      	bne.n	8007720 <z_impl_k_sem_take+0x3c>
 8007712:	f381 8811 	msr	BASEPRI, r1
 8007716:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800771a:	f06f 000f 	mvn.w	r0, #15
 800771e:	e7f3      	b.n	8007708 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8007720:	e9cd 2300 	strd	r2, r3, [sp]
 8007724:	4602      	mov	r2, r0
 8007726:	4802      	ldr	r0, [pc, #8]	; (8007730 <z_impl_k_sem_take+0x4c>)
 8007728:	f000 f8c6 	bl	80078b8 <z_pend_curr>
	return ret;
 800772c:	e7ec      	b.n	8007708 <z_impl_k_sem_take+0x24>
 800772e:	bf00      	nop
 8007730:	20001cf9 	.word	0x20001cf9

08007734 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8007734:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8007736:	4c08      	ldr	r4, [pc, #32]	; (8007758 <z_reset_time_slice+0x24>)
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	b15b      	cbz	r3, 8007754 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800773c:	f7fe fc28 	bl	8005f90 <sys_clock_elapsed>
 8007740:	6822      	ldr	r2, [r4, #0]
 8007742:	4906      	ldr	r1, [pc, #24]	; (800775c <z_reset_time_slice+0x28>)
 8007744:	4410      	add	r0, r2
 8007746:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
 800774c:	2100      	movs	r1, #0
 800774e:	4610      	mov	r0, r2
 8007750:	f002 bb67 	b.w	8009e22 <z_set_timeout_expiry>
}
 8007754:	bd10      	pop	{r4, pc}
 8007756:	bf00      	nop
 8007758:	20001840 	.word	0x20001840
 800775c:	20001808 	.word	0x20001808

08007760 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8007760:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007762:	f04f 0310 	mov.w	r3, #16
 8007766:	f3ef 8411 	mrs	r4, BASEPRI
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8007772:	4b0c      	ldr	r3, [pc, #48]	; (80077a4 <k_sched_time_slice_set+0x44>)
 8007774:	2200      	movs	r2, #0
 8007776:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8007778:	4290      	cmp	r0, r2
			return ((uint32_t)t) * (to_hz / from_hz);
 800777a:	f04f 030a 	mov.w	r3, #10
 800777e:	4a0a      	ldr	r2, [pc, #40]	; (80077a8 <k_sched_time_slice_set+0x48>)
 8007780:	fb00 f303 	mul.w	r3, r0, r3
 8007784:	dc09      	bgt.n	800779a <k_sched_time_slice_set+0x3a>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
 8007786:	6013      	str	r3, [r2, #0]
		}
		slice_max_prio = prio;
 8007788:	4b08      	ldr	r3, [pc, #32]	; (80077ac <k_sched_time_slice_set+0x4c>)
 800778a:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 800778c:	f7ff ffd2 	bl	8007734 <z_reset_time_slice>
	__asm__ volatile(
 8007790:	f384 8811 	msr	BASEPRI, r4
 8007794:	f3bf 8f6f 	isb	sy
	}
}
 8007798:	bd10      	pop	{r4, pc}
			slice_time = MAX(2, slice_time);
 800779a:	2b02      	cmp	r3, #2
 800779c:	bfb8      	it	lt
 800779e:	2302      	movlt	r3, #2
 80077a0:	e7f1      	b.n	8007786 <k_sched_time_slice_set+0x26>
 80077a2:	bf00      	nop
 80077a4:	20001808 	.word	0x20001808
 80077a8:	20001840 	.word	0x20001840
 80077ac:	2000183c 	.word	0x2000183c

080077b0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80077b0:	b949      	cbnz	r1, 80077c6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077b2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 80077b6:	b930      	cbnz	r0, 80077c6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 80077b8:	4b05      	ldr	r3, [pc, #20]	; (80077d0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 80077ba:	6a1a      	ldr	r2, [r3, #32]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d001      	beq.n	80077c6 <z_reschedule+0x16>
	ret = arch_swap(key);
 80077c2:	f7fe bc03 	b.w	8005fcc <arch_swap>
 80077c6:	f381 8811 	msr	BASEPRI, r1
 80077ca:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 80077ce:	4770      	bx	lr
 80077d0:	20001808 	.word	0x20001808

080077d4 <k_sched_lock>:
	__asm__ volatile(
 80077d4:	f04f 0310 	mov.w	r3, #16
 80077d8:	f3ef 8111 	mrs	r1, BASEPRI
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80077e4:	4b04      	ldr	r3, [pc, #16]	; (80077f8 <k_sched_lock+0x24>)
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	7bd3      	ldrb	r3, [r2, #15]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80077ee:	f381 8811 	msr	BASEPRI, r1
 80077f2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 80077f6:	4770      	bx	lr
 80077f8:	20001808 	.word	0x20001808

080077fc <update_cache>:
{
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8007800:	480c      	ldr	r0, [pc, #48]	; (8007834 <update_cache+0x38>)
 8007802:	4d0d      	ldr	r5, [pc, #52]	; (8007838 <update_cache+0x3c>)
 8007804:	f002 fa58 	bl	8009cb8 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8007808:	4604      	mov	r4, r0
 800780a:	b900      	cbnz	r0, 800780e <update_cache+0x12>
 800780c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 800780e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8007810:	b94a      	cbnz	r2, 8007826 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 8007812:	7b5a      	ldrb	r2, [r3, #13]
 8007814:	06d2      	lsls	r2, r2, #27
 8007816:	d106      	bne.n	8007826 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8007818:	69a2      	ldr	r2, [r4, #24]
 800781a:	b922      	cbnz	r2, 8007826 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 800781c:	89da      	ldrh	r2, [r3, #14]
 800781e:	2a7f      	cmp	r2, #127	; 0x7f
 8007820:	d901      	bls.n	8007826 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 8007822:	622b      	str	r3, [r5, #32]
}
 8007824:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8007826:	429c      	cmp	r4, r3
 8007828:	d001      	beq.n	800782e <update_cache+0x32>
			z_reset_time_slice();
 800782a:	f7ff ff83 	bl	8007734 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800782e:	622c      	str	r4, [r5, #32]
}
 8007830:	e7f8      	b.n	8007824 <update_cache+0x28>
 8007832:	bf00      	nop
 8007834:	2000182c 	.word	0x2000182c
 8007838:	20001808 	.word	0x20001808

0800783c <unready_thread>:
{
 800783c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 800783e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8007842:	7b43      	ldrb	r3, [r0, #13]
 8007844:	2a00      	cmp	r2, #0
{
 8007846:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8007848:	da04      	bge.n	8007854 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800784a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800784e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8007850:	f002 f9e6 	bl	8009c20 <sys_dlist_remove>
	update_cache(thread == _current);
 8007854:	4b04      	ldr	r3, [pc, #16]	; (8007868 <unready_thread+0x2c>)
 8007856:	6898      	ldr	r0, [r3, #8]
 8007858:	1a43      	subs	r3, r0, r1
 800785a:	4258      	negs	r0, r3
 800785c:	4158      	adcs	r0, r3
}
 800785e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8007862:	f7ff bfcb 	b.w	80077fc <update_cache>
 8007866:	bf00      	nop
 8007868:	20001808 	.word	0x20001808

0800786c <pend>:
{
 800786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007870:	4606      	mov	r6, r0
 8007872:	4615      	mov	r5, r2
 8007874:	461c      	mov	r4, r3
	__asm__ volatile(
 8007876:	f04f 0310 	mov.w	r3, #16
 800787a:	f3ef 8711 	mrs	r7, BASEPRI
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 8007886:	f002 fa1d 	bl	8009cc4 <add_to_waitq_locked>
	__asm__ volatile(
 800788a:	f387 8811 	msr	BASEPRI, r7
 800788e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8007892:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007896:	bf08      	it	eq
 8007898:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 800789c:	d008      	beq.n	80078b0 <pend+0x44>
 800789e:	462a      	mov	r2, r5
 80078a0:	4623      	mov	r3, r4
 80078a2:	f106 0018 	add.w	r0, r6, #24
 80078a6:	4903      	ldr	r1, [pc, #12]	; (80078b4 <pend+0x48>)
}
 80078a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ac:	f000 baaa 	b.w	8007e04 <z_add_timeout>
 80078b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b4:	08009d39 	.word	0x08009d39

080078b8 <z_pend_curr>:
{
 80078b8:	b510      	push	{r4, lr}
	pending_current = _current;
 80078ba:	4b07      	ldr	r3, [pc, #28]	; (80078d8 <z_pend_curr+0x20>)
 80078bc:	6898      	ldr	r0, [r3, #8]
 80078be:	4b07      	ldr	r3, [pc, #28]	; (80078dc <z_pend_curr+0x24>)
{
 80078c0:	460c      	mov	r4, r1
	pending_current = _current;
 80078c2:	6018      	str	r0, [r3, #0]
{
 80078c4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 80078c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078ca:	f7ff ffcf 	bl	800786c <pend>
 80078ce:	4620      	mov	r0, r4
}
 80078d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d4:	f7fe bb7a 	b.w	8005fcc <arch_swap>
 80078d8:	20001808 	.word	0x20001808
 80078dc:	20001838 	.word	0x20001838

080078e0 <z_impl_k_thread_suspend>:
{
 80078e0:	b570      	push	{r4, r5, r6, lr}
 80078e2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80078e4:	3018      	adds	r0, #24
 80078e6:	f002 fa86 	bl	8009df6 <z_abort_timeout>
	__asm__ volatile(
 80078ea:	f04f 0310 	mov.w	r3, #16
 80078ee:	f3ef 8611 	mrs	r6, BASEPRI
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80078fa:	f994 200d 	ldrsb.w	r2, [r4, #13]
 80078fe:	7b63      	ldrb	r3, [r4, #13]
 8007900:	2a00      	cmp	r2, #0
 8007902:	da05      	bge.n	8007910 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8007904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007908:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800790a:	4620      	mov	r0, r4
 800790c:	f002 f988 	bl	8009c20 <sys_dlist_remove>
		update_cache(thread == _current);
 8007910:	4d0b      	ldr	r5, [pc, #44]	; (8007940 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8007912:	7b63      	ldrb	r3, [r4, #13]
 8007914:	68a8      	ldr	r0, [r5, #8]
 8007916:	f043 0310 	orr.w	r3, r3, #16
 800791a:	7363      	strb	r3, [r4, #13]
 800791c:	1b03      	subs	r3, r0, r4
 800791e:	4258      	negs	r0, r3
 8007920:	4158      	adcs	r0, r3
 8007922:	f7ff ff6b 	bl	80077fc <update_cache>
	__asm__ volatile(
 8007926:	f386 8811 	msr	BASEPRI, r6
 800792a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 800792e:	68ab      	ldr	r3, [r5, #8]
 8007930:	42a3      	cmp	r3, r4
 8007932:	d103      	bne.n	800793c <z_impl_k_thread_suspend+0x5c>
}
 8007934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8007938:	f002 b9b4 	b.w	8009ca4 <z_reschedule_unlocked>
}
 800793c:	bd70      	pop	{r4, r5, r6, pc}
 800793e:	bf00      	nop
 8007940:	20001808 	.word	0x20001808

08007944 <k_sched_unlock>:
{
 8007944:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007946:	f04f 0310 	mov.w	r3, #16
 800794a:	f3ef 8411 	mrs	r4, BASEPRI
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8007956:	4b08      	ldr	r3, [pc, #32]	; (8007978 <k_sched_unlock+0x34>)
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	7bd3      	ldrb	r3, [r2, #15]
 800795c:	3301      	adds	r3, #1
 800795e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8007960:	2000      	movs	r0, #0
 8007962:	f7ff ff4b 	bl	80077fc <update_cache>
	__asm__ volatile(
 8007966:	f384 8811 	msr	BASEPRI, r4
 800796a:	f3bf 8f6f 	isb	sy
}
 800796e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8007972:	f002 b997 	b.w	8009ca4 <z_reschedule_unlocked>
 8007976:	bf00      	nop
 8007978:	20001808 	.word	0x20001808

0800797c <move_thread_to_end_of_prio_q>:
{
 800797c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800797e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8007982:	7b43      	ldrb	r3, [r0, #13]
 8007984:	2a00      	cmp	r2, #0
{
 8007986:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8007988:	da04      	bge.n	8007994 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800798a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800798e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8007990:	f002 f946 	bl	8009c20 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8007994:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8007996:	4a15      	ldr	r2, [pc, #84]	; (80079ec <move_thread_to_end_of_prio_q+0x70>)
 8007998:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800799c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 800799e:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80079a2:	f102 0524 	add.w	r5, r2, #36	; 0x24
 80079a6:	42ab      	cmp	r3, r5
 80079a8:	d01b      	beq.n	80079e2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80079aa:	b1d3      	cbz	r3, 80079e2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 80079ac:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 80079b0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 80079b4:	4286      	cmp	r6, r0
 80079b6:	d00f      	beq.n	80079d8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 80079b8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 80079ba:	2800      	cmp	r0, #0
 80079bc:	dd0c      	ble.n	80079d8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80079be:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 80079c0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 80079c4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80079c6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 80079c8:	6890      	ldr	r0, [r2, #8]
 80079ca:	1a43      	subs	r3, r0, r1
 80079cc:	4258      	negs	r0, r3
}
 80079ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80079d2:	4158      	adcs	r0, r3
 80079d4:	f7ff bf12 	b.w	80077fc <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80079d8:	42a3      	cmp	r3, r4
 80079da:	d002      	beq.n	80079e2 <move_thread_to_end_of_prio_q+0x66>
 80079dc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1e6      	bne.n	80079b0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 80079e2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 80079e6:	6021      	str	r1, [r4, #0]
	list->tail = node;
 80079e8:	6291      	str	r1, [r2, #40]	; 0x28
}
 80079ea:	e7ed      	b.n	80079c8 <move_thread_to_end_of_prio_q+0x4c>
 80079ec:	20001808 	.word	0x20001808

080079f0 <z_time_slice>:
{
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4601      	mov	r1, r0
	__asm__ volatile(
 80079f4:	f04f 0310 	mov.w	r3, #16
 80079f8:	f3ef 8411 	mrs	r4, BASEPRI
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8007a04:	4b15      	ldr	r3, [pc, #84]	; (8007a5c <z_time_slice+0x6c>)
 8007a06:	4a16      	ldr	r2, [pc, #88]	; (8007a60 <z_time_slice+0x70>)
 8007a08:	6898      	ldr	r0, [r3, #8]
 8007a0a:	6815      	ldr	r5, [r2, #0]
 8007a0c:	42a8      	cmp	r0, r5
 8007a0e:	d106      	bne.n	8007a1e <z_time_slice+0x2e>
			z_reset_time_slice();
 8007a10:	f7ff fe90 	bl	8007734 <z_reset_time_slice>
	__asm__ volatile(
 8007a14:	f384 8811 	msr	BASEPRI, r4
 8007a18:	f3bf 8f6f 	isb	sy
}
 8007a1c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8007a1e:	2500      	movs	r5, #0
 8007a20:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8007a22:	4a10      	ldr	r2, [pc, #64]	; (8007a64 <z_time_slice+0x74>)
 8007a24:	6812      	ldr	r2, [r2, #0]
 8007a26:	b1ba      	cbz	r2, 8007a58 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8007a28:	89c2      	ldrh	r2, [r0, #14]
 8007a2a:	2a7f      	cmp	r2, #127	; 0x7f
 8007a2c:	d814      	bhi.n	8007a58 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
 8007a2e:	7b42      	ldrb	r2, [r0, #13]
 8007a30:	06d2      	lsls	r2, r2, #27
 8007a32:	d111      	bne.n	8007a58 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8007a34:	4a0c      	ldr	r2, [pc, #48]	; (8007a68 <z_time_slice+0x78>)
 8007a36:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8007a3a:	6812      	ldr	r2, [r2, #0]
 8007a3c:	4295      	cmp	r5, r2
 8007a3e:	db0b      	blt.n	8007a58 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8007a40:	4a0a      	ldr	r2, [pc, #40]	; (8007a6c <z_time_slice+0x7c>)
 8007a42:	4290      	cmp	r0, r2
 8007a44:	d008      	beq.n	8007a58 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	428a      	cmp	r2, r1
 8007a4a:	dc02      	bgt.n	8007a52 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
 8007a4c:	f7ff ff96 	bl	800797c <move_thread_to_end_of_prio_q>
 8007a50:	e7de      	b.n	8007a10 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
 8007a52:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
 8007a54:	611a      	str	r2, [r3, #16]
 8007a56:	e7dd      	b.n	8007a14 <z_time_slice+0x24>
 8007a58:	2200      	movs	r2, #0
 8007a5a:	e7fb      	b.n	8007a54 <z_time_slice+0x64>
 8007a5c:	20001808 	.word	0x20001808
 8007a60:	20001838 	.word	0x20001838
 8007a64:	20001840 	.word	0x20001840
 8007a68:	2000183c 	.word	0x2000183c
 8007a6c:	200003c0 	.word	0x200003c0

08007a70 <ready_thread>:
{
 8007a70:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8007a72:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8007a76:	7b43      	ldrb	r3, [r0, #13]
 8007a78:	2a00      	cmp	r2, #0
 8007a7a:	db2a      	blt.n	8007ad2 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8007a7c:	06da      	lsls	r2, r3, #27
 8007a7e:	d128      	bne.n	8007ad2 <ready_thread+0x62>
 8007a80:	6982      	ldr	r2, [r0, #24]
 8007a82:	bb32      	cbnz	r2, 8007ad2 <ready_thread+0x62>
	return list->head == list;
 8007a84:	4a14      	ldr	r2, [pc, #80]	; (8007ad8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8007a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a8a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 8007a8c:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007a90:	f102 0524 	add.w	r5, r2, #36	; 0x24
 8007a94:	42ab      	cmp	r3, r5
 8007a96:	d017      	beq.n	8007ac8 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8007a98:	b1b3      	cbz	r3, 8007ac8 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 8007a9a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8007a9e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8007aa2:	428e      	cmp	r6, r1
 8007aa4:	d00b      	beq.n	8007abe <ready_thread+0x4e>
		return b2 - b1;
 8007aa6:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	dd08      	ble.n	8007abe <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8007aac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8007aae:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8007ab2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8007ab4:	6058      	str	r0, [r3, #4]
}
 8007ab6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8007ab8:	2000      	movs	r0, #0
 8007aba:	f7ff be9f 	b.w	80077fc <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8007abe:	42a3      	cmp	r3, r4
 8007ac0:	d002      	beq.n	8007ac8 <ready_thread+0x58>
 8007ac2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1ea      	bne.n	8007a9e <ready_thread+0x2e>
	node->prev = tail;
 8007ac8:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 8007acc:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8007ace:	6290      	str	r0, [r2, #40]	; 0x28
}
 8007ad0:	e7f1      	b.n	8007ab6 <ready_thread+0x46>
}
 8007ad2:	bc70      	pop	{r4, r5, r6}
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	20001808 	.word	0x20001808

08007adc <z_sched_start>:
{
 8007adc:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007ade:	f04f 0210 	mov.w	r2, #16
 8007ae2:	f3ef 8411 	mrs	r4, BASEPRI
 8007ae6:	f382 8811 	msr	BASEPRI, r2
 8007aea:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8007aee:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8007af0:	0751      	lsls	r1, r2, #29
 8007af2:	d404      	bmi.n	8007afe <z_sched_start+0x22>
	__asm__ volatile(
 8007af4:	f384 8811 	msr	BASEPRI, r4
 8007af8:	f3bf 8f6f 	isb	sy
}
 8007afc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8007afe:	f022 0204 	bic.w	r2, r2, #4
 8007b02:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8007b04:	f7ff ffb4 	bl	8007a70 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8007b08:	4621      	mov	r1, r4
 8007b0a:	4802      	ldr	r0, [pc, #8]	; (8007b14 <z_sched_start+0x38>)
}
 8007b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8007b10:	f7ff be4e 	b.w	80077b0 <z_reschedule>
 8007b14:	20001cfa 	.word	0x20001cfa

08007b18 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 8007b20:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 8007b24:	4608      	mov	r0, r1
 8007b26:	f7ff be1b 	b.w	8007760 <k_sched_time_slice_set>
 8007b2a:	bf00      	nop
 8007b2c:	20001808 	.word	0x20001808

08007b30 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8007b32:	f04f 0310 	mov.w	r3, #16
 8007b36:	f3ef 8511 	mrs	r5, BASEPRI
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
 8007b42:	491a      	ldr	r1, [pc, #104]	; (8007bac <z_impl_k_yield+0x7c>)
 8007b44:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8007b46:	7b43      	ldrb	r3, [r0, #13]
 8007b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b4c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8007b4e:	f002 f867 	bl	8009c20 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
 8007b52:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8007b54:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 8007b56:	4608      	mov	r0, r1
 8007b58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b5c:	735a      	strb	r2, [r3, #13]
 8007b5e:	f850 2f24 	ldr.w	r2, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007b62:	4282      	cmp	r2, r0
 8007b64:	d01c      	beq.n	8007ba0 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8007b66:	b1da      	cbz	r2, 8007ba0 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 8007b68:	6a8f      	ldr	r7, [r1, #40]	; 0x28
	int32_t b1 = thread_1->base.prio;
 8007b6a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8007b6e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 8007b72:	42a6      	cmp	r6, r4
 8007b74:	d00f      	beq.n	8007b96 <z_impl_k_yield+0x66>
		return b2 - b1;
 8007b76:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8007b78:	2c00      	cmp	r4, #0
 8007b7a:	dd0c      	ble.n	8007b96 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 8007b7c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8007b7e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8007b82:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8007b84:	6053      	str	r3, [r2, #4]
	update_cache(1);
 8007b86:	2001      	movs	r0, #1
 8007b88:	f7ff fe38 	bl	80077fc <update_cache>
 8007b8c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8007b8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b92:	f7fe ba1b 	b.w	8005fcc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8007b96:	42ba      	cmp	r2, r7
 8007b98:	d002      	beq.n	8007ba0 <z_impl_k_yield+0x70>
 8007b9a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8007b9c:	2a00      	cmp	r2, #0
 8007b9e:	d1e6      	bne.n	8007b6e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 8007ba0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
	node->prev = tail;
 8007ba2:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 8007ba6:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8007ba8:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007baa:	e7ec      	b.n	8007b86 <z_impl_k_yield+0x56>
 8007bac:	20001808 	.word	0x20001808

08007bb0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8007bb0:	ea50 0301 	orrs.w	r3, r0, r1
{
 8007bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb8:	4605      	mov	r5, r0
 8007bba:	460e      	mov	r6, r1
	if (ticks == 0) {
 8007bbc:	d103      	bne.n	8007bc6 <z_tick_sleep+0x16>
	z_impl_k_yield();
 8007bbe:	f7ff ffb7 	bl	8007b30 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	e033      	b.n	8007c2e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 8007bc6:	f06f 0401 	mvn.w	r4, #1
 8007bca:	1a24      	subs	r4, r4, r0
 8007bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bd0:	eb63 0301 	sbc.w	r3, r3, r1
 8007bd4:	2c01      	cmp	r4, #1
 8007bd6:	f173 0300 	sbcs.w	r3, r3, #0
 8007bda:	da02      	bge.n	8007be2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8007bdc:	f002 f93c 	bl	8009e58 <sys_clock_tick_get_32>
 8007be0:	1944      	adds	r4, r0, r5
 8007be2:	f04f 0310 	mov.w	r3, #16
 8007be6:	f3ef 8811 	mrs	r8, BASEPRI
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8007bf2:	4f10      	ldr	r7, [pc, #64]	; (8007c34 <z_tick_sleep+0x84>)
 8007bf4:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <z_tick_sleep+0x88>)
 8007bf6:	68b8      	ldr	r0, [r7, #8]
 8007bf8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8007bfa:	f7ff fe1f 	bl	800783c <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8007bfe:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8007c00:	490e      	ldr	r1, [pc, #56]	; (8007c3c <z_tick_sleep+0x8c>)
 8007c02:	462a      	mov	r2, r5
 8007c04:	4633      	mov	r3, r6
 8007c06:	3018      	adds	r0, #24
 8007c08:	f000 f8fc 	bl	8007e04 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8007c0c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8007c0e:	7b53      	ldrb	r3, [r2, #13]
 8007c10:	f043 0310 	orr.w	r3, r3, #16
 8007c14:	7353      	strb	r3, [r2, #13]
 8007c16:	4640      	mov	r0, r8
 8007c18:	f7fe f9d8 	bl	8005fcc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8007c1c:	f002 f91c 	bl	8009e58 <sys_clock_tick_get_32>
 8007c20:	1a20      	subs	r0, r4, r0
 8007c22:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8007c26:	2801      	cmp	r0, #1
 8007c28:	f173 0300 	sbcs.w	r3, r3, #0
 8007c2c:	dbc9      	blt.n	8007bc2 <z_tick_sleep+0x12>
}
 8007c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c32:	bf00      	nop
 8007c34:	20001808 	.word	0x20001808
 8007c38:	20001838 	.word	0x20001838
 8007c3c:	08009d39 	.word	0x08009d39

08007c40 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8007c40:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8007c44:	bf08      	it	eq
 8007c46:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8007c4a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8007c4c:	d106      	bne.n	8007c5c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8007c4e:	4b07      	ldr	r3, [pc, #28]	; (8007c6c <z_impl_k_sleep+0x2c>)
 8007c50:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8007c52:	f7ff fe45 	bl	80078e0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8007c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8007c5a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8007c5c:	f7ff ffa8 	bl	8007bb0 <z_tick_sleep>
			return t / (from_hz / to_hz);
 8007c60:	220a      	movs	r2, #10
 8007c62:	2300      	movs	r3, #0
 8007c64:	17c1      	asrs	r1, r0, #31
 8007c66:	f7f8 fead 	bl	80009c4 <__aeabi_uldivmod>
	return ret;
 8007c6a:	e7f6      	b.n	8007c5a <z_impl_k_sleep+0x1a>
 8007c6c:	20001808 	.word	0x20001808

08007c70 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8007c70:	4b01      	ldr	r3, [pc, #4]	; (8007c78 <z_impl_k_current_get+0x8>)
 8007c72:	6898      	ldr	r0, [r3, #8]
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	20001808 	.word	0x20001808

08007c7c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8007c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	4604      	mov	r4, r0
 8007c82:	f04f 0310 	mov.w	r3, #16
 8007c86:	f3ef 8611 	mrs	r6, BASEPRI
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8007c92:	7b43      	ldrb	r3, [r0, #13]
 8007c94:	071a      	lsls	r2, r3, #28
 8007c96:	d505      	bpl.n	8007ca4 <z_thread_abort+0x28>
	__asm__ volatile(
 8007c98:	f386 8811 	msr	BASEPRI, r6
 8007c9c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8007ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8007ca4:	f023 0220 	bic.w	r2, r3, #32
 8007ca8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8007cac:	09d2      	lsrs	r2, r2, #7
 8007cae:	d120      	bne.n	8007cf2 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8007cb0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8007cb2:	68a3      	ldr	r3, [r4, #8]
 8007cb4:	b113      	cbz	r3, 8007cbc <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f001 ffba 	bl	8009c30 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8007cbc:	f104 0018 	add.w	r0, r4, #24
 8007cc0:	f002 f899 	bl	8009df6 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8007cc4:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8007cc8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8007ccc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007cce:	42bd      	cmp	r5, r7
 8007cd0:	d000      	beq.n	8007cd4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8007cd2:	b9b5      	cbnz	r5, 8007d02 <z_thread_abort+0x86>
		update_cache(1);
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	f7ff fd91 	bl	80077fc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8007cda:	4b10      	ldr	r3, [pc, #64]	; (8007d1c <z_thread_abort+0xa0>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	42a3      	cmp	r3, r4
 8007ce0:	d1da      	bne.n	8007c98 <z_thread_abort+0x1c>
 8007ce2:	f3ef 8305 	mrs	r3, IPSR
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1d6      	bne.n	8007c98 <z_thread_abort+0x1c>
 8007cea:	4630      	mov	r0, r6
 8007cec:	f7fe f96e 	bl	8005fcc <arch_swap>
	return ret;
 8007cf0:	e7d2      	b.n	8007c98 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8007cf2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8007cf6:	f043 0308 	orr.w	r3, r3, #8
 8007cfa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8007cfc:	f001 ff90 	bl	8009c20 <sys_dlist_remove>
}
 8007d00:	e7d7      	b.n	8007cb2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 8007d02:	4628      	mov	r0, r5
 8007d04:	f001 ff94 	bl	8009c30 <unpend_thread_no_timeout>
 8007d08:	f105 0018 	add.w	r0, r5, #24
 8007d0c:	f002 f873 	bl	8009df6 <z_abort_timeout>
 8007d10:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 8007d14:	4628      	mov	r0, r5
 8007d16:	f7ff feab 	bl	8007a70 <ready_thread>
 8007d1a:	e7d7      	b.n	8007ccc <z_thread_abort+0x50>
 8007d1c:	20001808 	.word	0x20001808

08007d20 <z_data_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8007d20:	4809      	ldr	r0, [pc, #36]	; (8007d48 <z_data_copy+0x28>)
 8007d22:	4a0a      	ldr	r2, [pc, #40]	; (8007d4c <z_data_copy+0x2c>)
 8007d24:	490a      	ldr	r1, [pc, #40]	; (8007d50 <z_data_copy+0x30>)
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8007d26:	b508      	push	{r3, lr}
 8007d28:	1a12      	subs	r2, r2, r0
 8007d2a:	f002 f988 	bl	800a03e <memcpy>
 8007d2e:	4a09      	ldr	r2, [pc, #36]	; (8007d54 <z_data_copy+0x34>)
 8007d30:	4909      	ldr	r1, [pc, #36]	; (8007d58 <z_data_copy+0x38>)
 8007d32:	480a      	ldr	r0, [pc, #40]	; (8007d5c <z_data_copy+0x3c>)
 8007d34:	f002 f983 	bl	800a03e <memcpy>
 8007d38:	4809      	ldr	r0, [pc, #36]	; (8007d60 <z_data_copy+0x40>)
 8007d3a:	4a0a      	ldr	r2, [pc, #40]	; (8007d64 <z_data_copy+0x44>)
 8007d3c:	490a      	ldr	r1, [pc, #40]	; (8007d68 <z_data_copy+0x48>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8007d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d42:	1a12      	subs	r2, r2, r0
 8007d44:	f002 b97b 	b.w	800a03e <memcpy>
 8007d48:	20000000 	.word	0x20000000
 8007d4c:	20000208 	.word	0x20000208
 8007d50:	0800bdb8 	.word	0x0800bdb8
 8007d54:	00000000 	.word	0x00000000
 8007d58:	0800bdb8 	.word	0x0800bdb8
 8007d5c:	20000000 	.word	0x20000000
 8007d60:	10000000 	.word	0x10000000
 8007d64:	10000000 	.word	0x10000000
 8007d68:	0800bfc0 	.word	0x0800bfc0

08007d6c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8007d6c:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <elapsed+0x10>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	b90b      	cbnz	r3, 8007d76 <elapsed+0xa>
 8007d72:	f7fe b90d 	b.w	8005f90 <sys_clock_elapsed>
}
 8007d76:	2000      	movs	r0, #0
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	20001844 	.word	0x20001844

08007d80 <next_timeout>:
	return list->head == list;
 8007d80:	4b11      	ldr	r3, [pc, #68]	; (8007dc8 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
 8007d82:	b510      	push	{r4, lr}
 8007d84:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007d86:	429c      	cmp	r4, r3
 8007d88:	bf08      	it	eq
 8007d8a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8007d8c:	f7ff ffee 	bl	8007d6c <elapsed>
 8007d90:	4602      	mov	r2, r0
	int32_t ret = to == NULL ? MAX_WAIT
 8007d92:	b16c      	cbz	r4, 8007db0 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8007d94:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8007d98:	1a80      	subs	r0, r0, r2
 8007d9a:	eb61 72e2 	sbc.w	r2, r1, r2, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8007d9e:	2801      	cmp	r0, #1
 8007da0:	f172 0300 	sbcs.w	r3, r2, #0
 8007da4:	db0d      	blt.n	8007dc2 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8007da6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8007daa:	f172 0300 	sbcs.w	r3, r2, #0
 8007dae:	db01      	blt.n	8007db4 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
 8007db0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <next_timeout+0x4c>)
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	b113      	cbz	r3, 8007dc0 <next_timeout+0x40>
 8007dba:	4298      	cmp	r0, r3
 8007dbc:	bfa8      	it	ge
 8007dbe:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8007dc0:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	e7f6      	b.n	8007db4 <next_timeout+0x34>
 8007dc6:	bf00      	nop
 8007dc8:	20000058 	.word	0x20000058
 8007dcc:	20001808 	.word	0x20001808

08007dd0 <remove_timeout>:
{
 8007dd0:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 8007dd2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8007dd4:	b168      	cbz	r0, 8007df2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8007dd6:	4a0a      	ldr	r2, [pc, #40]	; (8007e00 <remove_timeout+0x30>)
 8007dd8:	6852      	ldr	r2, [r2, #4]
 8007dda:	4290      	cmp	r0, r2
 8007ddc:	d009      	beq.n	8007df2 <remove_timeout+0x22>
	if (next(t) != NULL) {
 8007dde:	b143      	cbz	r3, 8007df2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8007de0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8007de4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8007de8:	1912      	adds	r2, r2, r4
 8007dea:	eb41 0105 	adc.w	r1, r1, r5
 8007dee:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8007df2:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8007df4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8007df6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8007df8:	2300      	movs	r3, #0
	node->prev = NULL;
 8007dfa:	e9c0 3300 	strd	r3, r3, [r0]
}
 8007dfe:	bd30      	pop	{r4, r5, pc}
 8007e00:	20000058 	.word	0x20000058

08007e04 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e08:	bf08      	it	eq
 8007e0a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8007e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e10:	4604      	mov	r4, r0
 8007e12:	461f      	mov	r7, r3
 8007e14:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8007e16:	d065      	beq.n	8007ee4 <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8007e18:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8007e1a:	f04f 0310 	mov.w	r3, #16
 8007e1e:	f3ef 8611 	mrs	r6, BASEPRI
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8007e2a:	f06f 0201 	mvn.w	r2, #1
 8007e2e:	1b53      	subs	r3, r2, r5
 8007e30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007e34:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	db1b      	blt.n	8007e74 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8007e3c:	4b2a      	ldr	r3, [pc, #168]	; (8007ee8 <z_add_timeout+0xe4>)
 8007e3e:	e9d3 1300 	ldrd	r1, r3, [r3]
 8007e42:	1a52      	subs	r2, r2, r1
 8007e44:	eb6c 0303 	sbc.w	r3, ip, r3
 8007e48:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 8007e4a:	eb63 0307 	sbc.w	r3, r3, r7
 8007e4e:	2d01      	cmp	r5, #1
 8007e50:	f173 0200 	sbcs.w	r2, r3, #0
 8007e54:	da01      	bge.n	8007e5a <z_add_timeout+0x56>
 8007e56:	2501      	movs	r5, #1
 8007e58:	2300      	movs	r3, #0
	return list->head == list;
 8007e5a:	4824      	ldr	r0, [pc, #144]	; (8007eec <z_add_timeout+0xe8>)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8007e5c:	e9c4 5304 	strd	r5, r3, [r4, #16]
	sys_dnode_t *const tail = list->tail;
 8007e60:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007e64:	4283      	cmp	r3, r0
 8007e66:	d116      	bne.n	8007e96 <z_add_timeout+0x92>
	node->prev = tail;
 8007e68:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8007e6c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8007e70:	6044      	str	r4, [r0, #4]
}
 8007e72:	e024      	b.n	8007ebe <z_add_timeout+0xba>
 8007e74:	f7ff ff7a 	bl	8007d6c <elapsed>
 8007e78:	3501      	adds	r5, #1
 8007e7a:	f147 0300 	adc.w	r3, r7, #0
 8007e7e:	182d      	adds	r5, r5, r0
 8007e80:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8007e84:	e7e9      	b.n	8007e5a <z_add_timeout+0x56>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 8007e86:	1a52      	subs	r2, r2, r1
 8007e88:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 8007e8c:	4563      	cmp	r3, ip
 8007e8e:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8007e92:	d0e9      	beq.n	8007e68 <z_add_timeout+0x64>
 8007e94:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0e6      	beq.n	8007e68 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 8007e9a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 8007e9e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 8007ea2:	428a      	cmp	r2, r1
 8007ea4:	eb75 0e07 	sbcs.w	lr, r5, r7
 8007ea8:	daed      	bge.n	8007e86 <z_add_timeout+0x82>
				t->dticks -= to->dticks;
 8007eaa:	1a8a      	subs	r2, r1, r2
 8007eac:	eb67 0505 	sbc.w	r5, r7, r5
 8007eb0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 8007eb4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8007eb6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8007eba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8007ebc:	605c      	str	r4, [r3, #4]
	return list->head == list;
 8007ebe:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007ec0:	4283      	cmp	r3, r0
 8007ec2:	d00b      	beq.n	8007edc <z_add_timeout+0xd8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8007ec4:	429c      	cmp	r4, r3
 8007ec6:	d109      	bne.n	8007edc <z_add_timeout+0xd8>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8007ec8:	f7ff ff5a 	bl	8007d80 <next_timeout>

			if (next_time == 0 ||
 8007ecc:	b118      	cbz	r0, 8007ed6 <z_add_timeout+0xd2>
			    _current_cpu->slice_ticks != next_time) {
 8007ece:	4b08      	ldr	r3, [pc, #32]	; (8007ef0 <z_add_timeout+0xec>)
			if (next_time == 0 ||
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	4283      	cmp	r3, r0
 8007ed4:	d002      	beq.n	8007edc <z_add_timeout+0xd8>
				sys_clock_set_timeout(next_time, false);
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	f7fd ffea 	bl	8005eb0 <sys_clock_set_timeout>
	__asm__ volatile(
 8007edc:	f386 8811 	msr	BASEPRI, r6
 8007ee0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8007ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000540 	.word	0x20000540
 8007eec:	20000058 	.word	0x20000058
 8007ef0:	20001808 	.word	0x20001808

08007ef4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8007ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8007efa:	f7ff fd79 	bl	80079f0 <z_time_slice>
	__asm__ volatile(
 8007efe:	f04f 0310 	mov.w	r3, #16
 8007f02:	f3ef 8411 	mrs	r4, BASEPRI
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8007f0e:	4e24      	ldr	r6, [pc, #144]	; (8007fa0 <sys_clock_announce+0xac>)
	return list->head == list;
 8007f10:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8007fa8 <sys_clock_announce+0xb4>
 8007f14:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8007f16:	4d23      	ldr	r5, [pc, #140]	; (8007fa4 <sys_clock_announce+0xb0>)
 8007f18:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8007f1c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007f1e:	4540      	cmp	r0, r8
		curr_tick += dt;
 8007f20:	e9d5 1e00 	ldrd	r1, lr, [r5]
 8007f24:	ea4f 77e2 	mov.w	r7, r2, asr #31
 8007f28:	d00b      	beq.n	8007f42 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8007f2a:	b150      	cbz	r0, 8007f42 <sys_clock_announce+0x4e>
 8007f2c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	eb77 090c 	sbcs.w	r9, r7, ip
 8007f36:	da16      	bge.n	8007f66 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8007f38:	1a9b      	subs	r3, r3, r2
 8007f3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8007f3e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8007f42:	1852      	adds	r2, r2, r1
 8007f44:	eb4e 0707 	adc.w	r7, lr, r7
 8007f48:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 8007f4c:	2500      	movs	r5, #0
 8007f4e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8007f50:	f7ff ff16 	bl	8007d80 <next_timeout>
 8007f54:	4629      	mov	r1, r5
 8007f56:	f7fd ffab 	bl	8005eb0 <sys_clock_set_timeout>
	__asm__ volatile(
 8007f5a:	f384 8811 	msr	BASEPRI, r4
 8007f5e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8007f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8007f66:	1859      	adds	r1, r3, r1
 8007f68:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8007f70:	2200      	movs	r2, #0
 8007f72:	2300      	movs	r3, #0
 8007f74:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 8007f78:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 8007f7c:	f7ff ff28 	bl	8007dd0 <remove_timeout>
 8007f80:	f384 8811 	msr	BASEPRI, r4
 8007f84:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8007f88:	6883      	ldr	r3, [r0, #8]
 8007f8a:	4798      	blx	r3
	__asm__ volatile(
 8007f8c:	f04f 0310 	mov.w	r3, #16
 8007f90:	f3ef 8411 	mrs	r4, BASEPRI
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8007f9c:	e7bc      	b.n	8007f18 <sys_clock_announce+0x24>
 8007f9e:	bf00      	nop
 8007fa0:	20001844 	.word	0x20001844
 8007fa4:	20000540 	.word	0x20000540
 8007fa8:	20000058 	.word	0x20000058

08007fac <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8007fac:	b510      	push	{r4, lr}
 8007fae:	f04f 0310 	mov.w	r3, #16
 8007fb2:	f3ef 8411 	mrs	r4, BASEPRI
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 8007fbe:	f7fd ffe7 	bl	8005f90 <sys_clock_elapsed>
 8007fc2:	4a05      	ldr	r2, [pc, #20]	; (8007fd8 <sys_clock_tick_get+0x2c>)
 8007fc4:	e9d2 3100 	ldrd	r3, r1, [r2]
 8007fc8:	18c0      	adds	r0, r0, r3
 8007fca:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8007fce:	f384 8811 	msr	BASEPRI, r4
 8007fd2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8007fd6:	bd10      	pop	{r4, pc}
 8007fd8:	20000540 	.word	0x20000540

08007fdc <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8007fdc:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8007fde:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	f142 0200 	adc.w	r2, r2, #0
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	f172 0300 	sbcs.w	r3, r2, #0
{
 8007fee:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8007ff0:	d304      	bcc.n	8007ffc <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8007ff2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8007ff6:	490d      	ldr	r1, [pc, #52]	; (800802c <z_timer_expiration_handler+0x50>)
 8007ff8:	f7ff ff04 	bl	8007e04 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 8007ffc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007ffe:	3301      	adds	r3, #1
 8008000:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 8008002:	6a23      	ldr	r3, [r4, #32]
 8008004:	b10b      	cbz	r3, 800800a <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
 8008006:	4620      	mov	r0, r4
 8008008:	4798      	blx	r3
	return list->head == list;
 800800a:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800800e:	42a5      	cmp	r5, r4
 8008010:	d00a      	beq.n	8008028 <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8008012:	b14d      	cbz	r5, 8008028 <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
 8008014:	4628      	mov	r0, r5
 8008016:	f001 fe15 	bl	8009c44 <z_unpend_thread_no_timeout>
 800801a:	2300      	movs	r3, #0
 800801c:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
 800801e:	4628      	mov	r0, r5
}
 8008020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
 8008024:	f001 be78 	b.w	8009d18 <z_ready_thread>
}
 8008028:	bd38      	pop	{r3, r4, r5, pc}
 800802a:	bf00      	nop
 800802c:	08007fdd 	.word	0x08007fdd

08008030 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8008030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008038:	bf08      	it	eq
 800803a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800803e:	4605      	mov	r5, r0
 8008040:	4690      	mov	r8, r2
 8008042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008046:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8008048:	d03c      	beq.n	80080c4 <z_impl_k_timer_start+0x94>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800804a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800804e:	bf08      	it	eq
 8008050:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8008054:	4604      	mov	r4, r0
 8008056:	460e      	mov	r6, r1
 8008058:	d013      	beq.n	8008082 <z_impl_k_timer_start+0x52>
 800805a:	4308      	orrs	r0, r1
 800805c:	d011      	beq.n	8008082 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
 800805e:	f06f 0001 	mvn.w	r0, #1
 8008062:	1b00      	subs	r0, r0, r4
 8008064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008068:	eb60 0001 	sbc.w	r0, r0, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800806c:	2800      	cmp	r0, #0
 800806e:	da08      	bge.n	8008082 <z_impl_k_timer_start+0x52>
		period.ticks = MAX(period.ticks - 1, 1);
 8008070:	3c01      	subs	r4, #1
 8008072:	f161 0600 	sbc.w	r6, r1, #0
 8008076:	2c01      	cmp	r4, #1
 8008078:	f176 0100 	sbcs.w	r1, r6, #0
 800807c:	bfbc      	itt	lt
 800807e:	2401      	movlt	r4, #1
 8008080:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8008082:	f06f 0101 	mvn.w	r1, #1
 8008086:	1a89      	subs	r1, r1, r2
 8008088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800808c:	eb61 0103 	sbc.w	r1, r1, r3
 8008090:	2900      	cmp	r1, #0
 8008092:	da08      	bge.n	80080a6 <z_impl_k_timer_start+0x76>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8008094:	3a01      	subs	r2, #1
 8008096:	f163 0700 	sbc.w	r7, r3, #0
 800809a:	2f00      	cmp	r7, #0
 800809c:	4690      	mov	r8, r2
 800809e:	bfbc      	itt	lt
 80080a0:	f04f 0800 	movlt.w	r8, #0
 80080a4:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
 80080a6:	4628      	mov	r0, r5
 80080a8:	f001 fea5 	bl	8009df6 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
 80080b0:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80080b4:	4642      	mov	r2, r8
 80080b6:	463b      	mov	r3, r7
 80080b8:	4628      	mov	r0, r5
 80080ba:	4903      	ldr	r1, [pc, #12]	; (80080c8 <z_impl_k_timer_start+0x98>)
		     duration);
}
 80080bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80080c0:	f7ff bea0 	b.w	8007e04 <z_add_timeout>
}
 80080c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c8:	08007fdd 	.word	0x08007fdd

080080cc <z_impl_k_timer_status_sync>:
}
#include <syscalls/k_timer_status_get_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
 80080cc:	b513      	push	{r0, r1, r4, lr}
 80080ce:	4604      	mov	r4, r0
	__asm__ volatile(
 80080d0:	f04f 0310 	mov.w	r3, #16
 80080d4:	f3ef 8111 	mrs	r1, BASEPRI
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy

		return result;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;
 80080e0:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if (result == 0U) {
 80080e2:	b9a8      	cbnz	r0, 8008110 <z_impl_k_timer_status_sync+0x44>
		if (!z_is_inactive_timeout(&timer->timeout)) {
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	b19b      	cbz	r3, 8008110 <z_impl_k_timer_status_sync+0x44>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_timer, status_sync, timer, K_FOREVER);

			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
 80080e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080f0:	e9cd 2300 	strd	r2, r3, [sp]
 80080f4:	480a      	ldr	r0, [pc, #40]	; (8008120 <z_impl_k_timer_status_sync+0x54>)
 80080f6:	f104 0218 	add.w	r2, r4, #24
 80080fa:	f7ff fbdd 	bl	80078b8 <z_pend_curr>
 80080fe:	f04f 0310 	mov.w	r3, #16
 8008102:	f3ef 8111 	mrs	r1, BASEPRI
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
 800810e:	6b20      	ldr	r0, [r4, #48]	; 0x30
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	6323      	str	r3, [r4, #48]	; 0x30
	__asm__ volatile(
 8008114:	f381 8811 	msr	BASEPRI, r1
 8008118:	f3bf 8f6f 	isb	sy
	 * @note	New tracing hook
	 */
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_timer, status_sync, timer, result);

	return result;
}
 800811c:	b002      	add	sp, #8
 800811e:	bd10      	pop	{r4, pc}
 8008120:	20001cfb 	.word	0x20001cfb

08008124 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
 8008124:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
 8008126:	4601      	mov	r1, r0
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <k_aligned_alloc+0xc>)
 800812a:	f001 bef2 	b.w	8009f12 <z_heap_aligned_alloc>
 800812e:	bf00      	nop
 8008130:	200001cc 	.word	0x200001cc

08008134 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
 8008134:	b513      	push	{r0, r1, r4, lr}
 8008136:	4604      	mov	r4, r0
 8008138:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
 800813a:	f001 fcd6 	bl	8009aea <k_is_in_isr>
 800813e:	9a01      	ldr	r2, [sp, #4]
 8008140:	b950      	cbnz	r0, 8008158 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
 8008142:	4b07      	ldr	r3, [pc, #28]	; (8008160 <z_thread_aligned_alloc+0x2c>)
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
 8008148:	b143      	cbz	r3, 800815c <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
 800814a:	4621      	mov	r1, r4
 800814c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
 800814e:	b002      	add	sp, #8
 8008150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
 8008154:	f001 bedd 	b.w	8009f12 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
 8008158:	4b02      	ldr	r3, [pc, #8]	; (8008164 <z_thread_aligned_alloc+0x30>)
 800815a:	e7f6      	b.n	800814a <z_thread_aligned_alloc+0x16>
}
 800815c:	b002      	add	sp, #8
 800815e:	bd10      	pop	{r4, pc}
 8008160:	20001808 	.word	0x20001808
 8008164:	200001cc 	.word	0x200001cc

08008168 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8008168:	4a02      	ldr	r2, [pc, #8]	; (8008174 <boot_banner+0xc>)
 800816a:	4903      	ldr	r1, [pc, #12]	; (8008178 <boot_banner+0x10>)
 800816c:	4803      	ldr	r0, [pc, #12]	; (800817c <boot_banner+0x14>)
 800816e:	f000 ba11 	b.w	8008594 <printk>
 8008172:	bf00      	nop
 8008174:	0800b584 	.word	0x0800b584
 8008178:	0800bc74 	.word	0x0800bc74
 800817c:	0800bc90 	.word	0x0800bc90

08008180 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 8008180:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8008182:	4c06      	ldr	r4, [pc, #24]	; (800819c <statics_init+0x1c>)
 8008184:	4d06      	ldr	r5, [pc, #24]	; (80081a0 <statics_init+0x20>)
 8008186:	42ac      	cmp	r4, r5
 8008188:	d301      	bcc.n	800818e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 800818a:	2000      	movs	r0, #0
 800818c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800818e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8008192:	4620      	mov	r0, r4
 8008194:	f001 fedb 	bl	8009f4e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8008198:	3418      	adds	r4, #24
 800819a:	e7f4      	b.n	8008186 <statics_init+0x6>
 800819c:	200001cc 	.word	0x200001cc
 80081a0:	200001e4 	.word	0x200001e4

080081a4 <atan2>:
 80081a4:	f7fa b85c 	b.w	8002260 <__ieee754_atan2>

080081a8 <sqrt>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	ed2d 8b02 	vpush	{d8}
 80081ae:	ec55 4b10 	vmov	r4, r5, d0
 80081b2:	f000 f833 	bl	800821c <__ieee754_sqrt>
 80081b6:	4b18      	ldr	r3, [pc, #96]	; (8008218 <sqrt+0x70>)
 80081b8:	eeb0 8a40 	vmov.f32	s16, s0
 80081bc:	eef0 8a60 	vmov.f32	s17, s1
 80081c0:	f993 3000 	ldrsb.w	r3, [r3]
 80081c4:	3301      	adds	r3, #1
 80081c6:	d00d      	beq.n	80081e4 <sqrt+0x3c>
 80081c8:	4622      	mov	r2, r4
 80081ca:	462b      	mov	r3, r5
 80081cc:	4620      	mov	r0, r4
 80081ce:	4629      	mov	r1, r5
 80081d0:	f7f8 fe06 	bl	8000de0 <__aeabi_dcmpun>
 80081d4:	b930      	cbnz	r0, 80081e4 <sqrt+0x3c>
 80081d6:	2200      	movs	r2, #0
 80081d8:	2300      	movs	r3, #0
 80081da:	4620      	mov	r0, r4
 80081dc:	4629      	mov	r1, r5
 80081de:	f7f8 fdd7 	bl	8000d90 <__aeabi_dcmplt>
 80081e2:	b930      	cbnz	r0, 80081f2 <sqrt+0x4a>
 80081e4:	eeb0 0a48 	vmov.f32	s0, s16
 80081e8:	eef0 0a68 	vmov.f32	s1, s17
 80081ec:	ecbd 8b02 	vpop	{d8}
 80081f0:	bd38      	pop	{r3, r4, r5, pc}
 80081f2:	f001 f9dd 	bl	80095b0 <__errno>
 80081f6:	2200      	movs	r2, #0
 80081f8:	2300      	movs	r3, #0
 80081fa:	2121      	movs	r1, #33	; 0x21
 80081fc:	6001      	str	r1, [r0, #0]
 80081fe:	4610      	mov	r0, r2
 8008200:	4619      	mov	r1, r3
 8008202:	f7f8 faa7 	bl	8000754 <__aeabi_ddiv>
 8008206:	ec41 0b18 	vmov	d8, r0, r1
 800820a:	eeb0 0a48 	vmov.f32	s0, s16
 800820e:	eef0 0a68 	vmov.f32	s1, s17
 8008212:	ecbd 8b02 	vpop	{d8}
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	20000060 	.word	0x20000060

0800821c <__ieee754_sqrt>:
 800821c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008220:	4a61      	ldr	r2, [pc, #388]	; (80083a8 <__ieee754_sqrt+0x18c>)
 8008222:	ec55 4b10 	vmov	r4, r5, d0
 8008226:	43aa      	bics	r2, r5
 8008228:	f000 809c 	beq.w	8008364 <__ieee754_sqrt+0x148>
 800822c:	2d00      	cmp	r5, #0
 800822e:	ee10 1a10 	vmov	r1, s0
 8008232:	462b      	mov	r3, r5
 8008234:	dd54      	ble.n	80082e0 <__ieee754_sqrt+0xc4>
 8008236:	1528      	asrs	r0, r5, #20
 8008238:	d061      	beq.n	80082fe <__ieee754_sqrt+0xe2>
 800823a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800823e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008242:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 8008246:	0fcb      	lsrs	r3, r1, #31
 8008248:	07c0      	lsls	r0, r0, #31
 800824a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800824e:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008252:	d405      	bmi.n	8008260 <__ieee754_sqrt+0x44>
 8008254:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8008258:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800825c:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8008260:	2600      	movs	r6, #0
 8008262:	107f      	asrs	r7, r7, #1
 8008264:	f04f 0e16 	mov.w	lr, #22
 8008268:	4634      	mov	r4, r6
 800826a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800826e:	18a1      	adds	r1, r4, r2
 8008270:	4299      	cmp	r1, r3
 8008272:	dc02      	bgt.n	800827a <__ieee754_sqrt+0x5e>
 8008274:	1a5b      	subs	r3, r3, r1
 8008276:	188c      	adds	r4, r1, r2
 8008278:	4416      	add	r6, r2
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	f1be 0e01 	subs.w	lr, lr, #1
 8008280:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 8008284:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008288:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800828c:	d1ef      	bne.n	800826e <__ieee754_sqrt+0x52>
 800828e:	4675      	mov	r5, lr
 8008290:	2020      	movs	r0, #32
 8008292:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008296:	e00a      	b.n	80082ae <__ieee754_sqrt+0x92>
 8008298:	d041      	beq.n	800831e <__ieee754_sqrt+0x102>
 800829a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800829e:	3801      	subs	r0, #1
 80082a0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80082a4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80082a8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80082ac:	d040      	beq.n	8008330 <__ieee754_sqrt+0x114>
 80082ae:	42a3      	cmp	r3, r4
 80082b0:	eb02 010e 	add.w	r1, r2, lr
 80082b4:	ddf0      	ble.n	8008298 <__ieee754_sqrt+0x7c>
 80082b6:	2900      	cmp	r1, #0
 80082b8:	eb01 0e02 	add.w	lr, r1, r2
 80082bc:	db0a      	blt.n	80082d4 <__ieee754_sqrt+0xb8>
 80082be:	46a0      	mov	r8, r4
 80082c0:	1b1b      	subs	r3, r3, r4
 80082c2:	4561      	cmp	r1, ip
 80082c4:	bf88      	it	hi
 80082c6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80082ca:	ebac 0c01 	sub.w	ip, ip, r1
 80082ce:	4415      	add	r5, r2
 80082d0:	4644      	mov	r4, r8
 80082d2:	e7e2      	b.n	800829a <__ieee754_sqrt+0x7e>
 80082d4:	f1be 0f00 	cmp.w	lr, #0
 80082d8:	dbf1      	blt.n	80082be <__ieee754_sqrt+0xa2>
 80082da:	f104 0801 	add.w	r8, r4, #1
 80082de:	e7ef      	b.n	80082c0 <__ieee754_sqrt+0xa4>
 80082e0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80082e4:	4322      	orrs	r2, r4
 80082e6:	d035      	beq.n	8008354 <__ieee754_sqrt+0x138>
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	d14b      	bne.n	8008384 <__ieee754_sqrt+0x168>
 80082ec:	4628      	mov	r0, r5
 80082ee:	0aca      	lsrs	r2, r1, #11
 80082f0:	3815      	subs	r0, #21
 80082f2:	4613      	mov	r3, r2
 80082f4:	0549      	lsls	r1, r1, #21
 80082f6:	2a00      	cmp	r2, #0
 80082f8:	d0f9      	beq.n	80082ee <__ieee754_sqrt+0xd2>
 80082fa:	02d7      	lsls	r7, r2, #11
 80082fc:	d44f      	bmi.n	800839e <__ieee754_sqrt+0x182>
 80082fe:	2400      	movs	r4, #0
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	02de      	lsls	r6, r3, #11
 8008304:	4625      	mov	r5, r4
 8008306:	f104 0401 	add.w	r4, r4, #1
 800830a:	d5f9      	bpl.n	8008300 <__ieee754_sqrt+0xe4>
 800830c:	461a      	mov	r2, r3
 800830e:	460b      	mov	r3, r1
 8008310:	40a1      	lsls	r1, r4
 8008312:	f1c4 0420 	rsb	r4, r4, #32
 8008316:	40e3      	lsrs	r3, r4
 8008318:	1b40      	subs	r0, r0, r5
 800831a:	4313      	orrs	r3, r2
 800831c:	e78d      	b.n	800823a <__ieee754_sqrt+0x1e>
 800831e:	4561      	cmp	r1, ip
 8008320:	d8bb      	bhi.n	800829a <__ieee754_sqrt+0x7e>
 8008322:	2900      	cmp	r1, #0
 8008324:	eb01 0e02 	add.w	lr, r1, r2
 8008328:	dbd4      	blt.n	80082d4 <__ieee754_sqrt+0xb8>
 800832a:	4698      	mov	r8, r3
 800832c:	2300      	movs	r3, #0
 800832e:	e7cc      	b.n	80082ca <__ieee754_sqrt+0xae>
 8008330:	ea53 030c 	orrs.w	r3, r3, ip
 8008334:	d110      	bne.n	8008358 <__ieee754_sqrt+0x13c>
 8008336:	0868      	lsrs	r0, r5, #1
 8008338:	1071      	asrs	r1, r6, #1
 800833a:	07f3      	lsls	r3, r6, #31
 800833c:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 8008340:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8008344:	bf48      	it	mi
 8008346:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 800834a:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 800834e:	4602      	mov	r2, r0
 8008350:	ec43 2b10 	vmov	d0, r2, r3
 8008354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008358:	1c6a      	adds	r2, r5, #1
 800835a:	bf16      	itet	ne
 800835c:	1c68      	addne	r0, r5, #1
 800835e:	3601      	addeq	r6, #1
 8008360:	0840      	lsrne	r0, r0, #1
 8008362:	e7e9      	b.n	8008338 <__ieee754_sqrt+0x11c>
 8008364:	ee10 2a10 	vmov	r2, s0
 8008368:	ee10 0a10 	vmov	r0, s0
 800836c:	462b      	mov	r3, r5
 800836e:	4629      	mov	r1, r5
 8008370:	f7f8 f8c6 	bl	8000500 <__aeabi_dmul>
 8008374:	4622      	mov	r2, r4
 8008376:	462b      	mov	r3, r5
 8008378:	f7f7 ff0c 	bl	8000194 <__adddf3>
 800837c:	ec41 0b10 	vmov	d0, r0, r1
 8008380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008384:	ee10 2a10 	vmov	r2, s0
 8008388:	4620      	mov	r0, r4
 800838a:	4629      	mov	r1, r5
 800838c:	f7f7 ff00 	bl	8000190 <__aeabi_dsub>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	f7f8 f9de 	bl	8000754 <__aeabi_ddiv>
 8008398:	ec41 0b10 	vmov	d0, r0, r1
 800839c:	e7da      	b.n	8008354 <__ieee754_sqrt+0x138>
 800839e:	460b      	mov	r3, r1
 80083a0:	2420      	movs	r4, #32
 80083a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80083a6:	e7b6      	b.n	8008316 <__ieee754_sqrt+0xfa>
 80083a8:	7ff00000 	.word	0x7ff00000

080083ac <fabs>:
 80083ac:	ec51 0b10 	vmov	r0, r1, d0
 80083b0:	ee10 2a10 	vmov	r2, s0
 80083b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80083b8:	ec43 2b10 	vmov	d0, r2, r3
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop

080083c0 <finite>:
 80083c0:	b082      	sub	sp, #8
 80083c2:	ed8d 0b00 	vstr	d0, [sp]
 80083c6:	9801      	ldr	r0, [sp, #4]
 80083c8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80083cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80083d0:	0fc0      	lsrs	r0, r0, #31
 80083d2:	b002      	add	sp, #8
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop

080083d8 <rint>:
 80083d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083da:	ec53 2b10 	vmov	r2, r3, d0
 80083de:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 80083e2:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 80083e6:	2913      	cmp	r1, #19
 80083e8:	ee10 0a10 	vmov	r0, s0
 80083ec:	b083      	sub	sp, #12
 80083ee:	461c      	mov	r4, r3
 80083f0:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 80083f4:	dc3a      	bgt.n	800846c <rint+0x94>
 80083f6:	2900      	cmp	r1, #0
 80083f8:	db30      	blt.n	800845c <rint+0x84>
 80083fa:	4d42      	ldr	r5, [pc, #264]	; (8008504 <rint+0x12c>)
 80083fc:	fa45 fc01 	asr.w	ip, r5, r1
 8008400:	ea03 050c 	and.w	r5, r3, ip
 8008404:	4315      	orrs	r5, r2
 8008406:	d02d      	beq.n	8008464 <rint+0x8c>
 8008408:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 800840c:	4318      	orrs	r0, r3
 800840e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008412:	d00c      	beq.n	800842e <rint+0x56>
 8008414:	ea24 0c0c 	bic.w	ip, r4, ip
 8008418:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800841c:	2913      	cmp	r1, #19
 800841e:	fa44 f101 	asr.w	r1, r4, r1
 8008422:	bf0c      	ite	eq
 8008424:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 8008428:	2000      	movne	r0, #0
 800842a:	ea4c 0401 	orr.w	r4, ip, r1
 800842e:	4936      	ldr	r1, [pc, #216]	; (8008508 <rint+0x130>)
 8008430:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 8008434:	4623      	mov	r3, r4
 8008436:	e9de 4500 	ldrd	r4, r5, [lr]
 800843a:	4602      	mov	r2, r0
 800843c:	4629      	mov	r1, r5
 800843e:	4620      	mov	r0, r4
 8008440:	f7f7 fea8 	bl	8000194 <__adddf3>
 8008444:	e9cd 0100 	strd	r0, r1, [sp]
 8008448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800844c:	4622      	mov	r2, r4
 800844e:	462b      	mov	r3, r5
 8008450:	f7f7 fe9e 	bl	8000190 <__aeabi_dsub>
 8008454:	ec41 0b10 	vmov	d0, r0, r1
 8008458:	b003      	add	sp, #12
 800845a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800845c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008460:	4311      	orrs	r1, r2
 8008462:	d124      	bne.n	80084ae <rint+0xd6>
 8008464:	ec43 2b10 	vmov	d0, r2, r3
 8008468:	b003      	add	sp, #12
 800846a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800846c:	2933      	cmp	r1, #51	; 0x33
 800846e:	dd08      	ble.n	8008482 <rint+0xaa>
 8008470:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008474:	d1f6      	bne.n	8008464 <rint+0x8c>
 8008476:	4619      	mov	r1, r3
 8008478:	f7f7 fe8c 	bl	8000194 <__adddf3>
 800847c:	ec41 0b10 	vmov	d0, r0, r1
 8008480:	e7f2      	b.n	8008468 <rint+0x90>
 8008482:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8008486:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800848a:	fa21 f10c 	lsr.w	r1, r1, ip
 800848e:	420a      	tst	r2, r1
 8008490:	d0e8      	beq.n	8008464 <rint+0x8c>
 8008492:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8008496:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800849a:	d0c8      	beq.n	800842e <rint+0x56>
 800849c:	ea20 0303 	bic.w	r3, r0, r3
 80084a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80084a4:	fa40 fc0c 	asr.w	ip, r0, ip
 80084a8:	ea43 000c 	orr.w	r0, r3, ip
 80084ac:	e7bf      	b.n	800842e <rint+0x56>
 80084ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084b2:	4318      	orrs	r0, r3
 80084b4:	4a14      	ldr	r2, [pc, #80]	; (8008508 <rint+0x130>)
 80084b6:	4243      	negs	r3, r0
 80084b8:	4303      	orrs	r3, r0
 80084ba:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
 80084be:	0b1b      	lsrs	r3, r3, #12
 80084c0:	0c62      	lsrs	r2, r4, #17
 80084c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084c6:	0452      	lsls	r2, r2, #17
 80084c8:	ea43 0702 	orr.w	r7, r3, r2
 80084cc:	463b      	mov	r3, r7
 80084ce:	e9de 6700 	ldrd	r6, r7, [lr]
 80084d2:	ee10 2a10 	vmov	r2, s0
 80084d6:	4630      	mov	r0, r6
 80084d8:	4639      	mov	r1, r7
 80084da:	f7f7 fe5b 	bl	8000194 <__adddf3>
 80084de:	e9cd 0100 	strd	r0, r1, [sp]
 80084e2:	4632      	mov	r2, r6
 80084e4:	463b      	mov	r3, r7
 80084e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ea:	f7f7 fe51 	bl	8000190 <__aeabi_dsub>
 80084ee:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80084f2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80084f6:	4602      	mov	r2, r0
 80084f8:	ea41 0304 	orr.w	r3, r1, r4
 80084fc:	ec43 2b10 	vmov	d0, r2, r3
 8008500:	b003      	add	sp, #12
 8008502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008504:	000fffff 	.word	0x000fffff
 8008508:	0800a588 	.word	0x0800a588

0800850c <mavlink_update_checksum>:
	uint16_t checksum = msg->checksum;
 800850c:	8802      	ldrh	r2, [r0, #0]
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800850e:	4051      	eors	r1, r2
        tmp ^= (tmp<<4);
 8008510:	ea81 1101 	eor.w	r1, r1, r1, lsl #4
 8008514:	b2c9      	uxtb	r1, r1
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8008516:	090b      	lsrs	r3, r1, #4
 8008518:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 800851c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008520:	ea83 01c1 	eor.w	r1, r3, r1, lsl #3
	msg->checksum = checksum;
 8008524:	8001      	strh	r1, [r0, #0]
}
 8008526:	4770      	bx	lr

08008528 <_Z14handle_messageR17__mavlink_message>:
void handle_message(mavlink_message_t& msg) {
 8008528:	b530      	push	{r4, r5, lr}
	switch(msg.msgid) {
 800852a:	7a82      	ldrb	r2, [r0, #10]
 800852c:	7a43      	ldrb	r3, [r0, #9]
 800852e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008532:	7ac2      	ldrb	r2, [r0, #11]
 8008534:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008538:	2b18      	cmp	r3, #24
void handle_message(mavlink_message_t& msg) {
 800853a:	b08f      	sub	sp, #60	; 0x3c
 800853c:	4604      	mov	r4, r0
	switch(msg.msgid) {
 800853e:	d112      	bne.n	8008566 <_Z14handle_messageR17__mavlink_message+0x3e>
    gps_raw_int->v_acc = mavlink_msg_gps_raw_int_get_v_acc(msg);
    gps_raw_int->vel_acc = mavlink_msg_gps_raw_int_get_vel_acc(msg);
    gps_raw_int->hdg_acc = mavlink_msg_gps_raw_int_get_hdg_acc(msg);
    gps_raw_int->yaw = mavlink_msg_gps_raw_int_get_yaw(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_GPS_RAW_INT_LEN? msg->len : MAVLINK_MSG_ID_GPS_RAW_INT_LEN;
 8008540:	78c5      	ldrb	r5, [r0, #3]
 8008542:	2d34      	cmp	r5, #52	; 0x34
 8008544:	bf28      	it	cs
 8008546:	2534      	movcs	r5, #52	; 0x34
        memset(gps_raw_int, 0, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
 8008548:	2234      	movs	r2, #52	; 0x34
 800854a:	2100      	movs	r1, #0
 800854c:	a801      	add	r0, sp, #4
 800854e:	f001 fd84 	bl	800a05a <memset>
    memcpy(gps_raw_int, _MAV_PAYLOAD(msg), len);
 8008552:	f104 010c 	add.w	r1, r4, #12
 8008556:	462a      	mov	r2, r5
 8008558:	a801      	add	r0, sp, #4
 800855a:	f001 fd70 	bl	800a03e <memcpy>
		handle_gps_raw_int(msg.sysid, gps_raw_int);
 800855e:	79e0      	ldrb	r0, [r4, #7]
 8008560:	a901      	add	r1, sp, #4
 8008562:	f7f8 fe79 	bl	8001258 <_Z18handle_gps_raw_inthR23__mavlink_gps_raw_int_t>
}
 8008566:	b00f      	add	sp, #60	; 0x3c
 8008568:	bd30      	pop	{r4, r5, pc}

0800856a <arch_printk_char_out>:
}
 800856a:	2000      	movs	r0, #0
 800856c:	4770      	bx	lr

0800856e <str_out>:
{
 800856e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8008570:	688a      	ldr	r2, [r1, #8]
 8008572:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 8008574:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8008576:	b114      	cbz	r4, 800857e <str_out+0x10>
 8008578:	684b      	ldr	r3, [r1, #4]
 800857a:	4293      	cmp	r3, r2
 800857c:	dc01      	bgt.n	8008582 <str_out+0x14>
		ctx->count++;
 800857e:	608d      	str	r5, [r1, #8]
}
 8008580:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 8008582:	3b01      	subs	r3, #1
 8008584:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 8008586:	bf08      	it	eq
 8008588:	2200      	moveq	r2, #0
 800858a:	608d      	str	r5, [r1, #8]
 800858c:	bf0c      	ite	eq
 800858e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 8008590:	54a0      	strbne	r0, [r4, r2]
 8008592:	e7f5      	b.n	8008580 <str_out+0x12>

08008594 <printk>:
{
 8008594:	b40f      	push	{r0, r1, r2, r3}
 8008596:	b507      	push	{r0, r1, r2, lr}
 8008598:	a904      	add	r1, sp, #16
 800859a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800859e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 80085a0:	f7fc fbca 	bl	8004d38 <vprintk>
}
 80085a4:	b003      	add	sp, #12
 80085a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80085aa:	b004      	add	sp, #16
 80085ac:	4770      	bx	lr

080085ae <snprintk>:
{
 80085ae:	b40c      	push	{r2, r3}
 80085b0:	b507      	push	{r0, r1, r2, lr}
 80085b2:	ab04      	add	r3, sp, #16
 80085b4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 80085b8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 80085ba:	f7fc fbcb 	bl	8004d54 <vsnprintk>
}
 80085be:	b003      	add	sp, #12
 80085c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085c4:	b002      	add	sp, #8
 80085c6:	4770      	bx	lr

080085c8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80085c8:	4604      	mov	r4, r0
 80085ca:	b508      	push	{r3, lr}
 80085cc:	4608      	mov	r0, r1
 80085ce:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 80085d0:	461a      	mov	r2, r3
 80085d2:	47a0      	blx	r4
	return z_impl_k_current_get();
 80085d4:	f7ff fb4c 	bl	8007c70 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 80085d8:	f7fe f960 	bl	800689c <z_impl_k_thread_abort>

080085dc <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 80085dc:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 80085de:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 80085e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 80085e6:	bf2c      	ite	cs
 80085e8:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 80085ec:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 80085f0:	4770      	bx	lr

080085f2 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 80085f2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 80085f6:	6880      	ldr	r0, [r0, #8]
 80085f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 80085fc:	bf2c      	ite	cs
 80085fe:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 8008602:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 8008606:	4770      	bx	lr

08008608 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
 8008608:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800860a:	2201      	movs	r2, #1
 800860c:	f7ff ffe6 	bl	80085dc <chunk_field>
}
 8008610:	40d0      	lsrs	r0, r2
 8008612:	bd08      	pop	{r3, pc}

08008614 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8008614:	6883      	ldr	r3, [r0, #8]
 8008616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
 800861a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 800861e:	d308      	bcc.n	8008632 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 8008620:	684b      	ldr	r3, [r1, #4]
		if (used) {
 8008622:	b11a      	cbz	r2, 800862c <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 8008624:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8008628:	604b      	str	r3, [r1, #4]
 800862a:	4770      	bx	lr
 800862c:	f023 0301 	bic.w	r3, r3, #1
 8008630:	e7fa      	b.n	8008628 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8008632:	884b      	ldrh	r3, [r1, #2]
		if (used) {
 8008634:	b11a      	cbz	r2, 800863e <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8008636:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 800863a:	804b      	strh	r3, [r1, #2]
		}
	}
}
 800863c:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 800863e:	f023 0301 	bic.w	r3, r3, #1
 8008642:	e7fa      	b.n	800863a <set_chunk_used+0x26>

08008644 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8008644:	0053      	lsls	r3, r2, #1
 8008646:	2201      	movs	r2, #1
 8008648:	f7ff bfd3 	b.w	80085f2 <chunk_set>

0800864c <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 800864c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008650:	bf2c      	ite	cs
 8008652:	2008      	movcs	r0, #8
 8008654:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8008656:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8008658:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800865a:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
 800865e:	fab0 f080 	clz	r0, r0
}
 8008662:	f1c0 001f 	rsb	r0, r0, #31
 8008666:	4770      	bx	lr

08008668 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 8008668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800866c:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
 800866e:	2203      	movs	r2, #3
 8008670:	460e      	mov	r6, r1
 8008672:	4604      	mov	r4, r0
 8008674:	f7ff ffb2 	bl	80085dc <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
 8008678:	4286      	cmp	r6, r0
 800867a:	4605      	mov	r5, r0
 800867c:	f107 0804 	add.w	r8, r7, #4
 8008680:	d10b      	bne.n	800869a <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
 8008682:	2301      	movs	r3, #1
 8008684:	fa03 f707 	lsl.w	r7, r3, r7
 8008688:	68e3      	ldr	r3, [r4, #12]
 800868a:	ea23 0307 	bic.w	r3, r3, r7
 800868e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
 8008690:	2300      	movs	r3, #0
 8008692:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
 8008696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
 800869a:	4631      	mov	r1, r6
 800869c:	2202      	movs	r2, #2
 800869e:	4620      	mov	r0, r4
 80086a0:	f7ff ff9c 	bl	80085dc <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
 80086a4:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
 80086a6:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
 80086a8:	4601      	mov	r1, r0
		b->next = second;
 80086aa:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
 80086ae:	4620      	mov	r0, r4
 80086b0:	2203      	movs	r2, #3
 80086b2:	f7ff ff9e 	bl	80085f2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 80086b6:	4633      	mov	r3, r6
 80086b8:	4629      	mov	r1, r5
 80086ba:	4620      	mov	r0, r4
 80086bc:	2202      	movs	r2, #2
}
 80086be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086c2:	f7ff bf96 	b.w	80085f2 <chunk_set>

080086c6 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
 80086c6:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
 80086c8:	6886      	ldr	r6, [r0, #8]
 80086ca:	460d      	mov	r5, r1
 80086cc:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 80086ce:	f7ff ff9b 	bl	8008608 <chunk_size>
 80086d2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80086d6:	4601      	mov	r1, r0
 80086d8:	d301      	bcc.n	80086de <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
 80086da:	2801      	cmp	r0, #1
 80086dc:	d009      	beq.n	80086f2 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
 80086de:	4630      	mov	r0, r6
 80086e0:	f7ff ffb4 	bl	800864c <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
 80086e4:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
 80086e6:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
 80086e8:	4620      	mov	r0, r4
	}
}
 80086ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
 80086ee:	f7ff bfbb 	b.w	8008668 <free_list_remove_bidx>
}
 80086f2:	bd70      	pop	{r4, r5, r6, pc}

080086f4 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
 80086f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086f8:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
 80086fa:	6880      	ldr	r0, [r0, #8]
{
 80086fc:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
 80086fe:	f7ff ffa5 	bl	800864c <bucket_idx.isra.0>
 8008702:	eb04 0980 	add.w	r9, r4, r0, lsl #2
 8008706:	4605      	mov	r5, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 8008708:	f8d9 8010 	ldr.w	r8, [r9, #16]
 800870c:	f1b8 0f00 	cmp.w	r8, #0
 8008710:	d01c      	beq.n	800874c <alloc_chunk+0x58>
 8008712:	2603      	movs	r6, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
 8008714:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
 8008718:	9101      	str	r1, [sp, #4]
 800871a:	4620      	mov	r0, r4
 800871c:	f7ff ff74 	bl	8008608 <chunk_size>
 8008720:	42b8      	cmp	r0, r7
 8008722:	9901      	ldr	r1, [sp, #4]
 8008724:	d308      	bcc.n	8008738 <alloc_chunk+0x44>
				free_list_remove_bidx(h, c, bi);
 8008726:	462a      	mov	r2, r5

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
 8008728:	4620      	mov	r0, r4
 800872a:	f7ff ff9d 	bl	8008668 <free_list_remove_bidx>
 800872e:	9901      	ldr	r1, [sp, #4]
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 8008730:	4608      	mov	r0, r1
 8008732:	b003      	add	sp, #12
 8008734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return chunk_field(h, c, FREE_NEXT);
 8008738:	2203      	movs	r2, #3
 800873a:	4620      	mov	r0, r4
 800873c:	f7ff ff4e 	bl	80085dc <chunk_field>
		} while (--i && b->next != first);
 8008740:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
 8008742:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
 8008746:	d001      	beq.n	800874c <alloc_chunk+0x58>
 8008748:	4580      	cmp	r8, r0
 800874a:	d1e3      	bne.n	8008714 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
 800874c:	68e3      	ldr	r3, [r4, #12]
 800874e:	3501      	adds	r5, #1
 8008750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008754:	40a9      	lsls	r1, r5
	if (bmask != 0U) {
 8008756:	4019      	ands	r1, r3
 8008758:	d0ea      	beq.n	8008730 <alloc_chunk+0x3c>
		int minbucket = __builtin_ctz(bmask);
 800875a:	fa91 f2a1 	rbit	r2, r1
 800875e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 8008762:	1d13      	adds	r3, r2, #4
 8008764:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 8008768:	9101      	str	r1, [sp, #4]
 800876a:	e7dd      	b.n	8008728 <alloc_chunk+0x34>

0800876c <split_chunks>:
{
 800876c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800876e:	4614      	mov	r4, r2
 8008770:	4605      	mov	r5, r0
 8008772:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
 8008774:	f7ff ff48 	bl	8008608 <chunk_size>
	chunksz_t lsz = rc - lc;
 8008778:	1ba3      	subs	r3, r4, r6
	chunksz_t rsz = sz0 - lsz;
 800877a:	1b32      	subs	r2, r6, r4
 800877c:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
 800877e:	4631      	mov	r1, r6
 8008780:	461a      	mov	r2, r3
 8008782:	4628      	mov	r0, r5
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	f7ff ff5d 	bl	8008644 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
 800878a:	463a      	mov	r2, r7
 800878c:	4621      	mov	r1, r4
 800878e:	4628      	mov	r0, r5
 8008790:	f7ff ff58 	bl	8008644 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8008794:	9b01      	ldr	r3, [sp, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	4621      	mov	r1, r4
 800879a:	4628      	mov	r0, r5
 800879c:	f7ff ff29 	bl	80085f2 <chunk_set>
	return c + chunk_size(h, c);
 80087a0:	4621      	mov	r1, r4
 80087a2:	4628      	mov	r0, r5
 80087a4:	f7ff ff30 	bl	8008608 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 80087a8:	463b      	mov	r3, r7
 80087aa:	1821      	adds	r1, r4, r0
 80087ac:	2200      	movs	r2, #0
 80087ae:	4628      	mov	r0, r5
}
 80087b0:	b003      	add	sp, #12
 80087b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80087b6:	f7ff bf1c 	b.w	80085f2 <chunk_set>

080087ba <merge_chunks>:
{
 80087ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087bc:	4616      	mov	r6, r2
 80087be:	4604      	mov	r4, r0
 80087c0:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 80087c2:	f7ff ff21 	bl	8008608 <chunk_size>
 80087c6:	4631      	mov	r1, r6
 80087c8:	4605      	mov	r5, r0
 80087ca:	4620      	mov	r0, r4
 80087cc:	f7ff ff1c 	bl	8008608 <chunk_size>
 80087d0:	182b      	adds	r3, r5, r0
	set_chunk_size(h, lc, newsz);
 80087d2:	461a      	mov	r2, r3
 80087d4:	4639      	mov	r1, r7
 80087d6:	4620      	mov	r0, r4
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	f7ff ff33 	bl	8008644 <set_chunk_size>
	return c + chunk_size(h, c);
 80087de:	4631      	mov	r1, r6
 80087e0:	4620      	mov	r0, r4
 80087e2:	f7ff ff11 	bl	8008608 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	1831      	adds	r1, r6, r0
 80087ea:	2200      	movs	r2, #0
 80087ec:	4620      	mov	r0, r4
}
 80087ee:	b003      	add	sp, #12
 80087f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80087f4:	f7ff befd 	b.w	80085f2 <chunk_set>

080087f8 <free_list_add>:
{
 80087f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
 80087fc:	6886      	ldr	r6, [r0, #8]
 80087fe:	460d      	mov	r5, r1
 8008800:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 8008802:	f7ff ff01 	bl	8008608 <chunk_size>
 8008806:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800880a:	4601      	mov	r1, r0
 800880c:	d301      	bcc.n	8008812 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 800880e:	2801      	cmp	r0, #1
 8008810:	d033      	beq.n	800887a <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
 8008812:	4630      	mov	r0, r6
 8008814:	f7ff ff1a 	bl	800864c <bucket_idx.isra.0>
	if (b->next == 0U) {
 8008818:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 800881c:	6916      	ldr	r6, [r2, #16]
 800881e:	b99e      	cbnz	r6, 8008848 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 8008820:	2301      	movs	r3, #1
 8008822:	fa03 f000 	lsl.w	r0, r3, r0
 8008826:	68e3      	ldr	r3, [r4, #12]
 8008828:	4303      	orrs	r3, r0
 800882a:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
 800882c:	4629      	mov	r1, r5
		b->next = c;
 800882e:	6115      	str	r5, [r2, #16]
 8008830:	462b      	mov	r3, r5
 8008832:	2202      	movs	r2, #2
 8008834:	4620      	mov	r0, r4
 8008836:	f7ff fedc 	bl	80085f2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 800883a:	2203      	movs	r2, #3
 800883c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 800883e:	4620      	mov	r0, r4
}
 8008840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008844:	f7ff bed5 	b.w	80085f2 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 8008848:	2202      	movs	r2, #2
 800884a:	4631      	mov	r1, r6
 800884c:	4620      	mov	r0, r4
 800884e:	f7ff fec5 	bl	80085dc <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 8008852:	4629      	mov	r1, r5
 8008854:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 8008856:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 8008858:	4620      	mov	r0, r4
 800885a:	f7ff feca 	bl	80085f2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 800885e:	2203      	movs	r2, #3
 8008860:	4633      	mov	r3, r6
 8008862:	4629      	mov	r1, r5
 8008864:	4620      	mov	r0, r4
 8008866:	f7ff fec4 	bl	80085f2 <chunk_set>
 800886a:	4639      	mov	r1, r7
 800886c:	462b      	mov	r3, r5
 800886e:	4620      	mov	r0, r4
 8008870:	f7ff febf 	bl	80085f2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8008874:	2202      	movs	r2, #2
 8008876:	4631      	mov	r1, r6
 8008878:	e7e1      	b.n	800883e <free_list_add+0x46>
 800887a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800887e <free_chunk>:
{
 800887e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008880:	4605      	mov	r5, r0
 8008882:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
 8008884:	f7ff fec0 	bl	8008608 <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8008888:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
 800888a:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 800888c:	4628      	mov	r0, r5
 800888e:	9101      	str	r1, [sp, #4]
 8008890:	f7ff fea4 	bl	80085dc <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
 8008894:	f010 0f01 	tst.w	r0, #1
 8008898:	9901      	ldr	r1, [sp, #4]
 800889a:	d10b      	bne.n	80088b4 <free_chunk+0x36>
		free_list_remove(h, right_chunk(h, c));
 800889c:	4628      	mov	r0, r5
 800889e:	f7ff ff12 	bl	80086c6 <free_list_remove>
	return c + chunk_size(h, c);
 80088a2:	4621      	mov	r1, r4
 80088a4:	4628      	mov	r0, r5
 80088a6:	f7ff feaf 	bl	8008608 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
 80088aa:	4621      	mov	r1, r4
 80088ac:	1822      	adds	r2, r4, r0
 80088ae:	4628      	mov	r0, r5
 80088b0:	f7ff ff83 	bl	80087ba <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
 80088b4:	2200      	movs	r2, #0
 80088b6:	4621      	mov	r1, r4
 80088b8:	4628      	mov	r0, r5
 80088ba:	f7ff fe8f 	bl	80085dc <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 80088be:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
 80088c0:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 80088c2:	4628      	mov	r0, r5
 80088c4:	9101      	str	r1, [sp, #4]
 80088c6:	f7ff fe89 	bl	80085dc <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
 80088ca:	ea10 0602 	ands.w	r6, r0, r2
 80088ce:	9901      	ldr	r1, [sp, #4]
 80088d0:	d112      	bne.n	80088f8 <free_chunk+0x7a>
		free_list_remove(h, left_chunk(h, c));
 80088d2:	4628      	mov	r0, r5
 80088d4:	f7ff fef7 	bl	80086c6 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
 80088d8:	4621      	mov	r1, r4
 80088da:	4632      	mov	r2, r6
 80088dc:	4628      	mov	r0, r5
 80088de:	f7ff fe7d 	bl	80085dc <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
 80088e2:	4622      	mov	r2, r4
 80088e4:	1a21      	subs	r1, r4, r0
 80088e6:	4628      	mov	r0, r5
 80088e8:	f7ff ff67 	bl	80087ba <merge_chunks>
 80088ec:	4621      	mov	r1, r4
 80088ee:	4632      	mov	r2, r6
 80088f0:	4628      	mov	r0, r5
 80088f2:	f7ff fe73 	bl	80085dc <chunk_field>
 80088f6:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
 80088f8:	4621      	mov	r1, r4
 80088fa:	4628      	mov	r0, r5
}
 80088fc:	b002      	add	sp, #8
 80088fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
 8008902:	f7ff bf79 	b.w	80087f8 <free_list_add>

08008906 <sys_heap_free>:
{
 8008906:	b507      	push	{r0, r1, r2, lr}
	if (mem == NULL) {
 8008908:	b199      	cbz	r1, 8008932 <sys_heap_free+0x2c>
 800890a:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
 800890c:	6883      	ldr	r3, [r0, #8]
 800890e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008912:	bf2c      	ite	cs
 8008914:	2308      	movcs	r3, #8
 8008916:	2304      	movcc	r3, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8008918:	1ac9      	subs	r1, r1, r3
 800891a:	1a09      	subs	r1, r1, r0
 800891c:	08c9      	lsrs	r1, r1, #3
	set_chunk_used(h, c, false);
 800891e:	2200      	movs	r2, #0
 8008920:	9101      	str	r1, [sp, #4]
 8008922:	f7ff fe77 	bl	8008614 <set_chunk_used>
	free_chunk(h, c);
 8008926:	9901      	ldr	r1, [sp, #4]
}
 8008928:	b003      	add	sp, #12
 800892a:	f85d eb04 	ldr.w	lr, [sp], #4
	free_chunk(h, c);
 800892e:	f7ff bfa6 	b.w	800887e <free_chunk>
}
 8008932:	b003      	add	sp, #12
 8008934:	f85d fb04 	ldr.w	pc, [sp], #4

08008938 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
 8008938:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 800893a:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
 800893c:	b909      	cbnz	r1, 8008942 <sys_heap_alloc+0xa>
		return NULL;
 800893e:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
 8008940:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
 8008942:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
 8008944:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8008948:	d9f9      	bls.n	800893e <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
 800894a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800894e:	bf2c      	ite	cs
 8008950:	2208      	movcs	r2, #8
 8008952:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8008954:	1dcc      	adds	r4, r1, #7
 8008956:	4414      	add	r4, r2
 8008958:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
 800895a:	4621      	mov	r1, r4
 800895c:	4630      	mov	r0, r6
 800895e:	f7ff fec9 	bl	80086f4 <alloc_chunk>
	if (c == 0U) {
 8008962:	4605      	mov	r5, r0
 8008964:	2800      	cmp	r0, #0
 8008966:	d0ea      	beq.n	800893e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
 8008968:	4601      	mov	r1, r0
 800896a:	4630      	mov	r0, r6
 800896c:	f7ff fe4c 	bl	8008608 <chunk_size>
 8008970:	42a0      	cmp	r0, r4
 8008972:	d909      	bls.n	8008988 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
 8008974:	442c      	add	r4, r5
 8008976:	4629      	mov	r1, r5
 8008978:	4630      	mov	r0, r6
 800897a:	4622      	mov	r2, r4
 800897c:	f7ff fef6 	bl	800876c <split_chunks>
		free_list_add(h, c + chunk_sz);
 8008980:	4621      	mov	r1, r4
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff ff38 	bl	80087f8 <free_list_add>
	set_chunk_used(h, c, true);
 8008988:	4629      	mov	r1, r5
 800898a:	4630      	mov	r0, r6
 800898c:	2201      	movs	r2, #1
 800898e:	f7ff fe41 	bl	8008614 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
 8008992:	68b3      	ldr	r3, [r6, #8]
 8008994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008998:	bf2c      	ite	cs
 800899a:	2308      	movcs	r3, #8
 800899c:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 800899e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80089a2:	4428      	add	r0, r5
	return chunk_mem(h, c);
 80089a4:	e7cc      	b.n	8008940 <sys_heap_alloc+0x8>

080089a6 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 80089a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
 80089aa:	424b      	negs	r3, r1
	struct z_heap *h = heap->heap;
 80089ac:	6806      	ldr	r6, [r0, #0]
	rew = align & -align;
 80089ae:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
 80089b2:	ea31 0303 	bics.w	r3, r1, r3
{
 80089b6:	4614      	mov	r4, r2
	return big_heap_chunks(h->end_chunk);
 80089b8:	68b2      	ldr	r2, [r6, #8]
	if (align != rew) {
 80089ba:	d00e      	beq.n	80089da <sys_heap_aligned_alloc+0x34>
	return big_heap(h) ? 8 : 4;
 80089bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80089c0:	bf2c      	ite	cs
 80089c2:	2308      	movcs	r3, #8
 80089c4:	2304      	movcc	r3, #4
 80089c6:	42bb      	cmp	r3, r7
 80089c8:	bf28      	it	cs
 80089ca:	463b      	movcs	r3, r7
 80089cc:	46b9      	mov	r9, r7
		align -= rew;
 80089ce:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
 80089d0:	b994      	cbnz	r4, 80089f8 <sys_heap_aligned_alloc+0x52>
		return NULL;
 80089d2:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
 80089d4:	4628      	mov	r0, r5
 80089d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089da:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80089de:	bf34      	ite	cc
 80089e0:	2304      	movcc	r3, #4
 80089e2:	2308      	movcs	r3, #8
		if (align <= chunk_header_bytes(h)) {
 80089e4:	4299      	cmp	r1, r3
 80089e6:	d804      	bhi.n	80089f2 <sys_heap_aligned_alloc+0x4c>
			return sys_heap_alloc(heap, bytes);
 80089e8:	4621      	mov	r1, r4
}
 80089ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
 80089ee:	f7ff bfa3 	b.w	8008938 <sys_heap_alloc>
		rew = 0;
 80089f2:	f04f 0900 	mov.w	r9, #0
 80089f6:	e7eb      	b.n	80089d0 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
 80089f8:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
 80089fc:	d9e9      	bls.n	80089d2 <sys_heap_aligned_alloc+0x2c>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
 80089fe:	1de1      	adds	r1, r4, #7
 8008a00:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008a04:	4439      	add	r1, r7
 8008a06:	bf2c      	ite	cs
 8008a08:	2208      	movcs	r2, #8
 8008a0a:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8008a0c:	1ac9      	subs	r1, r1, r3
 8008a0e:	4411      	add	r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 8008a10:	08c9      	lsrs	r1, r1, #3
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7ff fe6e 	bl	80086f4 <alloc_chunk>
	if (c0 == 0) {
 8008a18:	4680      	mov	r8, r0
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d0d9      	beq.n	80089d2 <sys_heap_aligned_alloc+0x2c>
	return big_heap(h) ? 8 : 4;
 8008a1e:	68b3      	ldr	r3, [r6, #8]
 8008a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a24:	bf2c      	ite	cs
 8008a26:	2308      	movcs	r3, #8
 8008a28:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 8008a2a:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
 8008a2e:	441d      	add	r5, r3
 8008a30:	1e7a      	subs	r2, r7, #1
 8008a32:	4435      	add	r5, r6
 8008a34:	427f      	negs	r7, r7
 8008a36:	4415      	add	r5, r2
 8008a38:	403d      	ands	r5, r7
 8008a3a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 8008a3e:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8008a40:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 8008a42:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8008a44:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 8008a46:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
 8008a4a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
 8008a4c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8008a50:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
 8008a54:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
 8008a58:	d208      	bcs.n	8008a6c <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
 8008a5a:	4601      	mov	r1, r0
 8008a5c:	463a      	mov	r2, r7
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f7ff fe84 	bl	800876c <split_chunks>
		free_list_add(h, c0);
 8008a64:	4641      	mov	r1, r8
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7ff fec6 	bl	80087f8 <free_list_add>
	return c + chunk_size(h, c);
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f7ff fdca 	bl	8008608 <chunk_size>
 8008a74:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
 8008a76:	4284      	cmp	r4, r0
 8008a78:	d208      	bcs.n	8008a8c <sys_heap_aligned_alloc+0xe6>
		split_chunks(h, c, c_end);
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	4622      	mov	r2, r4
 8008a80:	f7ff fe74 	bl	800876c <split_chunks>
		free_list_add(h, c_end);
 8008a84:	4621      	mov	r1, r4
 8008a86:	4630      	mov	r0, r6
 8008a88:	f7ff feb6 	bl	80087f8 <free_list_add>
	set_chunk_used(h, c, true);
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	4639      	mov	r1, r7
 8008a90:	4630      	mov	r0, r6
 8008a92:	f7ff fdbf 	bl	8008614 <set_chunk_used>
	return mem;
 8008a96:	e79d      	b.n	80089d4 <sys_heap_aligned_alloc+0x2e>

08008a98 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 8008a98:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	bf2c      	ite	cs
 8008aa0:	2408      	movcs	r4, #8
 8008aa2:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8008aa4:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8008aa6:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8008aa8:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8008aaa:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8008aae:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8008ab2:	1ba4      	subs	r4, r4, r6
 8008ab4:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 8008ab6:	2300      	movs	r3, #0
	heap->heap = h;
 8008ab8:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8008aba:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
 8008abc:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
 8008abe:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f7ff fdc3 	bl	800864c <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8008ac6:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8008ac8:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8008aca:	1c41      	adds	r1, r0, #1
 8008acc:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8008ace:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
 8008ad2:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
 8008ad4:	428b      	cmp	r3, r1
 8008ad6:	db2e      	blt.n	8008b36 <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 8008ad8:	462a      	mov	r2, r5
 8008ada:	4630      	mov	r0, r6
 8008adc:	2100      	movs	r1, #0
 8008ade:	f7ff fdb1 	bl	8008644 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff fd82 	bl	80085f2 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8008aee:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
 8008af0:	4619      	mov	r1, r3
 8008af2:	4630      	mov	r0, r6
 8008af4:	2201      	movs	r2, #1
 8008af6:	f7ff fd8d 	bl	8008614 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8008afa:	463a      	mov	r2, r7
 8008afc:	4629      	mov	r1, r5
 8008afe:	f7ff fda1 	bl	8008644 <set_chunk_size>
 8008b02:	462b      	mov	r3, r5
 8008b04:	2200      	movs	r2, #0
 8008b06:	4629      	mov	r1, r5
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f7ff fd72 	bl	80085f2 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
 8008b0e:	4621      	mov	r1, r4
 8008b10:	4630      	mov	r0, r6
 8008b12:	f7ff fd97 	bl	8008644 <set_chunk_size>
 8008b16:	463b      	mov	r3, r7
 8008b18:	4621      	mov	r1, r4
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f7ff fd68 	bl	80085f2 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
 8008b22:	4621      	mov	r1, r4
 8008b24:	4630      	mov	r0, r6
 8008b26:	2201      	movs	r2, #1
 8008b28:	f7ff fd74 	bl	8008614 <set_chunk_used>

	free_list_add(h, chunk0_size);
 8008b2c:	4629      	mov	r1, r5
}
 8008b2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 8008b32:	f7ff be61 	b.w	80087f8 <free_list_add>
		h->buckets[i].next = 0;
 8008b36:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	e7ca      	b.n	8008ad4 <sys_heap_init+0x3c>

08008b3e <_ldiv5>:
	uint32_t v_lo = *v;
 8008b3e:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 8008b42:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 8008b44:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 8008b48:	fba2 2403 	umull	r2, r4, r2, r3
 8008b4c:	18d5      	adds	r5, r2, r3
 8008b4e:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 8008b52:	fba1 1303 	umull	r1, r3, r1, r3
 8008b56:	1852      	adds	r2, r2, r1
 8008b58:	eb44 0403 	adc.w	r4, r4, r3
 8008b5c:	1952      	adds	r2, r2, r5
 8008b5e:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 8008b62:	1889      	adds	r1, r1, r2
 8008b64:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 8008b68:	e9c0 1300 	strd	r1, r3, [r0]
}
 8008b6c:	bd30      	pop	{r4, r5, pc}

08008b6e <_get_digit>:
	if (*digit_count > 0) {
 8008b6e:	680b      	ldr	r3, [r1, #0]
 8008b70:	2b00      	cmp	r3, #0
{
 8008b72:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
 8008b74:	dd10      	ble.n	8008b98 <_get_digit+0x2a>
		--*digit_count;
 8008b76:	3b01      	subs	r3, #1
 8008b78:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
 8008b7a:	6803      	ldr	r3, [r0, #0]
 8008b7c:	6844      	ldr	r4, [r0, #4]
 8008b7e:	220a      	movs	r2, #10
 8008b80:	fba3 1302 	umull	r1, r3, r3, r2
 8008b84:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
 8008b88:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
 8008b8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b8e:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
 8008b92:	3230      	adds	r2, #48	; 0x30
}
 8008b94:	4610      	mov	r0, r2
 8008b96:	bd10      	pop	{r4, pc}
		rval = '0';
 8008b98:	2230      	movs	r2, #48	; 0x30
 8008b9a:	e7fb      	b.n	8008b94 <_get_digit+0x26>

08008b9c <outs>:
{
 8008b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	4689      	mov	r9, r1
 8008ba4:	4616      	mov	r6, r2
 8008ba6:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8008ba8:	4615      	mov	r5, r2
 8008baa:	42bd      	cmp	r5, r7
 8008bac:	eba5 0406 	sub.w	r4, r5, r6
 8008bb0:	d305      	bcc.n	8008bbe <outs+0x22>
 8008bb2:	b10f      	cbz	r7, 8008bb8 <outs+0x1c>
	return (int)count;
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	e008      	b.n	8008bca <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8008bb8:	782b      	ldrb	r3, [r5, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0fa      	beq.n	8008bb4 <outs+0x18>
		int rc = out((int)*sp++, ctx);
 8008bbe:	f815 0b01 	ldrb.w	r0, [r5], #1
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	47c0      	blx	r8
		if (rc < 0) {
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	daef      	bge.n	8008baa <outs+0xe>
}
 8008bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008bce <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8008bce:	4770      	bx	lr

08008bd0 <st_stm32_common_config>:
	/* Enable the SWO pin */
	DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN;
#endif

	return 0;
}
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	4770      	bx	lr

08008bd4 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 8008bd4:	2300      	movs	r3, #0
	list->head = NULL;
 8008bd6:	e9c0 3300 	strd	r3, r3, [r0]
}
 8008bda:	4770      	bx	lr

08008bdc <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 8008bdc:	6803      	ldr	r3, [r0, #0]
 8008bde:	b923      	cbnz	r3, 8008bea <log_list_add_tail+0xe>
		list->head = msg;
 8008be0:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
 8008be2:	2300      	movs	r3, #0
	list->tail = msg;
 8008be4:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 8008be6:	600b      	str	r3, [r1, #0]
}
 8008be8:	4770      	bx	lr
		list->tail->next = msg;
 8008bea:	6843      	ldr	r3, [r0, #4]
 8008bec:	6019      	str	r1, [r3, #0]
 8008bee:	e7f8      	b.n	8008be2 <log_list_add_tail+0x6>

08008bf0 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 8008bf0:	6800      	ldr	r0, [r0, #0]
 8008bf2:	4770      	bx	lr

08008bf4 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
 8008bf4:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
 8008bf6:	b10b      	cbz	r3, 8008bfc <log_list_head_get+0x8>
		list->head = list->head->next;
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	4770      	bx	lr

08008c00 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
 8008c00:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8008c02:	f7fc fc2f 	bl	8005464 <log_msg_chunk_alloc>

	if (msg != NULL) {
 8008c06:	b118      	cbz	r0, 8008c10 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
 8008c10:	bd08      	pop	{r3, pc}

08008c12 <default_lf_get_timestamp>:
{
 8008c12:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8008c14:	f001 f924 	bl	8009e60 <z_impl_k_uptime_ticks>
 8008c18:	220a      	movs	r2, #10
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f7f7 fed2 	bl	80009c4 <__aeabi_uldivmod>
}
 8008c20:	bd08      	pop	{r3, pc}

08008c22 <dummy_timestamp>:
 8008c22:	2000      	movs	r0, #0
 8008c24:	4770      	bx	lr

08008c26 <log_0>:
{
 8008c26:	b513      	push	{r0, r1, r4, lr}
 8008c28:	4604      	mov	r4, r0
 8008c2a:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
 8008c2c:	f7ff ffe8 	bl	8008c00 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8008c30:	b130      	cbz	r0, 8008c40 <log_0+0x1a>
		msg_finalize(msg, src_level);
 8008c32:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
 8008c34:	6104      	str	r4, [r0, #16]
}
 8008c36:	b002      	add	sp, #8
 8008c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
 8008c3c:	f7fc bb50 	b.w	80052e0 <msg_finalize>
}
 8008c40:	b002      	add	sp, #8
 8008c42:	bd10      	pop	{r4, pc}

08008c44 <log_1>:
{
 8008c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c46:	460c      	mov	r4, r1
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8008c4e:	f7ff ffd7 	bl	8008c00 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8008c52:	b160      	cbz	r0, 8008c6e <log_1+0x2a>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
 8008c54:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
 8008c56:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
 8008c58:	2501      	movs	r5, #1
 8008c5a:	f365 1207 	bfi	r2, r5, #4, #4
 8008c5e:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
 8008c60:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
 8008c62:	6144      	str	r4, [r0, #20]
}
 8008c64:	b003      	add	sp, #12
 8008c66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
 8008c6a:	f7fc bb39 	b.w	80052e0 <msg_finalize>
}
 8008c6e:	b003      	add	sp, #12
 8008c70:	bd30      	pop	{r4, r5, pc}

08008c72 <log_2>:
{
 8008c72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c74:	460e      	mov	r6, r1
 8008c76:	4619      	mov	r1, r3
 8008c78:	4607      	mov	r7, r0
 8008c7a:	4615      	mov	r5, r2
 8008c7c:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8008c7e:	f7ff ffbf 	bl	8008c00 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8008c82:	b168      	cbz	r0, 8008ca0 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
 8008c84:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 8008c86:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
 8008c88:	2202      	movs	r2, #2
 8008c8a:	f362 1307 	bfi	r3, r2, #4, #4
 8008c8e:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 8008c90:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
 8008c92:	e9c0 6505 	strd	r6, r5, [r0, #20]
}
 8008c96:	b003      	add	sp, #12
 8008c98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
 8008c9c:	f7fc bb20 	b.w	80052e0 <msg_finalize>
}
 8008ca0:	b003      	add	sp, #12
 8008ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ca4 <log_3>:
{
 8008ca4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008ca8:	460f      	mov	r7, r1
 8008caa:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8008cae:	9101      	str	r1, [sp, #4]
 8008cb0:	4680      	mov	r8, r0
 8008cb2:	4616      	mov	r6, r2
 8008cb4:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8008cb6:	f7ff ffa3 	bl	8008c00 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8008cba:	b178      	cbz	r0, 8008cdc <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
 8008cbc:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 8008cbe:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
 8008cc2:	2203      	movs	r2, #3
 8008cc4:	f362 1307 	bfi	r3, r2, #4, #4
 8008cc8:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 8008cca:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
 8008ccc:	61c5      	str	r5, [r0, #28]
		msg->payload.single.args[1] = arg2;
 8008cce:	e9c0 7605 	strd	r7, r6, [r0, #20]
}
 8008cd2:	b002      	add	sp, #8
 8008cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
 8008cd8:	f7fc bb02 	b.w	80052e0 <msg_finalize>
}
 8008cdc:	b002      	add	sp, #8
 8008cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008ce2 <log_n>:
{
 8008ce2:	b510      	push	{r4, lr}
 8008ce4:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
 8008ce6:	f000 f8a1 	bl	8008e2c <log_msg_create_n>
		if (msg == NULL) {
 8008cea:	b120      	cbz	r0, 8008cf6 <log_n+0x14>
		msg_finalize(msg, src_level);
 8008cec:	4621      	mov	r1, r4
}
 8008cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
 8008cf2:	f7fc baf5 	b.w	80052e0 <msg_finalize>
}
 8008cf6:	bd10      	pop	{r4, pc}

08008cf8 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 8008cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cfc:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
 8008cfe:	8903      	ldrh	r3, [r0, #8]
{
 8008d00:	f89d 7020 	ldrb.w	r7, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 8008d04:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 8008d08:	42a3      	cmp	r3, r4
{
 8008d0a:	460e      	mov	r6, r1
	if (offset >= available_len) {
 8008d0c:	d803      	bhi.n	8008d16 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 8008d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
 8008d16:	6811      	ldr	r1, [r2, #0]
 8008d18:	4421      	add	r1, r4
 8008d1a:	4299      	cmp	r1, r3
		*length = available_len - offset;
 8008d1c:	bf84      	itt	hi
 8008d1e:	1b19      	subhi	r1, r3, r4
 8008d20:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8008d22:	2b0c      	cmp	r3, #12
	req_len = *length;
 8008d24:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8008d28:	d92b      	bls.n	8008d82 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
 8008d2a:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
 8008d2c:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
 8008d30:	d82e      	bhi.n	8008d90 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
 8008d32:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 8008d34:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8008d36:	454b      	cmp	r3, r9
 8008d38:	bf28      	it	cs
 8008d3a:	464b      	movcs	r3, r9
 8008d3c:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
 8008d3e:	4420      	add	r0, r4
 8008d40:	461a      	mov	r2, r3
		if (put_op) {
 8008d42:	b317      	cbz	r7, 8008d8a <log_msg_hexdump_data_op+0x92>
 8008d44:	4631      	mov	r1, r6
 8008d46:	f001 f97a 	bl	800a03e <memcpy>
		req_len -= cpy_len;
 8008d4a:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
 8008d4e:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
 8008d50:	f1b9 0f00 	cmp.w	r9, #0
 8008d54:	d0dd      	beq.n	8008d12 <log_msg_hexdump_data_op+0x1a>
 8008d56:	f1b8 0f00 	cmp.w	r8, #0
 8008d5a:	d0da      	beq.n	8008d12 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 8008d5c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8008d60:	454d      	cmp	r5, r9
 8008d62:	bf28      	it	cs
 8008d64:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
 8008d66:	1d20      	adds	r0, r4, #4
 8008d68:	4440      	add	r0, r8
 8008d6a:	462a      	mov	r2, r5
		if (put_op) {
 8008d6c:	b1bf      	cbz	r7, 8008d9e <log_msg_hexdump_data_op+0xa6>
 8008d6e:	4631      	mov	r1, r6
 8008d70:	f001 f965 	bl	800a03e <memcpy>
		req_len -= cpy_len;
 8008d74:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
 8008d78:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
 8008d7c:	442e      	add	r6, r5
		offset = 0;
 8008d7e:	2400      	movs	r4, #0
 8008d80:	e7e6      	b.n	8008d50 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
 8008d82:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
 8008d84:	f04f 0800 	mov.w	r8, #0
 8008d88:	e7d5      	b.n	8008d36 <log_msg_hexdump_data_op+0x3e>
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	e7da      	b.n	8008d46 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 8008d90:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
 8008d92:	2c1b      	cmp	r4, #27
 8008d94:	d9dc      	bls.n	8008d50 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
 8008d96:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
 8008d9a:	3c1c      	subs	r4, #28
 8008d9c:	e7f9      	b.n	8008d92 <log_msg_hexdump_data_op+0x9a>
 8008d9e:	4601      	mov	r1, r0
 8008da0:	4630      	mov	r0, r6
 8008da2:	e7e5      	b.n	8008d70 <log_msg_hexdump_data_op+0x78>

08008da4 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8008da4:	3004      	adds	r0, #4
 8008da6:	f3bf 8f5b 	dmb	ish
 8008daa:	e850 3f00 	ldrex	r3, [r0]
 8008dae:	3301      	adds	r3, #1
 8008db0:	e840 3200 	strex	r2, r3, [r0]
 8008db4:	2a00      	cmp	r2, #0
 8008db6:	d1f8      	bne.n	8008daa <log_msg_get+0x6>
 8008db8:	f3bf 8f5b 	dmb	ish
}
 8008dbc:	4770      	bx	lr

08008dbe <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 8008dbe:	7a40      	ldrb	r0, [r0, #9]
}
 8008dc0:	0900      	lsrs	r0, r0, #4
 8008dc2:	4770      	bx	lr

08008dc4 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
 8008dc4:	7a43      	ldrb	r3, [r0, #9]
 8008dc6:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 8008dca:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8008dce:	d216      	bcs.n	8008dfe <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8008dd0:	2a03      	cmp	r2, #3
 8008dd2:	d803      	bhi.n	8008ddc <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
 8008dd4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008dd8:	6940      	ldr	r0, [r0, #20]
 8008dda:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 8008ddc:	2901      	cmp	r1, #1
 8008dde:	d803      	bhi.n	8008de8 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
 8008de0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008de4:	6980      	ldr	r0, [r0, #24]
 8008de6:	4770      	bx	lr
	cont = msg->payload.ext.next;
 8008de8:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 8008dea:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
 8008dec:	2906      	cmp	r1, #6
 8008dee:	d803      	bhi.n	8008df8 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
 8008df0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008df4:	6848      	ldr	r0, [r1, #4]
 8008df6:	4770      	bx	lr
		cont = cont->next;
 8008df8:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
 8008dfa:	3907      	subs	r1, #7
		cont = cont->next;
 8008dfc:	e7f6      	b.n	8008dec <log_msg_arg_get+0x28>
		return 0;
 8008dfe:	2000      	movs	r0, #0
}
 8008e00:	4770      	bx	lr

08008e02 <log_msg_put>:
{
 8008e02:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8008e04:	1d02      	adds	r2, r0, #4
 8008e06:	f3bf 8f5b 	dmb	ish
 8008e0a:	e852 1f00 	ldrex	r1, [r2]
 8008e0e:	3901      	subs	r1, #1
 8008e10:	e842 1c00 	strex	ip, r1, [r2]
 8008e14:	f1bc 0f00 	cmp.w	ip, #0
 8008e18:	d1f7      	bne.n	8008e0a <log_msg_put+0x8>
 8008e1a:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	b90b      	cbnz	r3, 8008e26 <log_msg_put+0x24>
		msg_free(msg);
 8008e22:	f7fc bb33 	b.w	800548c <msg_free>
}
 8008e26:	4770      	bx	lr

08008e28 <log_msg_str_get>:
}
 8008e28:	6900      	ldr	r0, [r0, #16]
 8008e2a:	4770      	bx	lr

08008e2c <log_msg_create_n>:
{
 8008e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e30:	4680      	mov	r8, r0
 8008e32:	460f      	mov	r7, r1
 8008e34:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8008e36:	f7fc fb15 	bl	8005464 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	b358      	cbz	r0, 8008e96 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
 8008e3e:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
 8008e40:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8008e44:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
 8008e46:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8008e48:	f8a0 a008 	strh.w	sl, [r0, #8]
 8008e4c:	d90c      	bls.n	8008e68 <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
 8008e4e:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
 8008e50:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
 8008e54:	f043 0302 	orr.w	r3, r3, #2
 8008e58:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
 8008e5a:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
 8008e5e:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
 8008e62:	f1b9 0f00 	cmp.w	r9, #0
 8008e66:	dc0e      	bgt.n	8008e86 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
 8008e68:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
 8008e6a:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
 8008e6e:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8008e72:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
 8008e74:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8008e76:	d819      	bhi.n	8008eac <log_msg_create_n+0x80>
 8008e78:	00aa      	lsls	r2, r5, #2
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	f104 0014 	add.w	r0, r4, #20
 8008e80:	f001 f8dd 	bl	800a03e <memcpy>
	while (nargs != 0U) {
 8008e84:	e007      	b.n	8008e96 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
 8008e86:	f7fc faed 	bl	8005464 <log_msg_chunk_alloc>
		if (cont == NULL) {
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	b930      	cbnz	r0, 8008e9c <log_msg_create_n+0x70>
			msg_free(msg);
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7fc fafc 	bl	800548c <msg_free>
			return NULL;
 8008e94:	4634      	mov	r4, r6
}
 8008e96:	4620      	mov	r0, r4
 8008e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
 8008e9c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
 8008ea0:	f1a9 0907 	sub.w	r9, r9, #7
 8008ea4:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
 8008ea8:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
 8008eaa:	e7da      	b.n	8008e62 <log_msg_create_n+0x36>
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	61a3      	str	r3, [r4, #24]
 8008eb0:	687b      	ldr	r3, [r7, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
 8008eb2:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8008eb6:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
 8008eb8:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
 8008eba:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
 8008ebc:	2d07      	cmp	r5, #7
 8008ebe:	462e      	mov	r6, r5
 8008ec0:	bf28      	it	cs
 8008ec2:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
 8008ec4:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8008ec8:	4639      	mov	r1, r7
 8008eca:	f108 0004 	add.w	r0, r8, #4
 8008ece:	464a      	mov	r2, r9
 8008ed0:	f001 f8b5 	bl	800a03e <memcpy>
	while (nargs != 0U) {
 8008ed4:	1bad      	subs	r5, r5, r6
		cont = cont->next;
 8008ed6:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
 8008eda:	444f      	add	r7, r9
	while (nargs != 0U) {
 8008edc:	d1ee      	bne.n	8008ebc <log_msg_create_n+0x90>
 8008ede:	e7da      	b.n	8008e96 <log_msg_create_n+0x6a>

08008ee0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 8008ee0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 8008ee2:	2400      	movs	r4, #0
 8008ee4:	9400      	str	r4, [sp, #0]
 8008ee6:	f7ff ff07 	bl	8008cf8 <log_msg_hexdump_data_op>
}
 8008eea:	b002      	add	sp, #8
 8008eec:	bd10      	pop	{r4, pc}

08008eee <buffer_write>:
{
 8008eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef0:	4606      	mov	r6, r0
 8008ef2:	460d      	mov	r5, r1
 8008ef4:	4614      	mov	r4, r2
 8008ef6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 8008ef8:	4621      	mov	r1, r4
 8008efa:	4628      	mov	r0, r5
 8008efc:	463a      	mov	r2, r7
 8008efe:	47b0      	blx	r6
	} while (len != 0);
 8008f00:	1a24      	subs	r4, r4, r0
		buf += processed;
 8008f02:	4405      	add	r5, r0
	} while (len != 0);
 8008f04:	d1f8      	bne.n	8008ef8 <buffer_write+0xa>
}
 8008f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f08 <std_print>:
{
 8008f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f0c:	b08e      	sub	sp, #56	; 0x38
 8008f0e:	af0e      	add	r7, sp, #56	; 0x38
 8008f10:	4680      	mov	r8, r0
 8008f12:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
 8008f14:	f7ff ff88 	bl	8008e28 <log_msg_str_get>
 8008f18:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 8008f1a:	4640      	mov	r0, r8
 8008f1c:	f7ff ff4f 	bl	8008dbe <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 8008f20:	0083      	lsls	r3, r0, #2
 8008f22:	3307      	adds	r3, #7
 8008f24:	f023 0307 	bic.w	r3, r3, #7
 8008f28:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
 8008f2c:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 8008f2e:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 8008f30:	f04f 0900 	mov.w	r9, #0
 8008f34:	45d1      	cmp	r9, sl
 8008f36:	d116      	bne.n	8008f66 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
 8008f38:	4640      	mov	r0, r8
 8008f3a:	f7ff ff40 	bl	8008dbe <log_msg_nargs_get>
 8008f3e:	280f      	cmp	r0, #15
 8008f40:	d81e      	bhi.n	8008f80 <std_print+0x78>
 8008f42:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008f46:	0019      	.short	0x0019
 8008f48:	00260020 	.word	0x00260020
 8008f4c:	0036002d 	.word	0x0036002d
 8008f50:	004e0041 	.word	0x004e0041
 8008f54:	006e005d 	.word	0x006e005d
 8008f58:	00960081 	.word	0x00960081
 8008f5c:	00c600ad 	.word	0x00c600ad
 8008f60:	00fe00e1 	.word	0x00fe00e1
 8008f64:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
 8008f66:	4649      	mov	r1, r9
 8008f68:	4640      	mov	r0, r8
 8008f6a:	f7ff ff2b 	bl	8008dc4 <log_msg_arg_get>
 8008f6e:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
 8008f72:	f109 0901 	add.w	r9, r9, #1
 8008f76:	e7dd      	b.n	8008f34 <std_print+0x2c>
		print_formatted(output, str);
 8008f78:	4631      	mov	r1, r6
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f7fc fac4 	bl	8005508 <print_formatted>
}
 8008f80:	46bd      	mov	sp, r7
 8008f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
 8008f86:	6822      	ldr	r2, [r4, #0]
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f7fc fabc 	bl	8005508 <print_formatted>
		break;
 8008f90:	e7f6      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
 8008f92:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f96:	4631      	mov	r1, r6
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f7fc fab5 	bl	8005508 <print_formatted>
		break;
 8008f9e:	e7ef      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
 8008fa0:	68a3      	ldr	r3, [r4, #8]
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4628      	mov	r0, r5
 8008fac:	f7fc faac 	bl	8005508 <print_formatted>
		break;
 8008fb0:	e7e6      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8008fb2:	68e3      	ldr	r3, [r4, #12]
 8008fb4:	9301      	str	r3, [sp, #4]
 8008fb6:	68a3      	ldr	r3, [r4, #8]
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	f7fc faa1 	bl	8005508 <print_formatted>
		break;
 8008fc6:	e7db      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8008fc8:	6923      	ldr	r3, [r4, #16]
 8008fca:	9302      	str	r3, [sp, #8]
 8008fcc:	68e3      	ldr	r3, [r4, #12]
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	68a3      	ldr	r3, [r4, #8]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f7fc fa94 	bl	8005508 <print_formatted>
		break;
 8008fe0:	e7ce      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8008fe2:	6963      	ldr	r3, [r4, #20]
 8008fe4:	9303      	str	r3, [sp, #12]
 8008fe6:	6923      	ldr	r3, [r4, #16]
 8008fe8:	9302      	str	r3, [sp, #8]
 8008fea:	68e3      	ldr	r3, [r4, #12]
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	68a3      	ldr	r3, [r4, #8]
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f7fc fa85 	bl	8005508 <print_formatted>
		break;
 8008ffe:	e7bf      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009000:	69a3      	ldr	r3, [r4, #24]
 8009002:	9304      	str	r3, [sp, #16]
 8009004:	6963      	ldr	r3, [r4, #20]
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	6923      	ldr	r3, [r4, #16]
 800900a:	9302      	str	r3, [sp, #8]
 800900c:	68e3      	ldr	r3, [r4, #12]
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	68a3      	ldr	r3, [r4, #8]
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009018:	4631      	mov	r1, r6
 800901a:	4628      	mov	r0, r5
 800901c:	f7fc fa74 	bl	8005508 <print_formatted>
		break;
 8009020:	e7ae      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009022:	69e3      	ldr	r3, [r4, #28]
 8009024:	9305      	str	r3, [sp, #20]
 8009026:	69a3      	ldr	r3, [r4, #24]
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	6963      	ldr	r3, [r4, #20]
 800902c:	9303      	str	r3, [sp, #12]
 800902e:	6923      	ldr	r3, [r4, #16]
 8009030:	9302      	str	r3, [sp, #8]
 8009032:	68e3      	ldr	r3, [r4, #12]
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	68a3      	ldr	r3, [r4, #8]
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800903e:	4631      	mov	r1, r6
 8009040:	4628      	mov	r0, r5
 8009042:	f7fc fa61 	bl	8005508 <print_formatted>
		break;
 8009046:	e79b      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009048:	6a23      	ldr	r3, [r4, #32]
 800904a:	9306      	str	r3, [sp, #24]
 800904c:	69e3      	ldr	r3, [r4, #28]
 800904e:	9305      	str	r3, [sp, #20]
 8009050:	69a3      	ldr	r3, [r4, #24]
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	6963      	ldr	r3, [r4, #20]
 8009056:	9303      	str	r3, [sp, #12]
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	9302      	str	r3, [sp, #8]
 800905c:	68e3      	ldr	r3, [r4, #12]
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	68a3      	ldr	r3, [r4, #8]
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009068:	4631      	mov	r1, r6
 800906a:	4628      	mov	r0, r5
 800906c:	f7fc fa4c 	bl	8005508 <print_formatted>
		break;
 8009070:	e786      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009074:	9307      	str	r3, [sp, #28]
 8009076:	6a23      	ldr	r3, [r4, #32]
 8009078:	9306      	str	r3, [sp, #24]
 800907a:	69e3      	ldr	r3, [r4, #28]
 800907c:	9305      	str	r3, [sp, #20]
 800907e:	69a3      	ldr	r3, [r4, #24]
 8009080:	9304      	str	r3, [sp, #16]
 8009082:	6963      	ldr	r3, [r4, #20]
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	6923      	ldr	r3, [r4, #16]
 8009088:	9302      	str	r3, [sp, #8]
 800908a:	68e3      	ldr	r3, [r4, #12]
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009096:	4631      	mov	r1, r6
 8009098:	4628      	mov	r0, r5
 800909a:	f7fc fa35 	bl	8005508 <print_formatted>
		break;
 800909e:	e76f      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80090a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80090a2:	9308      	str	r3, [sp, #32]
 80090a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090a6:	9307      	str	r3, [sp, #28]
 80090a8:	6a23      	ldr	r3, [r4, #32]
 80090aa:	9306      	str	r3, [sp, #24]
 80090ac:	69e3      	ldr	r3, [r4, #28]
 80090ae:	9305      	str	r3, [sp, #20]
 80090b0:	69a3      	ldr	r3, [r4, #24]
 80090b2:	9304      	str	r3, [sp, #16]
 80090b4:	6963      	ldr	r3, [r4, #20]
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	9302      	str	r3, [sp, #8]
 80090bc:	68e3      	ldr	r3, [r4, #12]
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	68a3      	ldr	r3, [r4, #8]
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80090c8:	4631      	mov	r1, r6
 80090ca:	4628      	mov	r0, r5
 80090cc:	f7fc fa1c 	bl	8005508 <print_formatted>
		break;
 80090d0:	e756      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80090d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80090d4:	9309      	str	r3, [sp, #36]	; 0x24
 80090d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80090d8:	9308      	str	r3, [sp, #32]
 80090da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090dc:	9307      	str	r3, [sp, #28]
 80090de:	6a23      	ldr	r3, [r4, #32]
 80090e0:	9306      	str	r3, [sp, #24]
 80090e2:	69e3      	ldr	r3, [r4, #28]
 80090e4:	9305      	str	r3, [sp, #20]
 80090e6:	69a3      	ldr	r3, [r4, #24]
 80090e8:	9304      	str	r3, [sp, #16]
 80090ea:	6963      	ldr	r3, [r4, #20]
 80090ec:	9303      	str	r3, [sp, #12]
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	9302      	str	r3, [sp, #8]
 80090f2:	68e3      	ldr	r3, [r4, #12]
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	68a3      	ldr	r3, [r4, #8]
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80090fe:	4631      	mov	r1, r6
 8009100:	4628      	mov	r0, r5
 8009102:	f7fc fa01 	bl	8005508 <print_formatted>
		break;
 8009106:	e73b      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009108:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800910a:	930a      	str	r3, [sp, #40]	; 0x28
 800910c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800910e:	9309      	str	r3, [sp, #36]	; 0x24
 8009110:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009112:	9308      	str	r3, [sp, #32]
 8009114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009116:	9307      	str	r3, [sp, #28]
 8009118:	6a23      	ldr	r3, [r4, #32]
 800911a:	9306      	str	r3, [sp, #24]
 800911c:	69e3      	ldr	r3, [r4, #28]
 800911e:	9305      	str	r3, [sp, #20]
 8009120:	69a3      	ldr	r3, [r4, #24]
 8009122:	9304      	str	r3, [sp, #16]
 8009124:	6963      	ldr	r3, [r4, #20]
 8009126:	9303      	str	r3, [sp, #12]
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	9302      	str	r3, [sp, #8]
 800912c:	68e3      	ldr	r3, [r4, #12]
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	68a3      	ldr	r3, [r4, #8]
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009138:	4631      	mov	r1, r6
 800913a:	4628      	mov	r0, r5
 800913c:	f7fc f9e4 	bl	8005508 <print_formatted>
		break;
 8009140:	e71e      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009144:	930b      	str	r3, [sp, #44]	; 0x2c
 8009146:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009148:	930a      	str	r3, [sp, #40]	; 0x28
 800914a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800914c:	9309      	str	r3, [sp, #36]	; 0x24
 800914e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009150:	9308      	str	r3, [sp, #32]
 8009152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009154:	9307      	str	r3, [sp, #28]
 8009156:	6a23      	ldr	r3, [r4, #32]
 8009158:	9306      	str	r3, [sp, #24]
 800915a:	69e3      	ldr	r3, [r4, #28]
 800915c:	9305      	str	r3, [sp, #20]
 800915e:	69a3      	ldr	r3, [r4, #24]
 8009160:	9304      	str	r3, [sp, #16]
 8009162:	6963      	ldr	r3, [r4, #20]
 8009164:	9303      	str	r3, [sp, #12]
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	9302      	str	r3, [sp, #8]
 800916a:	68e3      	ldr	r3, [r4, #12]
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	68a3      	ldr	r3, [r4, #8]
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009176:	4631      	mov	r1, r6
 8009178:	4628      	mov	r0, r5
 800917a:	f7fc f9c5 	bl	8005508 <print_formatted>
		break;
 800917e:	e6ff      	b.n	8008f80 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009182:	930c      	str	r3, [sp, #48]	; 0x30
 8009184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009186:	930b      	str	r3, [sp, #44]	; 0x2c
 8009188:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800918a:	930a      	str	r3, [sp, #40]	; 0x28
 800918c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800918e:	9309      	str	r3, [sp, #36]	; 0x24
 8009190:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009192:	9308      	str	r3, [sp, #32]
 8009194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009196:	9307      	str	r3, [sp, #28]
 8009198:	6a23      	ldr	r3, [r4, #32]
 800919a:	9306      	str	r3, [sp, #24]
 800919c:	69e3      	ldr	r3, [r4, #28]
 800919e:	9305      	str	r3, [sp, #20]
 80091a0:	69a3      	ldr	r3, [r4, #24]
 80091a2:	9304      	str	r3, [sp, #16]
 80091a4:	6963      	ldr	r3, [r4, #20]
 80091a6:	9303      	str	r3, [sp, #12]
 80091a8:	6923      	ldr	r3, [r4, #16]
 80091aa:	9302      	str	r3, [sp, #8]
 80091ac:	68e3      	ldr	r3, [r4, #12]
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	68a3      	ldr	r3, [r4, #8]
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091b8:	4631      	mov	r1, r6
 80091ba:	4628      	mov	r0, r5
 80091bc:	f7fc f9a4 	bl	8005508 <print_formatted>
}
 80091c0:	e6de      	b.n	8008f80 <std_print+0x78>

080091c2 <log_output_flush>:
		     output->control_block->offset,
 80091c2:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 80091c4:	6881      	ldr	r1, [r0, #8]
{
 80091c6:	b510      	push	{r4, lr}
 80091c8:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 80091ca:	e9d2 2300 	ldrd	r2, r3, [r2]
 80091ce:	6800      	ldr	r0, [r0, #0]
 80091d0:	f7ff fe8d 	bl	8008eee <buffer_write>
	output->control_block->offset = 0;
 80091d4:	6863      	ldr	r3, [r4, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	601a      	str	r2, [r3, #0]
}
 80091da:	bd10      	pop	{r4, pc}

080091dc <out_func>:
{
 80091dc:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 80091de:	684b      	ldr	r3, [r1, #4]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68cb      	ldr	r3, [r1, #12]
 80091e4:	429a      	cmp	r2, r3
{
 80091e6:	4605      	mov	r5, r0
 80091e8:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 80091ea:	d102      	bne.n	80091f2 <out_func+0x16>
		log_output_flush(out_ctx);
 80091ec:	4608      	mov	r0, r1
 80091ee:	f7ff ffe8 	bl	80091c2 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80091f2:	6863      	ldr	r3, [r4, #4]
 80091f4:	f3bf 8f5b 	dmb	ish
 80091f8:	e853 2f00 	ldrex	r2, [r3]
 80091fc:	1c51      	adds	r1, r2, #1
 80091fe:	e843 1000 	strex	r0, r1, [r3]
 8009202:	2800      	cmp	r0, #0
 8009204:	d1f8      	bne.n	80091f8 <out_func+0x1c>
 8009206:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800920a:	68a3      	ldr	r3, [r4, #8]
 800920c:	549d      	strb	r5, [r3, r2]
}
 800920e:	2000      	movs	r0, #0
 8009210:	bd38      	pop	{r3, r4, r5, pc}

08009212 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
 8009212:	6883      	ldr	r3, [r0, #8]
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	b103      	cbz	r3, 800921a <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
 8009218:	4718      	bx	r3
}
 800921a:	4770      	bx	lr

0800921c <tty_putchar>:
{
 800921c:	b570      	push	{r4, r5, r6, lr}
 800921e:	4604      	mov	r4, r0
 8009220:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
 8009222:	f100 0624 	add.w	r6, r0, #36	; 0x24
			 k_is_in_isr() ? K_NO_WAIT :
 8009226:	f000 fc60 	bl	8009aea <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
 800922a:	bb20      	cbnz	r0, 8009276 <tty_putchar+0x5a>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
 800922c:	6c22      	ldr	r2, [r4, #64]	; 0x40
	res = k_sem_take(&tty->tx_sem,
 800922e:	1c53      	adds	r3, r2, #1
 8009230:	d022      	beq.n	8009278 <tty_putchar+0x5c>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
 8009232:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			return t * (to_hz / from_hz);
 8009236:	230a      	movs	r3, #10
 8009238:	fb82 2303 	smull	r2, r3, r2, r3
	return z_impl_k_sem_take(sem, timeout);
 800923c:	4630      	mov	r0, r6
 800923e:	f7fe fa51 	bl	80076e4 <z_impl_k_sem_take>
	if (res < 0) {
 8009242:	2800      	cmp	r0, #0
 8009244:	db16      	blt.n	8009274 <tty_putchar+0x58>
	__asm__ volatile(
 8009246:	f04f 0310 	mov.w	r3, #16
 800924a:	f3ef 8211 	mrs	r2, BASEPRI
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
 8009256:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
	if (tx_next >= tty->tx_ringbuf_sz) {
 8009258:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	tx_next = tty->tx_put + 1;
 800925a:	1c4b      	adds	r3, r1, #1
		tx_next = 0;
 800925c:	4298      	cmp	r0, r3
 800925e:	bf98      	it	ls
 8009260:	2300      	movls	r3, #0
	if (tx_next == tty->tx_get) {
 8009262:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8009264:	4298      	cmp	r0, r3
 8009266:	d109      	bne.n	800927c <tty_putchar+0x60>
	__asm__ volatile(
 8009268:	f382 8811 	msr	BASEPRI, r2
 800926c:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
 8009270:	f06f 001b 	mvn.w	r0, #27
}
 8009274:	bd70      	pop	{r4, r5, r6, pc}
	res = k_sem_take(&tty->tx_sem,
 8009276:	2200      	movs	r2, #0
 8009278:	4613      	mov	r3, r2
 800927a:	e7df      	b.n	800923c <tty_putchar+0x20>
	tty->tx_ringbuf[tty->tx_put] = c;
 800927c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800927e:	5445      	strb	r5, [r0, r1]
	tty->tx_put = tx_next;
 8009280:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009282:	f382 8811 	msr	BASEPRI, r2
 8009286:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
 800928a:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_enable != NULL) {
 800928c:	6883      	ldr	r3, [r0, #8]
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	b113      	cbz	r3, 8009298 <tty_putchar+0x7c>
		api->irq_tx_enable(dev);
 8009292:	4798      	blx	r3
	return 0;
 8009294:	2000      	movs	r0, #0
 8009296:	e7ed      	b.n	8009274 <tty_putchar+0x58>
 8009298:	4618      	mov	r0, r3
 800929a:	e7eb      	b.n	8009274 <tty_putchar+0x58>

0800929c <tty_uart_isr>:
{
 800929c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800929e:	4605      	mov	r5, r0
 80092a0:	460c      	mov	r4, r1
	if (api->irq_update == NULL) {
 80092a2:	6883      	ldr	r3, [r0, #8]
 80092a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a6:	b103      	cbz	r3, 80092aa <tty_uart_isr+0xe>
	return api->irq_update(dev);
 80092a8:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
 80092aa:	68ab      	ldr	r3, [r5, #8]
 80092ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ae:	b9bb      	cbnz	r3, 80092e0 <tty_uart_isr+0x44>
	k_sem_give(&tty->rx_sem);
 80092b0:	1d26      	adds	r6, r4, #4
	if (api->fifo_read != NULL) {
 80092b2:	68ab      	ldr	r3, [r5, #8]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	b1bb      	cbz	r3, 80092e8 <tty_uart_isr+0x4c>
		return api->fifo_read(dev, rx_data, size);
 80092b8:	2201      	movs	r2, #1
 80092ba:	f10d 0107 	add.w	r1, sp, #7
 80092be:	4628      	mov	r0, r5
 80092c0:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
 80092c2:	b188      	cbz	r0, 80092e8 <tty_uart_isr+0x4c>
	int rx_next = tty->rx_put + 1;
 80092c4:	8be2      	ldrh	r2, [r4, #30]
	if (rx_next >= tty->rx_ringbuf_sz) {
 80092c6:	69a1      	ldr	r1, [r4, #24]
	int rx_next = tty->rx_put + 1;
 80092c8:	1c53      	adds	r3, r2, #1
		rx_next = 0;
 80092ca:	4299      	cmp	r1, r3
 80092cc:	bf98      	it	ls
 80092ce:	2300      	movls	r3, #0
	if (rx_next == tty->rx_get) {
 80092d0:	8ba1      	ldrh	r1, [r4, #28]
 80092d2:	4299      	cmp	r1, r3
 80092d4:	d118      	bne.n	8009308 <tty_uart_isr+0x6c>
		tty_putchar(tty, '~');
 80092d6:	217e      	movs	r1, #126	; 0x7e
 80092d8:	4620      	mov	r0, r4
 80092da:	f7ff ff9f 	bl	800921c <tty_putchar>
		return 1;
 80092de:	e7e8      	b.n	80092b2 <tty_uart_isr+0x16>
	return api->irq_rx_ready(dev);
 80092e0:	4628      	mov	r0, r5
 80092e2:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d1e3      	bne.n	80092b0 <tty_uart_isr+0x14>
	if (api->irq_tx_ready != NULL) {
 80092e8:	68ab      	ldr	r3, [r5, #8]
 80092ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ec:	b363      	cbz	r3, 8009348 <tty_uart_isr+0xac>
		return api->irq_tx_ready(dev);
 80092ee:	4628      	mov	r0, r5
 80092f0:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
 80092f2:	b348      	cbz	r0, 8009348 <tty_uart_isr+0xac>
		if (tty->tx_get == tty->tx_put) {
 80092f4:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80092f6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d10e      	bne.n	800931a <tty_uart_isr+0x7e>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
 80092fc:	4628      	mov	r0, r5
}
 80092fe:	b002      	add	sp, #8
 8009300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009304:	f7ff bf85 	b.w	8009212 <z_impl_uart_irq_tx_disable>
	tty->rx_ringbuf[tty->rx_put] = c;
 8009308:	6961      	ldr	r1, [r4, #20]
			tty_irq_input_hook(tty, c);
 800930a:	f89d 0007 	ldrb.w	r0, [sp, #7]
	tty->rx_ringbuf[tty->rx_put] = c;
 800930e:	5488      	strb	r0, [r1, r2]
	tty->rx_put = rx_next;
 8009310:	83e3      	strh	r3, [r4, #30]
	z_impl_k_sem_give(sem);
 8009312:	4630      	mov	r0, r6
 8009314:	f7fe f9c6 	bl	80076a4 <z_impl_k_sem_give>
}
 8009318:	e7cb      	b.n	80092b2 <tty_uart_isr+0x16>
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	87a2      	strh	r2, [r4, #60]	; 0x3c
	if (api->fifo_fill != NULL) {
 800931e:	68aa      	ldr	r2, [r5, #8]
 8009320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009322:	6956      	ldr	r6, [r2, #20]
 8009324:	b11e      	cbz	r6, 800932e <tty_uart_isr+0x92>
		return api->fifo_fill(dev, tx_data, size);
 8009326:	2201      	movs	r2, #1
 8009328:	4419      	add	r1, r3
 800932a:	4628      	mov	r0, r5
 800932c:	47b0      	blx	r6
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
 800932e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009330:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8009332:	429a      	cmp	r2, r3
				tty->tx_get = 0U;
 8009334:	bf24      	itt	cs
 8009336:	2300      	movcs	r3, #0
 8009338:	87a3      	strhcs	r3, [r4, #60]	; 0x3c
	z_impl_k_sem_give(sem);
 800933a:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
 800933e:	b002      	add	sp, #8
 8009340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009344:	f7fe b9ae 	b.w	80076a4 <z_impl_k_sem_give>
 8009348:	b002      	add	sp, #8
 800934a:	bd70      	pop	{r4, r5, r6, pc}

0800934c <tty_read>:
{
 800934c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (tty->rx_ringbuf_sz == 0U) {
 8009350:	6984      	ldr	r4, [r0, #24]
{
 8009352:	4606      	mov	r6, r0
 8009354:	460d      	mov	r5, r1
 8009356:	4617      	mov	r7, r2
	if (tty->rx_ringbuf_sz == 0U) {
 8009358:	b14c      	cbz	r4, 800936e <tty_read+0x22>
 800935a:	440f      	add	r7, r1
	uint8_t *p = buf;
 800935c:	4688      	mov	r8, r1
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
 800935e:	f100 0a04 	add.w	sl, r0, #4
	while (size--) {
 8009362:	45b8      	cmp	r8, r7
 8009364:	eba8 0905 	sub.w	r9, r8, r5
 8009368:	d137      	bne.n	80093da <tty_read+0x8e>
	return out_size;
 800936a:	464c      	mov	r4, r9
 800936c:	e013      	b.n	8009396 <tty_read+0x4a>
	uint32_t timeout = tty->rx_timeout;
 800936e:	f8d0 9020 	ldr.w	r9, [r0, #32]
	while (size) {
 8009372:	b187      	cbz	r7, 8009396 <tty_read+0x4a>
		res = uart_poll_in(tty->uart_dev, &c);
 8009374:	6830      	ldr	r0, [r6, #0]
	return api->poll_in(dev, p_char);
 8009376:	6883      	ldr	r3, [r0, #8]
 8009378:	f10d 0107 	add.w	r1, sp, #7
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4798      	blx	r3
		if (res <= -2) {
 8009380:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009384:	4680      	mov	r8, r0
 8009386:	da0a      	bge.n	800939e <tty_read+0x52>
			if (out_size == 0) {
 8009388:	b92c      	cbnz	r4, 8009396 <tty_read+0x4a>
				errno = res;
 800938a:	f000 f911 	bl	80095b0 <__errno>
				return -1;
 800938e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
				errno = res;
 8009392:	f8c0 8000 	str.w	r8, [r0]
}
 8009396:	4620      	mov	r0, r4
 8009398:	b002      	add	sp, #8
 800939a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (res == 0) {
 800939e:	b958      	cbnz	r0, 80093b8 <tty_read+0x6c>
			*p++ = c;
 80093a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80093a4:	f805 3b01 	strb.w	r3, [r5], #1
		if (size == 0 ||
 80093a8:	3f01      	subs	r7, #1
			out_size++;
 80093aa:	f104 0401 	add.w	r4, r4, #1
		if (size == 0 ||
 80093ae:	d0f2      	beq.n	8009396 <tty_read+0x4a>
 80093b0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80093b4:	d103      	bne.n	80093be <tty_read+0x72>
 80093b6:	e7dc      	b.n	8009372 <tty_read+0x26>
 80093b8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80093bc:	d005      	beq.n	80093ca <tty_read+0x7e>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
 80093be:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80093c2:	f1b9 0f00 	cmp.w	r9, #0
 80093c6:	d0e6      	beq.n	8009396 <tty_read+0x4a>
 80093c8:	4699      	mov	r9, r3
		if (res == -1) {
 80093ca:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80093ce:	d1d0      	bne.n	8009372 <tty_read+0x26>
	return z_impl_k_sleep(timeout);
 80093d0:	2100      	movs	r1, #0
 80093d2:	200a      	movs	r0, #10
 80093d4:	f7fe fc34 	bl	8007c40 <z_impl_k_sleep>
 80093d8:	e7cb      	b.n	8009372 <tty_read+0x26>
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
 80093da:	6a32      	ldr	r2, [r6, #32]
 80093dc:	1c53      	adds	r3, r2, #1
 80093de:	bf1d      	ittte	ne
 80093e0:	ea22 72e2 	bicne.w	r2, r2, r2, asr #31
 80093e4:	230a      	movne	r3, #10
 80093e6:	fb82 2303 	smullne	r2, r3, r2, r3
 80093ea:	4613      	moveq	r3, r2
	return z_impl_k_sem_take(sem, timeout);
 80093ec:	4650      	mov	r0, sl
 80093ee:	f7fe f979 	bl	80076e4 <z_impl_k_sem_take>
	if (res < 0) {
 80093f2:	1e04      	subs	r4, r0, #0
 80093f4:	db19      	blt.n	800942a <tty_read+0xde>
	__asm__ volatile(
 80093f6:	f04f 0310 	mov.w	r3, #16
 80093fa:	f3ef 8011 	mrs	r0, BASEPRI
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
 8009406:	8bb1      	ldrh	r1, [r6, #28]
 8009408:	6972      	ldr	r2, [r6, #20]
 800940a:	1c4b      	adds	r3, r1, #1
 800940c:	b29b      	uxth	r3, r3
 800940e:	83b3      	strh	r3, [r6, #28]
 8009410:	5c52      	ldrb	r2, [r2, r1]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
 8009412:	69b1      	ldr	r1, [r6, #24]
 8009414:	428b      	cmp	r3, r1
		tty->rx_get = 0U;
 8009416:	bf24      	itt	cs
 8009418:	2300      	movcs	r3, #0
 800941a:	83b3      	strhcs	r3, [r6, #28]
	__asm__ volatile(
 800941c:	f380 8811 	msr	BASEPRI, r0
 8009420:	f3bf 8f6f 	isb	sy
		*p++ = (uint8_t)res;
 8009424:	f808 2b01 	strb.w	r2, [r8], #1
		out_size++;
 8009428:	e79b      	b.n	8009362 <tty_read+0x16>
			if (out_size == 0) {
 800942a:	f1b9 0f00 	cmp.w	r9, #0
 800942e:	d19c      	bne.n	800936a <tty_read+0x1e>
				errno = -res;
 8009430:	f000 f8be 	bl	80095b0 <__errno>
 8009434:	4263      	negs	r3, r4
 8009436:	6003      	str	r3, [r0, #0]
				return res;
 8009438:	e7ad      	b.n	8009396 <tty_read+0x4a>

0800943a <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
 800943a:	b570      	push	{r4, r5, r6, lr}
 800943c:	4604      	mov	r4, r0
 800943e:	460e      	mov	r6, r1
	uart_irq_rx_disable(tty->uart_dev);
 8009440:	6800      	ldr	r0, [r0, #0]
{
 8009442:	4615      	mov	r5, r2
	if (api->irq_rx_disable != NULL) {
 8009444:	6883      	ldr	r3, [r0, #8]
 8009446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009448:	b103      	cbz	r3, 800944c <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
 800944a:	4798      	blx	r3

	tty->rx_ringbuf = buf;
	tty->rx_ringbuf_sz = size;
 800944c:	e9c4 6505 	strd	r6, r5, [r4, #20]

	if (size > 0) {
 8009450:	b155      	cbz	r5, 8009468 <tty_set_rx_buf+0x2e>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8009452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009456:	2100      	movs	r1, #0
 8009458:	1d20      	adds	r0, r4, #4
 800945a:	f000 fbd5 	bl	8009c08 <z_impl_k_sem_init>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
 800945e:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable != NULL) {
 8009460:	6883      	ldr	r3, [r0, #8]
 8009462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009464:	b103      	cbz	r3, 8009468 <tty_set_rx_buf+0x2e>
		api->irq_rx_enable(dev);
 8009466:	4798      	blx	r3
	}

	return 0;
}
 8009468:	2000      	movs	r0, #0
 800946a:	bd70      	pop	{r4, r5, r6, pc}

0800946c <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	4604      	mov	r4, r0
 8009470:	460e      	mov	r6, r1
 8009472:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
 8009474:	6800      	ldr	r0, [r0, #0]
 8009476:	f7ff fecc 	bl	8009212 <z_impl_uart_irq_tx_disable>

	tty->tx_ringbuf = buf;
	tty->tx_ringbuf_sz = size;
 800947a:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
 800947e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009482:	18a9      	adds	r1, r5, r2
 8009484:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009488:	f000 fbbe 	bl	8009c08 <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
 800948c:	2000      	movs	r0, #0
 800948e:	bd70      	pop	{r4, r5, r6, pc}

08009490 <uart_poll_out>:
	api->poll_out(dev, out_char);
 8009490:	6883      	ldr	r3, [r0, #8]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	4718      	bx	r3

08009496 <debug_hook_out_nop>:
}
 8009496:	2000      	movs	r0, #0
 8009498:	4770      	bx	lr

0800949a <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800949a:	2200      	movs	r2, #0
{
 800949c:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 800949e:	4611      	mov	r1, r2
 80094a0:	2006      	movs	r0, #6
 80094a2:	f7fc fe15 	bl	80060d0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80094a6:	2200      	movs	r2, #0
 80094a8:	4611      	mov	r1, r2
 80094aa:	2007      	movs	r0, #7
 80094ac:	f7fc fe10 	bl	80060d0 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 80094b0:	2200      	movs	r2, #0
 80094b2:	4611      	mov	r1, r2
 80094b4:	2008      	movs	r0, #8
 80094b6:	f7fc fe0b 	bl	80060d0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80094ba:	2200      	movs	r2, #0
 80094bc:	4611      	mov	r1, r2
 80094be:	2009      	movs	r0, #9
 80094c0:	f7fc fe06 	bl	80060d0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80094c4:	2200      	movs	r2, #0
 80094c6:	4611      	mov	r1, r2
 80094c8:	200a      	movs	r0, #10
 80094ca:	f7fc fe01 	bl	80060d0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 80094ce:	2200      	movs	r2, #0
 80094d0:	4611      	mov	r1, r2
 80094d2:	2017      	movs	r0, #23
 80094d4:	f7fc fdfc 	bl	80060d0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 80094d8:	2200      	movs	r2, #0
 80094da:	4611      	mov	r1, r2
 80094dc:	2028      	movs	r0, #40	; 0x28
 80094de:	f7fc fdf7 	bl	80060d0 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 80094e2:	2200      	movs	r2, #0
 80094e4:	4611      	mov	r1, r2
 80094e6:	2001      	movs	r0, #1
 80094e8:	f7fc fdf2 	bl	80060d0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 80094ec:	2200      	movs	r2, #0
 80094ee:	4611      	mov	r1, r2
 80094f0:	202a      	movs	r0, #42	; 0x2a
 80094f2:	f7fc fded 	bl	80060d0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 80094f6:	2200      	movs	r2, #0
 80094f8:	4611      	mov	r1, r2
 80094fa:	2002      	movs	r0, #2
 80094fc:	f7fc fde8 	bl	80060d0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8009500:	2200      	movs	r2, #0
 8009502:	4611      	mov	r1, r2
 8009504:	2003      	movs	r0, #3
 8009506:	f7fc fde3 	bl	80060d0 <z_arm_irq_priority_set>
}
 800950a:	2000      	movs	r0, #0
 800950c:	bd08      	pop	{r3, pc}

0800950e <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 800950e:	6902      	ldr	r2, [r0, #16]
 8009510:	2117      	movs	r1, #23
 8009512:	2016      	movs	r0, #22
 8009514:	f7fc bac8 	b.w	8005aa8 <__stm32_exti_isr.isra.0>

08009518 <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 8009518:	6902      	ldr	r2, [r0, #16]
 800951a:	2116      	movs	r1, #22
 800951c:	2015      	movs	r0, #21
 800951e:	f7fc bac3 	b.w	8005aa8 <__stm32_exti_isr.isra.0>

08009522 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 8009522:	6902      	ldr	r2, [r0, #16]
 8009524:	2113      	movs	r1, #19
 8009526:	2012      	movs	r0, #18
 8009528:	f7fc babe 	b.w	8005aa8 <__stm32_exti_isr.isra.0>

0800952c <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 800952c:	6902      	ldr	r2, [r0, #16]
 800952e:	2111      	movs	r1, #17
 8009530:	2010      	movs	r0, #16
 8009532:	f7fc bab9 	b.w	8005aa8 <__stm32_exti_isr.isra.0>

08009536 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8009536:	6902      	ldr	r2, [r0, #16]
 8009538:	2110      	movs	r1, #16
 800953a:	200a      	movs	r0, #10
 800953c:	f7fc bab4 	b.w	8005aa8 <__stm32_exti_isr.isra.0>

08009540 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8009540:	6902      	ldr	r2, [r0, #16]
 8009542:	210a      	movs	r1, #10
 8009544:	2005      	movs	r0, #5
 8009546:	f7fc baaf 	b.w	8005aa8 <__stm32_exti_isr.isra.0>

0800954a <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 800954a:	6902      	ldr	r2, [r0, #16]
 800954c:	2105      	movs	r1, #5
 800954e:	2004      	movs	r0, #4
 8009550:	f7fc baaa 	b.w	8005aa8 <__stm32_exti_isr.isra.0>

08009554 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8009554:	6902      	ldr	r2, [r0, #16]
 8009556:	2104      	movs	r1, #4
 8009558:	2003      	movs	r0, #3
 800955a:	f7fc baa5 	b.w	8005aa8 <__stm32_exti_isr.isra.0>

0800955e <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 800955e:	6902      	ldr	r2, [r0, #16]
 8009560:	2103      	movs	r1, #3
 8009562:	2002      	movs	r0, #2
 8009564:	f7fc baa0 	b.w	8005aa8 <__stm32_exti_isr.isra.0>

08009568 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8009568:	6902      	ldr	r2, [r0, #16]
 800956a:	2102      	movs	r1, #2
 800956c:	2001      	movs	r0, #1
 800956e:	f7fc ba9b 	b.w	8005aa8 <__stm32_exti_isr.isra.0>

08009572 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8009572:	6902      	ldr	r2, [r0, #16]
 8009574:	2101      	movs	r1, #1
 8009576:	2000      	movs	r0, #0
 8009578:	f7fc ba96 	b.w	8005aa8 <__stm32_exti_isr.isra.0>

0800957c <config_pll_init>:
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 800957c:	23a8      	movs	r3, #168	; 0xa8
 800957e:	2206      	movs	r2, #6
 8009580:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(STM32_PLL_P_DIVISOR);
 8009584:	2300      	movs	r3, #0
 8009586:	6083      	str	r3, [r0, #8]
}
 8009588:	4770      	bx	lr

0800958a <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 800958a:	4770      	bx	lr

0800958c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800958c:	2100      	movs	r1, #0
 800958e:	2001      	movs	r0, #1
 8009590:	f7fc be72 	b.w	8006278 <z_arm_fatal_error>

08009594 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8009594:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 8009596:	6800      	ldr	r0, [r0, #0]
 8009598:	f7fc be6e 	b.w	8006278 <z_arm_fatal_error>

0800959c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 800959c:	b508      	push	{r3, lr}
	handler();
 800959e:	f7fc fedf 	bl	8006360 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 80095a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80095a6:	f7fd b95f 	b.w	8006868 <z_arm_exc_exit>

080095aa <_stdout_hook_default>:
}
 80095aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095ae:	4770      	bx	lr

080095b0 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 80095b0:	f7fd be10 	b.w	80071d4 <z_impl_z_errno>

080095b4 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80095b4:	6843      	ldr	r3, [r0, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80095b8:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 80095ba:	600b      	str	r3, [r1, #0]
}
 80095bc:	2000      	movs	r0, #0
 80095be:	4770      	bx	lr

080095c0 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80095c0:	6843      	ldr	r3, [r0, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80095c4:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 80095c6:	4042      	eors	r2, r0
 80095c8:	400a      	ands	r2, r1
 80095ca:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 80095cc:	615a      	str	r2, [r3, #20]
}
 80095ce:	2000      	movs	r0, #0
 80095d0:	4770      	bx	lr

080095d2 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80095d2:	6843      	ldr	r3, [r0, #4]
 80095d4:	685b      	ldr	r3, [r3, #4]
}
 80095d6:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 80095d8:	6199      	str	r1, [r3, #24]
}
 80095da:	4770      	bx	lr

080095dc <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80095dc:	6843      	ldr	r3, [r0, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80095e0:	0409      	lsls	r1, r1, #16
 80095e2:	6199      	str	r1, [r3, #24]
}
 80095e4:	2000      	movs	r0, #0
 80095e6:	4770      	bx	lr

080095e8 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80095e8:	6843      	ldr	r3, [r0, #4]
 80095ea:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 80095ec:	6953      	ldr	r3, [r2, #20]
 80095ee:	4059      	eors	r1, r3
 80095f0:	6151      	str	r1, [r2, #20]
}
 80095f2:	2000      	movs	r0, #0
 80095f4:	4770      	bx	lr

080095f6 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->data;
 80095f6:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 80095f8:	6898      	ldr	r0, [r3, #8]
{
 80095fa:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 80095fc:	b158      	cbz	r0, 8009616 <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80095fe:	2400      	movs	r4, #0
 8009600:	4281      	cmp	r1, r0
 8009602:	d112      	bne.n	800962a <gpio_stm32_manage_callback+0x34>
	return node->next;
 8009604:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8009606:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8009608:	b954      	cbnz	r4, 8009620 <gpio_stm32_manage_callback+0x2a>
 800960a:	428d      	cmp	r5, r1
	list->head = node;
 800960c:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 800960e:	d100      	bne.n	8009612 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8009610:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8009612:	2000      	movs	r0, #0
 8009614:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8009616:	b96a      	cbnz	r2, 8009634 <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8009618:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 800961a:	bd30      	pop	{r4, r5, pc}
 800961c:	4628      	mov	r0, r5
 800961e:	e7ef      	b.n	8009600 <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8009620:	428d      	cmp	r5, r1
	parent->next = child;
 8009622:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8009624:	bf08      	it	eq
 8009626:	60dc      	streq	r4, [r3, #12]
}
 8009628:	e7f3      	b.n	8009612 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 800962a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800962c:	4604      	mov	r4, r0
 800962e:	2d00      	cmp	r5, #0
 8009630:	d1f4      	bne.n	800961c <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8009632:	b13a      	cbz	r2, 8009644 <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 8009634:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8009636:	689a      	ldr	r2, [r3, #8]
 8009638:	600a      	str	r2, [r1, #0]
	list->head = node;
 800963a:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 800963c:	2800      	cmp	r0, #0
 800963e:	d1eb      	bne.n	8009618 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8009640:	60d9      	str	r1, [r3, #12]
}
 8009642:	e7ea      	b.n	800961a <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8009644:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8009648:	e7e7      	b.n	800961a <gpio_stm32_manage_callback+0x24>

0800964a <gpio_stm32_isr>:
{
 800964a:	460b      	mov	r3, r1
 800964c:	6889      	ldr	r1, [r1, #8]
 800964e:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8009650:	b171      	cbz	r1, 8009670 <gpio_stm32_isr+0x26>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8009652:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8009654:	680c      	ldr	r4, [r1, #0]
 8009656:	2301      	movs	r3, #1
 8009658:	fa03 f500 	lsl.w	r5, r3, r0
		if (cb->pin_mask & pins) {
 800965c:	688a      	ldr	r2, [r1, #8]
 800965e:	402a      	ands	r2, r5
 8009660:	d002      	beq.n	8009668 <gpio_stm32_isr+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8009662:	684b      	ldr	r3, [r1, #4]
 8009664:	4630      	mov	r0, r6
 8009666:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8009668:	b114      	cbz	r4, 8009670 <gpio_stm32_isr+0x26>
 800966a:	4621      	mov	r1, r4
 800966c:	6824      	ldr	r4, [r4, #0]
 800966e:	e7f5      	b.n	800965c <gpio_stm32_isr+0x12>
}
 8009670:	bd70      	pop	{r4, r5, r6, pc}

08009672 <gpio_stm32_configure>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009672:	6840      	ldr	r0, [r0, #4]
{
 8009674:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009676:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8009678:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800967a:	6867      	ldr	r7, [r4, #4]
 800967c:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800967e:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8009682:	ea27 0700 	bic.w	r7, r7, r0
 8009686:	408e      	lsls	r6, r1
 8009688:	433e      	orrs	r6, r7
 800968a:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800968c:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8009690:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8009694:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8009698:	f04f 0e03 	mov.w	lr, #3
 800969c:	007f      	lsls	r7, r7, #1
 800969e:	fa0e f707 	lsl.w	r7, lr, r7
 80096a2:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096a6:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 80096aa:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 80096ae:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 80096b2:	007f      	lsls	r7, r7, #1
 80096b4:	40be      	lsls	r6, r7
 80096b6:	ea46 060c 	orr.w	r6, r6, ip
 80096ba:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096bc:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 80096c0:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80096c4:	68e7      	ldr	r7, [r4, #12]
 80096c6:	0076      	lsls	r6, r6, #1
 80096c8:	fa0e f606 	lsl.w	r6, lr, r6
 80096cc:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096d0:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 80096d4:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 80096d8:	f002 0530 	and.w	r5, r2, #48	; 0x30
 80096dc:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 80096de:	f3c2 2241 	ubfx	r2, r2, #9, #2
 80096e2:	40b2      	lsls	r2, r6
 80096e4:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 80096e6:	2d20      	cmp	r5, #32
 80096e8:	60e2      	str	r2, [r4, #12]
 80096ea:	d115      	bne.n	8009718 <gpio_stm32_configure+0xa6>
		if (pin < 8) {
 80096ec:	2907      	cmp	r1, #7
 80096ee:	dc2c      	bgt.n	800974a <gpio_stm32_configure+0xd8>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096f0:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80096f4:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 80096f6:	b332      	cbz	r2, 8009746 <gpio_stm32_configure+0xd4>
  return __builtin_clz(value);
 80096f8:	fab2 f282 	clz	r2, r2
 80096fc:	0092      	lsls	r2, r2, #2
 80096fe:	260f      	movs	r6, #15
 8009700:	fa06 f202 	lsl.w	r2, r6, r2
 8009704:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009708:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 800970c:	fab2 f282 	clz	r2, r2
 8009710:	0092      	lsls	r2, r2, #2
 8009712:	4093      	lsls	r3, r2
 8009714:	430b      	orrs	r3, r1
 8009716:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009718:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800971c:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009720:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009722:	fa90 f0a0 	rbit	r0, r0
 8009726:	2103      	movs	r1, #3
 8009728:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 800972a:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800972e:	092d      	lsrs	r5, r5, #4
 8009730:	fa01 f303 	lsl.w	r3, r1, r3
 8009734:	0040      	lsls	r0, r0, #1
 8009736:	ea22 0303 	bic.w	r3, r2, r3
 800973a:	fa05 f000 	lsl.w	r0, r5, r0
 800973e:	4318      	orrs	r0, r3
 8009740:	6020      	str	r0, [r4, #0]
}
 8009742:	2000      	movs	r0, #0
 8009744:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8009746:	462a      	mov	r2, r5
 8009748:	e7d8      	b.n	80096fc <gpio_stm32_configure+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800974a:	0a02      	lsrs	r2, r0, #8
 800974c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800974e:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8009752:	b181      	cbz	r1, 8009776 <gpio_stm32_configure+0x104>
  return __builtin_clz(value);
 8009754:	fab1 f181 	clz	r1, r1
 8009758:	0089      	lsls	r1, r1, #2
 800975a:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800975c:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8009760:	fab2 f282 	clz	r2, r2
 8009764:	fa07 f101 	lsl.w	r1, r7, r1
 8009768:	0092      	lsls	r2, r2, #2
 800976a:	ea26 0101 	bic.w	r1, r6, r1
 800976e:	4093      	lsls	r3, r2
 8009770:	430b      	orrs	r3, r1
 8009772:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009774:	e7d0      	b.n	8009718 <gpio_stm32_configure+0xa6>
    return 32U;
 8009776:	4629      	mov	r1, r5
 8009778:	e7ee      	b.n	8009758 <gpio_stm32_configure+0xe6>

0800977a <gpio_stm32_config>:
	if ((flags & GPIO_OUTPUT) != 0) {
 800977a:	0593      	lsls	r3, r2, #22
{
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	4605      	mov	r5, r0
 8009780:	460e      	mov	r6, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 8009782:	d519      	bpl.n	80097b8 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8009784:	0794      	lsls	r4, r2, #30
 8009786:	d510      	bpl.n	80097aa <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8009788:	0750      	lsls	r0, r2, #29
 800978a:	d531      	bpl.n	80097f0 <gpio_stm32_config+0x76>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800978c:	2450      	movs	r4, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 800978e:	06d1      	lsls	r1, r2, #27
 8009790:	d50d      	bpl.n	80097ae <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8009792:	f444 7400 	orr.w	r4, r4, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8009796:	0513      	lsls	r3, r2, #20
 8009798:	d41f      	bmi.n	80097da <gpio_stm32_config+0x60>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800979a:	0552      	lsls	r2, r2, #21
 800979c:	d515      	bpl.n	80097ca <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800979e:	2101      	movs	r1, #1
 80097a0:	40b1      	lsls	r1, r6
 80097a2:	4628      	mov	r0, r5
 80097a4:	f7ff ff1a 	bl	80095dc <gpio_stm32_port_clear_bits_raw>
 80097a8:	e00f      	b.n	80097ca <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80097aa:	2410      	movs	r4, #16
 80097ac:	e7ef      	b.n	800978e <gpio_stm32_config+0x14>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80097ae:	0693      	lsls	r3, r2, #26
 80097b0:	d5f1      	bpl.n	8009796 <gpio_stm32_config+0x1c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80097b2:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
	if (err != 0) {
 80097b6:	e7ee      	b.n	8009796 <gpio_stm32_config+0x1c>
	} else if  ((flags & GPIO_INPUT) != 0) {
 80097b8:	05d0      	lsls	r0, r2, #23
 80097ba:	d514      	bpl.n	80097e6 <gpio_stm32_config+0x6c>
		if ((flags & GPIO_PULL_UP) != 0) {
 80097bc:	06d1      	lsls	r1, r2, #27
 80097be:	d414      	bmi.n	80097ea <gpio_stm32_config+0x70>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80097c0:	f012 0420 	ands.w	r4, r2, #32
 80097c4:	bf18      	it	ne
 80097c6:	f44f 6480 	movne.w	r4, #1024	; 0x400
	gpio_stm32_configure(dev, pin, pincfg, 0);
 80097ca:	2300      	movs	r3, #0
 80097cc:	4622      	mov	r2, r4
 80097ce:	4631      	mov	r1, r6
 80097d0:	4628      	mov	r0, r5
 80097d2:	f7ff ff4e 	bl	8009672 <gpio_stm32_configure>
 80097d6:	2000      	movs	r0, #0
}
 80097d8:	bd70      	pop	{r4, r5, r6, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80097da:	686a      	ldr	r2, [r5, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80097dc:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80097de:	6852      	ldr	r2, [r2, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80097e0:	40b3      	lsls	r3, r6
	WRITE_REG(gpio->BSRR, pins);
 80097e2:	6193      	str	r3, [r2, #24]
	return 0;
 80097e4:	e7f1      	b.n	80097ca <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 80097e6:	2430      	movs	r4, #48	; 0x30
 80097e8:	e7ef      	b.n	80097ca <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80097ea:	f44f 7400 	mov.w	r4, #512	; 0x200
 80097ee:	e7ec      	b.n	80097ca <gpio_stm32_config+0x50>
				return -ENOTSUP;
 80097f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return err;
 80097f4:	e7f0      	b.n	80097d8 <gpio_stm32_config+0x5e>

080097f6 <gpio_stm32_init>:
 */
static int gpio_stm32_init(const struct device *dev)
{
	struct gpio_stm32_data *data = dev->data;

	data->dev = dev;
 80097f6:	6902      	ldr	r2, [r0, #16]
	return 0;
#else
#ifdef CONFIG_PM_DEVICE
	data->power_state = PM_DEVICE_STATE_ACTIVE;
#endif
	return gpio_stm32_clock_request(dev, true);
 80097f8:	2101      	movs	r1, #1
	data->dev = dev;
 80097fa:	6050      	str	r0, [r2, #4]
	return gpio_stm32_clock_request(dev, true);
 80097fc:	f7fd b9e6 	b.w	8006bcc <gpio_stm32_clock_request>

08009800 <LL_USART_ClearFlag_FE>:
{
 8009800:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8009802:	6803      	ldr	r3, [r0, #0]
 8009804:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8009806:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8009808:	6843      	ldr	r3, [r0, #4]
 800980a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800980c:	9b01      	ldr	r3, [sp, #4]
}
 800980e:	b002      	add	sp, #8
 8009810:	4770      	bx	lr

08009812 <uart_stm32_poll_in>:
{
 8009812:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009814:	6843      	ldr	r3, [r0, #4]
 8009816:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8009818:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800981a:	071a      	lsls	r2, r3, #28
 800981c:	d501      	bpl.n	8009822 <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(UartInstance);
 800981e:	f7ff ffef 	bl	8009800 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8009822:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8009824:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8009826:	bf43      	ittte	mi
 8009828:	6843      	ldrmi	r3, [r0, #4]
 800982a:	700b      	strbmi	r3, [r1, #0]
	return 0;
 800982c:	2000      	movmi	r0, #0
		return -1;
 800982e:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8009832:	bd08      	pop	{r3, pc}

08009834 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009834:	6843      	ldr	r3, [r0, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8009838:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 800983a:	0612      	lsls	r2, r2, #24
 800983c:	d5fc      	bpl.n	8009838 <uart_stm32_poll_out+0x4>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800983e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009842:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8009844:	6059      	str	r1, [r3, #4]
}
 8009846:	4770      	bx	lr

08009848 <uart_stm32_err_check>:
{
 8009848:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800984a:	6843      	ldr	r3, [r0, #4]
 800984c:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800984e:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8009850:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8009852:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8009854:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8009856:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 800985a:	bf48      	it	mi
 800985c:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8009860:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 8009862:	bf48      	it	mi
 8009864:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 8009868:	07d3      	lsls	r3, r2, #31
 800986a:	d501      	bpl.n	8009870 <uart_stm32_err_check+0x28>
		LL_USART_ClearFlag_ORE(UartInstance);
 800986c:	f7ff ffc8 	bl	8009800 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8009870:	0791      	lsls	r1, r2, #30
 8009872:	d501      	bpl.n	8009878 <uart_stm32_err_check+0x30>
		LL_USART_ClearFlag_PE(UartInstance);
 8009874:	f7ff ffc4 	bl	8009800 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8009878:	0753      	lsls	r3, r2, #29
 800987a:	d501      	bpl.n	8009880 <uart_stm32_err_check+0x38>
		LL_USART_ClearFlag_FE(UartInstance);
 800987c:	f7ff ffc0 	bl	8009800 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 8009880:	f7ff ffbe 	bl	8009800 <LL_USART_ClearFlag_FE>
}
 8009884:	4610      	mov	r0, r2
 8009886:	bd08      	pop	{r3, pc}

08009888 <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009888:	6843      	ldr	r3, [r0, #4]
{
 800988a:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800988c:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 800988e:	2300      	movs	r3, #0
 8009890:	b2d8      	uxtb	r0, r3
 8009892:	1a15      	subs	r5, r2, r0
 8009894:	2d00      	cmp	r5, #0
 8009896:	dd04      	ble.n	80098a2 <uart_stm32_fifo_fill+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8009898:	6825      	ldr	r5, [r4, #0]
 800989a:	062d      	lsls	r5, r5, #24
 800989c:	f103 0301 	add.w	r3, r3, #1
 80098a0:	d400      	bmi.n	80098a4 <uart_stm32_fifo_fill+0x1c>
}
 80098a2:	bd30      	pop	{r4, r5, pc}
  USARTx->DR = Value;
 80098a4:	5c08      	ldrb	r0, [r1, r0]
 80098a6:	6060      	str	r0, [r4, #4]
}
 80098a8:	e7f2      	b.n	8009890 <uart_stm32_fifo_fill+0x8>

080098aa <uart_stm32_fifo_read>:
{
 80098aa:	b538      	push	{r3, r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80098ac:	6843      	ldr	r3, [r0, #4]
 80098ae:	681c      	ldr	r4, [r3, #0]
	while ((size - num_rx > 0) &&
 80098b0:	2500      	movs	r5, #0
 80098b2:	b2e8      	uxtb	r0, r5
 80098b4:	1a13      	subs	r3, r2, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	dd02      	ble.n	80098c0 <uart_stm32_fifo_read+0x16>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	069b      	lsls	r3, r3, #26
 80098be:	d400      	bmi.n	80098c2 <uart_stm32_fifo_read+0x18>
}
 80098c0:	bd38      	pop	{r3, r4, r5, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80098c2:	6863      	ldr	r3, [r4, #4]
 80098c4:	540b      	strb	r3, [r1, r0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80098c6:	6823      	ldr	r3, [r4, #0]
		if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 80098c8:	0718      	lsls	r0, r3, #28
 80098ca:	d502      	bpl.n	80098d2 <uart_stm32_fifo_read+0x28>
			LL_USART_ClearFlag_ORE(UartInstance);
 80098cc:	4620      	mov	r0, r4
 80098ce:	f7ff ff97 	bl	8009800 <LL_USART_ClearFlag_FE>
 80098d2:	3501      	adds	r5, #1
 80098d4:	e7ed      	b.n	80098b2 <uart_stm32_fifo_read+0x8>

080098d6 <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80098d6:	6843      	ldr	r3, [r0, #4]
 80098d8:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80098da:	68d3      	ldr	r3, [r2, #12]
 80098dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e0:	60d3      	str	r3, [r2, #12]
}
 80098e2:	4770      	bx	lr

080098e4 <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80098e4:	6843      	ldr	r3, [r0, #4]
 80098e6:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80098e8:	68d3      	ldr	r3, [r2, #12]
 80098ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ee:	60d3      	str	r3, [r2, #12]
}
 80098f0:	4770      	bx	lr

080098f2 <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80098f2:	6843      	ldr	r3, [r0, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80098f6:	6818      	ldr	r0, [r3, #0]
	return LL_USART_IsActiveFlag_TXE(UartInstance) &&
 80098f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 80098fc:	bf1c      	itt	ne
 80098fe:	68d8      	ldrne	r0, [r3, #12]
 8009900:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 8009904:	4770      	bx	lr

08009906 <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009906:	6843      	ldr	r3, [r0, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800990a:	6818      	ldr	r0, [r3, #0]
}
 800990c:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8009910:	4770      	bx	lr

08009912 <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009912:	6843      	ldr	r3, [r0, #4]
 8009914:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8009916:	68d3      	ldr	r3, [r2, #12]
 8009918:	f043 0320 	orr.w	r3, r3, #32
 800991c:	60d3      	str	r3, [r2, #12]
}
 800991e:	4770      	bx	lr

08009920 <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009920:	6843      	ldr	r3, [r0, #4]
 8009922:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8009924:	68d3      	ldr	r3, [r2, #12]
 8009926:	f023 0320 	bic.w	r3, r3, #32
 800992a:	60d3      	str	r3, [r2, #12]
}
 800992c:	4770      	bx	lr

0800992e <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800992e:	6843      	ldr	r3, [r0, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8009932:	6818      	ldr	r0, [r3, #0]
}
 8009934:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8009938:	4770      	bx	lr

0800993a <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800993a:	6843      	ldr	r3, [r0, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8009940:	0691      	lsls	r1, r2, #26
 8009942:	d502      	bpl.n	800994a <uart_stm32_irq_is_pending+0x10>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8009944:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
 8009946:	0692      	lsls	r2, r2, #26
 8009948:	d407      	bmi.n	800995a <uart_stm32_irq_is_pending+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800994a:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 800994c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8009950:	d004      	beq.n	800995c <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 8009952:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(UartInstance) &&
 8009954:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8009958:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 800995a:	2001      	movs	r0, #1
}
 800995c:	4770      	bx	lr

0800995e <uart_stm32_irq_update>:
}
 800995e:	2001      	movs	r0, #1
 8009960:	4770      	bx	lr

08009962 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8009962:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 8009964:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 8009968:	4770      	bx	lr

0800996a <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 800996a:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 800996c:	6893      	ldr	r3, [r2, #8]
 800996e:	b10b      	cbz	r3, 8009974 <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 8009970:	68d1      	ldr	r1, [r2, #12]
 8009972:	4718      	bx	r3
}
 8009974:	4770      	bx	lr

08009976 <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,	\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 8009976:	b508      	push	{r3, lr}
 8009978:	2200      	movs	r2, #0
 800997a:	2025      	movs	r0, #37	; 0x25
 800997c:	4611      	mov	r1, r2
 800997e:	f7fc fba7 	bl	80060d0 <z_arm_irq_priority_set>
 8009982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009986:	2025      	movs	r0, #37	; 0x25
 8009988:	f7fc bb92 	b.w	80060b0 <arch_irq_enable>

0800998c <uart_stm32_irq_config_func_1>:
 800998c:	b508      	push	{r3, lr}
 800998e:	2200      	movs	r2, #0
 8009990:	2047      	movs	r0, #71	; 0x47
 8009992:	4611      	mov	r1, r2
 8009994:	f7fc fb9c 	bl	80060d0 <z_arm_irq_priority_set>
 8009998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800999c:	2047      	movs	r0, #71	; 0x47
 800999e:	f7fc bb87 	b.w	80060b0 <arch_irq_enable>

080099a2 <uart_stm32_irq_config_func_2>:
 80099a2:	b508      	push	{r3, lr}
 80099a4:	2200      	movs	r2, #0
 80099a6:	2027      	movs	r0, #39	; 0x27
 80099a8:	4611      	mov	r1, r2
 80099aa:	f7fc fb91 	bl	80060d0 <z_arm_irq_priority_set>
 80099ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80099b2:	2027      	movs	r0, #39	; 0x27
 80099b4:	f7fc bb7c 	b.w	80060b0 <arch_irq_enable>

080099b8 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 80099b8:	6903      	ldr	r3, [r0, #16]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80099be:	6843      	ldr	r3, [r0, #4]
 80099c0:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80099c2:	68d3      	ldr	r3, [r2, #12]
 80099c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 80099c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099cc:	d029      	beq.n	8009a22 <uart_stm32_config_get+0x6a>
		return UART_CFG_PARITY_NONE;
 80099ce:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 80099d2:	f1dc 0300 	rsbs	r3, ip, #0
 80099d6:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 80099da:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80099dc:	6913      	ldr	r3, [r2, #16]
 80099de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 80099e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099e6:	d01e      	beq.n	8009a26 <uart_stm32_config_get+0x6e>
 80099e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099ec:	d01d      	beq.n	8009a2a <uart_stm32_config_get+0x72>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	bf14      	ite	ne
 80099f2:	2303      	movne	r3, #3
 80099f4:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80099f6:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80099f8:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80099fa:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 80099fc:	04c0      	lsls	r0, r0, #19
 80099fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009a02:	d514      	bpl.n	8009a2e <uart_stm32_config_get+0x76>
			return UART_CFG_DATA_BITS_9;
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	bf14      	ite	ne
 8009a08:	2303      	movne	r3, #3
 8009a0a:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8009a0c:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8009a0e:	6953      	ldr	r3, [r2, #20]
 8009a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8009a14:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8009a18:	4253      	negs	r3, r2
 8009a1a:	4153      	adcs	r3, r2
 8009a1c:	71cb      	strb	r3, [r1, #7]
}
 8009a1e:	2000      	movs	r0, #0
 8009a20:	4770      	bx	lr
	switch (parity) {
 8009a22:	2302      	movs	r3, #2
 8009a24:	e7d9      	b.n	80099da <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 8009a26:	2300      	movs	r3, #0
 8009a28:	e7e5      	b.n	80099f6 <uart_stm32_config_get+0x3e>
		return UART_CFG_STOP_BITS_1_5;
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	e7e3      	b.n	80099f6 <uart_stm32_config_get+0x3e>
			return UART_CFG_DATA_BITS_7;
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	bf0c      	ite	eq
 8009a32:	2303      	moveq	r3, #3
 8009a34:	2302      	movne	r3, #2
 8009a36:	e7e9      	b.n	8009a0c <uart_stm32_config_get+0x54>

08009a38 <z_device_state_init>:
}
 8009a38:	4770      	bx	lr

08009a3a <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8009a3a:	b138      	cbz	r0, 8009a4c <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8009a3c:	68c3      	ldr	r3, [r0, #12]
 8009a3e:	8818      	ldrh	r0, [r3, #0]
 8009a40:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8009a44:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8009a48:	4258      	negs	r0, r3
 8009a4a:	4158      	adcs	r0, r3
}
 8009a4c:	4770      	bx	lr

08009a4e <arch_system_halt>:
	__asm__ volatile(
 8009a4e:	f04f 0210 	mov.w	r2, #16
 8009a52:	f3ef 8311 	mrs	r3, BASEPRI
 8009a56:	f382 8811 	msr	BASEPRI, r2
 8009a5a:	f3bf 8f6f 	isb	sy
	for (;;) {
 8009a5e:	e7fe      	b.n	8009a5e <arch_system_halt+0x10>

08009a60 <k_mem_slab_init>:
{
 8009a60:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
 8009a62:	2400      	movs	r4, #0
 8009a64:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
 8009a66:	7204      	strb	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8009a68:	ea41 0402 	orr.w	r4, r1, r2
 8009a6c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
 8009a70:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
 8009a74:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8009a76:	d10c      	bne.n	8009a92 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
 8009a78:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 8009a7a:	42a3      	cmp	r3, r4
 8009a7c:	d103      	bne.n	8009a86 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
 8009a7e:	e9c0 0000 	strd	r0, r0, [r0]
}
 8009a82:	2000      	movs	r0, #0
}
 8009a84:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
 8009a86:	6985      	ldr	r5, [r0, #24]
 8009a88:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 8009a8a:	3401      	adds	r4, #1
		slab->free_list = p;
 8009a8c:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
 8009a8e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
 8009a90:	e7f3      	b.n	8009a7a <k_mem_slab_init+0x1a>
		return -EINVAL;
 8009a92:	f06f 0015 	mvn.w	r0, #21
	return rc;
 8009a96:	e7f5      	b.n	8009a84 <k_mem_slab_init+0x24>

08009a98 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 8009a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	460d      	mov	r5, r1
 8009a9e:	f04f 0310 	mov.w	r3, #16
 8009aa2:	f3ef 8611 	mrs	r6, BASEPRI
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 8009aae:	6987      	ldr	r7, [r0, #24]
 8009ab0:	b977      	cbnz	r7, 8009ad0 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 8009ab2:	f000 f978 	bl	8009da6 <z_unpend_first_thread>

		if (pending_thread != NULL) {
 8009ab6:	b158      	cbz	r0, 8009ad0 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 8009ab8:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8009aba:	6142      	str	r2, [r0, #20]
 8009abc:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
 8009abe:	f000 f92b 	bl	8009d18 <z_ready_thread>
			z_reschedule(&slab->lock, key);
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 8009ac8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
 8009acc:	f7fd be70 	b.w	80077b0 <z_reschedule>
	**(char ***) mem = slab->free_list;
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	69a2      	ldr	r2, [r4, #24]
 8009ad4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 8009ad6:	682b      	ldr	r3, [r5, #0]
 8009ad8:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
 8009ada:	69e3      	ldr	r3, [r4, #28]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 8009ae0:	f386 8811 	msr	BASEPRI, r6
 8009ae4:	f3bf 8f6f 	isb	sy
}
 8009ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009aea <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aea:	f3ef 8005 	mrs	r0, IPSR
}
 8009aee:	3800      	subs	r0, #0
 8009af0:	bf18      	it	ne
 8009af2:	2001      	movne	r0, #1
 8009af4:	4770      	bx	lr

08009af6 <z_impl_k_thread_name_set>:
}
 8009af6:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8009afa:	4770      	bx	lr

08009afc <k_thread_name_get>:
}
 8009afc:	2000      	movs	r0, #0
 8009afe:	4770      	bx	lr

08009b00 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8009b00:	b508      	push	{r3, lr}
	__asm__ volatile(
 8009b02:	f04f 0210 	mov.w	r2, #16
 8009b06:	f3ef 8311 	mrs	r3, BASEPRI
 8009b0a:	f382 8811 	msr	BASEPRI, r2
 8009b0e:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8009b12:	f7fc fba3 	bl	800625c <arch_cpu_idle>
 8009b16:	e7f4      	b.n	8009b02 <idle+0x2>

08009b18 <queue_insert>:
{
 8009b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b1c:	4699      	mov	r9, r3
 8009b1e:	4604      	mov	r4, r0
 8009b20:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8009b24:	460d      	mov	r5, r1
 8009b26:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 8009b28:	f100 0708 	add.w	r7, r0, #8
 8009b2c:	f04f 0210 	mov.w	r2, #16
 8009b30:	f3ef 8611 	mrs	r6, BASEPRI
 8009b34:	f382 8811 	msr	BASEPRI, r2
 8009b38:	f3bf 8f6f 	isb	sy
	if (is_append) {
 8009b3c:	b103      	cbz	r3, 8009b40 <queue_insert+0x28>
	return list->tail;
 8009b3e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 8009b40:	f104 000c 	add.w	r0, r4, #12
 8009b44:	f000 f92f 	bl	8009da6 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
 8009b48:	b158      	cbz	r0, 8009b62 <queue_insert+0x4a>
 8009b4a:	2400      	movs	r4, #0
 8009b4c:	6784      	str	r4, [r0, #120]	; 0x78
 8009b4e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
 8009b52:	f000 f8e1 	bl	8009d18 <z_ready_thread>
	z_reschedule(&queue->lock, key);
 8009b56:	4638      	mov	r0, r7
 8009b58:	4631      	mov	r1, r6
 8009b5a:	f7fd fe29 	bl	80077b0 <z_reschedule>
	return 0;
 8009b5e:	2000      	movs	r0, #0
 8009b60:	e00c      	b.n	8009b7c <queue_insert+0x64>
	if (alloc) {
 8009b62:	f1b9 0f00 	cmp.w	r9, #0
 8009b66:	d01c      	beq.n	8009ba2 <queue_insert+0x8a>
	return z_thread_aligned_alloc(0, size);
 8009b68:	2108      	movs	r1, #8
 8009b6a:	f7fe fae3 	bl	8008134 <z_thread_aligned_alloc>
		if (anode == NULL) {
 8009b6e:	b938      	cbnz	r0, 8009b80 <queue_insert+0x68>
	__asm__ volatile(
 8009b70:	f386 8811 	msr	BASEPRI, r6
 8009b74:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
 8009b78:	f06f 000b 	mvn.w	r0, #11
}
 8009b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
 8009b80:	2301      	movs	r3, #1
		anode->data = data;
 8009b82:	f8c0 8004 	str.w	r8, [r0, #4]
 8009b86:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8009b88:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8009b8a:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
 8009b8e:	b965      	cbnz	r5, 8009baa <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 8009b96:	6863      	ldr	r3, [r4, #4]
	list->head = node;
 8009b98:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1db      	bne.n	8009b56 <queue_insert+0x3e>
	list->tail = node;
 8009b9e:	6060      	str	r0, [r4, #4]
}
 8009ba0:	e7d9      	b.n	8009b56 <queue_insert+0x3e>
	node->next_and_flags = flags;
 8009ba2:	f8c8 9000 	str.w	r9, [r8]
}
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	e7ee      	b.n	8009b88 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8009baa:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 8009bac:	f033 0303 	bics.w	r3, r3, #3
 8009bb0:	d10b      	bne.n	8009bca <queue_insert+0xb2>
	parent->next_and_flags = cur_flags | (unative_t)child;
 8009bb2:	6002      	str	r2, [r0, #0]
	return list->tail;
 8009bb4:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
 8009bb6:	b912      	cbnz	r2, 8009bbe <queue_insert+0xa6>
	list->head = node;
 8009bb8:	e9c4 0000 	strd	r0, r0, [r4]
}
 8009bbc:	e7cb      	b.n	8009b56 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8009bbe:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8009bc0:	f003 0303 	and.w	r3, r3, #3
 8009bc4:	4303      	orrs	r3, r0
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	e7e9      	b.n	8009b9e <queue_insert+0x86>
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8009bce:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8009bd0:	f003 0303 	and.w	r3, r3, #3
 8009bd4:	4318      	orrs	r0, r3
 8009bd6:	6028      	str	r0, [r5, #0]
}
 8009bd8:	e7bd      	b.n	8009b56 <queue_insert+0x3e>

08009bda <z_queue_node_peek>:
{
 8009bda:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
 8009bdc:	4604      	mov	r4, r0
 8009bde:	b130      	cbz	r0, 8009bee <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8009be0:	6802      	ldr	r2, [r0, #0]
 8009be2:	0793      	lsls	r3, r2, #30
 8009be4:	d003      	beq.n	8009bee <z_queue_node_peek+0x14>
		ret = anode->data;
 8009be6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 8009be8:	b109      	cbz	r1, 8009bee <z_queue_node_peek+0x14>
			k_free(anode);
 8009bea:	f000 f9a5 	bl	8009f38 <k_free>
}
 8009bee:	4620      	mov	r0, r4
 8009bf0:	bd10      	pop	{r4, pc}

08009bf2 <k_queue_append>:
{
 8009bf2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	2300      	movs	r3, #0
{
 8009bfa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	f7ff ff8b 	bl	8009b18 <queue_insert>
}
 8009c02:	b003      	add	sp, #12
 8009c04:	f85d fb04 	ldr.w	pc, [sp], #4

08009c08 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8009c08:	b13a      	cbz	r2, 8009c1a <z_impl_k_sem_init+0x12>
 8009c0a:	428a      	cmp	r2, r1
 8009c0c:	d305      	bcc.n	8009c1a <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 8009c0e:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8009c12:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 8009c16:	2000      	movs	r0, #0
 8009c18:	4770      	bx	lr
		return -EINVAL;
 8009c1a:	f06f 0015 	mvn.w	r0, #21
}
 8009c1e:	4770      	bx	lr

08009c20 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8009c20:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8009c24:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8009c26:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8009c28:	2300      	movs	r3, #0
	node->prev = NULL;
 8009c2a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8009c2e:	4770      	bx	lr

08009c30 <unpend_thread_no_timeout>:
{
 8009c30:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8009c32:	f7ff fff5 	bl	8009c20 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8009c36:	7b43      	ldrb	r3, [r0, #13]
 8009c38:	f023 0302 	bic.w	r3, r3, #2
 8009c3c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	6083      	str	r3, [r0, #8]
}
 8009c42:	bd08      	pop	{r3, pc}

08009c44 <z_unpend_thread_no_timeout>:
{
 8009c44:	b508      	push	{r3, lr}
	__asm__ volatile(
 8009c46:	f04f 0310 	mov.w	r3, #16
 8009c4a:	f3ef 8111 	mrs	r1, BASEPRI
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 8009c56:	f7ff ffeb 	bl	8009c30 <unpend_thread_no_timeout>
	__asm__ volatile(
 8009c5a:	f381 8811 	msr	BASEPRI, r1
 8009c5e:	f3bf 8f6f 	isb	sy
}
 8009c62:	bd08      	pop	{r3, pc}

08009c64 <z_unpend_thread>:
{
 8009c64:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009c66:	f04f 0310 	mov.w	r3, #16
 8009c6a:	f3ef 8411 	mrs	r4, BASEPRI
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 8009c76:	f7ff ffdb 	bl	8009c30 <unpend_thread_no_timeout>
	__asm__ volatile(
 8009c7a:	f384 8811 	msr	BASEPRI, r4
 8009c7e:	f3bf 8f6f 	isb	sy
}
 8009c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c86:	3018      	adds	r0, #24
 8009c88:	f000 b8b5 	b.w	8009df6 <z_abort_timeout>

08009c8c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	b920      	cbnz	r0, 8009c9a <z_reschedule_irqlock+0xe>
 8009c90:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8009c94:	b90a      	cbnz	r2, 8009c9a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8009c96:	f7fc b999 	b.w	8005fcc <arch_swap>
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
}
 8009ca2:	4770      	bx	lr

08009ca4 <z_reschedule_unlocked>:
	__asm__ volatile(
 8009ca4:	f04f 0310 	mov.w	r3, #16
 8009ca8:	f3ef 8011 	mrs	r0, BASEPRI
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8009cb4:	f7ff bfea 	b.w	8009c8c <z_reschedule_irqlock>

08009cb8 <z_priq_dumb_best>:
	return list->head == list;
 8009cb8:	6803      	ldr	r3, [r0, #0]
}
 8009cba:	4298      	cmp	r0, r3
 8009cbc:	bf14      	ite	ne
 8009cbe:	4618      	movne	r0, r3
 8009cc0:	2000      	moveq	r0, #0
 8009cc2:	4770      	bx	lr

08009cc4 <add_to_waitq_locked>:
{
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	460d      	mov	r5, r1
	unready_thread(thread);
 8009cca:	f7fd fdb7 	bl	800783c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8009cce:	7b63      	ldrb	r3, [r4, #13]
 8009cd0:	f043 0302 	orr.w	r3, r3, #2
 8009cd4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8009cd6:	b195      	cbz	r5, 8009cfe <add_to_waitq_locked+0x3a>
 8009cd8:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8009cda:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009cdc:	429d      	cmp	r5, r3
 8009cde:	d015      	beq.n	8009d0c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009ce0:	b1a3      	cbz	r3, 8009d0c <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 8009ce2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8009ce6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8009cea:	4291      	cmp	r1, r2
 8009cec:	d008      	beq.n	8009d00 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 8009cee:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 8009cf0:	2a00      	cmp	r2, #0
 8009cf2:	dd05      	ble.n	8009d00 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 8009cf4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8009cf6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8009cfa:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8009cfc:	605c      	str	r4, [r3, #4]
}
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 8009d00:	686a      	ldr	r2, [r5, #4]
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d002      	beq.n	8009d0c <add_to_waitq_locked+0x48>
 8009d06:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1ec      	bne.n	8009ce6 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 8009d0c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8009d0e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8009d12:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009d14:	606c      	str	r4, [r5, #4]
}
 8009d16:	e7f2      	b.n	8009cfe <add_to_waitq_locked+0x3a>

08009d18 <z_ready_thread>:
{
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	f04f 0310 	mov.w	r3, #16
 8009d1e:	f3ef 8411 	mrs	r4, BASEPRI
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8009d2a:	f7fd fea1 	bl	8007a70 <ready_thread>
	__asm__ volatile(
 8009d2e:	f384 8811 	msr	BASEPRI, r4
 8009d32:	f3bf 8f6f 	isb	sy
}
 8009d36:	bd10      	pop	{r4, pc}

08009d38 <z_thread_timeout>:
{
 8009d38:	b510      	push	{r4, lr}
 8009d3a:	4601      	mov	r1, r0
	__asm__ volatile(
 8009d3c:	f04f 0310 	mov.w	r3, #16
 8009d40:	f3ef 8411 	mrs	r4, BASEPRI
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8009d4c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8009d50:	f013 0f28 	tst.w	r3, #40	; 0x28
 8009d54:	d10d      	bne.n	8009d72 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 8009d56:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8009d5a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 8009d5c:	b10b      	cbz	r3, 8009d62 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 8009d5e:	f7ff ff67 	bl	8009c30 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8009d62:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 8009d66:	f023 0314 	bic.w	r3, r3, #20
 8009d6a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 8009d6e:	f7fd fe7f 	bl	8007a70 <ready_thread>
	__asm__ volatile(
 8009d72:	f384 8811 	msr	BASEPRI, r4
 8009d76:	f3bf 8f6f 	isb	sy
}
 8009d7a:	bd10      	pop	{r4, pc}

08009d7c <z_unpend1_no_timeout>:
{
 8009d7c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009d7e:	f04f 0310 	mov.w	r3, #16
 8009d82:	f3ef 8411 	mrs	r4, BASEPRI
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8009d8e:	f7ff ff93 	bl	8009cb8 <z_priq_dumb_best>
		if (thread != NULL) {
 8009d92:	4601      	mov	r1, r0
 8009d94:	b108      	cbz	r0, 8009d9a <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
 8009d96:	f7ff ff4b 	bl	8009c30 <unpend_thread_no_timeout>
	__asm__ volatile(
 8009d9a:	f384 8811 	msr	BASEPRI, r4
 8009d9e:	f3bf 8f6f 	isb	sy
}
 8009da2:	4608      	mov	r0, r1
 8009da4:	bd10      	pop	{r4, pc}

08009da6 <z_unpend_first_thread>:
{
 8009da6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8009da8:	f04f 0310 	mov.w	r3, #16
 8009dac:	f3ef 8511 	mrs	r5, BASEPRI
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8009db8:	f7ff ff7e 	bl	8009cb8 <z_priq_dumb_best>
		if (thread != NULL) {
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	b120      	cbz	r0, 8009dca <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 8009dc0:	f7ff ff36 	bl	8009c30 <unpend_thread_no_timeout>
 8009dc4:	3018      	adds	r0, #24
 8009dc6:	f000 f816 	bl	8009df6 <z_abort_timeout>
	__asm__ volatile(
 8009dca:	f385 8811 	msr	BASEPRI, r5
 8009dce:	f3bf 8f6f 	isb	sy
}
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	bd38      	pop	{r3, r4, r5, pc}

08009dd6 <z_unpend_all>:
{
 8009dd6:	b538      	push	{r3, r4, r5, lr}
 8009dd8:	4605      	mov	r5, r0
	int need_sched = 0;
 8009dda:	2000      	movs	r0, #0
	return list->head == list;
 8009ddc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009dde:	42a5      	cmp	r5, r4
 8009de0:	d000      	beq.n	8009de4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8009de2:	b904      	cbnz	r4, 8009de6 <z_unpend_all+0x10>
}
 8009de4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7ff ff3c 	bl	8009c64 <z_unpend_thread>
		z_ready_thread(thread);
 8009dec:	4620      	mov	r0, r4
 8009dee:	f7ff ff93 	bl	8009d18 <z_ready_thread>
		need_sched = 1;
 8009df2:	2001      	movs	r0, #1
 8009df4:	e7f2      	b.n	8009ddc <z_unpend_all+0x6>

08009df6 <z_abort_timeout>:
{
 8009df6:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009df8:	f04f 0210 	mov.w	r2, #16
 8009dfc:	f3ef 8411 	mrs	r4, BASEPRI
 8009e00:	f382 8811 	msr	BASEPRI, r2
 8009e04:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8009e08:	6803      	ldr	r3, [r0, #0]
 8009e0a:	b13b      	cbz	r3, 8009e1c <z_abort_timeout+0x26>
			remove_timeout(to);
 8009e0c:	f7fd ffe0 	bl	8007dd0 <remove_timeout>
			ret = 0;
 8009e10:	2000      	movs	r0, #0
	__asm__ volatile(
 8009e12:	f384 8811 	msr	BASEPRI, r4
 8009e16:	f3bf 8f6f 	isb	sy
}
 8009e1a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8009e1c:	f06f 0015 	mvn.w	r0, #21
 8009e20:	e7f7      	b.n	8009e12 <z_abort_timeout+0x1c>

08009e22 <z_set_timeout_expiry>:
{
 8009e22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e24:	4604      	mov	r4, r0
 8009e26:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
 8009e28:	f04f 0310 	mov.w	r3, #16
 8009e2c:	f3ef 8511 	mrs	r5, BASEPRI
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8009e38:	f7fd ffa2 	bl	8007d80 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8009e3c:	2801      	cmp	r0, #1
 8009e3e:	dd05      	ble.n	8009e4c <z_set_timeout_expiry+0x2a>
 8009e40:	42a0      	cmp	r0, r4
 8009e42:	9901      	ldr	r1, [sp, #4]
 8009e44:	db02      	blt.n	8009e4c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8009e46:	4620      	mov	r0, r4
 8009e48:	f7fc f832 	bl	8005eb0 <sys_clock_set_timeout>
	__asm__ volatile(
 8009e4c:	f385 8811 	msr	BASEPRI, r5
 8009e50:	f3bf 8f6f 	isb	sy
}
 8009e54:	b003      	add	sp, #12
 8009e56:	bd30      	pop	{r4, r5, pc}

08009e58 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 8009e58:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 8009e5a:	f7fe f8a7 	bl	8007fac <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 8009e5e:	bd08      	pop	{r3, pc}

08009e60 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
 8009e60:	f7fe b8a4 	b.w	8007fac <sys_clock_tick_get>

08009e64 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8009e64:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8009e68:	bf08      	it	eq
 8009e6a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8009e6e:	b538      	push	{r3, r4, r5, lr}
 8009e70:	4605      	mov	r5, r0
 8009e72:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8009e74:	d020      	beq.n	8009eb8 <sys_clock_timeout_end_calc+0x54>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8009e76:	ea51 0300 	orrs.w	r3, r1, r0
 8009e7a:	d103      	bne.n	8009e84 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 8009e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
 8009e80:	f7fe b894 	b.w	8007fac <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 8009e84:	f06f 0301 	mvn.w	r3, #1
 8009e88:	1a1b      	subs	r3, r3, r0
 8009e8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009e8e:	eb61 0204 	sbc.w	r2, r1, r4
 8009e92:	2a00      	cmp	r2, #0
 8009e94:	db02      	blt.n	8009e9c <sys_clock_timeout_end_calc+0x38>
			return Z_TICK_ABS(dt);
 8009e96:	4618      	mov	r0, r3
 8009e98:	4611      	mov	r1, r2
}
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
 8009e9c:	f7fe f886 	bl	8007fac <sys_clock_tick_get>
 8009ea0:	2d01      	cmp	r5, #1
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	f174 0400 	sbcs.w	r4, r4, #0
 8009ea8:	462b      	mov	r3, r5
 8009eaa:	bfbc      	itt	lt
 8009eac:	2301      	movlt	r3, #1
 8009eae:	2200      	movlt	r2, #0
 8009eb0:	1818      	adds	r0, r3, r0
 8009eb2:	eb41 0102 	adc.w	r1, r1, r2
 8009eb6:	e7f0      	b.n	8009e9a <sys_clock_timeout_end_calc+0x36>
		return UINT64_MAX;
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ebc:	4601      	mov	r1, r0
 8009ebe:	e7ec      	b.n	8009e9a <sys_clock_timeout_end_calc+0x36>

08009ec0 <k_timer_init>:
	timer->status = 0U;
 8009ec0:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 8009ec2:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 8009ec6:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
 8009eca:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 8009ece:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 8009ed2:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 8009ed4:	6343      	str	r3, [r0, #52]	; 0x34
}
 8009ed6:	4770      	bx	lr

08009ed8 <z_impl_k_timer_stop>:
{
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8009edc:	f7ff ff8b 	bl	8009df6 <z_abort_timeout>
	if (inactive) {
 8009ee0:	b9b0      	cbnz	r0, 8009f10 <z_impl_k_timer_stop+0x38>
	if (timer->stop_fn != NULL) {
 8009ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ee4:	b10b      	cbz	r3, 8009eea <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	4798      	blx	r3
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8009eea:	f104 0018 	add.w	r0, r4, #24
 8009eee:	f7ff ff45 	bl	8009d7c <z_unpend1_no_timeout>
		if (pending_thread != NULL) {
 8009ef2:	b168      	cbz	r0, 8009f10 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 8009ef4:	f7ff ff10 	bl	8009d18 <z_ready_thread>
	__asm__ volatile(
 8009ef8:	f04f 0310 	mov.w	r3, #16
 8009efc:	f3ef 8011 	mrs	r0, BASEPRI
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
}
 8009f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 8009f0c:	f7ff bebe 	b.w	8009c8c <z_reschedule_irqlock>
 8009f10:	bd10      	pop	{r4, pc}

08009f12 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 8009f12:	3204      	adds	r2, #4
{
 8009f14:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 8009f16:	4604      	mov	r4, r0
 8009f18:	d208      	bcs.n	8009f2c <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 8009f1a:	2600      	movs	r6, #0
 8009f1c:	2700      	movs	r7, #0
 8009f1e:	e9cd 6700 	strd	r6, r7, [sp]
 8009f22:	f041 0104 	orr.w	r1, r1, #4
 8009f26:	f000 f81b 	bl	8009f60 <k_heap_aligned_alloc>
	if (mem == NULL) {
 8009f2a:	b910      	cbnz	r0, 8009f32 <z_heap_aligned_alloc+0x20>
		return NULL;
 8009f2c:	2000      	movs	r0, #0
}
 8009f2e:	b002      	add	sp, #8
 8009f30:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
 8009f32:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
 8009f36:	e7fa      	b.n	8009f2e <z_heap_aligned_alloc+0x1c>

08009f38 <k_free>:
	if (ptr != NULL) {
 8009f38:	b120      	cbz	r0, 8009f44 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
 8009f3a:	1f01      	subs	r1, r0, #4
 8009f3c:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8009f40:	f000 b84f 	b.w	8009fe2 <k_heap_free>
}
 8009f44:	4770      	bx	lr

08009f46 <k_malloc>:
{
 8009f46:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
 8009f48:	2004      	movs	r0, #4
 8009f4a:	f7fe b8eb 	b.w	8008124 <k_aligned_alloc>

08009f4e <k_heap_init>:
{
 8009f4e:	b410      	push	{r4}
 8009f50:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 8009f54:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8009f58:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
 8009f5c:	f7fe bd9c 	b.w	8008a98 <sys_heap_init>

08009f60 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	b085      	sub	sp, #20
 8009f66:	4606      	mov	r6, r0
 8009f68:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 8009f6a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
 8009f6e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 8009f70:	f7ff ff78 	bl	8009e64 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 8009f74:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 8009f78:	4605      	mov	r5, r0
 8009f7a:	460f      	mov	r7, r1
 8009f7c:	f04f 0310 	mov.w	r3, #16
 8009f80:	f3ef 8411 	mrs	r4, BASEPRI
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 8009f8c:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 8009f90:	464a      	mov	r2, r9
 8009f92:	4641      	mov	r1, r8
 8009f94:	4630      	mov	r0, r6
 8009f96:	f7fe fd06 	bl	80089a6 <sys_heap_aligned_alloc>
 8009f9a:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
 8009f9c:	f7fe f806 	bl	8007fac <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 8009fa0:	9b03      	ldr	r3, [sp, #12]
 8009fa2:	b13b      	cbz	r3, 8009fb4 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
 8009fa4:	f384 8811 	msr	BASEPRI, r4
 8009fa8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	b005      	add	sp, #20
 8009fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
 8009fb4:	1a28      	subs	r0, r5, r0
 8009fb6:	eb67 0101 	sbc.w	r1, r7, r1
 8009fba:	2801      	cmp	r0, #1
 8009fbc:	f171 0200 	sbcs.w	r2, r1, #0
 8009fc0:	dbf0      	blt.n	8009fa4 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 8009fc2:	e9cd 0100 	strd	r0, r1, [sp]
 8009fc6:	465a      	mov	r2, fp
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4650      	mov	r0, sl
 8009fcc:	f7fd fc74 	bl	80078b8 <z_pend_curr>
	__asm__ volatile(
 8009fd0:	f04f 0310 	mov.w	r3, #16
 8009fd4:	f3ef 8411 	mrs	r4, BASEPRI
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	e7d6      	b.n	8009f90 <k_heap_aligned_alloc+0x30>

08009fe2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
 8009fe2:	b538      	push	{r3, r4, r5, lr}
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	f04f 0310 	mov.w	r3, #16
 8009fea:	f3ef 8511 	mrs	r5, BASEPRI
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
 8009ff6:	f7fe fc86 	bl	8008906 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
 8009ffa:	f104 000c 	add.w	r0, r4, #12
 8009ffe:	f7ff feea 	bl	8009dd6 <z_unpend_all>
 800a002:	b130      	cbz	r0, 800a012 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
 800a004:	4629      	mov	r1, r5
 800a006:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
 800a00a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
 800a00e:	f7fd bbcf 	b.w	80077b0 <z_reschedule>
	__asm__ volatile(
 800a012:	f385 8811 	msr	BASEPRI, r5
 800a016:	f3bf 8f6f 	isb	sy
}
 800a01a:	bd38      	pop	{r3, r4, r5, pc}

0800a01c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800a01c:	4770      	bx	lr

0800a01e <memcmp>:
 800a01e:	b510      	push	{r4, lr}
 800a020:	3901      	subs	r1, #1
 800a022:	4402      	add	r2, r0
 800a024:	4290      	cmp	r0, r2
 800a026:	d101      	bne.n	800a02c <memcmp+0xe>
 800a028:	2000      	movs	r0, #0
 800a02a:	e005      	b.n	800a038 <memcmp+0x1a>
 800a02c:	7803      	ldrb	r3, [r0, #0]
 800a02e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a032:	42a3      	cmp	r3, r4
 800a034:	d001      	beq.n	800a03a <memcmp+0x1c>
 800a036:	1b18      	subs	r0, r3, r4
 800a038:	bd10      	pop	{r4, pc}
 800a03a:	3001      	adds	r0, #1
 800a03c:	e7f2      	b.n	800a024 <memcmp+0x6>

0800a03e <memcpy>:
 800a03e:	440a      	add	r2, r1
 800a040:	4291      	cmp	r1, r2
 800a042:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a046:	d100      	bne.n	800a04a <memcpy+0xc>
 800a048:	4770      	bx	lr
 800a04a:	b510      	push	{r4, lr}
 800a04c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a050:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a054:	4291      	cmp	r1, r2
 800a056:	d1f9      	bne.n	800a04c <memcpy+0xe>
 800a058:	bd10      	pop	{r4, pc}

0800a05a <memset>:
 800a05a:	4402      	add	r2, r0
 800a05c:	4603      	mov	r3, r0
 800a05e:	4293      	cmp	r3, r2
 800a060:	d100      	bne.n	800a064 <memset+0xa>
 800a062:	4770      	bx	lr
 800a064:	f803 1b01 	strb.w	r1, [r3], #1
 800a068:	e7f9      	b.n	800a05e <memset+0x4>

0800a06a <strncpy>:
 800a06a:	b510      	push	{r4, lr}
 800a06c:	3901      	subs	r1, #1
 800a06e:	4603      	mov	r3, r0
 800a070:	b132      	cbz	r2, 800a080 <strncpy+0x16>
 800a072:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a076:	f803 4b01 	strb.w	r4, [r3], #1
 800a07a:	3a01      	subs	r2, #1
 800a07c:	2c00      	cmp	r4, #0
 800a07e:	d1f7      	bne.n	800a070 <strncpy+0x6>
 800a080:	441a      	add	r2, r3
 800a082:	2100      	movs	r1, #0
 800a084:	4293      	cmp	r3, r2
 800a086:	d100      	bne.n	800a08a <strncpy+0x20>
 800a088:	bd10      	pop	{r4, pc}
 800a08a:	f803 1b01 	strb.w	r1, [r3], #1
 800a08e:	e7f9      	b.n	800a084 <strncpy+0x1a>

0800a090 <strnlen>:
 800a090:	b510      	push	{r4, lr}
 800a092:	4602      	mov	r2, r0
 800a094:	4401      	add	r1, r0
 800a096:	428a      	cmp	r2, r1
 800a098:	4613      	mov	r3, r2
 800a09a:	d003      	beq.n	800a0a4 <strnlen+0x14>
 800a09c:	781c      	ldrb	r4, [r3, #0]
 800a09e:	3201      	adds	r2, #1
 800a0a0:	2c00      	cmp	r4, #0
 800a0a2:	d1f8      	bne.n	800a096 <strnlen+0x6>
 800a0a4:	1a18      	subs	r0, r3, r0
 800a0a6:	bd10      	pop	{r4, pc}
