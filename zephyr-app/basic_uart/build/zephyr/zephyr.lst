
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	00 20 00 20 d9 63 00 08 cb 94 00 08 05 64 00 08     . . .c.......d..
 8000010:	05 64 00 08 05 64 00 08 05 64 00 08 00 00 00 00     .d...d...d......
	...
 800002c:	7d 60 00 08 05 64 00 08 00 00 00 00 ed 5f 00 08     }`...d......._..
 800003c:	f9 5d 00 08                                         .]..

08000040 <_irq_vector_table>:
 8000040:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000050:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000060:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000070:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000080:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000090:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 80000a0:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 80000b0:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 80000c0:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 80000d0:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 80000e0:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 80000f0:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000100:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000110:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000120:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000130:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000140:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000150:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000160:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000170:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000180:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 8000190:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 80001a0:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 80001b0:	b1 63 00 08 b1 63 00 08 b1 63 00 08 b1 63 00 08     .c...c...c...c..
 80001c0:	b1 63 00 08                                         .c..

Disassembly of section text:

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 b978 	b.w	8000d0c <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460e      	mov	r6, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	468e      	mov	lr, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14c      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4694      	mov	ip, r2
 8000a48:	d967      	bls.n	8000b1a <__udivmoddi4+0xe6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b152      	cbz	r2, 8000a66 <__udivmoddi4+0x32>
 8000a50:	fa01 f302 	lsl.w	r3, r1, r2
 8000a54:	f1c2 0120 	rsb	r1, r2, #32
 8000a58:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a60:	ea41 0e03 	orr.w	lr, r1, r3
 8000a64:	4094      	lsls	r4, r2
 8000a66:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a6a:	0c21      	lsrs	r1, r4, #16
 8000a6c:	fbbe f6f8 	udiv	r6, lr, r8
 8000a70:	fa1f f78c 	uxth.w	r7, ip
 8000a74:	fb08 e316 	mls	r3, r8, r6, lr
 8000a78:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7c:	fb06 f107 	mul.w	r1, r6, r7
 8000a80:	4299      	cmp	r1, r3
 8000a82:	d90a      	bls.n	8000a9a <__udivmoddi4+0x66>
 8000a84:	eb1c 0303 	adds.w	r3, ip, r3
 8000a88:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a8c:	f080 811e 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a90:	4299      	cmp	r1, r3
 8000a92:	f240 811b 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a96:	3e02      	subs	r6, #2
 8000a98:	4463      	add	r3, ip
 8000a9a:	1a5b      	subs	r3, r3, r1
 8000a9c:	b2a4      	uxth	r4, r4
 8000a9e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa2:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aaa:	fb00 f707 	mul.w	r7, r0, r7
 8000aae:	42a7      	cmp	r7, r4
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aba:	f080 8109 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abe:	42a7      	cmp	r7, r4
 8000ac0:	f240 8106 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac4:	4464      	add	r4, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1be4      	subs	r4, r4, r7
 8000aca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d4      	lsrs	r4, r2
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e9c5 4300 	strd	r4, r3, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d908      	bls.n	8000af4 <__udivmoddi4+0xc0>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2100      	movs	r1, #0
 8000aea:	e9c5 0600 	strd	r0, r6, [r5]
 8000aee:	4608      	mov	r0, r1
 8000af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af4:	fab3 f183 	clz	r1, r3
 8000af8:	2900      	cmp	r1, #0
 8000afa:	d149      	bne.n	8000b90 <__udivmoddi4+0x15c>
 8000afc:	42b3      	cmp	r3, r6
 8000afe:	d302      	bcc.n	8000b06 <__udivmoddi4+0xd2>
 8000b00:	4282      	cmp	r2, r0
 8000b02:	f200 80ff 	bhi.w	8000d04 <__udivmoddi4+0x2d0>
 8000b06:	1a84      	subs	r4, r0, r2
 8000b08:	eb66 0303 	sbc.w	r3, r6, r3
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	469e      	mov	lr, r3
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d0e2      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b14:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b18:	e7df      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b1a:	b902      	cbnz	r2, 8000b1e <__udivmoddi4+0xea>
 8000b1c:	deff      	udf	#255	; 0xff
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	f040 808e 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b28:	eba1 060c 	sub.w	r6, r1, ip
 8000b2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b30:	fa1f f38c 	uxth.w	r3, ip
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb6 fef7 	udiv	lr, r6, r7
 8000b3a:	fb07 601e 	mls	r0, r7, lr, r6
 8000b3e:	0c26      	lsrs	r6, r4, #16
 8000b40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b44:	fb03 f00e 	mul.w	r0, r3, lr
 8000b48:	42b0      	cmp	r0, r6
 8000b4a:	d908      	bls.n	8000b5e <__udivmoddi4+0x12a>
 8000b4c:	eb1c 0606 	adds.w	r6, ip, r6
 8000b50:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8000b54:	d202      	bcs.n	8000b5c <__udivmoddi4+0x128>
 8000b56:	42b0      	cmp	r0, r6
 8000b58:	f200 80d0 	bhi.w	8000cfc <__udivmoddi4+0x2c8>
 8000b5c:	46c6      	mov	lr, r8
 8000b5e:	1a36      	subs	r6, r6, r0
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	fbb6 f0f7 	udiv	r0, r6, r7
 8000b66:	fb07 6610 	mls	r6, r7, r0, r6
 8000b6a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b6e:	fb00 f303 	mul.w	r3, r0, r3
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0x154>
 8000b76:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7a:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x152>
 8000b80:	42a3      	cmp	r3, r4
 8000b82:	f200 80b8 	bhi.w	8000cf6 <__udivmoddi4+0x2c2>
 8000b86:	4630      	mov	r0, r6
 8000b88:	1ae4      	subs	r4, r4, r3
 8000b8a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000b8e:	e79f      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b90:	f1c1 0720 	rsb	r7, r1, #32
 8000b94:	fa22 f407 	lsr.w	r4, r2, r7
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	4323      	orrs	r3, r4
 8000b9c:	fa06 fc01 	lsl.w	ip, r6, r1
 8000ba0:	fa26 f407 	lsr.w	r4, r6, r7
 8000ba4:	fa20 f607 	lsr.w	r6, r0, r7
 8000ba8:	ea46 060c 	orr.w	r6, r6, ip
 8000bac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb0:	fa00 f801 	lsl.w	r8, r0, r1
 8000bb4:	fbb4 fef9 	udiv	lr, r4, r9
 8000bb8:	0c30      	lsrs	r0, r6, #16
 8000bba:	fa1f fc83 	uxth.w	ip, r3
 8000bbe:	fb09 441e 	mls	r4, r9, lr, r4
 8000bc2:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000bc6:	fb0e f00c 	mul.w	r0, lr, ip
 8000bca:	42a0      	cmp	r0, r4
 8000bcc:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x1b4>
 8000bd2:	191c      	adds	r4, r3, r4
 8000bd4:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000bd8:	f080 808b 	bcs.w	8000cf2 <__udivmoddi4+0x2be>
 8000bdc:	42a0      	cmp	r0, r4
 8000bde:	f240 8088 	bls.w	8000cf2 <__udivmoddi4+0x2be>
 8000be2:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be6:	441c      	add	r4, r3
 8000be8:	1a24      	subs	r4, r4, r0
 8000bea:	b2b6      	uxth	r6, r6
 8000bec:	fbb4 f0f9 	udiv	r0, r4, r9
 8000bf0:	fb09 4410 	mls	r4, r9, r0, r4
 8000bf4:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x1dc>
 8000c00:	191c      	adds	r4, r3, r4
 8000c02:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
 8000c06:	d270      	bcs.n	8000cea <__udivmoddi4+0x2b6>
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d96e      	bls.n	8000cea <__udivmoddi4+0x2b6>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	441c      	add	r4, r3
 8000c10:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c14:	fba0 e602 	umull	lr, r6, r0, r2
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	42b4      	cmp	r4, r6
 8000c1e:	46f4      	mov	ip, lr
 8000c20:	46b1      	mov	r9, r6
 8000c22:	d359      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c24:	d056      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d06e      	beq.n	8000d08 <__udivmoddi4+0x2d4>
 8000c2a:	ebb8 030c 	subs.w	r3, r8, ip
 8000c2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c32:	40cb      	lsrs	r3, r1
 8000c34:	fa04 f707 	lsl.w	r7, r4, r7
 8000c38:	431f      	orrs	r7, r3
 8000c3a:	40cc      	lsrs	r4, r1
 8000c3c:	e9c5 7400 	strd	r7, r4, [r5]
 8000c40:	2100      	movs	r1, #0
 8000c42:	e74a      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f100 	lsr.w	r1, r4, r0
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	fa06 f302 	lsl.w	r3, r6, r2
 8000c54:	fa26 f000 	lsr.w	r0, r6, r0
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	ea41 0603 	orr.w	r6, r1, r3
 8000c60:	fbb0 f1f7 	udiv	r1, r0, r7
 8000c64:	fa1f f38c 	uxth.w	r3, ip
 8000c68:	fb07 0e11 	mls	lr, r7, r1, r0
 8000c6c:	0c30      	lsrs	r0, r6, #16
 8000c6e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c72:	fb01 fe03 	mul.w	lr, r1, r3
 8000c76:	4586      	cmp	lr, r0
 8000c78:	fa04 f402 	lsl.w	r4, r4, r2
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x25c>
 8000c7e:	eb1c 0000 	adds.w	r0, ip, r0
 8000c82:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000c86:	d232      	bcs.n	8000cee <__udivmoddi4+0x2ba>
 8000c88:	4586      	cmp	lr, r0
 8000c8a:	d930      	bls.n	8000cee <__udivmoddi4+0x2ba>
 8000c8c:	3902      	subs	r1, #2
 8000c8e:	4460      	add	r0, ip
 8000c90:	eba0 000e 	sub.w	r0, r0, lr
 8000c94:	b2b6      	uxth	r6, r6
 8000c96:	fbb0 fef7 	udiv	lr, r0, r7
 8000c9a:	fb07 001e 	mls	r0, r7, lr, r0
 8000c9e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca2:	fb0e f003 	mul.w	r0, lr, r3
 8000ca6:	42b0      	cmp	r0, r6
 8000ca8:	d909      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000caa:	eb1c 0606 	adds.w	r6, ip, r6
 8000cae:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8000cb2:	d218      	bcs.n	8000ce6 <__udivmoddi4+0x2b2>
 8000cb4:	42b0      	cmp	r0, r6
 8000cb6:	d916      	bls.n	8000ce6 <__udivmoddi4+0x2b2>
 8000cb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cbc:	4466      	add	r6, ip
 8000cbe:	1a36      	subs	r6, r6, r0
 8000cc0:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
 8000cc4:	e737      	b.n	8000b36 <__udivmoddi4+0x102>
 8000cc6:	4629      	mov	r1, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e706      	b.n	8000ada <__udivmoddi4+0xa6>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e4      	b.n	8000a9a <__udivmoddi4+0x66>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f9      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cd4:	45f0      	cmp	r8, lr
 8000cd6:	d2a6      	bcs.n	8000c26 <__udivmoddi4+0x1f2>
 8000cd8:	ebbe 0c02 	subs.w	ip, lr, r2
 8000cdc:	eb66 0303 	sbc.w	r3, r6, r3
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	4699      	mov	r9, r3
 8000ce4:	e79f      	b.n	8000c26 <__udivmoddi4+0x1f2>
 8000ce6:	46c6      	mov	lr, r8
 8000ce8:	e7e9      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000cea:	4630      	mov	r0, r6
 8000cec:	e790      	b.n	8000c10 <__udivmoddi4+0x1dc>
 8000cee:	4641      	mov	r1, r8
 8000cf0:	e7ce      	b.n	8000c90 <__udivmoddi4+0x25c>
 8000cf2:	46d6      	mov	lr, sl
 8000cf4:	e778      	b.n	8000be8 <__udivmoddi4+0x1b4>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e745      	b.n	8000b88 <__udivmoddi4+0x154>
 8000cfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d00:	4466      	add	r6, ip
 8000d02:	e72c      	b.n	8000b5e <__udivmoddi4+0x12a>
 8000d04:	4608      	mov	r0, r1
 8000d06:	e703      	b.n	8000b10 <__udivmoddi4+0xdc>
 8000d08:	4629      	mov	r1, r5
 8000d0a:	e6e6      	b.n	8000ada <__udivmoddi4+0xa6>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <__gedf2>:
 8000d10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000d14:	e006      	b.n	8000d24 <__cmpdf2+0x4>
 8000d16:	bf00      	nop

08000d18 <__ledf2>:
 8000d18:	f04f 0c01 	mov.w	ip, #1
 8000d1c:	e002      	b.n	8000d24 <__cmpdf2+0x4>
 8000d1e:	bf00      	nop

08000d20 <__cmpdf2>:
 8000d20:	f04f 0c01 	mov.w	ip, #1
 8000d24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d34:	bf18      	it	ne
 8000d36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d3a:	d01b      	beq.n	8000d74 <__cmpdf2+0x54>
 8000d3c:	b001      	add	sp, #4
 8000d3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d42:	bf0c      	ite	eq
 8000d44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000d48:	ea91 0f03 	teqne	r1, r3
 8000d4c:	bf02      	ittt	eq
 8000d4e:	ea90 0f02 	teqeq	r0, r2
 8000d52:	2000      	moveq	r0, #0
 8000d54:	4770      	bxeq	lr
 8000d56:	f110 0f00 	cmn.w	r0, #0
 8000d5a:	ea91 0f03 	teq	r1, r3
 8000d5e:	bf58      	it	pl
 8000d60:	4299      	cmppl	r1, r3
 8000d62:	bf08      	it	eq
 8000d64:	4290      	cmpeq	r0, r2
 8000d66:	bf2c      	ite	cs
 8000d68:	17d8      	asrcs	r0, r3, #31
 8000d6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d6e:	f040 0001 	orr.w	r0, r0, #1
 8000d72:	4770      	bx	lr
 8000d74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d7c:	d102      	bne.n	8000d84 <__cmpdf2+0x64>
 8000d7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d82:	d107      	bne.n	8000d94 <__cmpdf2+0x74>
 8000d84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d8c:	d1d6      	bne.n	8000d3c <__cmpdf2+0x1c>
 8000d8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d92:	d0d3      	beq.n	8000d3c <__cmpdf2+0x1c>
 8000d94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <__aeabi_cdrcmple>:
 8000d9c:	4684      	mov	ip, r0
 8000d9e:	4610      	mov	r0, r2
 8000da0:	4662      	mov	r2, ip
 8000da2:	468c      	mov	ip, r1
 8000da4:	4619      	mov	r1, r3
 8000da6:	4663      	mov	r3, ip
 8000da8:	e000      	b.n	8000dac <__aeabi_cdcmpeq>
 8000daa:	bf00      	nop

08000dac <__aeabi_cdcmpeq>:
 8000dac:	b501      	push	{r0, lr}
 8000dae:	f7ff ffb7 	bl	8000d20 <__cmpdf2>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	bf48      	it	mi
 8000db6:	f110 0f00 	cmnmi.w	r0, #0
 8000dba:	bd01      	pop	{r0, pc}

08000dbc <__aeabi_dcmpeq>:
 8000dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc0:	f7ff fff4 	bl	8000dac <__aeabi_cdcmpeq>
 8000dc4:	bf0c      	ite	eq
 8000dc6:	2001      	moveq	r0, #1
 8000dc8:	2000      	movne	r0, #0
 8000dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dce:	bf00      	nop

08000dd0 <__aeabi_dcmplt>:
 8000dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd4:	f7ff ffea 	bl	8000dac <__aeabi_cdcmpeq>
 8000dd8:	bf34      	ite	cc
 8000dda:	2001      	movcc	r0, #1
 8000ddc:	2000      	movcs	r0, #0
 8000dde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de2:	bf00      	nop

08000de4 <__aeabi_dcmple>:
 8000de4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de8:	f7ff ffe0 	bl	8000dac <__aeabi_cdcmpeq>
 8000dec:	bf94      	ite	ls
 8000dee:	2001      	movls	r0, #1
 8000df0:	2000      	movhi	r0, #0
 8000df2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df6:	bf00      	nop

08000df8 <__aeabi_dcmpge>:
 8000df8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dfc:	f7ff ffce 	bl	8000d9c <__aeabi_cdrcmple>
 8000e00:	bf94      	ite	ls
 8000e02:	2001      	movls	r0, #1
 8000e04:	2000      	movhi	r0, #0
 8000e06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0a:	bf00      	nop

08000e0c <__aeabi_dcmpgt>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff ffc4 	bl	8000d9c <__aeabi_cdrcmple>
 8000e14:	bf34      	ite	cc
 8000e16:	2001      	movcc	r0, #1
 8000e18:	2000      	movcs	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_dcmpun>:
 8000e20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e28:	d102      	bne.n	8000e30 <__aeabi_dcmpun+0x10>
 8000e2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e2e:	d10a      	bne.n	8000e46 <__aeabi_dcmpun+0x26>
 8000e30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e38:	d102      	bne.n	8000e40 <__aeabi_dcmpun+0x20>
 8000e3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e3e:	d102      	bne.n	8000e46 <__aeabi_dcmpun+0x26>
 8000e40:	f04f 0000 	mov.w	r0, #0
 8000e44:	4770      	bx	lr
 8000e46:	f04f 0001 	mov.w	r0, #1
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_d2iz>:
 8000e4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e54:	d215      	bcs.n	8000e82 <__aeabi_d2iz+0x36>
 8000e56:	d511      	bpl.n	8000e7c <__aeabi_d2iz+0x30>
 8000e58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e60:	d912      	bls.n	8000e88 <__aeabi_d2iz+0x3c>
 8000e62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e72:	fa23 f002 	lsr.w	r0, r3, r2
 8000e76:	bf18      	it	ne
 8000e78:	4240      	negne	r0, r0
 8000e7a:	4770      	bx	lr
 8000e7c:	f04f 0000 	mov.w	r0, #0
 8000e80:	4770      	bx	lr
 8000e82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e86:	d105      	bne.n	8000e94 <__aeabi_d2iz+0x48>
 8000e88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e92:	4770      	bx	lr
 8000e94:	f04f 0000 	mov.w	r0, #0
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <strcmp>:
 8000e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ea4:	2a01      	cmp	r2, #1
 8000ea6:	bf28      	it	cs
 8000ea8:	429a      	cmpcs	r2, r3
 8000eaa:	d0f7      	beq.n	8000e9c <strcmp>
 8000eac:	1ad0      	subs	r0, r2, r3
 8000eae:	4770      	bx	lr

08000eb0 <strlen>:
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	d1fb      	bne.n	8000eb2 <strlen+0x2>
 8000eba:	1a18      	subs	r0, r3, r0
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	4770      	bx	lr

08000ec0 <_Z19euler_to_quaternionfffPf>:

inline float deg(float radians) {
	return radians * 180.0 / M_PI;
}

void euler_to_quaternion(float roll, float pitch, float yaw, float* quaternion) {
 8000ec0:	b510      	push	{r4, lr}
 8000ec2:	ed2d 8b0a 	vpush	{d8-d12}
	float& x = quaternion[1];
	float& y = quaternion[2];
	float& z = quaternion[3];

	// taken from https://www.euclideanspace.com/maths/geometry/rotations/conversions/eulerToQuaternion/index.htm
	float c1 = cos(rad(yaw/2));
 8000ec6:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
	return degrees * M_PI / 180.0;
 8000eca:	ee61 7a08 	vmul.f32	s15, s2, s16
void euler_to_quaternion(float roll, float pitch, float yaw, float* quaternion) {
 8000ece:	4604      	mov	r4, r0
	return degrees * M_PI / 180.0;
 8000ed0:	ee17 0a90 	vmov	r0, s15
void euler_to_quaternion(float roll, float pitch, float yaw, float* quaternion) {
 8000ed4:	eef0 9a40 	vmov.f32	s19, s0
 8000ed8:	eeb0 9a60 	vmov.f32	s18, s1
	return degrees * M_PI / 180.0;
 8000edc:	f7ff fad8 	bl	8000490 <__aeabi_f2d>
 8000ee0:	a34f      	add	r3, pc, #316	; (adr r3, 8001020 <_Z19euler_to_quaternionfffPf+0x160>)
 8000ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee6:	f7ff fb2b 	bl	8000540 <__aeabi_dmul>
 8000eea:	4b4f      	ldr	r3, [pc, #316]	; (8001028 <_Z19euler_to_quaternionfffPf+0x168>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	f7ff fc51 	bl	8000794 <__aeabi_ddiv>
 8000ef2:	f7ff fd37 	bl	8000964 <__aeabi_d2f>
	float c1 = cos(rad(yaw/2));
 8000ef6:	f7ff facb 	bl	8000490 <__aeabi_f2d>
 8000efa:	ec41 0b10 	vmov	d0, r0, r1
 8000efe:	ec41 0b1a 	vmov	d10, r0, r1
 8000f02:	f001 fb41 	bl	8002588 <cos>
 8000f06:	ec51 0b10 	vmov	r0, r1, d0
 8000f0a:	f7ff fd2b 	bl	8000964 <__aeabi_d2f>
	return degrees * M_PI / 180.0;
 8000f0e:	ee69 7a08 	vmul.f32	s15, s18, s16
	float c1 = cos(rad(yaw/2));
 8000f12:	ee08 0a90 	vmov	s17, r0
	return degrees * M_PI / 180.0;
 8000f16:	ee17 0a90 	vmov	r0, s15
 8000f1a:	f7ff fab9 	bl	8000490 <__aeabi_f2d>
 8000f1e:	a340      	add	r3, pc, #256	; (adr r3, 8001020 <_Z19euler_to_quaternionfffPf+0x160>)
 8000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f24:	f7ff fb0c 	bl	8000540 <__aeabi_dmul>
 8000f28:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <_Z19euler_to_quaternionfffPf+0x168>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f7ff fc32 	bl	8000794 <__aeabi_ddiv>
 8000f30:	f7ff fd18 	bl	8000964 <__aeabi_d2f>
	float c2 = cos(rad(pitch/2));
 8000f34:	f7ff faac 	bl	8000490 <__aeabi_f2d>
 8000f38:	ec41 0b10 	vmov	d0, r0, r1
 8000f3c:	ec41 0b1c 	vmov	d12, r0, r1
 8000f40:	f001 fb22 	bl	8002588 <cos>
 8000f44:	ec51 0b10 	vmov	r0, r1, d0
 8000f48:	f7ff fd0c 	bl	8000964 <__aeabi_d2f>
	return degrees * M_PI / 180.0;
 8000f4c:	ee69 7a88 	vmul.f32	s15, s19, s16
	float c2 = cos(rad(pitch/2));
 8000f50:	ee09 0a10 	vmov	s18, r0
	return degrees * M_PI / 180.0;
 8000f54:	ee17 0a90 	vmov	r0, s15
 8000f58:	f7ff fa9a 	bl	8000490 <__aeabi_f2d>
 8000f5c:	a330      	add	r3, pc, #192	; (adr r3, 8001020 <_Z19euler_to_quaternionfffPf+0x160>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff faed 	bl	8000540 <__aeabi_dmul>
 8000f66:	4b30      	ldr	r3, [pc, #192]	; (8001028 <_Z19euler_to_quaternionfffPf+0x168>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f7ff fc13 	bl	8000794 <__aeabi_ddiv>
 8000f6e:	f7ff fcf9 	bl	8000964 <__aeabi_d2f>
	float c3 = cos(rad(roll/2));
 8000f72:	f7ff fa8d 	bl	8000490 <__aeabi_f2d>
 8000f76:	ec41 0b10 	vmov	d0, r0, r1
 8000f7a:	ec41 0b1b 	vmov	d11, r0, r1
 8000f7e:	f001 fb03 	bl	8002588 <cos>
 8000f82:	ec51 0b10 	vmov	r0, r1, d0
 8000f86:	f7ff fced 	bl	8000964 <__aeabi_d2f>
	float s1 = sin(rad(yaw/2));
 8000f8a:	eeb0 0a4a 	vmov.f32	s0, s20
 8000f8e:	eef0 0a6a 	vmov.f32	s1, s21
	float c3 = cos(rad(roll/2));
 8000f92:	ee08 0a10 	vmov	s16, r0
	float s1 = sin(rad(yaw/2));
 8000f96:	f001 fb3f 	bl	8002618 <sin>
 8000f9a:	ec51 0b10 	vmov	r0, r1, d0
 8000f9e:	f7ff fce1 	bl	8000964 <__aeabi_d2f>
	float s2 = sin(rad(pitch/2));
 8000fa2:	eeb0 0a4c 	vmov.f32	s0, s24
 8000fa6:	eef0 0a6c 	vmov.f32	s1, s25
	float s1 = sin(rad(yaw/2));
 8000faa:	ee0a 0a10 	vmov	s20, r0
	float s2 = sin(rad(pitch/2));
 8000fae:	f001 fb33 	bl	8002618 <sin>
 8000fb2:	ec51 0b10 	vmov	r0, r1, d0
 8000fb6:	f7ff fcd5 	bl	8000964 <__aeabi_d2f>
	float s3 = sin(rad(roll/2));
 8000fba:	eeb0 0a4b 	vmov.f32	s0, s22
 8000fbe:	eef0 0a6b 	vmov.f32	s1, s23
	float s2 = sin(rad(pitch/2));
 8000fc2:	ee09 0a90 	vmov	s19, r0
	float s3 = sin(rad(roll/2));
 8000fc6:	f001 fb27 	bl	8002618 <sin>
 8000fca:	ec51 0b10 	vmov	r0, r1, d0
 8000fce:	f7ff fcc9 	bl	8000964 <__aeabi_d2f>

	w = c1 * c2 * c3 - s1 * s2 * s3;
 8000fd2:	ee2a 6a29 	vmul.f32	s12, s20, s19
	float s3 = sin(rad(roll/2));
 8000fd6:	ee07 0a90 	vmov	s15, r0
	w = c1 * c2 * c3 - s1 * s2 * s3;
 8000fda:	ee28 7a89 	vmul.f32	s14, s17, s18
 8000fde:	ee67 6ac6 	vnmul.f32	s13, s15, s12
	x = s1 * s2 * c3 + c1 * c2 * s3;
	y = s1 * c2 * s3 + c1 * s2 * c3;
 8000fe2:	ee29 9a0a 	vmul.f32	s18, s18, s20
	w = c1 * c2 * c3 - s1 * s2 * s3;
 8000fe6:	eee7 6a08 	vfma.f32	s13, s14, s16
	x = s1 * s2 * c3 + c1 * c2 * s3;
 8000fea:	ee27 7a27 	vmul.f32	s14, s14, s15
	y = s1 * c2 * s3 + c1 * s2 * c3;
 8000fee:	ee68 8aa9 	vmul.f32	s17, s17, s19
	x = s1 * s2 * c3 + c1 * c2 * s3;
 8000ff2:	eea6 7a08 	vfma.f32	s14, s12, s16
	w = c1 * c2 * c3 - s1 * s2 * s3;
 8000ff6:	edc4 6a00 	vstr	s13, [r4]
	x = s1 * s2 * c3 + c1 * c2 * s3;
 8000ffa:	ed84 7a01 	vstr	s14, [r4, #4]
	y = s1 * c2 * s3 + c1 * s2 * c3;
 8000ffe:	ee28 7a88 	vmul.f32	s14, s17, s16
	z = c1 * s2 * s3 - s1 * c2 * c3;
 8001002:	ee28 8a49 	vnmul.f32	s16, s16, s18
	y = s1 * c2 * s3 + c1 * s2 * c3;
 8001006:	eea9 7a27 	vfma.f32	s14, s18, s15
	z = c1 * s2 * s3 - s1 * c2 * c3;
 800100a:	eea8 8aa7 	vfma.f32	s16, s17, s15
	y = s1 * c2 * s3 + c1 * s2 * c3;
 800100e:	ed84 7a02 	vstr	s14, [r4, #8]
	z = c1 * s2 * s3 - s1 * c2 * c3;
 8001012:	ed84 8a03 	vstr	s16, [r4, #12]
}
 8001016:	ecbd 8b0a 	vpop	{d8-d12}
 800101a:	bd10      	pop	{r4, pc}
 800101c:	f3af 8000 	nop.w
 8001020:	54442d18 	.word	0x54442d18
 8001024:	400921fb 	.word	0x400921fb
 8001028:	40668000 	.word	0x40668000
 800102c:	00000000 	.word	0x00000000

08001030 <_Z17calculate_headingRK11coordinatesS1_>:

float calculate_heading(const coordinates& p1, const coordinates& p2) {
 8001030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 8001034:	ed91 7a03 	vldr	s14, [r1, #12]
 8001038:	edd0 7a03 	vldr	s15, [r0, #12]
float calculate_heading(const coordinates& p1, const coordinates& p2) {
 800103c:	ed2d 8b02 	vpush	{d8}
	return degrees * M_PI / 180.0;
 8001040:	ee77 7a67 	vsub.f32	s15, s14, s15
float calculate_heading(const coordinates& p1, const coordinates& p2) {
 8001044:	b085      	sub	sp, #20
 8001046:	4605      	mov	r5, r0
	return degrees * M_PI / 180.0;
 8001048:	ee17 0a90 	vmov	r0, s15
float calculate_heading(const coordinates& p1, const coordinates& p2) {
 800104c:	460c      	mov	r4, r1
	return degrees * M_PI / 180.0;
 800104e:	f7ff fa1f 	bl	8000490 <__aeabi_f2d>
 8001052:	a377      	add	r3, pc, #476	; (adr r3, 8001230 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fa72 	bl	8000540 <__aeabi_dmul>
 800105c:	4b76      	ldr	r3, [pc, #472]	; (8001238 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 800105e:	2200      	movs	r2, #0
 8001060:	f7ff fb98 	bl	8000794 <__aeabi_ddiv>
 8001064:	f7ff fc7e 	bl	8000964 <__aeabi_d2f>
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 8001068:	f7ff fa12 	bl	8000490 <__aeabi_f2d>
 800106c:	ec41 0b10 	vmov	d0, r0, r1
 8001070:	f001 fad2 	bl	8002618 <sin>
	return degrees * M_PI / 180.0;
 8001074:	68a0      	ldr	r0, [r4, #8]
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 8001076:	ed8d 0b00 	vstr	d0, [sp]
	return degrees * M_PI / 180.0;
 800107a:	f7ff fa09 	bl	8000490 <__aeabi_f2d>
 800107e:	a36c      	add	r3, pc, #432	; (adr r3, 8001230 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fa5c 	bl	8000540 <__aeabi_dmul>
 8001088:	4b6b      	ldr	r3, [pc, #428]	; (8001238 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 800108a:	2200      	movs	r2, #0
 800108c:	f7ff fb82 	bl	8000794 <__aeabi_ddiv>
 8001090:	f7ff fc68 	bl	8000964 <__aeabi_d2f>
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 8001094:	f7ff f9fc 	bl	8000490 <__aeabi_f2d>
 8001098:	ec41 0b10 	vmov	d0, r0, r1
 800109c:	f001 fa74 	bl	8002588 <cos>
	return degrees * M_PI / 180.0;
 80010a0:	68a8      	ldr	r0, [r5, #8]
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 80010a2:	ed8d 0b02 	vstr	d0, [sp, #8]
	return degrees * M_PI / 180.0;
 80010a6:	f7ff f9f3 	bl	8000490 <__aeabi_f2d>
 80010aa:	a361      	add	r3, pc, #388	; (adr r3, 8001230 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fa46 	bl	8000540 <__aeabi_dmul>
 80010b4:	4b60      	ldr	r3, [pc, #384]	; (8001238 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f7ff fb6c 	bl	8000794 <__aeabi_ddiv>
 80010bc:	f7ff fc52 	bl	8000964 <__aeabi_d2f>
	float x = cos(rad(p1.latitude)) * sin(rad(p2.latitude));
 80010c0:	f7ff f9e6 	bl	8000490 <__aeabi_f2d>
 80010c4:	ec41 0b10 	vmov	d0, r0, r1
 80010c8:	f001 fa5e 	bl	8002588 <cos>
	return degrees * M_PI / 180.0;
 80010cc:	68a0      	ldr	r0, [r4, #8]
	float x = cos(rad(p1.latitude)) * sin(rad(p2.latitude));
 80010ce:	ec5b ab10 	vmov	sl, fp, d0
	return degrees * M_PI / 180.0;
 80010d2:	f7ff f9dd 	bl	8000490 <__aeabi_f2d>
 80010d6:	a356      	add	r3, pc, #344	; (adr r3, 8001230 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff fa30 	bl	8000540 <__aeabi_dmul>
 80010e0:	4b55      	ldr	r3, [pc, #340]	; (8001238 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f7ff fb56 	bl	8000794 <__aeabi_ddiv>
 80010e8:	f7ff fc3c 	bl	8000964 <__aeabi_d2f>
	float x = cos(rad(p1.latitude)) * sin(rad(p2.latitude));
 80010ec:	f7ff f9d0 	bl	8000490 <__aeabi_f2d>
 80010f0:	ec41 0b10 	vmov	d0, r0, r1
 80010f4:	f001 fa90 	bl	8002618 <sin>
	return degrees * M_PI / 180.0;
 80010f8:	68a8      	ldr	r0, [r5, #8]
	float x = cos(rad(p1.latitude)) * sin(rad(p2.latitude));
 80010fa:	ec59 8b10 	vmov	r8, r9, d0
	return degrees * M_PI / 180.0;
 80010fe:	f7ff f9c7 	bl	8000490 <__aeabi_f2d>
 8001102:	a34b      	add	r3, pc, #300	; (adr r3, 8001230 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fa1a 	bl	8000540 <__aeabi_dmul>
 800110c:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 800110e:	2200      	movs	r2, #0
 8001110:	f7ff fb40 	bl	8000794 <__aeabi_ddiv>
 8001114:	f7ff fc26 	bl	8000964 <__aeabi_d2f>
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 8001118:	f7ff f9ba 	bl	8000490 <__aeabi_f2d>
 800111c:	ec41 0b10 	vmov	d0, r0, r1
 8001120:	f001 fa7a 	bl	8002618 <sin>
	return degrees * M_PI / 180.0;
 8001124:	68a0      	ldr	r0, [r4, #8]
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 8001126:	ec57 6b10 	vmov	r6, r7, d0
	return degrees * M_PI / 180.0;
 800112a:	f7ff f9b1 	bl	8000490 <__aeabi_f2d>
 800112e:	a340      	add	r3, pc, #256	; (adr r3, 8001230 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fa04 	bl	8000540 <__aeabi_dmul>
 8001138:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 800113a:	2200      	movs	r2, #0
 800113c:	f7ff fb2a 	bl	8000794 <__aeabi_ddiv>
 8001140:	f7ff fc10 	bl	8000964 <__aeabi_d2f>
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 8001144:	f7ff f9a4 	bl	8000490 <__aeabi_f2d>
 8001148:	ec41 0b10 	vmov	d0, r0, r1
 800114c:	f001 fa1c 	bl	8002588 <cos>
 8001150:	4630      	mov	r0, r6
 8001152:	ec53 2b10 	vmov	r2, r3, d0
 8001156:	4639      	mov	r1, r7
 8001158:	f7ff f9f2 	bl	8000540 <__aeabi_dmul>
 800115c:	ed94 7a03 	vldr	s14, [r4, #12]
 8001160:	edd5 7a03 	vldr	s15, [r5, #12]
	return degrees * M_PI / 180.0;
 8001164:	ee77 7a67 	vsub.f32	s15, s14, s15
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 8001168:	4606      	mov	r6, r0
	return degrees * M_PI / 180.0;
 800116a:	ee17 0a90 	vmov	r0, s15
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 800116e:	460f      	mov	r7, r1
	return degrees * M_PI / 180.0;
 8001170:	f7ff f98e 	bl	8000490 <__aeabi_f2d>
 8001174:	a32e      	add	r3, pc, #184	; (adr r3, 8001230 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff f9e1 	bl	8000540 <__aeabi_dmul>
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 8001180:	2200      	movs	r2, #0
 8001182:	f7ff fb07 	bl	8000794 <__aeabi_ddiv>
 8001186:	f7ff fbed 	bl	8000964 <__aeabi_d2f>
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 800118a:	f7ff f981 	bl	8000490 <__aeabi_f2d>
 800118e:	ec41 0b10 	vmov	d0, r0, r1
 8001192:	f001 f9f9 	bl	8002588 <cos>
	float x = cos(rad(p1.latitude)) * sin(rad(p2.latitude));
 8001196:	4642      	mov	r2, r8
 8001198:	464b      	mov	r3, r9
 800119a:	4650      	mov	r0, sl
 800119c:	4659      	mov	r1, fp
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 800119e:	ec55 4b10 	vmov	r4, r5, d0
	float x = cos(rad(p1.latitude)) * sin(rad(p2.latitude));
 80011a2:	f7ff f9cd 	bl	8000540 <__aeabi_dmul>
 80011a6:	f7ff fbdd 	bl	8000964 <__aeabi_d2f>
	x -= sin(rad(p1.latitude)) * cos(rad(p2.latitude)) * cos(rad(p2.longitude - p1.longitude));
 80011aa:	f7ff f971 	bl	8000490 <__aeabi_f2d>
 80011ae:	4622      	mov	r2, r4
 80011b0:	4680      	mov	r8, r0
 80011b2:	4689      	mov	r9, r1
 80011b4:	462b      	mov	r3, r5
 80011b6:	4630      	mov	r0, r6
 80011b8:	4639      	mov	r1, r7
 80011ba:	f7ff f9c1 	bl	8000540 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4640      	mov	r0, r8
 80011c4:	4649      	mov	r1, r9
 80011c6:	f7ff f803 	bl	80001d0 <__aeabi_dsub>
 80011ca:	f7ff fbcb 	bl	8000964 <__aeabi_d2f>
	return deg(atan2(y, x));	
 80011ce:	f7ff f95f 	bl	8000490 <__aeabi_f2d>
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 80011d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	return deg(atan2(y, x));	
 80011d6:	ec41 0b18 	vmov	d8, r0, r1
	float y = sin(rad(p2.longitude - p1.longitude)) * cos(rad(p2.latitude));
 80011da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80011de:	f7ff f9af 	bl	8000540 <__aeabi_dmul>
 80011e2:	f7ff fbbf 	bl	8000964 <__aeabi_d2f>
	return deg(atan2(y, x));	
 80011e6:	f7ff f953 	bl	8000490 <__aeabi_f2d>
 80011ea:	eeb0 1a48 	vmov.f32	s2, s16
 80011ee:	eef0 1a68 	vmov.f32	s3, s17
 80011f2:	ec41 0b10 	vmov	d0, r0, r1
 80011f6:	f007 f9a1 	bl	800853c <atan2>
 80011fa:	ec51 0b10 	vmov	r0, r1, d0
 80011fe:	f7ff fbb1 	bl	8000964 <__aeabi_d2f>
	return radians * 180.0 / M_PI;
 8001202:	f7ff f945 	bl	8000490 <__aeabi_f2d>
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <_Z17calculate_headingRK11coordinatesS1_+0x208>)
 8001208:	2200      	movs	r2, #0
 800120a:	f7ff f999 	bl	8000540 <__aeabi_dmul>
 800120e:	a308      	add	r3, pc, #32	; (adr r3, 8001230 <_Z17calculate_headingRK11coordinatesS1_+0x200>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff fabe 	bl	8000794 <__aeabi_ddiv>
 8001218:	f7ff fba4 	bl	8000964 <__aeabi_d2f>
}
 800121c:	ee00 0a10 	vmov	s0, r0
 8001220:	b005      	add	sp, #20
 8001222:	ecbd 8b02 	vpop	{d8}
 8001226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800122a:	bf00      	nop
 800122c:	f3af 8000 	nop.w
 8001230:	54442d18 	.word	0x54442d18
 8001234:	400921fb 	.word	0x400921fb
 8001238:	40668000 	.word	0x40668000
 800123c:	00000000 	.word	0x00000000

08001240 <_Z18calculate_distanceRK11coordinatesS1_>:

float calculate_distance(const coordinates& p1, const coordinates& p2) {
 8001240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	float r = 6371000.0;
	float a = pow(sin(rad(p2.latitude - p1.latitude) / 2), 2);
 8001244:	ed91 7a02 	vldr	s14, [r1, #8]
 8001248:	edd0 7a02 	vldr	s15, [r0, #8]
	return degrees * M_PI / 180.0;
 800124c:	ee77 7a67 	vsub.f32	s15, s14, s15
float calculate_distance(const coordinates& p1, const coordinates& p2) {
 8001250:	ed2d 8b04 	vpush	{d8-d9}
 8001254:	4605      	mov	r5, r0
	return degrees * M_PI / 180.0;
 8001256:	ee17 0a90 	vmov	r0, s15
float calculate_distance(const coordinates& p1, const coordinates& p2) {
 800125a:	460c      	mov	r4, r1
	return degrees * M_PI / 180.0;
 800125c:	f7ff f918 	bl	8000490 <__aeabi_f2d>
 8001260:	a363      	add	r3, pc, #396	; (adr r3, 80013f0 <_Z18calculate_distanceRK11coordinatesS1_+0x1b0>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f96b 	bl	8000540 <__aeabi_dmul>
 800126a:	4b65      	ldr	r3, [pc, #404]	; (8001400 <_Z18calculate_distanceRK11coordinatesS1_+0x1c0>)
 800126c:	2200      	movs	r2, #0
 800126e:	f7ff fa91 	bl	8000794 <__aeabi_ddiv>
 8001272:	f7ff fb77 	bl	8000964 <__aeabi_d2f>
	float a = pow(sin(rad(p2.latitude - p1.latitude) / 2), 2);
 8001276:	ee07 0a90 	vmov	s15, r0
 800127a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800127e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001282:	ed9f 9b59 	vldr	d9, [pc, #356]	; 80013e8 <_Z18calculate_distanceRK11coordinatesS1_+0x1a8>
 8001286:	ee17 0a90 	vmov	r0, s15
 800128a:	f7ff f901 	bl	8000490 <__aeabi_f2d>
 800128e:	ec41 0b10 	vmov	d0, r0, r1
 8001292:	f001 f9c1 	bl	8002618 <sin>
 8001296:	eeb0 1a49 	vmov.f32	s2, s18
 800129a:	eef0 1a69 	vmov.f32	s3, s19
 800129e:	f001 fa03 	bl	80026a8 <pow>
	float dlon = rad(p2.longitude - p1.longitude) / 2;
 80012a2:	ed94 7a03 	vldr	s14, [r4, #12]
 80012a6:	edd5 7a03 	vldr	s15, [r5, #12]
	return degrees * M_PI / 180.0;
 80012aa:	ee77 7a67 	vsub.f32	s15, s14, s15
	float a = pow(sin(rad(p2.latitude - p1.latitude) / 2), 2);
 80012ae:	ec57 6b10 	vmov	r6, r7, d0
	return degrees * M_PI / 180.0;
 80012b2:	ee17 0a90 	vmov	r0, s15
 80012b6:	f7ff f8eb 	bl	8000490 <__aeabi_f2d>
 80012ba:	a34d      	add	r3, pc, #308	; (adr r3, 80013f0 <_Z18calculate_distanceRK11coordinatesS1_+0x1b0>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff f93e 	bl	8000540 <__aeabi_dmul>
 80012c4:	4b4e      	ldr	r3, [pc, #312]	; (8001400 <_Z18calculate_distanceRK11coordinatesS1_+0x1c0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f7ff fa64 	bl	8000794 <__aeabi_ddiv>
 80012cc:	f7ff fb4a 	bl	8000964 <__aeabi_d2f>
	float dlon = rad(p2.longitude - p1.longitude) / 2;
 80012d0:	ee07 0a90 	vmov	s15, r0
	return degrees * M_PI / 180.0;
 80012d4:	68a8      	ldr	r0, [r5, #8]
	float dlon = rad(p2.longitude - p1.longitude) / 2;
 80012d6:	ee27 8a88 	vmul.f32	s16, s15, s16
	return degrees * M_PI / 180.0;
 80012da:	f7ff f8d9 	bl	8000490 <__aeabi_f2d>
 80012de:	a344      	add	r3, pc, #272	; (adr r3, 80013f0 <_Z18calculate_distanceRK11coordinatesS1_+0x1b0>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff f92c 	bl	8000540 <__aeabi_dmul>
 80012e8:	4b45      	ldr	r3, [pc, #276]	; (8001400 <_Z18calculate_distanceRK11coordinatesS1_+0x1c0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	f7ff fa52 	bl	8000794 <__aeabi_ddiv>
 80012f0:	f7ff fb38 	bl	8000964 <__aeabi_d2f>
	a += cos(rad(p1.latitude)) * cos(rad(p2.latitude)) * pow(sin(dlon), 2);
 80012f4:	f7ff f8cc 	bl	8000490 <__aeabi_f2d>
 80012f8:	ec41 0b10 	vmov	d0, r0, r1
 80012fc:	f001 f944 	bl	8002588 <cos>
	return degrees * M_PI / 180.0;
 8001300:	68a0      	ldr	r0, [r4, #8]
	a += cos(rad(p1.latitude)) * cos(rad(p2.latitude)) * pow(sin(dlon), 2);
 8001302:	ec59 8b10 	vmov	r8, r9, d0
	return degrees * M_PI / 180.0;
 8001306:	f7ff f8c3 	bl	8000490 <__aeabi_f2d>
 800130a:	a339      	add	r3, pc, #228	; (adr r3, 80013f0 <_Z18calculate_distanceRK11coordinatesS1_+0x1b0>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f916 	bl	8000540 <__aeabi_dmul>
 8001314:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <_Z18calculate_distanceRK11coordinatesS1_+0x1c0>)
 8001316:	2200      	movs	r2, #0
 8001318:	f7ff fa3c 	bl	8000794 <__aeabi_ddiv>
 800131c:	f7ff fb22 	bl	8000964 <__aeabi_d2f>
	a += cos(rad(p1.latitude)) * cos(rad(p2.latitude)) * pow(sin(dlon), 2);
 8001320:	f7ff f8b6 	bl	8000490 <__aeabi_f2d>
 8001324:	ec41 0b10 	vmov	d0, r0, r1
 8001328:	f001 f92e 	bl	8002588 <cos>
 800132c:	4640      	mov	r0, r8
 800132e:	ec53 2b10 	vmov	r2, r3, d0
 8001332:	4649      	mov	r1, r9
 8001334:	f7ff f904 	bl	8000540 <__aeabi_dmul>
 8001338:	4604      	mov	r4, r0
 800133a:	ee18 0a10 	vmov	r0, s16
 800133e:	460d      	mov	r5, r1
 8001340:	f7ff f8a6 	bl	8000490 <__aeabi_f2d>
 8001344:	ec41 0b10 	vmov	d0, r0, r1
 8001348:	f001 f966 	bl	8002618 <sin>
 800134c:	eeb0 1a49 	vmov.f32	s2, s18
 8001350:	eef0 1a69 	vmov.f32	s3, s19
 8001354:	f001 f9a8 	bl	80026a8 <pow>
 8001358:	4620      	mov	r0, r4
 800135a:	ec53 2b10 	vmov	r2, r3, d0
 800135e:	4629      	mov	r1, r5
 8001360:	f7ff f8ee 	bl	8000540 <__aeabi_dmul>
 8001364:	4604      	mov	r4, r0
 8001366:	460d      	mov	r5, r1
	float a = pow(sin(rad(p2.latitude - p1.latitude) / 2), 2);
 8001368:	4630      	mov	r0, r6
 800136a:	4639      	mov	r1, r7
 800136c:	f7ff fafa 	bl	8000964 <__aeabi_d2f>
	a += cos(rad(p1.latitude)) * cos(rad(p2.latitude)) * pow(sin(dlon), 2);
 8001370:	f7ff f88e 	bl	8000490 <__aeabi_f2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4620      	mov	r0, r4
 800137a:	4629      	mov	r1, r5
 800137c:	f7fe ff2a 	bl	80001d4 <__adddf3>
 8001380:	f7ff faf0 	bl	8000964 <__aeabi_d2f>
 8001384:	ee09 0a10 	vmov	s18, r0
	return r * 2 * atan2(sqrt(a), sqrt(1-a));
 8001388:	f7ff f882 	bl	8000490 <__aeabi_f2d>
 800138c:	ec41 0b10 	vmov	d0, r0, r1
 8001390:	f007 f8d6 	bl	8008540 <sqrt>
 8001394:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001398:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800139c:	eeb0 8a40 	vmov.f32	s16, s0
 80013a0:	eef0 8a60 	vmov.f32	s17, s1
 80013a4:	ee17 0a90 	vmov	r0, s15
 80013a8:	f7ff f872 	bl	8000490 <__aeabi_f2d>
 80013ac:	ec41 0b10 	vmov	d0, r0, r1
 80013b0:	f007 f8c6 	bl	8008540 <sqrt>
 80013b4:	eeb0 1a40 	vmov.f32	s2, s0
 80013b8:	eef0 1a60 	vmov.f32	s3, s1
 80013bc:	eeb0 0a48 	vmov.f32	s0, s16
 80013c0:	eef0 0a68 	vmov.f32	s1, s17
 80013c4:	f007 f8ba 	bl	800853c <atan2>
 80013c8:	a30b      	add	r3, pc, #44	; (adr r3, 80013f8 <_Z18calculate_distanceRK11coordinatesS1_+0x1b8>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	ec51 0b10 	vmov	r0, r1, d0
 80013d2:	f7ff f8b5 	bl	8000540 <__aeabi_dmul>
 80013d6:	f7ff fac5 	bl	8000964 <__aeabi_d2f>
}
 80013da:	ecbd 8b04 	vpop	{d8-d9}
 80013de:	ee00 0a10 	vmov	s0, r0
 80013e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013e6:	bf00      	nop
 80013e8:	00000000 	.word	0x00000000
 80013ec:	40000000 	.word	0x40000000
 80013f0:	54442d18 	.word	0x54442d18
 80013f4:	400921fb 	.word	0x400921fb
 80013f8:	00000000 	.word	0x00000000
 80013fc:	41684dae 	.word	0x41684dae
 8001400:	40668000 	.word	0x40668000
 8001404:	00000000 	.word	0x00000000

08001408 <_Z32distance_calculator_thread_entryv>:
	}
	// uart_tx(uart_dev, ch, length, SYS_FOREVER_MS);
}


void distance_calculator_thread_entry(void) {
 8001408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800140c:	ed2d 8b02 	vpush	{d8}
 8001410:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
	const uint8_t OUR_ID = 1;
	const uint8_t THEIR_ID = 2;
	// Coordinates of the Elbphilharmonie in Hamburg
	struct coordinates coords[SYS_IDS+1];
	coords[OUR_ID].sys_id = 0;
	coords[THEIR_ID].sys_id = 2;
 8001414:	2302      	movs	r3, #2
 8001416:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
	coords[THEIR_ID].latitude = 53.541350;
 800141a:	4ba5      	ldr	r3, [pc, #660]	; (80016b0 <_Z32distance_calculator_thread_entryv+0x2a8>)
 800141c:	934a      	str	r3, [sp, #296]	; 0x128
	coords[OUR_ID].sys_id = 0;
 800141e:	2200      	movs	r2, #0
	coords[THEIR_ID].longitude = 9.985102;
 8001420:	4ba4      	ldr	r3, [pc, #656]	; (80016b4 <_Z32distance_calculator_thread_entryv+0x2ac>)
 8001422:	934b      	str	r3, [sp, #300]	; 0x12c
	coords[THEIR_ID].altitude = 10.0;
	struct k_timer timer;

	k_timer_init(&timer, NULL, NULL);
 8001424:	4611      	mov	r1, r2
	coords[THEIR_ID].altitude = 10.0;
 8001426:	4ba4      	ldr	r3, [pc, #656]	; (80016b8 <_Z32distance_calculator_thread_entryv+0x2b0>)
	coords[OUR_ID].sys_id = 0;
 8001428:	f88d 2110 	strb.w	r2, [sp, #272]	; 0x110
	k_timer_init(&timer, NULL, NULL);
 800142c:	a830      	add	r0, sp, #192	; 0xc0
	coords[THEIR_ID].altitude = 10.0;
 800142e:	934c      	str	r3, [sp, #304]	; 0x130
	k_timer_init(&timer, NULL, NULL);
 8001430:	ed9f 8b9d 	vldr	d8, [pc, #628]	; 80016a8 <_Z32distance_calculator_thread_entryv+0x2a0>
 8001434:	f008 fbde 	bl	8009bf4 <k_timer_init>
		arch_syscall_invoke5(*(uintptr_t *)&timer, parm0.split.lo, parm0.split.hi, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	ed8d 8b00 	vstr	d8, [sp]
 8001440:	2300      	movs	r3, #0
 8001442:	a830      	add	r0, sp, #192	; 0xc0
 8001444:	f006 ffe2 	bl	800840c <z_impl_k_timer_start>
MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
    m->sz[0] = 0;
    m->sz[1] = 0;
    A = 0x6a09e667;
    B = 0xbb67ae85;
 8001448:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80016c8 <_Z32distance_calculator_thread_entryv+0x2c0>
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke1(*(uintptr_t *)&timer, K_SYSCALL_K_TIMER_STATUS_SYNC);
	}
#endif
	compiler_barrier();
	return z_impl_k_timer_status_sync(timer);
 800144c:	a830      	add	r0, sp, #192	; 0xc0
 800144e:	f007 f82b 	bl	80084a8 <z_impl_k_timer_status_sync>
	z_impl_k_timer_start(timer, duration, period);
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	ed8d 8b00 	vstr	d8, [sp]
 800145a:	2300      	movs	r3, #0
 800145c:	a830      	add	r0, sp, #192	; 0xc0
 800145e:	f006 ffd5 	bl	800840c <z_impl_k_timer_start>
		/* coverity[OVERRUN] */
		return (void *) arch_syscall_invoke3(*(uintptr_t *)&queue, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
 8001462:	4c96      	ldr	r4, [pc, #600]	; (80016bc <_Z32distance_calculator_thread_entryv+0x2b4>)
 8001464:	2200      	movs	r2, #0
 8001466:	2300      	movs	r3, #0
 8001468:	4620      	mov	r0, r4
 800146a:	f006 fb9d 	bl	8007ba8 <z_impl_k_queue_get>
	while (1) {
		k_timer_status_sync(&timer);
		bool new_data = false;
		// we publish distances twice a second
		k_timer_start(&timer, K_MSEC(500), K_NO_WAIT);
		while((new_coords = reinterpret_cast<struct coordinates*>(k_fifo_get(&coords_fifo, K_NO_WAIT)))) {
 800146e:	4601      	mov	r1, r0
 8001470:	b170      	cbz	r0, 8001490 <_Z32distance_calculator_thread_entryv+0x88>
			memcpy(&coords[new_coords->sys_id], new_coords, sizeof(struct coordinates));
 8001472:	7900      	ldrb	r0, [r0, #4]
 8001474:	9103      	str	r1, [sp, #12]
 8001476:	ab3e      	add	r3, sp, #248	; 0xf8
 8001478:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800147c:	2214      	movs	r2, #20
 800147e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001482:	f008 fc0e 	bl	8009ca2 <memcpy>
			k_free(new_coords);
 8001486:	9903      	ldr	r1, [sp, #12]
 8001488:	4608      	mov	r0, r1
 800148a:	f008 fbdc 	bl	8009c46 <k_free>
		while((new_coords = reinterpret_cast<struct coordinates*>(k_fifo_get(&coords_fifo, K_NO_WAIT)))) {
 800148e:	e7e9      	b.n	8001464 <_Z32distance_calculator_thread_entryv+0x5c>
			new_data = true;
		}
		if (coords[OUR_ID].sys_id == 0) continue;
 8001490:	f89d 3110 	ldrb.w	r3, [sp, #272]	; 0x110
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0d9      	beq.n	800144c <_Z32distance_calculator_thread_entryv+0x44>
		uint8_t send_buf[51]; // DISTANCE_SENSOR has at most 51 bytes, where as MAVLink 2.0 messages can be as large as 279 bytes
		mavlink_message_t mav_msg;
		mavlink_distance_sensor_t msg = {};
 8001498:	2227      	movs	r2, #39	; 0x27
 800149a:	a80f      	add	r0, sp, #60	; 0x3c
 800149c:	f008 fc0f 	bl	8009cbe <memset>
		for (int i=1; i<=SYS_IDS; ++i) {
			if (i==OUR_ID) continue; // do not calculate distance to us
 80014a0:	2702      	movs	r7, #2
	return z_impl_k_uptime_ticks();
 80014a2:	f008 fba5 	bl	8009bf0 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / (from_hz / to_hz);
 80014a6:	220a      	movs	r2, #10
 80014a8:	2300      	movs	r3, #0
 80014aa:	f7ff faab 	bl	8000a04 <__aeabi_uldivmod>
static inline int64_t k_uptime_delta(int64_t *reftime)
{
	int64_t uptime, delta;

	uptime = k_uptime_get();
	delta = uptime - *reftime;
 80014ae:	4a84      	ldr	r2, [pc, #528]	; (80016c0 <_Z32distance_calculator_thread_entryv+0x2b8>)
			msg.time_boot_ms = k_uptime_delta(&time_stamp);
			msg.id = i;
 80014b0:	f88d 7047 	strb.w	r7, [sp, #71]	; 0x47
 80014b4:	6813      	ldr	r3, [r2, #0]
 80014b6:	1ac3      	subs	r3, r0, r3
			msg.time_boot_ms = k_uptime_delta(&time_stamp);
 80014b8:	930f      	str	r3, [sp, #60]	; 0x3c
			msg.type = MAV_DISTANCE_SENSOR_ULTRASOUND; // TODO: suggest additional types in github.com/mavlink/mavlink
 80014ba:	2301      	movs	r3, #1
	*reftime = uptime;
 80014bc:	e9c2 0100 	strd	r0, r1, [r2]
 80014c0:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
			msg.orientation = MAV_SENSOR_ROTATION_CUSTOM;
 80014c4:	2264      	movs	r2, #100	; 0x64
			msg.min_distance = 1; // in cm; to be determined
 80014c6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
			msg.max_distance = 10000; // in cm; to be determined
			msg.current_distance = calculate_distance(coords[OUR_ID], coords[i]); // send for now in m TODO: * 100; // in cm
 80014ca:	a948      	add	r1, sp, #288	; 0x120
			msg.max_distance = 10000; // in cm; to be determined
 80014cc:	f242 7310 	movw	r3, #10000	; 0x2710
			msg.current_distance = calculate_distance(coords[OUR_ID], coords[i]); // send for now in m TODO: * 100; // in cm
 80014d0:	a843      	add	r0, sp, #268	; 0x10c
			msg.orientation = MAV_SENSOR_ROTATION_CUSTOM;
 80014d2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
			msg.max_distance = 10000; // in cm; to be determined
 80014d6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			msg.current_distance = calculate_distance(coords[OUR_ID], coords[i]); // send for now in m TODO: * 100; // in cm
 80014da:	f7ff feb1 	bl	8001240 <_Z18calculate_distanceRK11coordinatesS1_>
 80014de:	eebc 0ac0 	vcvt.u32.f32	s0, s0
			float roll = 0.0f; // TODO: get roll angle from ATTITUDE from flight controller
			float pitch = 0.0f; // TODO: get pitch angle from ATTITUDE from flight controller
			float yaw = calculate_heading(coords[OUR_ID], coords[i]); // TODO: compensate yaw angle from ATTITUDE from flight controller
 80014e2:	a948      	add	r1, sp, #288	; 0x120
			msg.current_distance = calculate_distance(coords[OUR_ID], coords[i]); // send for now in m TODO: * 100; // in cm
 80014e4:	ee10 3a10 	vmov	r3, s0
			float yaw = calculate_heading(coords[OUR_ID], coords[i]); // TODO: compensate yaw angle from ATTITUDE from flight controller
 80014e8:	a843      	add	r0, sp, #268	; 0x10c
			msg.current_distance = calculate_distance(coords[OUR_ID], coords[i]); // send for now in m TODO: * 100; // in cm
 80014ea:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
			float yaw = calculate_heading(coords[OUR_ID], coords[i]); // TODO: compensate yaw angle from ATTITUDE from flight controller
 80014ee:	f7ff fd9f 	bl	8001030 <_Z17calculate_headingRK11coordinatesS1_>
			float quaternion[4];
			euler_to_quaternion(roll, pitch, yaw, quaternion); 
 80014f2:	eddf 0a74 	vldr	s1, [pc, #464]	; 80016c4 <_Z32distance_calculator_thread_entryv+0x2bc>
			float yaw = calculate_heading(coords[OUR_ID], coords[i]); // TODO: compensate yaw angle from ATTITUDE from flight controller
 80014f6:	eeb0 1a40 	vmov.f32	s2, s0
			euler_to_quaternion(roll, pitch, yaw, quaternion); 
 80014fa:	a80b      	add	r0, sp, #44	; 0x2c
 80014fc:	eeb0 0a60 	vmov.f32	s0, s1
 8001500:	f7ff fcde 	bl	8000ec0 <_Z19euler_to_quaternionfffPf>
			// need this indirect way, otherwise we get misaligned memory accesses
			memcpy(msg.quaternion, quaternion, sizeof(quaternion));
 8001504:	2210      	movs	r2, #16
 8001506:	a90b      	add	r1, sp, #44	; 0x2c
 8001508:	f10d 0052 	add.w	r0, sp, #82	; 0x52
 800150c:	f008 fbc9 	bl	8009ca2 <memcpy>
 * @param msg The MAVLink message to compress the data into
 * @param distance_sensor C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_distance_sensor_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_distance_sensor_t* distance_sensor)
{
    return mavlink_msg_distance_sensor_pack(system_id, component_id, msg, distance_sensor->time_boot_ms, distance_sensor->min_distance, distance_sensor->max_distance, distance_sensor->current_distance, distance_sensor->type, distance_sensor->id, distance_sensor->orientation, distance_sensor->covariance, distance_sensor->horizontal_fov, distance_sensor->vertical_fov, distance_sensor->quaternion, distance_sensor->signal_quality);
 8001510:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
 8001514:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8001518:	f8dd 104a 	ldr.w	r1, [sp, #74]	; 0x4a
 800151c:	f8dd 204e 	ldr.w	r2, [sp, #78]	; 0x4e
    packet.time_boot_ms = time_boot_ms;
 8001520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    return mavlink_msg_distance_sensor_pack(system_id, component_id, msg, distance_sensor->time_boot_ms, distance_sensor->min_distance, distance_sensor->max_distance, distance_sensor->current_distance, distance_sensor->type, distance_sensor->id, distance_sensor->orientation, distance_sensor->covariance, distance_sensor->horizontal_fov, distance_sensor->vertical_fov, distance_sensor->quaternion, distance_sensor->signal_quality);
 8001522:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8001526:	f8bd e042 	ldrh.w	lr, [sp, #66]	; 0x42
 800152a:	f8bd c044 	ldrh.w	ip, [sp, #68]	; 0x44
 800152e:	f89d 6046 	ldrb.w	r6, [sp, #70]	; 0x46
 8001532:	f89d 8062 	ldrb.w	r8, [sp, #98]	; 0x62
    packet.id = id;
 8001536:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f

			msg.covariance = 0.0f;
 800153a:	2400      	movs	r4, #0
    packet.orientation = orientation;
 800153c:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
    packet.horizontal_fov = horizontal_fov;
 8001540:	f8cd 1072 	str.w	r1, [sp, #114]	; 0x72
    packet.vertical_fov = vertical_fov;
 8001544:	f8cd 2076 	str.w	r2, [sp, #118]	; 0x76
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
	if (src == NULL) {
		memset(dest, 0, n);
	} else {
		memcpy(dest, src, n);
 8001548:	f10d 0152 	add.w	r1, sp, #82	; 0x52
 800154c:	2210      	movs	r2, #16
 800154e:	f10d 007a 	add.w	r0, sp, #122	; 0x7a
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_DISTANCE_SENSOR_LEN);
 8001552:	ad6a      	add	r5, sp, #424	; 0x1a8
    packet.time_boot_ms = time_boot_ms;
 8001554:	9319      	str	r3, [sp, #100]	; 0x64
    packet.min_distance = min_distance;
 8001556:	f8ad a068 	strh.w	sl, [sp, #104]	; 0x68
    packet.max_distance = max_distance;
 800155a:	f8ad e06a 	strh.w	lr, [sp, #106]	; 0x6a
    packet.current_distance = current_distance;
 800155e:	f8ad c06c 	strh.w	ip, [sp, #108]	; 0x6c
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001562:	f8df a168 	ldr.w	sl, [pc, #360]	; 80016cc <_Z32distance_calculator_thread_entryv+0x2c4>
 8001566:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
    packet.type = type;
 800156a:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
    packet.covariance = covariance;
 800156e:	f88d 4071 	strb.w	r4, [sp, #113]	; 0x71
    packet.signal_quality = signal_quality;
 8001572:	f88d 808a 	strb.w	r8, [sp, #138]	; 0x8a
 8001576:	f008 fb94 	bl	8009ca2 <memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_DISTANCE_SENSOR_LEN);
 800157a:	2227      	movs	r2, #39	; 0x27
 800157c:	a919      	add	r1, sp, #100	; 0x64
 800157e:	4628      	mov	r0, r5
 8001580:	f008 fb8f 	bl	8009ca2 <memcpy>
    msg->msgid = MAVLINK_MSG_ID_DISTANCE_SENSOR;
 8001584:	f06f 037b 	mvn.w	r3, #123	; 0x7b
 8001588:	f88d 31a5 	strb.w	r3, [sp, #421]	; 0x1a5
 800158c:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8001590:	f88d 41a6 	strb.w	r4, [sp, #422]	; 0x1a6
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001594:	403b      	ands	r3, r7
 8001596:	f88d 41a7 	strb.w	r4, [sp, #423]	; 0x1a7
 800159a:	d115      	bne.n	80015c8 <_Z32distance_calculator_thread_entryv+0x1c0>
 800159c:	f8da 2010 	ldr.w	r2, [sl, #16]
 80015a0:	2a00      	cmp	r2, #0
 80015a2:	d069      	beq.n	8001678 <_Z32distance_calculator_thread_entryv+0x270>
 80015a4:	7814      	ldrb	r4, [r2, #0]
 80015a6:	f004 0401 	and.w	r4, r4, #1
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
		msg->magic = MAVLINK_STX_MAVLINK1;
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
	} else {
		msg->magic = MAVLINK_STX;
 80015aa:	22fd      	movs	r2, #253	; 0xfd
 80015ac:	f88d 219e 	strb.w	r2, [sp, #414]	; 0x19e
	while (length > 1 && payload[length-1] == 0) {
 80015b0:	f50d 71e7 	add.w	r1, sp, #462	; 0x1ce
		msg->magic = MAVLINK_STX;
 80015b4:	2227      	movs	r2, #39	; 0x27
	while (length > 1 && payload[length-1] == 0) {
 80015b6:	f811 0901 	ldrb.w	r0, [r1], #-1
 80015ba:	b918      	cbnz	r0, 80015c4 <_Z32distance_calculator_thread_entryv+0x1bc>
		length--;
 80015bc:	3a01      	subs	r2, #1
 80015be:	b2d2      	uxtb	r2, r2
	while (length > 1 && payload[length-1] == 0) {
 80015c0:	2a01      	cmp	r2, #1
 80015c2:	d1f8      	bne.n	80015b6 <_Z32distance_calculator_thread_entryv+0x1ae>
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 80015c4:	260a      	movs	r6, #10
 80015c6:	e004      	b.n	80015d2 <_Z32distance_calculator_thread_entryv+0x1ca>
		msg->magic = MAVLINK_STX_MAVLINK1;
 80015c8:	22fe      	movs	r2, #254	; 0xfe
 80015ca:	f88d 219e 	strb.w	r2, [sp, #414]	; 0x19e
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80015ce:	2606      	movs	r6, #6
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80015d0:	220e      	movs	r2, #14
	msg->sysid = system_id;
 80015d2:	2101      	movs	r1, #1
	msg->compid = component_id;
	msg->incompat_flags = 0;
 80015d4:	2c00      	cmp	r4, #0
 80015d6:	bf14      	ite	ne
 80015d8:	4608      	movne	r0, r1
 80015da:	4620      	moveq	r0, r4
 80015dc:	f88d 01a0 	strb.w	r0, [sp, #416]	; 0x1a0
	if (signing) {
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
	}
	msg->compat_flags = 0;
 80015e0:	2000      	movs	r0, #0
 80015e2:	f88d 01a1 	strb.w	r0, [sp, #417]	; 0x1a1
	msg->seq = status->current_tx_seq;
 80015e6:	f89a 0006 	ldrb.w	r0, [sl, #6]
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80015ea:	f88d 219f 	strb.w	r2, [sp, #415]	; 0x19f
	status->current_tx_seq = status->current_tx_seq + 1;
 80015ee:	eb00 0e01 	add.w	lr, r0, r1
	msg->compid = component_id;
 80015f2:	f04f 0c19 	mov.w	ip, #25
	status->current_tx_seq = status->current_tx_seq + 1;
 80015f6:	f88a e006 	strb.w	lr, [sl, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 80015fa:	f89d e19e 	ldrb.w	lr, [sp, #414]	; 0x19e
	msg->sysid = system_id;
 80015fe:	f88d 11a3 	strb.w	r1, [sp, #419]	; 0x1a3
	msg->compid = component_id;
 8001602:	f88d c1a4 	strb.w	ip, [sp, #420]	; 0x1a4
	msg->seq = status->current_tx_seq;
 8001606:	f88d 01a2 	strb.w	r0, [sp, #418]	; 0x1a2
	buf[0] = msg->magic;
 800160a:	f88d e020 	strb.w	lr, [sp, #32]
	buf[1] = msg->len;
 800160e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (mavlink1) {
 8001612:	b39b      	cbz	r3, 800167c <_Z32distance_calculator_thread_entryv+0x274>
		buf[2] = msg->seq;
		buf[3] = msg->sysid;
		buf[4] = msg->compid;
		buf[5] = msg->msgid & 0xFF;
 8001614:	2384      	movs	r3, #132	; 0x84
		buf[2] = msg->seq;
 8001616:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
		buf[3] = msg->sysid;
 800161a:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
		buf[4] = msg->compid;
 800161e:	f88d c024 	strb.w	ip, [sp, #36]	; 0x24
		buf[5] = msg->msgid & 0xFF;
 8001622:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = X25_INIT_CRC;
 8001626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800162a:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 800162e:	fa1f fb86 	uxth.w	fp, r6
 8001632:	f10d 0821 	add.w	r8, sp, #33	; 0x21
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
                crc_accumulate(*pBuffer++, &crcTmp);
 8001636:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800163a:	f818 0b01 	ldrb.w	r0, [r8], #1
 800163e:	a94d      	add	r1, sp, #308	; 0x134
 8001640:	fa1f fb8b 	uxth.w	fp, fp
 8001644:	f007 f92e 	bl	80088a4 <crc_accumulate>
	while (length--) {
 8001648:	f1bb 0f01 	cmp.w	fp, #1
 800164c:	d1f3      	bne.n	8001636 <_Z32distance_calculator_thread_entryv+0x22e>
        }
        return crcTmp;
 800164e:	f8bd 3134 	ldrh.w	r3, [sp, #308]	; 0x134
		buf[8] = (msg->msgid >> 8) & 0xFF;
		buf[9] = (msg->msgid >> 16) & 0xFF;
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001652:	f89d b19f 	ldrb.w	fp, [sp, #415]	; 0x19f
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8001656:	f8ad 3016 	strh.w	r3, [sp, #22]
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
 800165a:	46a8      	mov	r8, r5
	while (length--) {
                crc_accumulate(*p++, crcAccum);
 800165c:	f10d 0116 	add.w	r1, sp, #22
	while (length--) {
 8001660:	f1bb 0f00 	cmp.w	fp, #0
 8001664:	d034      	beq.n	80016d0 <_Z32distance_calculator_thread_entryv+0x2c8>
                crc_accumulate(*p++, crcAccum);
 8001666:	f818 0b01 	ldrb.w	r0, [r8], #1
 800166a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800166e:	f007 f919 	bl	80088a4 <crc_accumulate>
 8001672:	fa1f fb8b 	uxth.w	fp, fp
	while (length--) {
 8001676:	e7f1      	b.n	800165c <_Z32distance_calculator_thread_entryv+0x254>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001678:	461c      	mov	r4, r3
 800167a:	e796      	b.n	80015aa <_Z32distance_calculator_thread_entryv+0x1a2>
		buf[2] = msg->incompat_flags;
 800167c:	f89d 21a0 	ldrb.w	r2, [sp, #416]	; 0x1a0
 8001680:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		buf[7] = msg->msgid & 0xFF;
 8001684:	2284      	movs	r2, #132	; 0x84
		buf[3] = msg->compat_flags;
 8001686:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		buf[4] = msg->seq;
 800168a:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
		buf[5] = msg->sysid;
 800168e:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
		buf[6] = msg->compid;
 8001692:	f88d c026 	strb.w	ip, [sp, #38]	; 0x26
		buf[7] = msg->msgid & 0xFF;
 8001696:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800169a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800169e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80016a2:	e7c0      	b.n	8001626 <_Z32distance_calculator_thread_entryv+0x21e>
 80016a4:	f3af 8000 	nop.w
	...
 80016b0:	42562a58 	.word	0x42562a58
 80016b4:	411fc2fa 	.word	0x411fc2fa
 80016b8:	41200000 	.word	0x41200000
 80016bc:	200001dc 	.word	0x200001dc
 80016c0:	200002b0 	.word	0x200002b0
 80016c4:	00000000 	.word	0x00000000
 80016c8:	bb67ae85 	.word	0xbb67ae85
 80016cc:	2000053c 	.word	0x2000053c
	crc_accumulate(crc_extra, &checksum);
 80016d0:	2055      	movs	r0, #85	; 0x55
 80016d2:	f007 f8e7 	bl	80088a4 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80016d6:	f89d 219f 	ldrb.w	r2, [sp, #415]	; 0x19f
 80016da:	880b      	ldrh	r3, [r1, #0]
 80016dc:	54ab      	strb	r3, [r5, r2]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80016de:	f20d 11a9 	addw	r1, sp, #425	; 0x1a9
 80016e2:	f89d 219f 	ldrb.w	r2, [sp, #415]	; 0x19f
 80016e6:	0a18      	lsrs	r0, r3, #8
 80016e8:	5488      	strb	r0, [r1, r2]

	msg->checksum = checksum;
 80016ea:	f8ad 319c 	strh.w	r3, [sp, #412]	; 0x19c

	if (signing) {
 80016ee:	2c00      	cmp	r4, #0
 80016f0:	d055      	beq.n	800179e <_Z32distance_calculator_thread_entryv+0x396>
		mavlink_sign_packet(status->signing,
 80016f2:	f8da a010 	ldr.w	sl, [sl, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80016f6:	f1ba 0f00 	cmp.w	sl, #0
 80016fa:	d050      	beq.n	800179e <_Z32distance_calculator_thread_entryv+0x396>
 80016fc:	f89a 3000 	ldrb.w	r3, [sl]
 8001700:	07d8      	lsls	r0, r3, #31
 8001702:	d54c      	bpl.n	800179e <_Z32distance_calculator_thread_entryv+0x396>
	signature[0] = signing->link_id;
 8001704:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001708:	f88d 32b2 	strb.w	r3, [sp, #690]	; 0x2b2
	tstamp.t64 = signing->timestamp;
 800170c:	e9da 2302 	ldrd	r2, r3, [sl, #8]
	memcpy(&signature[1], tstamp.t8, 6);
 8001710:	a906      	add	r1, sp, #24
	tstamp.t64 = signing->timestamp;
 8001712:	e9cd 2306 	strd	r2, r3, [sp, #24]
	memcpy(&signature[1], tstamp.t8, 6);
 8001716:	f20d 20b3 	addw	r0, sp, #691	; 0x2b3
 800171a:	2206      	movs	r2, #6
				    msg->signature,
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 800171c:	f89d 419f 	ldrb.w	r4, [sp, #415]	; 0x19f
	memcpy(&signature[1], tstamp.t8, 6);
 8001720:	f008 fabf 	bl	8009ca2 <memcpy>
	signing->timestamp++;
 8001724:	e9da 3202 	ldrd	r3, r2, [sl, #8]
 8001728:	3301      	adds	r3, #1
 800172a:	f142 0200 	adc.w	r2, r2, #0
 800172e:	e9ca 3202 	strd	r3, r2, [sl, #8]
    A = 0x6a09e667;
 8001732:	4b5a      	ldr	r3, [pc, #360]	; (800189c <_Z32distance_calculator_thread_entryv+0x494>)
    C = 0x3c6ef372;
    D = 0xa54ff53a;
 8001734:	4a5a      	ldr	r2, [pc, #360]	; (80018a0 <_Z32distance_calculator_thread_entryv+0x498>)
    E = 0x510e527f;
    F = 0x9b05688c;
 8001736:	495b      	ldr	r1, [pc, #364]	; (80018a4 <_Z32distance_calculator_thread_entryv+0x49c>)
    B = 0xbb67ae85;
 8001738:	e9cd 394f 	strd	r3, r9, [sp, #316]	; 0x13c
    D = 0xa54ff53a;
 800173c:	4b5a      	ldr	r3, [pc, #360]	; (80018a8 <_Z32distance_calculator_thread_entryv+0x4a0>)
 800173e:	e9cd 2351 	strd	r2, r3, [sp, #324]	; 0x144
    F = 0x9b05688c;
 8001742:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <_Z32distance_calculator_thread_entryv+0x4a4>)
 8001744:	e9cd 1353 	strd	r1, r3, [sp, #332]	; 0x14c
    G = 0x1f83d9ab;
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <_Z32distance_calculator_thread_entryv+0x4a8>)
 800174a:	9355      	str	r3, [sp, #340]	; 0x154
    H = 0x5be0cd19;
 800174c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8001750:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8001754:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001758:	2220      	movs	r2, #32
 800175a:	f10a 0110 	add.w	r1, sl, #16
 800175e:	a84d      	add	r0, sp, #308	; 0x134
 8001760:	9356      	str	r3, [sp, #344]	; 0x158
    m->sz[1] = 0;
 8001762:	e9cd bb4d 	strd	fp, fp, [sp, #308]	; 0x134
 8001766:	f003 f9f1 	bl	8004b4c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 800176a:	4632      	mov	r2, r6
 800176c:	a908      	add	r1, sp, #32
 800176e:	a84d      	add	r0, sp, #308	; 0x134
 8001770:	f003 f9ec 	bl	8004b4c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001774:	4622      	mov	r2, r4
 8001776:	4629      	mov	r1, r5
 8001778:	a84d      	add	r0, sp, #308	; 0x134
 800177a:	f003 f9e7 	bl	8004b4c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 800177e:	2202      	movs	r2, #2
 8001780:	1929      	adds	r1, r5, r4
 8001782:	a84d      	add	r0, sp, #308	; 0x134
 8001784:	f003 f9e2 	bl	8004b4c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001788:	f20d 21b2 	addw	r1, sp, #690	; 0x2b2
 800178c:	a84d      	add	r0, sp, #308	; 0x134
 800178e:	2207      	movs	r2, #7
 8001790:	f003 f9dc 	bl	8004b4c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8001794:	f20d 21b9 	addw	r1, sp, #697	; 0x2b9
 8001798:	a84d      	add	r0, sp, #308	; 0x134
 800179a:	f007 f891 	bl	80088c0 <mavlink_sha256_final_48>
{
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 800179e:	f89d 119e 	ldrb.w	r1, [sp, #414]	; 0x19e
		buf[0] = msg->magic;
		buf[1] = length;
		buf[2] = msg->seq;
		buf[3] = msg->sysid;
		buf[4] = msg->compid;
		buf[5] = msg->msgid & 0xFF;
 80017a2:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
	return msg->len + header_len + 2 + signature_len;
 80017a4:	f89d 619f 	ldrb.w	r6, [sp, #415]	; 0x19f
		buf[2] = msg->seq;
 80017a8:	f89d e1a2 	ldrb.w	lr, [sp, #418]	; 0x1a2
		buf[3] = msg->sysid;
 80017ac:	f89d c1a3 	ldrb.w	ip, [sp, #419]	; 0x1a3
		buf[4] = msg->compid;
 80017b0:	f89d 01a4 	ldrb.w	r0, [sp, #420]	; 0x1a4
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80017b4:	29fe      	cmp	r1, #254	; 0xfe
		buf[5] = msg->msgid & 0xFF;
 80017b6:	f3c3 2217 	ubfx	r2, r3, #8, #24
 80017ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80017be:	d03b      	beq.n	8001838 <_Z32distance_calculator_thread_entryv+0x430>
 80017c0:	4634      	mov	r4, r6
	while (length > 1 && payload[length-1] == 0) {
 80017c2:	2c01      	cmp	r4, #1
 80017c4:	b2e6      	uxtb	r6, r4
 80017c6:	d90a      	bls.n	80017de <_Z32distance_calculator_thread_entryv+0x3d6>
 80017c8:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 80017cc:	f50d 78ce 	add.w	r8, sp, #412	; 0x19c
 80017d0:	eb08 0b0a 	add.w	fp, r8, sl
 80017d4:	f89b b00c 	ldrb.w	fp, [fp, #12]
 80017d8:	f1bb 0f00 	cmp.w	fp, #0
 80017dc:	d05b      	beq.n	8001896 <_Z32distance_calculator_thread_entryv+0x48e>
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
		ck = buf + header_len + 1 + (uint16_t)msg->len;
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
		header_len = MAVLINK_CORE_HEADER_LEN;
		buf[0] = msg->magic;
 80017de:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
		buf[1] = length;
		buf[2] = msg->incompat_flags;
 80017e2:	f89d 11a0 	ldrb.w	r1, [sp, #416]	; 0x1a0
 80017e6:	f88d 108e 	strb.w	r1, [sp, #142]	; 0x8e
		buf[3] = msg->compat_flags;
		buf[4] = msg->seq;
		buf[5] = msg->sysid;
		buf[6] = msg->compid;
		buf[7] = msg->msgid & 0xFF;
 80017ea:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
		buf[3] = msg->compat_flags;
 80017ee:	f89d 11a1 	ldrb.w	r1, [sp, #417]	; 0x1a1
 80017f2:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80017f6:	1213      	asrs	r3, r2, #8
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80017f8:	1412      	asrs	r2, r2, #16
		buf[6] = msg->compid;
 80017fa:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80017fe:	f88d 2095 	strb.w	r2, [sp, #149]	; 0x95
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001802:	4629      	mov	r1, r5
 8001804:	4622      	mov	r2, r4
 8001806:	f10d 0096 	add.w	r0, sp, #150	; 0x96
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800180a:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
		buf[1] = length;
 800180e:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
		buf[4] = msg->seq;
 8001812:	f88d e090 	strb.w	lr, [sp, #144]	; 0x90
		buf[5] = msg->sysid;
 8001816:	f88d c091 	strb.w	ip, [sp, #145]	; 0x91
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 800181a:	f008 fa42 	bl	8009ca2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 800181e:	f104 000a 	add.w	r0, r4, #10
 8001822:	f89d 41a0 	ldrb.w	r4, [sp, #416]	; 0x1a0
 8001826:	ab23      	add	r3, sp, #140	; 0x8c
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001828:	f014 0401 	ands.w	r4, r4, #1
		ck = buf + header_len + 1 + (uint16_t)length;
 800182c:	4418      	add	r0, r3
		header_len = MAVLINK_CORE_HEADER_LEN;
 800182e:	f04f 0509 	mov.w	r5, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001832:	bf18      	it	ne
 8001834:	240d      	movne	r4, #13
 8001836:	e018      	b.n	800186a <_Z32distance_calculator_thread_entryv+0x462>
		buf[0] = msg->magic;
 8001838:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
		buf[4] = msg->compid;
 800183c:	f88d 0090 	strb.w	r0, [sp, #144]	; 0x90
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001840:	4629      	mov	r1, r5
 8001842:	4632      	mov	r2, r6
 8001844:	f10d 0092 	add.w	r0, sp, #146	; 0x92
		buf[5] = msg->msgid & 0xFF;
 8001848:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
		buf[1] = length;
 800184c:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
		buf[2] = msg->seq;
 8001850:	f88d e08e 	strb.w	lr, [sp, #142]	; 0x8e
		buf[3] = msg->sysid;
 8001854:	f88d c08f 	strb.w	ip, [sp, #143]	; 0x8f
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001858:	f008 fa23 	bl	8009ca2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 800185c:	f89d 019f 	ldrb.w	r0, [sp, #415]	; 0x19f
 8001860:	ab23      	add	r3, sp, #140	; 0x8c
 8001862:	3006      	adds	r0, #6
 8001864:	4418      	add	r0, r3
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001866:	2505      	movs	r5, #5
		signature_len = 0;
 8001868:	2400      	movs	r4, #0
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800186a:	f8bd 319c 	ldrh.w	r3, [sp, #412]	; 0x19c
 800186e:	7003      	strb	r3, [r0, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	7043      	strb	r3, [r0, #1]
	if (signature_len > 0) {
 8001874:	b12c      	cbz	r4, 8001882 <_Z32distance_calculator_thread_entryv+0x47a>
		memcpy(&ck[2], msg->signature, signature_len);
 8001876:	4622      	mov	r2, r4
 8001878:	f20d 21b2 	addw	r1, sp, #690	; 0x2b2
 800187c:	3002      	adds	r0, #2
 800187e:	f008 fa10 	bl	8009ca2 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001882:	19a9      	adds	r1, r5, r6
 8001884:	3403      	adds	r4, #3

			mavlink_msg_distance_sensor_encode(OUR_ID, UWB_COMPONENT_ID, &mav_msg, &msg);
			int n = mavlink_msg_to_send_buffer(send_buf, &mav_msg);
			mavlink_send_uart_bytes(send_buf, n);
 8001886:	4421      	add	r1, r4
 8001888:	a823      	add	r0, sp, #140	; 0x8c
 800188a:	f003 fa39 	bl	8004d00 <_Z23mavlink_send_uart_bytesPKhi>
		for (int i=1; i<=SYS_IDS; ++i) {
 800188e:	2f00      	cmp	r7, #0
 8001890:	f43f ae06 	beq.w	80014a0 <_Z32distance_calculator_thread_entryv+0x98>
 8001894:	e5da      	b.n	800144c <_Z32distance_calculator_thread_entryv+0x44>
 8001896:	4654      	mov	r4, sl
 8001898:	e793      	b.n	80017c2 <_Z32distance_calculator_thread_entryv+0x3ba>
 800189a:	bf00      	nop
 800189c:	6a09e667 	.word	0x6a09e667
 80018a0:	3c6ef372 	.word	0x3c6ef372
 80018a4:	510e527f 	.word	0x510e527f
 80018a8:	a54ff53a 	.word	0xa54ff53a
 80018ac:	9b05688c 	.word	0x9b05688c
 80018b0:	1f83d9ab 	.word	0x1f83d9ab
 80018b4:	00000000 	.word	0x00000000

080018b8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 80018b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018bc:	ed2d 8b02 	vpush	{d8}
	uint64_t round = BIT64(59); /* 0.5 */
 80018c0:	ed9f 8bab 	vldr	d8, [pc, #684]	; 8001b70 <cbvprintf+0x2b8>
{
 80018c4:	b09b      	sub	sp, #108	; 0x6c
 80018c6:	4681      	mov	r9, r0
 80018c8:	468a      	mov	sl, r1
 80018ca:	4615      	mov	r5, r2
 80018cc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80018ce:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80018d0:	7828      	ldrb	r0, [r5, #0]
 80018d2:	b910      	cbnz	r0, 80018da <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80018d4:	4630      	mov	r0, r6
 80018d6:	f000 bdc9 	b.w	800246c <cbvprintf+0xbb4>
			OUTC(*fp++);
 80018da:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
 80018dc:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 80018de:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
 80018e0:	d006      	beq.n	80018f0 <cbvprintf+0x38>
			OUTC(*fp++);
 80018e2:	4651      	mov	r1, sl
			OUTC('%');
 80018e4:	47c8      	blx	r9
 80018e6:	2800      	cmp	r0, #0
 80018e8:	f2c0 85c0 	blt.w	800246c <cbvprintf+0xbb4>
 80018ec:	3601      	adds	r6, #1
		if (bps == NULL) {
 80018ee:	e22e      	b.n	8001d4e <cbvprintf+0x496>
		} state = {
 80018f0:	2218      	movs	r2, #24
 80018f2:	2100      	movs	r1, #0
 80018f4:	a80c      	add	r0, sp, #48	; 0x30
 80018f6:	f008 f9e2 	bl	8009cbe <memset>
	if (*sp == '%') {
 80018fa:	786b      	ldrb	r3, [r5, #1]
 80018fc:	2b25      	cmp	r3, #37	; 0x25
 80018fe:	d059      	beq.n	80019b4 <cbvprintf+0xfc>
 8001900:	1c6a      	adds	r2, r5, #1
 8001902:	4617      	mov	r7, r2
		switch (*sp) {
 8001904:	f812 3b01 	ldrb.w	r3, [r2], #1
 8001908:	2b2b      	cmp	r3, #43	; 0x2b
 800190a:	f000 808b 	beq.w	8001a24 <cbvprintf+0x16c>
 800190e:	d879      	bhi.n	8001a04 <cbvprintf+0x14c>
 8001910:	2b20      	cmp	r3, #32
 8001912:	f000 808c 	beq.w	8001a2e <cbvprintf+0x176>
 8001916:	2b23      	cmp	r3, #35	; 0x23
 8001918:	f000 808e 	beq.w	8001a38 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
 800191c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001920:	f003 0244 	and.w	r2, r3, #68	; 0x44
 8001924:	2a44      	cmp	r2, #68	; 0x44
 8001926:	d103      	bne.n	8001930 <cbvprintf+0x78>
		conv->flag_zero = false;
 8001928:	f36f 1386 	bfc	r3, #6, #1
 800192c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
 8001930:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001934:	970a      	str	r7, [sp, #40]	; 0x28
 8001936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
 800193e:	783b      	ldrb	r3, [r7, #0]
 8001940:	2b2a      	cmp	r3, #42	; 0x2a
 8001942:	d17e      	bne.n	8001a42 <cbvprintf+0x18a>
		conv->width_star = true;
 8001944:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
 8001950:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
 8001952:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	2a2e      	cmp	r2, #46	; 0x2e
 8001958:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800195c:	bf0c      	ite	eq
 800195e:	2101      	moveq	r1, #1
 8001960:	2100      	movne	r1, #0
 8001962:	f361 0241 	bfi	r2, r1, #1, #1
 8001966:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
 800196a:	d10b      	bne.n	8001984 <cbvprintf+0xcc>
	++sp;
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
 8001970:	785a      	ldrb	r2, [r3, #1]
 8001972:	2a2a      	cmp	r2, #42	; 0x2a
 8001974:	d17b      	bne.n	8001a6e <cbvprintf+0x1b6>
		conv->prec_star = true;
 8001976:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800197a:	f042 0204 	orr.w	r2, r2, #4
 800197e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
 8001982:	3302      	adds	r3, #2
	switch (*sp) {
 8001984:	4619      	mov	r1, r3
 8001986:	f811 0b01 	ldrb.w	r0, [r1], #1
 800198a:	286c      	cmp	r0, #108	; 0x6c
 800198c:	f000 80cf 	beq.w	8001b2e <cbvprintf+0x276>
 8001990:	d87d      	bhi.n	8001a8e <cbvprintf+0x1d6>
 8001992:	2868      	cmp	r0, #104	; 0x68
 8001994:	f000 8084 	beq.w	8001aa0 <cbvprintf+0x1e8>
 8001998:	286a      	cmp	r0, #106	; 0x6a
 800199a:	f000 80d2 	beq.w	8001b42 <cbvprintf+0x28a>
 800199e:	284c      	cmp	r0, #76	; 0x4c
 80019a0:	f000 80d6 	beq.w	8001b50 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
 80019a4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80019a8:	f36f 02c6 	bfc	r2, #3, #4
 80019ac:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
 80019b0:	4619      	mov	r1, r3
 80019b2:	e080      	b.n	8001ab6 <cbvprintf+0x1fe>
		conv->specifier = *sp++;
 80019b4:	1caa      	adds	r2, r5, #2
 80019b6:	9202      	str	r2, [sp, #8]
 80019b8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
 80019bc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80019c0:	07df      	lsls	r7, r3, #31
 80019c2:	f140 8178 	bpl.w	8001cb6 <cbvprintf+0x3fe>
			width = va_arg(ap, int);
 80019c6:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
 80019ca:	f1bb 0f00 	cmp.w	fp, #0
 80019ce:	da07      	bge.n	80019e0 <cbvprintf+0x128>
				conv->flag_dash = true;
 80019d0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80019d4:	f042 0204 	orr.w	r2, r2, #4
 80019d8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
 80019dc:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
 80019e0:	0758      	lsls	r0, r3, #29
 80019e2:	f140 8171 	bpl.w	8001cc8 <cbvprintf+0x410>
			int arg = va_arg(ap, int);
 80019e6:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 80019ea:	f1b8 0f00 	cmp.w	r8, #0
 80019ee:	f280 8170 	bge.w	8001cd2 <cbvprintf+0x41a>
				conv->prec_present = false;
 80019f2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80019f6:	f36f 0341 	bfc	r3, #1, #1
 80019fa:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
 80019fe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8001a02:	e166      	b.n	8001cd2 <cbvprintf+0x41a>
		switch (*sp) {
 8001a04:	2b2d      	cmp	r3, #45	; 0x2d
 8001a06:	d006      	beq.n	8001a16 <cbvprintf+0x15e>
 8001a08:	2b30      	cmp	r3, #48	; 0x30
 8001a0a:	d187      	bne.n	800191c <cbvprintf+0x64>
			conv->flag_zero = true;
 8001a0c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a14:	e003      	b.n	8001a1e <cbvprintf+0x166>
			conv->flag_dash = true;
 8001a16:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
 8001a1e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
 8001a22:	e76e      	b.n	8001902 <cbvprintf+0x4a>
			conv->flag_plus = true;
 8001a24:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	e7f7      	b.n	8001a1e <cbvprintf+0x166>
			conv->flag_space = true;
 8001a2e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	e7f2      	b.n	8001a1e <cbvprintf+0x166>
			conv->flag_hash = true;
 8001a38:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001a3c:	f043 0320 	orr.w	r3, r3, #32
 8001a40:	e7ed      	b.n	8001a1e <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
 8001a42:	a80a      	add	r0, sp, #40	; 0x28
 8001a44:	f003 f9dc 	bl	8004e00 <extract_decimal>
	if (sp != wp) {
 8001a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a4a:	42bb      	cmp	r3, r7
 8001a4c:	d081      	beq.n	8001952 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
 8001a4e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
		conv->width_value = width;
 8001a52:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
 8001a54:	f3c7 0140 	ubfx	r1, r7, #1, #1
 8001a58:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
 8001a5c:	0052      	lsls	r2, r2, #1
 8001a5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a62:	f007 017d 	and.w	r1, r7, #125	; 0x7d
 8001a66:	430a      	orrs	r2, r1
 8001a68:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8001a6c:	e771      	b.n	8001952 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
 8001a6e:	a80a      	add	r0, sp, #40	; 0x28
 8001a70:	f003 f9c6 	bl	8004e00 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8001a74:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
 8001a78:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
 8001a7a:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8001a7e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
 8001a82:	f360 0341 	bfi	r3, r0, #1, #1
 8001a86:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
 8001a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a8c:	e77a      	b.n	8001984 <cbvprintf+0xcc>
	switch (*sp) {
 8001a8e:	2874      	cmp	r0, #116	; 0x74
 8001a90:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8001a94:	d059      	beq.n	8001b4a <cbvprintf+0x292>
 8001a96:	287a      	cmp	r0, #122	; 0x7a
 8001a98:	d184      	bne.n	80019a4 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	2206      	movs	r2, #6
 8001a9e:	e041      	b.n	8001b24 <cbvprintf+0x26c>
		if (*++sp == 'h') {
 8001aa0:	785a      	ldrb	r2, [r3, #1]
 8001aa2:	2a68      	cmp	r2, #104	; 0x68
 8001aa4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8001aa8:	d13a      	bne.n	8001b20 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
 8001aaa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8001aac:	f361 02c6 	bfi	r2, r1, #3, #4
 8001ab0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
 8001ab4:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001abc:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
 8001abe:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 8001ac0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
 8001ac4:	f200 80cd 	bhi.w	8001c62 <cbvprintf+0x3aa>
 8001ac8:	2a57      	cmp	r2, #87	; 0x57
 8001aca:	d855      	bhi.n	8001b78 <cbvprintf+0x2c0>
 8001acc:	2a41      	cmp	r2, #65	; 0x41
 8001ace:	d004      	beq.n	8001ada <cbvprintf+0x222>
 8001ad0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	f200 80c4 	bhi.w	8001c62 <cbvprintf+0x3aa>
		conv->specifier_cat = SPECIFIER_FP;
 8001ada:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001ade:	2104      	movs	r1, #4
 8001ae0:	f361 0302 	bfi	r3, r1, #0, #3
 8001ae4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 8001ae8:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8001aec:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
 8001af0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
 8001af4:	f1d8 0300 	rsbs	r3, r8, #0
 8001af8:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
 8001afc:	f363 12c7 	bfi	r2, r3, #7, #1
 8001b00:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
 8001b04:	b2d3      	uxtb	r3, r2
 8001b06:	0612      	lsls	r2, r2, #24
 8001b08:	f100 80d3 	bmi.w	8001cb2 <cbvprintf+0x3fa>
		if (conv->length_mod == LENGTH_L) {
 8001b0c:	f003 0278 	and.w	r2, r3, #120	; 0x78
 8001b10:	2a18      	cmp	r2, #24
 8001b12:	f040 80a3 	bne.w	8001c5c <cbvprintf+0x3a4>
			conv->length_mod = LENGTH_NONE;
 8001b16:	f36f 03c6 	bfc	r3, #3, #4
 8001b1a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8001b1e:	e08a      	b.n	8001c36 <cbvprintf+0x37e>
			conv->length_mod = LENGTH_H;
 8001b20:	4613      	mov	r3, r2
 8001b22:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
 8001b24:	f362 03c6 	bfi	r3, r2, #3, #4
 8001b28:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8001b2c:	e7c3      	b.n	8001ab6 <cbvprintf+0x1fe>
		if (*++sp == 'l') {
 8001b2e:	785a      	ldrb	r2, [r3, #1]
 8001b30:	2a6c      	cmp	r2, #108	; 0x6c
 8001b32:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8001b36:	d101      	bne.n	8001b3c <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
 8001b38:	2104      	movs	r1, #4
 8001b3a:	e7b7      	b.n	8001aac <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	2203      	movs	r2, #3
 8001b40:	e7f0      	b.n	8001b24 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
 8001b42:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001b46:	2205      	movs	r2, #5
 8001b48:	e7ec      	b.n	8001b24 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	e7e9      	b.n	8001b24 <cbvprintf+0x26c>
		conv->unsupported = true;
 8001b50:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8001b54:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001b58:	f023 0302 	bic.w	r3, r3, #2
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
 8001b68:	e7a5      	b.n	8001ab6 <cbvprintf+0x1fe>
 8001b6a:	bf00      	nop
 8001b6c:	f3af 8000 	nop.w
 8001b70:	00000000 	.word	0x00000000
 8001b74:	08000000 	.word	0x08000000
 8001b78:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8001b7c:	2b20      	cmp	r3, #32
 8001b7e:	d870      	bhi.n	8001c62 <cbvprintf+0x3aa>
 8001b80:	a101      	add	r1, pc, #4	; (adr r1, 8001b88 <cbvprintf+0x2d0>)
 8001b82:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b86:	bf00      	nop
 8001b88:	08001c3b 	.word	0x08001c3b
 8001b8c:	08001c63 	.word	0x08001c63
 8001b90:	08001c63 	.word	0x08001c63
 8001b94:	08001c63 	.word	0x08001c63
 8001b98:	08001c63 	.word	0x08001c63
 8001b9c:	08001c63 	.word	0x08001c63
 8001ba0:	08001c63 	.word	0x08001c63
 8001ba4:	08001c63 	.word	0x08001c63
 8001ba8:	08001c63 	.word	0x08001c63
 8001bac:	08001adb 	.word	0x08001adb
 8001bb0:	08001c63 	.word	0x08001c63
 8001bb4:	08001c3b 	.word	0x08001c3b
 8001bb8:	08001c0d 	.word	0x08001c0d
 8001bbc:	08001adb 	.word	0x08001adb
 8001bc0:	08001adb 	.word	0x08001adb
 8001bc4:	08001adb 	.word	0x08001adb
 8001bc8:	08001c63 	.word	0x08001c63
 8001bcc:	08001c0d 	.word	0x08001c0d
 8001bd0:	08001c63 	.word	0x08001c63
 8001bd4:	08001c63 	.word	0x08001c63
 8001bd8:	08001c63 	.word	0x08001c63
 8001bdc:	08001c63 	.word	0x08001c63
 8001be0:	08001c71 	.word	0x08001c71
 8001be4:	08001c3b 	.word	0x08001c3b
 8001be8:	08001c95 	.word	0x08001c95
 8001bec:	08001c63 	.word	0x08001c63
 8001bf0:	08001c63 	.word	0x08001c63
 8001bf4:	08001c95 	.word	0x08001c95
 8001bf8:	08001c63 	.word	0x08001c63
 8001bfc:	08001c3b 	.word	0x08001c3b
 8001c00:	08001c63 	.word	0x08001c63
 8001c04:	08001c63 	.word	0x08001c63
 8001c08:	08001c3b 	.word	0x08001c3b
		conv->specifier_cat = SPECIFIER_SINT;
 8001c0c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001c10:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
 8001c12:	f361 0302 	bfi	r3, r1, #0, #3
 8001c16:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001c1a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001c1e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001c22:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
 8001c24:	bf02      	ittt	eq
 8001c26:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
 8001c2a:	f041 0101 	orreq.w	r1, r1, #1
 8001c2e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
 8001c32:	2a63      	cmp	r2, #99	; 0x63
 8001c34:	d005      	beq.n	8001c42 <cbvprintf+0x38a>
	bool unsupported = false;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e006      	b.n	8001c48 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_UINT;
 8001c3a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001c3e:	2102      	movs	r1, #2
 8001c40:	e7e7      	b.n	8001c12 <cbvprintf+0x35a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8001c42:	3b00      	subs	r3, #0
 8001c44:	bf18      	it	ne
 8001c46:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8001c48:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8001c4c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8001c50:	430b      	orrs	r3, r1
 8001c52:	f363 0241 	bfi	r2, r3, #1, #1
 8001c56:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
 8001c5a:	e6af      	b.n	80019bc <cbvprintf+0x104>
		} else if ((conv->length_mod != LENGTH_NONE)
 8001c5c:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001c60:	d0e9      	beq.n	8001c36 <cbvprintf+0x37e>
			conv->invalid = true;
 8001c62:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8001c6e:	e7e2      	b.n	8001c36 <cbvprintf+0x37e>
		conv->specifier_cat = SPECIFIER_PTR;
 8001c70:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001c74:	2203      	movs	r2, #3
 8001c76:	f362 0302 	bfi	r3, r2, #0, #3
 8001c7a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001c7e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001c82:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001c86:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
 8001c8a:	f1dc 0300 	rsbs	r3, ip, #0
 8001c8e:	eb43 030c 	adc.w	r3, r3, ip
 8001c92:	e7d9      	b.n	8001c48 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_PTR;
 8001c94:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001c98:	2203      	movs	r2, #3
 8001c9a:	f362 0302 	bfi	r3, r2, #0, #3
 8001c9e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
 8001ca2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001ca6:	f013 0f78 	tst.w	r3, #120	; 0x78
 8001caa:	bf14      	ite	ne
 8001cac:	2301      	movne	r3, #1
 8001cae:	2300      	moveq	r3, #0
 8001cb0:	e7ca      	b.n	8001c48 <cbvprintf+0x390>
			unsupported = true;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e7c8      	b.n	8001c48 <cbvprintf+0x390>
		} else if (conv->width_present) {
 8001cb6:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
 8001cba:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8001cbc:	bfb4      	ite	lt
 8001cbe:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
 8001cc2:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
 8001cc6:	e68b      	b.n	80019e0 <cbvprintf+0x128>
		} else if (conv->prec_present) {
 8001cc8:	0799      	lsls	r1, r3, #30
 8001cca:	f57f ae98 	bpl.w	80019fe <cbvprintf+0x146>
			precision = conv->prec_value;
 8001cce:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
 8001cd2:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 8001cd6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8001cd8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
 8001cdc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 8001ce0:	f003 0207 	and.w	r2, r3, #7
 8001ce4:	2a04      	cmp	r2, #4
 8001ce6:	d109      	bne.n	8001cfc <cbvprintf+0x444>
		    && !conv->prec_present) {
 8001ce8:	078a      	lsls	r2, r1, #30
 8001cea:	d407      	bmi.n	8001cfc <cbvprintf+0x444>
			if (conv->specifier_a) {
 8001cec:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
 8001cf0:	2a00      	cmp	r2, #0
 8001cf2:	bfb4      	ite	lt
 8001cf4:	f04f 080d 	movlt.w	r8, #13
 8001cf8:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
 8001cfc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8001d00:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8001d02:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8001d06:	d137      	bne.n	8001d78 <cbvprintf+0x4c0>
			switch (length_mod) {
 8001d08:	1ecb      	subs	r3, r1, #3
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d821      	bhi.n	8001d52 <cbvprintf+0x49a>
 8001d0e:	e8df f003 	tbb	[pc, r3]
 8001d12:	0903      	.short	0x0903
 8001d14:	2009      	.short	0x2009
 8001d16:	20          	.byte	0x20
 8001d17:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8001d18:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 8001d1c:	17da      	asrs	r2, r3, #31
 8001d1e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8001d22:	e006      	b.n	8001d32 <cbvprintf+0x47a>
					(sint_value_type)va_arg(ap, intmax_t);
 8001d24:	3407      	adds	r4, #7
 8001d26:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 8001d2a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8001d2e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
 8001d32:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8001d36:	07bb      	lsls	r3, r7, #30
 8001d38:	d054      	beq.n	8001de4 <cbvprintf+0x52c>
			OUTS(sp, fp);
 8001d3a:	9b02      	ldr	r3, [sp, #8]
 8001d3c:	462a      	mov	r2, r5
 8001d3e:	4651      	mov	r1, sl
 8001d40:	4648      	mov	r0, r9
 8001d42:	f007 f804 	bl	8008d4e <outs>
 8001d46:	2800      	cmp	r0, #0
 8001d48:	f2c0 8390 	blt.w	800246c <cbvprintf+0xbb4>
 8001d4c:	4406      	add	r6, r0
			while (pad_len-- > 0) {
 8001d4e:	9d02      	ldr	r5, [sp, #8]
 8001d50:	e5be      	b.n	80018d0 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8001d52:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8001d56:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8001d58:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8001d5c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8001d60:	d105      	bne.n	8001d6e <cbvprintf+0x4b6>
				value->uint = (unsigned char)value->uint;
 8001d62:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
 8001d66:	930c      	str	r3, [sp, #48]	; 0x30
 8001d68:	2300      	movs	r3, #0
 8001d6a:	930d      	str	r3, [sp, #52]	; 0x34
 8001d6c:	e7e1      	b.n	8001d32 <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
 8001d6e:	2902      	cmp	r1, #2
 8001d70:	d1df      	bne.n	8001d32 <cbvprintf+0x47a>
				value->sint = (short)value->sint;
 8001d72:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8001d76:	e7d1      	b.n	8001d1c <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d123      	bne.n	8001dc4 <cbvprintf+0x50c>
			switch (length_mod) {
 8001d7c:	1ecb      	subs	r3, r1, #3
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d813      	bhi.n	8001daa <cbvprintf+0x4f2>
 8001d82:	e8df f003 	tbb	[pc, r3]
 8001d86:	0a03      	.short	0x0a03
 8001d88:	120a      	.short	0x120a
 8001d8a:	12          	.byte	0x12
 8001d8b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8001d8c:	6820      	ldr	r0, [r4, #0]
 8001d8e:	900c      	str	r0, [sp, #48]	; 0x30
 8001d90:	2200      	movs	r2, #0
				value->sint = va_arg(ap, int);
 8001d92:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8001d94:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
 8001d96:	461c      	mov	r4, r3
 8001d98:	e7cb      	b.n	8001d32 <cbvprintf+0x47a>
					(uint_value_type)va_arg(ap,
 8001d9a:	1de3      	adds	r3, r4, #7
 8001d9c:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
 8001da0:	ecb3 7b02 	vldmia	r3!, {d7}
 8001da4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
 8001da8:	e7f5      	b.n	8001d96 <cbvprintf+0x4de>
					(uint_value_type)va_arg(ap, size_t);
 8001daa:	f854 3b04 	ldr.w	r3, [r4], #4
 8001dae:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8001db0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
 8001db8:	d0d3      	beq.n	8001d62 <cbvprintf+0x4aa>
			} else if (length_mod == LENGTH_H) {
 8001dba:	2902      	cmp	r1, #2
 8001dbc:	d1b9      	bne.n	8001d32 <cbvprintf+0x47a>
				value->uint = (unsigned short)value->uint;
 8001dbe:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8001dc2:	e7d0      	b.n	8001d66 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_FP) {
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d107      	bne.n	8001dd8 <cbvprintf+0x520>
					(sint_value_type)va_arg(ap, long long);
 8001dc8:	3407      	adds	r4, #7
 8001dca:	f024 0407 	bic.w	r4, r4, #7
 8001dce:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
 8001dd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001dd6:	e7ac      	b.n	8001d32 <cbvprintf+0x47a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8001dd8:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8001dda:	bf04      	itt	eq
 8001ddc:	f854 3b04 	ldreq.w	r3, [r4], #4
 8001de0:	930c      	streq	r3, [sp, #48]	; 0x30
 8001de2:	e7a6      	b.n	8001d32 <cbvprintf+0x47a>
		switch (conv->specifier) {
 8001de4:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8001de8:	2a78      	cmp	r2, #120	; 0x78
 8001dea:	d8b0      	bhi.n	8001d4e <cbvprintf+0x496>
 8001dec:	2a57      	cmp	r2, #87	; 0x57
 8001dee:	f200 808c 	bhi.w	8001f0a <cbvprintf+0x652>
 8001df2:	2a25      	cmp	r2, #37	; 0x25
 8001df4:	f000 80d4 	beq.w	8001fa0 <cbvprintf+0x6e8>
 8001df8:	2a24      	cmp	r2, #36	; 0x24
 8001dfa:	d9a8      	bls.n	8001d4e <cbvprintf+0x496>
 8001dfc:	2a41      	cmp	r2, #65	; 0x41
 8001dfe:	d003      	beq.n	8001e08 <cbvprintf+0x550>
 8001e00:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d8a2      	bhi.n	8001d4e <cbvprintf+0x496>
	} u = {
 8001e08:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f2c0 81b7 	blt.w	8002180 <cbvprintf+0x8c8>
	} else if (conv->flag_plus) {
 8001e12:	0738      	lsls	r0, r7, #28
 8001e14:	f100 81b6 	bmi.w	8002184 <cbvprintf+0x8cc>
		*sign = ' ';
 8001e18:	f017 0710 	ands.w	r7, r7, #16
 8001e1c:	bf18      	it	ne
 8001e1e:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8001e20:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 8001e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e28:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
 8001e2c:	2d00      	cmp	r5, #0
 8001e2e:	f040 81ab 	bne.w	8002188 <cbvprintf+0x8d0>
 8001e32:	ea51 0003 	orrs.w	r0, r1, r3
 8001e36:	bf14      	ite	ne
 8001e38:	2001      	movne	r0, #1
 8001e3a:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
 8001e3c:	02db      	lsls	r3, r3, #11
 8001e3e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8001e42:	02c9      	lsls	r1, r1, #11
		c = 'f';
 8001e44:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
 8001e46:	ea45 0e01 	orr.w	lr, r5, r1
 8001e4a:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
 8001e4e:	bf08      	it	eq
 8001e50:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
 8001e52:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 8001e56:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
 8001e5a:	f000 8203 	beq.w	8002264 <cbvprintf+0x9ac>
		if (is_subnormal) {
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	f040 81cb 	bne.w	80021fa <cbvprintf+0x942>
		fract |= BIT_63;
 8001e64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001e68:	f04f 0c00 	mov.w	ip, #0
 8001e6c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8001e70:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
 8001e74:	9109      	str	r1, [sp, #36]	; 0x24
 8001e76:	4663      	mov	r3, ip
		fract *= 5U;
 8001e78:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
 8001e7c:	f115 0f02 	cmn.w	r5, #2
 8001e80:	f2c0 81c2 	blt.w	8002208 <cbvprintf+0x950>
 8001e84:	f1bc 0f00 	cmp.w	ip, #0
 8001e88:	d001      	beq.n	8001e8e <cbvprintf+0x5d6>
 8001e8a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
 8001e8e:	2d00      	cmp	r5, #0
		fract += 2;
 8001e90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
 8001e94:	f300 81cd 	bgt.w	8002232 <cbvprintf+0x97a>
	fract >>= (4 - expo);
 8001e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e9a:	9908      	ldr	r1, [sp, #32]
 8001e9c:	f1c5 0c04 	rsb	ip, r5, #4
 8001ea0:	351c      	adds	r5, #28
 8001ea2:	fa00 f505 	lsl.w	r5, r0, r5
 8001ea6:	f1ac 0e20 	sub.w	lr, ip, #32
 8001eaa:	fa21 f10c 	lsr.w	r1, r1, ip
 8001eae:	fa20 fe0e 	lsr.w	lr, r0, lr
 8001eb2:	4329      	orrs	r1, r5
 8001eb4:	ea41 010e 	orr.w	r1, r1, lr
 8001eb8:	fa20 f00c 	lsr.w	r0, r0, ip
 8001ebc:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
 8001ec0:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8001ec4:	2947      	cmp	r1, #71	; 0x47
 8001ec6:	f040 81d4 	bne.w	8002272 <cbvprintf+0x9ba>
		if (decexp < (-4 + 1) || decexp > precision) {
 8001eca:	1cdd      	adds	r5, r3, #3
 8001ecc:	db02      	blt.n	8001ed4 <cbvprintf+0x61c>
 8001ece:	4598      	cmp	r8, r3
 8001ed0:	f280 81cb 	bge.w	800226a <cbvprintf+0x9b2>
			c += 'e' - 'g';  /* e or E */
 8001ed4:	3a02      	subs	r2, #2
			if (precision > 0) {
 8001ed6:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
 8001eda:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
 8001edc:	dd01      	ble.n	8001ee2 <cbvprintf+0x62a>
				precision--;
 8001ede:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
 8001ee2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8001ee6:	0688      	lsls	r0, r1, #26
 8001ee8:	f100 81c3 	bmi.w	8002272 <cbvprintf+0x9ba>
 8001eec:	f1b8 0f00 	cmp.w	r8, #0
 8001ef0:	bfd4      	ite	le
 8001ef2:	2100      	movle	r1, #0
 8001ef4:	2101      	movgt	r1, #1
	if (c == 'f') {
 8001ef6:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
 8001ef8:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
 8001efa:	f040 81bc 	bne.w	8002276 <cbvprintf+0x9be>
		if (decimals < 0) {
 8001efe:	eb13 0108 	adds.w	r1, r3, r8
 8001f02:	f140 81ba 	bpl.w	800227a <cbvprintf+0x9c2>
			decimals = 0;
 8001f06:	2100      	movs	r1, #0
 8001f08:	e1ba      	b.n	8002280 <cbvprintf+0x9c8>
 8001f0a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	f63f af1d 	bhi.w	8001d4e <cbvprintf+0x496>
 8001f14:	a001      	add	r0, pc, #4	; (adr r0, 8001f1c <cbvprintf+0x664>)
 8001f16:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08002123 	.word	0x08002123
 8001f20:	08001d4f 	.word	0x08001d4f
 8001f24:	08001d4f 	.word	0x08001d4f
 8001f28:	08001d4f 	.word	0x08001d4f
 8001f2c:	08001d4f 	.word	0x08001d4f
 8001f30:	08001d4f 	.word	0x08001d4f
 8001f34:	08001d4f 	.word	0x08001d4f
 8001f38:	08001d4f 	.word	0x08001d4f
 8001f3c:	08001d4f 	.word	0x08001d4f
 8001f40:	08001e09 	.word	0x08001e09
 8001f44:	08001d4f 	.word	0x08001d4f
 8001f48:	08001fcd 	.word	0x08001fcd
 8001f4c:	080020c3 	.word	0x080020c3
 8001f50:	08001e09 	.word	0x08001e09
 8001f54:	08001e09 	.word	0x08001e09
 8001f58:	08001e09 	.word	0x08001e09
 8001f5c:	08001d4f 	.word	0x08001d4f
 8001f60:	080020c3 	.word	0x080020c3
 8001f64:	08001d4f 	.word	0x08001d4f
 8001f68:	08001d4f 	.word	0x08001d4f
 8001f6c:	08001d4f 	.word	0x08001d4f
 8001f70:	08001d4f 	.word	0x08001d4f
 8001f74:	08002159 	.word	0x08002159
 8001f78:	08002123 	.word	0x08002123
 8001f7c:	08002127 	.word	0x08002127
 8001f80:	08001d4f 	.word	0x08001d4f
 8001f84:	08001d4f 	.word	0x08001d4f
 8001f88:	08001fa7 	.word	0x08001fa7
 8001f8c:	08001d4f 	.word	0x08001d4f
 8001f90:	08002123 	.word	0x08002123
 8001f94:	08001d4f 	.word	0x08001d4f
 8001f98:	08001d4f 	.word	0x08001d4f
 8001f9c:	08002123 	.word	0x08002123
			OUTC('%');
 8001fa0:	4651      	mov	r1, sl
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	e49e      	b.n	80018e4 <cbvprintf+0x2c>
			if (precision >= 0) {
 8001fa6:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8001faa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
 8001fac:	db09      	blt.n	8001fc2 <cbvprintf+0x70a>
				len = strnlen(bps, precision);
 8001fae:	4641      	mov	r1, r8
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	9203      	str	r2, [sp, #12]
 8001fb4:	f007 fe9e 	bl	8009cf4 <strnlen>
				len = strlen(bps);
 8001fb8:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
 8001fba:	2700      	movs	r7, #0
			bpe = bps + len;
 8001fbc:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
 8001fbe:	b962      	cbnz	r2, 8001fda <cbvprintf+0x722>
 8001fc0:	e6c5      	b.n	8001d4e <cbvprintf+0x496>
				len = strlen(bps);
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	9203      	str	r2, [sp, #12]
 8001fc6:	f7fe ff73 	bl	8000eb0 <strlen>
 8001fca:	e7f5      	b.n	8001fb8 <cbvprintf+0x700>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8001fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001fce:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
 8001fd2:	2700      	movs	r7, #0
			bpe = buf + 1;
 8001fd4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
 8001fd8:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
 8001fda:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
 8001fdc:	b107      	cbz	r7, 8001fe0 <cbvprintf+0x728>
			nj_len += 1U;
 8001fde:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8001fe0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
 8001fe4:	06c1      	lsls	r1, r0, #27
 8001fe6:	f140 8235 	bpl.w	8002454 <cbvprintf+0xb9c>
			nj_len += 2U;
 8001fea:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
 8001fec:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
 8001fee:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
 8001ff0:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8001ff2:	bf44      	itt	mi
 8001ff4:	9910      	ldrmi	r1, [sp, #64]	; 0x40
 8001ff6:	185b      	addmi	r3, r3, r1
		if (width > 0) {
 8001ff8:	f1bb 0f00 	cmp.w	fp, #0
 8001ffc:	dd23      	ble.n	8002046 <cbvprintf+0x78e>
			width -= (int)nj_len;
 8001ffe:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
 8002002:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002006:	0759      	lsls	r1, r3, #29
 8002008:	f3c3 0880 	ubfx	r8, r3, #2, #1
 800200c:	d41b      	bmi.n	8002046 <cbvprintf+0x78e>
				if (conv->flag_zero) {
 800200e:	0658      	lsls	r0, r3, #25
 8002010:	f140 8236 	bpl.w	8002480 <cbvprintf+0xbc8>
					if (sign != 0) {
 8002014:	2f00      	cmp	r7, #0
 8002016:	f000 8236 	beq.w	8002486 <cbvprintf+0xbce>
						OUTC(sign);
 800201a:	4651      	mov	r1, sl
 800201c:	4638      	mov	r0, r7
 800201e:	9203      	str	r2, [sp, #12]
 8002020:	47c8      	blx	r9
 8002022:	2800      	cmp	r0, #0
 8002024:	f2c0 8222 	blt.w	800246c <cbvprintf+0xbb4>
 8002028:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
 800202a:	4647      	mov	r7, r8
						OUTC(sign);
 800202c:	3601      	adds	r6, #1
					pad = '0';
 800202e:	f04f 0830 	mov.w	r8, #48	; 0x30
 8002032:	445e      	add	r6, fp
 8002034:	465b      	mov	r3, fp
				while (width-- > 0) {
 8002036:	2b00      	cmp	r3, #0
 8002038:	eba6 000b 	sub.w	r0, r6, fp
 800203c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002040:	f300 820c 	bgt.w	800245c <cbvprintf+0xba4>
 8002044:	4606      	mov	r6, r0
		if (sign != 0) {
 8002046:	b147      	cbz	r7, 800205a <cbvprintf+0x7a2>
			OUTC(sign);
 8002048:	4651      	mov	r1, sl
 800204a:	4638      	mov	r0, r7
 800204c:	9203      	str	r2, [sp, #12]
 800204e:	47c8      	blx	r9
 8002050:	2800      	cmp	r0, #0
 8002052:	f2c0 820b 	blt.w	800246c <cbvprintf+0xbb4>
 8002056:	9a03      	ldr	r2, [sp, #12]
 8002058:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 800205a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800205e:	0659      	lsls	r1, r3, #25
 8002060:	f140 8265 	bpl.w	800252e <cbvprintf+0xc76>
			if (conv->specifier_a) {
 8002064:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8002068:	2b00      	cmp	r3, #0
 800206a:	eba6 0602 	sub.w	r6, r6, r2
 800206e:	f280 8219 	bge.w	80024a4 <cbvprintf+0xbec>
 8002072:	4617      	mov	r7, r2
 8002074:	46b8      	mov	r8, r7
 8002076:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
 8002078:	f817 0b01 	ldrb.w	r0, [r7], #1
 800207c:	2870      	cmp	r0, #112	; 0x70
 800207e:	f040 8205 	bne.w	800248c <cbvprintf+0xbd4>
			while (pad_len-- > 0) {
 8002082:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002084:	461e      	mov	r6, r3
 8002086:	441f      	add	r7, r3
 8002088:	1bbb      	subs	r3, r7, r6
 800208a:	2b00      	cmp	r3, #0
 800208c:	f300 8248 	bgt.w	8002520 <cbvprintf+0xc68>
			OUTS(cp, bpe);
 8002090:	462b      	mov	r3, r5
 8002092:	4642      	mov	r2, r8
			OUTS(bps, bpe);
 8002094:	4651      	mov	r1, sl
 8002096:	4648      	mov	r0, r9
 8002098:	f006 fe59 	bl	8008d4e <outs>
 800209c:	2800      	cmp	r0, #0
 800209e:	f2c0 81e5 	blt.w	800246c <cbvprintf+0xbb4>
 80020a2:	4430      	add	r0, r6
			while (pad_len-- > 0) {
 80020a4:	4606      	mov	r6, r0
 80020a6:	4483      	add	fp, r0
		while (width > 0) {
 80020a8:	ebab 0306 	sub.w	r3, fp, r6
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f77f ae4e 	ble.w	8001d4e <cbvprintf+0x496>
			OUTC(' ');
 80020b2:	4651      	mov	r1, sl
 80020b4:	2020      	movs	r0, #32
 80020b6:	47c8      	blx	r9
 80020b8:	2800      	cmp	r0, #0
 80020ba:	f2c0 81d7 	blt.w	800246c <cbvprintf+0xbb4>
 80020be:	3601      	adds	r6, #1
			--width;
 80020c0:	e7f2      	b.n	80020a8 <cbvprintf+0x7f0>
			if (conv->flag_plus) {
 80020c2:	073d      	lsls	r5, r7, #28
 80020c4:	d42b      	bmi.n	800211e <cbvprintf+0x866>
				sign = ' ';
 80020c6:	f017 0710 	ands.w	r7, r7, #16
 80020ca:	bf18      	it	ne
 80020cc:	2720      	movne	r7, #32
			sint = value->sint;
 80020ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	da05      	bge.n	80020e2 <cbvprintf+0x82a>
				value->uint = (uint_value_type)-sint;
 80020d6:	4252      	negs	r2, r2
 80020d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80020dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
 80020e0:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 80020e2:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	aa0e      	add	r2, sp, #56	; 0x38
 80020ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80020ee:	ab13      	add	r3, sp, #76	; 0x4c
 80020f0:	f002 fe9c 	bl	8004e2c <encode_uint>
 80020f4:	4602      	mov	r2, r0
			if (precision >= 0) {
 80020f6:	f1b8 0f00 	cmp.w	r8, #0
 80020fa:	f10d 0565 	add.w	r5, sp, #101	; 0x65
 80020fe:	f6ff af5e 	blt.w	8001fbe <cbvprintf+0x706>
				conv->flag_zero = false;
 8002102:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
 8002106:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
 8002108:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
 800210c:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 800210e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
 8002112:	f67f af54 	bls.w	8001fbe <cbvprintf+0x706>
					conv->pad0_value = precision - (int)len;
 8002116:	eba8 0303 	sub.w	r3, r8, r3
 800211a:	930f      	str	r3, [sp, #60]	; 0x3c
 800211c:	e74f      	b.n	8001fbe <cbvprintf+0x706>
				sign = '+';
 800211e:	272b      	movs	r7, #43	; 0x2b
 8002120:	e7d5      	b.n	80020ce <cbvprintf+0x816>
		switch (conv->specifier) {
 8002122:	2700      	movs	r7, #0
 8002124:	e7dd      	b.n	80020e2 <cbvprintf+0x82a>
			if (value->ptr != NULL) {
 8002126:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002128:	2800      	cmp	r0, #0
 800212a:	f000 818f 	beq.w	800244c <cbvprintf+0xb94>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 800212e:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	aa0e      	add	r2, sp, #56	; 0x38
 8002136:	ab13      	add	r3, sp, #76	; 0x4c
 8002138:	2100      	movs	r1, #0
 800213a:	f002 fe77 	bl	8004e2c <encode_uint>
				conv->altform_0c = true;
 800213e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8002142:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002146:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 800214a:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 800214e:	4602      	mov	r2, r0
				conv->altform_0c = true;
 8002150:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
 8002154:	2700      	movs	r7, #0
				goto prec_int_pad0;
 8002156:	e7ce      	b.n	80020f6 <cbvprintf+0x83e>
				store_count(conv, value->ptr, count);
 8002158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
 800215a:	2907      	cmp	r1, #7
 800215c:	f63f adf7 	bhi.w	8001d4e <cbvprintf+0x496>
 8002160:	e8df f001 	tbb	[pc, r1]
 8002164:	0c06040c 	.word	0x0c06040c
 8002168:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 800216c:	701e      	strb	r6, [r3, #0]
		break;
 800216e:	e5ee      	b.n	8001d4e <cbvprintf+0x496>
		*(short *)dp = (short)count;
 8002170:	801e      	strh	r6, [r3, #0]
		break;
 8002172:	e5ec      	b.n	8001d4e <cbvprintf+0x496>
		*(intmax_t *)dp = (intmax_t)count;
 8002174:	17f2      	asrs	r2, r6, #31
 8002176:	e9c3 6200 	strd	r6, r2, [r3]
		break;
 800217a:	e5e8      	b.n	8001d4e <cbvprintf+0x496>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 800217c:	601e      	str	r6, [r3, #0]
		break;
 800217e:	e5e6      	b.n	8001d4e <cbvprintf+0x496>
		*sign = '-';
 8002180:	272d      	movs	r7, #45	; 0x2d
 8002182:	e64d      	b.n	8001e20 <cbvprintf+0x568>
		*sign = '+';
 8002184:	272b      	movs	r7, #43	; 0x2b
 8002186:	e64b      	b.n	8001e20 <cbvprintf+0x568>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8002188:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800218c:	4285      	cmp	r5, r0
 800218e:	d131      	bne.n	80021f4 <cbvprintf+0x93c>
			if (isupper((int)c)) {
 8002190:	3201      	adds	r2, #1
 8002192:	48b9      	ldr	r0, [pc, #740]	; (8002478 <cbvprintf+0xbc0>)
 8002194:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
 8002196:	430b      	orrs	r3, r1
 8002198:	5c12      	ldrb	r2, [r2, r0]
 800219a:	f002 0203 	and.w	r2, r2, #3
 800219e:	d11b      	bne.n	80021d8 <cbvprintf+0x920>
			if (isupper((int)c)) {
 80021a0:	2a01      	cmp	r2, #1
 80021a2:	d111      	bne.n	80021c8 <cbvprintf+0x910>
				*buf++ = 'I';
 80021a4:	2349      	movs	r3, #73	; 0x49
 80021a6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
 80021aa:	234e      	movs	r3, #78	; 0x4e
 80021ac:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
 80021b0:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
 80021b2:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
 80021b6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80021ba:	f36f 1386 	bfc	r3, #6, #1
 80021be:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
 80021c2:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
 80021c6:	e707      	b.n	8001fd8 <cbvprintf+0x720>
				*buf++ = 'i';
 80021c8:	2369      	movs	r3, #105	; 0x69
 80021ca:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 80021ce:	236e      	movs	r3, #110	; 0x6e
 80021d0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
 80021d4:	2366      	movs	r3, #102	; 0x66
 80021d6:	e7ec      	b.n	80021b2 <cbvprintf+0x8fa>
			if (isupper((int)c)) {
 80021d8:	2a01      	cmp	r2, #1
				*buf++ = 'N';
 80021da:	bf07      	ittee	eq
 80021dc:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
 80021de:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
 80021e0:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
 80021e2:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
 80021e4:	bf0c      	ite	eq
 80021e6:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 80021ea:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
 80021ee:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 80021f2:	e7de      	b.n	80021b2 <cbvprintf+0x8fa>
	bool is_subnormal = (expo == 0) && (fract != 0);
 80021f4:	2000      	movs	r0, #0
 80021f6:	e621      	b.n	8001e3c <cbvprintf+0x584>
				expo--;
 80021f8:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 80021fa:	1849      	adds	r1, r1, r1
 80021fc:	415b      	adcs	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	dafa      	bge.n	80021f8 <cbvprintf+0x940>
 8002202:	e9cd 1308 	strd	r1, r3, [sp, #32]
 8002206:	e62d      	b.n	8001e64 <cbvprintf+0x5ac>
			fract >>= 1;
 8002208:	0840      	lsrs	r0, r0, #1
 800220a:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 800220e:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8002210:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
 8002214:	46ac      	mov	ip, r5
			expo++;
 8002216:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 800221a:	d2f5      	bcs.n	8002208 <cbvprintf+0x950>
		fract *= 5U;
 800221c:	fb0e f501 	mul.w	r5, lr, r1
 8002220:	fba0 010e 	umull	r0, r1, r0, lr
 8002224:	4429      	add	r1, r5
		decexp--;
 8002226:	3b01      	subs	r3, #1
		expo++;
 8002228:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
 800222c:	f04f 0c01 	mov.w	ip, #1
 8002230:	e624      	b.n	8001e7c <cbvprintf+0x5c4>
		fract += 2;
 8002232:	3002      	adds	r0, #2
 8002234:	f141 0100 	adc.w	r1, r1, #0
 8002238:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
 800223c:	a808      	add	r0, sp, #32
 800223e:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8002242:	f006 fd55 	bl	8008cf0 <_ldiv5>
		decexp++;
 8002246:	9b04      	ldr	r3, [sp, #16]
 8002248:	9a03      	ldr	r2, [sp, #12]
 800224a:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
 800224e:	3d01      	subs	r5, #1
		decexp++;
 8002250:	3301      	adds	r3, #1
			fract <<= 1;
 8002252:	1849      	adds	r1, r1, r1
 8002254:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
 8002256:	2800      	cmp	r0, #0
			expo--;
 8002258:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
 800225c:	daf9      	bge.n	8002252 <cbvprintf+0x99a>
 800225e:	e9cd 1008 	strd	r1, r0, [sp, #32]
 8002262:	e614      	b.n	8001e8e <cbvprintf+0x5d6>
 8002264:	2300      	movs	r3, #0
 8002266:	461d      	mov	r5, r3
 8002268:	e616      	b.n	8001e98 <cbvprintf+0x5e0>
			precision -= decexp;
 800226a:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
 800226e:	2266      	movs	r2, #102	; 0x66
 8002270:	e637      	b.n	8001ee2 <cbvprintf+0x62a>
	bool prune_zero = false;
 8002272:	2100      	movs	r1, #0
 8002274:	e63f      	b.n	8001ef6 <cbvprintf+0x63e>
		decimals = precision + 1;
 8002276:	f108 0101 	add.w	r1, r8, #1
	if (decimals > 16) {
 800227a:	2910      	cmp	r1, #16
 800227c:	bfa8      	it	ge
 800227e:	2110      	movge	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
 8002280:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8002284:	2010      	movs	r0, #16
 8002286:	9007      	str	r0, [sp, #28]
	while (decimals--) {
 8002288:	460d      	mov	r5, r1
	*v >>= 1;
 800228a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	while (decimals--) {
 800228e:	b9a5      	cbnz	r5, 80022ba <cbvprintf+0xa02>
	fract += round;
 8002290:	9d08      	ldr	r5, [sp, #32]
 8002292:	1940      	adds	r0, r0, r5
 8002294:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002296:	eb41 0105 	adc.w	r1, r1, r5
	if (fract >= BIT64(60)) {
 800229a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800229e:	d21b      	bcs.n	80022d8 <cbvprintf+0xa20>
	fract += round;
 80022a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
	if (c == 'f') {
 80022a4:	2a66      	cmp	r2, #102	; 0x66
 80022a6:	f040 8099 	bne.w	80023dc <cbvprintf+0xb24>
		if (decexp > 0) {
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	dc23      	bgt.n	80022f6 <cbvprintf+0xa3e>
			*buf++ = '0';
 80022ae:	2130      	movs	r1, #48	; 0x30
 80022b0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 80022b4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 80022b8:	e02f      	b.n	800231a <cbvprintf+0xa62>
	*v >>= 1;
 80022ba:	0840      	lsrs	r0, r0, #1
 80022bc:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 80022c0:	0849      	lsrs	r1, r1, #1
 80022c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	_ldiv5(v);
 80022c6:	a80a      	add	r0, sp, #40	; 0x28
 80022c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80022cc:	3d01      	subs	r5, #1
 80022ce:	f006 fd0f 	bl	8008cf0 <_ldiv5>
 80022d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
 80022d6:	e7d8      	b.n	800228a <cbvprintf+0x9d2>
	*v >>= 1;
 80022d8:	0840      	lsrs	r0, r0, #1
 80022da:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 80022de:	0849      	lsrs	r1, r1, #1
 80022e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
	_ldiv5(v);
 80022e4:	a808      	add	r0, sp, #32
 80022e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80022ea:	f006 fd01 	bl	8008cf0 <_ldiv5>
		decexp++;
 80022ee:	9b05      	ldr	r3, [sp, #20]
 80022f0:	9a04      	ldr	r2, [sp, #16]
 80022f2:	3301      	adds	r3, #1
 80022f4:	e7d6      	b.n	80022a4 <cbvprintf+0x9ec>
	char *buf = bps;
 80022f6:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
 80022f8:	9907      	ldr	r1, [sp, #28]
 80022fa:	2900      	cmp	r1, #0
 80022fc:	dd0b      	ble.n	8002316 <cbvprintf+0xa5e>
				*buf++ = _get_digit(&fract, &digit_count);
 80022fe:	a907      	add	r1, sp, #28
 8002300:	a808      	add	r0, sp, #32
 8002302:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002306:	f006 fd0b 	bl	8008d20 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 800230a:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
 800230c:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
 8002310:	3b01      	subs	r3, #1
 8002312:	9a04      	ldr	r2, [sp, #16]
 8002314:	d1f0      	bne.n	80022f8 <cbvprintf+0xa40>
			conv->pad0_value = decexp;
 8002316:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
 8002318:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
 800231a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800231e:	0689      	lsls	r1, r1, #26
 8002320:	d402      	bmi.n	8002328 <cbvprintf+0xa70>
 8002322:	f1b8 0f00 	cmp.w	r8, #0
 8002326:	dd1d      	ble.n	8002364 <cbvprintf+0xaac>
			*buf++ = '.';
 8002328:	212e      	movs	r1, #46	; 0x2e
 800232a:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
 800232e:	b19b      	cbz	r3, 8002358 <cbvprintf+0xaa0>
 8002330:	f1b8 0f00 	cmp.w	r8, #0
 8002334:	dd16      	ble.n	8002364 <cbvprintf+0xaac>
			conv->pad0_value = -decexp;
 8002336:	4259      	negs	r1, r3
 8002338:	4541      	cmp	r1, r8
 800233a:	bfa8      	it	ge
 800233c:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
 800233e:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
 8002342:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
 8002344:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
 8002346:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
 800234a:	bfd4      	ite	le
 800234c:	2100      	movle	r1, #0
 800234e:	2101      	movgt	r1, #1
 8002350:	f361 1045 	bfi	r0, r1, #5, #1
 8002354:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
 8002358:	f1b8 0f00 	cmp.w	r8, #0
 800235c:	dd02      	ble.n	8002364 <cbvprintf+0xaac>
 800235e:	9907      	ldr	r1, [sp, #28]
 8002360:	2900      	cmp	r1, #0
 8002362:	dc56      	bgt.n	8002412 <cbvprintf+0xb5a>
	if (prune_zero) {
 8002364:	9903      	ldr	r1, [sp, #12]
 8002366:	2900      	cmp	r1, #0
 8002368:	d163      	bne.n	8002432 <cbvprintf+0xb7a>
	conv->pad0_pre_exp = precision;
 800236a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
 800236e:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8002372:	2945      	cmp	r1, #69	; 0x45
 8002374:	d121      	bne.n	80023ba <cbvprintf+0xb02>
		if (decexp < 0) {
 8002376:	2b00      	cmp	r3, #0
		*buf++ = c;
 8002378:	4629      	mov	r1, r5
			decexp = -decexp;
 800237a:	bfb8      	it	lt
 800237c:	425b      	neglt	r3, r3
		*buf++ = c;
 800237e:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
 8002382:	bfb4      	ite	lt
 8002384:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
 8002386:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
 8002388:	2b63      	cmp	r3, #99	; 0x63
 800238a:	706a      	strb	r2, [r5, #1]
 800238c:	dd09      	ble.n	80023a2 <cbvprintf+0xaea>
			*buf++ = (decexp / 100) + '0';
 800238e:	2064      	movs	r0, #100	; 0x64
 8002390:	fb93 f2f0 	sdiv	r2, r3, r0
 8002394:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 8002398:	1ce9      	adds	r1, r5, #3
 800239a:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
 800239e:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 80023a2:	200a      	movs	r0, #10
 80023a4:	460d      	mov	r5, r1
 80023a6:	fb93 f2f0 	sdiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
 80023aa:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 80023ae:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 80023b2:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 80023b4:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
 80023b8:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
 80023ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	dc43      	bgt.n	8002448 <cbvprintf+0xb90>
 80023c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bfd4      	ite	le
 80023c6:	2300      	movle	r3, #0
 80023c8:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 80023ca:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 80023ce:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 80023d2:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 80023d4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
 80023d8:	702b      	strb	r3, [r5, #0]
	return bps;
 80023da:	e5fd      	b.n	8001fd8 <cbvprintf+0x720>
		*buf = _get_digit(&fract, &digit_count);
 80023dc:	a907      	add	r1, sp, #28
 80023de:	a808      	add	r0, sp, #32
 80023e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023e4:	f006 fc9c 	bl	8008d20 <_get_digit>
		if (*buf++ != '0') {
 80023e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
 80023ec:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
 80023f0:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
 80023f4:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 80023f6:	bf18      	it	ne
 80023f8:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
 80023fc:	0688      	lsls	r0, r1, #26
 80023fe:	d402      	bmi.n	8002406 <cbvprintf+0xb4e>
 8002400:	f1b8 0f00 	cmp.w	r8, #0
 8002404:	dd12      	ble.n	800242c <cbvprintf+0xb74>
			*buf++ = '.';
 8002406:	212e      	movs	r1, #46	; 0x2e
 8002408:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
 800240c:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
 8002410:	e7a2      	b.n	8002358 <cbvprintf+0xaa0>
		*buf++ = _get_digit(&fract, &digit_count);
 8002412:	a907      	add	r1, sp, #28
 8002414:	a808      	add	r0, sp, #32
 8002416:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800241a:	f006 fc81 	bl	8008d20 <_get_digit>
		precision--;
 800241e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
 8002426:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
 800242a:	e795      	b.n	8002358 <cbvprintf+0xaa0>
		if (*buf++ != '0') {
 800242c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8002430:	e798      	b.n	8002364 <cbvprintf+0xaac>
		conv->pad0_pre_exp = 0;
 8002432:	2100      	movs	r1, #0
 8002434:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
 8002436:	4628      	mov	r0, r5
 8002438:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800243c:	2930      	cmp	r1, #48	; 0x30
 800243e:	d0fa      	beq.n	8002436 <cbvprintf+0xb7e>
		if (*buf != '.') {
 8002440:	292e      	cmp	r1, #46	; 0x2e
 8002442:	bf18      	it	ne
 8002444:	4605      	movne	r5, r0
 8002446:	e792      	b.n	800236e <cbvprintf+0xab6>
		|| (conv->pad0_pre_exp > 0);
 8002448:	2301      	movs	r3, #1
 800244a:	e7be      	b.n	80023ca <cbvprintf+0xb12>
			bpe = bps + 5;
 800244c:	4d0b      	ldr	r5, [pc, #44]	; (800247c <cbvprintf+0xbc4>)
		char sign = 0;
 800244e:	4607      	mov	r7, r0
			bps = "(nil)";
 8002450:	1f6a      	subs	r2, r5, #5
 8002452:	e5c2      	b.n	8001fda <cbvprintf+0x722>
		} else if (conv->altform_0) {
 8002454:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
 8002456:	bf48      	it	mi
 8002458:	3301      	addmi	r3, #1
 800245a:	e5c7      	b.n	8001fec <cbvprintf+0x734>
					OUTC(pad);
 800245c:	4651      	mov	r1, sl
 800245e:	4640      	mov	r0, r8
 8002460:	9203      	str	r2, [sp, #12]
 8002462:	47c8      	blx	r9
 8002464:	2800      	cmp	r0, #0
 8002466:	9a03      	ldr	r2, [sp, #12]
 8002468:	f6bf ade4 	bge.w	8002034 <cbvprintf+0x77c>
#undef OUTS
#undef OUTC
}
 800246c:	b01b      	add	sp, #108	; 0x6c
 800246e:	ecbd 8b02 	vpop	{d8}
 8002472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002476:	bf00      	nop
 8002478:	0800afad 	.word	0x0800afad
 800247c:	0800a77a 	.word	0x0800a77a
				char pad = ' ';
 8002480:	f04f 0820 	mov.w	r8, #32
 8002484:	e5d5      	b.n	8002032 <cbvprintf+0x77a>
					pad = '0';
 8002486:	f04f 0830 	mov.w	r8, #48	; 0x30
 800248a:	e5d2      	b.n	8002032 <cbvprintf+0x77a>
					OUTC(*cp++);
 800248c:	4651      	mov	r1, sl
 800248e:	47c8      	blx	r9
 8002490:	2800      	cmp	r0, #0
 8002492:	f6bf adef 	bge.w	8002074 <cbvprintf+0x7bc>
 8002496:	e7e9      	b.n	800246c <cbvprintf+0xbb4>
					OUTC(*cp++);
 8002498:	4651      	mov	r1, sl
 800249a:	9203      	str	r2, [sp, #12]
 800249c:	47c8      	blx	r9
 800249e:	2800      	cmp	r0, #0
 80024a0:	9a03      	ldr	r2, [sp, #12]
 80024a2:	dbe3      	blt.n	800246c <cbvprintf+0xbb4>
				while (isdigit((int)*cp)) {
 80024a4:	7810      	ldrb	r0, [r2, #0]
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <cbvprintf+0xccc>)
 80024a8:	5cc3      	ldrb	r3, [r0, r3]
 80024aa:	075b      	lsls	r3, r3, #29
 80024ac:	4617      	mov	r7, r2
 80024ae:	eb06 0802 	add.w	r8, r6, r2
 80024b2:	f102 0201 	add.w	r2, r2, #1
 80024b6:	d4ef      	bmi.n	8002498 <cbvprintf+0xbe0>
				if (!conv->pad_postdp) {
 80024b8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
 80024bc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
 80024be:	0699      	lsls	r1, r3, #26
 80024c0:	d407      	bmi.n	80024d2 <cbvprintf+0xc1a>
 80024c2:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
 80024c4:	2e00      	cmp	r6, #0
 80024c6:	eba8 0206 	sub.w	r2, r8, r6
 80024ca:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80024ce:	dc0f      	bgt.n	80024f0 <cbvprintf+0xc38>
 80024d0:	4690      	mov	r8, r2
				if (*cp == '.') {
 80024d2:	7838      	ldrb	r0, [r7, #0]
 80024d4:	282e      	cmp	r0, #46	; 0x2e
 80024d6:	d108      	bne.n	80024ea <cbvprintf+0xc32>
					OUTC(*cp++);
 80024d8:	4651      	mov	r1, sl
 80024da:	47c8      	blx	r9
						OUTC('0');
 80024dc:	2800      	cmp	r0, #0
 80024de:	dbc5      	blt.n	800246c <cbvprintf+0xbb4>
					while (pad_len-- > 0) {
 80024e0:	2e00      	cmp	r6, #0
						OUTC('0');
 80024e2:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
 80024e6:	dc09      	bgt.n	80024fc <cbvprintf+0xc44>
					OUTC(*cp++);
 80024e8:	3701      	adds	r7, #1
 80024ea:	eba8 0607 	sub.w	r6, r8, r7
 80024ee:	e00e      	b.n	800250e <cbvprintf+0xc56>
						OUTC('0');
 80024f0:	4651      	mov	r1, sl
 80024f2:	2030      	movs	r0, #48	; 0x30
 80024f4:	47c8      	blx	r9
 80024f6:	2800      	cmp	r0, #0
 80024f8:	dae4      	bge.n	80024c4 <cbvprintf+0xc0c>
 80024fa:	e7b7      	b.n	800246c <cbvprintf+0xbb4>
						OUTC('0');
 80024fc:	4651      	mov	r1, sl
 80024fe:	2030      	movs	r0, #48	; 0x30
 8002500:	47c8      	blx	r9
 8002502:	3e01      	subs	r6, #1
 8002504:	e7ea      	b.n	80024dc <cbvprintf+0xc24>
					OUTC(*cp++);
 8002506:	4651      	mov	r1, sl
 8002508:	47c8      	blx	r9
 800250a:	2800      	cmp	r0, #0
 800250c:	dbae      	blt.n	800246c <cbvprintf+0xbb4>
				while (isdigit((int)*cp)) {
 800250e:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <cbvprintf+0xccc>)
 8002510:	46b8      	mov	r8, r7
 8002512:	19f3      	adds	r3, r6, r7
 8002514:	f817 0b01 	ldrb.w	r0, [r7], #1
 8002518:	5c12      	ldrb	r2, [r2, r0]
 800251a:	0752      	lsls	r2, r2, #29
 800251c:	d4f3      	bmi.n	8002506 <cbvprintf+0xc4e>
 800251e:	e5b0      	b.n	8002082 <cbvprintf+0x7ca>
				OUTC('0');
 8002520:	4651      	mov	r1, sl
 8002522:	2030      	movs	r0, #48	; 0x30
 8002524:	47c8      	blx	r9
 8002526:	2800      	cmp	r0, #0
 8002528:	dba0      	blt.n	800246c <cbvprintf+0xbb4>
 800252a:	3601      	adds	r6, #1
 800252c:	e5ac      	b.n	8002088 <cbvprintf+0x7d0>
			if (conv->altform_0c | conv->altform_0) {
 800252e:	06d8      	lsls	r0, r3, #27
 8002530:	d401      	bmi.n	8002536 <cbvprintf+0xc7e>
 8002532:	0719      	lsls	r1, r3, #28
 8002534:	d507      	bpl.n	8002546 <cbvprintf+0xc8e>
				OUTC('0');
 8002536:	4651      	mov	r1, sl
 8002538:	2030      	movs	r0, #48	; 0x30
 800253a:	9203      	str	r2, [sp, #12]
 800253c:	47c8      	blx	r9
 800253e:	2800      	cmp	r0, #0
 8002540:	db94      	blt.n	800246c <cbvprintf+0xbb4>
 8002542:	9a03      	ldr	r2, [sp, #12]
 8002544:	3601      	adds	r6, #1
			if (conv->altform_0c) {
 8002546:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800254a:	06db      	lsls	r3, r3, #27
 800254c:	d508      	bpl.n	8002560 <cbvprintf+0xca8>
				OUTC(conv->specifier);
 800254e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8002552:	9203      	str	r2, [sp, #12]
 8002554:	4651      	mov	r1, sl
 8002556:	47c8      	blx	r9
 8002558:	2800      	cmp	r0, #0
 800255a:	db87      	blt.n	800246c <cbvprintf+0xbb4>
 800255c:	9a03      	ldr	r2, [sp, #12]
 800255e:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
 8002560:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8002562:	4437      	add	r7, r6
 8002564:	1bbb      	subs	r3, r7, r6
 8002566:	2b00      	cmp	r3, #0
 8002568:	dc01      	bgt.n	800256e <cbvprintf+0xcb6>
			OUTS(bps, bpe);
 800256a:	462b      	mov	r3, r5
 800256c:	e592      	b.n	8002094 <cbvprintf+0x7dc>
				OUTC('0');
 800256e:	4651      	mov	r1, sl
 8002570:	2030      	movs	r0, #48	; 0x30
 8002572:	9203      	str	r2, [sp, #12]
 8002574:	47c8      	blx	r9
 8002576:	2800      	cmp	r0, #0
 8002578:	f6ff af78 	blt.w	800246c <cbvprintf+0xbb4>
 800257c:	9a03      	ldr	r2, [sp, #12]
 800257e:	3601      	adds	r6, #1
 8002580:	e7f0      	b.n	8002564 <cbvprintf+0xcac>
 8002582:	bf00      	nop
 8002584:	0800afae 	.word	0x0800afae

08002588 <cos>:
 8002588:	ec51 0b10 	vmov	r0, r1, d0
 800258c:	4a20      	ldr	r2, [pc, #128]	; (8002610 <cos+0x88>)
 800258e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002592:	4293      	cmp	r3, r2
 8002594:	dd20      	ble.n	80025d8 <cos+0x50>
 8002596:	b500      	push	{lr}
 8002598:	4a1e      	ldr	r2, [pc, #120]	; (8002614 <cos+0x8c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	b085      	sub	sp, #20
 800259e:	dd09      	ble.n	80025b4 <cos+0x2c>
 80025a0:	ee10 2a10 	vmov	r2, s0
 80025a4:	460b      	mov	r3, r1
 80025a6:	f7fd fe13 	bl	80001d0 <__aeabi_dsub>
 80025aa:	ec41 0b10 	vmov	d0, r0, r1
 80025ae:	b005      	add	sp, #20
 80025b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80025b4:	4668      	mov	r0, sp
 80025b6:	f000 ffbf 	bl	8003538 <__ieee754_rem_pio2>
 80025ba:	f000 0003 	and.w	r0, r0, #3
 80025be:	2801      	cmp	r0, #1
 80025c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80025c4:	ed9d 0b00 	vldr	d0, [sp]
 80025c8:	d00a      	beq.n	80025e0 <cos+0x58>
 80025ca:	2802      	cmp	r0, #2
 80025cc:	d016      	beq.n	80025fc <cos+0x74>
 80025ce:	b190      	cbz	r0, 80025f6 <cos+0x6e>
 80025d0:	2001      	movs	r0, #1
 80025d2:	f001 ff45 	bl	8004460 <__kernel_sin>
 80025d6:	e7ea      	b.n	80025ae <cos+0x26>
 80025d8:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8002608 <cos+0x80>
 80025dc:	f001 b9d4 	b.w	8003988 <__kernel_cos>
 80025e0:	f001 ff3e 	bl	8004460 <__kernel_sin>
 80025e4:	ec53 2b10 	vmov	r2, r3, d0
 80025e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80025ec:	ee00 3a90 	vmov	s1, r3
 80025f0:	b005      	add	sp, #20
 80025f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80025f6:	f001 f9c7 	bl	8003988 <__kernel_cos>
 80025fa:	e7d8      	b.n	80025ae <cos+0x26>
 80025fc:	f001 f9c4 	bl	8003988 <__kernel_cos>
 8002600:	e7f0      	b.n	80025e4 <cos+0x5c>
 8002602:	bf00      	nop
 8002604:	f3af 8000 	nop.w
	...
 8002610:	3fe921fb 	.word	0x3fe921fb
 8002614:	7fefffff 	.word	0x7fefffff

08002618 <sin>:
 8002618:	ec51 0b10 	vmov	r0, r1, d0
 800261c:	4a20      	ldr	r2, [pc, #128]	; (80026a0 <sin+0x88>)
 800261e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002622:	4293      	cmp	r3, r2
 8002624:	dd27      	ble.n	8002676 <sin+0x5e>
 8002626:	b500      	push	{lr}
 8002628:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <sin+0x8c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	b085      	sub	sp, #20
 800262e:	dd09      	ble.n	8002644 <sin+0x2c>
 8002630:	ee10 2a10 	vmov	r2, s0
 8002634:	460b      	mov	r3, r1
 8002636:	f7fd fdcb 	bl	80001d0 <__aeabi_dsub>
 800263a:	ec41 0b10 	vmov	d0, r0, r1
 800263e:	b005      	add	sp, #20
 8002640:	f85d fb04 	ldr.w	pc, [sp], #4
 8002644:	4668      	mov	r0, sp
 8002646:	f000 ff77 	bl	8003538 <__ieee754_rem_pio2>
 800264a:	f000 0003 	and.w	r0, r0, #3
 800264e:	2801      	cmp	r0, #1
 8002650:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002654:	ed9d 0b00 	vldr	d0, [sp]
 8002658:	d012      	beq.n	8002680 <sin+0x68>
 800265a:	2802      	cmp	r0, #2
 800265c:	d017      	beq.n	800268e <sin+0x76>
 800265e:	b190      	cbz	r0, 8002686 <sin+0x6e>
 8002660:	f001 f992 	bl	8003988 <__kernel_cos>
 8002664:	ec53 2b10 	vmov	r2, r3, d0
 8002668:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800266c:	ee00 3a90 	vmov	s1, r3
 8002670:	b005      	add	sp, #20
 8002672:	f85d fb04 	ldr.w	pc, [sp], #4
 8002676:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8002698 <sin+0x80>
 800267a:	2000      	movs	r0, #0
 800267c:	f001 bef0 	b.w	8004460 <__kernel_sin>
 8002680:	f001 f982 	bl	8003988 <__kernel_cos>
 8002684:	e7db      	b.n	800263e <sin+0x26>
 8002686:	2001      	movs	r0, #1
 8002688:	f001 feea 	bl	8004460 <__kernel_sin>
 800268c:	e7d7      	b.n	800263e <sin+0x26>
 800268e:	2001      	movs	r0, #1
 8002690:	f001 fee6 	bl	8004460 <__kernel_sin>
 8002694:	e7e6      	b.n	8002664 <sin+0x4c>
 8002696:	bf00      	nop
	...
 80026a0:	3fe921fb 	.word	0x3fe921fb
 80026a4:	7fefffff 	.word	0x7fefffff

080026a8 <pow>:
 80026a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026aa:	ed2d 8b02 	vpush	{d8}
 80026ae:	ec57 6b10 	vmov	r6, r7, d0
 80026b2:	ec55 4b11 	vmov	r4, r5, d1
 80026b6:	f000 f9a3 	bl	8002a00 <__ieee754_pow>
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <pow+0x1a0>)
 80026bc:	eeb0 8a40 	vmov.f32	s16, s0
 80026c0:	eef0 8a60 	vmov.f32	s17, s1
 80026c4:	f993 3000 	ldrsb.w	r3, [r3]
 80026c8:	3301      	adds	r3, #1
 80026ca:	d02a      	beq.n	8002722 <pow+0x7a>
 80026cc:	4622      	mov	r2, r4
 80026ce:	462b      	mov	r3, r5
 80026d0:	4620      	mov	r0, r4
 80026d2:	4629      	mov	r1, r5
 80026d4:	f7fe fba4 	bl	8000e20 <__aeabi_dcmpun>
 80026d8:	bb18      	cbnz	r0, 8002722 <pow+0x7a>
 80026da:	4632      	mov	r2, r6
 80026dc:	463b      	mov	r3, r7
 80026de:	4630      	mov	r0, r6
 80026e0:	4639      	mov	r1, r7
 80026e2:	f7fe fb9d 	bl	8000e20 <__aeabi_dcmpun>
 80026e6:	2800      	cmp	r0, #0
 80026e8:	d144      	bne.n	8002774 <pow+0xcc>
 80026ea:	2200      	movs	r2, #0
 80026ec:	2300      	movs	r3, #0
 80026ee:	4630      	mov	r0, r6
 80026f0:	4639      	mov	r1, r7
 80026f2:	f7fe fb63 	bl	8000dbc <__aeabi_dcmpeq>
 80026f6:	b1d8      	cbz	r0, 8002730 <pow+0x88>
 80026f8:	2200      	movs	r2, #0
 80026fa:	2300      	movs	r3, #0
 80026fc:	4620      	mov	r0, r4
 80026fe:	4629      	mov	r1, r5
 8002700:	f7fe fb5c 	bl	8000dbc <__aeabi_dcmpeq>
 8002704:	2800      	cmp	r0, #0
 8002706:	d13d      	bne.n	8002784 <pow+0xdc>
 8002708:	ec45 4b10 	vmov	d0, r4, r5
 800270c:	f006 f824 	bl	8008758 <finite>
 8002710:	b138      	cbz	r0, 8002722 <pow+0x7a>
 8002712:	4620      	mov	r0, r4
 8002714:	4629      	mov	r1, r5
 8002716:	2200      	movs	r2, #0
 8002718:	2300      	movs	r3, #0
 800271a:	f7fe fb59 	bl	8000dd0 <__aeabi_dcmplt>
 800271e:	2800      	cmp	r0, #0
 8002720:	d15c      	bne.n	80027dc <pow+0x134>
 8002722:	eeb0 0a48 	vmov.f32	s0, s16
 8002726:	eef0 0a68 	vmov.f32	s1, s17
 800272a:	ecbd 8b02 	vpop	{d8}
 800272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002730:	eeb0 0a48 	vmov.f32	s0, s16
 8002734:	eef0 0a68 	vmov.f32	s1, s17
 8002738:	f006 f80e 	bl	8008758 <finite>
 800273c:	b358      	cbz	r0, 8002796 <pow+0xee>
 800273e:	ec51 0b18 	vmov	r0, r1, d8
 8002742:	2200      	movs	r2, #0
 8002744:	2300      	movs	r3, #0
 8002746:	f7fe fb39 	bl	8000dbc <__aeabi_dcmpeq>
 800274a:	2800      	cmp	r0, #0
 800274c:	d0e9      	beq.n	8002722 <pow+0x7a>
 800274e:	ec47 6b10 	vmov	d0, r6, r7
 8002752:	f006 f801 	bl	8008758 <finite>
 8002756:	2800      	cmp	r0, #0
 8002758:	d0e3      	beq.n	8002722 <pow+0x7a>
 800275a:	ec45 4b10 	vmov	d0, r4, r5
 800275e:	f005 fffb 	bl	8008758 <finite>
 8002762:	2800      	cmp	r0, #0
 8002764:	d0dd      	beq.n	8002722 <pow+0x7a>
 8002766:	f006 feba 	bl	80094de <__errno>
 800276a:	2322      	movs	r3, #34	; 0x22
 800276c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 8002828 <pow+0x180>
 8002770:	6003      	str	r3, [r0, #0]
 8002772:	e7d6      	b.n	8002722 <pow+0x7a>
 8002774:	4620      	mov	r0, r4
 8002776:	4629      	mov	r1, r5
 8002778:	2200      	movs	r2, #0
 800277a:	2300      	movs	r3, #0
 800277c:	f7fe fb1e 	bl	8000dbc <__aeabi_dcmpeq>
 8002780:	2800      	cmp	r0, #0
 8002782:	d0ce      	beq.n	8002722 <pow+0x7a>
 8002784:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 8002830 <pow+0x188>
 8002788:	eeb0 0a48 	vmov.f32	s0, s16
 800278c:	eef0 0a68 	vmov.f32	s1, s17
 8002790:	ecbd 8b02 	vpop	{d8}
 8002794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002796:	ec47 6b10 	vmov	d0, r6, r7
 800279a:	f005 ffdd 	bl	8008758 <finite>
 800279e:	2800      	cmp	r0, #0
 80027a0:	d0cd      	beq.n	800273e <pow+0x96>
 80027a2:	ec45 4b10 	vmov	d0, r4, r5
 80027a6:	f005 ffd7 	bl	8008758 <finite>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d0c7      	beq.n	800273e <pow+0x96>
 80027ae:	ec53 2b18 	vmov	r2, r3, d8
 80027b2:	ee18 0a10 	vmov	r0, s16
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7fe fb32 	bl	8000e20 <__aeabi_dcmpun>
 80027bc:	bb20      	cbnz	r0, 8002808 <pow+0x160>
 80027be:	f006 fe8e 	bl	80094de <__errno>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2222      	movs	r2, #34	; 0x22
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	4630      	mov	r0, r6
 80027ca:	4639      	mov	r1, r7
 80027cc:	2200      	movs	r2, #0
 80027ce:	2300      	movs	r3, #0
 80027d0:	f7fe fafe 	bl	8000dd0 <__aeabi_dcmplt>
 80027d4:	b948      	cbnz	r0, 80027ea <pow+0x142>
 80027d6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8002838 <pow+0x190>
 80027da:	e7a2      	b.n	8002722 <pow+0x7a>
 80027dc:	f006 fe7f 	bl	80094de <__errno>
 80027e0:	2321      	movs	r3, #33	; 0x21
 80027e2:	ed9f 8b17 	vldr	d8, [pc, #92]	; 8002840 <pow+0x198>
 80027e6:	6003      	str	r3, [r0, #0]
 80027e8:	e79b      	b.n	8002722 <pow+0x7a>
 80027ea:	ec45 4b10 	vmov	d0, r4, r5
 80027ee:	f005 ffbf 	bl	8008770 <rint>
 80027f2:	4622      	mov	r2, r4
 80027f4:	ec51 0b10 	vmov	r0, r1, d0
 80027f8:	462b      	mov	r3, r5
 80027fa:	f7fe fadf 	bl	8000dbc <__aeabi_dcmpeq>
 80027fe:	2800      	cmp	r0, #0
 8002800:	d1e9      	bne.n	80027d6 <pow+0x12e>
 8002802:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 8002840 <pow+0x198>
 8002806:	e78c      	b.n	8002722 <pow+0x7a>
 8002808:	f006 fe69 	bl	80094de <__errno>
 800280c:	2200      	movs	r2, #0
 800280e:	2300      	movs	r3, #0
 8002810:	2121      	movs	r1, #33	; 0x21
 8002812:	6001      	str	r1, [r0, #0]
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	f7fd ffbc 	bl	8000794 <__aeabi_ddiv>
 800281c:	ec41 0b18 	vmov	d8, r0, r1
 8002820:	e77f      	b.n	8002722 <pow+0x7a>
 8002822:	bf00      	nop
 8002824:	f3af 8000 	nop.w
	...
 8002834:	3ff00000 	.word	0x3ff00000
 8002838:	00000000 	.word	0x00000000
 800283c:	7ff00000 	.word	0x7ff00000
 8002840:	00000000 	.word	0x00000000
 8002844:	fff00000 	.word	0xfff00000
 8002848:	20000090 	.word	0x20000090
 800284c:	00000000 	.word	0x00000000

08002850 <__ieee754_atan2>:
 8002850:	ec51 0b11 	vmov	r0, r1, d1
 8002854:	4243      	negs	r3, r0
 8002856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800285a:	4303      	orrs	r3, r0
 800285c:	4e64      	ldr	r6, [pc, #400]	; (80029f0 <__ieee754_atan2+0x1a0>)
 800285e:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8002862:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 8002866:	42b3      	cmp	r3, r6
 8002868:	ec55 4b10 	vmov	r4, r5, d0
 800286c:	d83e      	bhi.n	80028ec <__ieee754_atan2+0x9c>
 800286e:	4263      	negs	r3, r4
 8002870:	4323      	orrs	r3, r4
 8002872:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 8002876:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 800287a:	42b3      	cmp	r3, r6
 800287c:	46a9      	mov	r9, r5
 800287e:	d835      	bhi.n	80028ec <__ieee754_atan2+0x9c>
 8002880:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8002884:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002888:	4303      	orrs	r3, r0
 800288a:	d03e      	beq.n	800290a <__ieee754_atan2+0xba>
 800288c:	178f      	asrs	r7, r1, #30
 800288e:	f007 0702 	and.w	r7, r7, #2
 8002892:	ea5a 0304 	orrs.w	r3, sl, r4
 8002896:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 800289a:	d02f      	beq.n	80028fc <__ieee754_atan2+0xac>
 800289c:	ea5e 0300 	orrs.w	r3, lr, r0
 80028a0:	d037      	beq.n	8002912 <__ieee754_atan2+0xc2>
 80028a2:	45b6      	cmp	lr, r6
 80028a4:	d044      	beq.n	8002930 <__ieee754_atan2+0xe0>
 80028a6:	45b2      	cmp	sl, r6
 80028a8:	d033      	beq.n	8002912 <__ieee754_atan2+0xc2>
 80028aa:	ebaa 0e0e 	sub.w	lr, sl, lr
 80028ae:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
 80028b2:	ea4f 532e 	mov.w	r3, lr, asr #20
 80028b6:	da38      	bge.n	800292a <__ieee754_atan2+0xda>
 80028b8:	2900      	cmp	r1, #0
 80028ba:	da45      	bge.n	8002948 <__ieee754_atan2+0xf8>
 80028bc:	333c      	adds	r3, #60	; 0x3c
 80028be:	da43      	bge.n	8002948 <__ieee754_atan2+0xf8>
 80028c0:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 80029b8 <__ieee754_atan2+0x168>
 80028c4:	2f01      	cmp	r7, #1
 80028c6:	d05d      	beq.n	8002984 <__ieee754_atan2+0x134>
 80028c8:	2f02      	cmp	r7, #2
 80028ca:	d04a      	beq.n	8002962 <__ieee754_atan2+0x112>
 80028cc:	b1a7      	cbz	r7, 80028f8 <__ieee754_atan2+0xa8>
 80028ce:	ec51 0b10 	vmov	r0, r1, d0
 80028d2:	a33b      	add	r3, pc, #236	; (adr r3, 80029c0 <__ieee754_atan2+0x170>)
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f7fd fc7a 	bl	80001d0 <__aeabi_dsub>
 80028dc:	a33a      	add	r3, pc, #232	; (adr r3, 80029c8 <__ieee754_atan2+0x178>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	f7fd fc75 	bl	80001d0 <__aeabi_dsub>
 80028e6:	ec41 0b10 	vmov	d0, r0, r1
 80028ea:	e005      	b.n	80028f8 <__ieee754_atan2+0xa8>
 80028ec:	4622      	mov	r2, r4
 80028ee:	462b      	mov	r3, r5
 80028f0:	f7fd fc70 	bl	80001d4 <__adddf3>
 80028f4:	ec41 0b10 	vmov	d0, r0, r1
 80028f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028fc:	2f02      	cmp	r7, #2
 80028fe:	d00e      	beq.n	800291e <__ieee754_atan2+0xce>
 8002900:	2f03      	cmp	r7, #3
 8002902:	d1f9      	bne.n	80028f8 <__ieee754_atan2+0xa8>
 8002904:	ed9f 0b32 	vldr	d0, [pc, #200]	; 80029d0 <__ieee754_atan2+0x180>
 8002908:	e7f6      	b.n	80028f8 <__ieee754_atan2+0xa8>
 800290a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800290e:	f001 be67 	b.w	80045e0 <atan>
 8002912:	f1b9 0f00 	cmp.w	r9, #0
 8002916:	db05      	blt.n	8002924 <__ieee754_atan2+0xd4>
 8002918:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 80029d8 <__ieee754_atan2+0x188>
 800291c:	e7ec      	b.n	80028f8 <__ieee754_atan2+0xa8>
 800291e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 80029c8 <__ieee754_atan2+0x178>
 8002922:	e7e9      	b.n	80028f8 <__ieee754_atan2+0xa8>
 8002924:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 80029e0 <__ieee754_atan2+0x190>
 8002928:	e7e6      	b.n	80028f8 <__ieee754_atan2+0xa8>
 800292a:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 80029d8 <__ieee754_atan2+0x188>
 800292e:	e7c9      	b.n	80028c4 <__ieee754_atan2+0x74>
 8002930:	45f2      	cmp	sl, lr
 8002932:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8002936:	d02e      	beq.n	8002996 <__ieee754_atan2+0x146>
 8002938:	2f02      	cmp	r7, #2
 800293a:	d834      	bhi.n	80029a6 <__ieee754_atan2+0x156>
 800293c:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <__ieee754_atan2+0x1a4>)
 800293e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8002942:	ed97 0b00 	vldr	d0, [r7]
 8002946:	e7d7      	b.n	80028f8 <__ieee754_atan2+0xa8>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4620      	mov	r0, r4
 800294e:	4629      	mov	r1, r5
 8002950:	f7fd ff20 	bl	8000794 <__aeabi_ddiv>
 8002954:	ec41 0b10 	vmov	d0, r0, r1
 8002958:	f005 fef4 	bl	8008744 <fabs>
 800295c:	f001 fe40 	bl	80045e0 <atan>
 8002960:	e7b0      	b.n	80028c4 <__ieee754_atan2+0x74>
 8002962:	a317      	add	r3, pc, #92	; (adr r3, 80029c0 <__ieee754_atan2+0x170>)
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	ec51 0b10 	vmov	r0, r1, d0
 800296c:	f7fd fc30 	bl	80001d0 <__aeabi_dsub>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	a114      	add	r1, pc, #80	; (adr r1, 80029c8 <__ieee754_atan2+0x178>)
 8002976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800297a:	f7fd fc29 	bl	80001d0 <__aeabi_dsub>
 800297e:	ec41 0b10 	vmov	d0, r0, r1
 8002982:	e7b9      	b.n	80028f8 <__ieee754_atan2+0xa8>
 8002984:	ee10 1a90 	vmov	r1, s1
 8002988:	ec53 2b10 	vmov	r2, r3, d0
 800298c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002990:	ec43 2b10 	vmov	d0, r2, r3
 8002994:	e7b0      	b.n	80028f8 <__ieee754_atan2+0xa8>
 8002996:	2f02      	cmp	r7, #2
 8002998:	d808      	bhi.n	80029ac <__ieee754_atan2+0x15c>
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <__ieee754_atan2+0x1a8>)
 800299c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80029a0:	ed97 0b00 	vldr	d0, [r7]
 80029a4:	e7a8      	b.n	80028f8 <__ieee754_atan2+0xa8>
 80029a6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80029b8 <__ieee754_atan2+0x168>
 80029aa:	e7a5      	b.n	80028f8 <__ieee754_atan2+0xa8>
 80029ac:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80029e8 <__ieee754_atan2+0x198>
 80029b0:	e7a2      	b.n	80028f8 <__ieee754_atan2+0xa8>
 80029b2:	bf00      	nop
 80029b4:	f3af 8000 	nop.w
	...
 80029c0:	33145c07 	.word	0x33145c07
 80029c4:	3ca1a626 	.word	0x3ca1a626
 80029c8:	54442d18 	.word	0x54442d18
 80029cc:	400921fb 	.word	0x400921fb
 80029d0:	54442d18 	.word	0x54442d18
 80029d4:	c00921fb 	.word	0xc00921fb
 80029d8:	54442d18 	.word	0x54442d18
 80029dc:	3ff921fb 	.word	0x3ff921fb
 80029e0:	54442d18 	.word	0x54442d18
 80029e4:	bff921fb 	.word	0xbff921fb
 80029e8:	54442d18 	.word	0x54442d18
 80029ec:	3fe921fb 	.word	0x3fe921fb
 80029f0:	7ff00000 	.word	0x7ff00000
 80029f4:	0800a1d0 	.word	0x0800a1d0
 80029f8:	0800a1b8 	.word	0x0800a1b8
 80029fc:	00000000 	.word	0x00000000

08002a00 <__ieee754_pow>:
 8002a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a04:	ec57 6b11 	vmov	r6, r7, d1
 8002a08:	ed2d 8b0c 	vpush	{d8-d13}
 8002a0c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
 8002a10:	ea5a 0206 	orrs.w	r2, sl, r6
 8002a14:	b087      	sub	sp, #28
 8002a16:	d03d      	beq.n	8002a94 <__ieee754_pow+0x94>
 8002a18:	ec55 4b10 	vmov	r4, r5, d0
 8002a1c:	4972      	ldr	r1, [pc, #456]	; (8002be8 <__ieee754_pow+0x1e8>)
 8002a1e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8002a22:	4588      	cmp	r8, r1
 8002a24:	ee10 2a10 	vmov	r2, s0
 8002a28:	46a9      	mov	r9, r5
 8002a2a:	dc2c      	bgt.n	8002a86 <__ieee754_pow+0x86>
 8002a2c:	ee11 3a10 	vmov	r3, s2
 8002a30:	46bb      	mov	fp, r7
 8002a32:	d036      	beq.n	8002aa2 <__ieee754_pow+0xa2>
 8002a34:	458a      	cmp	sl, r1
 8002a36:	dc26      	bgt.n	8002a86 <__ieee754_pow+0x86>
 8002a38:	496b      	ldr	r1, [pc, #428]	; (8002be8 <__ieee754_pow+0x1e8>)
 8002a3a:	458a      	cmp	sl, r1
 8002a3c:	d021      	beq.n	8002a82 <__ieee754_pow+0x82>
 8002a3e:	f1b9 0f00 	cmp.w	r9, #0
 8002a42:	db39      	blt.n	8002ab8 <__ieee754_pow+0xb8>
 8002a44:	2100      	movs	r1, #0
 8002a46:	9100      	str	r1, [sp, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d151      	bne.n	8002af0 <__ieee754_pow+0xf0>
 8002a4c:	4b66      	ldr	r3, [pc, #408]	; (8002be8 <__ieee754_pow+0x1e8>)
 8002a4e:	459a      	cmp	sl, r3
 8002a50:	f000 80a2 	beq.w	8002b98 <__ieee754_pow+0x198>
 8002a54:	4b65      	ldr	r3, [pc, #404]	; (8002bec <__ieee754_pow+0x1ec>)
 8002a56:	459a      	cmp	sl, r3
 8002a58:	f000 80b0 	beq.w	8002bbc <__ieee754_pow+0x1bc>
 8002a5c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 8002a60:	f000 84c0 	beq.w	80033e4 <__ieee754_pow+0x9e4>
 8002a64:	4b62      	ldr	r3, [pc, #392]	; (8002bf0 <__ieee754_pow+0x1f0>)
 8002a66:	459b      	cmp	fp, r3
 8002a68:	d142      	bne.n	8002af0 <__ieee754_pow+0xf0>
 8002a6a:	f1b9 0f00 	cmp.w	r9, #0
 8002a6e:	db3f      	blt.n	8002af0 <__ieee754_pow+0xf0>
 8002a70:	ec45 4b10 	vmov	d0, r4, r5
 8002a74:	b007      	add	sp, #28
 8002a76:	ecbd 8b0c 	vpop	{d8-d13}
 8002a7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a7e:	f005 bd99 	b.w	80085b4 <__ieee754_sqrt>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0db      	beq.n	8002a3e <__ieee754_pow+0x3e>
 8002a86:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8002a8a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8002a8e:	ea58 0302 	orrs.w	r3, r8, r2
 8002a92:	d109      	bne.n	8002aa8 <__ieee754_pow+0xa8>
 8002a94:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8002bd8 <__ieee754_pow+0x1d8>
 8002a98:	b007      	add	sp, #28
 8002a9a:	ecbd 8b0c 	vpop	{d8-d13}
 8002a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa2:	b90c      	cbnz	r4, 8002aa8 <__ieee754_pow+0xa8>
 8002aa4:	45c2      	cmp	sl, r8
 8002aa6:	ddc7      	ble.n	8002a38 <__ieee754_pow+0x38>
 8002aa8:	4852      	ldr	r0, [pc, #328]	; (8002bf4 <__ieee754_pow+0x1f4>)
 8002aaa:	b007      	add	sp, #28
 8002aac:	ecbd 8b0c 	vpop	{d8-d13}
 8002ab0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab4:	f001 bfb0 	b.w	8004a18 <nan>
 8002ab8:	494f      	ldr	r1, [pc, #316]	; (8002bf8 <__ieee754_pow+0x1f8>)
 8002aba:	458a      	cmp	sl, r1
 8002abc:	f300 8085 	bgt.w	8002bca <__ieee754_pow+0x1ca>
 8002ac0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8002ac4:	458a      	cmp	sl, r1
 8002ac6:	dd0f      	ble.n	8002ae8 <__ieee754_pow+0xe8>
 8002ac8:	ea4f 512a 	mov.w	r1, sl, asr #20
 8002acc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8002ad0:	2914      	cmp	r1, #20
 8002ad2:	f340 849b 	ble.w	800340c <__ieee754_pow+0xa0c>
 8002ad6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8002ada:	fa23 f001 	lsr.w	r0, r3, r1
 8002ade:	fa00 f101 	lsl.w	r1, r0, r1
 8002ae2:	4299      	cmp	r1, r3
 8002ae4:	f000 84ed 	beq.w	80034c2 <__ieee754_pow+0xac2>
 8002ae8:	2100      	movs	r1, #0
 8002aea:	9100      	str	r1, [sp, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0b1      	beq.n	8002a54 <__ieee754_pow+0x54>
 8002af0:	ec45 4b10 	vmov	d0, r4, r5
 8002af4:	9202      	str	r2, [sp, #8]
 8002af6:	f005 fe25 	bl	8008744 <fabs>
 8002afa:	9a02      	ldr	r2, [sp, #8]
 8002afc:	bb5a      	cbnz	r2, 8002b56 <__ieee754_pow+0x156>
 8002afe:	f1b8 0f00 	cmp.w	r8, #0
 8002b02:	d004      	beq.n	8002b0e <__ieee754_pow+0x10e>
 8002b04:	4b39      	ldr	r3, [pc, #228]	; (8002bec <__ieee754_pow+0x1ec>)
 8002b06:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d123      	bne.n	8002b56 <__ieee754_pow+0x156>
 8002b0e:	f1bb 0f00 	cmp.w	fp, #0
 8002b12:	da07      	bge.n	8002b24 <__ieee754_pow+0x124>
 8002b14:	ec53 2b10 	vmov	r2, r3, d0
 8002b18:	4934      	ldr	r1, [pc, #208]	; (8002bec <__ieee754_pow+0x1ec>)
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7fd fe3a 	bl	8000794 <__aeabi_ddiv>
 8002b20:	ec41 0b10 	vmov	d0, r0, r1
 8002b24:	f1b9 0f00 	cmp.w	r9, #0
 8002b28:	dab6      	bge.n	8002a98 <__ieee754_pow+0x98>
 8002b2a:	9b00      	ldr	r3, [sp, #0]
 8002b2c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8002b30:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8002b34:	ea58 0303 	orrs.w	r3, r8, r3
 8002b38:	f040 848d 	bne.w	8003456 <__ieee754_pow+0xa56>
 8002b3c:	ec53 2b10 	vmov	r2, r3, d0
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f7fd fb44 	bl	80001d0 <__aeabi_dsub>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	f7fd fe22 	bl	8000794 <__aeabi_ddiv>
 8002b50:	ec41 0b10 	vmov	d0, r0, r1
 8002b54:	e7a0      	b.n	8002a98 <__ieee754_pow+0x98>
 8002b56:	9a00      	ldr	r2, [sp, #0]
 8002b58:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	9304      	str	r3, [sp, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	d035      	beq.n	8002bd0 <__ieee754_pow+0x1d0>
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <__ieee754_pow+0x1fc>)
 8002b66:	459a      	cmp	sl, r3
 8002b68:	dd4c      	ble.n	8002c04 <__ieee754_pow+0x204>
 8002b6a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002b6e:	459a      	cmp	sl, r3
 8002b70:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <__ieee754_pow+0x200>)
 8002b72:	f340 83db 	ble.w	800332c <__ieee754_pow+0x92c>
 8002b76:	4598      	cmp	r8, r3
 8002b78:	f340 8360 	ble.w	800323c <__ieee754_pow+0x83c>
 8002b7c:	f1bb 0f00 	cmp.w	fp, #0
 8002b80:	f340 8360 	ble.w	8003244 <__ieee754_pow+0x844>
 8002b84:	a316      	add	r3, pc, #88	; (adr r3, 8002be0 <__ieee754_pow+0x1e0>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f7fd fcd7 	bl	8000540 <__aeabi_dmul>
 8002b92:	ec41 0b10 	vmov	d0, r0, r1
 8002b96:	e77f      	b.n	8002a98 <__ieee754_pow+0x98>
 8002b98:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
 8002b9c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f43f af77 	beq.w	8002a94 <__ieee754_pow+0x94>
 8002ba6:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <__ieee754_pow+0x200>)
 8002ba8:	4598      	cmp	r8, r3
 8002baa:	f340 837a 	ble.w	80032a2 <__ieee754_pow+0x8a2>
 8002bae:	f1bb 0f00 	cmp.w	fp, #0
 8002bb2:	f2c0 8347 	blt.w	8003244 <__ieee754_pow+0x844>
 8002bb6:	ec47 6b10 	vmov	d0, r6, r7
 8002bba:	e76d      	b.n	8002a98 <__ieee754_pow+0x98>
 8002bbc:	f1bb 0f00 	cmp.w	fp, #0
 8002bc0:	f2c0 841a 	blt.w	80033f8 <__ieee754_pow+0x9f8>
 8002bc4:	ec45 4b10 	vmov	d0, r4, r5
 8002bc8:	e766      	b.n	8002a98 <__ieee754_pow+0x98>
 8002bca:	2102      	movs	r1, #2
 8002bcc:	9100      	str	r1, [sp, #0]
 8002bce:	e73b      	b.n	8002a48 <__ieee754_pow+0x48>
 8002bd0:	4622      	mov	r2, r4
 8002bd2:	462b      	mov	r3, r5
 8002bd4:	e7b4      	b.n	8002b40 <__ieee754_pow+0x140>
 8002bd6:	bf00      	nop
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	3ff00000 	.word	0x3ff00000
 8002be0:	8800759c 	.word	0x8800759c
 8002be4:	7e37e43c 	.word	0x7e37e43c
 8002be8:	7ff00000 	.word	0x7ff00000
 8002bec:	3ff00000 	.word	0x3ff00000
 8002bf0:	3fe00000 	.word	0x3fe00000
 8002bf4:	0800a5cc 	.word	0x0800a5cc
 8002bf8:	433fffff 	.word	0x433fffff
 8002bfc:	41e00000 	.word	0x41e00000
 8002c00:	3fefffff 	.word	0x3fefffff
 8002c04:	4be4      	ldr	r3, [pc, #912]	; (8002f98 <__ieee754_pow+0x598>)
 8002c06:	ea09 0303 	and.w	r3, r9, r3
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	b953      	cbnz	r3, 8002c24 <__ieee754_pow+0x224>
 8002c0e:	ec51 0b10 	vmov	r0, r1, d0
 8002c12:	4be2      	ldr	r3, [pc, #904]	; (8002f9c <__ieee754_pow+0x59c>)
 8002c14:	f7fd fc94 	bl	8000540 <__aeabi_dmul>
 8002c18:	ec41 0b10 	vmov	d0, r0, r1
 8002c1c:	ee10 8a90 	vmov	r8, s1
 8002c20:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002c24:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002c28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002c2c:	189a      	adds	r2, r3, r2
 8002c2e:	4bdc      	ldr	r3, [pc, #880]	; (8002fa0 <__ieee754_pow+0x5a0>)
 8002c30:	9205      	str	r2, [sp, #20]
 8002c32:	f3c8 0813 	ubfx	r8, r8, #0, #20
 8002c36:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
 8002c3a:	4598      	cmp	r8, r3
 8002c3c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8002c40:	dd07      	ble.n	8002c52 <__ieee754_pow+0x252>
 8002c42:	4bd8      	ldr	r3, [pc, #864]	; (8002fa4 <__ieee754_pow+0x5a4>)
 8002c44:	4598      	cmp	r8, r3
 8002c46:	f340 8414 	ble.w	8003472 <__ieee754_pow+0xa72>
 8002c4a:	3201      	adds	r2, #1
 8002c4c:	9205      	str	r2, [sp, #20]
 8002c4e:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
 8002c52:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8002f38 <__ieee754_pow+0x538>
 8002c56:	ed9f 7bba 	vldr	d7, [pc, #744]	; 8002f40 <__ieee754_pow+0x540>
 8002c5a:	ec53 2b16 	vmov	r2, r3, d6
 8002c5e:	eeb0 ca47 	vmov.f32	s24, s14
 8002c62:	eef0 ca67 	vmov.f32	s25, s15
 8002c66:	2500      	movs	r5, #0
 8002c68:	eeb0 da47 	vmov.f32	s26, s14
 8002c6c:	eef0 da67 	vmov.f32	s27, s15
 8002c70:	ec5b ab10 	vmov	sl, fp, d0
 8002c74:	46a3      	mov	fp, r4
 8002c76:	4650      	mov	r0, sl
 8002c78:	4659      	mov	r1, fp
 8002c7a:	ec43 2b1a 	vmov	d10, r2, r3
 8002c7e:	f7fd faa7 	bl	80001d0 <__aeabi_dsub>
 8002c82:	ec53 2b1a 	vmov	r2, r3, d10
 8002c86:	4680      	mov	r8, r0
 8002c88:	4689      	mov	r9, r1
 8002c8a:	4650      	mov	r0, sl
 8002c8c:	4659      	mov	r1, fp
 8002c8e:	f7fd faa1 	bl	80001d4 <__adddf3>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	2000      	movs	r0, #0
 8002c98:	49c3      	ldr	r1, [pc, #780]	; (8002fa8 <__ieee754_pow+0x5a8>)
 8002c9a:	f7fd fd7b 	bl	8000794 <__aeabi_ddiv>
 8002c9e:	ec41 0b1b 	vmov	d11, r0, r1
 8002ca2:	4640      	mov	r0, r8
 8002ca4:	ec53 2b1b 	vmov	r2, r3, d11
 8002ca8:	4649      	mov	r1, r9
 8002caa:	f7fd fc49 	bl	8000540 <__aeabi_dmul>
 8002cae:	ec41 0b18 	vmov	d8, r0, r1
 8002cb2:	460a      	mov	r2, r1
 8002cb4:	4601      	mov	r1, r0
 8002cb6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002cba:	2100      	movs	r1, #0
 8002cbc:	9102      	str	r1, [sp, #8]
 8002cbe:	1064      	asrs	r4, r4, #1
 8002cc0:	ec4b ab19 	vmov	d9, sl, fp
 8002cc4:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8002cc8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8002ccc:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	1959      	adds	r1, r3, r5
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	460d      	mov	r5, r1
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4650      	mov	r0, sl
 8002cde:	4659      	mov	r1, fp
 8002ce0:	f7fd fc2e 	bl	8000540 <__aeabi_dmul>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4640      	mov	r0, r8
 8002cea:	4649      	mov	r1, r9
 8002cec:	f7fd fa70 	bl	80001d0 <__aeabi_dsub>
 8002cf0:	ec53 2b1a 	vmov	r2, r3, d10
 8002cf4:	4680      	mov	r8, r0
 8002cf6:	4689      	mov	r9, r1
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	f7fd fa68 	bl	80001d0 <__aeabi_dsub>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	ec51 0b19 	vmov	r0, r1, d9
 8002d08:	f7fd fa62 	bl	80001d0 <__aeabi_dsub>
 8002d0c:	4652      	mov	r2, sl
 8002d0e:	465b      	mov	r3, fp
 8002d10:	f7fd fc16 	bl	8000540 <__aeabi_dmul>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4640      	mov	r0, r8
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	f7fd fa58 	bl	80001d0 <__aeabi_dsub>
 8002d20:	ec53 2b1b 	vmov	r2, r3, d11
 8002d24:	f7fd fc0c 	bl	8000540 <__aeabi_dmul>
 8002d28:	ec53 2b18 	vmov	r2, r3, d8
 8002d2c:	ec41 0b19 	vmov	d9, r0, r1
 8002d30:	ec51 0b18 	vmov	r0, r1, d8
 8002d34:	f7fd fc04 	bl	8000540 <__aeabi_dmul>
 8002d38:	a383      	add	r3, pc, #524	; (adr r3, 8002f48 <__ieee754_pow+0x548>)
 8002d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3e:	4604      	mov	r4, r0
 8002d40:	460d      	mov	r5, r1
 8002d42:	f7fd fbfd 	bl	8000540 <__aeabi_dmul>
 8002d46:	a382      	add	r3, pc, #520	; (adr r3, 8002f50 <__ieee754_pow+0x550>)
 8002d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4c:	f7fd fa42 	bl	80001d4 <__adddf3>
 8002d50:	4622      	mov	r2, r4
 8002d52:	462b      	mov	r3, r5
 8002d54:	f7fd fbf4 	bl	8000540 <__aeabi_dmul>
 8002d58:	a37f      	add	r3, pc, #508	; (adr r3, 8002f58 <__ieee754_pow+0x558>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f7fd fa39 	bl	80001d4 <__adddf3>
 8002d62:	4622      	mov	r2, r4
 8002d64:	462b      	mov	r3, r5
 8002d66:	f7fd fbeb 	bl	8000540 <__aeabi_dmul>
 8002d6a:	a37d      	add	r3, pc, #500	; (adr r3, 8002f60 <__ieee754_pow+0x560>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fa30 	bl	80001d4 <__adddf3>
 8002d74:	4622      	mov	r2, r4
 8002d76:	462b      	mov	r3, r5
 8002d78:	f7fd fbe2 	bl	8000540 <__aeabi_dmul>
 8002d7c:	a37a      	add	r3, pc, #488	; (adr r3, 8002f68 <__ieee754_pow+0x568>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fa27 	bl	80001d4 <__adddf3>
 8002d86:	4622      	mov	r2, r4
 8002d88:	462b      	mov	r3, r5
 8002d8a:	f7fd fbd9 	bl	8000540 <__aeabi_dmul>
 8002d8e:	a378      	add	r3, pc, #480	; (adr r3, 8002f70 <__ieee754_pow+0x570>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f7fd fa1e 	bl	80001d4 <__adddf3>
 8002d98:	4622      	mov	r2, r4
 8002d9a:	4680      	mov	r8, r0
 8002d9c:	4689      	mov	r9, r1
 8002d9e:	462b      	mov	r3, r5
 8002da0:	4620      	mov	r0, r4
 8002da2:	4629      	mov	r1, r5
 8002da4:	f7fd fbcc 	bl	8000540 <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4640      	mov	r0, r8
 8002dae:	4649      	mov	r1, r9
 8002db0:	f7fd fbc6 	bl	8000540 <__aeabi_dmul>
 8002db4:	4652      	mov	r2, sl
 8002db6:	4604      	mov	r4, r0
 8002db8:	460d      	mov	r5, r1
 8002dba:	465b      	mov	r3, fp
 8002dbc:	ec51 0b18 	vmov	r0, r1, d8
 8002dc0:	f7fd fa08 	bl	80001d4 <__adddf3>
 8002dc4:	ec53 2b19 	vmov	r2, r3, d9
 8002dc8:	f7fd fbba 	bl	8000540 <__aeabi_dmul>
 8002dcc:	4622      	mov	r2, r4
 8002dce:	462b      	mov	r3, r5
 8002dd0:	f7fd fa00 	bl	80001d4 <__adddf3>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	4680      	mov	r8, r0
 8002dd8:	4689      	mov	r9, r1
 8002dda:	465b      	mov	r3, fp
 8002ddc:	4650      	mov	r0, sl
 8002dde:	4659      	mov	r1, fp
 8002de0:	f7fd fbae 	bl	8000540 <__aeabi_dmul>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	ec43 2b1a 	vmov	d10, r2, r3
 8002dec:	4b6f      	ldr	r3, [pc, #444]	; (8002fac <__ieee754_pow+0x5ac>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	f7fd f9f0 	bl	80001d4 <__adddf3>
 8002df4:	4642      	mov	r2, r8
 8002df6:	464b      	mov	r3, r9
 8002df8:	f7fd f9ec 	bl	80001d4 <__adddf3>
 8002dfc:	2400      	movs	r4, #0
 8002dfe:	460d      	mov	r5, r1
 8002e00:	4622      	mov	r2, r4
 8002e02:	462b      	mov	r3, r5
 8002e04:	4650      	mov	r0, sl
 8002e06:	4659      	mov	r1, fp
 8002e08:	f7fd fb9a 	bl	8000540 <__aeabi_dmul>
 8002e0c:	4b67      	ldr	r3, [pc, #412]	; (8002fac <__ieee754_pow+0x5ac>)
 8002e0e:	4682      	mov	sl, r0
 8002e10:	468b      	mov	fp, r1
 8002e12:	2200      	movs	r2, #0
 8002e14:	4620      	mov	r0, r4
 8002e16:	4629      	mov	r1, r5
 8002e18:	f7fd f9da 	bl	80001d0 <__aeabi_dsub>
 8002e1c:	ec53 2b1a 	vmov	r2, r3, d10
 8002e20:	f7fd f9d6 	bl	80001d0 <__aeabi_dsub>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4640      	mov	r0, r8
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	f7fd f9d0 	bl	80001d0 <__aeabi_dsub>
 8002e30:	ec53 2b18 	vmov	r2, r3, d8
 8002e34:	f7fd fb84 	bl	8000540 <__aeabi_dmul>
 8002e38:	4622      	mov	r2, r4
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	460d      	mov	r5, r1
 8002e40:	ec51 0b19 	vmov	r0, r1, d9
 8002e44:	f7fd fb7c 	bl	8000540 <__aeabi_dmul>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	4629      	mov	r1, r5
 8002e50:	f7fd f9c0 	bl	80001d4 <__adddf3>
 8002e54:	4680      	mov	r8, r0
 8002e56:	4689      	mov	r9, r1
 8002e58:	4642      	mov	r2, r8
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	4650      	mov	r0, sl
 8002e5e:	4659      	mov	r1, fp
 8002e60:	f7fd f9b8 	bl	80001d4 <__adddf3>
 8002e64:	a344      	add	r3, pc, #272	; (adr r3, 8002f78 <__ieee754_pow+0x578>)
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	460d      	mov	r5, r1
 8002e70:	f7fd fb66 	bl	8000540 <__aeabi_dmul>
 8002e74:	4652      	mov	r2, sl
 8002e76:	ec41 0b19 	vmov	d9, r0, r1
 8002e7a:	465b      	mov	r3, fp
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	4629      	mov	r1, r5
 8002e80:	f7fd f9a6 	bl	80001d0 <__aeabi_dsub>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4640      	mov	r0, r8
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	f7fd f9a0 	bl	80001d0 <__aeabi_dsub>
 8002e90:	a33b      	add	r3, pc, #236	; (adr r3, 8002f80 <__ieee754_pow+0x580>)
 8002e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e96:	f7fd fb53 	bl	8000540 <__aeabi_dmul>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	4614      	mov	r4, r2
 8002ea4:	461d      	mov	r5, r3
 8002ea6:	a338      	add	r3, pc, #224	; (adr r3, 8002f88 <__ieee754_pow+0x588>)
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	f7fd fb48 	bl	8000540 <__aeabi_dmul>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	f7fd f98c 	bl	80001d4 <__adddf3>
 8002ebc:	ec53 2b1d 	vmov	r2, r3, d13
 8002ec0:	f7fd f988 	bl	80001d4 <__adddf3>
 8002ec4:	4680      	mov	r8, r0
 8002ec6:	9805      	ldr	r0, [sp, #20]
 8002ec8:	4689      	mov	r9, r1
 8002eca:	f7fd facf 	bl	800046c <__aeabi_i2d>
 8002ece:	4642      	mov	r2, r8
 8002ed0:	4682      	mov	sl, r0
 8002ed2:	468b      	mov	fp, r1
 8002ed4:	464b      	mov	r3, r9
 8002ed6:	ec51 0b19 	vmov	r0, r1, d9
 8002eda:	f7fd f97b 	bl	80001d4 <__adddf3>
 8002ede:	ec53 2b1c 	vmov	r2, r3, d12
 8002ee2:	f7fd f977 	bl	80001d4 <__adddf3>
 8002ee6:	4652      	mov	r2, sl
 8002ee8:	465b      	mov	r3, fp
 8002eea:	f7fd f973 	bl	80001d4 <__adddf3>
 8002eee:	4652      	mov	r2, sl
 8002ef0:	465b      	mov	r3, fp
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	460d      	mov	r5, r1
 8002ef8:	f7fd f96a 	bl	80001d0 <__aeabi_dsub>
 8002efc:	ec53 2b1c 	vmov	r2, r3, d12
 8002f00:	f7fd f966 	bl	80001d0 <__aeabi_dsub>
 8002f04:	ec53 2b19 	vmov	r2, r3, d9
 8002f08:	f7fd f962 	bl	80001d0 <__aeabi_dsub>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4640      	mov	r0, r8
 8002f12:	4649      	mov	r1, r9
 8002f14:	f7fd f95c 	bl	80001d0 <__aeabi_dsub>
 8002f18:	9b00      	ldr	r3, [sp, #0]
 8002f1a:	9a04      	ldr	r2, [sp, #16]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	4682      	mov	sl, r0
 8002f22:	468b      	mov	fp, r1
 8002f24:	f040 81b6 	bne.w	8003294 <__ieee754_pow+0x894>
 8002f28:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8002f90 <__ieee754_pow+0x590>
 8002f2c:	eeb0 8a47 	vmov.f32	s16, s14
 8002f30:	eef0 8a67 	vmov.f32	s17, s15
 8002f34:	e03c      	b.n	8002fb0 <__ieee754_pow+0x5b0>
 8002f36:	bf00      	nop
 8002f38:	00000000 	.word	0x00000000
 8002f3c:	3ff00000 	.word	0x3ff00000
	...
 8002f48:	4a454eef 	.word	0x4a454eef
 8002f4c:	3fca7e28 	.word	0x3fca7e28
 8002f50:	93c9db65 	.word	0x93c9db65
 8002f54:	3fcd864a 	.word	0x3fcd864a
 8002f58:	a91d4101 	.word	0xa91d4101
 8002f5c:	3fd17460 	.word	0x3fd17460
 8002f60:	518f264d 	.word	0x518f264d
 8002f64:	3fd55555 	.word	0x3fd55555
 8002f68:	db6fabff 	.word	0xdb6fabff
 8002f6c:	3fdb6db6 	.word	0x3fdb6db6
 8002f70:	33333303 	.word	0x33333303
 8002f74:	3fe33333 	.word	0x3fe33333
 8002f78:	e0000000 	.word	0xe0000000
 8002f7c:	3feec709 	.word	0x3feec709
 8002f80:	dc3a03fd 	.word	0xdc3a03fd
 8002f84:	3feec709 	.word	0x3feec709
 8002f88:	145b01f5 	.word	0x145b01f5
 8002f8c:	be3e2fe0 	.word	0xbe3e2fe0
 8002f90:	00000000 	.word	0x00000000
 8002f94:	bff00000 	.word	0xbff00000
 8002f98:	7ff00000 	.word	0x7ff00000
 8002f9c:	43400000 	.word	0x43400000
 8002fa0:	0003988e 	.word	0x0003988e
 8002fa4:	000bb679 	.word	0x000bb679
 8002fa8:	3ff00000 	.word	0x3ff00000
 8002fac:	40080000 	.word	0x40080000
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e9cd 6700 	strd	r6, r7, [sp]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	4642      	mov	r2, r8
 8002fc0:	464b      	mov	r3, r9
 8002fc2:	4639      	mov	r1, r7
 8002fc4:	f7fd f904 	bl	80001d0 <__aeabi_dsub>
 8002fc8:	4622      	mov	r2, r4
 8002fca:	462b      	mov	r3, r5
 8002fcc:	f7fd fab8 	bl	8000540 <__aeabi_dmul>
 8002fd0:	4632      	mov	r2, r6
 8002fd2:	463b      	mov	r3, r7
 8002fd4:	4606      	mov	r6, r0
 8002fd6:	460f      	mov	r7, r1
 8002fd8:	4650      	mov	r0, sl
 8002fda:	4659      	mov	r1, fp
 8002fdc:	f7fd fab0 	bl	8000540 <__aeabi_dmul>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	4639      	mov	r1, r7
 8002fe8:	f7fd f8f4 	bl	80001d4 <__adddf3>
 8002fec:	4642      	mov	r2, r8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	4606      	mov	r6, r0
 8002ff2:	460f      	mov	r7, r1
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	f7fd faa2 	bl	8000540 <__aeabi_dmul>
 8002ffc:	4604      	mov	r4, r0
 8002ffe:	460d      	mov	r5, r1
 8003000:	462b      	mov	r3, r5
 8003002:	4630      	mov	r0, r6
 8003004:	4639      	mov	r1, r7
 8003006:	4622      	mov	r2, r4
 8003008:	f7fd f8e4 	bl	80001d4 <__adddf3>
 800300c:	4bc2      	ldr	r3, [pc, #776]	; (8003318 <__ieee754_pow+0x918>)
 800300e:	4299      	cmp	r1, r3
 8003010:	4680      	mov	r8, r0
 8003012:	4689      	mov	r9, r1
 8003014:	468a      	mov	sl, r1
 8003016:	f340 8118 	ble.w	800324a <__ieee754_pow+0x84a>
 800301a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800301e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003022:	4303      	orrs	r3, r0
 8003024:	f040 8207 	bne.w	8003436 <__ieee754_pow+0xa36>
 8003028:	a3a3      	add	r3, pc, #652	; (adr r3, 80032b8 <__ieee754_pow+0x8b8>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	4630      	mov	r0, r6
 8003030:	4639      	mov	r1, r7
 8003032:	f7fd f8cf 	bl	80001d4 <__adddf3>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4640      	mov	r0, r8
 800303c:	4649      	mov	r1, r9
 800303e:	4690      	mov	r8, r2
 8003040:	4699      	mov	r9, r3
 8003042:	4622      	mov	r2, r4
 8003044:	462b      	mov	r3, r5
 8003046:	f7fd f8c3 	bl	80001d0 <__aeabi_dsub>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4640      	mov	r0, r8
 8003050:	4649      	mov	r1, r9
 8003052:	f7fd fedb 	bl	8000e0c <__aeabi_dcmpgt>
 8003056:	2800      	cmp	r0, #0
 8003058:	f040 81ed 	bne.w	8003436 <__ieee754_pow+0xa36>
 800305c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8003060:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003064:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003068:	fa42 f303 	asr.w	r3, r2, r3
 800306c:	4453      	add	r3, sl
 800306e:	49ab      	ldr	r1, [pc, #684]	; (800331c <__ieee754_pow+0x91c>)
 8003070:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003074:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003078:	fa41 fc02 	asr.w	ip, r1, r2
 800307c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8003080:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003084:	f1c2 0214 	rsb	r2, r2, #20
 8003088:	fa41 f202 	asr.w	r2, r1, r2
 800308c:	2000      	movs	r0, #0
 800308e:	ea23 010c 	bic.w	r1, r3, ip
 8003092:	f1ba 0f00 	cmp.w	sl, #0
 8003096:	9200      	str	r2, [sp, #0]
 8003098:	460b      	mov	r3, r1
 800309a:	4602      	mov	r2, r0
 800309c:	da02      	bge.n	80030a4 <__ieee754_pow+0x6a4>
 800309e:	9900      	ldr	r1, [sp, #0]
 80030a0:	4249      	negs	r1, r1
 80030a2:	9100      	str	r1, [sp, #0]
 80030a4:	4620      	mov	r0, r4
 80030a6:	4629      	mov	r1, r5
 80030a8:	f7fd f892 	bl	80001d0 <__aeabi_dsub>
 80030ac:	9b00      	ldr	r3, [sp, #0]
 80030ae:	051b      	lsls	r3, r3, #20
 80030b0:	9302      	str	r3, [sp, #8]
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4604      	mov	r4, r0
 80030b8:	460d      	mov	r5, r1
 80030ba:	4630      	mov	r0, r6
 80030bc:	4639      	mov	r1, r7
 80030be:	f7fd f889 	bl	80001d4 <__adddf3>
 80030c2:	4689      	mov	r9, r1
 80030c4:	f04f 0800 	mov.w	r8, #0
 80030c8:	a37d      	add	r3, pc, #500	; (adr r3, 80032c0 <__ieee754_pow+0x8c0>)
 80030ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ce:	4640      	mov	r0, r8
 80030d0:	4649      	mov	r1, r9
 80030d2:	f7fd fa35 	bl	8000540 <__aeabi_dmul>
 80030d6:	4622      	mov	r2, r4
 80030d8:	462b      	mov	r3, r5
 80030da:	4682      	mov	sl, r0
 80030dc:	468b      	mov	fp, r1
 80030de:	4640      	mov	r0, r8
 80030e0:	4649      	mov	r1, r9
 80030e2:	f7fd f875 	bl	80001d0 <__aeabi_dsub>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4630      	mov	r0, r6
 80030ec:	4639      	mov	r1, r7
 80030ee:	f7fd f86f 	bl	80001d0 <__aeabi_dsub>
 80030f2:	a375      	add	r3, pc, #468	; (adr r3, 80032c8 <__ieee754_pow+0x8c8>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f7fd fa22 	bl	8000540 <__aeabi_dmul>
 80030fc:	a374      	add	r3, pc, #464	; (adr r3, 80032d0 <__ieee754_pow+0x8d0>)
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	4604      	mov	r4, r0
 8003104:	460d      	mov	r5, r1
 8003106:	4640      	mov	r0, r8
 8003108:	4649      	mov	r1, r9
 800310a:	f7fd fa19 	bl	8000540 <__aeabi_dmul>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4620      	mov	r0, r4
 8003114:	4629      	mov	r1, r5
 8003116:	f7fd f85d 	bl	80001d4 <__adddf3>
 800311a:	4606      	mov	r6, r0
 800311c:	460f      	mov	r7, r1
 800311e:	4632      	mov	r2, r6
 8003120:	463b      	mov	r3, r7
 8003122:	4650      	mov	r0, sl
 8003124:	4659      	mov	r1, fp
 8003126:	f7fd f855 	bl	80001d4 <__adddf3>
 800312a:	4652      	mov	r2, sl
 800312c:	465b      	mov	r3, fp
 800312e:	4604      	mov	r4, r0
 8003130:	460d      	mov	r5, r1
 8003132:	f7fd f84d 	bl	80001d0 <__aeabi_dsub>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4630      	mov	r0, r6
 800313c:	4639      	mov	r1, r7
 800313e:	f7fd f847 	bl	80001d0 <__aeabi_dsub>
 8003142:	4622      	mov	r2, r4
 8003144:	4680      	mov	r8, r0
 8003146:	4689      	mov	r9, r1
 8003148:	462b      	mov	r3, r5
 800314a:	4620      	mov	r0, r4
 800314c:	4629      	mov	r1, r5
 800314e:	f7fd f9f7 	bl	8000540 <__aeabi_dmul>
 8003152:	a361      	add	r3, pc, #388	; (adr r3, 80032d8 <__ieee754_pow+0x8d8>)
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	4606      	mov	r6, r0
 800315a:	460f      	mov	r7, r1
 800315c:	f7fd f9f0 	bl	8000540 <__aeabi_dmul>
 8003160:	a35f      	add	r3, pc, #380	; (adr r3, 80032e0 <__ieee754_pow+0x8e0>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f7fd f833 	bl	80001d0 <__aeabi_dsub>
 800316a:	4632      	mov	r2, r6
 800316c:	463b      	mov	r3, r7
 800316e:	f7fd f9e7 	bl	8000540 <__aeabi_dmul>
 8003172:	a35d      	add	r3, pc, #372	; (adr r3, 80032e8 <__ieee754_pow+0x8e8>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f7fd f82c 	bl	80001d4 <__adddf3>
 800317c:	4632      	mov	r2, r6
 800317e:	463b      	mov	r3, r7
 8003180:	f7fd f9de 	bl	8000540 <__aeabi_dmul>
 8003184:	a35a      	add	r3, pc, #360	; (adr r3, 80032f0 <__ieee754_pow+0x8f0>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f7fd f821 	bl	80001d0 <__aeabi_dsub>
 800318e:	4632      	mov	r2, r6
 8003190:	463b      	mov	r3, r7
 8003192:	f7fd f9d5 	bl	8000540 <__aeabi_dmul>
 8003196:	a358      	add	r3, pc, #352	; (adr r3, 80032f8 <__ieee754_pow+0x8f8>)
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f7fd f81a 	bl	80001d4 <__adddf3>
 80031a0:	4632      	mov	r2, r6
 80031a2:	463b      	mov	r3, r7
 80031a4:	f7fd f9cc 	bl	8000540 <__aeabi_dmul>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4620      	mov	r0, r4
 80031ae:	4629      	mov	r1, r5
 80031b0:	f7fd f80e 	bl	80001d0 <__aeabi_dsub>
 80031b4:	4606      	mov	r6, r0
 80031b6:	460f      	mov	r7, r1
 80031b8:	4632      	mov	r2, r6
 80031ba:	463b      	mov	r3, r7
 80031bc:	4620      	mov	r0, r4
 80031be:	4629      	mov	r1, r5
 80031c0:	f7fd f9be 	bl	8000540 <__aeabi_dmul>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4630      	mov	r0, r6
 80031ca:	4639      	mov	r1, r7
 80031cc:	4616      	mov	r6, r2
 80031ce:	461f      	mov	r7, r3
 80031d0:	2200      	movs	r2, #0
 80031d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031d6:	f7fc fffb 	bl	80001d0 <__aeabi_dsub>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4630      	mov	r0, r6
 80031e0:	4639      	mov	r1, r7
 80031e2:	f7fd fad7 	bl	8000794 <__aeabi_ddiv>
 80031e6:	4642      	mov	r2, r8
 80031e8:	4606      	mov	r6, r0
 80031ea:	460f      	mov	r7, r1
 80031ec:	464b      	mov	r3, r9
 80031ee:	4620      	mov	r0, r4
 80031f0:	4629      	mov	r1, r5
 80031f2:	f7fd f9a5 	bl	8000540 <__aeabi_dmul>
 80031f6:	4642      	mov	r2, r8
 80031f8:	464b      	mov	r3, r9
 80031fa:	f7fc ffeb 	bl	80001d4 <__adddf3>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4630      	mov	r0, r6
 8003204:	4639      	mov	r1, r7
 8003206:	f7fc ffe3 	bl	80001d0 <__aeabi_dsub>
 800320a:	4622      	mov	r2, r4
 800320c:	462b      	mov	r3, r5
 800320e:	f7fc ffdf 	bl	80001d0 <__aeabi_dsub>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	2000      	movs	r0, #0
 8003218:	4941      	ldr	r1, [pc, #260]	; (8003320 <__ieee754_pow+0x920>)
 800321a:	f7fc ffd9 	bl	80001d0 <__aeabi_dsub>
 800321e:	9a02      	ldr	r2, [sp, #8]
 8003220:	460b      	mov	r3, r1
 8003222:	4413      	add	r3, r2
 8003224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003228:	f2c0 8143 	blt.w	80034b2 <__ieee754_pow+0xab2>
 800322c:	4619      	mov	r1, r3
 800322e:	ec53 2b18 	vmov	r2, r3, d8
 8003232:	f7fd f985 	bl	8000540 <__aeabi_dmul>
 8003236:	ec41 0b10 	vmov	d0, r0, r1
 800323a:	e42d      	b.n	8002a98 <__ieee754_pow+0x98>
 800323c:	f1bb 0f00 	cmp.w	fp, #0
 8003240:	f6ff aca0 	blt.w	8002b84 <__ieee754_pow+0x184>
 8003244:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8003300 <__ieee754_pow+0x900>
 8003248:	e426      	b.n	8002a98 <__ieee754_pow+0x98>
 800324a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8003328 <__ieee754_pow+0x928>
 800324e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003252:	4563      	cmp	r3, ip
 8003254:	f340 80e7 	ble.w	8003426 <__ieee754_pow+0xa26>
 8003258:	4b32      	ldr	r3, [pc, #200]	; (8003324 <__ieee754_pow+0x924>)
 800325a:	440b      	add	r3, r1
 800325c:	4303      	orrs	r3, r0
 800325e:	d10a      	bne.n	8003276 <__ieee754_pow+0x876>
 8003260:	4622      	mov	r2, r4
 8003262:	462b      	mov	r3, r5
 8003264:	f7fc ffb4 	bl	80001d0 <__aeabi_dsub>
 8003268:	4632      	mov	r2, r6
 800326a:	463b      	mov	r3, r7
 800326c:	f7fd fdc4 	bl	8000df8 <__aeabi_dcmpge>
 8003270:	2800      	cmp	r0, #0
 8003272:	f43f aef3 	beq.w	800305c <__ieee754_pow+0x65c>
 8003276:	a324      	add	r3, pc, #144	; (adr r3, 8003308 <__ieee754_pow+0x908>)
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	ec51 0b18 	vmov	r0, r1, d8
 8003280:	f7fd f95e 	bl	8000540 <__aeabi_dmul>
 8003284:	a320      	add	r3, pc, #128	; (adr r3, 8003308 <__ieee754_pow+0x908>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f7fd f959 	bl	8000540 <__aeabi_dmul>
 800328e:	ec41 0b10 	vmov	d0, r0, r1
 8003292:	e401      	b.n	8002a98 <__ieee754_pow+0x98>
 8003294:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8003310 <__ieee754_pow+0x910>
 8003298:	eeb0 8a47 	vmov.f32	s16, s14
 800329c:	eef0 8a67 	vmov.f32	s17, s15
 80032a0:	e686      	b.n	8002fb0 <__ieee754_pow+0x5b0>
 80032a2:	f1bb 0f00 	cmp.w	fp, #0
 80032a6:	dacd      	bge.n	8003244 <__ieee754_pow+0x844>
 80032a8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80032ac:	ee00 6a10 	vmov	s0, r6
 80032b0:	ee00 3a90 	vmov	s1, r3
 80032b4:	f7ff bbf0 	b.w	8002a98 <__ieee754_pow+0x98>
 80032b8:	652b82fe 	.word	0x652b82fe
 80032bc:	3c971547 	.word	0x3c971547
 80032c0:	00000000 	.word	0x00000000
 80032c4:	3fe62e43 	.word	0x3fe62e43
 80032c8:	fefa39ef 	.word	0xfefa39ef
 80032cc:	3fe62e42 	.word	0x3fe62e42
 80032d0:	0ca86c39 	.word	0x0ca86c39
 80032d4:	be205c61 	.word	0xbe205c61
 80032d8:	72bea4d0 	.word	0x72bea4d0
 80032dc:	3e663769 	.word	0x3e663769
 80032e0:	c5d26bf1 	.word	0xc5d26bf1
 80032e4:	3ebbbd41 	.word	0x3ebbbd41
 80032e8:	af25de2c 	.word	0xaf25de2c
 80032ec:	3f11566a 	.word	0x3f11566a
 80032f0:	16bebd93 	.word	0x16bebd93
 80032f4:	3f66c16c 	.word	0x3f66c16c
 80032f8:	5555553e 	.word	0x5555553e
 80032fc:	3fc55555 	.word	0x3fc55555
	...
 8003308:	c2f8f359 	.word	0xc2f8f359
 800330c:	01a56e1f 	.word	0x01a56e1f
 8003310:	00000000 	.word	0x00000000
 8003314:	3ff00000 	.word	0x3ff00000
 8003318:	408fffff 	.word	0x408fffff
 800331c:	000fffff 	.word	0x000fffff
 8003320:	3ff00000 	.word	0x3ff00000
 8003324:	3f6f3400 	.word	0x3f6f3400
 8003328:	4090cbff 	.word	0x4090cbff
 800332c:	4598      	cmp	r8, r3
 800332e:	db85      	blt.n	800323c <__ieee754_pow+0x83c>
 8003330:	4b7d      	ldr	r3, [pc, #500]	; (8003528 <__ieee754_pow+0xb28>)
 8003332:	4598      	cmp	r8, r3
 8003334:	f73f ac22 	bgt.w	8002b7c <__ieee754_pow+0x17c>
 8003338:	ec51 0b10 	vmov	r0, r1, d0
 800333c:	4b7a      	ldr	r3, [pc, #488]	; (8003528 <__ieee754_pow+0xb28>)
 800333e:	2200      	movs	r2, #0
 8003340:	f7fc ff46 	bl	80001d0 <__aeabi_dsub>
 8003344:	a368      	add	r3, pc, #416	; (adr r3, 80034e8 <__ieee754_pow+0xae8>)
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	4604      	mov	r4, r0
 800334c:	460d      	mov	r5, r1
 800334e:	f7fd f8f7 	bl	8000540 <__aeabi_dmul>
 8003352:	a367      	add	r3, pc, #412	; (adr r3, 80034f0 <__ieee754_pow+0xaf0>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	4682      	mov	sl, r0
 800335a:	468b      	mov	fp, r1
 800335c:	4620      	mov	r0, r4
 800335e:	4629      	mov	r1, r5
 8003360:	f7fd f8ee 	bl	8000540 <__aeabi_dmul>
 8003364:	4b71      	ldr	r3, [pc, #452]	; (800352c <__ieee754_pow+0xb2c>)
 8003366:	ec41 0b18 	vmov	d8, r0, r1
 800336a:	2200      	movs	r2, #0
 800336c:	4620      	mov	r0, r4
 800336e:	4629      	mov	r1, r5
 8003370:	f7fd f8e6 	bl	8000540 <__aeabi_dmul>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	a15f      	add	r1, pc, #380	; (adr r1, 80034f8 <__ieee754_pow+0xaf8>)
 800337a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800337e:	f7fc ff27 	bl	80001d0 <__aeabi_dsub>
 8003382:	4622      	mov	r2, r4
 8003384:	462b      	mov	r3, r5
 8003386:	f7fd f8db 	bl	8000540 <__aeabi_dmul>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	2000      	movs	r0, #0
 8003390:	4967      	ldr	r1, [pc, #412]	; (8003530 <__ieee754_pow+0xb30>)
 8003392:	f7fc ff1d 	bl	80001d0 <__aeabi_dsub>
 8003396:	4622      	mov	r2, r4
 8003398:	4680      	mov	r8, r0
 800339a:	4689      	mov	r9, r1
 800339c:	462b      	mov	r3, r5
 800339e:	4620      	mov	r0, r4
 80033a0:	4629      	mov	r1, r5
 80033a2:	f7fd f8cd 	bl	8000540 <__aeabi_dmul>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4640      	mov	r0, r8
 80033ac:	4649      	mov	r1, r9
 80033ae:	f7fd f8c7 	bl	8000540 <__aeabi_dmul>
 80033b2:	a353      	add	r3, pc, #332	; (adr r3, 8003500 <__ieee754_pow+0xb00>)
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f7fd f8c2 	bl	8000540 <__aeabi_dmul>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	ec51 0b18 	vmov	r0, r1, d8
 80033c4:	f7fc ff04 	bl	80001d0 <__aeabi_dsub>
 80033c8:	4680      	mov	r8, r0
 80033ca:	4689      	mov	r9, r1
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	4650      	mov	r0, sl
 80033d2:	4659      	mov	r1, fp
 80033d4:	f7fc fefe 	bl	80001d4 <__adddf3>
 80033d8:	2000      	movs	r0, #0
 80033da:	4652      	mov	r2, sl
 80033dc:	465b      	mov	r3, fp
 80033de:	4604      	mov	r4, r0
 80033e0:	460d      	mov	r5, r1
 80033e2:	e591      	b.n	8002f08 <__ieee754_pow+0x508>
 80033e4:	4622      	mov	r2, r4
 80033e6:	462b      	mov	r3, r5
 80033e8:	4620      	mov	r0, r4
 80033ea:	4629      	mov	r1, r5
 80033ec:	f7fd f8a8 	bl	8000540 <__aeabi_dmul>
 80033f0:	ec41 0b10 	vmov	d0, r0, r1
 80033f4:	f7ff bb50 	b.w	8002a98 <__ieee754_pow+0x98>
 80033f8:	494b      	ldr	r1, [pc, #300]	; (8003528 <__ieee754_pow+0xb28>)
 80033fa:	2000      	movs	r0, #0
 80033fc:	4622      	mov	r2, r4
 80033fe:	462b      	mov	r3, r5
 8003400:	f7fd f9c8 	bl	8000794 <__aeabi_ddiv>
 8003404:	ec41 0b10 	vmov	d0, r0, r1
 8003408:	f7ff bb46 	b.w	8002a98 <__ieee754_pow+0x98>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d144      	bne.n	800349a <__ieee754_pow+0xa9a>
 8003410:	f1c1 0114 	rsb	r1, r1, #20
 8003414:	fa4a f001 	asr.w	r0, sl, r1
 8003418:	fa00 f101 	lsl.w	r1, r0, r1
 800341c:	4551      	cmp	r1, sl
 800341e:	d05a      	beq.n	80034d6 <__ieee754_pow+0xad6>
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	f7ff bb17 	b.w	8002a54 <__ieee754_pow+0x54>
 8003426:	4a42      	ldr	r2, [pc, #264]	; (8003530 <__ieee754_pow+0xb30>)
 8003428:	4293      	cmp	r3, r2
 800342a:	dc5b      	bgt.n	80034e4 <__ieee754_pow+0xae4>
 800342c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003430:	9102      	str	r1, [sp, #8]
 8003432:	9100      	str	r1, [sp, #0]
 8003434:	e646      	b.n	80030c4 <__ieee754_pow+0x6c4>
 8003436:	a334      	add	r3, pc, #208	; (adr r3, 8003508 <__ieee754_pow+0xb08>)
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	ec51 0b18 	vmov	r0, r1, d8
 8003440:	f7fd f87e 	bl	8000540 <__aeabi_dmul>
 8003444:	a330      	add	r3, pc, #192	; (adr r3, 8003508 <__ieee754_pow+0xb08>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f7fd f879 	bl	8000540 <__aeabi_dmul>
 800344e:	ec41 0b10 	vmov	d0, r0, r1
 8003452:	f7ff bb21 	b.w	8002a98 <__ieee754_pow+0x98>
 8003456:	9b00      	ldr	r3, [sp, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	f47f ab1d 	bne.w	8002a98 <__ieee754_pow+0x98>
 800345e:	ee10 1a90 	vmov	r1, s1
 8003462:	ee10 2a10 	vmov	r2, s0
 8003466:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800346a:	ec43 2b10 	vmov	d0, r2, r3
 800346e:	f7ff bb13 	b.w	8002a98 <__ieee754_pow+0x98>
 8003472:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8003510 <__ieee754_pow+0xb10>
 8003476:	eeb0 ca47 	vmov.f32	s24, s14
 800347a:	eef0 ca67 	vmov.f32	s25, s15
 800347e:	ed9f 7b26 	vldr	d7, [pc, #152]	; 8003518 <__ieee754_pow+0xb18>
 8003482:	eeb0 da47 	vmov.f32	s26, s14
 8003486:	eef0 da67 	vmov.f32	s27, s15
 800348a:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8003520 <__ieee754_pow+0xb20>
 800348e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8003492:	ec53 2b17 	vmov	r2, r3, d7
 8003496:	f7ff bbeb 	b.w	8002c70 <__ieee754_pow+0x270>
 800349a:	ec45 4b10 	vmov	d0, r4, r5
 800349e:	9200      	str	r2, [sp, #0]
 80034a0:	f005 f950 	bl	8008744 <fabs>
 80034a4:	9a00      	ldr	r2, [sp, #0]
 80034a6:	2a00      	cmp	r2, #0
 80034a8:	f47f ab92 	bne.w	8002bd0 <__ieee754_pow+0x1d0>
 80034ac:	9200      	str	r2, [sp, #0]
 80034ae:	f7ff bb26 	b.w	8002afe <__ieee754_pow+0xfe>
 80034b2:	ec41 0b10 	vmov	d0, r0, r1
 80034b6:	9800      	ldr	r0, [sp, #0]
 80034b8:	f001 fab6 	bl	8004a28 <scalbn>
 80034bc:	ec51 0b10 	vmov	r0, r1, d0
 80034c0:	e6b5      	b.n	800322e <__ieee754_pow+0x82e>
 80034c2:	f000 0001 	and.w	r0, r0, #1
 80034c6:	f1c0 0102 	rsb	r1, r0, #2
 80034ca:	9100      	str	r1, [sp, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f43f aac1 	beq.w	8002a54 <__ieee754_pow+0x54>
 80034d2:	f7ff bb0d 	b.w	8002af0 <__ieee754_pow+0xf0>
 80034d6:	f000 0001 	and.w	r0, r0, #1
 80034da:	f1c0 0302 	rsb	r3, r0, #2
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	f7ff bab8 	b.w	8002a54 <__ieee754_pow+0x54>
 80034e4:	151b      	asrs	r3, r3, #20
 80034e6:	e5bb      	b.n	8003060 <__ieee754_pow+0x660>
 80034e8:	60000000 	.word	0x60000000
 80034ec:	3ff71547 	.word	0x3ff71547
 80034f0:	f85ddf44 	.word	0xf85ddf44
 80034f4:	3e54ae0b 	.word	0x3e54ae0b
 80034f8:	55555555 	.word	0x55555555
 80034fc:	3fd55555 	.word	0x3fd55555
 8003500:	652b82fe 	.word	0x652b82fe
 8003504:	3ff71547 	.word	0x3ff71547
 8003508:	8800759c 	.word	0x8800759c
 800350c:	7e37e43c 	.word	0x7e37e43c
 8003510:	40000000 	.word	0x40000000
 8003514:	3fe2b803 	.word	0x3fe2b803
 8003518:	43cfd006 	.word	0x43cfd006
 800351c:	3e4cfdeb 	.word	0x3e4cfdeb
 8003520:	00000000 	.word	0x00000000
 8003524:	3ff80000 	.word	0x3ff80000
 8003528:	3ff00000 	.word	0x3ff00000
 800352c:	3fd00000 	.word	0x3fd00000
 8003530:	3fe00000 	.word	0x3fe00000
 8003534:	00000000 	.word	0x00000000

08003538 <__ieee754_rem_pio2>:
 8003538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800353c:	ec53 2b10 	vmov	r2, r3, d0
 8003540:	ed2d 8b04 	vpush	{d8-d9}
 8003544:	499e      	ldr	r1, [pc, #632]	; (80037c0 <__ieee754_rem_pio2+0x288>)
 8003546:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800354a:	428d      	cmp	r5, r1
 800354c:	b089      	sub	sp, #36	; 0x24
 800354e:	4604      	mov	r4, r0
 8003550:	f340 8088 	ble.w	8003664 <__ieee754_rem_pio2+0x12c>
 8003554:	499b      	ldr	r1, [pc, #620]	; (80037c4 <__ieee754_rem_pio2+0x28c>)
 8003556:	428d      	cmp	r5, r1
 8003558:	461f      	mov	r7, r3
 800355a:	dc2b      	bgt.n	80035b4 <__ieee754_rem_pio2+0x7c>
 800355c:	2f00      	cmp	r7, #0
 800355e:	4619      	mov	r1, r3
 8003560:	ee10 0a10 	vmov	r0, s0
 8003564:	a38c      	add	r3, pc, #560	; (adr r3, 8003798 <__ieee754_rem_pio2+0x260>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f340 81b8 	ble.w	80038de <__ieee754_rem_pio2+0x3a6>
 800356e:	f7fc fe2f 	bl	80001d0 <__aeabi_dsub>
 8003572:	4b95      	ldr	r3, [pc, #596]	; (80037c8 <__ieee754_rem_pio2+0x290>)
 8003574:	429d      	cmp	r5, r3
 8003576:	4680      	mov	r8, r0
 8003578:	4689      	mov	r9, r1
 800357a:	f000 808b 	beq.w	8003694 <__ieee754_rem_pio2+0x15c>
 800357e:	a388      	add	r3, pc, #544	; (adr r3, 80037a0 <__ieee754_rem_pio2+0x268>)
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f7fc fe24 	bl	80001d0 <__aeabi_dsub>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	e9c4 2300 	strd	r2, r3, [r4]
 8003590:	4640      	mov	r0, r8
 8003592:	4649      	mov	r1, r9
 8003594:	f7fc fe1c 	bl	80001d0 <__aeabi_dsub>
 8003598:	a381      	add	r3, pc, #516	; (adr r3, 80037a0 <__ieee754_rem_pio2+0x268>)
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f7fc fe17 	bl	80001d0 <__aeabi_dsub>
 80035a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80035a6:	2601      	movs	r6, #1
 80035a8:	4630      	mov	r0, r6
 80035aa:	b009      	add	sp, #36	; 0x24
 80035ac:	ecbd 8b04 	vpop	{d8-d9}
 80035b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b4:	4985      	ldr	r1, [pc, #532]	; (80037cc <__ieee754_rem_pio2+0x294>)
 80035b6:	428d      	cmp	r5, r1
 80035b8:	f340 808e 	ble.w	80036d8 <__ieee754_rem_pio2+0x1a0>
 80035bc:	4984      	ldr	r1, [pc, #528]	; (80037d0 <__ieee754_rem_pio2+0x298>)
 80035be:	428d      	cmp	r5, r1
 80035c0:	dc5d      	bgt.n	800367e <__ieee754_rem_pio2+0x146>
 80035c2:	152e      	asrs	r6, r5, #20
 80035c4:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80035c8:	ee10 0a10 	vmov	r0, s0
 80035cc:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 80035d0:	4690      	mov	r8, r2
 80035d2:	4689      	mov	r9, r1
 80035d4:	f7fd fc3a 	bl	8000e4c <__aeabi_d2iz>
 80035d8:	f7fc ff48 	bl	800046c <__aeabi_i2d>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4640      	mov	r0, r8
 80035e2:	4649      	mov	r1, r9
 80035e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035e8:	f7fc fdf2 	bl	80001d0 <__aeabi_dsub>
 80035ec:	4b79      	ldr	r3, [pc, #484]	; (80037d4 <__ieee754_rem_pio2+0x29c>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	f7fc ffa6 	bl	8000540 <__aeabi_dmul>
 80035f4:	4689      	mov	r9, r1
 80035f6:	4680      	mov	r8, r0
 80035f8:	f7fd fc28 	bl	8000e4c <__aeabi_d2iz>
 80035fc:	4605      	mov	r5, r0
 80035fe:	f7fc ff35 	bl	800046c <__aeabi_i2d>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4640      	mov	r0, r8
 8003608:	4649      	mov	r1, r9
 800360a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800360e:	f7fc fddf 	bl	80001d0 <__aeabi_dsub>
 8003612:	4b70      	ldr	r3, [pc, #448]	; (80037d4 <__ieee754_rem_pio2+0x29c>)
 8003614:	2200      	movs	r2, #0
 8003616:	f7fc ff93 	bl	8000540 <__aeabi_dmul>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003622:	2200      	movs	r2, #0
 8003624:	2300      	movs	r3, #0
 8003626:	f7fd fbc9 	bl	8000dbc <__aeabi_dcmpeq>
 800362a:	2800      	cmp	r0, #0
 800362c:	f000 8155 	beq.w	80038da <__ieee754_rem_pio2+0x3a2>
 8003630:	2d00      	cmp	r5, #0
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2302      	movne	r3, #2
 8003638:	4a67      	ldr	r2, [pc, #412]	; (80037d8 <__ieee754_rem_pio2+0x2a0>)
 800363a:	9201      	str	r2, [sp, #4]
 800363c:	2202      	movs	r2, #2
 800363e:	9200      	str	r2, [sp, #0]
 8003640:	4621      	mov	r1, r4
 8003642:	4632      	mov	r2, r6
 8003644:	a802      	add	r0, sp, #8
 8003646:	f000 fadf 	bl	8003c08 <__kernel_rem_pio2>
 800364a:	2f00      	cmp	r7, #0
 800364c:	4606      	mov	r6, r0
 800364e:	daab      	bge.n	80035a8 <__ieee754_rem_pio2+0x70>
 8003650:	6862      	ldr	r2, [r4, #4]
 8003652:	68e3      	ldr	r3, [r4, #12]
 8003654:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003658:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800365c:	6062      	str	r2, [r4, #4]
 800365e:	60e3      	str	r3, [r4, #12]
 8003660:	4246      	negs	r6, r0
 8003662:	e7a1      	b.n	80035a8 <__ieee754_rem_pio2+0x70>
 8003664:	2000      	movs	r0, #0
 8003666:	2100      	movs	r1, #0
 8003668:	2600      	movs	r6, #0
 800366a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800366e:	4630      	mov	r0, r6
 8003670:	ed84 0b00 	vstr	d0, [r4]
 8003674:	b009      	add	sp, #36	; 0x24
 8003676:	ecbd 8b04 	vpop	{d8-d9}
 800367a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800367e:	ee10 0a10 	vmov	r0, s0
 8003682:	4619      	mov	r1, r3
 8003684:	f7fc fda4 	bl	80001d0 <__aeabi_dsub>
 8003688:	2600      	movs	r6, #0
 800368a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800368e:	e9c4 0100 	strd	r0, r1, [r4]
 8003692:	e789      	b.n	80035a8 <__ieee754_rem_pio2+0x70>
 8003694:	a344      	add	r3, pc, #272	; (adr r3, 80037a8 <__ieee754_rem_pio2+0x270>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f7fc fd99 	bl	80001d0 <__aeabi_dsub>
 800369e:	a344      	add	r3, pc, #272	; (adr r3, 80037b0 <__ieee754_rem_pio2+0x278>)
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	4680      	mov	r8, r0
 80036a6:	4689      	mov	r9, r1
 80036a8:	f7fc fd92 	bl	80001d0 <__aeabi_dsub>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	e9c4 2300 	strd	r2, r3, [r4]
 80036b4:	4640      	mov	r0, r8
 80036b6:	4649      	mov	r1, r9
 80036b8:	f7fc fd8a 	bl	80001d0 <__aeabi_dsub>
 80036bc:	a33c      	add	r3, pc, #240	; (adr r3, 80037b0 <__ieee754_rem_pio2+0x278>)
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	f7fc fd85 	bl	80001d0 <__aeabi_dsub>
 80036c6:	2601      	movs	r6, #1
 80036c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80036cc:	4630      	mov	r0, r6
 80036ce:	b009      	add	sp, #36	; 0x24
 80036d0:	ecbd 8b04 	vpop	{d8-d9}
 80036d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d8:	f005 f834 	bl	8008744 <fabs>
 80036dc:	ec59 8b10 	vmov	r8, r9, d0
 80036e0:	ee10 0a10 	vmov	r0, s0
 80036e4:	a334      	add	r3, pc, #208	; (adr r3, 80037b8 <__ieee754_rem_pio2+0x280>)
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	4649      	mov	r1, r9
 80036ec:	f7fc ff28 	bl	8000540 <__aeabi_dmul>
 80036f0:	4b3a      	ldr	r3, [pc, #232]	; (80037dc <__ieee754_rem_pio2+0x2a4>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	f7fc fd6e 	bl	80001d4 <__adddf3>
 80036f8:	f7fd fba8 	bl	8000e4c <__aeabi_d2iz>
 80036fc:	4606      	mov	r6, r0
 80036fe:	f7fc feb5 	bl	800046c <__aeabi_i2d>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	ec43 2b18 	vmov	d8, r2, r3
 800370a:	a323      	add	r3, pc, #140	; (adr r3, 8003798 <__ieee754_rem_pio2+0x260>)
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	eeb0 9a48 	vmov.f32	s18, s16
 8003714:	eef0 9a68 	vmov.f32	s19, s17
 8003718:	f7fc ff12 	bl	8000540 <__aeabi_dmul>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4640      	mov	r0, r8
 8003722:	4649      	mov	r1, r9
 8003724:	f7fc fd54 	bl	80001d0 <__aeabi_dsub>
 8003728:	a31d      	add	r3, pc, #116	; (adr r3, 80037a0 <__ieee754_rem_pio2+0x268>)
 800372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372e:	4682      	mov	sl, r0
 8003730:	468b      	mov	fp, r1
 8003732:	ec51 0b18 	vmov	r0, r1, d8
 8003736:	f7fc ff03 	bl	8000540 <__aeabi_dmul>
 800373a:	2e1f      	cmp	r6, #31
 800373c:	ec41 0b18 	vmov	d8, r0, r1
 8003740:	dc50      	bgt.n	80037e4 <__ieee754_rem_pio2+0x2ac>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4650      	mov	r0, sl
 8003748:	4659      	mov	r1, fp
 800374a:	f7fc fd41 	bl	80001d0 <__aeabi_dsub>
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <__ieee754_rem_pio2+0x2a8>)
 8003750:	1e72      	subs	r2, r6, #1
 8003752:	4680      	mov	r8, r0
 8003754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003758:	42ab      	cmp	r3, r5
 800375a:	4689      	mov	r9, r1
 800375c:	d04a      	beq.n	80037f4 <__ieee754_rem_pio2+0x2bc>
 800375e:	4642      	mov	r2, r8
 8003760:	464b      	mov	r3, r9
 8003762:	e9c4 8900 	strd	r8, r9, [r4]
 8003766:	4650      	mov	r0, sl
 8003768:	4659      	mov	r1, fp
 800376a:	f7fc fd31 	bl	80001d0 <__aeabi_dsub>
 800376e:	ec53 2b18 	vmov	r2, r3, d8
 8003772:	f7fc fd2d 	bl	80001d0 <__aeabi_dsub>
 8003776:	2f00      	cmp	r7, #0
 8003778:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800377c:	f6bf af14 	bge.w	80035a8 <__ieee754_rem_pio2+0x70>
 8003780:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003784:	e9c4 8300 	strd	r8, r3, [r4]
 8003788:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800378c:	e9c4 0302 	strd	r0, r3, [r4, #8]
 8003790:	4276      	negs	r6, r6
 8003792:	e709      	b.n	80035a8 <__ieee754_rem_pio2+0x70>
 8003794:	f3af 8000 	nop.w
 8003798:	54400000 	.word	0x54400000
 800379c:	3ff921fb 	.word	0x3ff921fb
 80037a0:	1a626331 	.word	0x1a626331
 80037a4:	3dd0b461 	.word	0x3dd0b461
 80037a8:	1a600000 	.word	0x1a600000
 80037ac:	3dd0b461 	.word	0x3dd0b461
 80037b0:	2e037073 	.word	0x2e037073
 80037b4:	3ba3198a 	.word	0x3ba3198a
 80037b8:	6dc9c883 	.word	0x6dc9c883
 80037bc:	3fe45f30 	.word	0x3fe45f30
 80037c0:	3fe921fb 	.word	0x3fe921fb
 80037c4:	4002d97b 	.word	0x4002d97b
 80037c8:	3ff921fb 	.word	0x3ff921fb
 80037cc:	413921fb 	.word	0x413921fb
 80037d0:	7fefffff 	.word	0x7fefffff
 80037d4:	41700000 	.word	0x41700000
 80037d8:	0800a650 	.word	0x0800a650
 80037dc:	3fe00000 	.word	0x3fe00000
 80037e0:	0800a5d0 	.word	0x0800a5d0
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4650      	mov	r0, sl
 80037ea:	4659      	mov	r1, fp
 80037ec:	f7fc fcf0 	bl	80001d0 <__aeabi_dsub>
 80037f0:	4680      	mov	r8, r0
 80037f2:	4689      	mov	r9, r1
 80037f4:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80037f8:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	ea4f 5525 	mov.w	r5, r5, asr #20
 8003802:	ddac      	ble.n	800375e <__ieee754_rem_pio2+0x226>
 8003804:	a356      	add	r3, pc, #344	; (adr r3, 8003960 <__ieee754_rem_pio2+0x428>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	ec51 0b19 	vmov	r0, r1, d9
 800380e:	f7fc fe97 	bl	8000540 <__aeabi_dmul>
 8003812:	4680      	mov	r8, r0
 8003814:	4689      	mov	r9, r1
 8003816:	4642      	mov	r2, r8
 8003818:	464b      	mov	r3, r9
 800381a:	4650      	mov	r0, sl
 800381c:	4659      	mov	r1, fp
 800381e:	f7fc fcd7 	bl	80001d0 <__aeabi_dsub>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4650      	mov	r0, sl
 8003828:	4659      	mov	r1, fp
 800382a:	4692      	mov	sl, r2
 800382c:	469b      	mov	fp, r3
 800382e:	f7fc fccf 	bl	80001d0 <__aeabi_dsub>
 8003832:	4642      	mov	r2, r8
 8003834:	464b      	mov	r3, r9
 8003836:	f7fc fccb 	bl	80001d0 <__aeabi_dsub>
 800383a:	a34b      	add	r3, pc, #300	; (adr r3, 8003968 <__ieee754_rem_pio2+0x430>)
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	4680      	mov	r8, r0
 8003842:	4689      	mov	r9, r1
 8003844:	ec51 0b19 	vmov	r0, r1, d9
 8003848:	f7fc fe7a 	bl	8000540 <__aeabi_dmul>
 800384c:	4642      	mov	r2, r8
 800384e:	464b      	mov	r3, r9
 8003850:	f7fc fcbe 	bl	80001d0 <__aeabi_dsub>
 8003854:	460b      	mov	r3, r1
 8003856:	4602      	mov	r2, r0
 8003858:	4659      	mov	r1, fp
 800385a:	4650      	mov	r0, sl
 800385c:	ec43 2b18 	vmov	d8, r2, r3
 8003860:	f7fc fcb6 	bl	80001d0 <__aeabi_dsub>
 8003864:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003868:	1aed      	subs	r5, r5, r3
 800386a:	2d31      	cmp	r5, #49	; 0x31
 800386c:	4680      	mov	r8, r0
 800386e:	4689      	mov	r9, r1
 8003870:	f77f af75 	ble.w	800375e <__ieee754_rem_pio2+0x226>
 8003874:	a33f      	add	r3, pc, #252	; (adr r3, 8003974 <__ieee754_rem_pio2+0x43c>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	ec51 0b19 	vmov	r0, r1, d9
 800387e:	f7fc fe5f 	bl	8000540 <__aeabi_dmul>
 8003882:	4680      	mov	r8, r0
 8003884:	4689      	mov	r9, r1
 8003886:	4642      	mov	r2, r8
 8003888:	464b      	mov	r3, r9
 800388a:	4650      	mov	r0, sl
 800388c:	4659      	mov	r1, fp
 800388e:	f7fc fc9f 	bl	80001d0 <__aeabi_dsub>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4650      	mov	r0, sl
 8003898:	4659      	mov	r1, fp
 800389a:	4692      	mov	sl, r2
 800389c:	469b      	mov	fp, r3
 800389e:	f7fc fc97 	bl	80001d0 <__aeabi_dsub>
 80038a2:	4642      	mov	r2, r8
 80038a4:	464b      	mov	r3, r9
 80038a6:	f7fc fc93 	bl	80001d0 <__aeabi_dsub>
 80038aa:	a334      	add	r3, pc, #208	; (adr r3, 800397c <__ieee754_rem_pio2+0x444>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	4680      	mov	r8, r0
 80038b2:	4689      	mov	r9, r1
 80038b4:	ec51 0b19 	vmov	r0, r1, d9
 80038b8:	f7fc fe42 	bl	8000540 <__aeabi_dmul>
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	f7fc fc86 	bl	80001d0 <__aeabi_dsub>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4650      	mov	r0, sl
 80038ca:	4659      	mov	r1, fp
 80038cc:	ec43 2b18 	vmov	d8, r2, r3
 80038d0:	f7fc fc7e 	bl	80001d0 <__aeabi_dsub>
 80038d4:	4680      	mov	r8, r0
 80038d6:	4689      	mov	r9, r1
 80038d8:	e741      	b.n	800375e <__ieee754_rem_pio2+0x226>
 80038da:	2303      	movs	r3, #3
 80038dc:	e6ac      	b.n	8003638 <__ieee754_rem_pio2+0x100>
 80038de:	f7fc fc79 	bl	80001d4 <__adddf3>
 80038e2:	4b23      	ldr	r3, [pc, #140]	; (8003970 <__ieee754_rem_pio2+0x438>)
 80038e4:	429d      	cmp	r5, r3
 80038e6:	4680      	mov	r8, r0
 80038e8:	4689      	mov	r9, r1
 80038ea:	d016      	beq.n	800391a <__ieee754_rem_pio2+0x3e2>
 80038ec:	a31a      	add	r3, pc, #104	; (adr r3, 8003958 <__ieee754_rem_pio2+0x420>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fc fc6f 	bl	80001d4 <__adddf3>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	e9c4 2300 	strd	r2, r3, [r4]
 80038fe:	4640      	mov	r0, r8
 8003900:	4649      	mov	r1, r9
 8003902:	f7fc fc65 	bl	80001d0 <__aeabi_dsub>
 8003906:	a314      	add	r3, pc, #80	; (adr r3, 8003958 <__ieee754_rem_pio2+0x420>)
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	f7fc fc62 	bl	80001d4 <__adddf3>
 8003910:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003914:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003918:	e646      	b.n	80035a8 <__ieee754_rem_pio2+0x70>
 800391a:	a311      	add	r3, pc, #68	; (adr r3, 8003960 <__ieee754_rem_pio2+0x428>)
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f7fc fc58 	bl	80001d4 <__adddf3>
 8003924:	a310      	add	r3, pc, #64	; (adr r3, 8003968 <__ieee754_rem_pio2+0x430>)
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	4680      	mov	r8, r0
 800392c:	4689      	mov	r9, r1
 800392e:	f7fc fc51 	bl	80001d4 <__adddf3>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	e9c4 2300 	strd	r2, r3, [r4]
 800393a:	4640      	mov	r0, r8
 800393c:	4649      	mov	r1, r9
 800393e:	f7fc fc47 	bl	80001d0 <__aeabi_dsub>
 8003942:	a309      	add	r3, pc, #36	; (adr r3, 8003968 <__ieee754_rem_pio2+0x430>)
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f7fc fc44 	bl	80001d4 <__adddf3>
 800394c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003950:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003954:	e628      	b.n	80035a8 <__ieee754_rem_pio2+0x70>
 8003956:	bf00      	nop
 8003958:	1a626331 	.word	0x1a626331
 800395c:	3dd0b461 	.word	0x3dd0b461
 8003960:	1a600000 	.word	0x1a600000
 8003964:	3dd0b461 	.word	0x3dd0b461
 8003968:	2e037073 	.word	0x2e037073
 800396c:	3ba3198a 	.word	0x3ba3198a
 8003970:	3ff921fb 	.word	0x3ff921fb
 8003974:	2e000000 	.word	0x2e000000
 8003978:	3ba3198a 	.word	0x3ba3198a
 800397c:	252049c1 	.word	0x252049c1
 8003980:	397b839a 	.word	0x397b839a
 8003984:	00000000 	.word	0x00000000

08003988 <__kernel_cos>:
 8003988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398c:	ec57 6b10 	vmov	r6, r7, d0
 8003990:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 8003994:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 8003998:	ed2d 8b04 	vpush	{d8-d9}
 800399c:	ec5b ab11 	vmov	sl, fp, d1
 80039a0:	da71      	bge.n	8003a86 <__kernel_cos+0xfe>
 80039a2:	ee10 0a10 	vmov	r0, s0
 80039a6:	4639      	mov	r1, r7
 80039a8:	f7fd fa50 	bl	8000e4c <__aeabi_d2iz>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	f000 80f6 	beq.w	8003b9e <__kernel_cos+0x216>
 80039b2:	4632      	mov	r2, r6
 80039b4:	463b      	mov	r3, r7
 80039b6:	4630      	mov	r0, r6
 80039b8:	4639      	mov	r1, r7
 80039ba:	f7fc fdc1 	bl	8000540 <__aeabi_dmul>
 80039be:	a37c      	add	r3, pc, #496	; (adr r3, 8003bb0 <__kernel_cos+0x228>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	4604      	mov	r4, r0
 80039c6:	460d      	mov	r5, r1
 80039c8:	f7fc fdba 	bl	8000540 <__aeabi_dmul>
 80039cc:	a37a      	add	r3, pc, #488	; (adr r3, 8003bb8 <__kernel_cos+0x230>)
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f7fc fbff 	bl	80001d4 <__adddf3>
 80039d6:	4622      	mov	r2, r4
 80039d8:	462b      	mov	r3, r5
 80039da:	f7fc fdb1 	bl	8000540 <__aeabi_dmul>
 80039de:	a378      	add	r3, pc, #480	; (adr r3, 8003bc0 <__kernel_cos+0x238>)
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f7fc fbf4 	bl	80001d0 <__aeabi_dsub>
 80039e8:	4622      	mov	r2, r4
 80039ea:	462b      	mov	r3, r5
 80039ec:	f7fc fda8 	bl	8000540 <__aeabi_dmul>
 80039f0:	a375      	add	r3, pc, #468	; (adr r3, 8003bc8 <__kernel_cos+0x240>)
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	f7fc fbed 	bl	80001d4 <__adddf3>
 80039fa:	4622      	mov	r2, r4
 80039fc:	462b      	mov	r3, r5
 80039fe:	f7fc fd9f 	bl	8000540 <__aeabi_dmul>
 8003a02:	a373      	add	r3, pc, #460	; (adr r3, 8003bd0 <__kernel_cos+0x248>)
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f7fc fbe2 	bl	80001d0 <__aeabi_dsub>
 8003a0c:	4622      	mov	r2, r4
 8003a0e:	462b      	mov	r3, r5
 8003a10:	f7fc fd96 	bl	8000540 <__aeabi_dmul>
 8003a14:	a370      	add	r3, pc, #448	; (adr r3, 8003bd8 <__kernel_cos+0x250>)
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f7fc fbdb 	bl	80001d4 <__adddf3>
 8003a1e:	4622      	mov	r2, r4
 8003a20:	462b      	mov	r3, r5
 8003a22:	f7fc fd8d 	bl	8000540 <__aeabi_dmul>
 8003a26:	ec41 0b18 	vmov	d8, r0, r1
 8003a2a:	4b71      	ldr	r3, [pc, #452]	; (8003bf0 <__kernel_cos+0x268>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4620      	mov	r0, r4
 8003a30:	4629      	mov	r1, r5
 8003a32:	f7fc fd85 	bl	8000540 <__aeabi_dmul>
 8003a36:	ec53 2b18 	vmov	r2, r3, d8
 8003a3a:	4680      	mov	r8, r0
 8003a3c:	4689      	mov	r9, r1
 8003a3e:	4620      	mov	r0, r4
 8003a40:	4629      	mov	r1, r5
 8003a42:	f7fc fd7d 	bl	8000540 <__aeabi_dmul>
 8003a46:	4652      	mov	r2, sl
 8003a48:	465b      	mov	r3, fp
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	460d      	mov	r5, r1
 8003a4e:	4630      	mov	r0, r6
 8003a50:	4639      	mov	r1, r7
 8003a52:	f7fc fd75 	bl	8000540 <__aeabi_dmul>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	f7fc fbb7 	bl	80001d0 <__aeabi_dsub>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4640      	mov	r0, r8
 8003a68:	4649      	mov	r1, r9
 8003a6a:	f7fc fbb1 	bl	80001d0 <__aeabi_dsub>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	2000      	movs	r0, #0
 8003a74:	495f      	ldr	r1, [pc, #380]	; (8003bf4 <__kernel_cos+0x26c>)
 8003a76:	f7fc fbab 	bl	80001d0 <__aeabi_dsub>
 8003a7a:	ecbd 8b04 	vpop	{d8-d9}
 8003a7e:	ec41 0b10 	vmov	d0, r0, r1
 8003a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a86:	ee10 2a10 	vmov	r2, s0
 8003a8a:	ee10 0a10 	vmov	r0, s0
 8003a8e:	463b      	mov	r3, r7
 8003a90:	4639      	mov	r1, r7
 8003a92:	f7fc fd55 	bl	8000540 <__aeabi_dmul>
 8003a96:	a346      	add	r3, pc, #280	; (adr r3, 8003bb0 <__kernel_cos+0x228>)
 8003a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	460d      	mov	r5, r1
 8003aa0:	f7fc fd4e 	bl	8000540 <__aeabi_dmul>
 8003aa4:	a344      	add	r3, pc, #272	; (adr r3, 8003bb8 <__kernel_cos+0x230>)
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	f7fc fb93 	bl	80001d4 <__adddf3>
 8003aae:	4622      	mov	r2, r4
 8003ab0:	462b      	mov	r3, r5
 8003ab2:	f7fc fd45 	bl	8000540 <__aeabi_dmul>
 8003ab6:	a342      	add	r3, pc, #264	; (adr r3, 8003bc0 <__kernel_cos+0x238>)
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f7fc fb88 	bl	80001d0 <__aeabi_dsub>
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	462b      	mov	r3, r5
 8003ac4:	f7fc fd3c 	bl	8000540 <__aeabi_dmul>
 8003ac8:	a33f      	add	r3, pc, #252	; (adr r3, 8003bc8 <__kernel_cos+0x240>)
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	f7fc fb81 	bl	80001d4 <__adddf3>
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	462b      	mov	r3, r5
 8003ad6:	f7fc fd33 	bl	8000540 <__aeabi_dmul>
 8003ada:	a33d      	add	r3, pc, #244	; (adr r3, 8003bd0 <__kernel_cos+0x248>)
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	f7fc fb76 	bl	80001d0 <__aeabi_dsub>
 8003ae4:	4622      	mov	r2, r4
 8003ae6:	462b      	mov	r3, r5
 8003ae8:	f7fc fd2a 	bl	8000540 <__aeabi_dmul>
 8003aec:	a33a      	add	r3, pc, #232	; (adr r3, 8003bd8 <__kernel_cos+0x250>)
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	f7fc fb6f 	bl	80001d4 <__adddf3>
 8003af6:	462b      	mov	r3, r5
 8003af8:	4622      	mov	r2, r4
 8003afa:	f7fc fd21 	bl	8000540 <__aeabi_dmul>
 8003afe:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <__kernel_cos+0x270>)
 8003b00:	4599      	cmp	r9, r3
 8003b02:	ec41 0b18 	vmov	d8, r0, r1
 8003b06:	dd90      	ble.n	8003a2a <__kernel_cos+0xa2>
 8003b08:	4b3c      	ldr	r3, [pc, #240]	; (8003bfc <__kernel_cos+0x274>)
 8003b0a:	4599      	cmp	r9, r3
 8003b0c:	dc3c      	bgt.n	8003b88 <__kernel_cos+0x200>
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 8003b14:	4937      	ldr	r1, [pc, #220]	; (8003bf4 <__kernel_cos+0x26c>)
 8003b16:	2000      	movs	r0, #0
 8003b18:	4690      	mov	r8, r2
 8003b1a:	4699      	mov	r9, r3
 8003b1c:	f7fc fb58 	bl	80001d0 <__aeabi_dsub>
 8003b20:	ec41 0b19 	vmov	d9, r0, r1
 8003b24:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <__kernel_cos+0x268>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	4620      	mov	r0, r4
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	f7fc fd08 	bl	8000540 <__aeabi_dmul>
 8003b30:	4642      	mov	r2, r8
 8003b32:	464b      	mov	r3, r9
 8003b34:	f7fc fb4c 	bl	80001d0 <__aeabi_dsub>
 8003b38:	ec53 2b18 	vmov	r2, r3, d8
 8003b3c:	4680      	mov	r8, r0
 8003b3e:	4689      	mov	r9, r1
 8003b40:	4620      	mov	r0, r4
 8003b42:	4629      	mov	r1, r5
 8003b44:	f7fc fcfc 	bl	8000540 <__aeabi_dmul>
 8003b48:	4652      	mov	r2, sl
 8003b4a:	465b      	mov	r3, fp
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	460d      	mov	r5, r1
 8003b50:	4630      	mov	r0, r6
 8003b52:	4639      	mov	r1, r7
 8003b54:	f7fc fcf4 	bl	8000540 <__aeabi_dmul>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	4629      	mov	r1, r5
 8003b60:	f7fc fb36 	bl	80001d0 <__aeabi_dsub>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4640      	mov	r0, r8
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	f7fc fb30 	bl	80001d0 <__aeabi_dsub>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	ec51 0b19 	vmov	r0, r1, d9
 8003b78:	f7fc fb2a 	bl	80001d0 <__aeabi_dsub>
 8003b7c:	ecbd 8b04 	vpop	{d8-d9}
 8003b80:	ec41 0b10 	vmov	d0, r0, r1
 8003b84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b88:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8003be0 <__kernel_cos+0x258>
 8003b8c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003c00 <__kernel_cos+0x278>
 8003b90:	eeb0 9a47 	vmov.f32	s18, s14
 8003b94:	eef0 9a67 	vmov.f32	s19, s15
 8003b98:	f04f 0800 	mov.w	r8, #0
 8003b9c:	e7c2      	b.n	8003b24 <__kernel_cos+0x19c>
 8003b9e:	ecbd 8b04 	vpop	{d8-d9}
 8003ba2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8003be8 <__kernel_cos+0x260>
 8003ba6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003baa:	bf00      	nop
 8003bac:	f3af 8000 	nop.w
 8003bb0:	be8838d4 	.word	0xbe8838d4
 8003bb4:	bda8fae9 	.word	0xbda8fae9
 8003bb8:	bdb4b1c4 	.word	0xbdb4b1c4
 8003bbc:	3e21ee9e 	.word	0x3e21ee9e
 8003bc0:	809c52ad 	.word	0x809c52ad
 8003bc4:	3e927e4f 	.word	0x3e927e4f
 8003bc8:	19cb1590 	.word	0x19cb1590
 8003bcc:	3efa01a0 	.word	0x3efa01a0
 8003bd0:	16c15177 	.word	0x16c15177
 8003bd4:	3f56c16c 	.word	0x3f56c16c
 8003bd8:	5555554c 	.word	0x5555554c
 8003bdc:	3fa55555 	.word	0x3fa55555
 8003be0:	00000000 	.word	0x00000000
 8003be4:	3fe70000 	.word	0x3fe70000
 8003be8:	00000000 	.word	0x00000000
 8003bec:	3ff00000 	.word	0x3ff00000
 8003bf0:	3fe00000 	.word	0x3fe00000
 8003bf4:	3ff00000 	.word	0x3ff00000
 8003bf8:	3fd33332 	.word	0x3fd33332
 8003bfc:	3fe90000 	.word	0x3fe90000
 8003c00:	3fd20000 	.word	0x3fd20000
 8003c04:	00000000 	.word	0x00000000

08003c08 <__kernel_rem_pio2>:
 8003c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c0c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003c10:	461c      	mov	r4, r3
 8003c12:	9308      	str	r3, [sp, #32]
 8003c14:	910b      	str	r1, [sp, #44]	; 0x2c
 8003c16:	4bbb      	ldr	r3, [pc, #748]	; (8003f04 <__kernel_rem_pio2+0x2fc>)
 8003c18:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8003c1a:	9004      	str	r0, [sp, #16]
 8003c1c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003c20:	9105      	str	r1, [sp, #20]
 8003c22:	1e63      	subs	r3, r4, #1
 8003c24:	f112 0f14 	cmn.w	r2, #20
 8003c28:	9303      	str	r3, [sp, #12]
 8003c2a:	f2c0 834f 	blt.w	80042cc <__kernel_rem_pio2+0x6c4>
 8003c2e:	49b6      	ldr	r1, [pc, #728]	; (8003f08 <__kernel_rem_pio2+0x300>)
 8003c30:	1ed3      	subs	r3, r2, #3
 8003c32:	fb81 0103 	smull	r0, r1, r1, r3
 8003c36:	17db      	asrs	r3, r3, #31
 8003c38:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8003c3c:	9307      	str	r3, [sp, #28]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	18d3      	adds	r3, r2, r3
 8003c48:	9306      	str	r3, [sp, #24]
 8003c4a:	9a07      	ldr	r2, [sp, #28]
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	1ad4      	subs	r4, r2, r3
 8003c50:	9a05      	ldr	r2, [sp, #20]
 8003c52:	18d6      	adds	r6, r2, r3
 8003c54:	d41a      	bmi.n	8003c8c <__kernel_rem_pio2+0x84>
 8003c56:	3601      	adds	r6, #1
 8003c58:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 8003c5a:	4426      	add	r6, r4
 8003c5c:	ad20      	add	r5, sp, #128	; 0x80
 8003c5e:	f04f 0800 	mov.w	r8, #0
 8003c62:	f04f 0900 	mov.w	r9, #0
 8003c66:	e008      	b.n	8003c7a <__kernel_rem_pio2+0x72>
 8003c68:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8003c6c:	f7fc fbfe 	bl	800046c <__aeabi_i2d>
 8003c70:	3401      	adds	r4, #1
 8003c72:	42b4      	cmp	r4, r6
 8003c74:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003c78:	d008      	beq.n	8003c8c <__kernel_rem_pio2+0x84>
 8003c7a:	2c00      	cmp	r4, #0
 8003c7c:	daf4      	bge.n	8003c68 <__kernel_rem_pio2+0x60>
 8003c7e:	3401      	adds	r4, #1
 8003c80:	4640      	mov	r0, r8
 8003c82:	4649      	mov	r1, r9
 8003c84:	42b4      	cmp	r4, r6
 8003c86:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003c8a:	d1f6      	bne.n	8003c7a <__kernel_rem_pio2+0x72>
 8003c8c:	9b05      	ldr	r3, [sp, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f2c0 83ca 	blt.w	8004428 <__kernel_rem_pio2+0x820>
 8003c94:	9b08      	ldr	r3, [sp, #32]
 8003c96:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003c9a:	00da      	lsls	r2, r3, #3
 8003c9c:	9202      	str	r2, [sp, #8]
 8003c9e:	9a05      	ldr	r2, [sp, #20]
 8003ca0:	441a      	add	r2, r3
 8003ca2:	9201      	str	r2, [sp, #4]
 8003ca4:	9a04      	ldr	r2, [sp, #16]
 8003ca6:	a920      	add	r1, sp, #128	; 0x80
 8003ca8:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 8003cac:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003cb0:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 8003cb4:	9b03      	ldr	r3, [sp, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f2c0 81ac 	blt.w	8004014 <__kernel_rem_pio2+0x40c>
 8003cbc:	9e04      	ldr	r6, [sp, #16]
 8003cbe:	4657      	mov	r7, sl
 8003cc0:	2400      	movs	r4, #0
 8003cc2:	2500      	movs	r5, #0
 8003cc4:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 8003cc8:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8003ccc:	f7fc fc38 	bl	8000540 <__aeabi_dmul>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	f7fc fa7c 	bl	80001d4 <__adddf3>
 8003cdc:	4546      	cmp	r6, r8
 8003cde:	4604      	mov	r4, r0
 8003ce0:	460d      	mov	r5, r1
 8003ce2:	d1ef      	bne.n	8003cc4 <__kernel_rem_pio2+0xbc>
 8003ce4:	9b01      	ldr	r3, [sp, #4]
 8003ce6:	f109 0901 	add.w	r9, r9, #1
 8003cea:	4599      	cmp	r9, r3
 8003cec:	e8eb 4502 	strd	r4, r5, [fp], #8
 8003cf0:	f10a 0a08 	add.w	sl, sl, #8
 8003cf4:	d1de      	bne.n	8003cb4 <__kernel_rem_pio2+0xac>
 8003cf6:	9a04      	ldr	r2, [sp, #16]
 8003cf8:	9b02      	ldr	r3, [sp, #8]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	469b      	mov	fp, r3
 8003cfe:	9b05      	ldr	r3, [sp, #20]
 8003d00:	a90b      	add	r1, sp, #44	; 0x2c
 8003d02:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8003d06:	a90c      	add	r1, sp, #48	; 0x30
 8003d08:	920a      	str	r2, [sp, #40]	; 0x28
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003d10:	3b08      	subs	r3, #8
 8003d12:	9309      	str	r3, [sp, #36]	; 0x24
 8003d14:	9201      	str	r2, [sp, #4]
 8003d16:	9a01      	ldr	r2, [sp, #4]
 8003d18:	a998      	add	r1, sp, #608	; 0x260
 8003d1a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8003d1e:	2a00      	cmp	r2, #0
 8003d20:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8003d24:	dd29      	ble.n	8003d7a <__kernel_rem_pio2+0x172>
 8003d26:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8003d2a:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 8003d2e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003d32:	4b76      	ldr	r3, [pc, #472]	; (8003f0c <__kernel_rem_pio2+0x304>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	4620      	mov	r0, r4
 8003d38:	4629      	mov	r1, r5
 8003d3a:	f7fc fc01 	bl	8000540 <__aeabi_dmul>
 8003d3e:	f7fd f885 	bl	8000e4c <__aeabi_d2iz>
 8003d42:	f7fc fb93 	bl	800046c <__aeabi_i2d>
 8003d46:	4b72      	ldr	r3, [pc, #456]	; (8003f10 <__kernel_rem_pio2+0x308>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	4606      	mov	r6, r0
 8003d4c:	460f      	mov	r7, r1
 8003d4e:	f7fc fbf7 	bl	8000540 <__aeabi_dmul>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4620      	mov	r0, r4
 8003d58:	4629      	mov	r1, r5
 8003d5a:	f7fc fa39 	bl	80001d0 <__aeabi_dsub>
 8003d5e:	f7fd f875 	bl	8000e4c <__aeabi_d2iz>
 8003d62:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8003d66:	f849 0b04 	str.w	r0, [r9], #4
 8003d6a:	4639      	mov	r1, r7
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	f7fc fa31 	bl	80001d4 <__adddf3>
 8003d72:	45d0      	cmp	r8, sl
 8003d74:	4604      	mov	r4, r0
 8003d76:	460d      	mov	r5, r1
 8003d78:	d1db      	bne.n	8003d32 <__kernel_rem_pio2+0x12a>
 8003d7a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8003d7e:	ec45 4b10 	vmov	d0, r4, r5
 8003d82:	4648      	mov	r0, r9
 8003d84:	f000 fe50 	bl	8004a28 <scalbn>
 8003d88:	ec55 4b10 	vmov	r4, r5, d0
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003d92:	ee10 0a10 	vmov	r0, s0
 8003d96:	4629      	mov	r1, r5
 8003d98:	f7fc fbd2 	bl	8000540 <__aeabi_dmul>
 8003d9c:	ec41 0b10 	vmov	d0, r0, r1
 8003da0:	f000 fdb6 	bl	8004910 <floor>
 8003da4:	4b5b      	ldr	r3, [pc, #364]	; (8003f14 <__kernel_rem_pio2+0x30c>)
 8003da6:	ec51 0b10 	vmov	r0, r1, d0
 8003daa:	2200      	movs	r2, #0
 8003dac:	f7fc fbc8 	bl	8000540 <__aeabi_dmul>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4620      	mov	r0, r4
 8003db6:	4629      	mov	r1, r5
 8003db8:	f7fc fa0a 	bl	80001d0 <__aeabi_dsub>
 8003dbc:	460d      	mov	r5, r1
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	f7fd f844 	bl	8000e4c <__aeabi_d2iz>
 8003dc4:	4680      	mov	r8, r0
 8003dc6:	f7fc fb51 	bl	800046c <__aeabi_i2d>
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4629      	mov	r1, r5
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f7fc f9fd 	bl	80001d0 <__aeabi_dsub>
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	4606      	mov	r6, r0
 8003ddc:	460f      	mov	r7, r1
 8003dde:	f340 809b 	ble.w	8003f18 <__kernel_rem_pio2+0x310>
 8003de2:	9a01      	ldr	r2, [sp, #4]
 8003de4:	1e51      	subs	r1, r2, #1
 8003de6:	aa0c      	add	r2, sp, #48	; 0x30
 8003de8:	f1c9 0318 	rsb	r3, r9, #24
 8003dec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003df0:	fa42 f003 	asr.w	r0, r2, r3
 8003df4:	fa00 f303 	lsl.w	r3, r0, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f1c9 0517 	rsb	r5, r9, #23
 8003dfe:	aa0c      	add	r2, sp, #48	; 0x30
 8003e00:	fa43 f505 	asr.w	r5, r3, r5
 8003e04:	2d00      	cmp	r5, #0
 8003e06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003e0a:	4480      	add	r8, r0
 8003e0c:	f300 808e 	bgt.w	8003f2c <__kernel_rem_pio2+0x324>
 8003e10:	2200      	movs	r2, #0
 8003e12:	2300      	movs	r3, #0
 8003e14:	4630      	mov	r0, r6
 8003e16:	4639      	mov	r1, r7
 8003e18:	f7fc ffd0 	bl	8000dbc <__aeabi_dcmpeq>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	f000 825f 	beq.w	80042e0 <__kernel_rem_pio2+0x6d8>
 8003e22:	9b01      	ldr	r3, [sp, #4]
 8003e24:	9a05      	ldr	r2, [sp, #20]
 8003e26:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8003e2a:	4552      	cmp	r2, sl
 8003e2c:	dc10      	bgt.n	8003e50 <__kernel_rem_pio2+0x248>
 8003e2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e32:	aa0c      	add	r2, sp, #48	; 0x30
 8003e34:	3b01      	subs	r3, #1
 8003e36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f853 1904 	ldr.w	r1, [r3], #-4
 8003e42:	4283      	cmp	r3, r0
 8003e44:	ea42 0201 	orr.w	r2, r2, r1
 8003e48:	d1f9      	bne.n	8003e3e <__kernel_rem_pio2+0x236>
 8003e4a:	2a00      	cmp	r2, #0
 8003e4c:	f040 80e5 	bne.w	800401a <__kernel_rem_pio2+0x412>
 8003e50:	9b05      	ldr	r3, [sp, #20]
 8003e52:	aa0c      	add	r2, sp, #48	; 0x30
 8003e54:	3b01      	subs	r3, #1
 8003e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 80d5 	bne.w	800400a <__kernel_rem_pio2+0x402>
 8003e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e62:	2301      	movs	r3, #1
 8003e64:	f852 1904 	ldr.w	r1, [r2], #-4
 8003e68:	3301      	adds	r3, #1
 8003e6a:	2900      	cmp	r1, #0
 8003e6c:	d0fa      	beq.n	8003e64 <__kernel_rem_pio2+0x25c>
 8003e6e:	9a01      	ldr	r2, [sp, #4]
 8003e70:	18d3      	adds	r3, r2, r3
 8003e72:	9302      	str	r3, [sp, #8]
 8003e74:	1c53      	adds	r3, r2, #1
 8003e76:	4699      	mov	r9, r3
 8003e78:	9a01      	ldr	r2, [sp, #4]
 8003e7a:	9908      	ldr	r1, [sp, #32]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	4690      	mov	r8, r2
 8003e80:	9a07      	ldr	r2, [sp, #28]
 8003e82:	eb02 0a03 	add.w	sl, r2, r3
 8003e86:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 8003e8a:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 8003e8c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003e90:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003e94:	aa20      	add	r2, sp, #128	; 0x80
 8003e96:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 8003e9a:	aa70      	add	r2, sp, #448	; 0x1c0
 8003e9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8003ea6:	f7fc fae1 	bl	800046c <__aeabi_i2d>
 8003eaa:	460b      	mov	r3, r1
 8003eac:	9903      	ldr	r1, [sp, #12]
 8003eae:	4602      	mov	r2, r0
 8003eb0:	2900      	cmp	r1, #0
 8003eb2:	e9c8 2300 	strd	r2, r3, [r8]
 8003eb6:	4647      	mov	r7, r8
 8003eb8:	f108 0808 	add.w	r8, r8, #8
 8003ebc:	db1e      	blt.n	8003efc <__kernel_rem_pio2+0x2f4>
 8003ebe:	9e04      	ldr	r6, [sp, #16]
 8003ec0:	2400      	movs	r4, #0
 8003ec2:	2500      	movs	r5, #0
 8003ec4:	e001      	b.n	8003eca <__kernel_rem_pio2+0x2c2>
 8003ec6:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 8003eca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8003ece:	f7fc fb37 	bl	8000540 <__aeabi_dmul>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	4629      	mov	r1, r5
 8003eda:	f7fc f97b 	bl	80001d4 <__adddf3>
 8003ede:	455e      	cmp	r6, fp
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	460d      	mov	r5, r1
 8003ee4:	d1ef      	bne.n	8003ec6 <__kernel_rem_pio2+0x2be>
 8003ee6:	9b01      	ldr	r3, [sp, #4]
 8003ee8:	e8e3 4502 	strd	r4, r5, [r3], #8
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	9b02      	ldr	r3, [sp, #8]
 8003ef0:	f109 0901 	add.w	r9, r9, #1
 8003ef4:	4599      	cmp	r9, r3
 8003ef6:	ddd4      	ble.n	8003ea2 <__kernel_rem_pio2+0x29a>
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	e70c      	b.n	8003d16 <__kernel_rem_pio2+0x10e>
 8003efc:	2400      	movs	r4, #0
 8003efe:	2500      	movs	r5, #0
 8003f00:	e7f1      	b.n	8003ee6 <__kernel_rem_pio2+0x2de>
 8003f02:	bf00      	nop
 8003f04:	0800a758 	.word	0x0800a758
 8003f08:	2aaaaaab 	.word	0x2aaaaaab
 8003f0c:	3e700000 	.word	0x3e700000
 8003f10:	41700000 	.word	0x41700000
 8003f14:	40200000 	.word	0x40200000
 8003f18:	d16e      	bne.n	8003ff8 <__kernel_rem_pio2+0x3f0>
 8003f1a:	9b01      	ldr	r3, [sp, #4]
 8003f1c:	aa0c      	add	r2, sp, #48	; 0x30
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8003f24:	15ed      	asrs	r5, r5, #23
 8003f26:	2d00      	cmp	r5, #0
 8003f28:	f77f af72 	ble.w	8003e10 <__kernel_rem_pio2+0x208>
 8003f2c:	9b01      	ldr	r3, [sp, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f108 0801 	add.w	r8, r8, #1
 8003f34:	f340 81d2 	ble.w	80042dc <__kernel_rem_pio2+0x6d4>
 8003f38:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003f3a:	2c00      	cmp	r4, #0
 8003f3c:	d159      	bne.n	8003ff2 <__kernel_rem_pio2+0x3ea>
 8003f3e:	9b01      	ldr	r3, [sp, #4]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d028      	beq.n	8003f96 <__kernel_rem_pio2+0x38e>
 8003f44:	a90c      	add	r1, sp, #48	; 0x30
 8003f46:	2201      	movs	r2, #1
 8003f48:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8003f4c:	1c53      	adds	r3, r2, #1
 8003f4e:	b944      	cbnz	r4, 8003f62 <__kernel_rem_pio2+0x35a>
 8003f50:	9a01      	ldr	r2, [sp, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d01f      	beq.n	8003f96 <__kernel_rem_pio2+0x38e>
 8003f56:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	1c53      	adds	r3, r2, #1
 8003f5e:	2c00      	cmp	r4, #0
 8003f60:	d0f6      	beq.n	8003f50 <__kernel_rem_pio2+0x348>
 8003f62:	a90c      	add	r1, sp, #48	; 0x30
 8003f64:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 8003f68:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 8003f6c:	9901      	ldr	r1, [sp, #4]
 8003f6e:	4299      	cmp	r1, r3
 8003f70:	dd10      	ble.n	8003f94 <__kernel_rem_pio2+0x38c>
 8003f72:	aa0c      	add	r2, sp, #48	; 0x30
 8003f74:	a80c      	add	r0, sp, #48	; 0x30
 8003f76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f7a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003f7e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003f82:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003f86:	e000      	b.n	8003f8a <__kernel_rem_pio2+0x382>
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	1a8a      	subs	r2, r1, r2
 8003f8c:	f843 2b04 	str.w	r2, [r3], #4
 8003f90:	4283      	cmp	r3, r0
 8003f92:	d1f9      	bne.n	8003f88 <__kernel_rem_pio2+0x380>
 8003f94:	2401      	movs	r4, #1
 8003f96:	9b06      	ldr	r3, [sp, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	dd0e      	ble.n	8003fba <__kernel_rem_pio2+0x3b2>
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	f000 8168 	beq.w	8004272 <__kernel_rem_pio2+0x66a>
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d109      	bne.n	8003fba <__kernel_rem_pio2+0x3b2>
 8003fa6:	9b01      	ldr	r3, [sp, #4]
 8003fa8:	1e5a      	subs	r2, r3, #1
 8003faa:	ab0c      	add	r3, sp, #48	; 0x30
 8003fac:	a90c      	add	r1, sp, #48	; 0x30
 8003fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003fb6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003fba:	2d02      	cmp	r5, #2
 8003fbc:	f47f af28 	bne.w	8003e10 <__kernel_rem_pio2+0x208>
 8003fc0:	4632      	mov	r2, r6
 8003fc2:	463b      	mov	r3, r7
 8003fc4:	49b4      	ldr	r1, [pc, #720]	; (8004298 <__kernel_rem_pio2+0x690>)
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	f7fc f902 	bl	80001d0 <__aeabi_dsub>
 8003fcc:	4606      	mov	r6, r0
 8003fce:	460f      	mov	r7, r1
 8003fd0:	2c00      	cmp	r4, #0
 8003fd2:	f43f af1d 	beq.w	8003e10 <__kernel_rem_pio2+0x208>
 8003fd6:	9806      	ldr	r0, [sp, #24]
 8003fd8:	ed9f 0bab 	vldr	d0, [pc, #684]	; 8004288 <__kernel_rem_pio2+0x680>
 8003fdc:	f000 fd24 	bl	8004a28 <scalbn>
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	4639      	mov	r1, r7
 8003fe4:	ec53 2b10 	vmov	r2, r3, d0
 8003fe8:	f7fc f8f2 	bl	80001d0 <__aeabi_dsub>
 8003fec:	4606      	mov	r6, r0
 8003fee:	460f      	mov	r7, r1
 8003ff0:	e70e      	b.n	8003e10 <__kernel_rem_pio2+0x208>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	e7b4      	b.n	8003f62 <__kernel_rem_pio2+0x35a>
 8003ff8:	4ba8      	ldr	r3, [pc, #672]	; (800429c <__kernel_rem_pio2+0x694>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f7fc fefc 	bl	8000df8 <__aeabi_dcmpge>
 8004000:	2800      	cmp	r0, #0
 8004002:	f040 8151 	bne.w	80042a8 <__kernel_rem_pio2+0x6a0>
 8004006:	4605      	mov	r5, r0
 8004008:	e702      	b.n	8003e10 <__kernel_rem_pio2+0x208>
 800400a:	9b01      	ldr	r3, [sp, #4]
 800400c:	3301      	adds	r3, #1
 800400e:	4699      	mov	r9, r3
 8004010:	9302      	str	r3, [sp, #8]
 8004012:	e731      	b.n	8003e78 <__kernel_rem_pio2+0x270>
 8004014:	2400      	movs	r4, #0
 8004016:	2500      	movs	r5, #0
 8004018:	e664      	b.n	8003ce4 <__kernel_rem_pio2+0xdc>
 800401a:	9b06      	ldr	r3, [sp, #24]
 800401c:	9504      	str	r5, [sp, #16]
 800401e:	f1a3 0218 	sub.w	r2, r3, #24
 8004022:	ab0c      	add	r3, sp, #48	; 0x30
 8004024:	f8cd 801c 	str.w	r8, [sp, #28]
 8004028:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800402c:	9206      	str	r2, [sp, #24]
 800402e:	b973      	cbnz	r3, 800404e <__kernel_rem_pio2+0x446>
 8004030:	9b01      	ldr	r3, [sp, #4]
 8004032:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004036:	3b02      	subs	r3, #2
 8004038:	a90c      	add	r1, sp, #48	; 0x30
 800403a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800403e:	f853 1904 	ldr.w	r1, [r3], #-4
 8004042:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004046:	3a18      	subs	r2, #24
 8004048:	2900      	cmp	r1, #0
 800404a:	d0f8      	beq.n	800403e <__kernel_rem_pio2+0x436>
 800404c:	9206      	str	r2, [sp, #24]
 800404e:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 8004288 <__kernel_rem_pio2+0x680>
 8004052:	9806      	ldr	r0, [sp, #24]
 8004054:	f000 fce8 	bl	8004a28 <scalbn>
 8004058:	f1ba 0f00 	cmp.w	sl, #0
 800405c:	ec55 4b10 	vmov	r4, r5, d0
 8004060:	f2c0 81d8 	blt.w	8004414 <__kernel_rem_pio2+0x80c>
 8004064:	ab70      	add	r3, sp, #448	; 0x1c0
 8004066:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 800406a:	aa0c      	add	r2, sp, #48	; 0x30
 800406c:	f10a 0301 	add.w	r3, sl, #1
 8004070:	9308      	str	r3, [sp, #32]
 8004072:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8004076:	f8df 9228 	ldr.w	r9, [pc, #552]	; 80042a0 <__kernel_rem_pio2+0x698>
 800407a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800407e:	9306      	str	r3, [sp, #24]
 8004080:	f10b 0708 	add.w	r7, fp, #8
 8004084:	f04f 0800 	mov.w	r8, #0
 8004088:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 800408c:	f7fc f9ee 	bl	800046c <__aeabi_i2d>
 8004090:	4622      	mov	r2, r4
 8004092:	462b      	mov	r3, r5
 8004094:	f7fc fa54 	bl	8000540 <__aeabi_dmul>
 8004098:	464b      	mov	r3, r9
 800409a:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800409e:	4642      	mov	r2, r8
 80040a0:	4620      	mov	r0, r4
 80040a2:	4629      	mov	r1, r5
 80040a4:	f7fc fa4c 	bl	8000540 <__aeabi_dmul>
 80040a8:	ab0c      	add	r3, sp, #48	; 0x30
 80040aa:	429e      	cmp	r6, r3
 80040ac:	4604      	mov	r4, r0
 80040ae:	460d      	mov	r5, r1
 80040b0:	d1ea      	bne.n	8004088 <__kernel_rem_pio2+0x480>
 80040b2:	ab48      	add	r3, sp, #288	; 0x120
 80040b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80040b8:	f8cd b004 	str.w	fp, [sp, #4]
 80040bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80040c0:	46d3      	mov	fp, sl
 80040c2:	f8dd a014 	ldr.w	sl, [sp, #20]
 80040c6:	f04f 0900 	mov.w	r9, #0
 80040ca:	f1ba 0f00 	cmp.w	sl, #0
 80040ce:	f2c0 8102 	blt.w	80042d6 <__kernel_rem_pio2+0x6ce>
 80040d2:	a36f      	add	r3, pc, #444	; (adr r3, 8004290 <__kernel_rem_pio2+0x688>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80042a4 <__kernel_rem_pio2+0x69c>
 80040dc:	9f01      	ldr	r7, [sp, #4]
 80040de:	2600      	movs	r6, #0
 80040e0:	2400      	movs	r4, #0
 80040e2:	2500      	movs	r5, #0
 80040e4:	e003      	b.n	80040ee <__kernel_rem_pio2+0x4e6>
 80040e6:	454e      	cmp	r6, r9
 80040e8:	dc10      	bgt.n	800410c <__kernel_rem_pio2+0x504>
 80040ea:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80040ee:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80040f2:	f7fc fa25 	bl	8000540 <__aeabi_dmul>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4620      	mov	r0, r4
 80040fc:	4629      	mov	r1, r5
 80040fe:	f7fc f869 	bl	80001d4 <__adddf3>
 8004102:	3601      	adds	r6, #1
 8004104:	45b2      	cmp	sl, r6
 8004106:	4604      	mov	r4, r0
 8004108:	460d      	mov	r5, r1
 800410a:	daec      	bge.n	80040e6 <__kernel_rem_pio2+0x4de>
 800410c:	9b02      	ldr	r3, [sp, #8]
 800410e:	e8e3 4502 	strd	r4, r5, [r3], #8
 8004112:	9302      	str	r3, [sp, #8]
 8004114:	9b01      	ldr	r3, [sp, #4]
 8004116:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800411a:	3b08      	subs	r3, #8
 800411c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8004120:	f109 0901 	add.w	r9, r9, #1
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	d1d0      	bne.n	80040ca <__kernel_rem_pio2+0x4c2>
 8004128:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800412a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800412e:	2b02      	cmp	r3, #2
 8004130:	dc1e      	bgt.n	8004170 <__kernel_rem_pio2+0x568>
 8004132:	2b00      	cmp	r3, #0
 8004134:	f300 810a 	bgt.w	800434c <__kernel_rem_pio2+0x744>
 8004138:	d113      	bne.n	8004162 <__kernel_rem_pio2+0x55a>
 800413a:	9c06      	ldr	r4, [sp, #24]
 800413c:	9d03      	ldr	r5, [sp, #12]
 800413e:	3408      	adds	r4, #8
 8004140:	442c      	add	r4, r5
 8004142:	2000      	movs	r0, #0
 8004144:	2100      	movs	r1, #0
 8004146:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800414a:	f7fc f843 	bl	80001d4 <__adddf3>
 800414e:	42ac      	cmp	r4, r5
 8004150:	d1f9      	bne.n	8004146 <__kernel_rem_pio2+0x53e>
 8004152:	9b04      	ldr	r3, [sp, #16]
 8004154:	b113      	cbz	r3, 800415c <__kernel_rem_pio2+0x554>
 8004156:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800415a:	4619      	mov	r1, r3
 800415c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800415e:	e9c3 0100 	strd	r0, r1, [r3]
 8004162:	9b07      	ldr	r3, [sp, #28]
 8004164:	f003 0007 	and.w	r0, r3, #7
 8004168:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800416c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004170:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004172:	2b03      	cmp	r3, #3
 8004174:	d1f5      	bne.n	8004162 <__kernel_rem_pio2+0x55a>
 8004176:	f1ba 0f00 	cmp.w	sl, #0
 800417a:	f000 8167 	beq.w	800444c <__kernel_rem_pio2+0x844>
 800417e:	9a03      	ldr	r2, [sp, #12]
 8004180:	9b06      	ldr	r3, [sp, #24]
 8004182:	18d3      	adds	r3, r2, r3
 8004184:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004188:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 800418c:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 8004190:	4620      	mov	r0, r4
 8004192:	4629      	mov	r1, r5
 8004194:	4632      	mov	r2, r6
 8004196:	463b      	mov	r3, r7
 8004198:	f7fc f81c 	bl	80001d4 <__adddf3>
 800419c:	46a0      	mov	r8, r4
 800419e:	46a9      	mov	r9, r5
 80041a0:	4604      	mov	r4, r0
 80041a2:	460d      	mov	r5, r1
 80041a4:	4622      	mov	r2, r4
 80041a6:	462b      	mov	r3, r5
 80041a8:	4630      	mov	r0, r6
 80041aa:	4639      	mov	r1, r7
 80041ac:	f7fc f810 	bl	80001d0 <__aeabi_dsub>
 80041b0:	464b      	mov	r3, r9
 80041b2:	4642      	mov	r2, r8
 80041b4:	f7fc f80e 	bl	80001d4 <__adddf3>
 80041b8:	9b03      	ldr	r3, [sp, #12]
 80041ba:	455b      	cmp	r3, fp
 80041bc:	e9cb 0102 	strd	r0, r1, [fp, #8]
 80041c0:	e9cb 4500 	strd	r4, r5, [fp]
 80041c4:	d1e2      	bne.n	800418c <__kernel_rem_pio2+0x584>
 80041c6:	f1ba 0f01 	cmp.w	sl, #1
 80041ca:	f340 813f 	ble.w	800444c <__kernel_rem_pio2+0x844>
 80041ce:	9a03      	ldr	r2, [sp, #12]
 80041d0:	9b06      	ldr	r3, [sp, #24]
 80041d2:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
 80041d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80041da:	4413      	add	r3, r2
 80041dc:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 80041e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80041e4:	f101 0a08 	add.w	sl, r1, #8
 80041e8:	9101      	str	r1, [sp, #4]
 80041ea:	4492      	add	sl, r2
 80041ec:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 80041f0:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 80041f4:	4620      	mov	r0, r4
 80041f6:	4629      	mov	r1, r5
 80041f8:	4632      	mov	r2, r6
 80041fa:	463b      	mov	r3, r7
 80041fc:	f7fb ffea 	bl	80001d4 <__adddf3>
 8004200:	46a0      	mov	r8, r4
 8004202:	46a9      	mov	r9, r5
 8004204:	4604      	mov	r4, r0
 8004206:	460d      	mov	r5, r1
 8004208:	4622      	mov	r2, r4
 800420a:	462b      	mov	r3, r5
 800420c:	4630      	mov	r0, r6
 800420e:	4639      	mov	r1, r7
 8004210:	f7fb ffde 	bl	80001d0 <__aeabi_dsub>
 8004214:	4642      	mov	r2, r8
 8004216:	464b      	mov	r3, r9
 8004218:	f7fb ffdc 	bl	80001d4 <__adddf3>
 800421c:	45d3      	cmp	fp, sl
 800421e:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004222:	e9ca 4500 	strd	r4, r5, [sl]
 8004226:	d1e3      	bne.n	80041f0 <__kernel_rem_pio2+0x5e8>
 8004228:	9c01      	ldr	r4, [sp, #4]
 800422a:	9b03      	ldr	r3, [sp, #12]
 800422c:	3410      	adds	r4, #16
 800422e:	441c      	add	r4, r3
 8004230:	f103 0510 	add.w	r5, r3, #16
 8004234:	2000      	movs	r0, #0
 8004236:	2100      	movs	r1, #0
 8004238:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800423c:	f7fb ffca 	bl	80001d4 <__adddf3>
 8004240:	42a5      	cmp	r5, r4
 8004242:	d1f9      	bne.n	8004238 <__kernel_rem_pio2+0x630>
 8004244:	9b03      	ldr	r3, [sp, #12]
 8004246:	e9d3 6700 	ldrd	r6, r7, [r3]
 800424a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800424e:	9b04      	ldr	r3, [sp, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f040 80b9 	bne.w	80043c8 <__kernel_rem_pio2+0x7c0>
 8004256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004258:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800425c:	e9c3 6700 	strd	r6, r7, [r3]
 8004260:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8004264:	9b07      	ldr	r3, [sp, #28]
 8004266:	f003 0007 	and.w	r0, r3, #7
 800426a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004272:	9b01      	ldr	r3, [sp, #4]
 8004274:	1e5a      	subs	r2, r3, #1
 8004276:	ab0c      	add	r3, sp, #48	; 0x30
 8004278:	a90c      	add	r1, sp, #48	; 0x30
 800427a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800427e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004282:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004286:	e698      	b.n	8003fba <__kernel_rem_pio2+0x3b2>
 8004288:	00000000 	.word	0x00000000
 800428c:	3ff00000 	.word	0x3ff00000
 8004290:	40000000 	.word	0x40000000
 8004294:	3ff921fb 	.word	0x3ff921fb
 8004298:	3ff00000 	.word	0x3ff00000
 800429c:	3fe00000 	.word	0x3fe00000
 80042a0:	3e700000 	.word	0x3e700000
 80042a4:	0800a1f0 	.word	0x0800a1f0
 80042a8:	9b01      	ldr	r3, [sp, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f108 0801 	add.w	r8, r8, #1
 80042b0:	bfc8      	it	gt
 80042b2:	2502      	movgt	r5, #2
 80042b4:	f73f ae40 	bgt.w	8003f38 <__kernel_rem_pio2+0x330>
 80042b8:	4632      	mov	r2, r6
 80042ba:	463b      	mov	r3, r7
 80042bc:	4965      	ldr	r1, [pc, #404]	; (8004454 <__kernel_rem_pio2+0x84c>)
 80042be:	2000      	movs	r0, #0
 80042c0:	f7fb ff86 	bl	80001d0 <__aeabi_dsub>
 80042c4:	2502      	movs	r5, #2
 80042c6:	4606      	mov	r6, r0
 80042c8:	460f      	mov	r7, r1
 80042ca:	e5a1      	b.n	8003e10 <__kernel_rem_pio2+0x208>
 80042cc:	2100      	movs	r1, #0
 80042ce:	f06f 0317 	mvn.w	r3, #23
 80042d2:	9107      	str	r1, [sp, #28]
 80042d4:	e4b7      	b.n	8003c46 <__kernel_rem_pio2+0x3e>
 80042d6:	2400      	movs	r4, #0
 80042d8:	2500      	movs	r5, #0
 80042da:	e717      	b.n	800410c <__kernel_rem_pio2+0x504>
 80042dc:	2400      	movs	r4, #0
 80042de:	e65a      	b.n	8003f96 <__kernel_rem_pio2+0x38e>
 80042e0:	ec47 6b10 	vmov	d0, r6, r7
 80042e4:	9e06      	ldr	r6, [sp, #24]
 80042e6:	9504      	str	r5, [sp, #16]
 80042e8:	4270      	negs	r0, r6
 80042ea:	f8cd 801c 	str.w	r8, [sp, #28]
 80042ee:	f000 fb9b 	bl	8004a28 <scalbn>
 80042f2:	ec55 4b10 	vmov	r4, r5, d0
 80042f6:	4b58      	ldr	r3, [pc, #352]	; (8004458 <__kernel_rem_pio2+0x850>)
 80042f8:	ee10 0a10 	vmov	r0, s0
 80042fc:	2200      	movs	r2, #0
 80042fe:	4629      	mov	r1, r5
 8004300:	f7fc fd7a 	bl	8000df8 <__aeabi_dcmpge>
 8004304:	2800      	cmp	r0, #0
 8004306:	d055      	beq.n	80043b4 <__kernel_rem_pio2+0x7ac>
 8004308:	4b54      	ldr	r3, [pc, #336]	; (800445c <__kernel_rem_pio2+0x854>)
 800430a:	9f01      	ldr	r7, [sp, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	3618      	adds	r6, #24
 8004310:	4620      	mov	r0, r4
 8004312:	4629      	mov	r1, r5
 8004314:	9606      	str	r6, [sp, #24]
 8004316:	f7fc f913 	bl	8000540 <__aeabi_dmul>
 800431a:	f7fc fd97 	bl	8000e4c <__aeabi_d2iz>
 800431e:	4606      	mov	r6, r0
 8004320:	f7fc f8a4 	bl	800046c <__aeabi_i2d>
 8004324:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <__kernel_rem_pio2+0x850>)
 8004326:	2200      	movs	r2, #0
 8004328:	f7fc f90a 	bl	8000540 <__aeabi_dmul>
 800432c:	460b      	mov	r3, r1
 800432e:	4602      	mov	r2, r0
 8004330:	4629      	mov	r1, r5
 8004332:	4620      	mov	r0, r4
 8004334:	f7fb ff4c 	bl	80001d0 <__aeabi_dsub>
 8004338:	f7fc fd88 	bl	8000e4c <__aeabi_d2iz>
 800433c:	f107 0a01 	add.w	sl, r7, #1
 8004340:	ab0c      	add	r3, sp, #48	; 0x30
 8004342:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004346:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 800434a:	e680      	b.n	800404e <__kernel_rem_pio2+0x446>
 800434c:	9d03      	ldr	r5, [sp, #12]
 800434e:	9a08      	ldr	r2, [sp, #32]
 8004350:	2000      	movs	r0, #0
 8004352:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 8004356:	2100      	movs	r1, #0
 8004358:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800435c:	f7fb ff3a 	bl	80001d4 <__adddf3>
 8004360:	42a5      	cmp	r5, r4
 8004362:	d1f9      	bne.n	8004358 <__kernel_rem_pio2+0x750>
 8004364:	9b04      	ldr	r3, [sp, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d144      	bne.n	80043f4 <__kernel_rem_pio2+0x7ec>
 800436a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800436c:	e9c3 0100 	strd	r0, r1, [r3]
 8004370:	460b      	mov	r3, r1
 8004372:	9903      	ldr	r1, [sp, #12]
 8004374:	4602      	mov	r2, r0
 8004376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800437a:	f7fb ff29 	bl	80001d0 <__aeabi_dsub>
 800437e:	f1ba 0f00 	cmp.w	sl, #0
 8004382:	dd0d      	ble.n	80043a0 <__kernel_rem_pio2+0x798>
 8004384:	ad4a      	add	r5, sp, #296	; 0x128
 8004386:	2401      	movs	r4, #1
 8004388:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800438c:	3401      	adds	r4, #1
 800438e:	f7fb ff21 	bl	80001d4 <__adddf3>
 8004392:	45a2      	cmp	sl, r4
 8004394:	daf8      	bge.n	8004388 <__kernel_rem_pio2+0x780>
 8004396:	9b04      	ldr	r3, [sp, #16]
 8004398:	b113      	cbz	r3, 80043a0 <__kernel_rem_pio2+0x798>
 800439a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800439e:	4619      	mov	r1, r3
 80043a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80043a6:	9b07      	ldr	r3, [sp, #28]
 80043a8:	f003 0007 	and.w	r0, r3, #7
 80043ac:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80043b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b4:	4620      	mov	r0, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	f7fc fd48 	bl	8000e4c <__aeabi_d2iz>
 80043bc:	9b01      	ldr	r3, [sp, #4]
 80043be:	aa0c      	add	r2, sp, #48	; 0x30
 80043c0:	469a      	mov	sl, r3
 80043c2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80043c6:	e642      	b.n	800404e <__kernel_rem_pio2+0x446>
 80043c8:	4632      	mov	r2, r6
 80043ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80043cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80043d0:	e9c6 2300 	strd	r2, r3, [r6]
 80043d4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80043d8:	60f3      	str	r3, [r6, #12]
 80043da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043de:	6173      	str	r3, [r6, #20]
 80043e0:	9b07      	ldr	r3, [sp, #28]
 80043e2:	6130      	str	r0, [r6, #16]
 80043e4:	4622      	mov	r2, r4
 80043e6:	f003 0007 	and.w	r0, r3, #7
 80043ea:	60b2      	str	r2, [r6, #8]
 80043ec:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80043f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043fa:	6053      	str	r3, [r2, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	9903      	ldr	r1, [sp, #12]
 8004400:	6010      	str	r0, [r2, #0]
 8004402:	4602      	mov	r2, r0
 8004404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004408:	f7fb fee2 	bl	80001d0 <__aeabi_dsub>
 800440c:	f1ba 0f00 	cmp.w	sl, #0
 8004410:	dcb8      	bgt.n	8004384 <__kernel_rem_pio2+0x77c>
 8004412:	e7c2      	b.n	800439a <__kernel_rem_pio2+0x792>
 8004414:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004416:	2b02      	cmp	r3, #2
 8004418:	dc0a      	bgt.n	8004430 <__kernel_rem_pio2+0x828>
 800441a:	2b00      	cmp	r3, #0
 800441c:	dc11      	bgt.n	8004442 <__kernel_rem_pio2+0x83a>
 800441e:	f47f aea0 	bne.w	8004162 <__kernel_rem_pio2+0x55a>
 8004422:	2000      	movs	r0, #0
 8004424:	2100      	movs	r1, #0
 8004426:	e694      	b.n	8004152 <__kernel_rem_pio2+0x54a>
 8004428:	9b08      	ldr	r3, [sp, #32]
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	9302      	str	r3, [sp, #8]
 800442e:	e462      	b.n	8003cf6 <__kernel_rem_pio2+0xee>
 8004430:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004432:	2b03      	cmp	r3, #3
 8004434:	f47f ae95 	bne.w	8004162 <__kernel_rem_pio2+0x55a>
 8004438:	ab48      	add	r3, sp, #288	; 0x120
 800443a:	2000      	movs	r0, #0
 800443c:	2100      	movs	r1, #0
 800443e:	9303      	str	r3, [sp, #12]
 8004440:	e700      	b.n	8004244 <__kernel_rem_pio2+0x63c>
 8004442:	ab48      	add	r3, sp, #288	; 0x120
 8004444:	2000      	movs	r0, #0
 8004446:	2100      	movs	r1, #0
 8004448:	9303      	str	r3, [sp, #12]
 800444a:	e78b      	b.n	8004364 <__kernel_rem_pio2+0x75c>
 800444c:	2000      	movs	r0, #0
 800444e:	2100      	movs	r1, #0
 8004450:	e6f8      	b.n	8004244 <__kernel_rem_pio2+0x63c>
 8004452:	bf00      	nop
 8004454:	3ff00000 	.word	0x3ff00000
 8004458:	41700000 	.word	0x41700000
 800445c:	3e700000 	.word	0x3e700000

08004460 <__kernel_sin>:
 8004460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004464:	ec55 4b10 	vmov	r4, r5, d0
 8004468:	b085      	sub	sp, #20
 800446a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800446e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004472:	ed8d 1b00 	vstr	d1, [sp]
 8004476:	9003      	str	r0, [sp, #12]
 8004478:	da07      	bge.n	800448a <__kernel_sin+0x2a>
 800447a:	ee10 0a10 	vmov	r0, s0
 800447e:	4629      	mov	r1, r5
 8004480:	f7fc fce4 	bl	8000e4c <__aeabi_d2iz>
 8004484:	2800      	cmp	r0, #0
 8004486:	f000 8089 	beq.w	800459c <__kernel_sin+0x13c>
 800448a:	4622      	mov	r2, r4
 800448c:	462b      	mov	r3, r5
 800448e:	4620      	mov	r0, r4
 8004490:	4629      	mov	r1, r5
 8004492:	f7fc f855 	bl	8000540 <__aeabi_dmul>
 8004496:	4606      	mov	r6, r0
 8004498:	460f      	mov	r7, r1
 800449a:	4632      	mov	r2, r6
 800449c:	463b      	mov	r3, r7
 800449e:	4620      	mov	r0, r4
 80044a0:	4629      	mov	r1, r5
 80044a2:	f7fc f84d 	bl	8000540 <__aeabi_dmul>
 80044a6:	a343      	add	r3, pc, #268	; (adr r3, 80045b4 <__kernel_sin+0x154>)
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	4682      	mov	sl, r0
 80044ae:	468b      	mov	fp, r1
 80044b0:	4630      	mov	r0, r6
 80044b2:	4639      	mov	r1, r7
 80044b4:	f7fc f844 	bl	8000540 <__aeabi_dmul>
 80044b8:	a340      	add	r3, pc, #256	; (adr r3, 80045bc <__kernel_sin+0x15c>)
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f7fb fe87 	bl	80001d0 <__aeabi_dsub>
 80044c2:	4632      	mov	r2, r6
 80044c4:	463b      	mov	r3, r7
 80044c6:	f7fc f83b 	bl	8000540 <__aeabi_dmul>
 80044ca:	a33e      	add	r3, pc, #248	; (adr r3, 80045c4 <__kernel_sin+0x164>)
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f7fb fe80 	bl	80001d4 <__adddf3>
 80044d4:	4632      	mov	r2, r6
 80044d6:	463b      	mov	r3, r7
 80044d8:	f7fc f832 	bl	8000540 <__aeabi_dmul>
 80044dc:	a33b      	add	r3, pc, #236	; (adr r3, 80045cc <__kernel_sin+0x16c>)
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f7fb fe75 	bl	80001d0 <__aeabi_dsub>
 80044e6:	4632      	mov	r2, r6
 80044e8:	463b      	mov	r3, r7
 80044ea:	f7fc f829 	bl	8000540 <__aeabi_dmul>
 80044ee:	a339      	add	r3, pc, #228	; (adr r3, 80045d4 <__kernel_sin+0x174>)
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f7fb fe6e 	bl	80001d4 <__adddf3>
 80044f8:	9b03      	ldr	r3, [sp, #12]
 80044fa:	4680      	mov	r8, r0
 80044fc:	4689      	mov	r9, r1
 80044fe:	b3ab      	cbz	r3, 800456c <__kernel_sin+0x10c>
 8004500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004504:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <__kernel_sin+0x150>)
 8004506:	2200      	movs	r2, #0
 8004508:	f7fc f81a 	bl	8000540 <__aeabi_dmul>
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	4680      	mov	r8, r0
 8004512:	4689      	mov	r9, r1
 8004514:	4650      	mov	r0, sl
 8004516:	4659      	mov	r1, fp
 8004518:	f7fc f812 	bl	8000540 <__aeabi_dmul>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4640      	mov	r0, r8
 8004522:	4649      	mov	r1, r9
 8004524:	f7fb fe54 	bl	80001d0 <__aeabi_dsub>
 8004528:	4632      	mov	r2, r6
 800452a:	463b      	mov	r3, r7
 800452c:	f7fc f808 	bl	8000540 <__aeabi_dmul>
 8004530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004534:	f7fb fe4c 	bl	80001d0 <__aeabi_dsub>
 8004538:	a31b      	add	r3, pc, #108	; (adr r3, 80045a8 <__kernel_sin+0x148>)
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	4606      	mov	r6, r0
 8004540:	460f      	mov	r7, r1
 8004542:	4650      	mov	r0, sl
 8004544:	4659      	mov	r1, fp
 8004546:	f7fb fffb 	bl	8000540 <__aeabi_dmul>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4630      	mov	r0, r6
 8004550:	4639      	mov	r1, r7
 8004552:	f7fb fe3f 	bl	80001d4 <__adddf3>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4620      	mov	r0, r4
 800455c:	4629      	mov	r1, r5
 800455e:	f7fb fe37 	bl	80001d0 <__aeabi_dsub>
 8004562:	ec41 0b10 	vmov	d0, r0, r1
 8004566:	b005      	add	sp, #20
 8004568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4630      	mov	r0, r6
 8004572:	4639      	mov	r1, r7
 8004574:	f7fb ffe4 	bl	8000540 <__aeabi_dmul>
 8004578:	a30b      	add	r3, pc, #44	; (adr r3, 80045a8 <__kernel_sin+0x148>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f7fb fe27 	bl	80001d0 <__aeabi_dsub>
 8004582:	4652      	mov	r2, sl
 8004584:	465b      	mov	r3, fp
 8004586:	f7fb ffdb 	bl	8000540 <__aeabi_dmul>
 800458a:	4622      	mov	r2, r4
 800458c:	462b      	mov	r3, r5
 800458e:	f7fb fe21 	bl	80001d4 <__adddf3>
 8004592:	ec41 0b10 	vmov	d0, r0, r1
 8004596:	b005      	add	sp, #20
 8004598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800459c:	ec45 4b10 	vmov	d0, r4, r5
 80045a0:	b005      	add	sp, #20
 80045a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a6:	bf00      	nop
 80045a8:	55555549 	.word	0x55555549
 80045ac:	3fc55555 	.word	0x3fc55555
 80045b0:	3fe00000 	.word	0x3fe00000
 80045b4:	5acfd57c 	.word	0x5acfd57c
 80045b8:	3de5d93a 	.word	0x3de5d93a
 80045bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80045c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80045c4:	57b1fe7d 	.word	0x57b1fe7d
 80045c8:	3ec71de3 	.word	0x3ec71de3
 80045cc:	19c161d5 	.word	0x19c161d5
 80045d0:	3f2a01a0 	.word	0x3f2a01a0
 80045d4:	1110f8a6 	.word	0x1110f8a6
 80045d8:	3f811111 	.word	0x3f811111
 80045dc:	00000000 	.word	0x00000000

080045e0 <atan>:
 80045e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e4:	ec55 4b10 	vmov	r4, r5, d0
 80045e8:	4bbf      	ldr	r3, [pc, #764]	; (80048e8 <atan+0x308>)
 80045ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80045ee:	429e      	cmp	r6, r3
 80045f0:	46aa      	mov	sl, r5
 80045f2:	dd17      	ble.n	8004624 <atan+0x44>
 80045f4:	4bbd      	ldr	r3, [pc, #756]	; (80048ec <atan+0x30c>)
 80045f6:	429e      	cmp	r6, r3
 80045f8:	dc0a      	bgt.n	8004610 <atan+0x30>
 80045fa:	d007      	beq.n	800460c <atan+0x2c>
 80045fc:	f1ba 0f00 	cmp.w	sl, #0
 8004600:	f340 80cc 	ble.w	800479c <atan+0x1bc>
 8004604:	ed9f 0b9c 	vldr	d0, [pc, #624]	; 8004878 <atan+0x298>
 8004608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800460c:	2c00      	cmp	r4, #0
 800460e:	d0f5      	beq.n	80045fc <atan+0x1c>
 8004610:	4622      	mov	r2, r4
 8004612:	462b      	mov	r3, r5
 8004614:	4620      	mov	r0, r4
 8004616:	4629      	mov	r1, r5
 8004618:	f7fb fddc 	bl	80001d4 <__adddf3>
 800461c:	ec41 0b10 	vmov	d0, r0, r1
 8004620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004624:	4bb2      	ldr	r3, [pc, #712]	; (80048f0 <atan+0x310>)
 8004626:	429e      	cmp	r6, r3
 8004628:	f300 80bc 	bgt.w	80047a4 <atan+0x1c4>
 800462c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004630:	429e      	cmp	r6, r3
 8004632:	f340 80a1 	ble.w	8004778 <atan+0x198>
 8004636:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800463a:	4622      	mov	r2, r4
 800463c:	462b      	mov	r3, r5
 800463e:	4620      	mov	r0, r4
 8004640:	4629      	mov	r1, r5
 8004642:	f7fb ff7d 	bl	8000540 <__aeabi_dmul>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4680      	mov	r8, r0
 800464c:	4689      	mov	r9, r1
 800464e:	f7fb ff77 	bl	8000540 <__aeabi_dmul>
 8004652:	a38b      	add	r3, pc, #556	; (adr r3, 8004880 <atan+0x2a0>)
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	4606      	mov	r6, r0
 800465a:	460f      	mov	r7, r1
 800465c:	f7fb ff70 	bl	8000540 <__aeabi_dmul>
 8004660:	a389      	add	r3, pc, #548	; (adr r3, 8004888 <atan+0x2a8>)
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f7fb fdb5 	bl	80001d4 <__adddf3>
 800466a:	4632      	mov	r2, r6
 800466c:	463b      	mov	r3, r7
 800466e:	f7fb ff67 	bl	8000540 <__aeabi_dmul>
 8004672:	a387      	add	r3, pc, #540	; (adr r3, 8004890 <atan+0x2b0>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f7fb fdac 	bl	80001d4 <__adddf3>
 800467c:	4632      	mov	r2, r6
 800467e:	463b      	mov	r3, r7
 8004680:	f7fb ff5e 	bl	8000540 <__aeabi_dmul>
 8004684:	a384      	add	r3, pc, #528	; (adr r3, 8004898 <atan+0x2b8>)
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	f7fb fda3 	bl	80001d4 <__adddf3>
 800468e:	4632      	mov	r2, r6
 8004690:	463b      	mov	r3, r7
 8004692:	f7fb ff55 	bl	8000540 <__aeabi_dmul>
 8004696:	a382      	add	r3, pc, #520	; (adr r3, 80048a0 <atan+0x2c0>)
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f7fb fd9a 	bl	80001d4 <__adddf3>
 80046a0:	4632      	mov	r2, r6
 80046a2:	463b      	mov	r3, r7
 80046a4:	f7fb ff4c 	bl	8000540 <__aeabi_dmul>
 80046a8:	a37f      	add	r3, pc, #508	; (adr r3, 80048a8 <atan+0x2c8>)
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	f7fb fd91 	bl	80001d4 <__adddf3>
 80046b2:	4642      	mov	r2, r8
 80046b4:	464b      	mov	r3, r9
 80046b6:	f7fb ff43 	bl	8000540 <__aeabi_dmul>
 80046ba:	a37d      	add	r3, pc, #500	; (adr r3, 80048b0 <atan+0x2d0>)
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	4680      	mov	r8, r0
 80046c2:	4689      	mov	r9, r1
 80046c4:	4630      	mov	r0, r6
 80046c6:	4639      	mov	r1, r7
 80046c8:	f7fb ff3a 	bl	8000540 <__aeabi_dmul>
 80046cc:	a37a      	add	r3, pc, #488	; (adr r3, 80048b8 <atan+0x2d8>)
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	f7fb fd7d 	bl	80001d0 <__aeabi_dsub>
 80046d6:	4632      	mov	r2, r6
 80046d8:	463b      	mov	r3, r7
 80046da:	f7fb ff31 	bl	8000540 <__aeabi_dmul>
 80046de:	a378      	add	r3, pc, #480	; (adr r3, 80048c0 <atan+0x2e0>)
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	f7fb fd74 	bl	80001d0 <__aeabi_dsub>
 80046e8:	4632      	mov	r2, r6
 80046ea:	463b      	mov	r3, r7
 80046ec:	f7fb ff28 	bl	8000540 <__aeabi_dmul>
 80046f0:	a375      	add	r3, pc, #468	; (adr r3, 80048c8 <atan+0x2e8>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f7fb fd6b 	bl	80001d0 <__aeabi_dsub>
 80046fa:	4632      	mov	r2, r6
 80046fc:	463b      	mov	r3, r7
 80046fe:	f7fb ff1f 	bl	8000540 <__aeabi_dmul>
 8004702:	a373      	add	r3, pc, #460	; (adr r3, 80048d0 <atan+0x2f0>)
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f7fb fd62 	bl	80001d0 <__aeabi_dsub>
 800470c:	4632      	mov	r2, r6
 800470e:	463b      	mov	r3, r7
 8004710:	f7fb ff16 	bl	8000540 <__aeabi_dmul>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4640      	mov	r0, r8
 800471a:	4649      	mov	r1, r9
 800471c:	f7fb fd5a 	bl	80001d4 <__adddf3>
 8004720:	4622      	mov	r2, r4
 8004722:	462b      	mov	r3, r5
 8004724:	f7fb ff0c 	bl	8000540 <__aeabi_dmul>
 8004728:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	d05b      	beq.n	80047ea <atan+0x20a>
 8004732:	4a70      	ldr	r2, [pc, #448]	; (80048f4 <atan+0x314>)
 8004734:	4b70      	ldr	r3, [pc, #448]	; (80048f8 <atan+0x318>)
 8004736:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800473a:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
 800473e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004742:	f7fb fd45 	bl	80001d0 <__aeabi_dsub>
 8004746:	4622      	mov	r2, r4
 8004748:	462b      	mov	r3, r5
 800474a:	f7fb fd41 	bl	80001d0 <__aeabi_dsub>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	e9db 0100 	ldrd	r0, r1, [fp]
 8004756:	f7fb fd3b 	bl	80001d0 <__aeabi_dsub>
 800475a:	f1ba 0f00 	cmp.w	sl, #0
 800475e:	ec41 0b10 	vmov	d0, r0, r1
 8004762:	f6bf af5d 	bge.w	8004620 <atan+0x40>
 8004766:	ee10 1a90 	vmov	r1, s1
 800476a:	4602      	mov	r2, r0
 800476c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004770:	ec43 2b10 	vmov	d0, r2, r3
 8004774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004778:	a357      	add	r3, pc, #348	; (adr r3, 80048d8 <atan+0x2f8>)
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	ee10 0a10 	vmov	r0, s0
 8004782:	4629      	mov	r1, r5
 8004784:	f7fb fd26 	bl	80001d4 <__adddf3>
 8004788:	4b5c      	ldr	r3, [pc, #368]	; (80048fc <atan+0x31c>)
 800478a:	2200      	movs	r2, #0
 800478c:	f7fc fb3e 	bl	8000e0c <__aeabi_dcmpgt>
 8004790:	2800      	cmp	r0, #0
 8004792:	f43f af50 	beq.w	8004636 <atan+0x56>
 8004796:	ec45 4b10 	vmov	d0, r4, r5
 800479a:	e741      	b.n	8004620 <atan+0x40>
 800479c:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80048e0 <atan+0x300>
 80047a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a4:	f003 ffce 	bl	8008744 <fabs>
 80047a8:	4b55      	ldr	r3, [pc, #340]	; (8004900 <atan+0x320>)
 80047aa:	429e      	cmp	r6, r3
 80047ac:	ec55 4b10 	vmov	r4, r5, d0
 80047b0:	dc23      	bgt.n	80047fa <atan+0x21a>
 80047b2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80047b6:	429e      	cmp	r6, r3
 80047b8:	dc4e      	bgt.n	8004858 <atan+0x278>
 80047ba:	ee10 2a10 	vmov	r2, s0
 80047be:	462b      	mov	r3, r5
 80047c0:	ee10 0a10 	vmov	r0, s0
 80047c4:	4629      	mov	r1, r5
 80047c6:	f7fb fd05 	bl	80001d4 <__adddf3>
 80047ca:	4b4c      	ldr	r3, [pc, #304]	; (80048fc <atan+0x31c>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	f7fb fcff 	bl	80001d0 <__aeabi_dsub>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4620      	mov	r0, r4
 80047d8:	4629      	mov	r1, r5
 80047da:	4614      	mov	r4, r2
 80047dc:	461d      	mov	r5, r3
 80047de:	f04f 0b00 	mov.w	fp, #0
 80047e2:	2200      	movs	r2, #0
 80047e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047e8:	e01f      	b.n	800482a <atan+0x24a>
 80047ea:	4620      	mov	r0, r4
 80047ec:	4629      	mov	r1, r5
 80047ee:	f7fb fcef 	bl	80001d0 <__aeabi_dsub>
 80047f2:	ec41 0b10 	vmov	d0, r0, r1
 80047f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fa:	4b42      	ldr	r3, [pc, #264]	; (8004904 <atan+0x324>)
 80047fc:	429e      	cmp	r6, r3
 80047fe:	da1f      	bge.n	8004840 <atan+0x260>
 8004800:	4b41      	ldr	r3, [pc, #260]	; (8004908 <atan+0x328>)
 8004802:	2200      	movs	r2, #0
 8004804:	4629      	mov	r1, r5
 8004806:	ee10 0a10 	vmov	r0, s0
 800480a:	f7fb fce1 	bl	80001d0 <__aeabi_dsub>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4620      	mov	r0, r4
 8004814:	4629      	mov	r1, r5
 8004816:	4614      	mov	r4, r2
 8004818:	461d      	mov	r5, r3
 800481a:	2200      	movs	r2, #0
 800481c:	4b3a      	ldr	r3, [pc, #232]	; (8004908 <atan+0x328>)
 800481e:	f04f 0b02 	mov.w	fp, #2
 8004822:	f7fb fe8d 	bl	8000540 <__aeabi_dmul>
 8004826:	4b35      	ldr	r3, [pc, #212]	; (80048fc <atan+0x31c>)
 8004828:	2200      	movs	r2, #0
 800482a:	f7fb fcd3 	bl	80001d4 <__adddf3>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4620      	mov	r0, r4
 8004834:	4629      	mov	r1, r5
 8004836:	f7fb ffad 	bl	8000794 <__aeabi_ddiv>
 800483a:	4604      	mov	r4, r0
 800483c:	460d      	mov	r5, r1
 800483e:	e6fc      	b.n	800463a <atan+0x5a>
 8004840:	462b      	mov	r3, r5
 8004842:	4932      	ldr	r1, [pc, #200]	; (800490c <atan+0x32c>)
 8004844:	ee10 2a10 	vmov	r2, s0
 8004848:	2000      	movs	r0, #0
 800484a:	f7fb ffa3 	bl	8000794 <__aeabi_ddiv>
 800484e:	f04f 0b03 	mov.w	fp, #3
 8004852:	4604      	mov	r4, r0
 8004854:	460d      	mov	r5, r1
 8004856:	e6f0      	b.n	800463a <atan+0x5a>
 8004858:	4b28      	ldr	r3, [pc, #160]	; (80048fc <atan+0x31c>)
 800485a:	2200      	movs	r2, #0
 800485c:	4629      	mov	r1, r5
 800485e:	ee10 0a10 	vmov	r0, s0
 8004862:	f7fb fcb5 	bl	80001d0 <__aeabi_dsub>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4620      	mov	r0, r4
 800486c:	4629      	mov	r1, r5
 800486e:	f04f 0b01 	mov.w	fp, #1
 8004872:	4614      	mov	r4, r2
 8004874:	461d      	mov	r5, r3
 8004876:	e7d6      	b.n	8004826 <atan+0x246>
 8004878:	54442d18 	.word	0x54442d18
 800487c:	3ff921fb 	.word	0x3ff921fb
 8004880:	e322da11 	.word	0xe322da11
 8004884:	3f90ad3a 	.word	0x3f90ad3a
 8004888:	24760deb 	.word	0x24760deb
 800488c:	3fa97b4b 	.word	0x3fa97b4b
 8004890:	a0d03d51 	.word	0xa0d03d51
 8004894:	3fb10d66 	.word	0x3fb10d66
 8004898:	c54c206e 	.word	0xc54c206e
 800489c:	3fb745cd 	.word	0x3fb745cd
 80048a0:	920083ff 	.word	0x920083ff
 80048a4:	3fc24924 	.word	0x3fc24924
 80048a8:	5555550d 	.word	0x5555550d
 80048ac:	3fd55555 	.word	0x3fd55555
 80048b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80048b4:	bfa2b444 	.word	0xbfa2b444
 80048b8:	52defd9a 	.word	0x52defd9a
 80048bc:	3fadde2d 	.word	0x3fadde2d
 80048c0:	af749a6d 	.word	0xaf749a6d
 80048c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80048c8:	fe231671 	.word	0xfe231671
 80048cc:	3fbc71c6 	.word	0x3fbc71c6
 80048d0:	9998ebc4 	.word	0x9998ebc4
 80048d4:	3fc99999 	.word	0x3fc99999
 80048d8:	8800759c 	.word	0x8800759c
 80048dc:	7e37e43c 	.word	0x7e37e43c
 80048e0:	54442d18 	.word	0x54442d18
 80048e4:	bff921fb 	.word	0xbff921fb
 80048e8:	440fffff 	.word	0x440fffff
 80048ec:	7ff00000 	.word	0x7ff00000
 80048f0:	3fdbffff 	.word	0x3fdbffff
 80048f4:	0800a248 	.word	0x0800a248
 80048f8:	0800a228 	.word	0x0800a228
 80048fc:	3ff00000 	.word	0x3ff00000
 8004900:	3ff2ffff 	.word	0x3ff2ffff
 8004904:	40038000 	.word	0x40038000
 8004908:	3ff80000 	.word	0x3ff80000
 800490c:	bff00000 	.word	0xbff00000

08004910 <floor>:
 8004910:	ec51 0b10 	vmov	r0, r1, d0
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800491a:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 800491e:	2d13      	cmp	r5, #19
 8004920:	ee10 6a10 	vmov	r6, s0
 8004924:	460c      	mov	r4, r1
 8004926:	dc30      	bgt.n	800498a <floor+0x7a>
 8004928:	2d00      	cmp	r5, #0
 800492a:	db1e      	blt.n	800496a <floor+0x5a>
 800492c:	4f38      	ldr	r7, [pc, #224]	; (8004a10 <floor+0x100>)
 800492e:	412f      	asrs	r7, r5
 8004930:	ea01 0307 	and.w	r3, r1, r7
 8004934:	4303      	orrs	r3, r0
 8004936:	d02d      	beq.n	8004994 <floor+0x84>
 8004938:	a333      	add	r3, pc, #204	; (adr r3, 8004a08 <floor+0xf8>)
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f7fb fc49 	bl	80001d4 <__adddf3>
 8004942:	2200      	movs	r2, #0
 8004944:	2300      	movs	r3, #0
 8004946:	f7fc fa61 	bl	8000e0c <__aeabi_dcmpgt>
 800494a:	b148      	cbz	r0, 8004960 <floor+0x50>
 800494c:	2c00      	cmp	r4, #0
 800494e:	da04      	bge.n	800495a <floor+0x4a>
 8004950:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004954:	fa43 f505 	asr.w	r5, r3, r5
 8004958:	442c      	add	r4, r5
 800495a:	ea24 0407 	bic.w	r4, r4, r7
 800495e:	2600      	movs	r6, #0
 8004960:	4623      	mov	r3, r4
 8004962:	4632      	mov	r2, r6
 8004964:	ec43 2b10 	vmov	d0, r2, r3
 8004968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800496a:	a327      	add	r3, pc, #156	; (adr r3, 8004a08 <floor+0xf8>)
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	f7fb fc30 	bl	80001d4 <__adddf3>
 8004974:	2200      	movs	r2, #0
 8004976:	2300      	movs	r3, #0
 8004978:	f7fc fa48 	bl	8000e0c <__aeabi_dcmpgt>
 800497c:	2800      	cmp	r0, #0
 800497e:	d0ef      	beq.n	8004960 <floor+0x50>
 8004980:	2c00      	cmp	r4, #0
 8004982:	db29      	blt.n	80049d8 <floor+0xc8>
 8004984:	2600      	movs	r6, #0
 8004986:	4634      	mov	r4, r6
 8004988:	e7ea      	b.n	8004960 <floor+0x50>
 800498a:	2d33      	cmp	r5, #51	; 0x33
 800498c:	dd05      	ble.n	800499a <floor+0x8a>
 800498e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004992:	d019      	beq.n	80049c8 <floor+0xb8>
 8004994:	ec41 0b10 	vmov	d0, r0, r1
 8004998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800499a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800499e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80049a2:	40df      	lsrs	r7, r3
 80049a4:	4207      	tst	r7, r0
 80049a6:	d0f5      	beq.n	8004994 <floor+0x84>
 80049a8:	a317      	add	r3, pc, #92	; (adr r3, 8004a08 <floor+0xf8>)
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	f7fb fc11 	bl	80001d4 <__adddf3>
 80049b2:	2200      	movs	r2, #0
 80049b4:	2300      	movs	r3, #0
 80049b6:	f7fc fa29 	bl	8000e0c <__aeabi_dcmpgt>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d0d0      	beq.n	8004960 <floor+0x50>
 80049be:	2c00      	cmp	r4, #0
 80049c0:	db13      	blt.n	80049ea <floor+0xda>
 80049c2:	ea26 0607 	bic.w	r6, r6, r7
 80049c6:	e7cb      	b.n	8004960 <floor+0x50>
 80049c8:	ee10 2a10 	vmov	r2, s0
 80049cc:	460b      	mov	r3, r1
 80049ce:	f7fb fc01 	bl	80001d4 <__adddf3>
 80049d2:	ec41 0b10 	vmov	d0, r0, r1
 80049d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80049dc:	4a0d      	ldr	r2, [pc, #52]	; (8004a14 <floor+0x104>)
 80049de:	431e      	orrs	r6, r3
 80049e0:	2e00      	cmp	r6, #0
 80049e2:	bf18      	it	ne
 80049e4:	4614      	movne	r4, r2
 80049e6:	2600      	movs	r6, #0
 80049e8:	e7ba      	b.n	8004960 <floor+0x50>
 80049ea:	2d14      	cmp	r5, #20
 80049ec:	d008      	beq.n	8004a00 <floor+0xf0>
 80049ee:	2301      	movs	r3, #1
 80049f0:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 80049f4:	fa03 f505 	lsl.w	r5, r3, r5
 80049f8:	19ae      	adds	r6, r5, r6
 80049fa:	bf28      	it	cs
 80049fc:	18e4      	addcs	r4, r4, r3
 80049fe:	e7e0      	b.n	80049c2 <floor+0xb2>
 8004a00:	3401      	adds	r4, #1
 8004a02:	e7de      	b.n	80049c2 <floor+0xb2>
 8004a04:	f3af 8000 	nop.w
 8004a08:	8800759c 	.word	0x8800759c
 8004a0c:	7e37e43c 	.word	0x7e37e43c
 8004a10:	000fffff 	.word	0x000fffff
 8004a14:	bff00000 	.word	0xbff00000

08004a18 <nan>:
 8004a18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004a20 <nan+0x8>
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	00000000 	.word	0x00000000
 8004a24:	7ff80000 	.word	0x7ff80000

08004a28 <scalbn>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	ec53 2b10 	vmov	r2, r3, d0
 8004a2e:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8004a32:	4604      	mov	r4, r0
 8004a34:	469c      	mov	ip, r3
 8004a36:	bb89      	cbnz	r1, 8004a9c <scalbn+0x74>
 8004a38:	ee10 1a10 	vmov	r1, s0
 8004a3c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8004a40:	ea5c 0101 	orrs.w	r1, ip, r1
 8004a44:	d029      	beq.n	8004a9a <scalbn+0x72>
 8004a46:	4619      	mov	r1, r3
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4b3d      	ldr	r3, [pc, #244]	; (8004b40 <scalbn+0x118>)
 8004a4c:	4d3d      	ldr	r5, [pc, #244]	; (8004b44 <scalbn+0x11c>)
 8004a4e:	ee10 0a10 	vmov	r0, s0
 8004a52:	f7fb fd75 	bl	8000540 <__aeabi_dmul>
 8004a56:	42ac      	cmp	r4, r5
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	db16      	blt.n	8004a8c <scalbn+0x64>
 8004a5e:	468c      	mov	ip, r1
 8004a60:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004a64:	3936      	subs	r1, #54	; 0x36
 8004a66:	4421      	add	r1, r4
 8004a68:	f240 70fe 	movw	r0, #2046	; 0x7fe
 8004a6c:	4281      	cmp	r1, r0
 8004a6e:	dc21      	bgt.n	8004ab4 <scalbn+0x8c>
 8004a70:	2900      	cmp	r1, #0
 8004a72:	dc47      	bgt.n	8004b04 <scalbn+0xdc>
 8004a74:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004a78:	da34      	bge.n	8004ae4 <scalbn+0xbc>
 8004a7a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8004a7e:	428c      	cmp	r4, r1
 8004a80:	dc18      	bgt.n	8004ab4 <scalbn+0x8c>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	a126      	add	r1, pc, #152	; (adr r1, 8004b20 <scalbn+0xf8>)
 8004a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a8a:	db44      	blt.n	8004b16 <scalbn+0xee>
 8004a8c:	a324      	add	r3, pc, #144	; (adr r3, 8004b20 <scalbn+0xf8>)
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	f7fb fd55 	bl	8000540 <__aeabi_dmul>
 8004a96:	ec41 0b10 	vmov	d0, r0, r1
 8004a9a:	bd38      	pop	{r3, r4, r5, pc}
 8004a9c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8004aa0:	4281      	cmp	r1, r0
 8004aa2:	d1e0      	bne.n	8004a66 <scalbn+0x3e>
 8004aa4:	ee10 0a10 	vmov	r0, s0
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	f7fb fb93 	bl	80001d4 <__adddf3>
 8004aae:	ec41 0b10 	vmov	d0, r0, r1
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	a11c      	add	r1, pc, #112	; (adr r1, 8004b28 <scalbn+0x100>)
 8004ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004abc:	db07      	blt.n	8004ace <scalbn+0xa6>
 8004abe:	a31a      	add	r3, pc, #104	; (adr r3, 8004b28 <scalbn+0x100>)
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f7fb fd3c 	bl	8000540 <__aeabi_dmul>
 8004ac8:	ec41 0b10 	vmov	d0, r0, r1
 8004acc:	bd38      	pop	{r3, r4, r5, pc}
 8004ace:	a118      	add	r1, pc, #96	; (adr r1, 8004b30 <scalbn+0x108>)
 8004ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ad4:	a314      	add	r3, pc, #80	; (adr r3, 8004b28 <scalbn+0x100>)
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f7fb fd31 	bl	8000540 <__aeabi_dmul>
 8004ade:	ec41 0b10 	vmov	d0, r0, r1
 8004ae2:	e7f3      	b.n	8004acc <scalbn+0xa4>
 8004ae4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8004ae8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8004aec:	3136      	adds	r1, #54	; 0x36
 8004aee:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
 8004af2:	4610      	mov	r0, r2
 8004af4:	4619      	mov	r1, r3
 8004af6:	2200      	movs	r2, #0
 8004af8:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <scalbn+0x120>)
 8004afa:	f7fb fd21 	bl	8000540 <__aeabi_dmul>
 8004afe:	ec41 0b10 	vmov	d0, r0, r1
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
 8004b04:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8004b08:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8004b0c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
 8004b10:	ec43 2b10 	vmov	d0, r2, r3
 8004b14:	bd38      	pop	{r3, r4, r5, pc}
 8004b16:	a108      	add	r1, pc, #32	; (adr r1, 8004b38 <scalbn+0x110>)
 8004b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b1c:	e7b6      	b.n	8004a8c <scalbn+0x64>
 8004b1e:	bf00      	nop
 8004b20:	c2f8f359 	.word	0xc2f8f359
 8004b24:	01a56e1f 	.word	0x01a56e1f
 8004b28:	8800759c 	.word	0x8800759c
 8004b2c:	7e37e43c 	.word	0x7e37e43c
 8004b30:	8800759c 	.word	0x8800759c
 8004b34:	fe37e43c 	.word	0xfe37e43c
 8004b38:	c2f8f359 	.word	0xc2f8f359
 8004b3c:	81a56e1f 	.word	0x81a56e1f
 8004b40:	43500000 	.word	0x43500000
 8004b44:	ffff3cb0 	.word	0xffff3cb0
 8004b48:	3c900000 	.word	0x3c900000

08004b4c <mavlink_sha256_update>:
    G += GG;
    H += HH;
}

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8004b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *p = (const unsigned char *)v;
    uint32_t old_sz = m->sz[0];
 8004b50:	6805      	ldr	r5, [r0, #0]
    uint32_t offset;

    m->sz[0] += len * 8;
 8004b52:	00d3      	lsls	r3, r2, #3
 8004b54:	195b      	adds	r3, r3, r5
 8004b56:	6003      	str	r3, [r0, #0]
    if (m->sz[0] < old_sz)
	++m->sz[1];
 8004b58:	bf28      	it	cs
 8004b5a:	6843      	ldrcs	r3, [r0, #4]
{
 8004b5c:	b0df      	sub	sp, #380	; 0x17c
	++m->sz[1];
 8004b5e:	bf24      	itt	cs
 8004b60:	3301      	addcs	r3, #1
 8004b62:	6043      	strcs	r3, [r0, #4]
    while(len > 0){
	uint32_t l = 64 - offset;
        if (len < l) {
            l = len;
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8004b64:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8004b68:	930c      	str	r3, [sp, #48]	; 0x30
 8004b6a:	f100 0340 	add.w	r3, r0, #64	; 0x40
{
 8004b6e:	4604      	mov	r4, r0
 8004b70:	4689      	mov	r9, r1
 8004b72:	4616      	mov	r6, r2
    offset = (old_sz / 8) % 64;
 8004b74:	f3c5 05c5 	ubfx	r5, r5, #3, #6
 8004b78:	930d      	str	r3, [sp, #52]	; 0x34
    while(len > 0){
 8004b7a:	2e00      	cmp	r6, #0
 8004b7c:	f000 80ba 	beq.w	8004cf4 <mavlink_sha256_update+0x1a8>
	uint32_t l = 64 - offset;
 8004b80:	f1c5 0740 	rsb	r7, r5, #64	; 0x40
        if (len < l) {
 8004b84:	42b7      	cmp	r7, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8004b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b88:	bf28      	it	cs
 8004b8a:	4637      	movcs	r7, r6
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	1958      	adds	r0, r3, r5
 8004b90:	463a      	mov	r2, r7
	offset += l;
 8004b92:	443d      	add	r5, r7
	memcpy(m->u.save_bytes + offset, p, l);
 8004b94:	f005 f885 	bl	8009ca2 <memcpy>
	p += l;
	len -= l;
	if(offset == 64){
 8004b98:	2d40      	cmp	r5, #64	; 0x40
	p += l;
 8004b9a:	44b9      	add	r9, r7
	len -= l;
 8004b9c:	eba6 0607 	sub.w	r6, r6, r7
	if(offset == 64){
 8004ba0:	d1eb      	bne.n	8004b7a <mavlink_sha256_update+0x2e>
 8004ba2:	ab0e      	add	r3, sp, #56	; 0x38
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	4619      	mov	r1, r3
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
	    for (i = 0; i < 16; i++){
                const uint8_t *p1 = (const uint8_t *)&u[i];
                uint8_t *p2 = (uint8_t *)&current[i];
                p2[0] = p1[3];
 8004ba8:	f892 002b 	ldrb.w	r0, [r2, #43]	; 0x2b
 8004bac:	7008      	strb	r0, [r1, #0]
                p2[1] = p1[2];
 8004bae:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
 8004bb2:	7048      	strb	r0, [r1, #1]
                p2[2] = p1[1];
 8004bb4:	f892 0029 	ldrb.w	r0, [r2, #41]	; 0x29
 8004bb8:	7088      	strb	r0, [r1, #2]
                p2[3] = p1[0];
 8004bba:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8004bbe:	70c8      	strb	r0, [r1, #3]
	    for (i = 0; i < 16; i++){
 8004bc0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004bc2:	3204      	adds	r2, #4
 8004bc4:	4290      	cmp	r0, r2
 8004bc6:	f101 0104 	add.w	r1, r1, #4
 8004bca:	d1ed      	bne.n	8004ba8 <mavlink_sha256_update+0x5c>
    AA = A;
 8004bcc:	68a2      	ldr	r2, [r4, #8]
 8004bce:	9201      	str	r2, [sp, #4]
    BB = B;
 8004bd0:	68e2      	ldr	r2, [r4, #12]
 8004bd2:	9202      	str	r2, [sp, #8]
    CC = C;
 8004bd4:	6922      	ldr	r2, [r4, #16]
 8004bd6:	9203      	str	r2, [sp, #12]
    DD = D;
 8004bd8:	6962      	ldr	r2, [r4, #20]
 8004bda:	9204      	str	r2, [sp, #16]
    EE = E;
 8004bdc:	69a2      	ldr	r2, [r4, #24]
 8004bde:	9205      	str	r2, [sp, #20]
    FF = F;
 8004be0:	69e2      	ldr	r2, [r4, #28]
 8004be2:	9206      	str	r2, [sp, #24]
    GG = G;
 8004be4:	6a22      	ldr	r2, [r4, #32]
 8004be6:	9207      	str	r2, [sp, #28]
    HH = H;
 8004be8:	a91e      	add	r1, sp, #120	; 0x78
 8004bea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004bec:	9208      	str	r2, [sp, #32]
 8004bee:	4608      	mov	r0, r1
    for (i = 0; i < 16; ++i)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	3201      	adds	r2, #1
	data[i] = in[i];
 8004bf4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bf8:	f840 5b04 	str.w	r5, [r0], #4
    for (i = 0; i < 16; ++i)
 8004bfc:	2a10      	cmp	r2, #16
 8004bfe:	d1f8      	bne.n	8004bf2 <mavlink_sha256_update+0xa6>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004c00:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004c02:	460f      	mov	r7, r1
 8004c04:	ea4f 40f3 	mov.w	r0, r3, ror #19
 8004c08:	ea80 4073 	eor.w	r0, r0, r3, ror #17
 8004c0c:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	683f      	ldr	r7, [r7, #0]
 8004c14:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8004c18:	443b      	add	r3, r7
 8004c1a:	4418      	add	r0, r3
 8004c1c:	ea4f 43b5 	mov.w	r3, r5, ror #18
 8004c20:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 8004c24:	ea83 03d5 	eor.w	r3, r3, r5, lsr #3
    for (i = 16; i < 64; ++i)
 8004c28:	3201      	adds	r2, #1
	    sigma0(data[i-15]) + data[i - 16];
 8004c2a:	4403      	add	r3, r0
    for (i = 16; i < 64; ++i)
 8004c2c:	2a40      	cmp	r2, #64	; 0x40
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004c2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8004c30:	d1e6      	bne.n	8004c00 <mavlink_sha256_update+0xb4>
 8004c32:	4b32      	ldr	r3, [pc, #200]	; (8004cfc <mavlink_sha256_update+0x1b0>)
 8004c34:	930b      	str	r3, [sp, #44]	; 0x2c
    BB = B;
 8004c36:	e9dd 7202 	ldrd	r7, r2, [sp, #8]
    FF = F;
 8004c3a:	e9dd ec06 	ldrd	lr, ip, [sp, #24]
    DD = D;
 8004c3e:	9b04      	ldr	r3, [sp, #16]
    AA = A;
 8004c40:	9d01      	ldr	r5, [sp, #4]
    HH = H;
 8004c42:	f8dd b020 	ldr.w	fp, [sp, #32]
    EE = E;
 8004c46:	9805      	ldr	r0, [sp, #20]
    DD = D;
 8004c48:	930a      	str	r3, [sp, #40]	; 0x28
    for (i = 0; i < 64; i++) {
 8004c4a:	f04f 0800 	mov.w	r8, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8004c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c50:	f853 1b04 	ldr.w	r1, [r3], #4
 8004c54:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c56:	ea4f 23f0 	mov.w	r3, r0, ror #11
 8004c5a:	ea83 13b0 	eor.w	r3, r3, r0, ror #6
 8004c5e:	ea83 6a70 	eor.w	sl, r3, r0, ror #25
 8004c62:	ab1e      	add	r3, sp, #120	; 0x78
 8004c64:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004c68:	4419      	add	r1, r3
 8004c6a:	eb0a 0301 	add.w	r3, sl, r1
 8004c6e:	ea2c 0a00 	bic.w	sl, ip, r0
 8004c72:	ea00 010e 	and.w	r1, r0, lr
 8004c76:	ea8a 0101 	eor.w	r1, sl, r1
 8004c7a:	4419      	add	r1, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004c7c:	ea87 0302 	eor.w	r3, r7, r2
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8004c80:	4459      	add	r1, fp
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004c82:	402b      	ands	r3, r5
 8004c84:	ea4f 3a75 	mov.w	sl, r5, ror #13
 8004c88:	ea07 0b02 	and.w	fp, r7, r2
 8004c8c:	ea83 0b0b 	eor.w	fp, r3, fp
 8004c90:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
	EE = DD + T1;
 8004c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c96:	920a      	str	r2, [sp, #40]	; 0x28
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004c98:	ea8a 5ab5 	eor.w	sl, sl, r5, ror #22
    for (i = 0; i < 64; i++) {
 8004c9c:	f108 0801 	add.w	r8, r8, #1
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004ca0:	44da      	add	sl, fp
	EE = DD + T1;
 8004ca2:	440b      	add	r3, r1
    for (i = 0; i < 64; i++) {
 8004ca4:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
	EE = DD + T1;
 8004ca8:	9309      	str	r3, [sp, #36]	; 0x24
	AA = T1 + T2;
 8004caa:	4451      	add	r1, sl
    for (i = 0; i < 64; i++) {
 8004cac:	46e3      	mov	fp, ip
 8004cae:	d11a      	bne.n	8004ce6 <mavlink_sha256_update+0x19a>
    A += AA;
 8004cb0:	9b01      	ldr	r3, [sp, #4]
 8004cb2:	440b      	add	r3, r1
 8004cb4:	60a3      	str	r3, [r4, #8]
    B += BB;
 8004cb6:	9b02      	ldr	r3, [sp, #8]
 8004cb8:	442b      	add	r3, r5
 8004cba:	60e3      	str	r3, [r4, #12]
    C += CC;
 8004cbc:	9b03      	ldr	r3, [sp, #12]
 8004cbe:	443b      	add	r3, r7
 8004cc0:	6123      	str	r3, [r4, #16]
    D += DD;
 8004cc2:	9b04      	ldr	r3, [sp, #16]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	6163      	str	r3, [r4, #20]
    E += EE;
 8004cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cca:	9b05      	ldr	r3, [sp, #20]
 8004ccc:	4413      	add	r3, r2
 8004cce:	61a3      	str	r3, [r4, #24]
    F += FF;
 8004cd0:	9b06      	ldr	r3, [sp, #24]
 8004cd2:	4403      	add	r3, r0
 8004cd4:	61e3      	str	r3, [r4, #28]
    G += GG;
 8004cd6:	9b07      	ldr	r3, [sp, #28]
 8004cd8:	4473      	add	r3, lr
 8004cda:	6223      	str	r3, [r4, #32]
    H += HH;
 8004cdc:	9b08      	ldr	r3, [sp, #32]
 8004cde:	4463      	add	r3, ip
 8004ce0:	6263      	str	r3, [r4, #36]	; 0x24
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
 8004ce2:	2500      	movs	r5, #0
 8004ce4:	e749      	b.n	8004b7a <mavlink_sha256_update+0x2e>
 8004ce6:	463a      	mov	r2, r7
 8004ce8:	46f4      	mov	ip, lr
 8004cea:	462f      	mov	r7, r5
 8004cec:	4686      	mov	lr, r0
	AA = T1 + T2;
 8004cee:	460d      	mov	r5, r1
	EE = DD + T1;
 8004cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cf2:	e7ac      	b.n	8004c4e <mavlink_sha256_update+0x102>
	}
    }
}
 8004cf4:	b05f      	add	sp, #380	; 0x17c
 8004cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfa:	bf00      	nop
 8004cfc:	0800a278 	.word	0x0800a278

08004d00 <_Z23mavlink_send_uart_bytesPKhi>:
{
 8004d00:	b570      	push	{r4, r5, r6, lr}
		uart_poll_out(uart_dev, *ch++);
 8004d02:	4e06      	ldr	r6, [pc, #24]	; (8004d1c <_Z23mavlink_send_uart_bytesPKhi+0x1c>)
{
 8004d04:	4604      	mov	r4, r0
 8004d06:	1845      	adds	r5, r0, r1
	while(length--) {
 8004d08:	42ac      	cmp	r4, r5
 8004d0a:	d006      	beq.n	8004d1a <_Z23mavlink_send_uart_bytesPKhi+0x1a>
		uart_poll_out(uart_dev, *ch++);
 8004d0c:	6830      	ldr	r0, [r6, #0]
 8004d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8004d12:	6883      	ldr	r3, [r0, #8]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4798      	blx	r3
}
 8004d18:	e7f6      	b.n	8004d08 <_Z23mavlink_send_uart_bytesPKhi+0x8>
}
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	20000538 	.word	0x20000538

08004d20 <main>:
		}
	}
}

void main(void)
{
 8004d20:	b5d0      	push	{r4, r6, r7, lr}
 8004d22:	b096      	sub	sp, #88	; 0x58
 8004d24:	f004 ff64 	bl	8009bf0 <z_impl_k_uptime_ticks>
 8004d28:	220a      	movs	r2, #10
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f7fb fe6a 	bl	8000a04 <__aeabi_uldivmod>
	time_stamp = k_uptime_get();
 8004d30:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <main+0x68>)
 8004d32:	e9c3 0100 	strd	r0, r1, [r3]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8004d36:	4815      	ldr	r0, [pc, #84]	; (8004d8c <main+0x6c>)
 8004d38:	f002 fce4 	bl	8007704 <z_impl_device_get_binding>
	uart_dev = device_get_binding("UART_3");
 8004d3c:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <main+0x70>)
 8004d3e:	6018      	str	r0, [r3, #0]
	/*k_thread_create(&mavlink_receiver_thread, thread_stack, STACKSIZE,
			(k_thread_entry_t) mavlink_receiver_thread_entry,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
	*/

	k_thread_create(&distance_calculator_thread, thread_stack, STACKSIZE,
 8004d40:	2600      	movs	r6, #0
 8004d42:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8004d44:	2400      	movs	r4, #0
 8004d46:	f06f 0308 	mvn.w	r3, #8
 8004d4a:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8004d4e:	4911      	ldr	r1, [pc, #68]	; (8004d94 <main+0x74>)
 8004d50:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <main+0x78>)
 8004d52:	4812      	ldr	r0, [pc, #72]	; (8004d9c <main+0x7c>)
 8004d54:	9400      	str	r4, [sp, #0]
 8004d56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004d5e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004d62:	f002 fea9 	bl	8007ab8 <z_impl_k_thread_create>
			(k_thread_entry_t) distance_calculator_thread_entry,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
	struct k_timer timer;

	k_timer_init(&timer, NULL, NULL);
 8004d66:	4622      	mov	r2, r4
 8004d68:	4621      	mov	r1, r4
 8004d6a:	a808      	add	r0, sp, #32
 8004d6c:	f004 ff42 	bl	8009bf4 <k_timer_init>
	z_impl_k_timer_start(timer, duration, period);
 8004d70:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d74:	e9cd 6700 	strd	r6, r7, [sp]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	a808      	add	r0, sp, #32
 8004d7c:	f003 fb46 	bl	800840c <z_impl_k_timer_start>
	return z_impl_k_timer_status_sync(timer);
 8004d80:	a808      	add	r0, sp, #32
 8004d82:	f003 fb91 	bl	80084a8 <z_impl_k_timer_status_sync>
 8004d86:	e7f3      	b.n	8004d70 <main+0x50>
 8004d88:	200002b0 	.word	0x200002b0
 8004d8c:	0800a76e 	.word	0x0800a76e
 8004d90:	20000538 	.word	0x20000538
 8004d94:	20000800 	.word	0x20000800
 8004d98:	08001409 	.word	0x08001409
 8004d9c:	200001f0 	.word	0x200001f0

08004da0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8004da0:	680b      	ldr	r3, [r1, #0]
 8004da2:	3301      	adds	r3, #1
 8004da4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8004da6:	4b01      	ldr	r3, [pc, #4]	; (8004dac <char_out+0xc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4718      	bx	r3
 8004dac:	20000000 	.word	0x20000000

08004db0 <__printk_hook_install>:
	_char_out = fn;
 8004db0:	4b01      	ldr	r3, [pc, #4]	; (8004db8 <__printk_hook_install+0x8>)
 8004db2:	6018      	str	r0, [r3, #0]
}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000000 	.word	0x20000000

08004dbc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 8004dbc:	b507      	push	{r0, r1, r2, lr}
 8004dbe:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8004dc0:	2100      	movs	r1, #0
{
 8004dc2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 8004dc4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 8004dc6:	4803      	ldr	r0, [pc, #12]	; (8004dd4 <vprintk+0x18>)
 8004dc8:	a901      	add	r1, sp, #4
 8004dca:	f7fc fd75 	bl	80018b8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 8004dce:	b003      	add	sp, #12
 8004dd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dd4:	08004da1 	.word	0x08004da1

08004dd8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8004dd8:	b530      	push	{r4, r5, lr}
 8004dda:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 8004ddc:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
 8004de0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8004de2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
 8004de4:	a901      	add	r1, sp, #4
 8004de6:	4805      	ldr	r0, [pc, #20]	; (8004dfc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
 8004de8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
 8004dea:	f7fc fd65 	bl	80018b8 <cbvprintf>

	if (ctx.count < ctx.max) {
 8004dee:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8004df2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 8004df4:	bfb8      	it	lt
 8004df6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 8004df8:	b005      	add	sp, #20
 8004dfa:	bd30      	pop	{r4, r5, pc}
 8004dfc:	08008947 	.word	0x08008947

08004e00 <extract_decimal>:
{
 8004e00:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (isdigit((int)(unsigned char)*sp)) {
 8004e02:	4e09      	ldr	r6, [pc, #36]	; (8004e28 <extract_decimal+0x28>)
 8004e04:	6801      	ldr	r1, [r0, #0]
{
 8004e06:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
 8004e08:	270a      	movs	r7, #10
	size_t val = 0;
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
 8004e0e:	3101      	adds	r1, #1
 8004e10:	7823      	ldrb	r3, [r4, #0]
 8004e12:	5d9d      	ldrb	r5, [r3, r6]
 8004e14:	076d      	lsls	r5, r5, #29
 8004e16:	d401      	bmi.n	8004e1c <extract_decimal+0x1c>
	*str = sp;
 8004e18:	6014      	str	r4, [r2, #0]
}
 8004e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 8004e1c:	fb07 3300 	mla	r3, r7, r0, r3
 8004e20:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004e24:	e7f2      	b.n	8004e0c <extract_decimal+0xc>
 8004e26:	bf00      	nop
 8004e28:	0800afae 	.word	0x0800afae

08004e2c <encode_uint>:
{
 8004e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e30:	4615      	mov	r5, r2
 8004e32:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8004e34:	78d3      	ldrb	r3, [r2, #3]
 8004e36:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <encode_uint+0x94>)
 8004e38:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
 8004e3c:	2b6f      	cmp	r3, #111	; 0x6f
{
 8004e3e:	4680      	mov	r8, r0
 8004e40:	460f      	mov	r7, r1
 8004e42:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8004e46:	d029      	beq.n	8004e9c <encode_uint+0x70>
 8004e48:	d824      	bhi.n	8004e94 <encode_uint+0x68>
		return 16;
 8004e4a:	2b58      	cmp	r3, #88	; 0x58
 8004e4c:	bf14      	ite	ne
 8004e4e:	260a      	movne	r6, #10
 8004e50:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 8004e52:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8004e56:	4632      	mov	r2, r6
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	4639      	mov	r1, r7
 8004e5e:	f7fb fdd1 	bl	8000a04 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8004e62:	2a09      	cmp	r2, #9
 8004e64:	b2d4      	uxtb	r4, r2
 8004e66:	d81e      	bhi.n	8004ea6 <encode_uint+0x7a>
 8004e68:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8004e6a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8004e6c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8004e6e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8004e72:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8004e76:	d301      	bcc.n	8004e7c <encode_uint+0x50>
 8004e78:	45d1      	cmp	r9, sl
 8004e7a:	d811      	bhi.n	8004ea0 <encode_uint+0x74>
	if (conv->flag_hash) {
 8004e7c:	782b      	ldrb	r3, [r5, #0]
 8004e7e:	069b      	lsls	r3, r3, #26
 8004e80:	d505      	bpl.n	8004e8e <encode_uint+0x62>
		if (radix == 8) {
 8004e82:	2e08      	cmp	r6, #8
 8004e84:	d115      	bne.n	8004eb2 <encode_uint+0x86>
			conv->altform_0 = true;
 8004e86:	78ab      	ldrb	r3, [r5, #2]
 8004e88:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8004e8c:	70ab      	strb	r3, [r5, #2]
}
 8004e8e:	4648      	mov	r0, r9
 8004e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8004e94:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8004e98:	2b70      	cmp	r3, #112	; 0x70
 8004e9a:	e7d7      	b.n	8004e4c <encode_uint+0x20>
	switch (specifier) {
 8004e9c:	2608      	movs	r6, #8
 8004e9e:	e7d8      	b.n	8004e52 <encode_uint+0x26>
		value /= radix;
 8004ea0:	4680      	mov	r8, r0
 8004ea2:	460f      	mov	r7, r1
 8004ea4:	e7d7      	b.n	8004e56 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8004ea6:	f1bb 0f01 	cmp.w	fp, #1
 8004eaa:	bf0c      	ite	eq
 8004eac:	3437      	addeq	r4, #55	; 0x37
 8004eae:	3457      	addne	r4, #87	; 0x57
 8004eb0:	e7db      	b.n	8004e6a <encode_uint+0x3e>
		} else if (radix == 16) {
 8004eb2:	2e10      	cmp	r6, #16
 8004eb4:	d1eb      	bne.n	8004e8e <encode_uint+0x62>
			conv->altform_0c = true;
 8004eb6:	78ab      	ldrb	r3, [r5, #2]
 8004eb8:	f043 0310 	orr.w	r3, r3, #16
 8004ebc:	e7e6      	b.n	8004e8c <encode_uint+0x60>
 8004ebe:	bf00      	nop
 8004ec0:	0800afae 	.word	0x0800afae

08004ec4 <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8004ec4:	f04f 0210 	mov.w	r2, #16
 8004ec8:	f3ef 8311 	mrs	r3, BASEPRI
 8004ecc:	f382 8811 	msr	BASEPRI, r2
 8004ed0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8004edc:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <st_stm32f4_init+0x24>)
 8004ede:	4a03      	ldr	r2, [pc, #12]	; (8004eec <st_stm32f4_init+0x28>)
 8004ee0:	601a      	str	r2, [r3, #0]

	return 0;
}
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000084 	.word	0x20000084
 8004eec:	00f42400 	.word	0x00f42400

08004ef0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8004ef0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8004ef2:	4910      	ldr	r1, [pc, #64]	; (8004f34 <enable_logger+0x44>)
 8004ef4:	4810      	ldr	r0, [pc, #64]	; (8004f38 <enable_logger+0x48>)
{
 8004ef6:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f004 fe7b 	bl	8009bf4 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8004efe:	4d0f      	ldr	r5, [pc, #60]	; (8004f3c <enable_logger+0x4c>)
 8004f00:	490f      	ldr	r1, [pc, #60]	; (8004f40 <enable_logger+0x50>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	2300      	movs	r3, #0
 8004f06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f0a:	2400      	movs	r4, #0
 8004f0c:	230e      	movs	r3, #14
 8004f0e:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8004f12:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004f16:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <enable_logger+0x54>)
 8004f18:	9400      	str	r4, [sp, #0]
 8004f1a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f002 fdca 	bl	8007ab8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8004f24:	4908      	ldr	r1, [pc, #32]	; (8004f48 <enable_logger+0x58>)
 8004f26:	4628      	mov	r0, r5
 8004f28:	f004 fd29 	bl	800997e <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	b009      	add	sp, #36	; 0x24
 8004f30:	bd30      	pop	{r4, r5, pc}
 8004f32:	bf00      	nop
 8004f34:	08004f4d 	.word	0x08004f4d
 8004f38:	200002b8 	.word	0x200002b8
 8004f3c:	200002f0 	.word	0x200002f0
 8004f40:	20001880 	.word	0x20001880
 8004f44:	08005319 	.word	0x08005319
 8004f48:	0800a77b 	.word	0x0800a77b

08004f4c <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <log_process_thread_timer_expiry_fn+0x8>)
 8004f4e:	f002 be5d 	b.w	8007c0c <z_impl_k_sem_give>
 8004f52:	bf00      	nop
 8004f54:	200001cc 	.word	0x200001cc

08004f58 <z_log_get_s_mask>:
{
 8004f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5a:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
 8004f5c:	4e0f      	ldr	r6, [pc, #60]	; (8004f9c <z_log_get_s_mask+0x44>)
	uint32_t mask = 0U;
 8004f5e:	2000      	movs	r0, #0
	uint32_t arg = 0U;
 8004f60:	4603      	mov	r3, r0
	bool arm = false;
 8004f62:	4602      	mov	r2, r0
				mask |= BIT(arg);
 8004f64:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
 8004f66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f6a:	b10c      	cbz	r4, 8004f70 <z_log_get_s_mask+0x18>
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	d300      	bcc.n	8004f72 <z_log_get_s_mask+0x1a>
}
 8004f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
 8004f72:	2c25      	cmp	r4, #37	; 0x25
 8004f74:	d102      	bne.n	8004f7c <z_log_get_s_mask+0x24>
			arm = !arm;
 8004f76:	f082 0201 	eor.w	r2, r2, #1
 8004f7a:	e7f4      	b.n	8004f66 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
 8004f7c:	2a00      	cmp	r2, #0
 8004f7e:	d0f2      	beq.n	8004f66 <z_log_get_s_mask+0xe>
 8004f80:	f814 c006 	ldrb.w	ip, [r4, r6]
 8004f84:	f01c 0f03 	tst.w	ip, #3
 8004f88:	d0ed      	beq.n	8004f66 <z_log_get_s_mask+0xe>
			if (curr == 's') {
 8004f8a:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
 8004f8c:	bf04      	itt	eq
 8004f8e:	fa07 f203 	lsleq.w	r2, r7, r3
 8004f92:	4310      	orreq	r0, r2
			arg++;
 8004f94:	3301      	adds	r3, #1
			arm = false;
 8004f96:	2200      	movs	r2, #0
 8004f98:	e7e5      	b.n	8004f66 <z_log_get_s_mask+0xe>
 8004f9a:	bf00      	nop
 8004f9c:	0800afae 	.word	0x0800afae

08004fa0 <log_core_init>:
{
 8004fa0:	b510      	push	{r4, lr}
	panic_mode = false;
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <log_core_init+0x30>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_lf_get_timestamp;
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <log_core_init+0x34>)
 8004faa:	4a0b      	ldr	r2, [pc, #44]	; (8004fd8 <log_core_init+0x38>)
 8004fac:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8004fae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fb2:	f000 fcc5 	bl	8005940 <log_output_timestamp_freq_set>
		log_msg_pool_init();
 8004fb6:	f000 fa73 	bl	80054a0 <log_msg_pool_init>
		log_list_init(&list);
 8004fba:	4808      	ldr	r0, [pc, #32]	; (8004fdc <log_core_init+0x3c>)
 8004fbc:	f003 fee3 	bl	8008d86 <log_list_init>
}
 8004fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8004fc4:	4906      	ldr	r1, [pc, #24]	; (8004fe0 <log_core_init+0x40>)
 8004fc6:	4807      	ldr	r0, [pc, #28]	; (8004fe4 <log_core_init+0x44>)
 8004fc8:	2304      	movs	r3, #4
 8004fca:	2228      	movs	r2, #40	; 0x28
 8004fcc:	f004 bc92 	b.w	80098f4 <k_mem_slab_init>
 8004fd0:	200007c1 	.word	0x200007c1
 8004fd4:	20000004 	.word	0x20000004
 8004fd8:	08008dc5 	.word	0x08008dc5
 8004fdc:	200005a8 	.word	0x200005a8
 8004fe0:	20002a80 	.word	0x20002a80
 8004fe4:	200005b0 	.word	0x200005b0

08004fe8 <get_msg>:
{
 8004fe8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004fea:	f04f 0310 	mov.w	r3, #16
 8004fee:	f3ef 8411 	mrs	r4, BASEPRI
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
 8004ffa:	4804      	ldr	r0, [pc, #16]	; (800500c <get_msg+0x24>)
 8004ffc:	f003 fed3 	bl	8008da6 <log_list_head_get>
	__asm__ volatile(
 8005000:	f384 8811 	msr	BASEPRI, r4
 8005004:	f3bf 8f6f 	isb	sy
}
 8005008:	bd10      	pop	{r4, pc}
 800500a:	bf00      	nop
 800500c:	200005a8 	.word	0x200005a8

08005010 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8005010:	4b06      	ldr	r3, [pc, #24]	; (800502c <z_log_dropped+0x1c>)
 8005012:	f3bf 8f5b 	dmb	ish
 8005016:	e853 2f00 	ldrex	r2, [r3]
 800501a:	3201      	adds	r2, #1
 800501c:	e843 2100 	strex	r1, r2, [r3]
 8005020:	2900      	cmp	r1, #0
 8005022:	d1f8      	bne.n	8005016 <z_log_dropped+0x6>
 8005024:	f3bf 8f5b 	dmb	ish
}
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	200005a0 	.word	0x200005a0

08005030 <z_log_dropped_read_and_clear>:
}
 8005030:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <z_log_dropped_read_and_clear+0x1c>)
 8005034:	f3bf 8f5b 	dmb	ish
 8005038:	4602      	mov	r2, r0
 800503a:	e853 0f00 	ldrex	r0, [r3]
 800503e:	e843 2100 	strex	r1, r2, [r3]
 8005042:	2900      	cmp	r1, #0
 8005044:	d1f9      	bne.n	800503a <z_log_dropped_read_and_clear+0xa>
 8005046:	f3bf 8f5b 	dmb	ish
 800504a:	4770      	bx	lr
 800504c:	200005a0 	.word	0x200005a0

08005050 <dropped_notify>:
{
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8005052:	f7ff ffed 	bl	8005030 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8005056:	4c0a      	ldr	r4, [pc, #40]	; (8005080 <dropped_notify+0x30>)
 8005058:	4d0a      	ldr	r5, [pc, #40]	; (8005084 <dropped_notify+0x34>)
 800505a:	1b2d      	subs	r5, r5, r4
 800505c:	4607      	mov	r7, r0
 800505e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8005060:	2600      	movs	r6, #0
 8005062:	42ae      	cmp	r6, r5
 8005064:	db00      	blt.n	8005068 <dropped_notify+0x18>
}
 8005066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8005068:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 800506a:	795b      	ldrb	r3, [r3, #5]
 800506c:	b12b      	cbz	r3, 800507a <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	b113      	cbz	r3, 800507a <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
 8005074:	4639      	mov	r1, r7
 8005076:	4620      	mov	r0, r4
 8005078:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 800507a:	3601      	adds	r6, #1
 800507c:	3410      	adds	r4, #16
 800507e:	e7f0      	b.n	8005062 <dropped_notify+0x12>
 8005080:	0800a0e4 	.word	0x0800a0e4
 8005084:	0800a0f4 	.word	0x0800a0f4

08005088 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8005088:	4a04      	ldr	r2, [pc, #16]	; (800509c <log_source_name_get+0x14>)
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <log_source_name_get+0x18>)
 800508c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 800508e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 8005092:	bf34      	ite	cc
 8005094:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
 8005098:	2000      	movcs	r0, #0
}
 800509a:	4770      	bx	lr
 800509c:	0800a0bc 	.word	0x0800a0bc
 80050a0:	0800a0e4 	.word	0x0800a0e4

080050a4 <log_backend_enable>:
	id += backend - log_backend_get(0);
 80050a4:	4a09      	ldr	r2, [pc, #36]	; (80050cc <log_backend_enable+0x28>)
	backend->cb->id = id;
 80050a6:	6843      	ldr	r3, [r0, #4]
 80050a8:	1a80      	subs	r0, r0, r2
{
 80050aa:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
 80050ac:	1100      	asrs	r0, r0, #4
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 80050ae:	4c08      	ldr	r4, [pc, #32]	; (80050d0 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
 80050b0:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
 80050b2:	3001      	adds	r0, #1
	backend->cb->active = true;
 80050b4:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
 80050b6:	7118      	strb	r0, [r3, #4]
 80050b8:	715a      	strb	r2, [r3, #5]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 80050ba:	7823      	ldrb	r3, [r4, #0]
 80050bc:	b913      	cbnz	r3, 80050c4 <log_backend_enable+0x20>
 80050be:	4805      	ldr	r0, [pc, #20]	; (80050d4 <log_backend_enable+0x30>)
 80050c0:	f002 fda4 	bl	8007c0c <z_impl_k_sem_give>
	backend_attached = true;
 80050c4:	2301      	movs	r3, #1
 80050c6:	7023      	strb	r3, [r4, #0]
}
 80050c8:	bd10      	pop	{r4, pc}
 80050ca:	bf00      	nop
 80050cc:	0800a0e4 	.word	0x0800a0e4
 80050d0:	200007c0 	.word	0x200007c0
 80050d4:	200001cc 	.word	0x200001cc

080050d8 <log_init>:
{
 80050d8:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80050da:	4b12      	ldr	r3, [pc, #72]	; (8005124 <log_init+0x4c>)
 80050dc:	f3bf 8f5b 	dmb	ish
 80050e0:	e853 5f00 	ldrex	r5, [r3]
 80050e4:	1c6a      	adds	r2, r5, #1
 80050e6:	e843 2100 	strex	r1, r2, [r3]
 80050ea:	2900      	cmp	r1, #0
 80050ec:	d1f8      	bne.n	80050e0 <log_init+0x8>
 80050ee:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 80050f2:	b92d      	cbnz	r5, 8005100 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
 80050f4:	4c0c      	ldr	r4, [pc, #48]	; (8005128 <log_init+0x50>)
 80050f6:	4e0d      	ldr	r6, [pc, #52]	; (800512c <log_init+0x54>)
 80050f8:	1b36      	subs	r6, r6, r4
 80050fa:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 80050fc:	42b5      	cmp	r5, r6
 80050fe:	db00      	blt.n	8005102 <log_init+0x2a>
}
 8005100:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 8005102:	7b23      	ldrb	r3, [r4, #12]
 8005104:	b153      	cbz	r3, 800511c <log_init+0x44>
			if (backend->api->init != NULL) {
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	b10b      	cbz	r3, 8005110 <log_init+0x38>
				backend->api->init(backend);
 800510c:	4620      	mov	r0, r4
 800510e:	4798      	blx	r3
			log_backend_enable(backend,
 8005110:	6863      	ldr	r3, [r4, #4]
 8005112:	2204      	movs	r2, #4
 8005114:	6819      	ldr	r1, [r3, #0]
 8005116:	4620      	mov	r0, r4
 8005118:	f7ff ffc4 	bl	80050a4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 800511c:	3501      	adds	r5, #1
 800511e:	3410      	adds	r4, #16
 8005120:	e7ec      	b.n	80050fc <log_init+0x24>
 8005122:	bf00      	nop
 8005124:	200005a4 	.word	0x200005a4
 8005128:	0800a0e4 	.word	0x0800a0e4
 800512c:	0800a0f4 	.word	0x0800a0f4

08005130 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
 8005130:	4b17      	ldr	r3, [pc, #92]	; (8005190 <z_log_strdup+0x60>)
 8005132:	4298      	cmp	r0, r3
{
 8005134:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005136:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8005138:	d302      	bcc.n	8005140 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 800513a:	4b16      	ldr	r3, [pc, #88]	; (8005194 <z_log_strdup+0x64>)
 800513c:	4298      	cmp	r0, r3
 800513e:	d321      	bcc.n	8005184 <z_log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8005140:	4815      	ldr	r0, [pc, #84]	; (8005198 <z_log_strdup+0x68>)
 8005142:	2200      	movs	r2, #0
 8005144:	2300      	movs	r3, #0
 8005146:	a901      	add	r1, sp, #4
 8005148:	f002 fc56 	bl	80079f8 <k_mem_slab_alloc>
	if (err != 0) {
 800514c:	4605      	mov	r5, r0
 800514e:	b9e0      	cbnz	r0, 800518a <z_log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005150:	2201      	movs	r2, #1
 8005152:	9b01      	ldr	r3, [sp, #4]
 8005154:	f3bf 8f5b 	dmb	ish
 8005158:	e853 1f00 	ldrex	r1, [r3]
 800515c:	e843 2000 	strex	r0, r2, [r3]
 8005160:	2800      	cmp	r0, #0
 8005162:	d1f9      	bne.n	8005158 <z_log_strdup+0x28>
 8005164:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 8005168:	9e01      	ldr	r6, [sp, #4]
 800516a:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 800516c:	221f      	movs	r2, #31
 800516e:	4618      	mov	r0, r3
 8005170:	4621      	mov	r1, r4
 8005172:	f004 fdac 	bl	8009cce <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8005176:	227e      	movs	r2, #126	; 0x7e
 8005178:	4603      	mov	r3, r0
 800517a:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 800517e:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
 8005182:	461c      	mov	r4, r3
}
 8005184:	4620      	mov	r0, r4
 8005186:	b002      	add	sp, #8
 8005188:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
 800518a:	4b04      	ldr	r3, [pc, #16]	; (800519c <z_log_strdup+0x6c>)
 800518c:	e7f9      	b.n	8005182 <z_log_strdup+0x52>
 800518e:	bf00      	nop
 8005190:	08009d14 	.word	0x08009d14
 8005194:	0800b0b0 	.word	0x0800b0b0
 8005198:	200005b0 	.word	0x200005b0
 800519c:	0800a783 	.word	0x0800a783

080051a0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 80051a0:	b148      	cbz	r0, 80051b6 <log_is_strdup+0x16>
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <log_is_strdup+0x18>)
 80051a4:	4298      	cmp	r0, r3
 80051a6:	d305      	bcc.n	80051b4 <log_is_strdup+0x14>
 80051a8:	33a0      	adds	r3, #160	; 0xa0
 80051aa:	4298      	cmp	r0, r3
 80051ac:	bf2c      	ite	cs
 80051ae:	2000      	movcs	r0, #0
 80051b0:	2001      	movcc	r0, #1
 80051b2:	4770      	bx	lr
 80051b4:	2000      	movs	r0, #0
}
 80051b6:	4770      	bx	lr
 80051b8:	20002a80 	.word	0x20002a80

080051bc <z_impl_log_process>:
{
 80051bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
 80051c0:	4b47      	ldr	r3, [pc, #284]	; (80052e0 <z_impl_log_process+0x124>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
{
 80051c4:	b085      	sub	sp, #20
 80051c6:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 80051c8:	b903      	cbnz	r3, 80051cc <z_impl_log_process+0x10>
 80051ca:	b300      	cbz	r0, 800520e <z_impl_log_process+0x52>
	msg = get_msg();
 80051cc:	f7ff ff0c 	bl	8004fe8 <get_msg>
	if (msg.msg) {
 80051d0:	4605      	mov	r5, r0
 80051d2:	b178      	cbz	r0, 80051f4 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80051d4:	f3bf 8f5b 	dmb	ish
 80051d8:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <z_impl_log_process+0x128>)
 80051da:	e853 2f00 	ldrex	r2, [r3]
 80051de:	3a01      	subs	r2, #1
 80051e0:	e843 2100 	strex	r1, r2, [r3]
 80051e4:	2900      	cmp	r1, #0
 80051e6:	d1f8      	bne.n	80051da <z_impl_log_process+0x1e>
 80051e8:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
 80051ec:	b19c      	cbz	r4, 8005216 <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
 80051ee:	4628      	mov	r0, r5
 80051f0:	f003 fee0 	bl	8008fb4 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
 80051f4:	b92c      	cbnz	r4, 8005202 <z_impl_log_process+0x46>
	return dropped_cnt > 0;
 80051f6:	4b3c      	ldr	r3, [pc, #240]	; (80052e8 <z_impl_log_process+0x12c>)
	if (!bypass && z_log_dropped_pending()) {
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	dd01      	ble.n	8005202 <z_impl_log_process+0x46>
		dropped_notify();
 80051fe:	f7ff ff27 	bl	8005050 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
 8005202:	483a      	ldr	r0, [pc, #232]	; (80052ec <z_impl_log_process+0x130>)
 8005204:	f003 fdcd 	bl	8008da2 <log_list_head_peek>
 8005208:	1e04      	subs	r4, r0, #0
 800520a:	bf18      	it	ne
 800520c:	2401      	movne	r4, #1
}
 800520e:	4620      	mov	r0, r4
 8005210:	b005      	add	sp, #20
 8005212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
 8005216:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <z_impl_log_process+0x134>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	b9e3      	cbnz	r3, 8005256 <z_impl_log_process+0x9a>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 800521c:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
 800521e:	07db      	lsls	r3, r3, #31
 8005220:	d419      	bmi.n	8005256 <z_impl_log_process+0x9a>
	msg_str = log_msg_str_get(msg);
 8005222:	f003 feda 	bl	8008fda <log_msg_str_get>
 8005226:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8005228:	4628      	mov	r0, r5
 800522a:	f003 fea1 	bl	8008f70 <log_msg_nargs_get>
 800522e:	4601      	mov	r1, r0
 8005230:	4638      	mov	r0, r7
 8005232:	f7ff fe91 	bl	8004f58 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8005236:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8005310 <z_impl_log_process+0x154>
 800523a:	4b2e      	ldr	r3, [pc, #184]	; (80052f4 <z_impl_log_process+0x138>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 800523c:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8005314 <z_impl_log_process+0x158>
 8005240:	eba3 0308 	sub.w	r3, r3, r8
 8005244:	08db      	lsrs	r3, r3, #3
 8005246:	9303      	str	r3, [sp, #12]
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <z_impl_log_process+0x13c>)
 800524a:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 800524e:	4606      	mov	r6, r0
 8005250:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
 8005254:	b936      	cbnz	r6, 8005264 <z_impl_log_process+0xa8>
 8005256:	4e29      	ldr	r6, [pc, #164]	; (80052fc <z_impl_log_process+0x140>)
 8005258:	4f29      	ldr	r7, [pc, #164]	; (8005300 <z_impl_log_process+0x144>)
 800525a:	1bbf      	subs	r7, r7, r6
 800525c:	113f      	asrs	r7, r7, #4
 800525e:	f04f 0800 	mov.w	r8, #0
 8005262:	e03a      	b.n	80052da <z_impl_log_process+0x11e>
		idx = 31 - __builtin_clz(mask);
 8005264:	fab6 f186 	clz	r1, r6
 8005268:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 800526c:	4649      	mov	r1, r9
 800526e:	4628      	mov	r0, r5
 8005270:	f003 fe81 	bl	8008f76 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
 8005274:	4b23      	ldr	r3, [pc, #140]	; (8005304 <z_impl_log_process+0x148>)
 8005276:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
 8005278:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 800527a:	d302      	bcc.n	8005282 <z_impl_log_process+0xc6>
		if (!is_rodata(str) && !log_is_strdup(str) &&
 800527c:	4a22      	ldr	r2, [pc, #136]	; (8005308 <z_impl_log_process+0x14c>)
 800527e:	4290      	cmp	r0, r2
 8005280:	d31a      	bcc.n	80052b8 <z_impl_log_process+0xfc>
 8005282:	4608      	mov	r0, r1
 8005284:	f7ff ff8c 	bl	80051a0 <log_is_strdup>
 8005288:	4602      	mov	r2, r0
 800528a:	b9a8      	cbnz	r0, 80052b8 <z_impl_log_process+0xfc>
 800528c:	4b1f      	ldr	r3, [pc, #124]	; (800530c <z_impl_log_process+0x150>)
 800528e:	4299      	cmp	r1, r3
 8005290:	d012      	beq.n	80052b8 <z_impl_log_process+0xfc>
	return msg->hdr.ids.source_id;
 8005292:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8005294:	9903      	ldr	r1, [sp, #12]
 8005296:	f3c3 1389 	ubfx	r3, r3, #6, #10
 800529a:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
 800529c:	bf38      	it	cc
 800529e:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 80052a2:	ea4f 138a 	mov.w	r3, sl, lsl #6
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	f8ad 3000 	strh.w	r3, [sp]
 80052ae:	4649      	mov	r1, r9
 80052b0:	463b      	mov	r3, r7
 80052b2:	4658      	mov	r0, fp
 80052b4:	f003 fdcf 	bl	8008e56 <log_3>
		mask &= ~BIT(idx);
 80052b8:	2301      	movs	r3, #1
 80052ba:	fa03 f109 	lsl.w	r1, r3, r9
 80052be:	ea26 0601 	bic.w	r6, r6, r1
 80052c2:	e7c7      	b.n	8005254 <z_impl_log_process+0x98>
	return backend->cb->active;
 80052c4:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
 80052c6:	795b      	ldrb	r3, [r3, #5]
 80052c8:	b123      	cbz	r3, 80052d4 <z_impl_log_process+0x118>
	backend->api->put(backend, msg);
 80052ca:	6833      	ldr	r3, [r6, #0]
 80052cc:	4629      	mov	r1, r5
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4630      	mov	r0, r6
 80052d2:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 80052d4:	f108 0801 	add.w	r8, r8, #1
 80052d8:	3610      	adds	r6, #16
 80052da:	45b8      	cmp	r8, r7
 80052dc:	dbf2      	blt.n	80052c4 <z_impl_log_process+0x108>
 80052de:	e786      	b.n	80051ee <z_impl_log_process+0x32>
 80052e0:	200007c0 	.word	0x200007c0
 80052e4:	2000059c 	.word	0x2000059c
 80052e8:	200005a0 	.word	0x200005a0
 80052ec:	200005a8 	.word	0x200005a8
 80052f0:	200007c1 	.word	0x200007c1
 80052f4:	0800a0e4 	.word	0x0800a0e4
 80052f8:	0800a0bc 	.word	0x0800a0bc
 80052fc:	0800a0e4 	.word	0x0800a0e4
 8005300:	0800a0f4 	.word	0x0800a0f4
 8005304:	08009d14 	.word	0x08009d14
 8005308:	0800b0b0 	.word	0x0800b0b0
 800530c:	0800a783 	.word	0x0800a783
 8005310:	0800a0bc 	.word	0x0800a0bc
 8005314:	0800a79d 	.word	0x0800a79d

08005318 <log_process_thread_func>:
{
 8005318:	b510      	push	{r4, lr}
	log_init();
 800531a:	f7ff fedd 	bl	80050d8 <log_init>
	return z_impl_k_current_get();
 800531e:	f002 fe89 	bl	8008034 <z_impl_k_current_get>
	proc_tid = process_tid;
 8005322:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <log_process_thread_func+0x3c>)
 8005324:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8005326:	b130      	cbz	r0, 8005336 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <log_process_thread_func+0x40>)
	    process_tid &&
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b09      	cmp	r3, #9
 800532e:	dd02      	ble.n	8005336 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
 8005330:	480a      	ldr	r0, [pc, #40]	; (800535c <log_process_thread_func+0x44>)
 8005332:	f002 fc6b 	bl	8007c0c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 8005336:	4c09      	ldr	r4, [pc, #36]	; (800535c <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8005338:	2000      	movs	r0, #0
 800533a:	f7ff ff3f 	bl	80051bc <z_impl_log_process>
		if (log_process(false) == false) {
 800533e:	2800      	cmp	r0, #0
 8005340:	d1fa      	bne.n	8005338 <log_process_thread_func+0x20>
 8005342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800534a:	4620      	mov	r0, r4
 800534c:	f002 fc7e 	bl	8007c4c <z_impl_k_sem_take>
 8005350:	e7f2      	b.n	8005338 <log_process_thread_func+0x20>
 8005352:	bf00      	nop
 8005354:	200005d0 	.word	0x200005d0
 8005358:	2000059c 	.word	0x2000059c
 800535c:	200001cc 	.word	0x200001cc

08005360 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
 8005360:	4b29      	ldr	r3, [pc, #164]	; (8005408 <msg_finalize+0xa8>)
{
 8005362:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
 8005364:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
 8005366:	8141      	strh	r1, [r0, #10]
{
 8005368:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 800536a:	4798      	blx	r3
 800536c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800536e:	f04f 0310 	mov.w	r3, #16
 8005372:	f3ef 8511 	mrs	r5, BASEPRI
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 800537e:	4823      	ldr	r0, [pc, #140]	; (800540c <msg_finalize+0xac>)
 8005380:	4621      	mov	r1, r4
 8005382:	f003 fd04 	bl	8008d8e <log_list_add_tail>
	__asm__ volatile(
 8005386:	f385 8811 	msr	BASEPRI, r5
 800538a:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800538e:	f3bf 8f5b 	dmb	ish
 8005392:	4b1f      	ldr	r3, [pc, #124]	; (8005410 <msg_finalize+0xb0>)
 8005394:	e853 2f00 	ldrex	r2, [r3]
 8005398:	3201      	adds	r2, #1
 800539a:	e843 2100 	strex	r1, r2, [r3]
 800539e:	2900      	cmp	r1, #0
 80053a0:	d1f8      	bne.n	8005394 <msg_finalize+0x34>
 80053a2:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 80053a6:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <msg_finalize+0xb4>)
 80053a8:	7812      	ldrb	r2, [r2, #0]
 80053aa:	b182      	cbz	r2, 80053ce <msg_finalize+0x6e>
	__asm__ volatile(
 80053ac:	f04f 0310 	mov.w	r3, #16
 80053b0:	f3ef 8411 	mrs	r4, BASEPRI
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	2000      	movs	r0, #0
 80053be:	f7ff fefd 	bl	80051bc <z_impl_log_process>
	__asm__ volatile(
 80053c2:	f384 8811 	msr	BASEPRI, r4
 80053c6:	f3bf 8f6f 	isb	sy
}
 80053ca:	b003      	add	sp, #12
 80053cc:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80053ce:	4a12      	ldr	r2, [pc, #72]	; (8005418 <msg_finalize+0xb8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	d0f8      	beq.n	80053ca <msg_finalize+0x6a>
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d10a      	bne.n	80053f2 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
 80053dc:	2200      	movs	r2, #0
 80053de:	2300      	movs	r3, #0
 80053e0:	e9cd 2300 	strd	r2, r3, [sp]
 80053e4:	480d      	ldr	r0, [pc, #52]	; (800541c <msg_finalize+0xbc>)
 80053e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80053ea:	2300      	movs	r3, #0
 80053ec:	f003 f80e 	bl	800840c <z_impl_k_timer_start>
 80053f0:	e7eb      	b.n	80053ca <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80053f2:	2b0a      	cmp	r3, #10
 80053f4:	d1e9      	bne.n	80053ca <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
 80053f6:	4809      	ldr	r0, [pc, #36]	; (800541c <msg_finalize+0xbc>)
 80053f8:	f004 fc08 	bl	8009c0c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80053fc:	4808      	ldr	r0, [pc, #32]	; (8005420 <msg_finalize+0xc0>)
}
 80053fe:	b003      	add	sp, #12
 8005400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005404:	f002 bc02 	b.w	8007c0c <z_impl_k_sem_give>
 8005408:	20000004 	.word	0x20000004
 800540c:	200005a8 	.word	0x200005a8
 8005410:	2000059c 	.word	0x2000059c
 8005414:	200007c1 	.word	0x200007c1
 8005418:	200005d0 	.word	0x200005d0
 800541c:	200002b8 	.word	0x200002b8
 8005420:	200001cc 	.word	0x200001cc

08005424 <z_impl_log_panic>:
{
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 8005426:	4f0e      	ldr	r7, [pc, #56]	; (8005460 <z_impl_log_panic+0x3c>)
 8005428:	783d      	ldrb	r5, [r7, #0]
 800542a:	b975      	cbnz	r5, 800544a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
 800542c:	4c0d      	ldr	r4, [pc, #52]	; (8005464 <z_impl_log_panic+0x40>)
 800542e:	4e0e      	ldr	r6, [pc, #56]	; (8005468 <z_impl_log_panic+0x44>)
	log_init();
 8005430:	f7ff fe52 	bl	80050d8 <log_init>
 8005434:	1b36      	subs	r6, r6, r4
 8005436:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8005438:	42b5      	cmp	r5, r6
 800543a:	db07      	blt.n	800544c <z_impl_log_panic+0x28>
 800543c:	2000      	movs	r0, #0
 800543e:	f7ff febd 	bl	80051bc <z_impl_log_process>
		while (log_process(false) == true) {
 8005442:	2800      	cmp	r0, #0
 8005444:	d1fa      	bne.n	800543c <z_impl_log_panic+0x18>
	panic_mode = true;
 8005446:	2301      	movs	r3, #1
 8005448:	703b      	strb	r3, [r7, #0]
}
 800544a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 800544c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 800544e:	795b      	ldrb	r3, [r3, #5]
 8005450:	b11b      	cbz	r3, 800545a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	4620      	mov	r0, r4
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 800545a:	3501      	adds	r5, #1
 800545c:	3410      	adds	r4, #16
 800545e:	e7eb      	b.n	8005438 <z_impl_log_panic+0x14>
 8005460:	200007c1 	.word	0x200007c1
 8005464:	0800a0e4 	.word	0x0800a0e4
 8005468:	0800a0f4 	.word	0x0800a0f4

0800546c <log_free>:
{
 800546c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 800546e:	3804      	subs	r0, #4
 8005470:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8005472:	f3bf 8f5b 	dmb	ish
 8005476:	e850 3f00 	ldrex	r3, [r0]
 800547a:	1e5a      	subs	r2, r3, #1
 800547c:	e840 2100 	strex	r1, r2, [r0]
 8005480:	2900      	cmp	r1, #0
 8005482:	d1f8      	bne.n	8005476 <log_free+0xa>
 8005484:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 8005488:	2b01      	cmp	r3, #1
 800548a:	d103      	bne.n	8005494 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 800548c:	4803      	ldr	r0, [pc, #12]	; (800549c <log_free+0x30>)
 800548e:	a901      	add	r1, sp, #4
 8005490:	f004 fa4c 	bl	800992c <k_mem_slab_free>
}
 8005494:	b003      	add	sp, #12
 8005496:	f85d fb04 	ldr.w	pc, [sp], #4
 800549a:	bf00      	nop
 800549c:	200005b0 	.word	0x200005b0

080054a0 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 80054a0:	2320      	movs	r3, #32
 80054a2:	4902      	ldr	r1, [pc, #8]	; (80054ac <log_msg_pool_init+0xc>)
 80054a4:	4802      	ldr	r0, [pc, #8]	; (80054b0 <log_msg_pool_init+0x10>)
 80054a6:	461a      	mov	r2, r3
 80054a8:	f004 ba24 	b.w	80098f4 <k_mem_slab_init>
 80054ac:	20002b20 	.word	0x20002b20
 80054b0:	200005d4 	.word	0x200005d4

080054b4 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 80054b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
 80054b6:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
 80054b8:	4d09      	ldr	r5, [pc, #36]	; (80054e0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	2001      	movs	r0, #1
 80054be:	f7ff fe7d 	bl	80051bc <z_impl_log_process>
 80054c2:	4604      	mov	r4, r0
			z_log_dropped();
 80054c4:	f7ff fda4 	bl	8005010 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 80054c8:	2200      	movs	r2, #0
 80054ca:	2300      	movs	r3, #0
 80054cc:	a901      	add	r1, sp, #4
 80054ce:	4628      	mov	r0, r5
 80054d0:	f002 fa92 	bl	80079f8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 80054d4:	b108      	cbz	r0, 80054da <log_msg_no_space_handle+0x26>
 80054d6:	2c00      	cmp	r4, #0
 80054d8:	d1f0      	bne.n	80054bc <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
 80054da:	9801      	ldr	r0, [sp, #4]
 80054dc:	b003      	add	sp, #12
 80054de:	bd30      	pop	{r4, r5, pc}
 80054e0:	200005d4 	.word	0x200005d4

080054e4 <log_msg_chunk_alloc>:
{
 80054e4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 80054ea:	4807      	ldr	r0, [pc, #28]	; (8005508 <log_msg_chunk_alloc+0x24>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	2300      	movs	r3, #0
 80054f0:	a901      	add	r1, sp, #4
 80054f2:	f002 fa81 	bl	80079f8 <k_mem_slab_alloc>
	if (err != 0) {
 80054f6:	b110      	cbz	r0, 80054fe <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
 80054f8:	f7ff ffdc 	bl	80054b4 <log_msg_no_space_handle>
 80054fc:	9001      	str	r0, [sp, #4]
}
 80054fe:	9801      	ldr	r0, [sp, #4]
 8005500:	b003      	add	sp, #12
 8005502:	f85d fb04 	ldr.w	pc, [sp], #4
 8005506:	bf00      	nop
 8005508:	200005d4 	.word	0x200005d4

0800550c <msg_free>:
{
 800550c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 800550e:	7a03      	ldrb	r3, [r0, #8]
 8005510:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
 8005512:	07dc      	lsls	r4, r3, #31
{
 8005514:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
 8005516:	d41e      	bmi.n	8005556 <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
 8005518:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
 800551a:	092d      	lsrs	r5, r5, #4
 800551c:	d01b      	beq.n	8005556 <msg_free+0x4a>
		uint32_t smask = 0U;
 800551e:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
 8005520:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
 8005522:	9801      	ldr	r0, [sp, #4]
 8005524:	4631      	mov	r1, r6
 8005526:	f003 fd26 	bl	8008f76 <log_msg_arg_get>
 800552a:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
 800552c:	f7ff fe38 	bl	80051a0 <log_is_strdup>
 8005530:	b170      	cbz	r0, 8005550 <msg_free+0x44>
				if (smask == 0U) {
 8005532:	b934      	cbnz	r4, 8005542 <msg_free+0x36>
					smask = z_log_get_s_mask(
 8005534:	9b01      	ldr	r3, [sp, #4]
 8005536:	4629      	mov	r1, r5
 8005538:	6918      	ldr	r0, [r3, #16]
 800553a:	f7ff fd0d 	bl	8004f58 <z_log_get_s_mask>
					if (smask == 0U) {
 800553e:	4604      	mov	r4, r0
 8005540:	b148      	cbz	r0, 8005556 <msg_free+0x4a>
				if (smask & BIT(i)) {
 8005542:	fa24 f306 	lsr.w	r3, r4, r6
 8005546:	07d9      	lsls	r1, r3, #31
 8005548:	d502      	bpl.n	8005550 <msg_free+0x44>
					log_free(buf);
 800554a:	4638      	mov	r0, r7
 800554c:	f7ff ff8e 	bl	800546c <log_free>
		for (i = 0U; i < nargs; i++) {
 8005550:	3601      	adds	r6, #1
 8005552:	42ae      	cmp	r6, r5
 8005554:	d3e5      	bcc.n	8005522 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
 8005556:	9b01      	ldr	r3, [sp, #4]
 8005558:	7a1a      	ldrb	r2, [r3, #8]
 800555a:	0792      	lsls	r2, r2, #30
 800555c:	d504      	bpl.n	8005568 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
 800555e:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8005560:	4c08      	ldr	r4, [pc, #32]	; (8005584 <msg_free+0x78>)
 8005562:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
 8005564:	9b03      	ldr	r3, [sp, #12]
 8005566:	b92b      	cbnz	r3, 8005574 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 8005568:	4806      	ldr	r0, [pc, #24]	; (8005584 <msg_free+0x78>)
 800556a:	a901      	add	r1, sp, #4
 800556c:	f004 f9de 	bl	800992c <k_mem_slab_free>
}
 8005570:	b005      	add	sp, #20
 8005572:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
 8005574:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8005576:	a903      	add	r1, sp, #12
 8005578:	4620      	mov	r0, r4
 800557a:	f004 f9d7 	bl	800992c <k_mem_slab_free>
		cont = next;
 800557e:	9503      	str	r5, [sp, #12]
 8005580:	e7f0      	b.n	8005564 <msg_free+0x58>
 8005582:	bf00      	nop
 8005584:	200005d4 	.word	0x200005d4

08005588 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8005588:	b40e      	push	{r1, r2, r3}
 800558a:	b503      	push	{r0, r1, lr}
 800558c:	ab03      	add	r3, sp, #12
 800558e:	4601      	mov	r1, r0
 8005590:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8005594:	4804      	ldr	r0, [pc, #16]	; (80055a8 <print_formatted+0x20>)
	va_start(args, fmt);
 8005596:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8005598:	f7fc f98e 	bl	80018b8 <cbvprintf>
	va_end(args);

	return length;
}
 800559c:	b002      	add	sp, #8
 800559e:	f85d eb04 	ldr.w	lr, [sp], #4
 80055a2:	b003      	add	sp, #12
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	0800938f 	.word	0x0800938f

080055ac <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 80055ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b0:	461d      	mov	r5, r3
 80055b2:	9b08      	ldr	r3, [sp, #32]
 80055b4:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80055b6:	06da      	lsls	r2, r3, #27
{
 80055b8:	4604      	mov	r4, r0
 80055ba:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80055bc:	d405      	bmi.n	80055ca <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80055be:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 80055c0:	bf4c      	ite	mi
 80055c2:	492b      	ldrmi	r1, [pc, #172]	; (8005670 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
 80055c4:	492b      	ldrpl	r1, [pc, #172]	; (8005674 <hexdump_line_print+0xc8>)
 80055c6:	f7ff ffdf 	bl	8005588 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
 80055ca:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800567c <hexdump_line_print+0xd0>
{
 80055ce:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
 80055d2:	45a8      	cmp	r8, r5
 80055d4:	db2d      	blt.n	8005632 <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 80055d6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005680 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
 80055da:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005684 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
 80055de:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800567c <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80055e2:	2500      	movs	r5, #0
		if (i < length) {
 80055e4:	42bd      	cmp	r5, r7
 80055e6:	d232      	bcs.n	800564e <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
 80055e8:	5d72      	ldrb	r2, [r6, r5]
 80055ea:	4649      	mov	r1, r9
 80055ec:	4620      	mov	r0, r4
 80055ee:	f7ff ffcb 	bl	8005588 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80055f2:	3501      	adds	r5, #1
 80055f4:	2d10      	cmp	r5, #16
 80055f6:	d123      	bne.n	8005640 <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");
 80055f8:	491f      	ldr	r1, [pc, #124]	; (8005678 <hexdump_line_print+0xcc>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
 80055fa:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800567c <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
 80055fe:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005688 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
 8005602:	f8df a088 	ldr.w	sl, [pc, #136]	; 800568c <hexdump_line_print+0xe0>
	print_formatted(output, "|");
 8005606:	4620      	mov	r0, r4
 8005608:	f7ff ffbe 	bl	8005588 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800560c:	2500      	movs	r5, #0
		if (i < length) {
 800560e:	42af      	cmp	r7, r5
 8005610:	d929      	bls.n	8005666 <hexdump_line_print+0xba>
			char c = (char)data[i];
 8005612:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
 8005614:	f812 3009 	ldrb.w	r3, [r2, r9]
 8005618:	f013 0f97 	tst.w	r3, #151	; 0x97
 800561c:	bf08      	it	eq
 800561e:	222e      	moveq	r2, #46	; 0x2e
 8005620:	4651      	mov	r1, sl
 8005622:	4620      	mov	r0, r4
 8005624:	f7ff ffb0 	bl	8005588 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8005628:	3501      	adds	r5, #1
 800562a:	2d10      	cmp	r5, #16
 800562c:	d114      	bne.n	8005658 <hexdump_line_print+0xac>
		}
	}
}
 800562e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
 8005632:	4649      	mov	r1, r9
 8005634:	4620      	mov	r0, r4
 8005636:	f7ff ffa7 	bl	8005588 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 800563a:	f108 0801 	add.w	r8, r8, #1
 800563e:	e7c8      	b.n	80055d2 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 8005640:	076a      	lsls	r2, r5, #29
 8005642:	d1cf      	bne.n	80055e4 <hexdump_line_print+0x38>
			print_formatted(output, " ");
 8005644:	4651      	mov	r1, sl
 8005646:	4620      	mov	r0, r4
 8005648:	f7ff ff9e 	bl	8005588 <print_formatted>
 800564c:	e7ca      	b.n	80055e4 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
 800564e:	4641      	mov	r1, r8
 8005650:	4620      	mov	r0, r4
 8005652:	f7ff ff99 	bl	8005588 <print_formatted>
 8005656:	e7cc      	b.n	80055f2 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 8005658:	076b      	lsls	r3, r5, #29
 800565a:	d1d8      	bne.n	800560e <hexdump_line_print+0x62>
			print_formatted(output, " ");
 800565c:	4641      	mov	r1, r8
 800565e:	4620      	mov	r0, r4
 8005660:	f7ff ff92 	bl	8005588 <print_formatted>
 8005664:	e7d3      	b.n	800560e <hexdump_line_print+0x62>
			print_formatted(output, " ");
 8005666:	4641      	mov	r1, r8
 8005668:	4620      	mov	r0, r4
 800566a:	f7ff ff8d 	bl	8005588 <print_formatted>
 800566e:	e7db      	b.n	8005628 <hexdump_line_print+0x7c>
 8005670:	0800a7e1 	.word	0x0800a7e1
 8005674:	0800a7e0 	.word	0x0800a7e0
 8005678:	0800a7ed 	.word	0x0800a7ed
 800567c:	0800a7eb 	.word	0x0800a7eb
 8005680:	0800a7e9 	.word	0x0800a7e9
 8005684:	0800a7e3 	.word	0x0800a7e3
 8005688:	0800afae 	.word	0x0800afae
 800568c:	0800a7ef 	.word	0x0800a7ef

08005690 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
 8005696:	f011 0602 	ands.w	r6, r1, #2
{
 800569a:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800569e:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 80056a2:	9205      	str	r2, [sp, #20]
 80056a4:	4607      	mov	r7, r0
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 80056a6:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 80056aa:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
 80056ae:	d007      	beq.n	80056c0 <prefix_print+0x30>
	if (!format) {
 80056b0:	f011 0f44 	tst.w	r1, #68	; 0x44
 80056b4:	d139      	bne.n	800572a <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
 80056b6:	4934      	ldr	r1, [pc, #208]	; (8005788 <prefix_print+0xf8>)
 80056b8:	461a      	mov	r2, r3
 80056ba:	f7ff ff65 	bl	8005588 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 80056be:	4606      	mov	r6, r0
	if (color) {
 80056c0:	f1ba 0f00 	cmp.w	sl, #0
 80056c4:	d00a      	beq.n	80056dc <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
 80056c6:	4b31      	ldr	r3, [pc, #196]	; (800578c <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
 80056c8:	4931      	ldr	r1, [pc, #196]	; (8005790 <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
 80056ca:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
 80056ce:	4b31      	ldr	r3, [pc, #196]	; (8005794 <prefix_print+0x104>)
 80056d0:	4638      	mov	r0, r7
 80056d2:	2a00      	cmp	r2, #0
 80056d4:	bf08      	it	eq
 80056d6:	461a      	moveq	r2, r3
 80056d8:	f7ff ff56 	bl	8005588 <print_formatted>
	if (level_on) {
 80056dc:	b13d      	cbz	r5, 80056ee <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
 80056de:	4b2e      	ldr	r3, [pc, #184]	; (8005798 <prefix_print+0x108>)
 80056e0:	492e      	ldr	r1, [pc, #184]	; (800579c <prefix_print+0x10c>)
 80056e2:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 80056e6:	4638      	mov	r0, r7
 80056e8:	f7ff ff4e 	bl	8005588 <print_formatted>
 80056ec:	4605      	mov	r5, r0
	if (source_id >= 0) {
 80056ee:	f1b9 0f00 	cmp.w	r9, #0
 80056f2:	db16      	blt.n	8005722 <prefix_print+0x92>
		total += print_formatted(output,
 80056f4:	9b05      	ldr	r3, [sp, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d043      	beq.n	8005782 <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 80056fa:	2301      	movs	r3, #1
 80056fc:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
 8005700:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <prefix_print+0x110>)
 8005702:	4c28      	ldr	r4, [pc, #160]	; (80057a4 <prefix_print+0x114>)
 8005704:	f018 0f10 	tst.w	r8, #16
 8005708:	bf18      	it	ne
 800570a:	461c      	movne	r4, r3
 800570c:	4649      	mov	r1, r9
 800570e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8005712:	f7ff fcb9 	bl	8005088 <log_source_name_get>
 8005716:	4621      	mov	r1, r4
 8005718:	4602      	mov	r2, r0
 800571a:	4638      	mov	r0, r7
 800571c:	f7ff ff34 	bl	8005588 <print_formatted>
 8005720:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
 8005722:	19a8      	adds	r0, r5, r6
 8005724:	b007      	add	sp, #28
 8005726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
 800572a:	4a1f      	ldr	r2, [pc, #124]	; (80057a8 <prefix_print+0x118>)
 800572c:	6811      	ldr	r1, [r2, #0]
 800572e:	b331      	cbz	r1, 800577e <prefix_print+0xee>
		timestamp /= timestamp_div;
 8005730:	4a1e      	ldr	r2, [pc, #120]	; (80057ac <prefix_print+0x11c>)
 8005732:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 8005736:	6814      	ldr	r4, [r2, #0]
 8005738:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
 800573c:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
 8005740:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
 8005744:	fbb4 f2f6 	udiv	r2, r4, r6
 8005748:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
 800574c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
 8005750:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
 8005754:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8005758:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
 800575c:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8005760:	fb01 441e 	mls	r4, r1, lr, r4
			length = print_formatted(output,
 8005764:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8005768:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
 800576c:	9600      	str	r6, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800576e:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
 8005772:	e9cd e101 	strd	lr, r1, [sp, #4]
 8005776:	490e      	ldr	r1, [pc, #56]	; (80057b0 <prefix_print+0x120>)
 8005778:	f7ff ff06 	bl	8005588 <print_formatted>
 800577c:	e79f      	b.n	80056be <prefix_print+0x2e>
		length = 0;
 800577e:	4608      	mov	r0, r1
 8005780:	e79d      	b.n	80056be <prefix_print+0x2e>
		total += print_formatted(output,
 8005782:	4c08      	ldr	r4, [pc, #32]	; (80057a4 <prefix_print+0x114>)
 8005784:	e7c2      	b.n	800570c <prefix_print+0x7c>
 8005786:	bf00      	nop
 8005788:	0800a800 	.word	0x0800a800
 800578c:	0800a378 	.word	0x0800a378
 8005790:	0800a825 	.word	0x0800a825
 8005794:	0800a7f2 	.word	0x0800a7f2
 8005798:	0800a38c 	.word	0x0800a38c
 800579c:	0800a828 	.word	0x0800a828
 80057a0:	0800a7fc 	.word	0x0800a7fc
 80057a4:	0800a7f7 	.word	0x0800a7f7
 80057a8:	200005f4 	.word	0x200005f4
 80057ac:	200005f8 	.word	0x200005f8
 80057b0:	0800a809 	.word	0x0800a809

080057b4 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	460c      	mov	r4, r1
	if (color) {
 80057b8:	07e1      	lsls	r1, r4, #31
{
 80057ba:	4605      	mov	r5, r0
	if (color) {
 80057bc:	d503      	bpl.n	80057c6 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
 80057be:	4a08      	ldr	r2, [pc, #32]	; (80057e0 <postfix_print+0x2c>)
 80057c0:	4908      	ldr	r1, [pc, #32]	; (80057e4 <postfix_print+0x30>)
 80057c2:	f7ff fee1 	bl	8005588 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80057c6:	06e2      	lsls	r2, r4, #27
 80057c8:	d408      	bmi.n	80057dc <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80057ca:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 80057cc:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 80057ce:	bf4c      	ite	mi
 80057d0:	4905      	ldrmi	r1, [pc, #20]	; (80057e8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 80057d2:	4906      	ldrpl	r1, [pc, #24]	; (80057ec <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
 80057d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 80057d8:	f7ff bed6 	b.w	8005588 <print_formatted>
}
 80057dc:	bd38      	pop	{r3, r4, r5, pc}
 80057de:	bf00      	nop
 80057e0:	0800a7f2 	.word	0x0800a7f2
 80057e4:	0800a825 	.word	0x0800a825
 80057e8:	0800a7e1 	.word	0x0800a7e1
 80057ec:	0800a7e0 	.word	0x0800a7e0

080057f0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
 80057f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
 80057f4:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
 80057f6:	f013 0807 	ands.w	r8, r3, #7
{
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	4605      	mov	r5, r0
 80057fe:	460e      	mov	r6, r1
 8005800:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
 8005802:	d022      	beq.n	800584a <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8005804:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
 8005806:	8949      	ldrh	r1, [r1, #10]
 8005808:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800580c:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8005810:	43d2      	mvns	r2, r2
 8005812:	e9cd 8300 	strd	r8, r3, [sp]
 8005816:	9102      	str	r1, [sp, #8]
 8005818:	68f3      	ldr	r3, [r6, #12]
 800581a:	f002 0201 	and.w	r2, r2, #1
 800581e:	4639      	mov	r1, r7
 8005820:	f7ff ff36 	bl	8005690 <prefix_print>
 8005824:	4681      	mov	r9, r0
 8005826:	7a34      	ldrb	r4, [r6, #8]
 8005828:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
 800582a:	f014 0401 	ands.w	r4, r4, #1
 800582e:	d00e      	beq.n	800584e <log_output_msg_process+0x5e>
		std_print(msg, output);
 8005830:	4629      	mov	r1, r5
 8005832:	4630      	mov	r0, r6
 8005834:	f003 fc41 	bl	80090ba <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
 8005838:	f1b8 0f00 	cmp.w	r8, #0
 800583c:	d02b      	beq.n	8005896 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
 800583e:	4642      	mov	r2, r8
 8005840:	4639      	mov	r1, r7
 8005842:	4628      	mov	r0, r5
 8005844:	f7ff ffb6 	bl	80057b4 <postfix_print>
 8005848:	e025      	b.n	8005896 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
 800584a:	46c1      	mov	r9, r8
 800584c:	e7eb      	b.n	8005826 <log_output_msg_process+0x36>
	} else if (raw_string) {
 800584e:	f1b8 0f00 	cmp.w	r8, #0
 8005852:	d126      	bne.n	80058a2 <log_output_msg_process+0xb2>
	size_t offset = 0;
 8005854:	4627      	mov	r7, r4
		length = output->size;
 8005856:	68eb      	ldr	r3, [r5, #12]
 8005858:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 800585a:	aa06      	add	r2, sp, #24
 800585c:	463b      	mov	r3, r7
 800585e:	68a9      	ldr	r1, [r5, #8]
 8005860:	4630      	mov	r0, r6
 8005862:	f003 fc16 	bl	8009092 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
 8005866:	9a06      	ldr	r2, [sp, #24]
 8005868:	686b      	ldr	r3, [r5, #4]
 800586a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 800586c:	b13a      	cbz	r2, 800587e <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
 800586e:	68ab      	ldr	r3, [r5, #8]
 8005870:	4413      	add	r3, r2
 8005872:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8005876:	f1a4 030a 	sub.w	r3, r4, #10
 800587a:	425c      	negs	r4, r3
 800587c:	415c      	adcs	r4, r3
		log_output_flush(output);
 800587e:	4628      	mov	r0, r5
 8005880:	f003 fd78 	bl	8009374 <log_output_flush>
		offset += length;
 8005884:	9b06      	ldr	r3, [sp, #24]
 8005886:	441f      	add	r7, r3
	} while (length > 0);
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e4      	bne.n	8005856 <log_output_msg_process+0x66>
	if (eol) {
 800588c:	b11c      	cbz	r4, 8005896 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
 800588e:	4914      	ldr	r1, [pc, #80]	; (80058e0 <log_output_msg_process+0xf0>)
 8005890:	4628      	mov	r0, r5
 8005892:	f7ff fe79 	bl	8005588 <print_formatted>
	}

	log_output_flush(output);
 8005896:	4628      	mov	r0, r5
}
 8005898:	b00a      	add	sp, #40	; 0x28
 800589a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
 800589e:	f003 bd69 	b.w	8009374 <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
 80058a2:	4630      	mov	r0, r6
 80058a4:	f003 fb99 	bl	8008fda <log_msg_str_get>
 80058a8:	490e      	ldr	r1, [pc, #56]	; (80058e4 <log_output_msg_process+0xf4>)
 80058aa:	4602      	mov	r2, r0
 80058ac:	4628      	mov	r0, r5
 80058ae:	f7ff fe6b 	bl	8005588 <print_formatted>
		length = sizeof(buf);
 80058b2:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 80058b6:	aa05      	add	r2, sp, #20
 80058b8:	4623      	mov	r3, r4
 80058ba:	a906      	add	r1, sp, #24
 80058bc:	4630      	mov	r0, r6
		length = sizeof(buf);
 80058be:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 80058c2:	f003 fbe6 	bl	8009092 <log_msg_hexdump_data_get>
		if (length) {
 80058c6:	9a05      	ldr	r2, [sp, #20]
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	d0b8      	beq.n	800583e <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
 80058cc:	464b      	mov	r3, r9
 80058ce:	9700      	str	r7, [sp, #0]
 80058d0:	a906      	add	r1, sp, #24
 80058d2:	4628      	mov	r0, r5
 80058d4:	f7ff fe6a 	bl	80055ac <hexdump_line_print>
			offset += length;
 80058d8:	9b05      	ldr	r3, [sp, #20]
 80058da:	441c      	add	r4, r3
		length = sizeof(buf);
 80058dc:	e7eb      	b.n	80058b6 <log_output_msg_process+0xc6>
 80058de:	bf00      	nop
 80058e0:	0800a82e 	.word	0x0800a82e
 80058e4:	0800a825 	.word	0x0800a825

080058e8 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 80058e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80058ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80058ee:	428b      	cmp	r3, r1
 80058f0:	bf28      	it	cs
 80058f2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 80058f4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80058f6:	4a0f      	ldr	r2, [pc, #60]	; (8005934 <log_output_dropped_process+0x4c>)
{
 80058f8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80058fa:	2105      	movs	r1, #5
 80058fc:	4668      	mov	r0, sp
 80058fe:	f003 f842 	bl	8008986 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8005902:	6863      	ldr	r3, [r4, #4]
 8005904:	490c      	ldr	r1, [pc, #48]	; (8005938 <log_output_dropped_process+0x50>)
 8005906:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8005908:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 800590a:	220b      	movs	r2, #11
 800590c:	4628      	mov	r0, r5
 800590e:	f003 fbc7 	bl	80090a0 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 8005912:	6863      	ldr	r3, [r4, #4]
 8005914:	4632      	mov	r2, r6
 8005916:	4669      	mov	r1, sp
 8005918:	4628      	mov	r0, r5
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f003 fbc0 	bl	80090a0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8005920:	6863      	ldr	r3, [r4, #4]
 8005922:	4906      	ldr	r1, [pc, #24]	; (800593c <log_output_dropped_process+0x54>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	221b      	movs	r2, #27
 8005928:	4628      	mov	r0, r5
 800592a:	f003 fbb9 	bl	80090a0 <buffer_write>
		     output->control_block->ctx);
}
 800592e:	b002      	add	sp, #8
 8005930:	bd70      	pop	{r4, r5, r6, pc}
 8005932:	bf00      	nop
 8005934:	0800aedc 	.word	0x0800aedc
 8005938:	0800a86c 	.word	0x0800a86c
 800593c:	0800a850 	.word	0x0800a850

08005940 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8005940:	4a08      	ldr	r2, [pc, #32]	; (8005964 <log_output_timestamp_freq_set+0x24>)
{
 8005942:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 8005944:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8005946:	4c08      	ldr	r4, [pc, #32]	; (8005968 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 8005948:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 800594a:	2100      	movs	r1, #0
 800594c:	42a0      	cmp	r0, r4
 800594e:	d804      	bhi.n	800595a <log_output_timestamp_freq_set+0x1a>
 8005950:	b101      	cbz	r1, 8005954 <log_output_timestamp_freq_set+0x14>
 8005952:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <log_output_timestamp_freq_set+0x2c>)
 8005956:	6018      	str	r0, [r3, #0]
}
 8005958:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 800595a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	2101      	movs	r1, #1
 8005960:	e7f4      	b.n	800594c <log_output_timestamp_freq_set+0xc>
 8005962:	bf00      	nop
 8005964:	200005f8 	.word	0x200005f8
 8005968:	000f4240 	.word	0x000f4240
 800596c:	200005f4 	.word	0x200005f4

08005970 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
 8005972:	4f07      	ldr	r7, [pc, #28]	; (8005990 <char_out+0x20>)
{
 8005974:	460d      	mov	r5, r1
 8005976:	4604      	mov	r4, r0
 8005978:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
 800597a:	42b4      	cmp	r4, r6
 800597c:	d101      	bne.n	8005982 <char_out+0x12>
#endif
	}

	return length;
}
 800597e:	4628      	mov	r0, r5
 8005980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
 8005982:	6838      	ldr	r0, [r7, #0]
 8005984:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
 8005988:	6883      	ldr	r3, [r0, #8]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 800598e:	e7f4      	b.n	800597a <char_out+0xa>
 8005990:	20000610 	.word	0x20000610

08005994 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8005994:	4801      	ldr	r0, [pc, #4]	; (800599c <panic+0x8>)
 8005996:	f003 bced 	b.w	8009374 <log_output_flush>
 800599a:	bf00      	nop
 800599c:	0800a3bc 	.word	0x0800a3bc

080059a0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 80059a0:	4801      	ldr	r0, [pc, #4]	; (80059a8 <dropped+0x8>)
 80059a2:	f7ff bfa1 	b.w	80058e8 <log_output_dropped_process>
 80059a6:	bf00      	nop
 80059a8:	0800a3bc 	.word	0x0800a3bc

080059ac <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
 80059ac:	b508      	push	{r3, lr}
 80059ae:	4803      	ldr	r0, [pc, #12]	; (80059bc <log_backend_uart_init+0x10>)
 80059b0:	f001 fea8 	bl	8007704 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 80059b4:	4b02      	ldr	r3, [pc, #8]	; (80059c0 <log_backend_uart_init+0x14>)
 80059b6:	6018      	str	r0, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
 80059b8:	bd08      	pop	{r3, pc}
 80059ba:	bf00      	nop
 80059bc:	0800a878 	.word	0x0800a878
 80059c0:	20000610 	.word	0x20000610

080059c4 <put>:
{
 80059c4:	b510      	push	{r4, lr}
	log_msg_get(msg);
 80059c6:	4608      	mov	r0, r1
 80059c8:	460c      	mov	r4, r1
 80059ca:	f003 fac4 	bl	8008f56 <log_msg_get>
	log_output_msg_process(output, msg, flags);
 80059ce:	4805      	ldr	r0, [pc, #20]	; (80059e4 <put+0x20>)
 80059d0:	4621      	mov	r1, r4
 80059d2:	220f      	movs	r2, #15
 80059d4:	f7ff ff0c 	bl	80057f0 <log_output_msg_process>
	log_msg_put(msg);
 80059d8:	4620      	mov	r0, r4
}
 80059da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059de:	f003 bae9 	b.w	8008fb4 <log_msg_put>
 80059e2:	bf00      	nop
 80059e4:	0800a3bc 	.word	0x0800a3bc

080059e8 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 80059e8:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
 80059ea:	4c04      	ldr	r4, [pc, #16]	; (80059fc <__do_init_array_aux+0x14>)
 80059ec:	4d04      	ldr	r5, [pc, #16]	; (8005a00 <__do_init_array_aux+0x18>)
 80059ee:	42ac      	cmp	r4, r5
 80059f0:	d300      	bcc.n	80059f4 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
 80059f4:	f854 3b04 	ldr.w	r3, [r4], #4
 80059f8:	4798      	blx	r3
		func++) {
 80059fa:	e7f8      	b.n	80059ee <__do_init_array_aux+0x6>
 80059fc:	0800a0bc 	.word	0x0800a0bc
 8005a00:	0800a0bc 	.word	0x0800a0bc

08005a04 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
 8005a04:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8005a06:	4c05      	ldr	r4, [pc, #20]	; (8005a1c <__do_global_ctors_aux+0x18>)
 8005a08:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
 8005a0a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8005a0e:	b905      	cbnz	r5, 8005a12 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
 8005a10:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
 8005a12:	f854 3904 	ldr.w	r3, [r4], #-4
 8005a16:	3d01      	subs	r5, #1
 8005a18:	4798      	blx	r3
 8005a1a:	e7f8      	b.n	8005a0e <__do_global_ctors_aux+0xa>
 8005a1c:	0800a0b4 	.word	0x0800a0b4

08005a20 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8005a20:	b508      	push	{r3, lr}
 8005a22:	4806      	ldr	r0, [pc, #24]	; (8005a3c <uart_console_init+0x1c>)
 8005a24:	f001 fe6e 	bl	8007704 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <uart_console_init+0x20>)
 8005a2a:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 8005a2c:	4805      	ldr	r0, [pc, #20]	; (8005a44 <uart_console_init+0x24>)
 8005a2e:	f001 f827 	bl	8006a80 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8005a32:	4804      	ldr	r0, [pc, #16]	; (8005a44 <uart_console_init+0x24>)
 8005a34:	f7ff f9bc 	bl	8004db0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
 8005a38:	2000      	movs	r0, #0
 8005a3a:	bd08      	pop	{r3, pc}
 8005a3c:	0800a878 	.word	0x0800a878
 8005a40:	20000614 	.word	0x20000614
 8005a44:	08005a49 	.word	0x08005a49

08005a48 <console_out>:
	if ('\n' == c) {
 8005a48:	280a      	cmp	r0, #10
{
 8005a4a:	b538      	push	{r3, r4, r5, lr}
 8005a4c:	4d07      	ldr	r5, [pc, #28]	; (8005a6c <console_out+0x24>)
 8005a4e:	4604      	mov	r4, r0
	if ('\n' == c) {
 8005a50:	d104      	bne.n	8005a5c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 8005a52:	6828      	ldr	r0, [r5, #0]
 8005a54:	6883      	ldr	r3, [r0, #8]
 8005a56:	210d      	movs	r1, #13
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 8005a5c:	6828      	ldr	r0, [r5, #0]
 8005a5e:	6883      	ldr	r3, [r0, #8]
 8005a60:	b2e1      	uxtb	r1, r4
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4798      	blx	r3
}
 8005a66:	4620      	mov	r0, r4
 8005a68:	bd38      	pop	{r3, r4, r5, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000614 	.word	0x20000614

08005a70 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8005a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8005a74:	4f0d      	ldr	r7, [pc, #52]	; (8005aac <__stm32_exti_isr.isra.0+0x3c>)
 8005a76:	4604      	mov	r4, r0
 8005a78:	460e      	mov	r6, r1
 8005a7a:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8005a7c:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8005a80:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8005a84:	42b4      	cmp	r4, r6
 8005a86:	db01      	blt.n	8005a8c <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8005a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a8c:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8005a8e:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8005a92:	ea33 0202 	bics.w	r2, r3, r2
 8005a96:	d107      	bne.n	8005aa8 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8005a98:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8005a9a:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8005a9e:	b11b      	cbz	r3, 8005aa8 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8005aa0:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8005aa8:	3401      	adds	r4, #1
 8005aaa:	e7eb      	b.n	8005a84 <__stm32_exti_isr.isra.0+0x14>
 8005aac:	40013c00 	.word	0x40013c00

08005ab0 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8005ab0:	4a04      	ldr	r2, [pc, #16]	; (8005ac4 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	6811      	ldr	r1, [r2, #0]
 8005ab6:	4083      	lsls	r3, r0
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8005abc:	4b02      	ldr	r3, [pc, #8]	; (8005ac8 <stm32_exti_enable+0x18>)
 8005abe:	5618      	ldrsb	r0, [r3, r0]
 8005ac0:	f000 baec 	b.w	800609c <arch_irq_enable>
 8005ac4:	40013c00 	.word	0x40013c00
 8005ac8:	0800a8ae 	.word	0x0800a8ae

08005acc <stm32_exti_disable>:
	if (line < 32) {
 8005acc:	281f      	cmp	r0, #31
 8005ace:	dc07      	bgt.n	8005ae0 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8005ad0:	4904      	ldr	r1, [pc, #16]	; (8005ae4 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	680b      	ldr	r3, [r1, #0]
 8005ad6:	fa02 f000 	lsl.w	r0, r2, r0
 8005ada:	ea23 0000 	bic.w	r0, r3, r0
 8005ade:	6008      	str	r0, [r1, #0]
}
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40013c00 	.word	0x40013c00

08005ae8 <stm32_exti_trigger>:
	switch (trigger) {
 8005ae8:	2903      	cmp	r1, #3
 8005aea:	d80f      	bhi.n	8005b0c <stm32_exti_trigger+0x24>
 8005aec:	e8df f001 	tbb	[pc, r1]
 8005af0:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005af4:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8005af6:	2201      	movs	r2, #1
 8005af8:	6899      	ldr	r1, [r3, #8]
 8005afa:	fa02 f000 	lsl.w	r0, r2, r0
 8005afe:	ea21 0100 	bic.w	r1, r1, r0
 8005b02:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005b0a:	60d8      	str	r0, [r3, #12]
}
 8005b0c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8005b0e:	2301      	movs	r3, #1
 8005b10:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005b14:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <stm32_exti_trigger+0x64>)
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	4302      	orrs	r2, r0
 8005b1a:	609a      	str	r2, [r3, #8]
 8005b1c:	e7f2      	b.n	8005b04 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8005b1e:	2301      	movs	r3, #1
 8005b20:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005b24:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <stm32_exti_trigger+0x64>)
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	4302      	orrs	r2, r0
 8005b2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	ea22 0000 	bic.w	r0, r2, r0
 8005b32:	6098      	str	r0, [r3, #8]
}
 8005b34:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8005b36:	2301      	movs	r3, #1
 8005b38:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005b3c:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <stm32_exti_trigger+0x64>)
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	4302      	orrs	r2, r0
 8005b42:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	4310      	orrs	r0, r2
 8005b48:	e7df      	b.n	8005b0a <stm32_exti_trigger+0x22>
 8005b4a:	bf00      	nop
 8005b4c:	40013c00 	.word	0x40013c00

08005b50 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 8005b50:	b510      	push	{r4, lr}
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8005b52:	4c07      	ldr	r4, [pc, #28]	; (8005b70 <stm32_exti_set_callback+0x20>)
 8005b54:	f854 3030 	ldr.w	r3, [r4, r0, lsl #3]
 8005b58:	b933      	cbnz	r3, 8005b68 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8005b5a:	f844 1030 	str.w	r1, [r4, r0, lsl #3]
	data->cb[line].data = arg;
 8005b5e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3

	return 0;
 8005b62:	4618      	mov	r0, r3
	data->cb[line].data = arg;
 8005b64:	6062      	str	r2, [r4, #4]
}
 8005b66:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8005b68:	f06f 000f 	mvn.w	r0, #15
 8005b6c:	e7fb      	b.n	8005b66 <stm32_exti_set_callback+0x16>
 8005b6e:	bf00      	nop
 8005b70:	2000061c 	.word	0x2000061c

08005b74 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8005b74:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <stm32_exti_unset_callback+0x10>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8005b7c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8005b80:	605a      	str	r2, [r3, #4]
}
 8005b82:	4770      	bx	lr
 8005b84:	2000061c 	.word	0x2000061c

08005b88 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8005b88:	680b      	ldr	r3, [r1, #0]
{
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	d839      	bhi.n	8005c04 <stm32_clock_control_on+0x7c>
 8005b90:	e8df f003 	tbb	[pc, r3]
 8005b94:	2e241004 	.word	0x2e241004
 8005b98:	3838      	.short	0x3838
 8005b9a:	1a          	.byte	0x1a
 8005b9b:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <stm32_clock_control_on+0x84>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8005b9e:	684b      	ldr	r3, [r1, #4]
 8005ba0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005ba2:	4319      	orrs	r1, r3
 8005ba4:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005ba6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ba8:	4013      	ands	r3, r2
 8005baa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005bac:	9b01      	ldr	r3, [sp, #4]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8005bae:	2000      	movs	r0, #0
}
 8005bb0:	b006      	add	sp, #24
 8005bb2:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005bb4:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <stm32_clock_control_on+0x84>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8005bb6:	684b      	ldr	r3, [r1, #4]
 8005bb8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005bba:	4319      	orrs	r1, r3
 8005bbc:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005bbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8005bc4:	9b02      	ldr	r3, [sp, #8]
 8005bc6:	e7f2      	b.n	8005bae <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005bc8:	4a10      	ldr	r2, [pc, #64]	; (8005c0c <stm32_clock_control_on+0x84>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8005bca:	684b      	ldr	r3, [r1, #4]
 8005bcc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8005bce:	4319      	orrs	r1, r3
 8005bd0:	6391      	str	r1, [r2, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8005bd8:	9b03      	ldr	r3, [sp, #12]
 8005bda:	e7e8      	b.n	8005bae <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8005bdc:	4a0b      	ldr	r2, [pc, #44]	; (8005c0c <stm32_clock_control_on+0x84>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8005bde:	684b      	ldr	r3, [r1, #4]
 8005be0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005be2:	4319      	orrs	r1, r3
 8005be4:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005be6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005be8:	4013      	ands	r3, r2
 8005bea:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8005bec:	9b04      	ldr	r3, [sp, #16]
 8005bee:	e7de      	b.n	8005bae <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005bf0:	4a06      	ldr	r2, [pc, #24]	; (8005c0c <stm32_clock_control_on+0x84>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8005bf2:	684b      	ldr	r3, [r1, #4]
 8005bf4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005bf6:	4319      	orrs	r1, r3
 8005bf8:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005bfa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8005c00:	9b05      	ldr	r3, [sp, #20]
 8005c02:	e7d4      	b.n	8005bae <stm32_clock_control_on+0x26>
	switch (pclken->bus) {
 8005c04:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005c08:	e7d2      	b.n	8005bb0 <stm32_clock_control_on+0x28>
 8005c0a:	bf00      	nop
 8005c0c:	40023800 	.word	0x40023800

08005c10 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8005c10:	4b08      	ldr	r3, [pc, #32]	; (8005c34 <stm32_clock_control_get_subsys_rate+0x24>)
 8005c12:	6809      	ldr	r1, [r1, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
	uint32_t apb2_clock = get_bus_clock(ahb_clock, STM32_APB2_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8005c16:	2906      	cmp	r1, #6
 8005c18:	d809      	bhi.n	8005c2e <stm32_clock_control_get_subsys_rate+0x1e>
 8005c1a:	e8df f001 	tbb	[pc, r1]
 8005c1e:	0505      	.short	0x0505
 8005c20:	08080504 	.word	0x08080504
 8005c24:	05          	.byte	0x05
 8005c25:	00          	.byte	0x00
	return clock / prescaler;
 8005c26:	085b      	lsrs	r3, r3, #1
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8005c28:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8005c2a:	2000      	movs	r0, #0
		break;
 8005c2c:	4770      	bx	lr
	switch (pclken->bus) {
 8005c2e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8005c32:	4770      	bx	lr
 8005c34:	20000084 	.word	0x20000084

08005c38 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8005c38:	b530      	push	{r4, r5, lr}
 8005c3a:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c42:	e9cd 3200 	strd	r3, r2, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8005c46:	9302      	str	r3, [sp, #8]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8005c48:	f000 f870 	bl	8005d2c <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8005c4c:	a803      	add	r0, sp, #12
 8005c4e:	f003 fc2a 	bl	80094a6 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8005c52:	4b18      	ldr	r3, [pc, #96]	; (8005cb4 <stm32_clock_control_init+0x7c>)
 8005c54:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8005c56:	0791      	lsls	r1, r2, #30
 8005c58:	d406      	bmi.n	8005c68 <stm32_clock_control_init+0x30>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	f042 0201 	orr.w	r2, r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8005c62:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8005c64:	0792      	lsls	r2, r2, #30
 8005c66:	d5fc      	bpl.n	8005c62 <stm32_clock_control_init+0x2a>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005c68:	4c12      	ldr	r4, [pc, #72]	; (8005cb4 <stm32_clock_control_init+0x7c>)
 8005c6a:	68a3      	ldr	r3, [r4, #8]
 8005c6c:	f023 0303 	bic.w	r3, r3, #3
 8005c70:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005c72:	68a3      	ldr	r3, [r4, #8]
 8005c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c78:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005c7a:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8005c7c:	f015 050c 	ands.w	r5, r5, #12
 8005c80:	d1fb      	bne.n	8005c7a <stm32_clock_control_init+0x42>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005c82:	6823      	ldr	r3, [r4, #0]

	/* Switch to PLL with HSE as clock source */
#ifdef CONFIG_SOC_SERIES_STM32WLX
	LL_RCC_HSE_EnableTcxo();
#endif
	LL_PLL_ConfigSystemClock_HSE(
 8005c84:	480c      	ldr	r0, [pc, #48]	; (8005cb8 <stm32_clock_control_init+0x80>)
 8005c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c8a:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8005c8c:	6863      	ldr	r3, [r4, #4]
 8005c8e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005c92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c96:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 8005c98:	aa03      	add	r2, sp, #12
 8005c9a:	466b      	mov	r3, sp
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	f001 fcd7 	bl	8007650 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8005caa:	f003 fc05 	bl	80094b8 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8005cae:	4628      	mov	r0, r5
 8005cb0:	b007      	add	sp, #28
 8005cb2:	bd30      	pop	{r4, r5, pc}
 8005cb4:	40023800 	.word	0x40023800
 8005cb8:	007a1200 	.word	0x007a1200

08005cbc <stm32_clock_control_off>:
	switch (pclken->bus) {
 8005cbc:	680b      	ldr	r3, [r1, #0]
{
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	2b06      	cmp	r3, #6
 8005cc2:	d82d      	bhi.n	8005d20 <stm32_clock_control_off+0x64>
 8005cc4:	e8df f003 	tbb	[pc, r3]
 8005cc8:	251e0d04 	.word	0x251e0d04
 8005ccc:	2c2c      	.short	0x2c2c
 8005cce:	14          	.byte	0x14
 8005ccf:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8005cd0:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <stm32_clock_control_off+0x6c>)
 8005cd2:	6849      	ldr	r1, [r1, #4]
 8005cd4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005cd6:	ea23 0301 	bic.w	r3, r3, r1
 8005cda:	6313      	str	r3, [r2, #48]	; 0x30
	return 0;
 8005cdc:	2000      	movs	r0, #0
}
 8005cde:	b002      	add	sp, #8
 8005ce0:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8005ce2:	4a11      	ldr	r2, [pc, #68]	; (8005d28 <stm32_clock_control_off+0x6c>)
 8005ce4:	6849      	ldr	r1, [r1, #4]
 8005ce6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005ce8:	ea23 0301 	bic.w	r3, r3, r1
 8005cec:	6353      	str	r3, [r2, #52]	; 0x34
 8005cee:	e7f5      	b.n	8005cdc <stm32_clock_control_off+0x20>
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005cf0:	4a0d      	ldr	r2, [pc, #52]	; (8005d28 <stm32_clock_control_off+0x6c>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8005cf2:	684b      	ldr	r3, [r1, #4]
 8005cf4:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8005cf6:	4319      	orrs	r1, r3
 8005cf8:	6391      	str	r1, [r2, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005cfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005d00:	9b01      	ldr	r3, [sp, #4]
 8005d02:	e7eb      	b.n	8005cdc <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8005d04:	4a08      	ldr	r2, [pc, #32]	; (8005d28 <stm32_clock_control_off+0x6c>)
 8005d06:	6849      	ldr	r1, [r1, #4]
 8005d08:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d0a:	ea23 0301 	bic.w	r3, r3, r1
 8005d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8005d10:	e7e4      	b.n	8005cdc <stm32_clock_control_off+0x20>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8005d12:	4a05      	ldr	r2, [pc, #20]	; (8005d28 <stm32_clock_control_off+0x6c>)
 8005d14:	6849      	ldr	r1, [r1, #4]
 8005d16:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005d18:	ea23 0301 	bic.w	r3, r3, r1
 8005d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d1e:	e7dd      	b.n	8005cdc <stm32_clock_control_off+0x20>
	switch (pclken->bus) {
 8005d20:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005d24:	e7db      	b.n	8005cde <stm32_clock_control_off+0x22>
 8005d26:	bf00      	nop
 8005d28:	40023800 	.word	0x40023800

08005d2c <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <config_enable_default_clocks+0x1c>)
 8005d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8005d38:	b082      	sub	sp, #8
 8005d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005d40:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8005d42:	b002      	add	sp, #8
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40023800 	.word	0x40023800

08005d4c <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8005d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct device *port_device;
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 8005d50:	460f      	mov	r7, r1
 8005d52:	b911      	cbnz	r1, 8005d5a <stm32_dt_pinctrl_configure+0xe>
		/* Empty pinctrl. Exit */
		return 0;
 8005d54:	2000      	movs	r0, #0
		ret = pm_device_put(port_device);
#endif
	}

	return ret;
}
 8005d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < list_size; i++) {
 8005d5a:	2600      	movs	r6, #0
		port_device = gpio_ports[STM32_PORT(pin)];
 8005d5c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8005db8 <stm32_dt_pinctrl_configure+0x6c>
 8005d60:	1d04      	adds	r4, r0, #4
	uint32_t func = 0;
 8005d62:	46b3      	mov	fp, r6
		mux = pinctrl[i].pinmux;
 8005d64:	f854 5c04 	ldr.w	r5, [r4, #-4]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 8005d68:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8005d6c:	d11e      	bne.n	8005dac <stm32_dt_pinctrl_configure+0x60>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	f042 0b20 	orr.w	fp, r2, #32
		port_device = gpio_ports[STM32_PORT(pin)];
 8005d74:	f3c5 3303 	ubfx	r3, r5, #12, #4
		ret = gpio_stm32_clock_request(port_device, true);
 8005d78:	2101      	movs	r1, #1
		port_device = gpio_ports[STM32_PORT(pin)];
 8005d7a:	f859 8023 	ldr.w	r8, [r9, r3, lsl #2]
		ret = gpio_stm32_clock_request(port_device, true);
 8005d7e:	4640      	mov	r0, r8
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8005d80:	f3c5 2a07 	ubfx	sl, r5, #8, #8
		ret = gpio_stm32_clock_request(port_device, true);
 8005d84:	f000 ff18 	bl	8006bb8 <gpio_stm32_clock_request>
		if (ret != 0) {
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d1e4      	bne.n	8005d56 <stm32_dt_pinctrl_configure+0xa>
		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 8005d8c:	b2eb      	uxtb	r3, r5
	if (port_device == NULL) {
 8005d8e:	f1b8 0f00 	cmp.w	r8, #0
 8005d92:	d005      	beq.n	8005da0 <stm32_dt_pinctrl_configure+0x54>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8005d94:	465a      	mov	r2, fp
 8005d96:	f00a 010f 	and.w	r1, sl, #15
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	f003 fc00 	bl	80095a0 <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 8005da0:	3601      	adds	r6, #1
 8005da2:	42b7      	cmp	r7, r6
 8005da4:	f104 0408 	add.w	r4, r4, #8
 8005da8:	d1dc      	bne.n	8005d64 <stm32_dt_pinctrl_configure+0x18>
 8005daa:	e7d3      	b.n	8005d54 <stm32_dt_pinctrl_configure+0x8>
		} else if (STM32_DT_PINMUX_FUNC(mux) == ANALOG) {
 8005dac:	b2eb      	uxtb	r3, r5
			func = STM32_MODER_ANALOG_MODE;
 8005dae:	2b10      	cmp	r3, #16
 8005db0:	bf08      	it	eq
 8005db2:	f04f 0b30 	moveq.w	fp, #48	; 0x30
 8005db6:	e7dd      	b.n	8005d74 <stm32_dt_pinctrl_configure+0x28>
 8005db8:	0800a3cc 	.word	0x0800a3cc

08005dbc <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8005dbc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8005dc0:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8005dc2:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8005dc4:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8005dc6:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8005dc8:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <elapsed+0x34>)
 8005dca:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8005dce:	4909      	ldr	r1, [pc, #36]	; (8005df4 <elapsed+0x38>)
 8005dd0:	d101      	bne.n	8005dd6 <elapsed+0x1a>
	    || (val1 < val2)) {
 8005dd2:	4282      	cmp	r2, r0
 8005dd4:	d206      	bcs.n	8005de4 <elapsed+0x28>
		overflow_cyc += last_load;
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	680c      	ldr	r4, [r1, #0]
 8005dda:	4422      	add	r2, r4
 8005ddc:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8005dde:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005de2:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	680a      	ldr	r2, [r1, #0]
 8005de8:	4413      	add	r3, r2
}
 8005dea:	1a18      	subs	r0, r3, r0
 8005dec:	bd10      	pop	{r4, pc}
 8005dee:	bf00      	nop
 8005df0:	200006e8 	.word	0x200006e8
 8005df4:	200006e4 	.word	0x200006e4

08005df8 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 8005df8:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8005dfa:	f7ff ffdf 	bl	8005dbc <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <sys_clock_isr+0x38>)
 8005e00:	4a0c      	ldr	r2, [pc, #48]	; (8005e34 <sys_clock_isr+0x3c>)
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	6811      	ldr	r1, [r2, #0]
 8005e06:	4408      	add	r0, r1
 8005e08:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8005e0e:	4a0a      	ldr	r2, [pc, #40]	; (8005e38 <sys_clock_isr+0x40>)
 8005e10:	6813      	ldr	r3, [r2, #0]
 8005e12:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8005e16:	1ac0      	subs	r0, r0, r3
 8005e18:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8005e1c:	fb01 3300 	mla	r3, r1, r0, r3
 8005e20:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8005e22:	f002 fa3d 	bl	80082a0 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
}
 8005e26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8005e2a:	f000 bd13 	b.w	8006854 <z_arm_exc_exit>
 8005e2e:	bf00      	nop
 8005e30:	200006e8 	.word	0x200006e8
 8005e34:	200006e0 	.word	0x200006e0
 8005e38:	200006dc 	.word	0x200006dc

08005e3c <sys_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <sys_clock_driver_init+0x28>)
 8005e3e:	2210      	movs	r2, #16
 8005e40:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8005e44:	4b08      	ldr	r3, [pc, #32]	; (8005e68 <sys_clock_driver_init+0x2c>)
 8005e46:	f242 527f 	movw	r2, #9599	; 0x257f
 8005e4a:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8005e4c:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <sys_clock_driver_init+0x30>)
 8005e4e:	2000      	movs	r0, #0
 8005e50:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8005e52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e56:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8005e58:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	f042 0207 	orr.w	r2, r2, #7
 8005e60:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8005e62:	4770      	bx	lr
 8005e64:	e000ed00 	.word	0xe000ed00
 8005e68:	200006e4 	.word	0x200006e4
 8005e6c:	200006e8 	.word	0x200006e8

08005e70 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	4d32      	ldr	r5, [pc, #200]	; (8005f3c <sys_clock_set_timeout+0xcc>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8005e74:	b159      	cbz	r1, 8005e8e <sys_clock_set_timeout+0x1e>
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	d109      	bne.n	8005e8e <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8005e7a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005e7e:	6913      	ldr	r3, [r2, #16]
 8005e80:	f023 0301 	bic.w	r3, r3, #1
 8005e84:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8005e86:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8005e8a:	602b      	str	r3, [r5, #0]
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 8005e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8005e8e:	f240 63d2 	movw	r3, #1746	; 0x6d2
 8005e92:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e96:	bf08      	it	eq
 8005e98:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005e9a:	1e44      	subs	r4, r0, #1
 8005e9c:	2c00      	cmp	r4, #0
	uint32_t last_load_ = last_load;
 8005e9e:	682f      	ldr	r7, [r5, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005ea0:	dd32      	ble.n	8005f08 <sys_clock_set_timeout+0x98>
 8005ea2:	429c      	cmp	r4, r3
 8005ea4:	bfa8      	it	ge
 8005ea6:	461c      	movge	r4, r3
	__asm__ volatile(
 8005ea8:	f04f 0310 	mov.w	r3, #16
 8005eac:	f3ef 8611 	mrs	r6, BASEPRI
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8005eb8:	f7ff ff80 	bl	8005dbc <elapsed>
	cycle_count += pending;
 8005ebc:	4920      	ldr	r1, [pc, #128]	; (8005f40 <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8005ebe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8005ec2:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8005ec4:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8005ec8:	680b      	ldr	r3, [r1, #0]
 8005eca:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <sys_clock_set_timeout+0xd4>)
	cycle_count += pending;
 8005ece:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 8005ed0:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8005ed2:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <sys_clock_set_timeout+0xd8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8005ed6:	1ac2      	subs	r2, r0, r3
 8005ed8:	d518      	bpl.n	8005f0c <sys_clock_set_timeout+0x9c>
		last_load = MIN_DELAY;
 8005eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 8005ede:	602b      	str	r3, [r5, #0]
	val2 = SysTick->VAL;
 8005ee0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8005ee4:	682c      	ldr	r4, [r5, #0]
	val2 = SysTick->VAL;
 8005ee6:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 8005ee8:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8005eea:	bf38      	it	cc
 8005eec:	44bc      	addcc	ip, r7
	SysTick->LOAD = last_load - 1;
 8005eee:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 8005ef0:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 8005ef4:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 8005ef6:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 8005ef8:	2400      	movs	r4, #0
 8005efa:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 8005efc:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8005efe:	f386 8811 	msr	BASEPRI, r6
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	e7c1      	b.n	8005e8c <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005f08:	2400      	movs	r4, #0
 8005f0a:	e7cd      	b.n	8005ea8 <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
 8005f0c:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
		delay += unannounced;
 8005f10:	fb0e 2404 	mla	r4, lr, r4, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8005f14:	f504 5415 	add.w	r4, r4, #9536	; 0x2540
		delay -= unannounced;
 8005f18:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8005f1a:	343f      	adds	r4, #63	; 0x3f
 8005f1c:	fbb4 f4fe 	udiv	r4, r4, lr
		delay -= unannounced;
 8005f20:	fb0e 3404 	mla	r4, lr, r4, r3
		delay = MAX(delay, MIN_DELAY);
 8005f24:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005f28:	d904      	bls.n	8005f34 <sys_clock_set_timeout+0xc4>
		if (delay > MAX_CYCLES) {
 8005f2a:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <sys_clock_set_timeout+0xdc>)
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	d8d6      	bhi.n	8005ede <sys_clock_set_timeout+0x6e>
			last_load = delay;
 8005f30:	602c      	str	r4, [r5, #0]
 8005f32:	e7d5      	b.n	8005ee0 <sys_clock_set_timeout+0x70>
		delay = MAX(delay, MIN_DELAY);
 8005f34:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005f38:	e7fa      	b.n	8005f30 <sys_clock_set_timeout+0xc0>
 8005f3a:	bf00      	nop
 8005f3c:	200006e4 	.word	0x200006e4
 8005f40:	200006e0 	.word	0x200006e0
 8005f44:	200006e8 	.word	0x200006e8
 8005f48:	200006dc 	.word	0x200006dc
 8005f4c:	00ffc300 	.word	0x00ffc300

08005f50 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 8005f50:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005f52:	f04f 0310 	mov.w	r3, #16
 8005f56:	f3ef 8411 	mrs	r4, BASEPRI
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8005f62:	f7ff ff2b 	bl	8005dbc <elapsed>
 8005f66:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <sys_clock_elapsed+0x34>)
 8005f68:	4a07      	ldr	r2, [pc, #28]	; (8005f88 <sys_clock_elapsed+0x38>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	4418      	add	r0, r3
	__asm__ volatile(
 8005f72:	f384 8811 	msr	BASEPRI, r4
 8005f76:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8005f7a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005f7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005f82:	bd10      	pop	{r4, pc}
 8005f84:	200006e0 	.word	0x200006e0
 8005f88:	200006dc 	.word	0x200006dc

08005f8c <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
 8005f8c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005f8e:	f04f 0310 	mov.w	r3, #16
 8005f92:	f3ef 8411 	mrs	r4, BASEPRI
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 8005f9e:	f7ff ff0d 	bl	8005dbc <elapsed>
 8005fa2:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <sys_clock_cycle_get_32+0x28>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4418      	add	r0, r3
	__asm__ volatile(
 8005fa8:	f384 8811 	msr	BASEPRI, r4
 8005fac:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8005fb0:	bd10      	pop	{r4, pc}
 8005fb2:	bf00      	nop
 8005fb4:	200006e0 	.word	0x200006e0

08005fb8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8005fb8:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8005fba:	490a      	ldr	r1, [pc, #40]	; (8005fe4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8005fbc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8005fbe:	6809      	ldr	r1, [r1, #0]
 8005fc0:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005fc2:	4909      	ldr	r1, [pc, #36]	; (8005fe8 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8005fc4:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005fc6:	684b      	ldr	r3, [r1, #4]
 8005fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	604b      	str	r3, [r1, #4]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8005fd8:	6893      	ldr	r3, [r2, #8]
}
 8005fda:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	20000780 	.word	0x20000780
 8005fe4:	0800a5b4 	.word	0x0800a5b4
 8005fe8:	e000ed00 	.word	0xe000ed00

08005fec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8005fec:	4921      	ldr	r1, [pc, #132]	; (8006074 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8005fee:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 8005ff0:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8005ff4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8005ff8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8005ffa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8005ffe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #0x10    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
 8006002:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
 8006006:	d103      	bne.n	8006010 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8006008:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
 800600c:	ec80 8a10 	vstmia	r0, {s16-s31}

08006010 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8006010:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8006012:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8006016:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 800601a:	4f17      	ldr	r7, [pc, #92]	; (8006078 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 800601c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8006020:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8006022:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8006024:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 8006026:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800602a:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 800602c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 800602e:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8006030:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
 8006034:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
 8006038:	d003      	beq.n	8006042 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 800603a:	2300      	movs	r3, #0
    vmsr fpscr, r3
 800603c:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
 8006040:	e003      	b.n	800604a <in_fp_endif>

08006042 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8006042:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
 8006046:	ec90 8a10 	vldmia	r0, {s16-s31}

0800604a <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 800604a:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
 800604e:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 8006052:	f383 8814 	msr	CONTROL, r3
    isb
 8006056:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 800605a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 800605c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 800605e:	f000 fc31 	bl	80068c4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8006062:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8006066:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 800606a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 800606e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8006072:	4770      	bx	lr
    ldr r1, =_kernel
 8006074:	20000780 	.word	0x20000780
    ldr v4, =_SCS_ICSR
 8006078:	e000ed04 	.word	0xe000ed04

0800607c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 800607c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8006080:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8006082:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8006086:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800608a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 800608c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8006090:	2902      	cmp	r1, #2
    beq _oops
 8006092:	d0ff      	beq.n	8006094 <_oops>

08006094 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8006094:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8006096:	f003 fa14 	bl	80094c2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 800609a:	bd01      	pop	{r0, pc}

0800609c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 800609c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800609e:	2b00      	cmp	r3, #0
 80060a0:	db08      	blt.n	80060b4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060a2:	2201      	movs	r2, #1
 80060a4:	f000 001f 	and.w	r0, r0, #31
 80060a8:	fa02 f000 	lsl.w	r0, r2, r0
 80060ac:	095b      	lsrs	r3, r3, #5
 80060ae:	4a02      	ldr	r2, [pc, #8]	; (80060b8 <arch_irq_enable+0x1c>)
 80060b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	e000e100 	.word	0xe000e100

080060bc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80060bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80060be:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060c0:	bfa8      	it	ge
 80060c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 80060c6:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ca:	bfb8      	it	lt
 80060cc:	4b06      	ldrlt	r3, [pc, #24]	; (80060e8 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ce:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80060d2:	bfac      	ite	ge
 80060d4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060dc:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060de:	bfb4      	ite	lt
 80060e0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060e2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 80060e6:	4770      	bx	lr
 80060e8:	e000ed14 	.word	0xe000ed14

080060ec <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 80060ec:	7b01      	ldrb	r1, [r0, #12]
{
 80060ee:	b510      	push	{r4, lr}
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 80060f0:	f011 0402 	ands.w	r4, r1, #2
 80060f4:	d005      	beq.n	8006102 <arch_new_thread+0x16>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
 80060f6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80060f8:	3160      	adds	r1, #96	; 0x60
 80060fa:	6641      	str	r1, [r0, #100]	; 0x64
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
 80060fc:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80060fe:	3960      	subs	r1, #96	; 0x60
 8006100:	6681      	str	r1, [r0, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8006102:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8006106:	9b02      	ldr	r3, [sp, #8]
 8006108:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 800610c:	490f      	ldr	r1, [pc, #60]	; (800614c <arch_new_thread+0x60>)
	iframe->a3 = (uint32_t)p2;
 800610e:	9b03      	ldr	r3, [sp, #12]
 8006110:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8006114:	9b04      	ldr	r3, [sp, #16]
 8006116:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 800611a:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 800611e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006122:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8006126:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 800612a:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 800612c:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 800612e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8006130:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
 8006132:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8006136:	b91c      	cbnz	r4, 8006140 <arch_new_thread+0x54>
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
 8006138:	23fd      	movs	r3, #253	; 0xfd
 800613a:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 800613e:	bd10      	pop	{r4, pc}
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8006140:	f64f 5308 	movw	r3, #64776	; 0xfd08
 8006144:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
 8006148:	e7f9      	b.n	800613e <arch_new_thread+0x52>
 800614a:	bf00      	nop
 800614c:	080089a1 	.word	0x080089a1

08006150 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * Adjust the MPU stack guard size together with the FPU
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
 8006150:	b530      	push	{r4, r5, lr}
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8006152:	7b01      	ldrb	r1, [r0, #12]
		if ((thread->arch.mode &
 8006154:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8006158:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <z_arm_mpu_stack_guard_and_fpu_adjust+0x68>)
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 800615a:	f011 0f02 	tst.w	r1, #2
		if ((thread->arch.mode &
 800615e:	f003 0508 	and.w	r5, r3, #8
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8006162:	d103      	bne.n	800616c <z_arm_mpu_stack_guard_and_fpu_adjust+0x1c>
 8006164:	f890 40bd 	ldrb.w	r4, [r0, #189]	; 0xbd
 8006168:	06e4      	lsls	r4, r4, #27
 800616a:	d413      	bmi.n	8006194 <z_arm_mpu_stack_guard_and_fpu_adjust+0x44>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
 800616c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800616e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8006172:	6354      	str	r4, [r2, #52]	; 0x34
		if ((thread->arch.mode &
 8006174:	b94d      	cbnz	r5, 800618a <z_arm_mpu_stack_guard_and_fpu_adjust+0x3a>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8006176:	f043 0308 	orr.w	r3, r3, #8
 800617a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start +=
 800617e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006180:	3360      	adds	r3, #96	; 0x60
 8006182:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size -=
 8006184:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006186:	3b60      	subs	r3, #96	; 0x60
 8006188:	6683      	str	r3, [r0, #104]	; 0x68

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
 800618a:	f041 0102 	orr.w	r1, r1, #2
 800618e:	7301      	strb	r1, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
 8006190:	2080      	movs	r0, #128	; 0x80
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
 8006192:	bd30      	pop	{r4, r5, pc}
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
 8006194:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006196:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 800619a:	6351      	str	r1, [r2, #52]	; 0x34
		if ((thread->arch.mode &
 800619c:	b14d      	cbz	r5, 80061b2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x62>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 800619e:	f023 0308 	bic.w	r3, r3, #8
 80061a2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start -=
 80061a6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80061a8:	3b60      	subs	r3, #96	; 0x60
 80061aa:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size +=
 80061ac:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80061ae:	3360      	adds	r3, #96	; 0x60
 80061b0:	6683      	str	r3, [r0, #104]	; 0x68
	return MPU_GUARD_ALIGN_AND_SIZE;
 80061b2:	2020      	movs	r0, #32
 80061b4:	e7ed      	b.n	8006192 <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
 80061b6:	bf00      	nop
 80061b8:	e000ef00 	.word	0xe000ef00

080061bc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 80061bc:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <z_check_thread_stack_fail+0x38>)
{
 80061be:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
 80061c0:	6898      	ldr	r0, [r3, #8]
{
 80061c2:	b510      	push	{r4, lr}

	if (thread == NULL) {
 80061c4:	b190      	cbz	r0, 80061ec <z_check_thread_stack_fail+0x30>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
 80061c6:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80061ca:	6e40      	ldr	r0, [r0, #100]	; 0x64
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 80061cc:	f013 0f08 	tst.w	r3, #8
 80061d0:	bf14      	ite	ne
 80061d2:	2480      	movne	r4, #128	; 0x80
 80061d4:	2420      	moveq	r4, #32
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80061d6:	f112 0f16 	cmn.w	r2, #22
 80061da:	d004      	beq.n	80061e6 <z_check_thread_stack_fail+0x2a>
 80061dc:	1b03      	subs	r3, r0, r4
 80061de:	4293      	cmp	r3, r2
 80061e0:	d805      	bhi.n	80061ee <z_check_thread_stack_fail+0x32>
 80061e2:	4282      	cmp	r2, r0
 80061e4:	d203      	bcs.n	80061ee <z_check_thread_stack_fail+0x32>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 80061e6:	4281      	cmp	r1, r0
 80061e8:	bf28      	it	cs
 80061ea:	2000      	movcs	r0, #0
}
 80061ec:	bd10      	pop	{r4, pc}
	return 0;
 80061ee:	2000      	movs	r0, #0
 80061f0:	e7fc      	b.n	80061ec <z_check_thread_stack_fail+0x30>
 80061f2:	bf00      	nop
 80061f4:	20000780 	.word	0x20000780

080061f8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80061f8:	b508      	push	{r3, lr}
 80061fa:	4614      	mov	r4, r2
 80061fc:	460d      	mov	r5, r1
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 80061fe:	2200      	movs	r2, #0
 8006200:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8006204:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8006208:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800620c:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006210:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8006214:	4a08      	ldr	r2, [pc, #32]	; (8006238 <arch_switch_to_main_thread+0x40>)
 8006216:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8006218:	f000 fb54 	bl	80068c4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 800621c:	4620      	mov	r0, r4
 800621e:	f385 8809 	msr	PSP, r5
 8006222:	2100      	movs	r1, #0
 8006224:	b663      	cpsie	if
 8006226:	f381 8811 	msr	BASEPRI, r1
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	2200      	movs	r2, #0
 8006230:	2300      	movs	r3, #0
 8006232:	f002 fbb5 	bl	80089a0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8006236:	bf00      	nop
 8006238:	20000780 	.word	0x20000780

0800623c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 800623c:	4901      	ldr	r1, [pc, #4]	; (8006244 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 800623e:	2210      	movs	r2, #16
	str	r2, [r1]
 8006240:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8006242:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8006244:	e000ed10 	.word	0xe000ed10

08006248 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8006248:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800624a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 800624c:	f380 8811 	msr	BASEPRI, r0
	isb
 8006250:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8006254:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8006258:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800625a:	b662      	cpsie	i
	isb
 800625c:	f3bf 8f6f 	isb	sy

	bx	lr
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop

08006264 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8006264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006268:	4607      	mov	r7, r0
 800626a:	b08b      	sub	sp, #44	; 0x2c

	if (esf != NULL) {
 800626c:	460c      	mov	r4, r1
 800626e:	2900      	cmp	r1, #0
 8006270:	d054      	beq.n	800631c <z_arm_fatal_error+0xb8>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8006272:	4b2e      	ldr	r3, [pc, #184]	; (800632c <z_arm_fatal_error+0xc8>)
 8006274:	4d2e      	ldr	r5, [pc, #184]	; (8006330 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8006276:	482f      	ldr	r0, [pc, #188]	; (8006334 <z_arm_fatal_error+0xd0>)
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 8006278:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8006348 <z_arm_fatal_error+0xe4>
 800627c:	1aed      	subs	r5, r5, r3
 800627e:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8006280:	01ad      	lsls	r5, r5, #6
 8006282:	f045 0501 	orr.w	r5, r5, #1
 8006286:	f8ad 5000 	strh.w	r5, [sp]
 800628a:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 800628e:	6809      	ldr	r1, [r1, #0]
 8006290:	f002 fde1 	bl	8008e56 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8006294:	f8ad 5000 	strh.w	r5, [sp]
 8006298:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800629c:	68e1      	ldr	r1, [r4, #12]
 800629e:	4826      	ldr	r0, [pc, #152]	; (8006338 <z_arm_fatal_error+0xd4>)
 80062a0:	f002 fdd9 	bl	8008e56 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 80062a4:	69e1      	ldr	r1, [r4, #28]
 80062a6:	4825      	ldr	r0, [pc, #148]	; (800633c <z_arm_fatal_error+0xd8>)
 80062a8:	462a      	mov	r2, r5
 80062aa:	f002 fda4 	bl	8008df6 <log_1>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 80062ae:	46a0      	mov	r8, r4
 80062b0:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 80062b2:	edd8 7a08 	vldr	s15, [r8, #32]
 80062b6:	9602      	str	r6, [sp, #8]
 80062b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062bc:	1c73      	adds	r3, r6, #1
 80062be:	edcd 7a03 	vstr	s15, [sp, #12]
 80062c2:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 80062c6:	9304      	str	r3, [sp, #16]
 80062c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062cc:	1cb3      	adds	r3, r6, #2
 80062ce:	edcd 7a05 	vstr	s15, [sp, #20]
 80062d2:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
 80062d6:	9306      	str	r3, [sp, #24]
 80062d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062dc:	1cf3      	adds	r3, r6, #3
 80062de:	edcd 7a07 	vstr	s15, [sp, #28]
 80062e2:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 80062e6:	9308      	str	r3, [sp, #32]
 80062e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ec:	2208      	movs	r2, #8
 80062ee:	462b      	mov	r3, r5
 80062f0:	eb0d 0102 	add.w	r1, sp, r2
 80062f4:	4648      	mov	r0, r9
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 80062f6:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 80062f8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 80062fc:	f002 fdca 	bl	8008e94 <log_n>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 8006300:	2e10      	cmp	r6, #16
 8006302:	f108 0810 	add.w	r8, r8, #16
 8006306:	d1d4      	bne.n	80062b2 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
 8006308:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800630a:	480d      	ldr	r0, [pc, #52]	; (8006340 <z_arm_fatal_error+0xdc>)
 800630c:	462a      	mov	r2, r5
 800630e:	f002 fd72 	bl	8008df6 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8006312:	69a1      	ldr	r1, [r4, #24]
 8006314:	480b      	ldr	r0, [pc, #44]	; (8006344 <z_arm_fatal_error+0xe0>)
 8006316:	462a      	mov	r2, r5
 8006318:	f002 fd6d 	bl	8008df6 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 800631c:	4621      	mov	r1, r4
 800631e:	4638      	mov	r0, r7
}
 8006320:	b00b      	add	sp, #44	; 0x2c
 8006322:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_fatal_error(reason, esf);
 8006326:	f001 ba35 	b.w	8007794 <z_fatal_error>
 800632a:	bf00      	nop
 800632c:	0800a0bc 	.word	0x0800a0bc
 8006330:	0800a0cc 	.word	0x0800a0cc
 8006334:	0800a8dc 	.word	0x0800a8dc
 8006338:	0800a90b 	.word	0x0800a90b
 800633c:	0800a93a 	.word	0x0800a93a
 8006340:	0800a98c 	.word	0x0800a98c
 8006344:	0800a99b 	.word	0x0800a99b
 8006348:	0800a949 	.word	0x0800a949

0800634c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 800634c:	bf30      	wfi
    b z_SysNmiOnReset
 800634e:	f7ff bffd 	b.w	800634c <z_SysNmiOnReset>
 8006352:	bf00      	nop

08006354 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8006354:	4a14      	ldr	r2, [pc, #80]	; (80063a8 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8006356:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8006358:	4b14      	ldr	r3, [pc, #80]	; (80063ac <z_arm_prep_c+0x58>)
 800635a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800635e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006360:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006364:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8006368:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800636c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8006374:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006378:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800637c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8006380:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8006384:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
 8006388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800638c:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
 8006390:	2300      	movs	r3, #0
 8006392:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8006396:	f001 fa5b 	bl	8007850 <z_bss_zero>
	z_data_copy();
 800639a:	f001 fea3 	bl	80080e4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 800639e:	f000 fa67 	bl	8006870 <z_arm_interrupt_init>
	z_cstart();
 80063a2:	f001 fa7d 	bl	80078a0 <z_cstart>
 80063a6:	bf00      	nop
 80063a8:	08000000 	.word	0x08000000
 80063ac:	e000ed00 	.word	0xe000ed00

080063b0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80063b0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80063b2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80063b6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80063ba:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 80063be:	4904      	ldr	r1, [pc, #16]	; (80063d0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80063c0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80063c2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 80063c4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80063c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80063ca:	4902      	ldr	r1, [pc, #8]	; (80063d4 <_isr_wrapper+0x24>)
	bx r1
 80063cc:	4708      	bx	r1
 80063ce:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80063d0:	08009dac 	.word	0x08009dac
	ldr r1, =z_arm_int_exit
 80063d4:	08006855 	.word	0x08006855

080063d8 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80063d8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80063da:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80063de:	4808      	ldr	r0, [pc, #32]	; (8006400 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80063e0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 80063e4:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80063e6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80063ea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80063ee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80063f0:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80063f2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80063f6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80063fa:	f7ff ffab 	bl	8006354 <z_arm_prep_c>
 80063fe:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8006400:	20002200 	.word	0x20002200

08006404 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8006404:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8006408:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 800640c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800640e:	4672      	mov	r2, lr
	bl z_arm_fault
 8006410:	f000 f94e 	bl	80066b0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8006414:	bd01      	pop	{r0, pc}
 8006416:	bf00      	nop

08006418 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8006418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800641c:	4b35      	ldr	r3, [pc, #212]	; (80064f4 <mem_manage_fault+0xdc>)
 800641e:	4c36      	ldr	r4, [pc, #216]	; (80064f8 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8006420:	4d36      	ldr	r5, [pc, #216]	; (80064fc <mem_manage_fault+0xe4>)
 8006422:	1ae4      	subs	r4, r4, r3
 8006424:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
 8006426:	01a4      	lsls	r4, r4, #6
 8006428:	f044 0901 	orr.w	r9, r4, #1
{
 800642c:	4607      	mov	r7, r0
 800642e:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 8006430:	4833      	ldr	r0, [pc, #204]	; (8006500 <mem_manage_fault+0xe8>)
 8006432:	4649      	mov	r1, r9
{
 8006434:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8006436:	f002 fccf 	bl	8008dd8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800643a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800643c:	06db      	lsls	r3, r3, #27
 800643e:	d503      	bpl.n	8006448 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8006440:	4830      	ldr	r0, [pc, #192]	; (8006504 <mem_manage_fault+0xec>)
 8006442:	4649      	mov	r1, r9
 8006444:	f002 fcc8 	bl	8008dd8 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8006448:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800644a:	0718      	lsls	r0, r3, #28
 800644c:	d504      	bpl.n	8006458 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
 800644e:	482e      	ldr	r0, [pc, #184]	; (8006508 <mem_manage_fault+0xf0>)
 8006450:	f044 0101 	orr.w	r1, r4, #1
 8006454:	f002 fcc0 	bl	8008dd8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8006458:	4d28      	ldr	r5, [pc, #160]	; (80064fc <mem_manage_fault+0xe4>)
 800645a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800645c:	0799      	lsls	r1, r3, #30
 800645e:	d423      	bmi.n	80064a8 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
 8006460:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8006464:	4d25      	ldr	r5, [pc, #148]	; (80064fc <mem_manage_fault+0xe4>)
 8006466:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006468:	07db      	lsls	r3, r3, #31
 800646a:	d504      	bpl.n	8006476 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
 800646c:	4827      	ldr	r0, [pc, #156]	; (800650c <mem_manage_fault+0xf4>)
 800646e:	f044 0101 	orr.w	r1, r4, #1
 8006472:	f002 fcb1 	bl	8008dd8 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8006476:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006478:	0698      	lsls	r0, r3, #26
 800647a:	d504      	bpl.n	8006486 <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
 800647c:	4824      	ldr	r0, [pc, #144]	; (8006510 <mem_manage_fault+0xf8>)
 800647e:	f044 0101 	orr.w	r1, r4, #1
 8006482:	f002 fca9 	bl	8008dd8 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8006486:	4b1d      	ldr	r3, [pc, #116]	; (80064fc <mem_manage_fault+0xe4>)
 8006488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800648a:	06d1      	lsls	r1, r2, #27
 800648c:	d424      	bmi.n	80064d8 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 800648e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8006490:	0792      	lsls	r2, r2, #30
 8006492:	d421      	bmi.n	80064d8 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8006494:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8006496:	4a19      	ldr	r2, [pc, #100]	; (80064fc <mem_manage_fault+0xe4>)
 8006498:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800649a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800649e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 80064a0:	2300      	movs	r3, #0
 80064a2:	7033      	strb	r3, [r6, #0]

	return reason;
}
 80064a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
 80064a8:	f044 0a01 	orr.w	sl, r4, #1
 80064ac:	4819      	ldr	r0, [pc, #100]	; (8006514 <mem_manage_fault+0xfc>)
 80064ae:	4651      	mov	r1, sl
 80064b0:	f002 fc92 	bl	8008dd8 <log_0>
		uint32_t temp = SCB->MMFAR;
 80064b4:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80064b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80064ba:	061a      	lsls	r2, r3, #24
 80064bc:	d5d0      	bpl.n	8006460 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 80064be:	4816      	ldr	r0, [pc, #88]	; (8006518 <mem_manage_fault+0x100>)
 80064c0:	4652      	mov	r2, sl
 80064c2:	4649      	mov	r1, r9
 80064c4:	f002 fc97 	bl	8008df6 <log_1>
			if (from_hard_fault != 0) {
 80064c8:	f1b8 0f00 	cmp.w	r8, #0
 80064cc:	d0ca      	beq.n	8006464 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80064ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80064d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d4:	62ab      	str	r3, [r5, #40]	; 0x28
 80064d6:	e7c5      	b.n	8006464 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	051b      	lsls	r3, r3, #20
 80064dc:	d5da      	bpl.n	8006494 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 80064de:	4639      	mov	r1, r7
 80064e0:	4648      	mov	r0, r9
 80064e2:	f7ff fe6b 	bl	80061bc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d0d4      	beq.n	8006494 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80064ea:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 80064ee:	2002      	movs	r0, #2
 80064f0:	e7d1      	b.n	8006496 <mem_manage_fault+0x7e>
 80064f2:	bf00      	nop
 80064f4:	0800a0bc 	.word	0x0800a0bc
 80064f8:	0800a0cc 	.word	0x0800a0cc
 80064fc:	e000ed00 	.word	0xe000ed00
 8006500:	0800a9c9 	.word	0x0800a9c9
 8006504:	0800a9df 	.word	0x0800a9df
 8006508:	0800aa12 	.word	0x0800aa12
 800650c:	0800aa53 	.word	0x0800aa53
 8006510:	0800aa72 	.word	0x0800aa72
 8006514:	0800aa25 	.word	0x0800aa25
 8006518:	0800aa3d 	.word	0x0800aa3d

0800651c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	4b23      	ldr	r3, [pc, #140]	; (80065ac <usage_fault.constprop.0+0x90>)
 8006520:	4c23      	ldr	r4, [pc, #140]	; (80065b0 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8006522:	4d24      	ldr	r5, [pc, #144]	; (80065b4 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
 8006524:	4824      	ldr	r0, [pc, #144]	; (80065b8 <usage_fault.constprop.0+0x9c>)
 8006526:	1ae4      	subs	r4, r4, r3
 8006528:	08e4      	lsrs	r4, r4, #3
 800652a:	01a4      	lsls	r4, r4, #6
 800652c:	f044 0601 	orr.w	r6, r4, #1
 8006530:	4631      	mov	r1, r6
 8006532:	f002 fc51 	bl	8008dd8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8006536:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006538:	019b      	lsls	r3, r3, #6
 800653a:	d503      	bpl.n	8006544 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
 800653c:	481f      	ldr	r0, [pc, #124]	; (80065bc <usage_fault.constprop.0+0xa0>)
 800653e:	4631      	mov	r1, r6
 8006540:	f002 fc4a 	bl	8008dd8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8006544:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006546:	01dd      	lsls	r5, r3, #7
 8006548:	d504      	bpl.n	8006554 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
 800654a:	481d      	ldr	r0, [pc, #116]	; (80065c0 <usage_fault.constprop.0+0xa4>)
 800654c:	f044 0101 	orr.w	r1, r4, #1
 8006550:	f002 fc42 	bl	8008dd8 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8006554:	4d17      	ldr	r5, [pc, #92]	; (80065b4 <usage_fault.constprop.0+0x98>)
 8006556:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006558:	0318      	lsls	r0, r3, #12
 800655a:	d504      	bpl.n	8006566 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
 800655c:	4819      	ldr	r0, [pc, #100]	; (80065c4 <usage_fault.constprop.0+0xa8>)
 800655e:	f044 0101 	orr.w	r1, r4, #1
 8006562:	f002 fc39 	bl	8008dd8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8006566:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006568:	0359      	lsls	r1, r3, #13
 800656a:	d504      	bpl.n	8006576 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 800656c:	4816      	ldr	r0, [pc, #88]	; (80065c8 <usage_fault.constprop.0+0xac>)
 800656e:	f044 0101 	orr.w	r1, r4, #1
 8006572:	f002 fc31 	bl	8008dd8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8006576:	4d0f      	ldr	r5, [pc, #60]	; (80065b4 <usage_fault.constprop.0+0x98>)
 8006578:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800657a:	039a      	lsls	r2, r3, #14
 800657c:	d504      	bpl.n	8006588 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 800657e:	4813      	ldr	r0, [pc, #76]	; (80065cc <usage_fault.constprop.0+0xb0>)
 8006580:	f044 0101 	orr.w	r1, r4, #1
 8006584:	f002 fc28 	bl	8008dd8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8006588:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800658a:	03db      	lsls	r3, r3, #15
 800658c:	d504      	bpl.n	8006598 <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 800658e:	4810      	ldr	r0, [pc, #64]	; (80065d0 <usage_fault.constprop.0+0xb4>)
 8006590:	f044 0101 	orr.w	r1, r4, #1
 8006594:	f002 fc20 	bl	8008dd8 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8006598:	4a06      	ldr	r2, [pc, #24]	; (80065b4 <usage_fault.constprop.0+0x98>)
 800659a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800659c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80065a0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80065a4:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 80065a6:	2000      	movs	r0, #0
 80065a8:	bd70      	pop	{r4, r5, r6, pc}
 80065aa:	bf00      	nop
 80065ac:	0800a0bc 	.word	0x0800a0bc
 80065b0:	0800a0cc 	.word	0x0800a0cc
 80065b4:	e000ed00 	.word	0xe000ed00
 80065b8:	0800aaa1 	.word	0x0800aaa1
 80065bc:	0800aab9 	.word	0x0800aab9
 80065c0:	0800aacc 	.word	0x0800aacc
 80065c4:	0800aae6 	.word	0x0800aae6
 80065c8:	0800ab04 	.word	0x0800ab04
 80065cc:	0800ab29 	.word	0x0800ab29
 80065d0:	0800ab43 	.word	0x0800ab43

080065d4 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 80065d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d8:	4b2a      	ldr	r3, [pc, #168]	; (8006684 <bus_fault.constprop.0+0xb0>)
 80065da:	4c2b      	ldr	r4, [pc, #172]	; (8006688 <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80065dc:	4d2b      	ldr	r5, [pc, #172]	; (800668c <bus_fault.constprop.0+0xb8>)
 80065de:	1ae4      	subs	r4, r4, r3
 80065e0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
 80065e2:	01a4      	lsls	r4, r4, #6
 80065e4:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 80065e8:	4607      	mov	r7, r0
 80065ea:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 80065ec:	4828      	ldr	r0, [pc, #160]	; (8006690 <bus_fault.constprop.0+0xbc>)
 80065ee:	4641      	mov	r1, r8
 80065f0:	f002 fbf2 	bl	8008dd8 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80065f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80065f6:	04d9      	lsls	r1, r3, #19
 80065f8:	d503      	bpl.n	8006602 <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
 80065fa:	4826      	ldr	r0, [pc, #152]	; (8006694 <bus_fault.constprop.0+0xc0>)
 80065fc:	4641      	mov	r1, r8
 80065fe:	f002 fbeb 	bl	8008dd8 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8006602:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006604:	051a      	lsls	r2, r3, #20
 8006606:	d504      	bpl.n	8006612 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
 8006608:	4823      	ldr	r0, [pc, #140]	; (8006698 <bus_fault.constprop.0+0xc4>)
 800660a:	f044 0101 	orr.w	r1, r4, #1
 800660e:	f002 fbe3 	bl	8008dd8 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8006612:	4d1e      	ldr	r5, [pc, #120]	; (800668c <bus_fault.constprop.0+0xb8>)
 8006614:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006616:	059b      	lsls	r3, r3, #22
 8006618:	d512      	bpl.n	8006640 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
 800661a:	f044 0801 	orr.w	r8, r4, #1
 800661e:	481f      	ldr	r0, [pc, #124]	; (800669c <bus_fault.constprop.0+0xc8>)
 8006620:	4641      	mov	r1, r8
 8006622:	f002 fbd9 	bl	8008dd8 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 8006626:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8006628:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800662a:	0418      	lsls	r0, r3, #16
 800662c:	d508      	bpl.n	8006640 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 800662e:	481c      	ldr	r0, [pc, #112]	; (80066a0 <bus_fault.constprop.0+0xcc>)
 8006630:	4642      	mov	r2, r8
 8006632:	f002 fbe0 	bl	8008df6 <log_1>
			if (from_hard_fault != 0) {
 8006636:	b11f      	cbz	r7, 8006640 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8006638:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800663a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800663e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8006640:	4d12      	ldr	r5, [pc, #72]	; (800668c <bus_fault.constprop.0+0xb8>)
 8006642:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006644:	0559      	lsls	r1, r3, #21
 8006646:	d504      	bpl.n	8006652 <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
 8006648:	4816      	ldr	r0, [pc, #88]	; (80066a4 <bus_fault.constprop.0+0xd0>)
 800664a:	f044 0101 	orr.w	r1, r4, #1
 800664e:	f002 fbc3 	bl	8008dd8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8006652:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006654:	05da      	lsls	r2, r3, #23
 8006656:	d50d      	bpl.n	8006674 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
 8006658:	4813      	ldr	r0, [pc, #76]	; (80066a8 <bus_fault.constprop.0+0xd4>)
 800665a:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 800665e:	f002 fbbb 	bl	8008dd8 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8006662:	4a0a      	ldr	r2, [pc, #40]	; (800668c <bus_fault.constprop.0+0xb8>)
 8006664:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8006666:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8006668:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800666c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800666e:	7030      	strb	r0, [r6, #0]
}
 8006670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8006674:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006676:	049b      	lsls	r3, r3, #18
 8006678:	d5f3      	bpl.n	8006662 <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 800667a:	480c      	ldr	r0, [pc, #48]	; (80066ac <bus_fault.constprop.0+0xd8>)
 800667c:	f044 0101 	orr.w	r1, r4, #1
 8006680:	e7ed      	b.n	800665e <bus_fault.constprop.0+0x8a>
 8006682:	bf00      	nop
 8006684:	0800a0bc 	.word	0x0800a0bc
 8006688:	0800a0cc 	.word	0x0800a0cc
 800668c:	e000ed00 	.word	0xe000ed00
 8006690:	0800ab6e 	.word	0x0800ab6e
 8006694:	0800ab84 	.word	0x0800ab84
 8006698:	0800aa12 	.word	0x0800aa12
 800669c:	0800ab95 	.word	0x0800ab95
 80066a0:	0800abae 	.word	0x0800abae
 80066a4:	0800abc3 	.word	0x0800abc3
 80066a8:	0800abde 	.word	0x0800abde
 80066ac:	0800aa72 	.word	0x0800aa72

080066b0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80066b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80066b4:	4b58      	ldr	r3, [pc, #352]	; (8006818 <z_arm_fault+0x168>)
 80066b6:	685e      	ldr	r6, [r3, #4]
{
 80066b8:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80066ba:	f3c6 0408 	ubfx	r4, r6, #0, #9
 80066be:	2500      	movs	r5, #0
 80066c0:	f385 8811 	msr	BASEPRI, r5
 80066c4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80066c8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80066cc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80066d0:	d10d      	bne.n	80066ee <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80066d2:	f002 030c 	and.w	r3, r2, #12
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d10b      	bne.n	80066f2 <z_arm_fault+0x42>
 80066da:	4950      	ldr	r1, [pc, #320]	; (800681c <z_arm_fault+0x16c>)
 80066dc:	4b50      	ldr	r3, [pc, #320]	; (8006820 <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 80066de:	4851      	ldr	r0, [pc, #324]	; (8006824 <z_arm_fault+0x174>)
 80066e0:	1ac9      	subs	r1, r1, r3
 80066e2:	08c9      	lsrs	r1, r1, #3
 80066e4:	0189      	lsls	r1, r1, #6
 80066e6:	f041 0101 	orr.w	r1, r1, #1
 80066ea:	f002 fb75 	bl	8008dd8 <log_0>
		return NULL;
 80066ee:	462f      	mov	r7, r5
 80066f0:	e004      	b.n	80066fc <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80066f2:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 80066f4:	bf4e      	itee	mi
 80066f6:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
 80066f8:	4607      	movpl	r7, r0
			*nested_exc = true;
 80066fa:	2501      	movpl	r5, #1
	*recoverable = false;
 80066fc:	2300      	movs	r3, #0
 80066fe:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
 8006702:	1ee3      	subs	r3, r4, #3
 8006704:	2b09      	cmp	r3, #9
 8006706:	d86e      	bhi.n	80067e6 <z_arm_fault+0x136>
 8006708:	e8df f003 	tbb	[pc, r3]
 800670c:	40605c05 	.word	0x40605c05
 8006710:	6d6d6d6d 	.word	0x6d6d6d6d
 8006714:	646d      	.short	0x646d
 8006716:	4b42      	ldr	r3, [pc, #264]	; (8006820 <z_arm_fault+0x170>)
 8006718:	4e40      	ldr	r6, [pc, #256]	; (800681c <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800671a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8006818 <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
 800671e:	4842      	ldr	r0, [pc, #264]	; (8006828 <z_arm_fault+0x178>)
 8006720:	1af6      	subs	r6, r6, r3
 8006722:	08f6      	lsrs	r6, r6, #3
 8006724:	01b6      	lsls	r6, r6, #6
 8006726:	f046 0601 	orr.w	r6, r6, #1
 800672a:	4631      	mov	r1, r6
 800672c:	f002 fb54 	bl	8008dd8 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8006730:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
 8006734:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8006738:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
 800673c:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8006740:	d005      	beq.n	800674e <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
 8006742:	483a      	ldr	r0, [pc, #232]	; (800682c <z_arm_fault+0x17c>)
 8006744:	4631      	mov	r1, r6
	PR_FAULT_INFO(
 8006746:	f002 fb47 	bl	8008dd8 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800674a:	2400      	movs	r4, #0
}
 800674c:	e021      	b.n	8006792 <z_arm_fault+0xe2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800674e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	d51d      	bpl.n	8006792 <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
 8006756:	4836      	ldr	r0, [pc, #216]	; (8006830 <z_arm_fault+0x180>)
 8006758:	4631      	mov	r1, r6
 800675a:	f002 fb3d 	bl	8008dd8 <log_0>
		if (SCB_MMFSR != 0) {
 800675e:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8006762:	b133      	cbz	r3, 8006772 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
 8006764:	f10d 0207 	add.w	r2, sp, #7
 8006768:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800676a:	4638      	mov	r0, r7
 800676c:	f7ff fe54 	bl	8006418 <mem_manage_fault>
 8006770:	e00e      	b.n	8006790 <z_arm_fault+0xe0>
		} else if (SCB_BFSR != 0) {
 8006772:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
 8006776:	b12b      	cbz	r3, 8006784 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
 8006778:	f10d 0107 	add.w	r1, sp, #7
 800677c:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 800677e:	f7ff ff29 	bl	80065d4 <bus_fault.constprop.0>
 8006782:	e005      	b.n	8006790 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
 8006784:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 8006788:	b29b      	uxth	r3, r3
 800678a:	b113      	cbz	r3, 8006792 <z_arm_fault+0xe2>
			reason = usage_fault(esf);
 800678c:	f7ff fec6 	bl	800651c <usage_fault.constprop.0>
 8006790:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8006792:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006796:	b993      	cbnz	r3, 80067be <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8006798:	2268      	movs	r2, #104	; 0x68
 800679a:	4639      	mov	r1, r7
 800679c:	a802      	add	r0, sp, #8
 800679e:	f003 fa80 	bl	8009ca2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80067a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a4:	b39d      	cbz	r5, 800680e <z_arm_fault+0x15e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80067a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067aa:	b922      	cbnz	r2, 80067b6 <z_arm_fault+0x106>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80067ac:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80067b0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80067b4:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 80067b6:	a902      	add	r1, sp, #8
 80067b8:	4620      	mov	r0, r4
 80067ba:	f7ff fd53 	bl	8006264 <z_arm_fatal_error>
}
 80067be:	b01d      	add	sp, #116	; 0x74
 80067c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 80067c4:	f10d 0207 	add.w	r2, sp, #7
 80067c8:	2100      	movs	r1, #0
 80067ca:	e7ce      	b.n	800676a <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
 80067cc:	f10d 0107 	add.w	r1, sp, #7
 80067d0:	2000      	movs	r0, #0
 80067d2:	e7d4      	b.n	800677e <z_arm_fault+0xce>
 80067d4:	4911      	ldr	r1, [pc, #68]	; (800681c <z_arm_fault+0x16c>)
 80067d6:	4b12      	ldr	r3, [pc, #72]	; (8006820 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
 80067d8:	4816      	ldr	r0, [pc, #88]	; (8006834 <z_arm_fault+0x184>)
 80067da:	1ac9      	subs	r1, r1, r3
 80067dc:	08c9      	lsrs	r1, r1, #3
 80067de:	0189      	lsls	r1, r1, #6
 80067e0:	f041 0101 	orr.w	r1, r1, #1
 80067e4:	e7af      	b.n	8006746 <z_arm_fault+0x96>
 80067e6:	4a0e      	ldr	r2, [pc, #56]	; (8006820 <z_arm_fault+0x170>)
 80067e8:	4b0c      	ldr	r3, [pc, #48]	; (800681c <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
 80067ea:	4813      	ldr	r0, [pc, #76]	; (8006838 <z_arm_fault+0x188>)
 80067ec:	4913      	ldr	r1, [pc, #76]	; (800683c <z_arm_fault+0x18c>)
 80067ee:	1a9b      	subs	r3, r3, r2
 80067f0:	08db      	lsrs	r3, r3, #3
 80067f2:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
 80067f6:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80067fa:	bf18      	it	ne
 80067fc:	4601      	movne	r1, r0
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	480f      	ldr	r0, [pc, #60]	; (8006840 <z_arm_fault+0x190>)
 8006804:	f1a4 0210 	sub.w	r2, r4, #16
 8006808:	f002 fb0c 	bl	8008e24 <log_2>
 800680c:	e79d      	b.n	800674a <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800680e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	e7cd      	b.n	80067b4 <z_arm_fault+0x104>
 8006818:	e000ed00 	.word	0xe000ed00
 800681c:	0800a0cc 	.word	0x0800a0cc
 8006820:	0800a0bc 	.word	0x0800a0bc
 8006824:	0800abf6 	.word	0x0800abf6
 8006828:	0800ac21 	.word	0x0800ac21
 800682c:	0800ac38 	.word	0x0800ac38
 8006830:	0800ac59 	.word	0x0800ac59
 8006834:	0800ac78 	.word	0x0800ac78
 8006838:	0800acb1 	.word	0x0800acb1
 800683c:	0800ac9c 	.word	0x0800ac9c
 8006840:	0800acca 	.word	0x0800acca

08006844 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8006844:	4a02      	ldr	r2, [pc, #8]	; (8006850 <z_arm_fault_init+0xc>)
 8006846:	6953      	ldr	r3, [r2, #20]
 8006848:	f043 0310 	orr.w	r3, r3, #16
 800684c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800684e:	4770      	bx	lr
 8006850:	e000ed00 	.word	0xe000ed00

08006854 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8006854:	4b04      	ldr	r3, [pc, #16]	; (8006868 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8006856:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8006858:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
 800685a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 800685c:	d003      	beq.n	8006866 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800685e:	4903      	ldr	r1, [pc, #12]	; (800686c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8006860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8006864:	600a      	str	r2, [r1, #0]

08006866 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8006866:	4770      	bx	lr
	ldr r3, =_kernel
 8006868:	20000780 	.word	0x20000780
	ldr r1, =_SCS_ICSR
 800686c:	e000ed04 	.word	0xe000ed04

08006870 <z_arm_interrupt_init>:
 8006870:	4804      	ldr	r0, [pc, #16]	; (8006884 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	2110      	movs	r1, #16
 8006876:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8006878:	3301      	adds	r3, #1
 800687a:	2b61      	cmp	r3, #97	; 0x61
 800687c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8006880:	d1f9      	bne.n	8006876 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8006882:	4770      	bx	lr
 8006884:	e000e100 	.word	0xe000e100

08006888 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8006888:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <z_impl_k_thread_abort+0x1c>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	4283      	cmp	r3, r0
 800688e:	d107      	bne.n	80068a0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006890:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8006894:	b123      	cbz	r3, 80068a0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8006896:	4a04      	ldr	r2, [pc, #16]	; (80068a8 <z_impl_k_thread_abort+0x20>)
 8006898:	6853      	ldr	r3, [r2, #4]
 800689a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 80068a0:	f001 bbce 	b.w	8008040 <z_thread_abort>
 80068a4:	20000780 	.word	0x20000780
 80068a8:	e000ed00 	.word	0xe000ed00

080068ac <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80068ac:	4b02      	ldr	r3, [pc, #8]	; (80068b8 <z_arm_configure_static_mpu_regions+0xc>)
 80068ae:	4a03      	ldr	r2, [pc, #12]	; (80068bc <z_arm_configure_static_mpu_regions+0x10>)
 80068b0:	4803      	ldr	r0, [pc, #12]	; (80068c0 <z_arm_configure_static_mpu_regions+0x14>)
 80068b2:	2101      	movs	r1, #1
 80068b4:	f000 b892 	b.w	80069dc <arm_core_mpu_configure_static_mpu_regions>
 80068b8:	20020000 	.word	0x20020000
 80068bc:	20000000 	.word	0x20000000
 80068c0:	0800a3f8 	.word	0x0800a3f8

080068c4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 80068c4:	b510      	push	{r4, lr}
 80068c6:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
 80068c8:	f7ff fc42 	bl	8006150 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80068cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80068ce:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
 80068d0:	1a12      	subs	r2, r2, r0
	dynamic_regions[region_num].size = guard_size;
 80068d2:	e9c3 2000 	strd	r2, r0, [r3]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80068d6:	4a05      	ldr	r2, [pc, #20]	; (80068ec <z_arm_configure_dynamic_mpu_regions+0x28>)
 80068d8:	609a      	str	r2, [r3, #8]
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
 80068da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80068de:	2101      	movs	r1, #1
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 b885 	b.w	80069f0 <arm_core_mpu_configure_dynamic_mpu_regions>
 80068e6:	bf00      	nop
 80068e8:	200006ec 	.word	0x200006ec
 80068ec:	150b0000 	.word	0x150b0000

080068f0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 80068f2:	4f2a      	ldr	r7, [pc, #168]	; (800699c <mpu_configure_regions+0xac>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80068f4:	2600      	movs	r6, #0
 80068f6:	428e      	cmp	r6, r1
 80068f8:	da15      	bge.n	8006926 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
 80068fa:	6844      	ldr	r4, [r0, #4]
 80068fc:	2c00      	cmp	r4, #0
 80068fe:	d049      	beq.n	8006994 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8006900:	b1cb      	cbz	r3, 8006936 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8006902:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8006906:	ea14 0f0c 	tst.w	r4, ip
 800690a:	d00e      	beq.n	800692a <mpu_configure_regions+0x3a>
 800690c:	4a24      	ldr	r2, [pc, #144]	; (80069a0 <mpu_configure_regions+0xb0>)
 800690e:	4b25      	ldr	r3, [pc, #148]	; (80069a4 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 8006910:	4825      	ldr	r0, [pc, #148]	; (80069a8 <mpu_configure_regions+0xb8>)
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	08d2      	lsrs	r2, r2, #3
 8006916:	0192      	lsls	r2, r2, #6
 8006918:	f042 0201 	orr.w	r2, r2, #1
 800691c:	4631      	mov	r1, r6
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 800691e:	f002 fa6a 	bl	8008df6 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8006922:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8006926:	4610      	mov	r0, r2
 8006928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
 800692a:	2c1f      	cmp	r4, #31
 800692c:	d9ee      	bls.n	800690c <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
 800692e:	6805      	ldr	r5, [r0, #0]
		&&
 8006930:	ea1c 0f05 	tst.w	ip, r5
 8006934:	d1ea      	bne.n	800690c <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8006936:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8006938:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800693a:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
 800693e:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
 8006940:	d916      	bls.n	8006970 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
 8006942:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8006946:	d815      	bhi.n	8006974 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8006948:	3c01      	subs	r4, #1
 800694a:	fab4 f484 	clz	r4, r4
 800694e:	f1c4 041f 	rsb	r4, r4, #31
 8006952:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8006954:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8006956:	ea4c 0404 	orr.w	r4, ip, r4
 800695a:	d90d      	bls.n	8006978 <mpu_configure_regions+0x88>
 800695c:	4a10      	ldr	r2, [pc, #64]	; (80069a0 <mpu_configure_regions+0xb0>)
 800695e:	4b11      	ldr	r3, [pc, #68]	; (80069a4 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8006960:	4812      	ldr	r0, [pc, #72]	; (80069ac <mpu_configure_regions+0xbc>)
 8006962:	1ad2      	subs	r2, r2, r3
 8006964:	08d2      	lsrs	r2, r2, #3
 8006966:	0192      	lsls	r2, r2, #6
 8006968:	f042 0201 	orr.w	r2, r2, #1
 800696c:	4629      	mov	r1, r5
 800696e:	e7d6      	b.n	800691e <mpu_configure_regions+0x2e>
		return REGION_32B;
 8006970:	2408      	movs	r4, #8
 8006972:	e7ef      	b.n	8006954 <mpu_configure_regions+0x64>
		return REGION_4G;
 8006974:	243e      	movs	r4, #62	; 0x3e
 8006976:	e7ed      	b.n	8006954 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8006978:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
 800697c:	432a      	orrs	r2, r5
 800697e:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8006982:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 8006986:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800698a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800698e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
 8006992:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
 8006994:	3601      	adds	r6, #1
 8006996:	300c      	adds	r0, #12
 8006998:	e7ad      	b.n	80068f6 <mpu_configure_regions+0x6>
 800699a:	bf00      	nop
 800699c:	e000ed00 	.word	0xe000ed00
 80069a0:	0800a0c4 	.word	0x0800a0c4
 80069a4:	0800a0bc 	.word	0x0800a0bc
 80069a8:	0800ace1 	.word	0x0800ace1
 80069ac:	0800ad04 	.word	0x0800ad04

080069b0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80069b0:	4b04      	ldr	r3, [pc, #16]	; (80069c4 <arm_core_mpu_enable+0x14>)
 80069b2:	2205      	movs	r2, #5
 80069b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 80069b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80069bc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	e000ed00 	.word	0xe000ed00

080069c8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80069c8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80069cc:	4b02      	ldr	r3, [pc, #8]	; (80069d8 <arm_core_mpu_disable+0x10>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	e000ed00 	.word	0xe000ed00

080069dc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 80069dc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80069de:	4c03      	ldr	r4, [pc, #12]	; (80069ec <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80069e0:	2301      	movs	r3, #1
 80069e2:	7822      	ldrb	r2, [r4, #0]
 80069e4:	f7ff ff84 	bl	80068f0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80069e8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 80069ea:	bd10      	pop	{r4, pc}
 80069ec:	200007c3 	.word	0x200007c3

080069f0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 80069f0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80069f2:	4a09      	ldr	r2, [pc, #36]	; (8006a18 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 80069f4:	2300      	movs	r3, #0
 80069f6:	7812      	ldrb	r2, [r2, #0]
 80069f8:	f7ff ff7a 	bl	80068f0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80069fc:	f110 0f16 	cmn.w	r0, #22
 8006a00:	d003      	beq.n	8006a0a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8006a02:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 8006a04:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8006a06:	2807      	cmp	r0, #7
 8006a08:	dd00      	ble.n	8006a0c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8006a0a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8006a0c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
 8006a10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8006a14:	3001      	adds	r0, #1
 8006a16:	e7f6      	b.n	8006a06 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8006a18:	200007c3 	.word	0x200007c3
 8006a1c:	e000ed00 	.word	0xe000ed00

08006a20 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8006a20:	4914      	ldr	r1, [pc, #80]	; (8006a74 <z_arm_mpu_init+0x54>)
 8006a22:	6808      	ldr	r0, [r1, #0]
 8006a24:	2808      	cmp	r0, #8
{
 8006a26:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8006a28:	d821      	bhi.n	8006a6e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8006a2a:	f7ff ffcd 	bl	80069c8 <arm_core_mpu_disable>
	MPU->RNR = index;
 8006a2e:	4c12      	ldr	r4, [pc, #72]	; (8006a78 <z_arm_mpu_init+0x58>)
 8006a30:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8006a32:	2200      	movs	r2, #0
 8006a34:	4290      	cmp	r0, r2
 8006a36:	f101 010c 	add.w	r1, r1, #12
 8006a3a:	d105      	bne.n	8006a48 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8006a3c:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <z_arm_mpu_init+0x5c>)
 8006a3e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8006a40:	f7ff ffb6 	bl	80069b0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8006a44:	2000      	movs	r0, #0
}
 8006a46:	bd10      	pop	{r4, pc}
 8006a48:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8006a4c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8006a50:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8006a54:	4313      	orrs	r3, r2
 8006a56:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8006a5a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8006a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a62:	f043 0301 	orr.w	r3, r3, #1
 8006a66:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8006a6a:	3201      	adds	r2, #1
 8006a6c:	e7e2      	b.n	8006a34 <z_arm_mpu_init+0x14>
		return -1;
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a72:	e7e8      	b.n	8006a46 <z_arm_mpu_init+0x26>
 8006a74:	0800a404 	.word	0x0800a404
 8006a78:	e000ed00 	.word	0xe000ed00
 8006a7c:	200007c3 	.word	0x200007c3

08006a80 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8006a80:	4b01      	ldr	r3, [pc, #4]	; (8006a88 <__stdout_hook_install+0x8>)
 8006a82:	6018      	str	r0, [r3, #0]
}
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	2000001c 	.word	0x2000001c

08006a8c <clock_control_on.constprop.0>:
 *
 * @param dev Device structure whose driver controls the clock.
 * @param sys Opaque data representing the clock.
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
 8006a8c:	b513      	push	{r0, r1, r4, lr}
 8006a8e:	9001      	str	r0, [sp, #4]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8006a90:	4c08      	ldr	r4, [pc, #32]	; (8006ab4 <clock_control_on.constprop.0+0x28>)
 8006a92:	4620      	mov	r0, r4
 8006a94:	f002 ff1b 	bl	80098ce <z_device_ready>
 8006a98:	b138      	cbz	r0, 8006aaa <clock_control_on.constprop.0+0x1e>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8006a9a:	68a3      	ldr	r3, [r4, #8]
 8006a9c:	9901      	ldr	r1, [sp, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4620      	mov	r0, r4
}
 8006aa2:	b002      	add	sp, #8
 8006aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->on(dev, sys);
 8006aa8:	4718      	bx	r3
}
 8006aaa:	f06f 0012 	mvn.w	r0, #18
 8006aae:	b002      	add	sp, #8
 8006ab0:	bd10      	pop	{r4, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20000094 	.word	0x20000094

08006ab8 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8006ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aba:	460c      	mov	r4, r1
 8006abc:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8006abe:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 8006ac2:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8006ac4:	6902      	ldr	r2, [r0, #16]
{
 8006ac6:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8006ac8:	d123      	bne.n	8006b12 <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006aca:	f004 0303 	and.w	r3, r4, #3
 8006ace:	3304      	adds	r3, #4
 8006ad0:	009a      	lsls	r2, r3, #2
 8006ad2:	230f      	movs	r3, #15
 8006ad4:	4093      	lsls	r3, r2
 8006ad6:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	4933      	ldr	r1, [pc, #204]	; (8006bac <gpio_stm32_pin_interrupt_configure+0xf4>)
 8006ade:	3202      	adds	r2, #2
 8006ae0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006ae4:	0c19      	lsrs	r1, r3, #16
 8006ae6:	ea02 4313 	and.w	r3, r2, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aea:	fa91 f2a1 	rbit	r2, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8006aee:	fab2 f282 	clz	r2, r2
 8006af2:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d109      	bne.n	8006b0e <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 8006afa:	4620      	mov	r0, r4
 8006afc:	f7fe ffe6 	bl	8005acc <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7ff f837 	bl	8005b74 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8006b06:	2100      	movs	r1, #0
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f7fe ffed 	bl	8005ae8 <stm32_exti_trigger>
	int err = 0;
 8006b0e:	2500      	movs	r5, #0
 8006b10:	e03e      	b.n	8006b90 <gpio_stm32_pin_interrupt_configure+0xd8>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8006b12:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006b16:	d042      	beq.n	8006b9e <gpio_stm32_pin_interrupt_configure+0xe6>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8006b18:	4925      	ldr	r1, [pc, #148]	; (8006bb0 <gpio_stm32_pin_interrupt_configure+0xf8>)
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f7ff f818 	bl	8005b50 <stm32_exti_set_callback>
 8006b20:	4605      	mov	r5, r0
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d13e      	bne.n	8006ba4 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 8006b26:	4a23      	ldr	r2, [pc, #140]	; (8006bb4 <gpio_stm32_pin_interrupt_configure+0xfc>)
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8006b28:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 8006b2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b2e:	466b      	mov	r3, sp
 8006b30:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff ffa9 	bl	8006a8c <clock_control_on.constprop.0>
	if (ret != 0) {
 8006b3a:	b9c0      	cbnz	r0, 8006b6e <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006b3c:	f004 0103 	and.w	r1, r4, #3
 8006b40:	3104      	adds	r1, #4
 8006b42:	008b      	lsls	r3, r1, #2
 8006b44:	210f      	movs	r1, #15
 8006b46:	4099      	lsls	r1, r3
 8006b48:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8006b4c:	b2ca      	uxtb	r2, r1
 8006b4e:	0092      	lsls	r2, r2, #2
 8006b50:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006b54:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8006b58:	0c0b      	lsrs	r3, r1, #16
 8006b5a:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8006b60:	fab3 f383 	clz	r3, r3
 8006b64:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 8006b68:	409f      	lsls	r7, r3
 8006b6a:	430f      	orrs	r7, r1
 8006b6c:	6097      	str	r7, [r2, #8]

	switch (trig) {
 8006b6e:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8006b72:	d010      	beq.n	8006b96 <gpio_stm32_pin_interrupt_configure+0xde>
 8006b74:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 8006b78:	d00f      	beq.n	8006b9a <gpio_stm32_pin_interrupt_configure+0xe2>
 8006b7a:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 8006b7e:	bf14      	ite	ne
 8006b80:	2100      	movne	r1, #0
 8006b82:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8006b84:	4620      	mov	r0, r4
 8006b86:	f7fe ffaf 	bl	8005ae8 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f7fe ff90 	bl	8005ab0 <stm32_exti_enable>

exit:
	return err;
}
 8006b90:	4628      	mov	r0, r5
 8006b92:	b003      	add	sp, #12
 8006b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8006b96:	2101      	movs	r1, #1
 8006b98:	e7f4      	b.n	8006b84 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 8006b9a:	2103      	movs	r1, #3
 8006b9c:	e7f2      	b.n	8006b84 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 8006b9e:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8006ba2:	e7f5      	b.n	8006b90 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 8006ba4:	f06f 050f 	mvn.w	r5, #15
	return err;
 8006ba8:	e7f2      	b.n	8006b90 <gpio_stm32_pin_interrupt_configure+0xd8>
 8006baa:	bf00      	nop
 8006bac:	40013800 	.word	0x40013800
 8006bb0:	08009579 	.word	0x08009579
 8006bb4:	0800a190 	.word	0x0800a190

08006bb8 <gpio_stm32_clock_request>:
{
 8006bb8:	b570      	push	{r4, r5, r6, lr}
					(clock_control_subsys_t *)&cfg->pclken);
 8006bba:	6844      	ldr	r4, [r0, #4]
 8006bbc:	340c      	adds	r4, #12
	if (on) {
 8006bbe:	b121      	cbz	r1, 8006bca <gpio_stm32_clock_request+0x12>
		ret = clock_control_on(clk,
 8006bc0:	4620      	mov	r0, r4
}
 8006bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = clock_control_on(clk,
 8006bc6:	f7ff bf61 	b.w	8006a8c <clock_control_on.constprop.0>
 8006bca:	4d07      	ldr	r5, [pc, #28]	; (8006be8 <gpio_stm32_clock_request+0x30>)
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f002 fe7e 	bl	80098ce <z_device_ready>
 8006bd2:	b130      	cbz	r0, 8006be2 <gpio_stm32_clock_request+0x2a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8006bd4:	68ab      	ldr	r3, [r5, #8]
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	4628      	mov	r0, r5
 8006bda:	685b      	ldr	r3, [r3, #4]
}
 8006bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006be0:	4718      	bx	r3
 8006be2:	f06f 0012 	mvn.w	r0, #18
 8006be6:	bd70      	pop	{r4, r5, r6, pc}
 8006be8:	20000094 	.word	0x20000094

08006bec <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 8006bec:	b570      	push	{r4, r5, r6, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8006bee:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8006bf0:	6844      	ldr	r4, [r0, #4]
 8006bf2:	4d19      	ldr	r5, [pc, #100]	; (8006c58 <spi_stm32_init+0x6c>)
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	f002 fe6a 	bl	80098ce <z_device_ready>
 8006bfa:	b968      	cbnz	r0, 8006c18 <spi_stm32_init+0x2c>
 8006bfc:	4b17      	ldr	r3, [pc, #92]	; (8006c5c <spi_stm32_init+0x70>)
 8006bfe:	4918      	ldr	r1, [pc, #96]	; (8006c60 <spi_stm32_init+0x74>)
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken) != 0) {
		LOG_ERR("Could not enable SPI clock");
 8006c00:	4818      	ldr	r0, [pc, #96]	; (8006c64 <spi_stm32_init+0x78>)
 8006c02:	1ac9      	subs	r1, r1, r3
 8006c04:	08c9      	lsrs	r1, r1, #3
 8006c06:	0189      	lsls	r1, r1, #6
 8006c08:	f041 0101 	orr.w	r1, r1, #1
 8006c0c:	f002 f8e4 	bl	8008dd8 <log_0>
		return -EIO;
 8006c10:	f06f 0404 	mvn.w	r4, #4
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8006c14:	4620      	mov	r0, r4
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
 8006c18:	68ab      	ldr	r3, [r5, #8]
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4798      	blx	r3
	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8006c22:	4605      	mov	r5, r0
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d1e9      	bne.n	8006bfc <spi_stm32_init+0x10>
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 8006c28:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8006c2c:	68a2      	ldr	r2, [r4, #8]
 8006c2e:	f7ff f88d 	bl	8005d4c <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8006c32:	1e04      	subs	r4, r0, #0
 8006c34:	da0b      	bge.n	8006c4e <spi_stm32_init+0x62>
 8006c36:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <spi_stm32_init+0x70>)
 8006c38:	4a09      	ldr	r2, [pc, #36]	; (8006c60 <spi_stm32_init+0x74>)
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8006c3a:	480b      	ldr	r0, [pc, #44]	; (8006c68 <spi_stm32_init+0x7c>)
 8006c3c:	1ad2      	subs	r2, r2, r3
 8006c3e:	08d2      	lsrs	r2, r2, #3
 8006c40:	0192      	lsls	r2, r2, #6
 8006c42:	f042 0201 	orr.w	r2, r2, #1
 8006c46:	4621      	mov	r1, r4
 8006c48:	f002 f8d5 	bl	8008df6 <log_1>
		return err;
 8006c4c:	e7e2      	b.n	8006c14 <spi_stm32_init+0x28>
	spi_context_unlock_unconditionally(&data->ctx);
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f002 fda2 	bl	8009798 <spi_context_unlock_unconditionally>
	return 0;
 8006c54:	462c      	mov	r4, r5
 8006c56:	e7dd      	b.n	8006c14 <spi_stm32_init+0x28>
 8006c58:	20000094 	.word	0x20000094
 8006c5c:	0800a0bc 	.word	0x0800a0bc
 8006c60:	0800a0d4 	.word	0x0800a0d4
 8006c64:	0800ad5d 	.word	0x0800ad5d
 8006c68:	0800ad78 	.word	0x0800ad78

08006c6c <spi_stm32_transceive>:
{
 8006c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c70:	461f      	mov	r7, r3
	SPI_TypeDef *spi = cfg->spi;
 8006c72:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 8006c74:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8006c76:	689e      	ldr	r6, [r3, #8]
{
 8006c78:	b08f      	sub	sp, #60	; 0x3c
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	4688      	mov	r8, r1
	if (!tx_bufs && !rx_bufs) {
 8006c7e:	4691      	mov	r9, r2
 8006c80:	b90a      	cbnz	r2, 8006c86 <spi_stm32_transceive+0x1a>
 8006c82:	2f00      	cmp	r7, #0
 8006c84:	d03d      	beq.n	8006d02 <spi_stm32_transceive+0x96>
static inline void spi_context_lock(struct spi_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal,
				    const struct spi_config *spi_cfg)
{
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8006c86:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006c8a:	045b      	lsls	r3, r3, #17
 8006c8c:	d43d      	bmi.n	8006d0a <spi_stm32_transceive+0x9e>
	return z_impl_k_sem_take(sem, timeout);
 8006c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c96:	f104 0008 	add.w	r0, r4, #8
 8006c9a:	f000 ffd7 	bl	8007c4c <z_impl_k_sem_take>
		(ctx->owner == spi_cfg)) {
			return;
	}

	k_sem_take(&ctx->lock, K_FOREVER);
	ctx->owner = spi_cfg;
 8006c9e:	f8c4 8004 	str.w	r8, [r4, #4]
	const uint32_t scaler[] = {
 8006ca2:	f8df c2e8 	ldr.w	ip, [pc, #744]	; 8006f8c <spi_stm32_transceive+0x320>
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8006ca6:	686b      	ldr	r3, [r5, #4]
 8006ca8:	9303      	str	r3, [sp, #12]
	const uint32_t scaler[] = {
 8006caa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	struct spi_stm32_data *data = DEV_DATA(dev);
 8006cae:	f8d5 b010 	ldr.w	fp, [r5, #16]
	const uint32_t scaler[] = {
 8006cb2:	ad06      	add	r5, sp, #24
 8006cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cb6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8006cba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8006cbe:	f8db 3000 	ldr.w	r3, [fp]
 8006cc2:	4598      	cmp	r8, r3
 8006cc4:	f000 80c2 	beq.w	8006e4c <spi_stm32_transceive+0x1e0>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8006cc8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006ccc:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d002      	beq.n	8006cda <spi_stm32_transceive+0x6e>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	f040 8168 	bne.w	8006faa <spi_stm32_transceive+0x33e>
	SPI_TypeDef *spi = cfg->spi;
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	689d      	ldr	r5, [r3, #8]
 8006cde:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8006f90 <spi_stm32_transceive+0x324>
 8006ce2:	4650      	mov	r0, sl
 8006ce4:	f002 fdf3 	bl	80098ce <z_device_ready>
 8006ce8:	b9b0      	cbnz	r0, 8006d18 <spi_stm32_transceive+0xac>
 8006cea:	4ba2      	ldr	r3, [pc, #648]	; (8006f74 <spi_stm32_transceive+0x308>)
 8006cec:	49a2      	ldr	r1, [pc, #648]	; (8006f78 <spi_stm32_transceive+0x30c>)
		LOG_ERR("Failed call clock_control_get_rate");
 8006cee:	48a3      	ldr	r0, [pc, #652]	; (8006f7c <spi_stm32_transceive+0x310>)
 8006cf0:	1ac9      	subs	r1, r1, r3
 8006cf2:	08c9      	lsrs	r1, r1, #3
 8006cf4:	0189      	lsls	r1, r1, #6
 8006cf6:	f041 0101 	orr.w	r1, r1, #1
 8006cfa:	f002 f86d 	bl	8008dd8 <log_0>
		return -EIO;
 8006cfe:	f06f 0704 	mvn.w	r7, #4
}
 8006d02:	4638      	mov	r0, r7
 8006d04:	b00f      	add	sp, #60	; 0x3c
 8006d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1be      	bne.n	8006c8e <spi_stm32_transceive+0x22>
		(k_sem_count_get(&ctx->lock) == 0) &&
 8006d10:	6863      	ldr	r3, [r4, #4]
 8006d12:	4598      	cmp	r8, r3
 8006d14:	d1bb      	bne.n	8006c8e <spi_stm32_transceive+0x22>
 8006d16:	e7c4      	b.n	8006ca2 <spi_stm32_transceive+0x36>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8006d18:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0e3      	beq.n	8006cea <spi_stm32_transceive+0x7e>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8006d22:	9903      	ldr	r1, [sp, #12]
 8006d24:	aa05      	add	r2, sp, #20
 8006d26:	4650      	mov	r0, sl
 8006d28:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	dbdd      	blt.n	8006cea <spi_stm32_transceive+0x7e>
		uint32_t clk = clock >> br;
 8006d2e:	9a05      	ldr	r2, [sp, #20]
		if (clk <= config->frequency) {
 8006d30:	f8d8 1000 	ldr.w	r1, [r8]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8006d34:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 8006d36:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 8006d3a:	4288      	cmp	r0, r1
 8006d3c:	f240 820d 	bls.w	800715a <spi_stm32_transceive+0x4ee>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8006d40:	3301      	adds	r3, #1
 8006d42:	2b09      	cmp	r3, #9
 8006d44:	d1f7      	bne.n	8006d36 <spi_stm32_transceive+0xca>
 8006d46:	488b      	ldr	r0, [pc, #556]	; (8006f74 <spi_stm32_transceive+0x308>)
 8006d48:	4b8b      	ldr	r3, [pc, #556]	; (8006f78 <spi_stm32_transceive+0x30c>)
 8006d4a:	1a1b      	subs	r3, r3, r0
 8006d4c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8006d4e:	019b      	lsls	r3, r3, #6
 8006d50:	f043 0301 	orr.w	r3, r3, #1
 8006d54:	f8ad 3000 	strh.w	r3, [sp]
 8006d58:	4889      	ldr	r0, [pc, #548]	; (8006f80 <spi_stm32_transceive+0x314>)
 8006d5a:	0a13      	lsrs	r3, r2, #8
 8006d5c:	0852      	lsrs	r2, r2, #1
 8006d5e:	f002 f87a 	bl	8008e56 <log_3>
		return -EINVAL;
 8006d62:	f06f 0715 	mvn.w	r7, #21
 8006d66:	e7cc      	b.n	8006d02 <spi_stm32_transceive+0x96>
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8006d68:	682a      	ldr	r2, [r5, #0]
 8006d6a:	f042 0202 	orr.w	r2, r2, #2
 8006d6e:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8006d70:	682a      	ldr	r2, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8006d72:	0758      	lsls	r0, r3, #29
 8006d74:	bf4c      	ite	mi
 8006d76:	f042 0201 	orrmi.w	r2, r2, #1
 8006d7a:	f022 0201 	bicpl.w	r2, r2, #1
 8006d7e:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8006d80:	682a      	ldr	r2, [r5, #0]
 8006d82:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8006d86:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8006d88:	682a      	ldr	r2, [r5, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8006d8a:	06d9      	lsls	r1, r3, #27
 8006d8c:	bf4c      	ite	mi
 8006d8e:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 8006d92:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 8006d96:	602a      	str	r2, [r5, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8006d98:	682a      	ldr	r2, [r5, #0]
 8006d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d9e:	602a      	str	r2, [r5, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8006da0:	f8d8 2008 	ldr.w	r2, [r8, #8]
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006da4:	6829      	ldr	r1, [r5, #0]
 8006da6:	f003 0001 	and.w	r0, r3, #1
 8006daa:	b15a      	cbz	r2, 8006dc4 <spi_stm32_transceive+0x158>
 8006dac:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006db0:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006db2:	6869      	ldr	r1, [r5, #4]
 8006db4:	f021 0104 	bic.w	r1, r1, #4
 8006db8:	6069      	str	r1, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8006dba:	b968      	cbnz	r0, 8006dd8 <spi_stm32_transceive+0x16c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8006dbc:	6829      	ldr	r1, [r5, #0]
 8006dbe:	f441 7182 	orr.w	r1, r1, #260	; 0x104
 8006dc2:	e00c      	b.n	8006dde <spi_stm32_transceive+0x172>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006dc4:	f421 7100 	bic.w	r1, r1, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	f000 80cb 	beq.w	8006f64 <spi_stm32_transceive+0x2f8>
 8006dce:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006dd0:	6869      	ldr	r1, [r5, #4]
 8006dd2:	f021 0104 	bic.w	r1, r1, #4
 8006dd6:	6069      	str	r1, [r5, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8006dd8:	6829      	ldr	r1, [r5, #0]
 8006dda:	f421 7182 	bic.w	r1, r1, #260	; 0x104
 8006dde:	6029      	str	r1, [r5, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8006de0:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8006de4:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8006de6:	682b      	ldr	r3, [r5, #0]
 8006de8:	bf0c      	ite	eq
 8006dea:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 8006dee:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 8006df2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8006df4:	686b      	ldr	r3, [r5, #4]
 8006df6:	f023 0310 	bic.w	r3, r3, #16
 8006dfa:	606b      	str	r3, [r5, #4]
	data->ctx.config = config;
 8006dfc:	f8cb 8000 	str.w	r8, [fp]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	f000 80c7 	beq.w	8006f94 <spi_stm32_transceive+0x328>
 8006e06:	6810      	ldr	r0, [r2, #0]
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	f000 80c3 	beq.w	8006f94 <spi_stm32_transceive+0x328>
		/* Validate CS active levels are equivalent */
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8006e0e:	7a11      	ldrb	r1, [r2, #8]
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 8006e10:	7a53      	ldrb	r3, [r2, #9]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 8006e12:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
 8006e16:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006e1a:	f8de 5000 	ldr.w	r5, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8006e1e:	07da      	lsls	r2, r3, #31
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8006e20:	bf54      	ite	pl
 8006e22:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8006e26:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006e2a:	f04f 0c01 	mov.w	ip, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8006e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006e32:	fa0c fc01 	lsl.w	ip, ip, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006e36:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006e38:	bf4c      	ite	mi
 8006e3a:	ea45 050c 	orrmi.w	r5, r5, ip
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8006e3e:	ea25 050c 	bicpl.w	r5, r5, ip
	}

	return api->pin_configure(port, pin, flags);
 8006e42:	f8d8 3000 	ldr.w	r3, [r8]
 8006e46:	f8ce 5000 	str.w	r5, [lr]
 8006e4a:	4798      	blx	r3
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	if (tx_bufs) {
 8006e4c:	f1b9 0f00 	cmp.w	r9, #0
 8006e50:	f000 80ae 	beq.w	8006fb0 <spi_stm32_transceive+0x344>
		ctx->current_tx = tx_bufs->buffers;
 8006e54:	f8d9 3000 	ldr.w	r3, [r9]
		ctx->tx_count = tx_bufs->count;
 8006e58:	f8d9 2004 	ldr.w	r2, [r9, #4]
		ctx->current_tx = tx_bufs->buffers;
 8006e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
		ctx->tx_count = tx_bufs->count;
 8006e5e:	6322      	str	r2, [r4, #48]	; 0x30
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8006e60:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
 8006e62:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8006e64:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_len = ctx->current_tx->len / dfs;
 8006e66:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count = 0;
		ctx->tx_buf = NULL;
		ctx->tx_len = 0;
	}

	if (rx_bufs) {
 8006e68:	2f00      	cmp	r7, #0
 8006e6a:	f000 80a6 	beq.w	8006fba <spi_stm32_transceive+0x34e>
		ctx->current_rx = rx_bufs->buffers;
 8006e6e:	683b      	ldr	r3, [r7, #0]
		ctx->rx_count = rx_bufs->count;
 8006e70:	687a      	ldr	r2, [r7, #4]
		ctx->current_rx = rx_bufs->buffers;
 8006e72:	6363      	str	r3, [r4, #52]	; 0x34
		ctx->rx_count = rx_bufs->count;
 8006e74:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8006e76:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
 8006e78:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8006e7a:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_len = ctx->current_rx->len / dfs;
 8006e7c:	64a3      	str	r3, [r4, #72]	; 0x48
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006e7e:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = 0;
		ctx->rx_buf = NULL;
		ctx->rx_len = 0;
	}

	ctx->sync_status = 0;
 8006e80:	2200      	movs	r2, #0
 8006e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e86:	62a2      	str	r2, [r4, #40]	; 0x28
	_spi_context_cs_control(ctx, on, false);
 8006e88:	2101      	movs	r1, #1
 8006e8a:	6033      	str	r3, [r6, #0]
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f002 fc5e 	bl	800974e <_spi_context_cs_control>
	uint16_t operation = data->ctx.config->operation;
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8006e96:	f013 0101 	ands.w	r1, r3, #1
 8006e9a:	f040 80cf 	bne.w	800703c <spi_stm32_transceive+0x3d0>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8006e9e:	68b2      	ldr	r2, [r6, #8]
 8006ea0:	0790      	lsls	r0, r2, #30
 8006ea2:	d5fc      	bpl.n	8006e9e <spi_stm32_transceive+0x232>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8006ea4:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8006ea8:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8006eaa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8006eac:	f040 8090 	bne.w	8006fd0 <spi_stm32_transceive+0x364>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 8006eb0:	b112      	cbz	r2, 8006eb8 <spi_stm32_transceive+0x24c>
 8006eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006eb4:	b103      	cbz	r3, 8006eb8 <spi_stm32_transceive+0x24c>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8006eb6:	7811      	ldrb	r1, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8006eb8:	b2c9      	uxtb	r1, r1
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8006eba:	7331      	strb	r1, [r6, #12]
	if (!ctx->tx_len) {
 8006ebc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ebe:	b183      	cbz	r3, 8006ee2 <spi_stm32_transceive+0x276>
	ctx->tx_len -= len;
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d17d      	bne.n	8006fc4 <spi_stm32_transceive+0x358>
		ctx->tx_count--;
 8006ec8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d07c      	beq.n	8006fcc <spi_stm32_transceive+0x360>
			ctx->current_tx++;
 8006ed2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006ed4:	f103 0208 	add.w	r2, r3, #8
 8006ed8:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8006eda:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8006edc:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8006ede:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8006ee0:	6423      	str	r3, [r4, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8006ee2:	68b3      	ldr	r3, [r6, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 8006ee4:	07d9      	lsls	r1, r3, #31
 8006ee6:	d5fc      	bpl.n	8006ee2 <spi_stm32_transceive+0x276>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8006ee8:	6822      	ldr	r2, [r4, #0]
 8006eea:	8892      	ldrh	r2, [r2, #4]
 8006eec:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8006ef0:	2a08      	cmp	r2, #8
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8006ef2:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
  return (uint8_t)(READ_REG(SPIx->DR));
 8006ef6:	68f2      	ldr	r2, [r6, #12]
 8006ef8:	f040 8088 	bne.w	800700c <spi_stm32_transceive+0x3a0>
 8006efc:	b10b      	cbz	r3, 8006f02 <spi_stm32_transceive+0x296>
 8006efe:	b101      	cbz	r1, 8006f02 <spi_stm32_transceive+0x296>
 8006f00:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8006f02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006f04:	b193      	cbz	r3, 8006f2c <spi_stm32_transceive+0x2c0>
	ctx->rx_len -= len;
 8006f06:	3b01      	subs	r3, #1
 8006f08:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->rx_len) {
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f040 80e8 	bne.w	80070e0 <spi_stm32_transceive+0x474>
		ctx->rx_count--;
 8006f10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f12:	3b01      	subs	r3, #1
 8006f14:	63a3      	str	r3, [r4, #56]	; 0x38
		if (ctx->rx_count) {
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80e7 	beq.w	80070ea <spi_stm32_transceive+0x47e>
			ctx->current_rx++;
 8006f1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f1e:	f103 0208 	add.w	r2, r3, #8
 8006f22:	6362      	str	r2, [r4, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8006f24:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 8006f26:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8006f28:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
 8006f2a:	64a3      	str	r3, [r4, #72]	; 0x48
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8006f2c:	68b2      	ldr	r2, [r6, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8006f2e:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
 8006f32:	f000 80e2 	beq.w	80070fa <spi_stm32_transceive+0x48e>
 8006f36:	490f      	ldr	r1, [pc, #60]	; (8006f74 <spi_stm32_transceive+0x308>)
 8006f38:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <spi_stm32_transceive+0x30c>)
		LOG_ERR("%s: err=%d", __func__,
 8006f3a:	4812      	ldr	r0, [pc, #72]	; (8006f84 <spi_stm32_transceive+0x318>)
 8006f3c:	1a5b      	subs	r3, r3, r1
 8006f3e:	08db      	lsrs	r3, r3, #3
 8006f40:	019b      	lsls	r3, r3, #6
 8006f42:	f043 0301 	orr.w	r3, r3, #1
 8006f46:	4910      	ldr	r1, [pc, #64]	; (8006f88 <spi_stm32_transceive+0x31c>)
 8006f48:	f001 ff6c 	bl	8008e24 <log_2>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8006f4c:	68b3      	ldr	r3, [r6, #8]
 8006f4e:	065d      	lsls	r5, r3, #25
 8006f50:	d505      	bpl.n	8006f5e <spi_stm32_transceive+0x2f2>
  tmpreg = SPIx->DR;
 8006f52:	68f3      	ldr	r3, [r6, #12]
 8006f54:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 8006f56:	9b05      	ldr	r3, [sp, #20]
  tmpreg = SPIx->SR;
 8006f58:	68b3      	ldr	r3, [r6, #8]
 8006f5a:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 8006f5c:	9b05      	ldr	r3, [sp, #20]
		return -EIO;
 8006f5e:	f06f 0704 	mvn.w	r7, #4
 8006f62:	e0d2      	b.n	800710a <spi_stm32_transceive+0x49e>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006f64:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8006f68:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006f6a:	6869      	ldr	r1, [r5, #4]
 8006f6c:	f041 0104 	orr.w	r1, r1, #4
 8006f70:	6069      	str	r1, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8006f72:	e723      	b.n	8006dbc <spi_stm32_transceive+0x150>
 8006f74:	0800a0bc 	.word	0x0800a0bc
 8006f78:	0800a0d4 	.word	0x0800a0d4
 8006f7c:	0800ad96 	.word	0x0800ad96
 8006f80:	0800adea 	.word	0x0800adea
 8006f84:	0800addf 	.word	0x0800addf
 8006f88:	0800ae2c 	.word	0x0800ae2c
 8006f8c:	0800a198 	.word	0x0800a198
 8006f90:	20000094 	.word	0x20000094
 8006f94:	4b7c      	ldr	r3, [pc, #496]	; (8007188 <spi_stm32_transceive+0x51c>)
 8006f96:	497d      	ldr	r1, [pc, #500]	; (800718c <spi_stm32_transceive+0x520>)
		LOG_INF("CS control inhibited (no GPIO device)");
 8006f98:	487d      	ldr	r0, [pc, #500]	; (8007190 <spi_stm32_transceive+0x524>)
 8006f9a:	1ac9      	subs	r1, r1, r3
 8006f9c:	08c9      	lsrs	r1, r1, #3
 8006f9e:	0189      	lsls	r1, r1, #6
 8006fa0:	f041 0103 	orr.w	r1, r1, #3
 8006fa4:	f001 ff18 	bl	8008dd8 <log_0>
	if (ret) {
 8006fa8:	e750      	b.n	8006e4c <spi_stm32_transceive+0x1e0>
		return -ENOTSUP;
 8006faa:	f06f 0785 	mvn.w	r7, #133	; 0x85
 8006fae:	e6a8      	b.n	8006d02 <spi_stm32_transceive+0x96>
		ctx->tx_count = 0;
 8006fb0:	e9c4 990b 	strd	r9, r9, [r4, #44]	; 0x2c
		ctx->tx_len = 0;
 8006fb4:	e9c4 990f 	strd	r9, r9, [r4, #60]	; 0x3c
 8006fb8:	e756      	b.n	8006e68 <spi_stm32_transceive+0x1fc>
		ctx->rx_count = 0;
 8006fba:	e9c4 770d 	strd	r7, r7, [r4, #52]	; 0x34
		ctx->rx_len = 0;
 8006fbe:	e9c4 7711 	strd	r7, r7, [r4, #68]	; 0x44
 8006fc2:	e75c      	b.n	8006e7e <spi_stm32_transceive+0x212>
	} else if (ctx->tx_buf) {
 8006fc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d08b      	beq.n	8006ee2 <spi_stm32_transceive+0x276>
		ctx->tx_buf += dfs * len;
 8006fca:	3301      	adds	r3, #1
			ctx->tx_buf = NULL;
 8006fcc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006fce:	e788      	b.n	8006ee2 <spi_stm32_transceive+0x276>
	return !!(ctx->tx_len);
 8006fd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
	return !!(ctx->tx_buf && ctx->tx_len);
 8006fd2:	b10a      	cbz	r2, 8006fd8 <spi_stm32_transceive+0x36c>
 8006fd4:	b103      	cbz	r3, 8006fd8 <spi_stm32_transceive+0x36c>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8006fd6:	8811      	ldrh	r1, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8006fd8:	81b1      	strh	r1, [r6, #12]
	if (!ctx->tx_len) {
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d081      	beq.n	8006ee2 <spi_stm32_transceive+0x276>
	ctx->tx_len -= len;
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 8006fe2:	b96b      	cbnz	r3, 8007000 <spi_stm32_transceive+0x394>
		ctx->tx_count--;
 8006fe4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0ee      	beq.n	8006fcc <spi_stm32_transceive+0x360>
			ctx->current_tx++;
 8006fee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006ff0:	f103 0208 	add.w	r2, r3, #8
 8006ff4:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8006ff6:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8006ff8:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8006ffa:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8006ffc:	085b      	lsrs	r3, r3, #1
 8006ffe:	e76f      	b.n	8006ee0 <spi_stm32_transceive+0x274>
	} else if (ctx->tx_buf) {
 8007000:	2a00      	cmp	r2, #0
 8007002:	f43f af6e 	beq.w	8006ee2 <spi_stm32_transceive+0x276>
		ctx->tx_buf += dfs * len;
 8007006:	3202      	adds	r2, #2
 8007008:	63e2      	str	r2, [r4, #60]	; 0x3c
 800700a:	e76a      	b.n	8006ee2 <spi_stm32_transceive+0x276>
	return !!(ctx->rx_buf && ctx->rx_len);
 800700c:	b10b      	cbz	r3, 8007012 <spi_stm32_transceive+0x3a6>
 800700e:	b101      	cbz	r1, 8007012 <spi_stm32_transceive+0x3a6>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8007010:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8007012:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007014:	2b00      	cmp	r3, #0
 8007016:	d089      	beq.n	8006f2c <spi_stm32_transceive+0x2c0>
	ctx->rx_len -= len;
 8007018:	3b01      	subs	r3, #1
 800701a:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->rx_len) {
 800701c:	2b00      	cmp	r3, #0
 800701e:	d166      	bne.n	80070ee <spi_stm32_transceive+0x482>
		ctx->rx_count--;
 8007020:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007022:	3b01      	subs	r3, #1
 8007024:	63a3      	str	r3, [r4, #56]	; 0x38
		if (ctx->rx_count) {
 8007026:	2b00      	cmp	r3, #0
 8007028:	d05f      	beq.n	80070ea <spi_stm32_transceive+0x47e>
			ctx->current_rx++;
 800702a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800702c:	f103 0208 	add.w	r2, r3, #8
 8007030:	6362      	str	r2, [r4, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8007032:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 8007034:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8007036:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
 8007038:	085b      	lsrs	r3, r3, #1
 800703a:	e776      	b.n	8006f2a <spi_stm32_transceive+0x2be>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800703c:	68b2      	ldr	r2, [r6, #8]
 800703e:	0792      	lsls	r2, r2, #30
 8007040:	d549      	bpl.n	80070d6 <spi_stm32_transceive+0x46a>
	return !!(ctx->tx_len);
 8007042:	6c21      	ldr	r1, [r4, #64]	; 0x40
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 8007044:	2900      	cmp	r1, #0
 8007046:	d046      	beq.n	80070d6 <spi_stm32_transceive+0x46a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8007048:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800704c:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800704e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8007050:	d12b      	bne.n	80070aa <spi_stm32_transceive+0x43e>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8007052:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 8007054:	7333      	strb	r3, [r6, #12]
	if (!ctx->tx_len) {
 8007056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007058:	b19b      	cbz	r3, 8007082 <spi_stm32_transceive+0x416>
	ctx->tx_len -= len;
 800705a:	3b01      	subs	r3, #1
 800705c:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 800705e:	b963      	cbnz	r3, 800707a <spi_stm32_transceive+0x40e>
		ctx->tx_count--;
 8007060:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007062:	3b01      	subs	r3, #1
 8007064:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 8007066:	b15b      	cbz	r3, 8007080 <spi_stm32_transceive+0x414>
			ctx->current_tx++;
 8007068:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800706a:	f103 0208 	add.w	r2, r3, #8
 800706e:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8007070:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8007072:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8007074:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8007076:	6423      	str	r3, [r4, #64]	; 0x40
 8007078:	e003      	b.n	8007082 <spi_stm32_transceive+0x416>
	} else if (ctx->tx_buf) {
 800707a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800707c:	b10b      	cbz	r3, 8007082 <spi_stm32_transceive+0x416>
		ctx->tx_buf += dfs * len;
 800707e:	3301      	adds	r3, #1
 8007080:	63e3      	str	r3, [r4, #60]	; 0x3c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8007082:	68b3      	ldr	r3, [r6, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 8007084:	07df      	lsls	r7, r3, #31
 8007086:	f57f af51 	bpl.w	8006f2c <spi_stm32_transceive+0x2c0>
	return !!(ctx->rx_buf && ctx->rx_len);
 800708a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800708c:	2b00      	cmp	r3, #0
 800708e:	f43f af4d 	beq.w	8006f2c <spi_stm32_transceive+0x2c0>
 8007092:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007094:	2a00      	cmp	r2, #0
 8007096:	f43f af49 	beq.w	8006f2c <spi_stm32_transceive+0x2c0>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800709a:	6822      	ldr	r2, [r4, #0]
 800709c:	8892      	ldrh	r2, [r2, #4]
 800709e:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80070a2:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 80070a4:	68f2      	ldr	r2, [r6, #12]
 80070a6:	d1b3      	bne.n	8007010 <spi_stm32_transceive+0x3a4>
 80070a8:	e72a      	b.n	8006f00 <spi_stm32_transceive+0x294>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 80070aa:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 80070ac:	81b3      	strh	r3, [r6, #12]
	ctx->tx_len -= len;
 80070ae:	3901      	subs	r1, #1
 80070b0:	6421      	str	r1, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 80070b2:	b969      	cbnz	r1, 80070d0 <spi_stm32_transceive+0x464>
		ctx->tx_count--;
 80070b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80070b6:	3b01      	subs	r3, #1
 80070b8:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0e0      	beq.n	8007080 <spi_stm32_transceive+0x414>
			ctx->current_tx++;
 80070be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80070c0:	f103 0208 	add.w	r2, r3, #8
 80070c4:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 80070c6:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 80070c8:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 80070ca:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 80070cc:	085b      	lsrs	r3, r3, #1
 80070ce:	e7d2      	b.n	8007076 <spi_stm32_transceive+0x40a>
		ctx->tx_buf += dfs * len;
 80070d0:	3202      	adds	r2, #2
 80070d2:	63e2      	str	r2, [r4, #60]	; 0x3c
 80070d4:	e7d5      	b.n	8007082 <spi_stm32_transceive+0x416>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80070d6:	6873      	ldr	r3, [r6, #4]
 80070d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070dc:	6073      	str	r3, [r6, #4]
    defined(CONFIG_SOC_SERIES_STM32H7X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 80070de:	e7d0      	b.n	8007082 <spi_stm32_transceive+0x416>
	} else if (ctx->rx_buf) {
 80070e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f43f af22 	beq.w	8006f2c <spi_stm32_transceive+0x2c0>
		ctx->rx_buf += dfs * len;
 80070e8:	3301      	adds	r3, #1
 80070ea:	6463      	str	r3, [r4, #68]	; 0x44
 80070ec:	e71e      	b.n	8006f2c <spi_stm32_transceive+0x2c0>
	} else if (ctx->rx_buf) {
 80070ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f43f af1b 	beq.w	8006f2c <spi_stm32_transceive+0x2c0>
		ctx->rx_buf += dfs * len;
 80070f6:	3302      	adds	r3, #2
 80070f8:	e7f7      	b.n	80070ea <spi_stm32_transceive+0x47e>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 80070fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f47f aec8 	bne.w	8006e92 <spi_stm32_transceive+0x226>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 8007102:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8007104:	2f00      	cmp	r7, #0
 8007106:	f47f aec4 	bne.w	8006e92 <spi_stm32_transceive+0x226>
	_spi_context_cs_control(ctx, on, false);
 800710a:	2200      	movs	r2, #0
 800710c:	4611      	mov	r1, r2
 800710e:	4620      	mov	r0, r4
 8007110:	f002 fb1d 	bl	800974e <_spi_context_cs_control>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8007114:	6833      	ldr	r3, [r6, #0]
 8007116:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800711a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800711e:	d102      	bne.n	8007126 <spi_stm32_transceive+0x4ba>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8007120:	68b3      	ldr	r3, [r6, #8]
 8007122:	0618      	lsls	r0, r3, #24
 8007124:	d4fc      	bmi.n	8007120 <spi_stm32_transceive+0x4b4>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8007126:	68b3      	ldr	r3, [r6, #8]
 8007128:	0699      	lsls	r1, r3, #26
 800712a:	d506      	bpl.n	800713a <spi_stm32_transceive+0x4ce>
  tmpreg_sr = SPIx->SR;
 800712c:	68b3      	ldr	r3, [r6, #8]
 800712e:	9306      	str	r3, [sp, #24]
  (void) tmpreg_sr;
 8007130:	9b06      	ldr	r3, [sp, #24]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007132:	6833      	ldr	r3, [r6, #0]
 8007134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007138:	6033      	str	r3, [r6, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800713a:	6833      	ldr	r3, [r6, #0]
 800713c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007140:	6033      	str	r3, [r6, #0]
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	889b      	ldrh	r3, [r3, #4]
 8007146:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 800714a:	f47f adda 	bne.w	8006d02 <spi_stm32_transceive+0x96>
		ctx->owner = NULL;
 800714e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 8007150:	f104 0008 	add.w	r0, r4, #8
 8007154:	f000 fd5a 	bl	8007c0c <z_impl_k_sem_give>
}
 8007158:	e5d3      	b.n	8006d02 <spi_stm32_transceive+0x96>
 800715a:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 800715c:	a90e      	add	r1, sp, #56	; 0x38
 800715e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007162:	602a      	str	r2, [r5, #0]
 8007164:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8007168:	682a      	ldr	r2, [r5, #0]
 800716a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800716e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8007172:	4313      	orrs	r3, r2
 8007174:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8007176:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800717a:	079a      	lsls	r2, r3, #30
 800717c:	f53f adf4 	bmi.w	8006d68 <spi_stm32_transceive+0xfc>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8007180:	682a      	ldr	r2, [r5, #0]
 8007182:	f022 0202 	bic.w	r2, r2, #2
 8007186:	e5f2      	b.n	8006d6e <spi_stm32_transceive+0x102>
 8007188:	0800a0bc 	.word	0x0800a0bc
 800718c:	0800a0d4 	.word	0x0800a0d4
 8007190:	0800adb9 	.word	0x0800adb9

08007194 <uart_stm32_set_baudrate>:

#define TIMEOUT 1000

static inline void uart_stm32_set_baudrate(const struct device *dev,
					   uint32_t baud_rate)
{
 8007194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);

	uint32_t clock_rate;

	/* Get clock rate */
	if (clock_control_get_rate(data->clock,
 8007196:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007198:	6847      	ldr	r7, [r0, #4]
	if (clock_control_get_rate(data->clock,
 800719a:	685e      	ldr	r6, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800719c:	f857 4b08 	ldr.w	r4, [r7], #8
{
 80071a0:	460d      	mov	r5, r1
 80071a2:	4630      	mov	r0, r6
 80071a4:	f002 fb93 	bl	80098ce <z_device_ready>
 80071a8:	b958      	cbnz	r0, 80071c2 <uart_stm32_set_baudrate+0x2e>
 80071aa:	4918      	ldr	r1, [pc, #96]	; (800720c <uart_stm32_set_baudrate+0x78>)
 80071ac:	4b18      	ldr	r3, [pc, #96]	; (8007210 <uart_stm32_set_baudrate+0x7c>)
			       (clock_control_subsys_t *)&config->pclken,
			       &clock_rate) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
 80071ae:	4819      	ldr	r0, [pc, #100]	; (8007214 <uart_stm32_set_baudrate+0x80>)
 80071b0:	1ac9      	subs	r1, r1, r3
 80071b2:	08c9      	lsrs	r1, r1, #3
 80071b4:	0189      	lsls	r1, r1, #6
 80071b6:	f041 0101 	orr.w	r1, r1, #1
 80071ba:	f001 fe0d 	bl	8008dd8 <log_0>
				     baud_rate);

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 80071be:	b003      	add	sp, #12
 80071c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (api->get_rate == NULL) {
 80071c2:	68b3      	ldr	r3, [r6, #8]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0ef      	beq.n	80071aa <uart_stm32_set_baudrate+0x16>
	return api->get_rate(dev, sys, rate);
 80071ca:	aa01      	add	r2, sp, #4
 80071cc:	4639      	mov	r1, r7
 80071ce:	4630      	mov	r0, r6
 80071d0:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 80071d2:	2800      	cmp	r0, #0
 80071d4:	dbe9      	blt.n	80071aa <uart_stm32_set_baudrate+0x16>
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80071d6:	68e3      	ldr	r3, [r4, #12]
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80071d8:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80071da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80071de:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80071e0:	60e3      	str	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80071e2:	00aa      	lsls	r2, r5, #2
 80071e4:	0fab      	lsrs	r3, r5, #30
 80071e6:	fba0 0101 	umull	r0, r1, r0, r1
 80071ea:	f7f9 fc0b 	bl	8000a04 <__aeabi_uldivmod>
 80071ee:	2264      	movs	r2, #100	; 0x64
 80071f0:	fbb0 f1f2 	udiv	r1, r0, r2
 80071f4:	fb02 0311 	mls	r3, r2, r1, r0
 80071f8:	011b      	lsls	r3, r3, #4
 80071fa:	3332      	adds	r3, #50	; 0x32
 80071fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007200:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007204:	b29b      	uxth	r3, r3
 8007206:	60a3      	str	r3, [r4, #8]
 8007208:	e7d9      	b.n	80071be <uart_stm32_set_baudrate+0x2a>
 800720a:	bf00      	nop
 800720c:	0800a0dc 	.word	0x0800a0dc
 8007210:	0800a0bc 	.word	0x0800a0bc
 8007214:	0800ad96 	.word	0x0800ad96

08007218 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8007218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 800721c:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 800721e:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8007220:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80072f0 <uart_stm32_init+0xd8>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007224:	46b1      	mov	r9, r6
{
 8007226:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007228:	f859 4b08 	ldr.w	r4, [r9], #8
	data->clock = clk;
 800722c:	f8c7 8004 	str.w	r8, [r7, #4]
 8007230:	4640      	mov	r0, r8
 8007232:	f002 fb4c 	bl	80098ce <z_device_ready>
 8007236:	b918      	cbnz	r0, 8007240 <uart_stm32_init+0x28>

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
 8007238:	f06f 0004 	mvn.w	r0, #4
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 800723c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return api->on(dev, sys);
 8007240:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007244:	4640      	mov	r0, r8
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4649      	mov	r1, r9
 800724a:	4798      	blx	r3
	if (clock_control_on(data->clock,
 800724c:	4680      	mov	r8, r0
 800724e:	2800      	cmp	r0, #0
 8007250:	d1f2      	bne.n	8007238 <uart_stm32_init+0x20>
					 (uint32_t)UART_STRUCT(dev));
 8007252:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8007254:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	f7fe fd77 	bl	8005d4c <stm32_dt_pinctrl_configure>
	if (err < 0) {
 800725e:	2800      	cmp	r0, #0
 8007260:	dbec      	blt.n	800723c <uart_stm32_init+0x24>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8007262:	68e3      	ldr	r3, [r4, #12]
	if (config->parity == 2) {
 8007264:	6971      	ldr	r1, [r6, #20]
 8007266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800726a:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800726c:	68e3      	ldr	r3, [r4, #12]
 800726e:	2902      	cmp	r1, #2
 8007270:	f043 030c 	orr.w	r3, r3, #12
 8007274:	60e3      	str	r3, [r4, #12]
 8007276:	d00f      	beq.n	8007298 <uart_stm32_init+0x80>
	} else if (config->parity == 1) {
 8007278:	2901      	cmp	r1, #1
 800727a:	d02d      	beq.n	80072d8 <uart_stm32_init+0xc0>
		if (config->parity != 0) {
 800727c:	b151      	cbz	r1, 8007294 <uart_stm32_init+0x7c>
 800727e:	4b19      	ldr	r3, [pc, #100]	; (80072e4 <uart_stm32_init+0xcc>)
 8007280:	4a19      	ldr	r2, [pc, #100]	; (80072e8 <uart_stm32_init+0xd0>)
			LOG_WRN("Invalid parity setting '%d'."
 8007282:	481a      	ldr	r0, [pc, #104]	; (80072ec <uart_stm32_init+0xd4>)
 8007284:	1ad2      	subs	r2, r2, r3
 8007286:	08d2      	lsrs	r2, r2, #3
 8007288:	0192      	lsls	r2, r2, #6
 800728a:	f042 0202 	orr.w	r2, r2, #2
 800728e:	f001 fdb2 	bl	8008df6 <log_1>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8007292:	4641      	mov	r1, r8
		ll_parity = LL_USART_PARITY_NONE;
 8007294:	4608      	mov	r0, r1
 8007296:	e003      	b.n	80072a0 <uart_stm32_init+0x88>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8007298:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800729c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80072a0:	68e3      	ldr	r3, [r4, #12]
 80072a2:	4301      	orrs	r1, r0
 80072a4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80072a8:	4319      	orrs	r1, r3
 80072aa:	60e1      	str	r1, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80072ac:	6923      	ldr	r3, [r4, #16]
 80072ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80072b2:	6123      	str	r3, [r4, #16]
	if (config->hw_flow_control) {
 80072b4:	7c33      	ldrb	r3, [r6, #16]
 80072b6:	b12b      	cbz	r3, 80072c4 <uart_stm32_init+0xac>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80072b8:	686b      	ldr	r3, [r5, #4]
 80072ba:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80072bc:	6953      	ldr	r3, [r2, #20]
 80072be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80072c2:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80072c4:	4628      	mov	r0, r5
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	f7ff ff64 	bl	8007194 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80072cc:	68e3      	ldr	r3, [r4, #12]
 80072ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80072d2:	60e3      	str	r3, [r4, #12]
	return 0;
 80072d4:	2000      	movs	r0, #0
 80072d6:	e7b1      	b.n	800723c <uart_stm32_init+0x24>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80072d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 80072dc:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80072e0:	e7de      	b.n	80072a0 <uart_stm32_init+0x88>
 80072e2:	bf00      	nop
 80072e4:	0800a0bc 	.word	0x0800a0bc
 80072e8:	0800a0dc 	.word	0x0800a0dc
 80072ec:	0800ae3e 	.word	0x0800ae3e
 80072f0:	20000094 	.word	0x20000094

080072f4 <uart_stm32_configure>:
{
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80072f8:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80072fa:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80072fc:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80072fe:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 8007300:	2a01      	cmp	r2, #1
{
 8007302:	460d      	mov	r5, r1
	switch (parity) {
 8007304:	f000 8089 	beq.w	800741a <uart_stm32_configure+0x126>
		return LL_USART_PARITY_NONE;
 8007308:	2a02      	cmp	r2, #2
 800730a:	bf0c      	ite	eq
 800730c:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8007310:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8007312:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8007316:	f895 e006 	ldrb.w	lr, [r5, #6]
 800731a:	f1b9 0f02 	cmp.w	r9, #2
 800731e:	bf96      	itet	ls
 8007320:	4b42      	ldrls	r3, [pc, #264]	; (800742c <uart_stm32_configure+0x138>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8007322:	f44f 5800 	movhi.w	r8, #8192	; 0x2000
 8007326:	f833 8019 	ldrhls.w	r8, [r3, r9, lsl #1]
	switch (db) {
 800732a:	f1be 0f04 	cmp.w	lr, #4
 800732e:	d077      	beq.n	8007420 <uart_stm32_configure+0x12c>
		return LL_USART_DATAWIDTH_9B;
 8007330:	2a00      	cmp	r2, #0
 8007332:	bf0c      	ite	eq
 8007334:	2300      	moveq	r3, #0
 8007336:	f44f 5380 	movne.w	r3, #4096	; 0x1000
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800733a:	79ef      	ldrb	r7, [r5, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800733c:	f1a2 0a03 	sub.w	sl, r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8007340:	2f01      	cmp	r7, #1
 8007342:	bf14      	ite	ne
 8007344:	f04f 0c00 	movne.w	ip, #0
 8007348:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800734c:	f1ba 0f01 	cmp.w	sl, #1
 8007350:	d969      	bls.n	8007426 <uart_stm32_configure+0x132>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8007352:	b112      	cbz	r2, 800735a <uart_stm32_configure+0x66>
 8007354:	f1be 0f04 	cmp.w	lr, #4
 8007358:	d065      	beq.n	8007426 <uart_stm32_configure+0x132>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800735a:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 800735e:	d062      	beq.n	8007426 <uart_stm32_configure+0x132>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8007360:	f1be 0f02 	cmp.w	lr, #2
 8007364:	d95f      	bls.n	8007426 <uart_stm32_configure+0x132>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8007366:	f1be 0f04 	cmp.w	lr, #4
 800736a:	d05c      	beq.n	8007426 <uart_stm32_configure+0x132>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 800736c:	b1c7      	cbz	r7, 80073a0 <uart_stm32_configure+0xac>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800736e:	4a30      	ldr	r2, [pc, #192]	; (8007430 <uart_stm32_configure+0x13c>)
 8007370:	4294      	cmp	r4, r2
 8007372:	d013      	beq.n	800739c <uart_stm32_configure+0xa8>
 8007374:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8007378:	4294      	cmp	r4, r2
 800737a:	d00f      	beq.n	800739c <uart_stm32_configure+0xa8>
 800737c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007380:	4294      	cmp	r4, r2
 8007382:	d00b      	beq.n	800739c <uart_stm32_configure+0xa8>
 8007384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007388:	4294      	cmp	r4, r2
 800738a:	d007      	beq.n	800739c <uart_stm32_configure+0xa8>
 800738c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007390:	4294      	cmp	r4, r2
 8007392:	d003      	beq.n	800739c <uart_stm32_configure+0xa8>
 8007394:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8007398:	4294      	cmp	r4, r2
 800739a:	d144      	bne.n	8007426 <uart_stm32_configure+0x132>
 800739c:	2f01      	cmp	r7, #1
 800739e:	d142      	bne.n	8007426 <uart_stm32_configure+0x132>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80073a0:	68e2      	ldr	r2, [r4, #12]
 80073a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073a6:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80073a8:	68e2      	ldr	r2, [r4, #12]
 80073aa:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 80073ae:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80073b0:	bf1f      	itttt	ne
 80073b2:	68e7      	ldrne	r7, [r4, #12]
 80073b4:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 80073b8:	430f      	orrne	r7, r1
 80073ba:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80073bc:	6922      	ldr	r2, [r4, #16]
 80073be:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80073c2:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80073c4:	bf1f      	itttt	ne
 80073c6:	6921      	ldrne	r1, [r4, #16]
 80073c8:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 80073cc:	ea41 0108 	orrne.w	r1, r1, r8
 80073d0:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80073d2:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 80073d4:	6829      	ldr	r1, [r5, #0]
 80073d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 80073da:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80073dc:	bf1f      	itttt	ne
 80073de:	68e2      	ldrne	r2, [r4, #12]
 80073e0:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 80073e4:	431a      	orrne	r2, r3
 80073e6:	60e2      	strne	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80073e8:	6963      	ldr	r3, [r4, #20]
 80073ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80073ee:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80073f0:	bf1f      	itttt	ne
 80073f2:	6963      	ldrne	r3, [r4, #20]
 80073f4:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80073f8:	ea43 030c 	orrne.w	r3, r3, ip
 80073fc:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 80073fe:	6833      	ldr	r3, [r6, #0]
 8007400:	4299      	cmp	r1, r3
 8007402:	d003      	beq.n	800740c <uart_stm32_configure+0x118>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8007404:	f7ff fec6 	bl	8007194 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800740c:	68e3      	ldr	r3, [r4, #12]
 800740e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007412:	60e3      	str	r3, [r4, #12]
	return 0;
 8007414:	2000      	movs	r0, #0
};
 8007416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (parity) {
 800741a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800741e:	e778      	b.n	8007312 <uart_stm32_configure+0x1e>
		return LL_USART_DATAWIDTH_9B;
 8007420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007424:	e789      	b.n	800733a <uart_stm32_configure+0x46>
		return -ENOTSUP;
 8007426:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800742a:	e7f4      	b.n	8007416 <uart_stm32_configure+0x122>
 800742c:	0800a768 	.word	0x0800a768
 8007430:	40011000 	.word	0x40011000

08007434 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8007434:	b530      	push	{r4, r5, lr}
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8007436:	4c0a      	ldr	r4, [pc, #40]	; (8007460 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8007438:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 800743c:	6865      	ldr	r5, [r4, #4]
 800743e:	4909      	ldr	r1, [pc, #36]	; (8007464 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8007440:	4029      	ands	r1, r5
 8007442:	430a      	orrs	r2, r1
 8007444:	4310      	orrs	r0, r2
 8007446:	6060      	str	r0, [r4, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8007448:	6862      	ldr	r2, [r4, #4]
 800744a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800744e:	431a      	orrs	r2, r3
 8007450:	6062      	str	r2, [r4, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8007452:	6862      	ldr	r2, [r4, #4]
 8007454:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8007458:	4313      	orrs	r3, r2
 800745a:	6063      	str	r3, [r4, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800745c:	bd30      	pop	{r4, r5, pc}
 800745e:	bf00      	nop
 8007460:	40023800 	.word	0x40023800
 8007464:	ffbf8000 	.word	0xffbf8000

08007468 <UTILS_PLL_IsBusy>:
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8007468:	4b08      	ldr	r3, [pc, #32]	; (800748c <UTILS_PLL_IsBusy+0x24>)
 800746a:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 800746c:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 800746e:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8007470:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 8007474:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8007478:	430a      	orrs	r2, r1
 800747a:	bf14      	ite	ne
 800747c:	2001      	movne	r0, #1
 800747e:	2000      	moveq	r0, #0
    status = ERROR;
  }
#endif /*RCC_PLLSAI_SUPPORT*/
#if defined(RCC_PLLI2S_SUPPORT)
  /* Check if PLLI2S is busy*/
  if(LL_RCC_PLLI2S_IsReady() != 0U)
 8007480:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8007484:	bf18      	it	ne
 8007486:	2001      	movne	r0, #1
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40023800 	.word	0x40023800

08007490 <LL_SetFlashLatency>:
  if(HCLK_Frequency == 0U)
 8007490:	2800      	cmp	r0, #0
 8007492:	d04c      	beq.n	800752e <LL_SetFlashLatency+0x9e>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8007494:	4b42      	ldr	r3, [pc, #264]	; (80075a0 <LL_SetFlashLatency+0x110>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800749c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074a0:	d110      	bne.n	80074c4 <LL_SetFlashLatency+0x34>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80074a2:	f103 630f 	add.w	r3, r3, #149946368	; 0x8f00000
 80074a6:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 80074aa:	4298      	cmp	r0, r3
 80074ac:	4a3d      	ldr	r2, [pc, #244]	; (80075a4 <LL_SetFlashLatency+0x114>)
 80074ae:	d844      	bhi.n	800753a <LL_SetFlashLatency+0xaa>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80074b0:	4b3d      	ldr	r3, [pc, #244]	; (80075a8 <LL_SetFlashLatency+0x118>)
 80074b2:	4298      	cmp	r0, r3
 80074b4:	d871      	bhi.n	800759a <LL_SetFlashLatency+0x10a>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80074b6:	4290      	cmp	r0, r2
 80074b8:	d83d      	bhi.n	8007536 <LL_SetFlashLatency+0xa6>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80074ba:	4b3c      	ldr	r3, [pc, #240]	; (80075ac <LL_SetFlashLatency+0x11c>)
 80074bc:	4298      	cmp	r0, r3
 80074be:	d803      	bhi.n	80074c8 <LL_SetFlashLatency+0x38>
 80074c0:	2300      	movs	r3, #0
 80074c2:	e040      	b.n	8007546 <LL_SetFlashLatency+0xb6>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80074c4:	2300      	movs	r3, #0
 80074c6:	e044      	b.n	8007552 <LL_SetFlashLatency+0xc2>
        latency = LL_FLASH_LATENCY_2;
 80074c8:	2302      	movs	r3, #2
 80074ca:	e042      	b.n	8007552 <LL_SetFlashLatency+0xc2>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80074cc:	4a38      	ldr	r2, [pc, #224]	; (80075b0 <LL_SetFlashLatency+0x120>)
 80074ce:	4290      	cmp	r0, r2
 80074d0:	d909      	bls.n	80074e6 <LL_SetFlashLatency+0x56>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80074d2:	4a34      	ldr	r2, [pc, #208]	; (80075a4 <LL_SetFlashLatency+0x114>)
        latency = LL_FLASH_LATENCY_4;
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	bf08      	it	eq
 80074d8:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80074da:	4290      	cmp	r0, r2
 80074dc:	d849      	bhi.n	8007572 <LL_SetFlashLatency+0xe2>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80074de:	4a33      	ldr	r2, [pc, #204]	; (80075ac <LL_SetFlashLatency+0x11c>)
 80074e0:	4290      	cmp	r0, r2
 80074e2:	d946      	bls.n	8007572 <LL_SetFlashLatency+0xe2>
 80074e4:	e003      	b.n	80074ee <LL_SetFlashLatency+0x5e>
 80074e6:	4a31      	ldr	r2, [pc, #196]	; (80075ac <LL_SetFlashLatency+0x11c>)
 80074e8:	4290      	cmp	r0, r2
 80074ea:	d942      	bls.n	8007572 <LL_SetFlashLatency+0xe2>
 80074ec:	b11b      	cbz	r3, 80074f6 <LL_SetFlashLatency+0x66>
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	bf38      	it	cc
 80074f2:	2301      	movcc	r3, #1
 80074f4:	e040      	b.n	8007578 <LL_SetFlashLatency+0xe8>
        latency = LL_FLASH_LATENCY_2;
 80074f6:	2302      	movs	r3, #2
 80074f8:	e03e      	b.n	8007578 <LL_SetFlashLatency+0xe8>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80074fa:	4a2c      	ldr	r2, [pc, #176]	; (80075ac <LL_SetFlashLatency+0x11c>)
 80074fc:	4290      	cmp	r0, r2
 80074fe:	d903      	bls.n	8007508 <LL_SetFlashLatency+0x78>
 8007500:	2b00      	cmp	r3, #0
 8007502:	d146      	bne.n	8007592 <LL_SetFlashLatency+0x102>
        latency = LL_FLASH_LATENCY_2;
 8007504:	2302      	movs	r3, #2
 8007506:	e002      	b.n	800750e <LL_SetFlashLatency+0x7e>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007508:	4a2a      	ldr	r2, [pc, #168]	; (80075b4 <LL_SetFlashLatency+0x124>)
 800750a:	4290      	cmp	r0, r2
 800750c:	d841      	bhi.n	8007592 <LL_SetFlashLatency+0x102>
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800750e:	492a      	ldr	r1, [pc, #168]	; (80075b8 <LL_SetFlashLatency+0x128>)
 8007510:	680a      	ldr	r2, [r1, #0]
 8007512:	f022 020f 	bic.w	r2, r2, #15
 8007516:	431a      	orrs	r2, r3
 8007518:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800751a:	680a      	ldr	r2, [r1, #0]
 800751c:	f002 020f 	and.w	r2, r2, #15
    } while ((getlatency != latency) && (timeout > 0));
 8007520:	4293      	cmp	r3, r2
 8007522:	d006      	beq.n	8007532 <LL_SetFlashLatency+0xa2>
 8007524:	680a      	ldr	r2, [r1, #0]
 8007526:	f002 020f 	and.w	r2, r2, #15
 800752a:	4293      	cmp	r3, r2
 800752c:	d001      	beq.n	8007532 <LL_SetFlashLatency+0xa2>
    status = ERROR;
 800752e:	2001      	movs	r0, #1
 8007530:	4770      	bx	lr
      status = SUCCESS;
 8007532:	2000      	movs	r0, #0
}
 8007534:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8007536:	2303      	movs	r3, #3
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007538:	e005      	b.n	8007546 <LL_SetFlashLatency+0xb6>
        latency = LL_FLASH_LATENCY_5;
 800753a:	2305      	movs	r3, #5
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800753c:	4290      	cmp	r0, r2
 800753e:	d802      	bhi.n	8007546 <LL_SetFlashLatency+0xb6>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007540:	4a1a      	ldr	r2, [pc, #104]	; (80075ac <LL_SetFlashLatency+0x11c>)
 8007542:	4290      	cmp	r0, r2
 8007544:	d802      	bhi.n	800754c <LL_SetFlashLatency+0xbc>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007546:	4a1b      	ldr	r2, [pc, #108]	; (80075b4 <LL_SetFlashLatency+0x124>)
 8007548:	4290      	cmp	r0, r2
 800754a:	d902      	bls.n	8007552 <LL_SetFlashLatency+0xc2>
 800754c:	2b01      	cmp	r3, #1
 800754e:	bf38      	it	cc
 8007550:	2301      	movcc	r3, #1
 8007552:	4a13      	ldr	r2, [pc, #76]	; (80075a0 <LL_SetFlashLatency+0x110>)
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 800755a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800755e:	d10b      	bne.n	8007578 <LL_SetFlashLatency+0xe8>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007560:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
 8007564:	f502 42a3 	add.w	r2, r2, #20864	; 0x5180
 8007568:	4290      	cmp	r0, r2
 800756a:	d9af      	bls.n	80074cc <LL_SetFlashLatency+0x3c>
        latency = LL_FLASH_LATENCY_5;
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf08      	it	eq
 8007570:	2305      	moveq	r3, #5
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007572:	4a10      	ldr	r2, [pc, #64]	; (80075b4 <LL_SetFlashLatency+0x124>)
 8007574:	4290      	cmp	r0, r2
 8007576:	d8ba      	bhi.n	80074ee <LL_SetFlashLatency+0x5e>
 8007578:	4a09      	ldr	r2, [pc, #36]	; (80075a0 <LL_SetFlashLatency+0x110>)
 800757a:	6812      	ldr	r2, [r2, #0]
 800757c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8007580:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007584:	d1c3      	bne.n	800750e <LL_SetFlashLatency+0x7e>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8007586:	4a07      	ldr	r2, [pc, #28]	; (80075a4 <LL_SetFlashLatency+0x114>)
 8007588:	4290      	cmp	r0, r2
 800758a:	d9b6      	bls.n	80074fa <LL_SetFlashLatency+0x6a>
        latency = LL_FLASH_LATENCY_3;
 800758c:	2b00      	cmp	r3, #0
 800758e:	bf08      	it	eq
 8007590:	2303      	moveq	r3, #3
 8007592:	2b01      	cmp	r3, #1
 8007594:	bf38      	it	cc
 8007596:	2301      	movcc	r3, #1
 8007598:	e7b9      	b.n	800750e <LL_SetFlashLatency+0x7e>
        latency = LL_FLASH_LATENCY_4;
 800759a:	2304      	movs	r3, #4
 800759c:	e7ce      	b.n	800753c <LL_SetFlashLatency+0xac>
 800759e:	bf00      	nop
 80075a0:	40007000 	.word	0x40007000
 80075a4:	055d4a80 	.word	0x055d4a80
 80075a8:	07270e00 	.word	0x07270e00
 80075ac:	03938700 	.word	0x03938700
 80075b0:	00b71b00 	.word	0x00b71b00
 80075b4:	01c9c380 	.word	0x01c9c380
 80075b8:	40023c00 	.word	0x40023c00

080075bc <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80075bc:	680b      	ldr	r3, [r1, #0]
 80075be:	4a21      	ldr	r2, [pc, #132]	; (8007644 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 80075c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 80075c4:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80075c6:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 80075c8:	4e1f      	ldr	r6, [pc, #124]	; (8007648 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80075ca:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 80075ce:	6833      	ldr	r3, [r6, #0]
 80075d0:	42a3      	cmp	r3, r4
{
 80075d2:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 80075d4:	d327      	bcc.n	8007626 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80075d6:	4b1d      	ldr	r3, [pc, #116]	; (800764c <UTILS_EnablePLLAndSwitchSystem+0x90>)
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80075de:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80075e0:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 80075e2:	0192      	lsls	r2, r2, #6
 80075e4:	d5fc      	bpl.n	80075e0 <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	6829      	ldr	r1, [r5, #0]
 80075ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80075ee:	430a      	orrs	r2, r1
 80075f0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	f022 0203 	bic.w	r2, r2, #3
 80075f8:	f042 0202 	orr.w	r2, r2, #2
 80075fc:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80075fe:	4b13      	ldr	r3, [pc, #76]	; (800764c <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8007600:	689a      	ldr	r2, [r3, #8]
 8007602:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007606:	2a08      	cmp	r2, #8
 8007608:	d1fa      	bne.n	8007600 <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	6869      	ldr	r1, [r5, #4]
 800760e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8007612:	430a      	orrs	r2, r1
 8007614:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	68a9      	ldr	r1, [r5, #8]
 800761a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800761e:	430a      	orrs	r2, r1
 8007620:	609a      	str	r2, [r3, #8]
}
 8007622:	2000      	movs	r0, #0
 8007624:	e004      	b.n	8007630 <UTILS_EnablePLLAndSwitchSystem+0x74>
    status = LL_SetFlashLatency(hclk_frequency);
 8007626:	4620      	mov	r0, r4
 8007628:	f7ff ff32 	bl	8007490 <LL_SetFlashLatency>
  if(status == SUCCESS)
 800762c:	2800      	cmp	r0, #0
 800762e:	d0d2      	beq.n	80075d6 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8007630:	6833      	ldr	r3, [r6, #0]
 8007632:	42a3      	cmp	r3, r4
 8007634:	d902      	bls.n	800763c <UTILS_EnablePLLAndSwitchSystem+0x80>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 8007636:	4620      	mov	r0, r4
 8007638:	f7ff ff2a 	bl	8007490 <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 800763c:	b900      	cbnz	r0, 8007640 <UTILS_EnablePLLAndSwitchSystem+0x84>
  SystemCoreClock = HCLKFrequency;
 800763e:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8007640:	bd70      	pop	{r4, r5, r6, pc}
 8007642:	bf00      	nop
 8007644:	0800ae82 	.word	0x0800ae82
 8007648:	20000084 	.word	0x20000084
 800764c:	40023800 	.word	0x40023800

08007650 <LL_PLL_ConfigSystemClock_HSE>:
{
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	4605      	mov	r5, r0
 8007654:	460f      	mov	r7, r1
 8007656:	4614      	mov	r4, r2
 8007658:	461e      	mov	r6, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 800765a:	f7ff ff05 	bl	8007468 <UTILS_PLL_IsBusy>
 800765e:	bb60      	cbnz	r0, 80076ba <LL_PLL_ConfigSystemClock_HSE+0x6a>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8007660:	6821      	ldr	r1, [r4, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8007662:	6862      	ldr	r2, [r4, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007664:	68a3      	ldr	r3, [r4, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8007666:	4c16      	ldr	r4, [pc, #88]	; (80076c0 <LL_PLL_ConfigSystemClock_HSE+0x70>)
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8007668:	f001 003f 	and.w	r0, r1, #63	; 0x3f
 800766c:	fbb5 f0f0 	udiv	r0, r5, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8007670:	f3c2 0508 	ubfx	r5, r2, #0, #9
 8007674:	4345      	muls	r5, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007676:	0c18      	lsrs	r0, r3, #16
 8007678:	3001      	adds	r0, #1
 800767a:	0040      	lsls	r0, r0, #1
 800767c:	fbb5 f5f0 	udiv	r5, r5, r0
 8007680:	6820      	ldr	r0, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 8007682:	0380      	lsls	r0, r0, #14
 8007684:	d40f      	bmi.n	80076a6 <LL_PLL_ConfigSystemClock_HSE+0x56>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8007686:	6820      	ldr	r0, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8007688:	2f01      	cmp	r7, #1
 800768a:	bf0c      	ite	eq
 800768c:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8007690:	f420 2080 	bicne.w	r0, r0, #262144	; 0x40000
 8007694:	6020      	str	r0, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007696:	6820      	ldr	r0, [r4, #0]
 8007698:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800769c:	6020      	str	r0, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800769e:	4c08      	ldr	r4, [pc, #32]	; (80076c0 <LL_PLL_ConfigSystemClock_HSE+0x70>)
 80076a0:	6820      	ldr	r0, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 80076a2:	0380      	lsls	r0, r0, #14
 80076a4:	d5fc      	bpl.n	80076a0 <LL_PLL_ConfigSystemClock_HSE+0x50>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 80076a6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80076aa:	f7ff fec3 	bl	8007434 <LL_RCC_PLL_ConfigDomain_SYS>
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 80076ae:	4631      	mov	r1, r6
 80076b0:	4628      	mov	r0, r5
}
 80076b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 80076b6:	f7ff bf81 	b.w	80075bc <UTILS_EnablePLLAndSwitchSystem>
}
 80076ba:	2001      	movs	r0, #1
 80076bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076be:	bf00      	nop
 80076c0:	40023800 	.word	0x40023800

080076c4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80076c4:	4b0e      	ldr	r3, [pc, #56]	; (8007700 <z_sys_init_run_level+0x3c>)
{
 80076c6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80076c8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 80076cc:	3001      	adds	r0, #1
 80076ce:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80076d2:	42a6      	cmp	r6, r4
 80076d4:	d800      	bhi.n	80076d8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 80076d8:	e9d4 3500 	ldrd	r3, r5, [r4]
 80076dc:	4628      	mov	r0, r5
 80076de:	4798      	blx	r3
		if (dev != NULL) {
 80076e0:	b165      	cbz	r5, 80076fc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 80076e2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 80076e4:	b130      	cbz	r0, 80076f4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 80076e6:	2800      	cmp	r0, #0
 80076e8:	bfb8      	it	lt
 80076ea:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 80076ec:	28ff      	cmp	r0, #255	; 0xff
 80076ee:	bfa8      	it	ge
 80076f0:	20ff      	movge	r0, #255	; 0xff
 80076f2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 80076f4:	785a      	ldrb	r2, [r3, #1]
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80076fc:	3408      	adds	r4, #8
 80076fe:	e7e8      	b.n	80076d2 <z_sys_init_run_level+0xe>
 8007700:	0800a5a0 	.word	0x0800a5a0

08007704 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8007704:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8007706:	4605      	mov	r5, r0
 8007708:	b910      	cbnz	r0, 8007710 <z_impl_device_get_binding+0xc>
		return NULL;
 800770a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 800770c:	4620      	mov	r0, r4
 800770e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 8007710:	7803      	ldrb	r3, [r0, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0f9      	beq.n	800770a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 8007716:	4c0e      	ldr	r4, [pc, #56]	; (8007750 <z_impl_device_get_binding+0x4c>)
 8007718:	4e0e      	ldr	r6, [pc, #56]	; (8007754 <z_impl_device_get_binding+0x50>)
 800771a:	42b4      	cmp	r4, r6
 800771c:	d108      	bne.n	8007730 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 800771e:	4c0c      	ldr	r4, [pc, #48]	; (8007750 <z_impl_device_get_binding+0x4c>)
 8007720:	42b4      	cmp	r4, r6
 8007722:	d0f2      	beq.n	800770a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8007724:	4620      	mov	r0, r4
 8007726:	f002 f8d2 	bl	80098ce <z_device_ready>
 800772a:	b950      	cbnz	r0, 8007742 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 800772c:	3418      	adds	r4, #24
 800772e:	e7f7      	b.n	8007720 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
 8007730:	4620      	mov	r0, r4
 8007732:	f002 f8cc 	bl	80098ce <z_device_ready>
 8007736:	b110      	cbz	r0, 800773e <z_impl_device_get_binding+0x3a>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	42ab      	cmp	r3, r5
 800773c:	d0e6      	beq.n	800770c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 800773e:	3418      	adds	r4, #24
 8007740:	e7eb      	b.n	800771a <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8007742:	6821      	ldr	r1, [r4, #0]
 8007744:	4628      	mov	r0, r5
 8007746:	f7f9 fba9 	bl	8000e9c <strcmp>
 800774a:	2800      	cmp	r0, #0
 800774c:	d1ee      	bne.n	800772c <z_impl_device_get_binding+0x28>
 800774e:	e7dd      	b.n	800770c <z_impl_device_get_binding+0x8>
 8007750:	20000094 	.word	0x20000094
 8007754:	200001cc 	.word	0x200001cc

08007758 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 8007758:	4b01      	ldr	r3, [pc, #4]	; (8007760 <z_impl_z_errno+0x8>)
 800775a:	6898      	ldr	r0, [r3, #8]
}
 800775c:	3060      	adds	r0, #96	; 0x60
 800775e:	4770      	bx	lr
 8007760:	20000780 	.word	0x20000780

08007764 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8007764:	b510      	push	{r4, lr}
 8007766:	4604      	mov	r4, r0
	z_impl_log_panic();
 8007768:	f7fd fe5c 	bl	8005424 <z_impl_log_panic>
 800776c:	4b06      	ldr	r3, [pc, #24]	; (8007788 <k_sys_fatal_error_handler+0x24>)
 800776e:	4907      	ldr	r1, [pc, #28]	; (800778c <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 8007770:	4807      	ldr	r0, [pc, #28]	; (8007790 <k_sys_fatal_error_handler+0x2c>)
 8007772:	1ac9      	subs	r1, r1, r3
 8007774:	08c9      	lsrs	r1, r1, #3
 8007776:	0189      	lsls	r1, r1, #6
 8007778:	f041 0101 	orr.w	r1, r1, #1
 800777c:	f001 fb2c 	bl	8008dd8 <log_0>
	arch_system_halt(reason);
 8007780:	4620      	mov	r0, r4
 8007782:	f002 f8ae 	bl	80098e2 <arch_system_halt>
 8007786:	bf00      	nop
 8007788:	0800a0bc 	.word	0x0800a0bc
 800778c:	0800a0cc 	.word	0x0800a0cc
 8007790:	0800ae92 	.word	0x0800ae92

08007794 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8007794:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007798:	4606      	mov	r6, r0
 800779a:	460f      	mov	r7, r1
	__asm__ volatile(
 800779c:	f04f 0310 	mov.w	r3, #16
 80077a0:	f3ef 8811 	mrs	r8, BASEPRI
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 80077ac:	f000 fc42 	bl	8008034 <z_impl_k_current_get>
 80077b0:	4c1f      	ldr	r4, [pc, #124]	; (8007830 <z_fatal_error+0x9c>)
 80077b2:	4b20      	ldr	r3, [pc, #128]	; (8007834 <z_fatal_error+0xa0>)
 80077b4:	1ae4      	subs	r4, r4, r3
 80077b6:	2e04      	cmp	r6, #4
 80077b8:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 80077bc:	bf96      	itet	ls
 80077be:	4a1e      	ldrls	r2, [pc, #120]	; (8007838 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 80077c0:	4a1e      	ldrhi	r2, [pc, #120]	; (800783c <z_fatal_error+0xa8>)
 80077c2:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
 80077c6:	01a4      	lsls	r4, r4, #6
 80077c8:	f044 0301 	orr.w	r3, r4, #1
 80077cc:	4605      	mov	r5, r0
 80077ce:	f8ad 3000 	strh.w	r3, [sp]
 80077d2:	481b      	ldr	r0, [pc, #108]	; (8007840 <z_fatal_error+0xac>)
 80077d4:	2300      	movs	r3, #0
 80077d6:	4631      	mov	r1, r6
 80077d8:	f001 fb3d 	bl	8008e56 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 80077dc:	b147      	cbz	r7, 80077f0 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e4:	b123      	cbz	r3, 80077f0 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
 80077e6:	4817      	ldr	r0, [pc, #92]	; (8007844 <z_fatal_error+0xb0>)
 80077e8:	f044 0101 	orr.w	r1, r4, #1
 80077ec:	f001 faf4 	bl	8008dd8 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 80077f0:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 80077f4:	b12d      	cbz	r5, 8007802 <z_fatal_error+0x6e>
 80077f6:	4628      	mov	r0, r5
 80077f8:	f002 f8c4 	bl	8009984 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 80077fc:	b108      	cbz	r0, 8007802 <z_fatal_error+0x6e>
 80077fe:	7803      	ldrb	r3, [r0, #0]
 8007800:	b903      	cbnz	r3, 8007804 <z_fatal_error+0x70>
		thread_name = "unknown";
 8007802:	4811      	ldr	r0, [pc, #68]	; (8007848 <z_fatal_error+0xb4>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
 8007804:	f7fd fc94 	bl	8005130 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
 8007808:	4623      	mov	r3, r4
 800780a:	4602      	mov	r2, r0
 800780c:	4629      	mov	r1, r5
 800780e:	480f      	ldr	r0, [pc, #60]	; (800784c <z_fatal_error+0xb8>)
 8007810:	f001 fb08 	bl	8008e24 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8007814:	4639      	mov	r1, r7
 8007816:	4630      	mov	r0, r6
 8007818:	f7ff ffa4 	bl	8007764 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800781c:	f388 8811 	msr	BASEPRI, r8
 8007820:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8007824:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8007826:	b002      	add	sp, #8
 8007828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800782c:	f7ff b82c 	b.w	8006888 <z_impl_k_thread_abort>
 8007830:	0800a0cc 	.word	0x0800a0cc
 8007834:	0800a0bc 	.word	0x0800a0bc
 8007838:	0800a5b8 	.word	0x0800a5b8
 800783c:	0800aea1 	.word	0x0800aea1
 8007840:	0800aeb7 	.word	0x0800aeb7
 8007844:	0800aedf 	.word	0x0800aedf
 8007848:	0800aeaf 	.word	0x0800aeaf
 800784c:	0800af00 	.word	0x0800af00

08007850 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8007850:	4802      	ldr	r0, [pc, #8]	; (800785c <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
 8007852:	4a03      	ldr	r2, [pc, #12]	; (8007860 <z_bss_zero+0x10>)
 8007854:	2100      	movs	r1, #0
 8007856:	1a12      	subs	r2, r2, r0
 8007858:	f002 ba31 	b.w	8009cbe <memset>
 800785c:	200001f0 	.word	0x200001f0
 8007860:	200007c8 	.word	0x200007c8

08007864 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8007864:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8007866:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <bg_thread_main+0x34>)
 8007868:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800786a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 800786c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800786e:	f7ff ff29 	bl	80076c4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8007872:	f000 fe45 	bl	8008500 <boot_banner>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
 8007876:	f7fe f8c5 	bl	8005a04 <__do_global_ctors_aux>
	__do_init_array_aux();
 800787a:	f7fe f8b5 	bl	80059e8 <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800787e:	2003      	movs	r0, #3
 8007880:	f7ff ff20 	bl	80076c4 <z_sys_init_run_level>

	z_init_static_threads();
 8007884:	f000 f944 	bl	8007b10 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
 8007888:	f7fd fa4a 	bl	8004d20 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800788c:	4a03      	ldr	r2, [pc, #12]	; (800789c <bg_thread_main+0x38>)
 800788e:	7b13      	ldrb	r3, [r2, #12]
 8007890:	f023 0301 	bic.w	r3, r3, #1
 8007894:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8007896:	bd08      	pop	{r3, pc}
 8007898:	200007c4 	.word	0x200007c4
 800789c:	20000470 	.word	0x20000470

080078a0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 80078a0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80078a4:	b0b7      	sub	sp, #220	; 0xdc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 80078a6:	f7fd fb7b 	bl	8004fa0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 80078aa:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80079ac <z_cstart+0x10c>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80078ae:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 80078b2:	4d36      	ldr	r5, [pc, #216]	; (800798c <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
 80078b4:	4e36      	ldr	r6, [pc, #216]	; (8007990 <z_cstart+0xf0>)
 80078b6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80078b8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80079b0 <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
 80078bc:	4f35      	ldr	r7, [pc, #212]	; (8007994 <z_cstart+0xf4>)
 80078be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078c2:	2400      	movs	r4, #0
 80078c4:	616b      	str	r3, [r5, #20]
 80078c6:	23f0      	movs	r3, #240	; 0xf0
 80078c8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 80078cc:	77ec      	strb	r4, [r5, #31]
 80078ce:	762c      	strb	r4, [r5, #24]
 80078d0:	766c      	strb	r4, [r5, #25]
 80078d2:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 80078d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078d6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80078da:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 80078dc:	f7fe ffb2 	bl	8006844 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 80078e0:	f7fe fcac 	bl	800623c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80078e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078e8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80078ea:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 80078ec:	f7ff f898 	bl	8006a20 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 80078f0:	4d29      	ldr	r5, [pc, #164]	; (8007998 <z_cstart+0xf8>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 80078f2:	f7fe ffdb 	bl	80068ac <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 80078f6:	f240 1301 	movw	r3, #257	; 0x101
 80078fa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 80078fe:	ab06      	add	r3, sp, #24
 8007900:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
 8007902:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8007906:	f001 ffe1 	bl	80098cc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800790a:	4620      	mov	r0, r4
 800790c:	f7ff feda 	bl	80076c4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8007910:	2001      	movs	r0, #1
 8007912:	f7ff fed7 	bl	80076c4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8007916:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
 800791a:	f000 fb7f 	bl	800801c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800791e:	4b1f      	ldr	r3, [pc, #124]	; (800799c <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
 8007920:	622e      	str	r6, [r5, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8007922:	491f      	ldr	r1, [pc, #124]	; (80079a0 <z_cstart+0x100>)
 8007924:	9305      	str	r3, [sp, #20]
 8007926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800792a:	4653      	mov	r3, sl
 800792c:	e9cd 4b03 	strd	r4, fp, [sp, #12]
 8007930:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007934:	9400      	str	r4, [sp, #0]
 8007936:	4630      	mov	r0, r6
 8007938:	f000 f88c 	bl	8007a54 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800793c:	7b73      	ldrb	r3, [r6, #13]
 800793e:	4680      	mov	r8, r0
 8007940:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 8007944:	4630      	mov	r0, r6
 8007946:	7373      	strb	r3, [r6, #13]
 8007948:	f002 f8b2 	bl	8009ab0 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 800794c:	230f      	movs	r3, #15
 800794e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007952:	4914      	ldr	r1, [pc, #80]	; (80079a4 <z_cstart+0x104>)
 8007954:	4b14      	ldr	r3, [pc, #80]	; (80079a8 <z_cstart+0x108>)
 8007956:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800795a:	e9cd b404 	strd	fp, r4, [sp, #16]
 800795e:	e9cd 5400 	strd	r5, r4, [sp]
 8007962:	4638      	mov	r0, r7
 8007964:	f000 f876 	bl	8007a54 <z_setup_new_thread>
 8007968:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 800796a:	60ef      	str	r7, [r5, #12]
 800796c:	f023 0304 	bic.w	r3, r3, #4
 8007970:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8007972:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
 8007976:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
 800797a:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
 800797c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8007980:	4652      	mov	r2, sl
 8007982:	4641      	mov	r1, r8
 8007984:	4630      	mov	r0, r6
 8007986:	f7fe fc37 	bl	80061f8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800798a:	bf00      	nop
 800798c:	e000ed00 	.word	0xe000ed00
 8007990:	20000470 	.word	0x20000470
 8007994:	200003b0 	.word	0x200003b0
 8007998:	20000780 	.word	0x20000780
 800799c:	0800af62 	.word	0x0800af62
 80079a0:	20001c00 	.word	0x20001c00
 80079a4:	20002080 	.word	0x20002080
 80079a8:	08009989 	.word	0x08009989
 80079ac:	20002a80 	.word	0x20002a80
 80079b0:	08007865 	.word	0x08007865

080079b4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 80079b4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80079b6:	4b0e      	ldr	r3, [pc, #56]	; (80079f0 <init_mem_slab_module+0x3c>)
 80079b8:	4c0e      	ldr	r4, [pc, #56]	; (80079f4 <init_mem_slab_module+0x40>)
 80079ba:	42a3      	cmp	r3, r4
 80079bc:	d301      	bcc.n	80079c2 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
 80079be:	2000      	movs	r0, #0
	return rc;
}
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 80079c2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80079c6:	ea41 0200 	orr.w	r2, r1, r0
 80079ca:	f012 0203 	ands.w	r2, r2, #3
 80079ce:	d10b      	bne.n	80079e8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 80079d0:	68dd      	ldr	r5, [r3, #12]
	slab->free_list = NULL;
 80079d2:	619a      	str	r2, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 80079d4:	42aa      	cmp	r2, r5
 80079d6:	d101      	bne.n	80079dc <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80079d8:	3320      	adds	r3, #32
 80079da:	e7ee      	b.n	80079ba <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 80079dc:	699e      	ldr	r6, [r3, #24]
 80079de:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 80079e0:	3201      	adds	r2, #1
		slab->free_list = p;
 80079e2:	6199      	str	r1, [r3, #24]
		p += slab->block_size;
 80079e4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 80079e6:	e7f5      	b.n	80079d4 <init_mem_slab_module+0x20>
	return rc;
 80079e8:	f06f 0015 	mvn.w	r0, #21
 80079ec:	e7e8      	b.n	80079c0 <init_mem_slab_module+0xc>
 80079ee:	bf00      	nop
 80079f0:	200001cc 	.word	0x200001cc
 80079f4:	200001cc 	.word	0x200001cc

080079f8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 80079f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079fa:	460c      	mov	r4, r1
	__asm__ volatile(
 80079fc:	f04f 0510 	mov.w	r5, #16
 8007a00:	f3ef 8111 	mrs	r1, BASEPRI
 8007a04:	f385 8811 	msr	BASEPRI, r5
 8007a08:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 8007a0c:	6985      	ldr	r5, [r0, #24]
 8007a0e:	b15d      	cbz	r5, 8007a28 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
 8007a10:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 8007a12:	682b      	ldr	r3, [r5, #0]
 8007a14:	6183      	str	r3, [r0, #24]
		slab->num_used++;
 8007a16:	69c3      	ldr	r3, [r0, #28]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 8007a1c:	2000      	movs	r0, #0
	__asm__ volatile(
 8007a1e:	f381 8811 	msr	BASEPRI, r1
 8007a22:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
 8007a26:	e011      	b.n	8007a4c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 8007a28:	ea52 0c03 	orrs.w	ip, r2, r3
 8007a2c:	d103      	bne.n	8007a36 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
 8007a2e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
 8007a30:	f06f 000b 	mvn.w	r0, #11
 8007a34:	e7f3      	b.n	8007a1e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 8007a36:	e9cd 2300 	strd	r2, r3, [sp]
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	3008      	adds	r0, #8
 8007a3e:	f000 f9ef 	bl	8007e20 <z_pend_curr>
		if (result == 0) {
 8007a42:	b918      	cbnz	r0, 8007a4c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
 8007a44:	4b02      	ldr	r3, [pc, #8]	; (8007a50 <k_mem_slab_alloc+0x58>)
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	6023      	str	r3, [r4, #0]
}
 8007a4c:	b003      	add	sp, #12
 8007a4e:	bd30      	pop	{r4, r5, pc}
 8007a50:	20000780 	.word	0x20000780

08007a54 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8007a54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8007a58:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007a5a:	7306      	strb	r6, [r0, #12]
{
 8007a5c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8007a5e:	3207      	adds	r2, #7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8007a60:	f100 0558 	add.w	r5, r0, #88	; 0x58
 8007a64:	f022 0207 	bic.w	r2, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
 8007a68:	2604      	movs	r6, #4

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	new_thread->stack_info.size = stack_buf_size;
 8007a70:	e9c0 7219 	strd	r7, r2, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 8007a74:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
 8007a76:	7346      	strb	r6, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8007a78:	f102 0820 	add.w	r8, r2, #32

	thread_base->prio = priority;
 8007a7c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007a7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8007a80:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8007a82:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
 8007a86:	7386      	strb	r6, [r0, #14]

	thread_base->sched_locked = 0U;
 8007a88:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8007a8a:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007a8c:	9202      	str	r2, [sp, #8]
 8007a8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a90:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8007a92:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a96:	9200      	str	r2, [sp, #0]
 8007a98:	4642      	mov	r2, r8
{
 8007a9a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007a9c:	f7fe fb26 	bl	80060ec <arch_new_thread>
	if (!_current) {
 8007aa0:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 8007aa2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	b103      	cbz	r3, 8007aaa <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 8007aaa:	6723      	str	r3, [r4, #112]	; 0x70
}
 8007aac:	4640      	mov	r0, r8
 8007aae:	b004      	add	sp, #16
 8007ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab4:	20000780 	.word	0x20000780

08007ab8 <z_impl_k_thread_create>:
{
 8007ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aba:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8007abc:	2700      	movs	r7, #0
 8007abe:	9705      	str	r7, [sp, #20]
 8007ac0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8007ac2:	9704      	str	r7, [sp, #16]
 8007ac4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007ac6:	9703      	str	r7, [sp, #12]
 8007ac8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007aca:	9702      	str	r7, [sp, #8]
{
 8007acc:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8007ad0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007ad2:	9701      	str	r7, [sp, #4]
 8007ad4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007ad6:	9700      	str	r7, [sp, #0]
{
 8007ad8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8007ada:	f7ff ffbb 	bl	8007a54 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8007ade:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007ae2:	bf08      	it	eq
 8007ae4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8007ae8:	d005      	beq.n	8007af6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007aea:	ea55 0306 	orrs.w	r3, r5, r6
 8007aee:	d105      	bne.n	8007afc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 fa75 	bl	8007fe0 <z_sched_start>
}
 8007af6:	4620      	mov	r0, r4
 8007af8:	b007      	add	sp, #28
 8007afa:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8007afc:	4903      	ldr	r1, [pc, #12]	; (8007b0c <z_impl_k_thread_create+0x54>)
 8007afe:	4632      	mov	r2, r6
 8007b00:	462b      	mov	r3, r5
 8007b02:	f104 0018 	add.w	r0, r4, #24
 8007b06:	f000 fb53 	bl	80081b0 <z_add_timeout>
 8007b0a:	e7f4      	b.n	8007af6 <z_impl_k_thread_create+0x3e>
 8007b0c:	08009ad1 	.word	0x08009ad1

08007b10 <z_init_static_threads>:
{
 8007b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b12:	4c22      	ldr	r4, [pc, #136]	; (8007b9c <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8007b14:	4d22      	ldr	r5, [pc, #136]	; (8007ba0 <z_init_static_threads+0x90>)
{
 8007b16:	b087      	sub	sp, #28
 8007b18:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 8007b1a:	42ae      	cmp	r6, r5
 8007b1c:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8007b20:	d30b      	bcc.n	8007b3a <z_init_static_threads+0x2a>
	k_sched_lock();
 8007b22:	f000 f90b 	bl	8007d3c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8007b26:	4c1d      	ldr	r4, [pc, #116]	; (8007b9c <z_init_static_threads+0x8c>)
 8007b28:	4f1e      	ldr	r7, [pc, #120]	; (8007ba4 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
 8007b2a:	260a      	movs	r6, #10
 8007b2c:	42ac      	cmp	r4, r5
 8007b2e:	d320      	bcc.n	8007b72 <z_init_static_threads+0x62>
}
 8007b30:	b007      	add	sp, #28
 8007b32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8007b36:	f000 b987 	b.w	8007e48 <k_sched_unlock>
		z_setup_new_thread(
 8007b3a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007b3e:	9305      	str	r3, [sp, #20]
 8007b40:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8007b44:	9304      	str	r3, [sp, #16]
 8007b46:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8007b4a:	9303      	str	r3, [sp, #12]
 8007b4c:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8007b50:	9302      	str	r3, [sp, #8]
 8007b52:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8007b56:	9301      	str	r3, [sp, #4]
 8007b58:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8007b62:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8007b66:	f7ff ff75 	bl	8007a54 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8007b6a:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8007b6e:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8007b70:	e7d2      	b.n	8007b18 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8007b72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007b74:	1c53      	adds	r3, r2, #1
 8007b76:	d009      	beq.n	8007b8c <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 8007b78:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007b7c:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007b80:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8007b84:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007b86:	d103      	bne.n	8007b90 <z_init_static_threads+0x80>
	z_sched_start(thread);
 8007b88:	f000 fa2a 	bl	8007fe0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8007b8c:	3430      	adds	r4, #48	; 0x30
 8007b8e:	e7cd      	b.n	8007b2c <z_init_static_threads+0x1c>
 8007b90:	4639      	mov	r1, r7
 8007b92:	3018      	adds	r0, #24
 8007b94:	f000 fb0c 	bl	80081b0 <z_add_timeout>
 8007b98:	e7f8      	b.n	8007b8c <z_init_static_threads+0x7c>
 8007b9a:	bf00      	nop
 8007b9c:	200001cc 	.word	0x200001cc
 8007ba0:	200001cc 	.word	0x200001cc
 8007ba4:	08009ad1 	.word	0x08009ad1

08007ba8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
 8007ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
 8007baa:	f04f 0110 	mov.w	r1, #16
 8007bae:	f3ef 8511 	mrs	r5, BASEPRI
 8007bb2:	f381 8811 	msr	BASEPRI, r1
 8007bb6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 8007bba:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 8007bbc:	b19c      	cbz	r4, 8007be6 <z_impl_k_queue_get+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8007bbe:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8007bc0:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8007bc2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8007bc6:	4294      	cmp	r4, r2
	list->head = node;
 8007bc8:	6003      	str	r3, [r0, #0]
	list->tail = node;
 8007bca:	bf08      	it	eq
 8007bcc:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 8007bce:	2101      	movs	r1, #1
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f001 fee5 	bl	80099a0 <z_queue_node_peek>
 8007bd6:	4604      	mov	r4, r0
	__asm__ volatile(
 8007bd8:	f385 8811 	msr	BASEPRI, r5
 8007bdc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
 8007be0:	4620      	mov	r0, r4
 8007be2:	b003      	add	sp, #12
 8007be4:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8007be6:	ea52 0103 	orrs.w	r1, r2, r3
 8007bea:	d0f5      	beq.n	8007bd8 <z_impl_k_queue_get+0x30>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
 8007bec:	e9cd 2300 	strd	r2, r3, [sp]
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f100 020c 	add.w	r2, r0, #12
 8007bf6:	3008      	adds	r0, #8
 8007bf8:	f000 f912 	bl	8007e20 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d1ef      	bne.n	8007be0 <z_impl_k_queue_get+0x38>
 8007c00:	4b01      	ldr	r3, [pc, #4]	; (8007c08 <z_impl_k_queue_get+0x60>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	695c      	ldr	r4, [r3, #20]
 8007c06:	e7eb      	b.n	8007be0 <z_impl_k_queue_get+0x38>
 8007c08:	20000780 	.word	0x20000780

08007c0c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4604      	mov	r4, r0
	__asm__ volatile(
 8007c10:	f04f 0310 	mov.w	r3, #16
 8007c14:	f3ef 8511 	mrs	r5, BASEPRI
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8007c20:	f001 ff8d 	bl	8009b3e <z_unpend_first_thread>

	if (thread != NULL) {
 8007c24:	b148      	cbz	r0, 8007c3a <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8007c26:	2200      	movs	r2, #0
 8007c28:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8007c2a:	f001 ff41 	bl	8009ab0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8007c2e:	4629      	mov	r1, r5
 8007c30:	4805      	ldr	r0, [pc, #20]	; (8007c48 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8007c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8007c36:	f000 b86f 	b.w	8007d18 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8007c3a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	bf18      	it	ne
 8007c42:	3301      	addne	r3, #1
 8007c44:	60a3      	str	r3, [r4, #8]
}
 8007c46:	e7f2      	b.n	8007c2e <z_impl_k_sem_give+0x22>
 8007c48:	200007c5 	.word	0x200007c5

08007c4c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8007c4c:	b513      	push	{r0, r1, r4, lr}
 8007c4e:	f04f 0410 	mov.w	r4, #16
 8007c52:	f3ef 8111 	mrs	r1, BASEPRI
 8007c56:	f384 8811 	msr	BASEPRI, r4
 8007c5a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8007c5e:	6884      	ldr	r4, [r0, #8]
 8007c60:	b144      	cbz	r4, 8007c74 <z_impl_k_sem_take+0x28>
		sem->count--;
 8007c62:	3c01      	subs	r4, #1
 8007c64:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8007c66:	f381 8811 	msr	BASEPRI, r1
 8007c6a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8007c6e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8007c70:	b002      	add	sp, #8
 8007c72:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8007c74:	ea52 0403 	orrs.w	r4, r2, r3
 8007c78:	d106      	bne.n	8007c88 <z_impl_k_sem_take+0x3c>
 8007c7a:	f381 8811 	msr	BASEPRI, r1
 8007c7e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8007c82:	f06f 000f 	mvn.w	r0, #15
 8007c86:	e7f3      	b.n	8007c70 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8007c88:	e9cd 2300 	strd	r2, r3, [sp]
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	4802      	ldr	r0, [pc, #8]	; (8007c98 <z_impl_k_sem_take+0x4c>)
 8007c90:	f000 f8c6 	bl	8007e20 <z_pend_curr>
	return ret;
 8007c94:	e7ec      	b.n	8007c70 <z_impl_k_sem_take+0x24>
 8007c96:	bf00      	nop
 8007c98:	200007c5 	.word	0x200007c5

08007c9c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8007c9c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8007c9e:	4c08      	ldr	r4, [pc, #32]	; (8007cc0 <z_reset_time_slice+0x24>)
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	b15b      	cbz	r3, 8007cbc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8007ca4:	f7fe f954 	bl	8005f50 <sys_clock_elapsed>
 8007ca8:	6822      	ldr	r2, [r4, #0]
 8007caa:	4906      	ldr	r1, [pc, #24]	; (8007cc4 <z_reset_time_slice+0x28>)
 8007cac:	4410      	add	r0, r2
 8007cae:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
 8007cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f001 bf7f 	b.w	8009bba <z_set_timeout_expiry>
}
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	bf00      	nop
 8007cc0:	200007b8 	.word	0x200007b8
 8007cc4:	20000780 	.word	0x20000780

08007cc8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8007cc8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007cca:	f04f 0310 	mov.w	r3, #16
 8007cce:	f3ef 8411 	mrs	r4, BASEPRI
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8007cda:	4b0c      	ldr	r3, [pc, #48]	; (8007d0c <k_sched_time_slice_set+0x44>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8007ce0:	4290      	cmp	r0, r2
			return ((uint32_t)t) * (to_hz / from_hz);
 8007ce2:	f04f 030a 	mov.w	r3, #10
 8007ce6:	4a0a      	ldr	r2, [pc, #40]	; (8007d10 <k_sched_time_slice_set+0x48>)
 8007ce8:	fb00 f303 	mul.w	r3, r0, r3
 8007cec:	dc09      	bgt.n	8007d02 <k_sched_time_slice_set+0x3a>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
 8007cee:	6013      	str	r3, [r2, #0]
		}
		slice_max_prio = prio;
 8007cf0:	4b08      	ldr	r3, [pc, #32]	; (8007d14 <k_sched_time_slice_set+0x4c>)
 8007cf2:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8007cf4:	f7ff ffd2 	bl	8007c9c <z_reset_time_slice>
	__asm__ volatile(
 8007cf8:	f384 8811 	msr	BASEPRI, r4
 8007cfc:	f3bf 8f6f 	isb	sy
	}
}
 8007d00:	bd10      	pop	{r4, pc}
			slice_time = MAX(2, slice_time);
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	bfb8      	it	lt
 8007d06:	2302      	movlt	r3, #2
 8007d08:	e7f1      	b.n	8007cee <k_sched_time_slice_set+0x26>
 8007d0a:	bf00      	nop
 8007d0c:	20000780 	.word	0x20000780
 8007d10:	200007b8 	.word	0x200007b8
 8007d14:	200007b4 	.word	0x200007b4

08007d18 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8007d18:	b949      	cbnz	r1, 8007d2e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d1a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 8007d1e:	b930      	cbnz	r0, 8007d2e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8007d22:	6a1a      	ldr	r2, [r3, #32]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d001      	beq.n	8007d2e <z_reschedule+0x16>
	ret = arch_swap(key);
 8007d2a:	f7fe b945 	b.w	8005fb8 <arch_swap>
 8007d2e:	f381 8811 	msr	BASEPRI, r1
 8007d32:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 8007d36:	4770      	bx	lr
 8007d38:	20000780 	.word	0x20000780

08007d3c <k_sched_lock>:
	__asm__ volatile(
 8007d3c:	f04f 0310 	mov.w	r3, #16
 8007d40:	f3ef 8111 	mrs	r1, BASEPRI
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8007d4c:	4b04      	ldr	r3, [pc, #16]	; (8007d60 <k_sched_lock+0x24>)
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	7bd3      	ldrb	r3, [r2, #15]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8007d56:	f381 8811 	msr	BASEPRI, r1
 8007d5a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8007d5e:	4770      	bx	lr
 8007d60:	20000780 	.word	0x20000780

08007d64 <update_cache>:
{
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8007d68:	480c      	ldr	r0, [pc, #48]	; (8007d9c <update_cache+0x38>)
 8007d6a:	4d0d      	ldr	r5, [pc, #52]	; (8007da0 <update_cache+0x3c>)
 8007d6c:	f001 fe70 	bl	8009a50 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8007d70:	4604      	mov	r4, r0
 8007d72:	b900      	cbnz	r0, 8007d76 <update_cache+0x12>
 8007d74:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8007d76:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8007d78:	b94a      	cbnz	r2, 8007d8e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 8007d7a:	7b5a      	ldrb	r2, [r3, #13]
 8007d7c:	06d2      	lsls	r2, r2, #27
 8007d7e:	d106      	bne.n	8007d8e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8007d80:	69a2      	ldr	r2, [r4, #24]
 8007d82:	b922      	cbnz	r2, 8007d8e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8007d84:	89da      	ldrh	r2, [r3, #14]
 8007d86:	2a7f      	cmp	r2, #127	; 0x7f
 8007d88:	d901      	bls.n	8007d8e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 8007d8a:	622b      	str	r3, [r5, #32]
}
 8007d8c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8007d8e:	429c      	cmp	r4, r3
 8007d90:	d001      	beq.n	8007d96 <update_cache+0x32>
			z_reset_time_slice();
 8007d92:	f7ff ff83 	bl	8007c9c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8007d96:	622c      	str	r4, [r5, #32]
}
 8007d98:	e7f8      	b.n	8007d8c <update_cache+0x28>
 8007d9a:	bf00      	nop
 8007d9c:	200007a4 	.word	0x200007a4
 8007da0:	20000780 	.word	0x20000780

08007da4 <unready_thread>:
{
 8007da4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8007da6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8007daa:	7b43      	ldrb	r3, [r0, #13]
 8007dac:	2a00      	cmp	r2, #0
{
 8007dae:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8007db0:	da04      	bge.n	8007dbc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8007db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007db6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8007db8:	f001 fdfe 	bl	80099b8 <sys_dlist_remove>
	update_cache(thread == _current);
 8007dbc:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <unready_thread+0x2c>)
 8007dbe:	6898      	ldr	r0, [r3, #8]
 8007dc0:	1a43      	subs	r3, r0, r1
 8007dc2:	4258      	negs	r0, r3
 8007dc4:	4158      	adcs	r0, r3
}
 8007dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8007dca:	f7ff bfcb 	b.w	8007d64 <update_cache>
 8007dce:	bf00      	nop
 8007dd0:	20000780 	.word	0x20000780

08007dd4 <pend>:
{
 8007dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd8:	4606      	mov	r6, r0
 8007dda:	4615      	mov	r5, r2
 8007ddc:	461c      	mov	r4, r3
	__asm__ volatile(
 8007dde:	f04f 0310 	mov.w	r3, #16
 8007de2:	f3ef 8711 	mrs	r7, BASEPRI
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 8007dee:	f001 fe35 	bl	8009a5c <add_to_waitq_locked>
	__asm__ volatile(
 8007df2:	f387 8811 	msr	BASEPRI, r7
 8007df6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8007dfa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007dfe:	bf08      	it	eq
 8007e00:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 8007e04:	d008      	beq.n	8007e18 <pend+0x44>
 8007e06:	462a      	mov	r2, r5
 8007e08:	4623      	mov	r3, r4
 8007e0a:	f106 0018 	add.w	r0, r6, #24
 8007e0e:	4903      	ldr	r1, [pc, #12]	; (8007e1c <pend+0x48>)
}
 8007e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e14:	f000 b9cc 	b.w	80081b0 <z_add_timeout>
 8007e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e1c:	08009ad1 	.word	0x08009ad1

08007e20 <z_pend_curr>:
{
 8007e20:	b510      	push	{r4, lr}
	pending_current = _current;
 8007e22:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <z_pend_curr+0x20>)
 8007e24:	6898      	ldr	r0, [r3, #8]
 8007e26:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <z_pend_curr+0x24>)
{
 8007e28:	460c      	mov	r4, r1
	pending_current = _current;
 8007e2a:	6018      	str	r0, [r3, #0]
{
 8007e2c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 8007e2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e32:	f7ff ffcf 	bl	8007dd4 <pend>
 8007e36:	4620      	mov	r0, r4
}
 8007e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e3c:	f7fe b8bc 	b.w	8005fb8 <arch_swap>
 8007e40:	20000780 	.word	0x20000780
 8007e44:	200007b0 	.word	0x200007b0

08007e48 <k_sched_unlock>:
{
 8007e48:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007e4a:	f04f 0310 	mov.w	r3, #16
 8007e4e:	f3ef 8411 	mrs	r4, BASEPRI
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8007e5a:	4b08      	ldr	r3, [pc, #32]	; (8007e7c <k_sched_unlock+0x34>)
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	7bd3      	ldrb	r3, [r2, #15]
 8007e60:	3301      	adds	r3, #1
 8007e62:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8007e64:	2000      	movs	r0, #0
 8007e66:	f7ff ff7d 	bl	8007d64 <update_cache>
	__asm__ volatile(
 8007e6a:	f384 8811 	msr	BASEPRI, r4
 8007e6e:	f3bf 8f6f 	isb	sy
}
 8007e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8007e76:	f001 bde1 	b.w	8009a3c <z_reschedule_unlocked>
 8007e7a:	bf00      	nop
 8007e7c:	20000780 	.word	0x20000780

08007e80 <move_thread_to_end_of_prio_q>:
{
 8007e80:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8007e82:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8007e86:	7b43      	ldrb	r3, [r0, #13]
 8007e88:	2a00      	cmp	r2, #0
{
 8007e8a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8007e8c:	da04      	bge.n	8007e98 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8007e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e92:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8007e94:	f001 fd90 	bl	80099b8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8007e98:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8007e9a:	4a15      	ldr	r2, [pc, #84]	; (8007ef0 <move_thread_to_end_of_prio_q+0x70>)
 8007e9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ea0:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8007ea2:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007ea6:	f102 0524 	add.w	r5, r2, #36	; 0x24
 8007eaa:	42ab      	cmp	r3, r5
 8007eac:	d01b      	beq.n	8007ee6 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8007eae:	b1d3      	cbz	r3, 8007ee6 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 8007eb0:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8007eb4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 8007eb8:	4286      	cmp	r6, r0
 8007eba:	d00f      	beq.n	8007edc <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 8007ebc:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	dd0c      	ble.n	8007edc <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8007ec2:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8007ec4:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8007ec8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8007eca:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8007ecc:	6890      	ldr	r0, [r2, #8]
 8007ece:	1a43      	subs	r3, r0, r1
 8007ed0:	4258      	negs	r0, r3
}
 8007ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8007ed6:	4158      	adcs	r0, r3
 8007ed8:	f7ff bf44 	b.w	8007d64 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d002      	beq.n	8007ee6 <move_thread_to_end_of_prio_q+0x66>
 8007ee0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e6      	bne.n	8007eb4 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 8007ee6:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 8007eea:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8007eec:	6291      	str	r1, [r2, #40]	; 0x28
}
 8007eee:	e7ed      	b.n	8007ecc <move_thread_to_end_of_prio_q+0x4c>
 8007ef0:	20000780 	.word	0x20000780

08007ef4 <z_time_slice>:
{
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4601      	mov	r1, r0
	__asm__ volatile(
 8007ef8:	f04f 0310 	mov.w	r3, #16
 8007efc:	f3ef 8411 	mrs	r4, BASEPRI
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8007f08:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <z_time_slice+0x6c>)
 8007f0a:	4a16      	ldr	r2, [pc, #88]	; (8007f64 <z_time_slice+0x70>)
 8007f0c:	6898      	ldr	r0, [r3, #8]
 8007f0e:	6815      	ldr	r5, [r2, #0]
 8007f10:	42a8      	cmp	r0, r5
 8007f12:	d106      	bne.n	8007f22 <z_time_slice+0x2e>
			z_reset_time_slice();
 8007f14:	f7ff fec2 	bl	8007c9c <z_reset_time_slice>
	__asm__ volatile(
 8007f18:	f384 8811 	msr	BASEPRI, r4
 8007f1c:	f3bf 8f6f 	isb	sy
}
 8007f20:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8007f22:	2500      	movs	r5, #0
 8007f24:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8007f26:	4a10      	ldr	r2, [pc, #64]	; (8007f68 <z_time_slice+0x74>)
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	b1ba      	cbz	r2, 8007f5c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8007f2c:	89c2      	ldrh	r2, [r0, #14]
 8007f2e:	2a7f      	cmp	r2, #127	; 0x7f
 8007f30:	d814      	bhi.n	8007f5c <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
 8007f32:	7b42      	ldrb	r2, [r0, #13]
 8007f34:	06d2      	lsls	r2, r2, #27
 8007f36:	d111      	bne.n	8007f5c <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8007f38:	4a0c      	ldr	r2, [pc, #48]	; (8007f6c <z_time_slice+0x78>)
 8007f3a:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8007f3e:	6812      	ldr	r2, [r2, #0]
 8007f40:	4295      	cmp	r5, r2
 8007f42:	db0b      	blt.n	8007f5c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8007f44:	4a0a      	ldr	r2, [pc, #40]	; (8007f70 <z_time_slice+0x7c>)
 8007f46:	4290      	cmp	r0, r2
 8007f48:	d008      	beq.n	8007f5c <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	428a      	cmp	r2, r1
 8007f4e:	dc02      	bgt.n	8007f56 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
 8007f50:	f7ff ff96 	bl	8007e80 <move_thread_to_end_of_prio_q>
 8007f54:	e7de      	b.n	8007f14 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
 8007f56:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
 8007f58:	611a      	str	r2, [r3, #16]
 8007f5a:	e7dd      	b.n	8007f18 <z_time_slice+0x24>
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	e7fb      	b.n	8007f58 <z_time_slice+0x64>
 8007f60:	20000780 	.word	0x20000780
 8007f64:	200007b0 	.word	0x200007b0
 8007f68:	200007b8 	.word	0x200007b8
 8007f6c:	200007b4 	.word	0x200007b4
 8007f70:	200003b0 	.word	0x200003b0

08007f74 <ready_thread>:
{
 8007f74:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8007f76:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8007f7a:	7b43      	ldrb	r3, [r0, #13]
 8007f7c:	2a00      	cmp	r2, #0
 8007f7e:	db2a      	blt.n	8007fd6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8007f80:	06da      	lsls	r2, r3, #27
 8007f82:	d128      	bne.n	8007fd6 <ready_thread+0x62>
 8007f84:	6982      	ldr	r2, [r0, #24]
 8007f86:	bb32      	cbnz	r2, 8007fd6 <ready_thread+0x62>
	return list->head == list;
 8007f88:	4a14      	ldr	r2, [pc, #80]	; (8007fdc <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8007f8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f8e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 8007f90:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007f94:	f102 0524 	add.w	r5, r2, #36	; 0x24
 8007f98:	42ab      	cmp	r3, r5
 8007f9a:	d017      	beq.n	8007fcc <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8007f9c:	b1b3      	cbz	r3, 8007fcc <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 8007f9e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8007fa2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8007fa6:	428e      	cmp	r6, r1
 8007fa8:	d00b      	beq.n	8007fc2 <ready_thread+0x4e>
		return b2 - b1;
 8007faa:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8007fac:	2900      	cmp	r1, #0
 8007fae:	dd08      	ble.n	8007fc2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8007fb0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8007fb2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8007fb6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8007fb8:	6058      	str	r0, [r3, #4]
}
 8007fba:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	f7ff bed1 	b.w	8007d64 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8007fc2:	42a3      	cmp	r3, r4
 8007fc4:	d002      	beq.n	8007fcc <ready_thread+0x58>
 8007fc6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1ea      	bne.n	8007fa2 <ready_thread+0x2e>
	node->prev = tail;
 8007fcc:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 8007fd0:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8007fd2:	6290      	str	r0, [r2, #40]	; 0x28
}
 8007fd4:	e7f1      	b.n	8007fba <ready_thread+0x46>
}
 8007fd6:	bc70      	pop	{r4, r5, r6}
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	20000780 	.word	0x20000780

08007fe0 <z_sched_start>:
{
 8007fe0:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007fe2:	f04f 0210 	mov.w	r2, #16
 8007fe6:	f3ef 8411 	mrs	r4, BASEPRI
 8007fea:	f382 8811 	msr	BASEPRI, r2
 8007fee:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8007ff2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8007ff4:	0751      	lsls	r1, r2, #29
 8007ff6:	d404      	bmi.n	8008002 <z_sched_start+0x22>
	__asm__ volatile(
 8007ff8:	f384 8811 	msr	BASEPRI, r4
 8007ffc:	f3bf 8f6f 	isb	sy
}
 8008000:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8008002:	f022 0204 	bic.w	r2, r2, #4
 8008006:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8008008:	f7ff ffb4 	bl	8007f74 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 800800c:	4621      	mov	r1, r4
 800800e:	4802      	ldr	r0, [pc, #8]	; (8008018 <z_sched_start+0x38>)
}
 8008010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8008014:	f7ff be80 	b.w	8007d18 <z_reschedule>
 8008018:	200007c6 	.word	0x200007c6

0800801c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800801c:	4b04      	ldr	r3, [pc, #16]	; (8008030 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800801e:	2100      	movs	r1, #0
 8008020:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 8008024:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 8008028:	4608      	mov	r0, r1
 800802a:	f7ff be4d 	b.w	8007cc8 <k_sched_time_slice_set>
 800802e:	bf00      	nop
 8008030:	20000780 	.word	0x20000780

08008034 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8008034:	4b01      	ldr	r3, [pc, #4]	; (800803c <z_impl_k_current_get+0x8>)
 8008036:	6898      	ldr	r0, [r3, #8]
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	20000780 	.word	0x20000780

08008040 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8008040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008044:	4604      	mov	r4, r0
	__asm__ volatile(
 8008046:	f04f 0310 	mov.w	r3, #16
 800804a:	f3ef 8611 	mrs	r6, BASEPRI
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8008056:	7b43      	ldrb	r3, [r0, #13]
 8008058:	071a      	lsls	r2, r3, #28
 800805a:	d505      	bpl.n	8008068 <z_thread_abort+0x28>
	__asm__ volatile(
 800805c:	f386 8811 	msr	BASEPRI, r6
 8008060:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8008064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8008068:	f023 0220 	bic.w	r2, r3, #32
 800806c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8008070:	09d2      	lsrs	r2, r2, #7
 8008072:	d120      	bne.n	80080b6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8008074:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8008076:	68a3      	ldr	r3, [r4, #8]
 8008078:	b113      	cbz	r3, 8008080 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 800807a:	4620      	mov	r0, r4
 800807c:	f001 fca4 	bl	80099c8 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8008080:	f104 0018 	add.w	r0, r4, #24
 8008084:	f001 fd83 	bl	8009b8e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8008088:	f104 0758 	add.w	r7, r4, #88	; 0x58
 800808c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8008090:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008092:	42bd      	cmp	r5, r7
 8008094:	d000      	beq.n	8008098 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8008096:	b9b5      	cbnz	r5, 80080c6 <z_thread_abort+0x86>
		update_cache(1);
 8008098:	2001      	movs	r0, #1
 800809a:	f7ff fe63 	bl	8007d64 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 800809e:	4b10      	ldr	r3, [pc, #64]	; (80080e0 <z_thread_abort+0xa0>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	42a3      	cmp	r3, r4
 80080a4:	d1da      	bne.n	800805c <z_thread_abort+0x1c>
 80080a6:	f3ef 8305 	mrs	r3, IPSR
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1d6      	bne.n	800805c <z_thread_abort+0x1c>
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7fd ff82 	bl	8005fb8 <arch_swap>
	return ret;
 80080b4:	e7d2      	b.n	800805c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80080b6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 80080ba:	f043 0308 	orr.w	r3, r3, #8
 80080be:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80080c0:	f001 fc7a 	bl	80099b8 <sys_dlist_remove>
}
 80080c4:	e7d7      	b.n	8008076 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 80080c6:	4628      	mov	r0, r5
 80080c8:	f001 fc7e 	bl	80099c8 <unpend_thread_no_timeout>
 80080cc:	f105 0018 	add.w	r0, r5, #24
 80080d0:	f001 fd5d 	bl	8009b8e <z_abort_timeout>
 80080d4:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 80080d8:	4628      	mov	r0, r5
 80080da:	f7ff ff4b 	bl	8007f74 <ready_thread>
 80080de:	e7d7      	b.n	8008090 <z_thread_abort+0x50>
 80080e0:	20000780 	.word	0x20000780

080080e4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 80080e4:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80080e6:	4806      	ldr	r0, [pc, #24]	; (8008100 <z_data_copy+0x1c>)
 80080e8:	4a06      	ldr	r2, [pc, #24]	; (8008104 <z_data_copy+0x20>)
 80080ea:	4907      	ldr	r1, [pc, #28]	; (8008108 <z_data_copy+0x24>)
 80080ec:	1a12      	subs	r2, r2, r0
 80080ee:	f001 fdd8 	bl	8009ca2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80080f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80080f6:	4a05      	ldr	r2, [pc, #20]	; (800810c <z_data_copy+0x28>)
 80080f8:	4905      	ldr	r1, [pc, #20]	; (8008110 <z_data_copy+0x2c>)
 80080fa:	4806      	ldr	r0, [pc, #24]	; (8008114 <z_data_copy+0x30>)
 80080fc:	f001 bdd1 	b.w	8009ca2 <memcpy>
 8008100:	20000000 	.word	0x20000000
 8008104:	200001f0 	.word	0x200001f0
 8008108:	0800b0b0 	.word	0x0800b0b0
 800810c:	00000000 	.word	0x00000000
 8008110:	0800b0b0 	.word	0x0800b0b0
 8008114:	20000000 	.word	0x20000000

08008118 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8008118:	4b03      	ldr	r3, [pc, #12]	; (8008128 <elapsed+0x10>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	b90b      	cbnz	r3, 8008122 <elapsed+0xa>
 800811e:	f7fd bf17 	b.w	8005f50 <sys_clock_elapsed>
}
 8008122:	2000      	movs	r0, #0
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	200007bc 	.word	0x200007bc

0800812c <next_timeout>:
	return list->head == list;
 800812c:	4b11      	ldr	r3, [pc, #68]	; (8008174 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
 800812e:	b510      	push	{r4, lr}
 8008130:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008132:	429c      	cmp	r4, r3
 8008134:	bf08      	it	eq
 8008136:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8008138:	f7ff ffee 	bl	8008118 <elapsed>
 800813c:	4602      	mov	r2, r0
	int32_t ret = to == NULL ? MAX_WAIT
 800813e:	b16c      	cbz	r4, 800815c <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8008140:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8008144:	1a80      	subs	r0, r0, r2
 8008146:	eb61 72e2 	sbc.w	r2, r1, r2, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 800814a:	2801      	cmp	r0, #1
 800814c:	f172 0300 	sbcs.w	r3, r2, #0
 8008150:	db0d      	blt.n	800816e <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8008152:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8008156:	f172 0300 	sbcs.w	r3, r2, #0
 800815a:	db01      	blt.n	8008160 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
 800815c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8008160:	4b05      	ldr	r3, [pc, #20]	; (8008178 <next_timeout+0x4c>)
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	b113      	cbz	r3, 800816c <next_timeout+0x40>
 8008166:	4298      	cmp	r0, r3
 8008168:	bfa8      	it	ge
 800816a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 800816c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 800816e:	2000      	movs	r0, #0
 8008170:	e7f6      	b.n	8008160 <next_timeout+0x34>
 8008172:	bf00      	nop
 8008174:	20000088 	.word	0x20000088
 8008178:	20000780 	.word	0x20000780

0800817c <remove_timeout>:
{
 800817c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 800817e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8008180:	b168      	cbz	r0, 800819e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8008182:	4a0a      	ldr	r2, [pc, #40]	; (80081ac <remove_timeout+0x30>)
 8008184:	6852      	ldr	r2, [r2, #4]
 8008186:	4290      	cmp	r0, r2
 8008188:	d009      	beq.n	800819e <remove_timeout+0x22>
	if (next(t) != NULL) {
 800818a:	b143      	cbz	r3, 800819e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 800818c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8008190:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8008194:	1912      	adds	r2, r2, r4
 8008196:	eb41 0105 	adc.w	r1, r1, r5
 800819a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800819e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 80081a0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80081a2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80081a4:	2300      	movs	r3, #0
	node->prev = NULL;
 80081a6:	e9c0 3300 	strd	r3, r3, [r0]
}
 80081aa:	bd30      	pop	{r4, r5, pc}
 80081ac:	20000088 	.word	0x20000088

080081b0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80081b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b4:	bf08      	it	eq
 80081b6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 80081ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081bc:	4604      	mov	r4, r0
 80081be:	461f      	mov	r7, r3
 80081c0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80081c2:	d065      	beq.n	8008290 <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80081c4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 80081c6:	f04f 0310 	mov.w	r3, #16
 80081ca:	f3ef 8611 	mrs	r6, BASEPRI
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 80081d6:	f06f 0201 	mvn.w	r2, #1
 80081da:	1b53      	subs	r3, r2, r5
 80081dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80081e0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	db1b      	blt.n	8008220 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80081e8:	4b2a      	ldr	r3, [pc, #168]	; (8008294 <z_add_timeout+0xe4>)
 80081ea:	e9d3 1300 	ldrd	r1, r3, [r3]
 80081ee:	1a52      	subs	r2, r2, r1
 80081f0:	eb6c 0303 	sbc.w	r3, ip, r3
 80081f4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 80081f6:	eb63 0307 	sbc.w	r3, r3, r7
 80081fa:	2d01      	cmp	r5, #1
 80081fc:	f173 0200 	sbcs.w	r2, r3, #0
 8008200:	da01      	bge.n	8008206 <z_add_timeout+0x56>
 8008202:	2501      	movs	r5, #1
 8008204:	2300      	movs	r3, #0
	return list->head == list;
 8008206:	4824      	ldr	r0, [pc, #144]	; (8008298 <z_add_timeout+0xe8>)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8008208:	e9c4 5304 	strd	r5, r3, [r4, #16]
	sys_dnode_t *const tail = list->tail;
 800820c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008210:	4283      	cmp	r3, r0
 8008212:	d116      	bne.n	8008242 <z_add_timeout+0x92>
	node->prev = tail;
 8008214:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8008218:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 800821c:	6044      	str	r4, [r0, #4]
}
 800821e:	e024      	b.n	800826a <z_add_timeout+0xba>
 8008220:	f7ff ff7a 	bl	8008118 <elapsed>
 8008224:	3501      	adds	r5, #1
 8008226:	f147 0300 	adc.w	r3, r7, #0
 800822a:	182d      	adds	r5, r5, r0
 800822c:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8008230:	e7e9      	b.n	8008206 <z_add_timeout+0x56>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 8008232:	1a52      	subs	r2, r2, r1
 8008234:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 8008238:	4563      	cmp	r3, ip
 800823a:	e9c4 2504 	strd	r2, r5, [r4, #16]
 800823e:	d0e9      	beq.n	8008214 <z_add_timeout+0x64>
 8008240:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0e6      	beq.n	8008214 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 8008246:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 800824a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 800824e:	428a      	cmp	r2, r1
 8008250:	eb75 0e07 	sbcs.w	lr, r5, r7
 8008254:	daed      	bge.n	8008232 <z_add_timeout+0x82>
				t->dticks -= to->dticks;
 8008256:	1a8a      	subs	r2, r1, r2
 8008258:	eb67 0505 	sbc.w	r5, r7, r5
 800825c:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 8008260:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8008262:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8008266:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8008268:	605c      	str	r4, [r3, #4]
	return list->head == list;
 800826a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800826c:	4283      	cmp	r3, r0
 800826e:	d00b      	beq.n	8008288 <z_add_timeout+0xd8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8008270:	429c      	cmp	r4, r3
 8008272:	d109      	bne.n	8008288 <z_add_timeout+0xd8>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8008274:	f7ff ff5a 	bl	800812c <next_timeout>

			if (next_time == 0 ||
 8008278:	b118      	cbz	r0, 8008282 <z_add_timeout+0xd2>
			    _current_cpu->slice_ticks != next_time) {
 800827a:	4b08      	ldr	r3, [pc, #32]	; (800829c <z_add_timeout+0xec>)
			if (next_time == 0 ||
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	4283      	cmp	r3, r0
 8008280:	d002      	beq.n	8008288 <z_add_timeout+0xd8>
				sys_clock_set_timeout(next_time, false);
 8008282:	2100      	movs	r1, #0
 8008284:	f7fd fdf4 	bl	8005e70 <sys_clock_set_timeout>
	__asm__ volatile(
 8008288:	f386 8811 	msr	BASEPRI, r6
 800828c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8008290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008292:	bf00      	nop
 8008294:	20000530 	.word	0x20000530
 8008298:	20000088 	.word	0x20000088
 800829c:	20000780 	.word	0x20000780

080082a0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 80082a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a4:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 80082a6:	f7ff fe25 	bl	8007ef4 <z_time_slice>
	__asm__ volatile(
 80082aa:	f04f 0310 	mov.w	r3, #16
 80082ae:	f3ef 8411 	mrs	r4, BASEPRI
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 80082ba:	4e24      	ldr	r6, [pc, #144]	; (800834c <sys_clock_announce+0xac>)
	return list->head == list;
 80082bc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8008354 <sys_clock_announce+0xb4>
 80082c0:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 80082c2:	4d23      	ldr	r5, [pc, #140]	; (8008350 <sys_clock_announce+0xb0>)
 80082c4:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80082c8:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80082ca:	4540      	cmp	r0, r8
		curr_tick += dt;
 80082cc:	e9d5 1e00 	ldrd	r1, lr, [r5]
 80082d0:	ea4f 77e2 	mov.w	r7, r2, asr #31
 80082d4:	d00b      	beq.n	80082ee <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80082d6:	b150      	cbz	r0, 80082ee <sys_clock_announce+0x4e>
 80082d8:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 80082dc:	429a      	cmp	r2, r3
 80082de:	eb77 090c 	sbcs.w	r9, r7, ip
 80082e2:	da16      	bge.n	8008312 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 80082e4:	1a9b      	subs	r3, r3, r2
 80082e6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80082ea:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 80082ee:	1852      	adds	r2, r2, r1
 80082f0:	eb4e 0707 	adc.w	r7, lr, r7
 80082f4:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 80082f8:	2500      	movs	r5, #0
 80082fa:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 80082fc:	f7ff ff16 	bl	800812c <next_timeout>
 8008300:	4629      	mov	r1, r5
 8008302:	f7fd fdb5 	bl	8005e70 <sys_clock_set_timeout>
	__asm__ volatile(
 8008306:	f384 8811 	msr	BASEPRI, r4
 800830a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800830e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8008312:	1859      	adds	r1, r3, r1
 8008314:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 800831c:	2200      	movs	r2, #0
 800831e:	2300      	movs	r3, #0
 8008320:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 8008324:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 8008328:	f7ff ff28 	bl	800817c <remove_timeout>
 800832c:	f384 8811 	msr	BASEPRI, r4
 8008330:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8008334:	6883      	ldr	r3, [r0, #8]
 8008336:	4798      	blx	r3
	__asm__ volatile(
 8008338:	f04f 0310 	mov.w	r3, #16
 800833c:	f3ef 8411 	mrs	r4, BASEPRI
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8008348:	e7bc      	b.n	80082c4 <sys_clock_announce+0x24>
 800834a:	bf00      	nop
 800834c:	200007bc 	.word	0x200007bc
 8008350:	20000530 	.word	0x20000530
 8008354:	20000088 	.word	0x20000088

08008358 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8008358:	b510      	push	{r4, lr}
 800835a:	f04f 0310 	mov.w	r3, #16
 800835e:	f3ef 8411 	mrs	r4, BASEPRI
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 800836a:	f7fd fdf1 	bl	8005f50 <sys_clock_elapsed>
 800836e:	4a05      	ldr	r2, [pc, #20]	; (8008384 <sys_clock_tick_get+0x2c>)
 8008370:	e9d2 3100 	ldrd	r3, r1, [r2]
 8008374:	18c0      	adds	r0, r0, r3
 8008376:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800837a:	f384 8811 	msr	BASEPRI, r4
 800837e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8008382:	bd10      	pop	{r4, pc}
 8008384:	20000530 	.word	0x20000530

08008388 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8008388:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800838a:	4604      	mov	r4, r0
 800838c:	b178      	cbz	r0, 80083ae <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 800838e:	f7fd fdfd 	bl	8005f8c <sys_clock_cycle_get_32>
 8008392:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8008394:	4806      	ldr	r0, [pc, #24]	; (80083b0 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8008396:	4a07      	ldr	r2, [pc, #28]	; (80083b4 <z_impl_k_busy_wait+0x2c>)
 8008398:	fba4 0100 	umull	r0, r1, r4, r0
 800839c:	2300      	movs	r3, #0
 800839e:	f7f8 fb31 	bl	8000a04 <__aeabi_uldivmod>
 80083a2:	4604      	mov	r4, r0
 80083a4:	f7fd fdf2 	bl	8005f8c <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 80083a8:	1b43      	subs	r3, r0, r5
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	d3fa      	bcc.n	80083a4 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	05b8d800 	.word	0x05b8d800
 80083b4:	000f4240 	.word	0x000f4240

080083b8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 80083b8:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80083ba:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 80083be:	3301      	adds	r3, #1
 80083c0:	f142 0200 	adc.w	r2, r2, #0
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	f172 0300 	sbcs.w	r3, r2, #0
{
 80083ca:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80083cc:	d304      	bcc.n	80083d8 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80083ce:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 80083d2:	490d      	ldr	r1, [pc, #52]	; (8008408 <z_timer_expiration_handler+0x50>)
 80083d4:	f7ff feec 	bl	80081b0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 80083d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083da:	3301      	adds	r3, #1
 80083dc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 80083de:	6a23      	ldr	r3, [r4, #32]
 80083e0:	b10b      	cbz	r3, 80083e6 <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
 80083e2:	4620      	mov	r0, r4
 80083e4:	4798      	blx	r3
	return list->head == list;
 80083e6:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80083ea:	42a5      	cmp	r5, r4
 80083ec:	d00a      	beq.n	8008404 <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 80083ee:	b14d      	cbz	r5, 8008404 <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
 80083f0:	4628      	mov	r0, r5
 80083f2:	f001 faf3 	bl	80099dc <z_unpend_thread_no_timeout>
 80083f6:	2300      	movs	r3, #0
 80083f8:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
 80083fa:	4628      	mov	r0, r5
}
 80083fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
 8008400:	f001 bb56 	b.w	8009ab0 <z_ready_thread>
}
 8008404:	bd38      	pop	{r3, r4, r5, pc}
 8008406:	bf00      	nop
 8008408:	080083b9 	.word	0x080083b9

0800840c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8008410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008414:	bf08      	it	eq
 8008416:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800841a:	4605      	mov	r5, r0
 800841c:	4690      	mov	r8, r2
 800841e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008422:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8008424:	d03c      	beq.n	80084a0 <z_impl_k_timer_start+0x94>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8008426:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800842a:	bf08      	it	eq
 800842c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8008430:	4604      	mov	r4, r0
 8008432:	460e      	mov	r6, r1
 8008434:	d013      	beq.n	800845e <z_impl_k_timer_start+0x52>
 8008436:	4308      	orrs	r0, r1
 8008438:	d011      	beq.n	800845e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
 800843a:	f06f 0001 	mvn.w	r0, #1
 800843e:	1b00      	subs	r0, r0, r4
 8008440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008444:	eb60 0001 	sbc.w	r0, r0, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8008448:	2800      	cmp	r0, #0
 800844a:	da08      	bge.n	800845e <z_impl_k_timer_start+0x52>
		period.ticks = MAX(period.ticks - 1, 1);
 800844c:	3c01      	subs	r4, #1
 800844e:	f161 0600 	sbc.w	r6, r1, #0
 8008452:	2c01      	cmp	r4, #1
 8008454:	f176 0100 	sbcs.w	r1, r6, #0
 8008458:	bfbc      	itt	lt
 800845a:	2401      	movlt	r4, #1
 800845c:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800845e:	f06f 0101 	mvn.w	r1, #1
 8008462:	1a89      	subs	r1, r1, r2
 8008464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008468:	eb61 0103 	sbc.w	r1, r1, r3
 800846c:	2900      	cmp	r1, #0
 800846e:	da08      	bge.n	8008482 <z_impl_k_timer_start+0x76>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8008470:	3a01      	subs	r2, #1
 8008472:	f163 0700 	sbc.w	r7, r3, #0
 8008476:	2f00      	cmp	r7, #0
 8008478:	4690      	mov	r8, r2
 800847a:	bfbc      	itt	lt
 800847c:	f04f 0800 	movlt.w	r8, #0
 8008480:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
 8008482:	4628      	mov	r0, r5
 8008484:	f001 fb83 	bl	8009b8e <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
 800848c:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8008490:	4642      	mov	r2, r8
 8008492:	463b      	mov	r3, r7
 8008494:	4628      	mov	r0, r5
 8008496:	4903      	ldr	r1, [pc, #12]	; (80084a4 <z_impl_k_timer_start+0x98>)
		     duration);
}
 8008498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800849c:	f7ff be88 	b.w	80081b0 <z_add_timeout>
}
 80084a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084a4:	080083b9 	.word	0x080083b9

080084a8 <z_impl_k_timer_status_sync>:
}
#include <syscalls/k_timer_status_get_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
 80084a8:	b513      	push	{r0, r1, r4, lr}
 80084aa:	4604      	mov	r4, r0
	__asm__ volatile(
 80084ac:	f04f 0310 	mov.w	r3, #16
 80084b0:	f3ef 8111 	mrs	r1, BASEPRI
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy

		return result;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;
 80084bc:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if (result == 0U) {
 80084be:	b9a8      	cbnz	r0, 80084ec <z_impl_k_timer_status_sync+0x44>
		if (!z_is_inactive_timeout(&timer->timeout)) {
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	b19b      	cbz	r3, 80084ec <z_impl_k_timer_status_sync+0x44>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_timer, status_sync, timer, K_FOREVER);

			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
 80084c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084cc:	e9cd 2300 	strd	r2, r3, [sp]
 80084d0:	480a      	ldr	r0, [pc, #40]	; (80084fc <z_impl_k_timer_status_sync+0x54>)
 80084d2:	f104 0218 	add.w	r2, r4, #24
 80084d6:	f7ff fca3 	bl	8007e20 <z_pend_curr>
 80084da:	f04f 0310 	mov.w	r3, #16
 80084de:	f3ef 8111 	mrs	r1, BASEPRI
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
 80084ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	6323      	str	r3, [r4, #48]	; 0x30
	__asm__ volatile(
 80084f0:	f381 8811 	msr	BASEPRI, r1
 80084f4:	f3bf 8f6f 	isb	sy
	 * @note	New tracing hook
	 */
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_timer, status_sync, timer, result);

	return result;
}
 80084f8:	b002      	add	sp, #8
 80084fa:	bd10      	pop	{r4, pc}
 80084fc:	200007c7 	.word	0x200007c7

08008500 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8008500:	4a02      	ldr	r2, [pc, #8]	; (800850c <boot_banner+0xc>)
 8008502:	4903      	ldr	r1, [pc, #12]	; (8008510 <boot_banner+0x10>)
 8008504:	4803      	ldr	r0, [pc, #12]	; (8008514 <boot_banner+0x14>)
 8008506:	f000 ba31 	b.w	800896c <printk>
 800850a:	bf00      	nop
 800850c:	0800a7e2 	.word	0x0800a7e2
 8008510:	0800af6a 	.word	0x0800af6a
 8008514:	0800af86 	.word	0x0800af86

08008518 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 8008518:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 800851a:	4c06      	ldr	r4, [pc, #24]	; (8008534 <statics_init+0x1c>)
 800851c:	4d06      	ldr	r5, [pc, #24]	; (8008538 <statics_init+0x20>)
 800851e:	42ac      	cmp	r4, r5
 8008520:	d301      	bcc.n	8008526 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 8008522:	2000      	movs	r0, #0
 8008524:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8008526:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800852a:	4620      	mov	r0, r4
 800852c:	f001 fb92 	bl	8009c54 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8008530:	3418      	adds	r4, #24
 8008532:	e7f4      	b.n	800851e <statics_init+0x6>
 8008534:	200001cc 	.word	0x200001cc
 8008538:	200001cc 	.word	0x200001cc

0800853c <atan2>:
 800853c:	f7fa b988 	b.w	8002850 <__ieee754_atan2>

08008540 <sqrt>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	ed2d 8b02 	vpush	{d8}
 8008546:	ec55 4b10 	vmov	r4, r5, d0
 800854a:	f000 f833 	bl	80085b4 <__ieee754_sqrt>
 800854e:	4b18      	ldr	r3, [pc, #96]	; (80085b0 <sqrt+0x70>)
 8008550:	eeb0 8a40 	vmov.f32	s16, s0
 8008554:	eef0 8a60 	vmov.f32	s17, s1
 8008558:	f993 3000 	ldrsb.w	r3, [r3]
 800855c:	3301      	adds	r3, #1
 800855e:	d00d      	beq.n	800857c <sqrt+0x3c>
 8008560:	4622      	mov	r2, r4
 8008562:	462b      	mov	r3, r5
 8008564:	4620      	mov	r0, r4
 8008566:	4629      	mov	r1, r5
 8008568:	f7f8 fc5a 	bl	8000e20 <__aeabi_dcmpun>
 800856c:	b930      	cbnz	r0, 800857c <sqrt+0x3c>
 800856e:	2200      	movs	r2, #0
 8008570:	2300      	movs	r3, #0
 8008572:	4620      	mov	r0, r4
 8008574:	4629      	mov	r1, r5
 8008576:	f7f8 fc2b 	bl	8000dd0 <__aeabi_dcmplt>
 800857a:	b930      	cbnz	r0, 800858a <sqrt+0x4a>
 800857c:	eeb0 0a48 	vmov.f32	s0, s16
 8008580:	eef0 0a68 	vmov.f32	s1, s17
 8008584:	ecbd 8b02 	vpop	{d8}
 8008588:	bd38      	pop	{r3, r4, r5, pc}
 800858a:	f000 ffa8 	bl	80094de <__errno>
 800858e:	2200      	movs	r2, #0
 8008590:	2300      	movs	r3, #0
 8008592:	2121      	movs	r1, #33	; 0x21
 8008594:	6001      	str	r1, [r0, #0]
 8008596:	4610      	mov	r0, r2
 8008598:	4619      	mov	r1, r3
 800859a:	f7f8 f8fb 	bl	8000794 <__aeabi_ddiv>
 800859e:	ec41 0b18 	vmov	d8, r0, r1
 80085a2:	eeb0 0a48 	vmov.f32	s0, s16
 80085a6:	eef0 0a68 	vmov.f32	s1, s17
 80085aa:	ecbd 8b02 	vpop	{d8}
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	20000090 	.word	0x20000090

080085b4 <__ieee754_sqrt>:
 80085b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b8:	4a61      	ldr	r2, [pc, #388]	; (8008740 <__ieee754_sqrt+0x18c>)
 80085ba:	ec55 4b10 	vmov	r4, r5, d0
 80085be:	43aa      	bics	r2, r5
 80085c0:	f000 809c 	beq.w	80086fc <__ieee754_sqrt+0x148>
 80085c4:	2d00      	cmp	r5, #0
 80085c6:	ee10 1a10 	vmov	r1, s0
 80085ca:	462b      	mov	r3, r5
 80085cc:	dd54      	ble.n	8008678 <__ieee754_sqrt+0xc4>
 80085ce:	1528      	asrs	r0, r5, #20
 80085d0:	d061      	beq.n	8008696 <__ieee754_sqrt+0xe2>
 80085d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80085da:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 80085de:	0fcb      	lsrs	r3, r1, #31
 80085e0:	07c0      	lsls	r0, r0, #31
 80085e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80085e6:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80085ea:	d405      	bmi.n	80085f8 <__ieee754_sqrt+0x44>
 80085ec:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 80085f0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80085f4:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 80085f8:	2600      	movs	r6, #0
 80085fa:	107f      	asrs	r7, r7, #1
 80085fc:	f04f 0e16 	mov.w	lr, #22
 8008600:	4634      	mov	r4, r6
 8008602:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008606:	18a1      	adds	r1, r4, r2
 8008608:	4299      	cmp	r1, r3
 800860a:	dc02      	bgt.n	8008612 <__ieee754_sqrt+0x5e>
 800860c:	1a5b      	subs	r3, r3, r1
 800860e:	188c      	adds	r4, r1, r2
 8008610:	4416      	add	r6, r2
 8008612:	005b      	lsls	r3, r3, #1
 8008614:	f1be 0e01 	subs.w	lr, lr, #1
 8008618:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 800861c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008620:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008624:	d1ef      	bne.n	8008606 <__ieee754_sqrt+0x52>
 8008626:	4675      	mov	r5, lr
 8008628:	2020      	movs	r0, #32
 800862a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800862e:	e00a      	b.n	8008646 <__ieee754_sqrt+0x92>
 8008630:	d041      	beq.n	80086b6 <__ieee754_sqrt+0x102>
 8008632:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8008636:	3801      	subs	r0, #1
 8008638:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800863c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008640:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008644:	d040      	beq.n	80086c8 <__ieee754_sqrt+0x114>
 8008646:	42a3      	cmp	r3, r4
 8008648:	eb02 010e 	add.w	r1, r2, lr
 800864c:	ddf0      	ble.n	8008630 <__ieee754_sqrt+0x7c>
 800864e:	2900      	cmp	r1, #0
 8008650:	eb01 0e02 	add.w	lr, r1, r2
 8008654:	db0a      	blt.n	800866c <__ieee754_sqrt+0xb8>
 8008656:	46a0      	mov	r8, r4
 8008658:	1b1b      	subs	r3, r3, r4
 800865a:	4561      	cmp	r1, ip
 800865c:	bf88      	it	hi
 800865e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8008662:	ebac 0c01 	sub.w	ip, ip, r1
 8008666:	4415      	add	r5, r2
 8008668:	4644      	mov	r4, r8
 800866a:	e7e2      	b.n	8008632 <__ieee754_sqrt+0x7e>
 800866c:	f1be 0f00 	cmp.w	lr, #0
 8008670:	dbf1      	blt.n	8008656 <__ieee754_sqrt+0xa2>
 8008672:	f104 0801 	add.w	r8, r4, #1
 8008676:	e7ef      	b.n	8008658 <__ieee754_sqrt+0xa4>
 8008678:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800867c:	4322      	orrs	r2, r4
 800867e:	d035      	beq.n	80086ec <__ieee754_sqrt+0x138>
 8008680:	2d00      	cmp	r5, #0
 8008682:	d14b      	bne.n	800871c <__ieee754_sqrt+0x168>
 8008684:	4628      	mov	r0, r5
 8008686:	0aca      	lsrs	r2, r1, #11
 8008688:	3815      	subs	r0, #21
 800868a:	4613      	mov	r3, r2
 800868c:	0549      	lsls	r1, r1, #21
 800868e:	2a00      	cmp	r2, #0
 8008690:	d0f9      	beq.n	8008686 <__ieee754_sqrt+0xd2>
 8008692:	02d7      	lsls	r7, r2, #11
 8008694:	d44f      	bmi.n	8008736 <__ieee754_sqrt+0x182>
 8008696:	2400      	movs	r4, #0
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	02de      	lsls	r6, r3, #11
 800869c:	4625      	mov	r5, r4
 800869e:	f104 0401 	add.w	r4, r4, #1
 80086a2:	d5f9      	bpl.n	8008698 <__ieee754_sqrt+0xe4>
 80086a4:	461a      	mov	r2, r3
 80086a6:	460b      	mov	r3, r1
 80086a8:	40a1      	lsls	r1, r4
 80086aa:	f1c4 0420 	rsb	r4, r4, #32
 80086ae:	40e3      	lsrs	r3, r4
 80086b0:	1b40      	subs	r0, r0, r5
 80086b2:	4313      	orrs	r3, r2
 80086b4:	e78d      	b.n	80085d2 <__ieee754_sqrt+0x1e>
 80086b6:	4561      	cmp	r1, ip
 80086b8:	d8bb      	bhi.n	8008632 <__ieee754_sqrt+0x7e>
 80086ba:	2900      	cmp	r1, #0
 80086bc:	eb01 0e02 	add.w	lr, r1, r2
 80086c0:	dbd4      	blt.n	800866c <__ieee754_sqrt+0xb8>
 80086c2:	4698      	mov	r8, r3
 80086c4:	2300      	movs	r3, #0
 80086c6:	e7cc      	b.n	8008662 <__ieee754_sqrt+0xae>
 80086c8:	ea53 030c 	orrs.w	r3, r3, ip
 80086cc:	d110      	bne.n	80086f0 <__ieee754_sqrt+0x13c>
 80086ce:	0868      	lsrs	r0, r5, #1
 80086d0:	1071      	asrs	r1, r6, #1
 80086d2:	07f3      	lsls	r3, r6, #31
 80086d4:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 80086d8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80086dc:	bf48      	it	mi
 80086de:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80086e2:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 80086e6:	4602      	mov	r2, r0
 80086e8:	ec43 2b10 	vmov	d0, r2, r3
 80086ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f0:	1c6a      	adds	r2, r5, #1
 80086f2:	bf16      	itet	ne
 80086f4:	1c68      	addne	r0, r5, #1
 80086f6:	3601      	addeq	r6, #1
 80086f8:	0840      	lsrne	r0, r0, #1
 80086fa:	e7e9      	b.n	80086d0 <__ieee754_sqrt+0x11c>
 80086fc:	ee10 2a10 	vmov	r2, s0
 8008700:	ee10 0a10 	vmov	r0, s0
 8008704:	462b      	mov	r3, r5
 8008706:	4629      	mov	r1, r5
 8008708:	f7f7 ff1a 	bl	8000540 <__aeabi_dmul>
 800870c:	4622      	mov	r2, r4
 800870e:	462b      	mov	r3, r5
 8008710:	f7f7 fd60 	bl	80001d4 <__adddf3>
 8008714:	ec41 0b10 	vmov	d0, r0, r1
 8008718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800871c:	ee10 2a10 	vmov	r2, s0
 8008720:	4620      	mov	r0, r4
 8008722:	4629      	mov	r1, r5
 8008724:	f7f7 fd54 	bl	80001d0 <__aeabi_dsub>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	f7f8 f832 	bl	8000794 <__aeabi_ddiv>
 8008730:	ec41 0b10 	vmov	d0, r0, r1
 8008734:	e7da      	b.n	80086ec <__ieee754_sqrt+0x138>
 8008736:	460b      	mov	r3, r1
 8008738:	2420      	movs	r4, #32
 800873a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800873e:	e7b6      	b.n	80086ae <__ieee754_sqrt+0xfa>
 8008740:	7ff00000 	.word	0x7ff00000

08008744 <fabs>:
 8008744:	ec51 0b10 	vmov	r0, r1, d0
 8008748:	ee10 2a10 	vmov	r2, s0
 800874c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008750:	ec43 2b10 	vmov	d0, r2, r3
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop

08008758 <finite>:
 8008758:	b082      	sub	sp, #8
 800875a:	ed8d 0b00 	vstr	d0, [sp]
 800875e:	9801      	ldr	r0, [sp, #4]
 8008760:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008764:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008768:	0fc0      	lsrs	r0, r0, #31
 800876a:	b002      	add	sp, #8
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop

08008770 <rint>:
 8008770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008772:	ec53 2b10 	vmov	r2, r3, d0
 8008776:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 800877a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 800877e:	2913      	cmp	r1, #19
 8008780:	ee10 0a10 	vmov	r0, s0
 8008784:	b083      	sub	sp, #12
 8008786:	461c      	mov	r4, r3
 8008788:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 800878c:	dc3a      	bgt.n	8008804 <rint+0x94>
 800878e:	2900      	cmp	r1, #0
 8008790:	db30      	blt.n	80087f4 <rint+0x84>
 8008792:	4d42      	ldr	r5, [pc, #264]	; (800889c <rint+0x12c>)
 8008794:	fa45 fc01 	asr.w	ip, r5, r1
 8008798:	ea03 050c 	and.w	r5, r3, ip
 800879c:	4315      	orrs	r5, r2
 800879e:	d02d      	beq.n	80087fc <rint+0x8c>
 80087a0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 80087a4:	4318      	orrs	r0, r3
 80087a6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80087aa:	d00c      	beq.n	80087c6 <rint+0x56>
 80087ac:	ea24 0c0c 	bic.w	ip, r4, ip
 80087b0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80087b4:	2913      	cmp	r1, #19
 80087b6:	fa44 f101 	asr.w	r1, r4, r1
 80087ba:	bf0c      	ite	eq
 80087bc:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 80087c0:	2000      	movne	r0, #0
 80087c2:	ea4c 0401 	orr.w	r4, ip, r1
 80087c6:	4936      	ldr	r1, [pc, #216]	; (80088a0 <rint+0x130>)
 80087c8:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 80087cc:	4623      	mov	r3, r4
 80087ce:	e9de 4500 	ldrd	r4, r5, [lr]
 80087d2:	4602      	mov	r2, r0
 80087d4:	4629      	mov	r1, r5
 80087d6:	4620      	mov	r0, r4
 80087d8:	f7f7 fcfc 	bl	80001d4 <__adddf3>
 80087dc:	e9cd 0100 	strd	r0, r1, [sp]
 80087e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087e4:	4622      	mov	r2, r4
 80087e6:	462b      	mov	r3, r5
 80087e8:	f7f7 fcf2 	bl	80001d0 <__aeabi_dsub>
 80087ec:	ec41 0b10 	vmov	d0, r0, r1
 80087f0:	b003      	add	sp, #12
 80087f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80087f8:	4311      	orrs	r1, r2
 80087fa:	d124      	bne.n	8008846 <rint+0xd6>
 80087fc:	ec43 2b10 	vmov	d0, r2, r3
 8008800:	b003      	add	sp, #12
 8008802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008804:	2933      	cmp	r1, #51	; 0x33
 8008806:	dd08      	ble.n	800881a <rint+0xaa>
 8008808:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800880c:	d1f6      	bne.n	80087fc <rint+0x8c>
 800880e:	4619      	mov	r1, r3
 8008810:	f7f7 fce0 	bl	80001d4 <__adddf3>
 8008814:	ec41 0b10 	vmov	d0, r0, r1
 8008818:	e7f2      	b.n	8008800 <rint+0x90>
 800881a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800881e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008822:	fa21 f10c 	lsr.w	r1, r1, ip
 8008826:	420a      	tst	r2, r1
 8008828:	d0e8      	beq.n	80087fc <rint+0x8c>
 800882a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800882e:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8008832:	d0c8      	beq.n	80087c6 <rint+0x56>
 8008834:	ea20 0303 	bic.w	r3, r0, r3
 8008838:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800883c:	fa40 fc0c 	asr.w	ip, r0, ip
 8008840:	ea43 000c 	orr.w	r0, r3, ip
 8008844:	e7bf      	b.n	80087c6 <rint+0x56>
 8008846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800884a:	4318      	orrs	r0, r3
 800884c:	4a14      	ldr	r2, [pc, #80]	; (80088a0 <rint+0x130>)
 800884e:	4243      	negs	r3, r0
 8008850:	4303      	orrs	r3, r0
 8008852:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
 8008856:	0b1b      	lsrs	r3, r3, #12
 8008858:	0c62      	lsrs	r2, r4, #17
 800885a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800885e:	0452      	lsls	r2, r2, #17
 8008860:	ea43 0702 	orr.w	r7, r3, r2
 8008864:	463b      	mov	r3, r7
 8008866:	e9de 6700 	ldrd	r6, r7, [lr]
 800886a:	ee10 2a10 	vmov	r2, s0
 800886e:	4630      	mov	r0, r6
 8008870:	4639      	mov	r1, r7
 8008872:	f7f7 fcaf 	bl	80001d4 <__adddf3>
 8008876:	e9cd 0100 	strd	r0, r1, [sp]
 800887a:	4632      	mov	r2, r6
 800887c:	463b      	mov	r3, r7
 800887e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008882:	f7f7 fca5 	bl	80001d0 <__aeabi_dsub>
 8008886:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 800888a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800888e:	4602      	mov	r2, r0
 8008890:	ea41 0304 	orr.w	r3, r1, r4
 8008894:	ec43 2b10 	vmov	d0, r2, r3
 8008898:	b003      	add	sp, #12
 800889a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800889c:	000fffff 	.word	0x000fffff
 80088a0:	0800a268 	.word	0x0800a268

080088a4 <crc_accumulate>:
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80088a4:	880a      	ldrh	r2, [r1, #0]
 80088a6:	4050      	eors	r0, r2
        tmp ^= (tmp<<4);
 80088a8:	ea80 1000 	eor.w	r0, r0, r0, lsl #4
 80088ac:	b2c0      	uxtb	r0, r0
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80088ae:	0903      	lsrs	r3, r0, #4
 80088b0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 80088b4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80088b8:	ea83 00c0 	eor.w	r0, r3, r0, lsl #3
 80088bc:	8008      	strh	r0, [r1, #0]
}
 80088be:	4770      	bx	lr

080088c0 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 80088c0:	b570      	push	{r4, r5, r6, lr}
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 80088c2:	6806      	ldr	r6, [r0, #0]
{
 80088c4:	4604      	mov	r4, r0
 80088c6:	b092      	sub	sp, #72	; 0x48
    unsigned offset = (m->sz[0] / 8) % 64;
 80088c8:	08f6      	lsrs	r6, r6, #3
{
 80088ca:	460d      	mov	r5, r1
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
    uint8_t *p = (uint8_t *)&m->counter[0];
    
    *zeros = 0x80;
 80088cc:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80088ce:	2247      	movs	r2, #71	; 0x47
 80088d0:	2100      	movs	r1, #0
 80088d2:	f10d 0001 	add.w	r0, sp, #1
 80088d6:	f1c6 0677 	rsb	r6, r6, #119	; 0x77
 80088da:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    *zeros = 0x80;
 80088de:	f88d 3000 	strb.w	r3, [sp]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80088e2:	f001 f9ec 	bl	8009cbe <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80088e6:	6822      	ldr	r2, [r4, #0]
 80088e8:	ab12      	add	r3, sp, #72	; 0x48
 80088ea:	4433      	add	r3, r6
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80088ec:	0a11      	lsrs	r1, r2, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80088ee:	f803 2c40 	strb.w	r2, [r3, #-64]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80088f2:	f803 1c41 	strb.w	r1, [r3, #-65]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80088f6:	0c11      	lsrs	r1, r2, #16
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80088f8:	0e12      	lsrs	r2, r2, #24
 80088fa:	f803 2c43 	strb.w	r2, [r3, #-67]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80088fe:	6862      	ldr	r2, [r4, #4]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8008900:	f803 1c42 	strb.w	r1, [r3, #-66]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8008904:	0a11      	lsrs	r1, r2, #8
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8008906:	f803 2c44 	strb.w	r2, [r3, #-68]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 800890a:	f803 1c45 	strb.w	r1, [r3, #-69]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 800890e:	0c11      	lsrs	r1, r2, #16
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008910:	0e12      	lsrs	r2, r2, #24
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8008912:	f803 1c46 	strb.w	r1, [r3, #-70]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008916:	f803 2c47 	strb.w	r2, [r3, #-71]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800891a:	4669      	mov	r1, sp
 800891c:	f106 0209 	add.w	r2, r6, #9
 8008920:	4620      	mov	r0, r4
 8008922:	f7fc f913 	bl	8004b4c <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8008926:	7ae3      	ldrb	r3, [r4, #11]
 8008928:	702b      	strb	r3, [r5, #0]
    result[1] = p[2];
 800892a:	7aa3      	ldrb	r3, [r4, #10]
 800892c:	706b      	strb	r3, [r5, #1]
    result[2] = p[1];
 800892e:	7a63      	ldrb	r3, [r4, #9]
 8008930:	70ab      	strb	r3, [r5, #2]
    result[3] = p[0];
 8008932:	7a23      	ldrb	r3, [r4, #8]
 8008934:	70eb      	strb	r3, [r5, #3]
    result[4] = p[7];
 8008936:	7be3      	ldrb	r3, [r4, #15]
 8008938:	712b      	strb	r3, [r5, #4]
    result[5] = p[6];
 800893a:	7ba3      	ldrb	r3, [r4, #14]
 800893c:	716b      	strb	r3, [r5, #5]
}
 800893e:	b012      	add	sp, #72	; 0x48
 8008940:	bd70      	pop	{r4, r5, r6, pc}

08008942 <arch_printk_char_out>:
}
 8008942:	2000      	movs	r0, #0
 8008944:	4770      	bx	lr

08008946 <str_out>:
{
 8008946:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8008948:	688a      	ldr	r2, [r1, #8]
 800894a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 800894c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800894e:	b114      	cbz	r4, 8008956 <str_out+0x10>
 8008950:	684b      	ldr	r3, [r1, #4]
 8008952:	4293      	cmp	r3, r2
 8008954:	dc01      	bgt.n	800895a <str_out+0x14>
		ctx->count++;
 8008956:	608d      	str	r5, [r1, #8]
}
 8008958:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 800895a:	3b01      	subs	r3, #1
 800895c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 800895e:	bf08      	it	eq
 8008960:	2200      	moveq	r2, #0
 8008962:	608d      	str	r5, [r1, #8]
 8008964:	bf0c      	ite	eq
 8008966:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 8008968:	54a0      	strbne	r0, [r4, r2]
 800896a:	e7f5      	b.n	8008958 <str_out+0x12>

0800896c <printk>:
{
 800896c:	b40f      	push	{r0, r1, r2, r3}
 800896e:	b507      	push	{r0, r1, r2, lr}
 8008970:	a904      	add	r1, sp, #16
 8008972:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8008976:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 8008978:	f7fc fa20 	bl	8004dbc <vprintk>
}
 800897c:	b003      	add	sp, #12
 800897e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008982:	b004      	add	sp, #16
 8008984:	4770      	bx	lr

08008986 <snprintk>:
{
 8008986:	b40c      	push	{r2, r3}
 8008988:	b507      	push	{r0, r1, r2, lr}
 800898a:	ab04      	add	r3, sp, #16
 800898c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8008990:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 8008992:	f7fc fa21 	bl	8004dd8 <vsnprintk>
}
 8008996:	b003      	add	sp, #12
 8008998:	f85d eb04 	ldr.w	lr, [sp], #4
 800899c:	b002      	add	sp, #8
 800899e:	4770      	bx	lr

080089a0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80089a0:	4604      	mov	r4, r0
 80089a2:	b508      	push	{r3, lr}
 80089a4:	4608      	mov	r0, r1
 80089a6:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 80089a8:	461a      	mov	r2, r3
 80089aa:	47a0      	blx	r4
	return z_impl_k_current_get();
 80089ac:	f7ff fb42 	bl	8008034 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 80089b0:	f7fd ff6a 	bl	8006888 <z_impl_k_thread_abort>

080089b4 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 80089b4:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 80089b6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 80089ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 80089be:	bf2c      	ite	cs
 80089c0:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 80089c4:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 80089c8:	4770      	bx	lr

080089ca <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 80089ca:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 80089ce:	6880      	ldr	r0, [r0, #8]
 80089d0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 80089d4:	bf2c      	ite	cs
 80089d6:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 80089da:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 80089de:	4770      	bx	lr

080089e0 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
 80089e0:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80089e2:	2201      	movs	r2, #1
 80089e4:	f7ff ffe6 	bl	80089b4 <chunk_field>
}
 80089e8:	40d0      	lsrs	r0, r2
 80089ea:	bd08      	pop	{r3, pc}

080089ec <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 80089ec:	6883      	ldr	r3, [r0, #8]
 80089ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
 80089f2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 80089f6:	d308      	bcc.n	8008a0a <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80089f8:	684b      	ldr	r3, [r1, #4]
		if (used) {
 80089fa:	b11a      	cbz	r2, 8008a04 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80089fc:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8008a00:	604b      	str	r3, [r1, #4]
 8008a02:	4770      	bx	lr
 8008a04:	f023 0301 	bic.w	r3, r3, #1
 8008a08:	e7fa      	b.n	8008a00 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8008a0a:	884b      	ldrh	r3, [r1, #2]
		if (used) {
 8008a0c:	b11a      	cbz	r2, 8008a16 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8008a0e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8008a12:	804b      	strh	r3, [r1, #2]
		}
	}
}
 8008a14:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8008a16:	f023 0301 	bic.w	r3, r3, #1
 8008a1a:	e7fa      	b.n	8008a12 <set_chunk_used+0x26>

08008a1c <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8008a1c:	0053      	lsls	r3, r2, #1
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f7ff bfd3 	b.w	80089ca <chunk_set>

08008a24 <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 8008a24:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008a28:	bf2c      	ite	cs
 8008a2a:	2008      	movcs	r0, #8
 8008a2c:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8008a2e:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8008a30:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8008a32:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
 8008a36:	fab0 f080 	clz	r0, r0
}
 8008a3a:	f1c0 001f 	rsb	r0, r0, #31
 8008a3e:	4770      	bx	lr

08008a40 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 8008a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a44:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
 8008a46:	2203      	movs	r2, #3
 8008a48:	460e      	mov	r6, r1
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	f7ff ffb2 	bl	80089b4 <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
 8008a50:	4286      	cmp	r6, r0
 8008a52:	4605      	mov	r5, r0
 8008a54:	f107 0804 	add.w	r8, r7, #4
 8008a58:	d10b      	bne.n	8008a72 <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	fa03 f707 	lsl.w	r7, r3, r7
 8008a60:	68e3      	ldr	r3, [r4, #12]
 8008a62:	ea23 0307 	bic.w	r3, r3, r7
 8008a66:	60e3      	str	r3, [r4, #12]
		b->next = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
 8008a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
 8008a72:	4631      	mov	r1, r6
 8008a74:	2202      	movs	r2, #2
 8008a76:	4620      	mov	r0, r4
 8008a78:	f7ff ff9c 	bl	80089b4 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
 8008a7c:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
 8008a7e:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
 8008a80:	4601      	mov	r1, r0
		b->next = second;
 8008a82:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
 8008a86:	4620      	mov	r0, r4
 8008a88:	2203      	movs	r2, #3
 8008a8a:	f7ff ff9e 	bl	80089ca <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8008a8e:	4633      	mov	r3, r6
 8008a90:	4629      	mov	r1, r5
 8008a92:	4620      	mov	r0, r4
 8008a94:	2202      	movs	r2, #2
}
 8008a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9a:	f7ff bf96 	b.w	80089ca <chunk_set>

08008a9e <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
 8008a9e:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
 8008aa0:	6886      	ldr	r6, [r0, #8]
 8008aa2:	460d      	mov	r5, r1
 8008aa4:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 8008aa6:	f7ff ff9b 	bl	80089e0 <chunk_size>
 8008aaa:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8008aae:	4601      	mov	r1, r0
 8008ab0:	d301      	bcc.n	8008ab6 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
 8008ab2:	2801      	cmp	r0, #1
 8008ab4:	d009      	beq.n	8008aca <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7ff ffb4 	bl	8008a24 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
 8008abc:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
 8008abe:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
 8008ac0:	4620      	mov	r0, r4
	}
}
 8008ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
 8008ac6:	f7ff bfbb 	b.w	8008a40 <free_list_remove_bidx>
}
 8008aca:	bd70      	pop	{r4, r5, r6, pc}

08008acc <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
 8008acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ace:	4616      	mov	r6, r2
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 8008ad4:	f7ff ff84 	bl	80089e0 <chunk_size>
 8008ad8:	4631      	mov	r1, r6
 8008ada:	4605      	mov	r5, r0
 8008adc:	4620      	mov	r0, r4
 8008ade:	f7ff ff7f 	bl	80089e0 <chunk_size>
 8008ae2:	182b      	adds	r3, r5, r0

	set_chunk_size(h, lc, newsz);
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	4620      	mov	r0, r4
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	f7ff ff96 	bl	8008a1c <set_chunk_size>
	return c + chunk_size(h, c);
 8008af0:	4631      	mov	r1, r6
 8008af2:	4620      	mov	r0, r4
 8008af4:	f7ff ff74 	bl	80089e0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8008af8:	9b01      	ldr	r3, [sp, #4]
 8008afa:	1831      	adds	r1, r6, r0
 8008afc:	2200      	movs	r2, #0
 8008afe:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
 8008b00:	b003      	add	sp, #12
 8008b02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008b06:	f7ff bf60 	b.w	80089ca <chunk_set>

08008b0a <free_list_add>:
{
 8008b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
 8008b0e:	6886      	ldr	r6, [r0, #8]
 8008b10:	460d      	mov	r5, r1
 8008b12:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 8008b14:	f7ff ff64 	bl	80089e0 <chunk_size>
 8008b18:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	d301      	bcc.n	8008b24 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 8008b20:	2801      	cmp	r0, #1
 8008b22:	d033      	beq.n	8008b8c <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
 8008b24:	4630      	mov	r0, r6
 8008b26:	f7ff ff7d 	bl	8008a24 <bucket_idx.isra.0>
	if (b->next == 0U) {
 8008b2a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8008b2e:	6916      	ldr	r6, [r2, #16]
 8008b30:	b99e      	cbnz	r6, 8008b5a <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 8008b32:	2301      	movs	r3, #1
 8008b34:	fa03 f000 	lsl.w	r0, r3, r0
 8008b38:	68e3      	ldr	r3, [r4, #12]
 8008b3a:	4303      	orrs	r3, r0
 8008b3c:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
 8008b3e:	4629      	mov	r1, r5
		b->next = c;
 8008b40:	6115      	str	r5, [r2, #16]
 8008b42:	462b      	mov	r3, r5
 8008b44:	2202      	movs	r2, #2
 8008b46:	4620      	mov	r0, r4
 8008b48:	f7ff ff3f 	bl	80089ca <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8008b4c:	2203      	movs	r2, #3
 8008b4e:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 8008b50:	4620      	mov	r0, r4
}
 8008b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b56:	f7ff bf38 	b.w	80089ca <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f7ff ff28 	bl	80089b4 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 8008b64:	4629      	mov	r1, r5
 8008b66:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 8008b68:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f7ff ff2d 	bl	80089ca <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8008b70:	2203      	movs	r2, #3
 8008b72:	4633      	mov	r3, r6
 8008b74:	4629      	mov	r1, r5
 8008b76:	4620      	mov	r0, r4
 8008b78:	f7ff ff27 	bl	80089ca <chunk_set>
 8008b7c:	4639      	mov	r1, r7
 8008b7e:	462b      	mov	r3, r5
 8008b80:	4620      	mov	r0, r4
 8008b82:	f7ff ff22 	bl	80089ca <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8008b86:	2202      	movs	r2, #2
 8008b88:	4631      	mov	r1, r6
 8008b8a:	e7e1      	b.n	8008b50 <free_list_add+0x46>
 8008b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b90 <free_chunk>:

static void free_chunk(struct z_heap *h, chunkid_t c)
{
 8008b90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b92:	4605      	mov	r5, r0
 8008b94:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
 8008b96:	f7ff ff23 	bl	80089e0 <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8008b9a:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
 8008b9c:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	9101      	str	r1, [sp, #4]
 8008ba2:	f7ff ff07 	bl	80089b4 <chunk_field>
	/* Merge with free right chunk? */
	if (!chunk_used(h, right_chunk(h, c))) {
 8008ba6:	f010 0f01 	tst.w	r0, #1
 8008baa:	9901      	ldr	r1, [sp, #4]
 8008bac:	d10b      	bne.n	8008bc6 <free_chunk+0x36>
		free_list_remove(h, right_chunk(h, c));
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f7ff ff75 	bl	8008a9e <free_list_remove>
	return c + chunk_size(h, c);
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	f7ff ff12 	bl	80089e0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	1822      	adds	r2, r4, r0
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f7ff ff83 	bl	8008acc <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	4621      	mov	r1, r4
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f7ff fef2 	bl	80089b4 <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8008bd0:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
 8008bd2:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	9101      	str	r1, [sp, #4]
 8008bd8:	f7ff feec 	bl	80089b4 <chunk_field>
	}

	/* Merge with free left chunk? */
	if (!chunk_used(h, left_chunk(h, c))) {
 8008bdc:	ea10 0602 	ands.w	r6, r0, r2
 8008be0:	9901      	ldr	r1, [sp, #4]
 8008be2:	d112      	bne.n	8008c0a <free_chunk+0x7a>
		free_list_remove(h, left_chunk(h, c));
 8008be4:	4628      	mov	r0, r5
 8008be6:	f7ff ff5a 	bl	8008a9e <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
 8008bea:	4621      	mov	r1, r4
 8008bec:	4632      	mov	r2, r6
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f7ff fee0 	bl	80089b4 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
 8008bf4:	4622      	mov	r2, r4
 8008bf6:	1a21      	subs	r1, r4, r0
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f7ff ff67 	bl	8008acc <merge_chunks>
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4632      	mov	r2, r6
 8008c02:	4628      	mov	r0, r5
 8008c04:	f7ff fed6 	bl	80089b4 <chunk_field>
 8008c08:	1a24      	subs	r4, r4, r0
		c = left_chunk(h, c);
	}

	free_list_add(h, c);
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4628      	mov	r0, r5
}
 8008c0e:	b002      	add	sp, #8
 8008c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
 8008c14:	f7ff bf79 	b.w	8008b0a <free_list_add>

08008c18 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
 8008c18:	b507      	push	{r0, r1, r2, lr}
	if (mem == NULL) {
 8008c1a:	b199      	cbz	r1, 8008c44 <sys_heap_free+0x2c>
 8008c1c:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
 8008c1e:	6883      	ldr	r3, [r0, #8]
 8008c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c24:	bf2c      	ite	cs
 8008c26:	2308      	movcs	r3, #8
 8008c28:	2304      	movcc	r3, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8008c2a:	1ac9      	subs	r1, r1, r3
 8008c2c:	1a09      	subs	r1, r1, r0
 8008c2e:	08c9      	lsrs	r1, r1, #3
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
 8008c30:	2200      	movs	r2, #0
 8008c32:	9101      	str	r1, [sp, #4]
 8008c34:	f7ff feda 	bl	80089ec <set_chunk_used>
	free_chunk(h, c);
 8008c38:	9901      	ldr	r1, [sp, #4]
}
 8008c3a:	b003      	add	sp, #12
 8008c3c:	f85d eb04 	ldr.w	lr, [sp], #4
	free_chunk(h, c);
 8008c40:	f7ff bfa6 	b.w	8008b90 <free_chunk>
}
 8008c44:	b003      	add	sp, #12
 8008c46:	f85d fb04 	ldr.w	pc, [sp], #4

08008c4a <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 8008c4a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8008c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c50:	bf2c      	ite	cs
 8008c52:	2408      	movcs	r4, #8
 8008c54:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8008c56:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8008c58:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8008c5a:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8008c5c:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8008c60:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8008c64:	1ba4      	subs	r4, r4, r6
 8008c66:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 8008c68:	2300      	movs	r3, #0
	heap->heap = h;
 8008c6a:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8008c6c:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
 8008c6e:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
 8008c70:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8008c72:	4620      	mov	r0, r4
 8008c74:	f7ff fed6 	bl	8008a24 <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8008c78:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8008c7a:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8008c7c:	1c41      	adds	r1, r0, #1
 8008c7e:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8008c80:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
 8008c84:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
 8008c86:	428b      	cmp	r3, r1
 8008c88:	db2e      	blt.n	8008ce8 <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 8008c8a:	462a      	mov	r2, r5
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	2100      	movs	r1, #0
 8008c90:	f7ff fec4 	bl	8008a1c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8008c94:	2300      	movs	r3, #0
 8008c96:	461a      	mov	r2, r3
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7ff fe95 	bl	80089ca <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8008ca0:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f7ff fea0 	bl	80089ec <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8008cac:	463a      	mov	r2, r7
 8008cae:	4629      	mov	r1, r5
 8008cb0:	f7ff feb4 	bl	8008a1c <set_chunk_size>
 8008cb4:	462b      	mov	r3, r5
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	4629      	mov	r1, r5
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7ff fe85 	bl	80089ca <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f7ff feaa 	bl	8008a1c <set_chunk_size>
 8008cc8:	463b      	mov	r3, r7
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4630      	mov	r0, r6
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f7ff fe7b 	bl	80089ca <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f7ff fe87 	bl	80089ec <set_chunk_used>

	free_list_add(h, chunk0_size);
 8008cde:	4629      	mov	r1, r5
}
 8008ce0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 8008ce4:	f7ff bf11 	b.w	8008b0a <free_list_add>
		h->buckets[i].next = 0;
 8008ce8:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 8008cec:	3301      	adds	r3, #1
 8008cee:	e7ca      	b.n	8008c86 <sys_heap_init+0x3c>

08008cf0 <_ldiv5>:
	uint32_t v_lo = *v;
 8008cf0:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 8008cf4:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 8008cf6:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 8008cfa:	fba2 2403 	umull	r2, r4, r2, r3
 8008cfe:	18d5      	adds	r5, r2, r3
 8008d00:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 8008d04:	fba1 1303 	umull	r1, r3, r1, r3
 8008d08:	1852      	adds	r2, r2, r1
 8008d0a:	eb44 0403 	adc.w	r4, r4, r3
 8008d0e:	1952      	adds	r2, r2, r5
 8008d10:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 8008d14:	1889      	adds	r1, r1, r2
 8008d16:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 8008d1a:	e9c0 1300 	strd	r1, r3, [r0]
}
 8008d1e:	bd30      	pop	{r4, r5, pc}

08008d20 <_get_digit>:
	if (*digit_count > 0) {
 8008d20:	680b      	ldr	r3, [r1, #0]
 8008d22:	2b00      	cmp	r3, #0
{
 8008d24:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
 8008d26:	dd10      	ble.n	8008d4a <_get_digit+0x2a>
		--*digit_count;
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
 8008d2c:	6803      	ldr	r3, [r0, #0]
 8008d2e:	6844      	ldr	r4, [r0, #4]
 8008d30:	220a      	movs	r2, #10
 8008d32:	fba3 1302 	umull	r1, r3, r3, r2
 8008d36:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
 8008d3a:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
 8008d3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008d40:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
 8008d44:	3230      	adds	r2, #48	; 0x30
}
 8008d46:	4610      	mov	r0, r2
 8008d48:	bd10      	pop	{r4, pc}
		rval = '0';
 8008d4a:	2230      	movs	r2, #48	; 0x30
 8008d4c:	e7fb      	b.n	8008d46 <_get_digit+0x26>

08008d4e <outs>:
{
 8008d4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d52:	4680      	mov	r8, r0
 8008d54:	4689      	mov	r9, r1
 8008d56:	4616      	mov	r6, r2
 8008d58:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8008d5a:	4615      	mov	r5, r2
 8008d5c:	42bd      	cmp	r5, r7
 8008d5e:	eba5 0406 	sub.w	r4, r5, r6
 8008d62:	d305      	bcc.n	8008d70 <outs+0x22>
 8008d64:	b10f      	cbz	r7, 8008d6a <outs+0x1c>
	return (int)count;
 8008d66:	4620      	mov	r0, r4
 8008d68:	e008      	b.n	8008d7c <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8008d6a:	782b      	ldrb	r3, [r5, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0fa      	beq.n	8008d66 <outs+0x18>
		int rc = out((int)*sp++, ctx);
 8008d70:	f815 0b01 	ldrb.w	r0, [r5], #1
 8008d74:	4649      	mov	r1, r9
 8008d76:	47c0      	blx	r8
		if (rc < 0) {
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	daef      	bge.n	8008d5c <outs+0xe>
}
 8008d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008d80 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8008d80:	4770      	bx	lr

08008d82 <st_stm32_common_config>:
	/* Enable the SWO pin */
	DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN;
#endif

	return 0;
}
 8008d82:	2000      	movs	r0, #0
 8008d84:	4770      	bx	lr

08008d86 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 8008d86:	2300      	movs	r3, #0
	list->head = NULL;
 8008d88:	e9c0 3300 	strd	r3, r3, [r0]
}
 8008d8c:	4770      	bx	lr

08008d8e <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 8008d8e:	6803      	ldr	r3, [r0, #0]
 8008d90:	b923      	cbnz	r3, 8008d9c <log_list_add_tail+0xe>
		list->head = msg;
 8008d92:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
 8008d94:	2300      	movs	r3, #0
	list->tail = msg;
 8008d96:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 8008d98:	600b      	str	r3, [r1, #0]
}
 8008d9a:	4770      	bx	lr
		list->tail->next = msg;
 8008d9c:	6843      	ldr	r3, [r0, #4]
 8008d9e:	6019      	str	r1, [r3, #0]
 8008da0:	e7f8      	b.n	8008d94 <log_list_add_tail+0x6>

08008da2 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 8008da2:	6800      	ldr	r0, [r0, #0]
 8008da4:	4770      	bx	lr

08008da6 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
 8008da6:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
 8008da8:	b10b      	cbz	r3, 8008dae <log_list_head_get+0x8>
		list->head = list->head->next;
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	4770      	bx	lr

08008db2 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
 8008db2:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8008db4:	f7fc fb96 	bl	80054e4 <log_msg_chunk_alloc>

	if (msg != NULL) {
 8008db8:	b118      	cbz	r0, 8008dc2 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
 8008dc2:	bd08      	pop	{r3, pc}

08008dc4 <default_lf_get_timestamp>:
{
 8008dc4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8008dc6:	f000 ff13 	bl	8009bf0 <z_impl_k_uptime_ticks>
			return t / (from_hz / to_hz);
 8008dca:	220a      	movs	r2, #10
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f7f7 fe19 	bl	8000a04 <__aeabi_uldivmod>
}
 8008dd2:	bd08      	pop	{r3, pc}

08008dd4 <dummy_timestamp>:
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	4770      	bx	lr

08008dd8 <log_0>:
{
 8008dd8:	b513      	push	{r0, r1, r4, lr}
 8008dda:	4604      	mov	r4, r0
 8008ddc:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
 8008dde:	f7ff ffe8 	bl	8008db2 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8008de2:	b130      	cbz	r0, 8008df2 <log_0+0x1a>
		msg_finalize(msg, src_level);
 8008de4:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
 8008de6:	6104      	str	r4, [r0, #16]
}
 8008de8:	b002      	add	sp, #8
 8008dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
 8008dee:	f7fc bab7 	b.w	8005360 <msg_finalize>
}
 8008df2:	b002      	add	sp, #8
 8008df4:	bd10      	pop	{r4, pc}

08008df6 <log_1>:
{
 8008df6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008df8:	460c      	mov	r4, r1
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8008e00:	f7ff ffd7 	bl	8008db2 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8008e04:	b160      	cbz	r0, 8008e20 <log_1+0x2a>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
 8008e06:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
 8008e08:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
 8008e0a:	2501      	movs	r5, #1
 8008e0c:	f365 1207 	bfi	r2, r5, #4, #4
 8008e10:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
 8008e12:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
 8008e14:	6144      	str	r4, [r0, #20]
}
 8008e16:	b003      	add	sp, #12
 8008e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
 8008e1c:	f7fc baa0 	b.w	8005360 <msg_finalize>
}
 8008e20:	b003      	add	sp, #12
 8008e22:	bd30      	pop	{r4, r5, pc}

08008e24 <log_2>:
{
 8008e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e26:	460e      	mov	r6, r1
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	4615      	mov	r5, r2
 8008e2e:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8008e30:	f7ff ffbf 	bl	8008db2 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8008e34:	b168      	cbz	r0, 8008e52 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
 8008e36:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 8008e38:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	f362 1307 	bfi	r3, r2, #4, #4
 8008e40:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 8008e42:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
 8008e44:	e9c0 6505 	strd	r6, r5, [r0, #20]
}
 8008e48:	b003      	add	sp, #12
 8008e4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
 8008e4e:	f7fc ba87 	b.w	8005360 <msg_finalize>
}
 8008e52:	b003      	add	sp, #12
 8008e54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e56 <log_3>:
{
 8008e56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008e5a:	460f      	mov	r7, r1
 8008e5c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8008e60:	9101      	str	r1, [sp, #4]
 8008e62:	4680      	mov	r8, r0
 8008e64:	4616      	mov	r6, r2
 8008e66:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8008e68:	f7ff ffa3 	bl	8008db2 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8008e6c:	b178      	cbz	r0, 8008e8e <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
 8008e6e:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
 8008e70:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
 8008e74:	2203      	movs	r2, #3
 8008e76:	f362 1307 	bfi	r3, r2, #4, #4
 8008e7a:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 8008e7c:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
 8008e7e:	61c5      	str	r5, [r0, #28]
		msg->payload.single.args[1] = arg2;
 8008e80:	e9c0 7605 	strd	r7, r6, [r0, #20]
}
 8008e84:	b002      	add	sp, #8
 8008e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
 8008e8a:	f7fc ba69 	b.w	8005360 <msg_finalize>
}
 8008e8e:	b002      	add	sp, #8
 8008e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e94 <log_n>:
{
 8008e94:	b510      	push	{r4, lr}
 8008e96:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
 8008e98:	f000 f8a1 	bl	8008fde <log_msg_create_n>
		if (msg == NULL) {
 8008e9c:	b120      	cbz	r0, 8008ea8 <log_n+0x14>
		msg_finalize(msg, src_level);
 8008e9e:	4621      	mov	r1, r4
}
 8008ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
 8008ea4:	f7fc ba5c 	b.w	8005360 <msg_finalize>
}
 8008ea8:	bd10      	pop	{r4, pc}

08008eaa <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 8008eaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eae:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
 8008eb0:	8903      	ldrh	r3, [r0, #8]
{
 8008eb2:	f89d 7020 	ldrb.w	r7, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 8008eb6:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 8008eba:	42a3      	cmp	r3, r4
{
 8008ebc:	460e      	mov	r6, r1
	if (offset >= available_len) {
 8008ebe:	d803      	bhi.n	8008ec8 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 8008ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
 8008ec8:	6811      	ldr	r1, [r2, #0]
 8008eca:	4421      	add	r1, r4
 8008ecc:	4299      	cmp	r1, r3
		*length = available_len - offset;
 8008ece:	bf84      	itt	hi
 8008ed0:	1b19      	subhi	r1, r3, r4
 8008ed2:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8008ed4:	2b0c      	cmp	r3, #12
	req_len = *length;
 8008ed6:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8008eda:	d92b      	bls.n	8008f34 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
 8008edc:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
 8008ede:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
 8008ee2:	d82e      	bhi.n	8008f42 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
 8008ee4:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 8008ee6:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8008ee8:	454b      	cmp	r3, r9
 8008eea:	bf28      	it	cs
 8008eec:	464b      	movcs	r3, r9
 8008eee:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
 8008ef0:	4420      	add	r0, r4
 8008ef2:	461a      	mov	r2, r3
		if (put_op) {
 8008ef4:	b317      	cbz	r7, 8008f3c <log_msg_hexdump_data_op+0x92>
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	f000 fed3 	bl	8009ca2 <memcpy>
		req_len -= cpy_len;
 8008efc:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
 8008f00:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
 8008f02:	f1b9 0f00 	cmp.w	r9, #0
 8008f06:	d0dd      	beq.n	8008ec4 <log_msg_hexdump_data_op+0x1a>
 8008f08:	f1b8 0f00 	cmp.w	r8, #0
 8008f0c:	d0da      	beq.n	8008ec4 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 8008f0e:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8008f12:	454d      	cmp	r5, r9
 8008f14:	bf28      	it	cs
 8008f16:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
 8008f18:	1d20      	adds	r0, r4, #4
 8008f1a:	4440      	add	r0, r8
 8008f1c:	462a      	mov	r2, r5
		if (put_op) {
 8008f1e:	b1bf      	cbz	r7, 8008f50 <log_msg_hexdump_data_op+0xa6>
 8008f20:	4631      	mov	r1, r6
 8008f22:	f000 febe 	bl	8009ca2 <memcpy>
		req_len -= cpy_len;
 8008f26:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
 8008f2a:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
 8008f2e:	442e      	add	r6, r5
		offset = 0;
 8008f30:	2400      	movs	r4, #0
 8008f32:	e7e6      	b.n	8008f02 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
 8008f34:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
 8008f36:	f04f 0800 	mov.w	r8, #0
 8008f3a:	e7d5      	b.n	8008ee8 <log_msg_hexdump_data_op+0x3e>
 8008f3c:	4601      	mov	r1, r0
 8008f3e:	4630      	mov	r0, r6
 8008f40:	e7da      	b.n	8008ef8 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 8008f42:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
 8008f44:	2c1b      	cmp	r4, #27
 8008f46:	d9dc      	bls.n	8008f02 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
 8008f48:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
 8008f4c:	3c1c      	subs	r4, #28
 8008f4e:	e7f9      	b.n	8008f44 <log_msg_hexdump_data_op+0x9a>
 8008f50:	4601      	mov	r1, r0
 8008f52:	4630      	mov	r0, r6
 8008f54:	e7e5      	b.n	8008f22 <log_msg_hexdump_data_op+0x78>

08008f56 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8008f56:	3004      	adds	r0, #4
 8008f58:	f3bf 8f5b 	dmb	ish
 8008f5c:	e850 3f00 	ldrex	r3, [r0]
 8008f60:	3301      	adds	r3, #1
 8008f62:	e840 3200 	strex	r2, r3, [r0]
 8008f66:	2a00      	cmp	r2, #0
 8008f68:	d1f8      	bne.n	8008f5c <log_msg_get+0x6>
 8008f6a:	f3bf 8f5b 	dmb	ish
}
 8008f6e:	4770      	bx	lr

08008f70 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 8008f70:	7a40      	ldrb	r0, [r0, #9]
}
 8008f72:	0900      	lsrs	r0, r0, #4
 8008f74:	4770      	bx	lr

08008f76 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
 8008f76:	7a43      	ldrb	r3, [r0, #9]
 8008f78:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 8008f7c:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8008f80:	d216      	bcs.n	8008fb0 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8008f82:	2a03      	cmp	r2, #3
 8008f84:	d803      	bhi.n	8008f8e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
 8008f86:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008f8a:	6940      	ldr	r0, [r0, #20]
 8008f8c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 8008f8e:	2901      	cmp	r1, #1
 8008f90:	d803      	bhi.n	8008f9a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
 8008f92:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008f96:	6980      	ldr	r0, [r0, #24]
 8008f98:	4770      	bx	lr
	cont = msg->payload.ext.next;
 8008f9a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 8008f9c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
 8008f9e:	2906      	cmp	r1, #6
 8008fa0:	d803      	bhi.n	8008faa <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
 8008fa2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008fa6:	6848      	ldr	r0, [r1, #4]
 8008fa8:	4770      	bx	lr
		cont = cont->next;
 8008faa:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
 8008fac:	3907      	subs	r1, #7
		cont = cont->next;
 8008fae:	e7f6      	b.n	8008f9e <log_msg_arg_get+0x28>
		return 0;
 8008fb0:	2000      	movs	r0, #0
}
 8008fb2:	4770      	bx	lr

08008fb4 <log_msg_put>:
{
 8008fb4:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8008fb6:	1d02      	adds	r2, r0, #4
 8008fb8:	f3bf 8f5b 	dmb	ish
 8008fbc:	e852 1f00 	ldrex	r1, [r2]
 8008fc0:	3901      	subs	r1, #1
 8008fc2:	e842 1c00 	strex	ip, r1, [r2]
 8008fc6:	f1bc 0f00 	cmp.w	ip, #0
 8008fca:	d1f7      	bne.n	8008fbc <log_msg_put+0x8>
 8008fcc:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	b90b      	cbnz	r3, 8008fd8 <log_msg_put+0x24>
		msg_free(msg);
 8008fd4:	f7fc ba9a 	b.w	800550c <msg_free>
}
 8008fd8:	4770      	bx	lr

08008fda <log_msg_str_get>:
}
 8008fda:	6900      	ldr	r0, [r0, #16]
 8008fdc:	4770      	bx	lr

08008fde <log_msg_create_n>:
{
 8008fde:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe2:	4680      	mov	r8, r0
 8008fe4:	460f      	mov	r7, r1
 8008fe6:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8008fe8:	f7fc fa7c 	bl	80054e4 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8008fec:	4604      	mov	r4, r0
 8008fee:	b358      	cbz	r0, 8009048 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
 8008ff0:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
 8008ff2:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8008ff6:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
 8008ff8:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8008ffa:	f8a0 a008 	strh.w	sl, [r0, #8]
 8008ffe:	d90c      	bls.n	800901a <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
 8009000:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
 8009002:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
 8009006:	f043 0302 	orr.w	r3, r3, #2
 800900a:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
 800900c:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
 8009010:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
 8009014:	f1b9 0f00 	cmp.w	r9, #0
 8009018:	dc0e      	bgt.n	8009038 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
 800901a:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
 800901c:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
 8009020:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8009024:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
 8009026:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8009028:	d819      	bhi.n	800905e <log_msg_create_n+0x80>
 800902a:	00aa      	lsls	r2, r5, #2
 800902c:	4639      	mov	r1, r7
 800902e:	f104 0014 	add.w	r0, r4, #20
 8009032:	f000 fe36 	bl	8009ca2 <memcpy>
	while (nargs != 0U) {
 8009036:	e007      	b.n	8009048 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
 8009038:	f7fc fa54 	bl	80054e4 <log_msg_chunk_alloc>
		if (cont == NULL) {
 800903c:	4606      	mov	r6, r0
 800903e:	b930      	cbnz	r0, 800904e <log_msg_create_n+0x70>
			msg_free(msg);
 8009040:	4620      	mov	r0, r4
 8009042:	f7fc fa63 	bl	800550c <msg_free>
			return NULL;
 8009046:	4634      	mov	r4, r6
}
 8009048:	4620      	mov	r0, r4
 800904a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
 800904e:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
 8009052:	f1a9 0907 	sub.w	r9, r9, #7
 8009056:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
 800905a:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
 800905c:	e7da      	b.n	8009014 <log_msg_create_n+0x36>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	61a3      	str	r3, [r4, #24]
 8009062:	687b      	ldr	r3, [r7, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
 8009064:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8009068:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
 800906a:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
 800906c:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
 800906e:	2d07      	cmp	r5, #7
 8009070:	462e      	mov	r6, r5
 8009072:	bf28      	it	cs
 8009074:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
 8009076:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800907a:	4639      	mov	r1, r7
 800907c:	f108 0004 	add.w	r0, r8, #4
 8009080:	464a      	mov	r2, r9
 8009082:	f000 fe0e 	bl	8009ca2 <memcpy>
	while (nargs != 0U) {
 8009086:	1bad      	subs	r5, r5, r6
		cont = cont->next;
 8009088:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
 800908c:	444f      	add	r7, r9
	while (nargs != 0U) {
 800908e:	d1ee      	bne.n	800906e <log_msg_create_n+0x90>
 8009090:	e7da      	b.n	8009048 <log_msg_create_n+0x6a>

08009092 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 8009092:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 8009094:	2400      	movs	r4, #0
 8009096:	9400      	str	r4, [sp, #0]
 8009098:	f7ff ff07 	bl	8008eaa <log_msg_hexdump_data_op>
}
 800909c:	b002      	add	sp, #8
 800909e:	bd10      	pop	{r4, pc}

080090a0 <buffer_write>:
{
 80090a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a2:	4606      	mov	r6, r0
 80090a4:	460d      	mov	r5, r1
 80090a6:	4614      	mov	r4, r2
 80090a8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 80090aa:	4621      	mov	r1, r4
 80090ac:	4628      	mov	r0, r5
 80090ae:	463a      	mov	r2, r7
 80090b0:	47b0      	blx	r6
	} while (len != 0);
 80090b2:	1a24      	subs	r4, r4, r0
		buf += processed;
 80090b4:	4405      	add	r5, r0
	} while (len != 0);
 80090b6:	d1f8      	bne.n	80090aa <buffer_write+0xa>
}
 80090b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090ba <std_print>:
{
 80090ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090be:	b08e      	sub	sp, #56	; 0x38
 80090c0:	af0e      	add	r7, sp, #56	; 0x38
 80090c2:	4680      	mov	r8, r0
 80090c4:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
 80090c6:	f7ff ff88 	bl	8008fda <log_msg_str_get>
 80090ca:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 80090cc:	4640      	mov	r0, r8
 80090ce:	f7ff ff4f 	bl	8008f70 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 80090d2:	0083      	lsls	r3, r0, #2
 80090d4:	3307      	adds	r3, #7
 80090d6:	f023 0307 	bic.w	r3, r3, #7
 80090da:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
 80090de:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 80090e0:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 80090e2:	f04f 0900 	mov.w	r9, #0
 80090e6:	45d1      	cmp	r9, sl
 80090e8:	d116      	bne.n	8009118 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
 80090ea:	4640      	mov	r0, r8
 80090ec:	f7ff ff40 	bl	8008f70 <log_msg_nargs_get>
 80090f0:	280f      	cmp	r0, #15
 80090f2:	d81e      	bhi.n	8009132 <std_print+0x78>
 80090f4:	e8df f010 	tbh	[pc, r0, lsl #1]
 80090f8:	00200019 	.word	0x00200019
 80090fc:	002d0026 	.word	0x002d0026
 8009100:	00410036 	.word	0x00410036
 8009104:	005d004e 	.word	0x005d004e
 8009108:	0081006e 	.word	0x0081006e
 800910c:	00ad0096 	.word	0x00ad0096
 8009110:	00e100c6 	.word	0x00e100c6
 8009114:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
 8009118:	4649      	mov	r1, r9
 800911a:	4640      	mov	r0, r8
 800911c:	f7ff ff2b 	bl	8008f76 <log_msg_arg_get>
 8009120:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
 8009124:	f109 0901 	add.w	r9, r9, #1
 8009128:	e7dd      	b.n	80090e6 <std_print+0x2c>
		print_formatted(output, str);
 800912a:	4631      	mov	r1, r6
 800912c:	4628      	mov	r0, r5
 800912e:	f7fc fa2b 	bl	8005588 <print_formatted>
}
 8009132:	46bd      	mov	sp, r7
 8009134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
 8009138:	6822      	ldr	r2, [r4, #0]
 800913a:	4631      	mov	r1, r6
 800913c:	4628      	mov	r0, r5
 800913e:	f7fc fa23 	bl	8005588 <print_formatted>
		break;
 8009142:	e7f6      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
 8009144:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009148:	4631      	mov	r1, r6
 800914a:	4628      	mov	r0, r5
 800914c:	f7fc fa1c 	bl	8005588 <print_formatted>
		break;
 8009150:	e7ef      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
 8009152:	68a3      	ldr	r3, [r4, #8]
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	e9d4 2300 	ldrd	r2, r3, [r4]
 800915a:	4631      	mov	r1, r6
 800915c:	4628      	mov	r0, r5
 800915e:	f7fc fa13 	bl	8005588 <print_formatted>
		break;
 8009162:	e7e6      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009164:	68e3      	ldr	r3, [r4, #12]
 8009166:	9301      	str	r3, [sp, #4]
 8009168:	68a3      	ldr	r3, [r4, #8]
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009170:	4631      	mov	r1, r6
 8009172:	4628      	mov	r0, r5
 8009174:	f7fc fa08 	bl	8005588 <print_formatted>
		break;
 8009178:	e7db      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 800917a:	6923      	ldr	r3, [r4, #16]
 800917c:	9302      	str	r3, [sp, #8]
 800917e:	68e3      	ldr	r3, [r4, #12]
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	68a3      	ldr	r3, [r4, #8]
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	e9d4 2300 	ldrd	r2, r3, [r4]
 800918a:	4631      	mov	r1, r6
 800918c:	4628      	mov	r0, r5
 800918e:	f7fc f9fb 	bl	8005588 <print_formatted>
		break;
 8009192:	e7ce      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009194:	6963      	ldr	r3, [r4, #20]
 8009196:	9303      	str	r3, [sp, #12]
 8009198:	6923      	ldr	r3, [r4, #16]
 800919a:	9302      	str	r3, [sp, #8]
 800919c:	68e3      	ldr	r3, [r4, #12]
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	68a3      	ldr	r3, [r4, #8]
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091a8:	4631      	mov	r1, r6
 80091aa:	4628      	mov	r0, r5
 80091ac:	f7fc f9ec 	bl	8005588 <print_formatted>
		break;
 80091b0:	e7bf      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80091b2:	69a3      	ldr	r3, [r4, #24]
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	6963      	ldr	r3, [r4, #20]
 80091b8:	9303      	str	r3, [sp, #12]
 80091ba:	6923      	ldr	r3, [r4, #16]
 80091bc:	9302      	str	r3, [sp, #8]
 80091be:	68e3      	ldr	r3, [r4, #12]
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	68a3      	ldr	r3, [r4, #8]
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091ca:	4631      	mov	r1, r6
 80091cc:	4628      	mov	r0, r5
 80091ce:	f7fc f9db 	bl	8005588 <print_formatted>
		break;
 80091d2:	e7ae      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80091d4:	69e3      	ldr	r3, [r4, #28]
 80091d6:	9305      	str	r3, [sp, #20]
 80091d8:	69a3      	ldr	r3, [r4, #24]
 80091da:	9304      	str	r3, [sp, #16]
 80091dc:	6963      	ldr	r3, [r4, #20]
 80091de:	9303      	str	r3, [sp, #12]
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	9302      	str	r3, [sp, #8]
 80091e4:	68e3      	ldr	r3, [r4, #12]
 80091e6:	9301      	str	r3, [sp, #4]
 80091e8:	68a3      	ldr	r3, [r4, #8]
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091f0:	4631      	mov	r1, r6
 80091f2:	4628      	mov	r0, r5
 80091f4:	f7fc f9c8 	bl	8005588 <print_formatted>
		break;
 80091f8:	e79b      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80091fa:	6a23      	ldr	r3, [r4, #32]
 80091fc:	9306      	str	r3, [sp, #24]
 80091fe:	69e3      	ldr	r3, [r4, #28]
 8009200:	9305      	str	r3, [sp, #20]
 8009202:	69a3      	ldr	r3, [r4, #24]
 8009204:	9304      	str	r3, [sp, #16]
 8009206:	6963      	ldr	r3, [r4, #20]
 8009208:	9303      	str	r3, [sp, #12]
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	9302      	str	r3, [sp, #8]
 800920e:	68e3      	ldr	r3, [r4, #12]
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	68a3      	ldr	r3, [r4, #8]
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	e9d4 2300 	ldrd	r2, r3, [r4]
 800921a:	4631      	mov	r1, r6
 800921c:	4628      	mov	r0, r5
 800921e:	f7fc f9b3 	bl	8005588 <print_formatted>
		break;
 8009222:	e786      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009226:	9307      	str	r3, [sp, #28]
 8009228:	6a23      	ldr	r3, [r4, #32]
 800922a:	9306      	str	r3, [sp, #24]
 800922c:	69e3      	ldr	r3, [r4, #28]
 800922e:	9305      	str	r3, [sp, #20]
 8009230:	69a3      	ldr	r3, [r4, #24]
 8009232:	9304      	str	r3, [sp, #16]
 8009234:	6963      	ldr	r3, [r4, #20]
 8009236:	9303      	str	r3, [sp, #12]
 8009238:	6923      	ldr	r3, [r4, #16]
 800923a:	9302      	str	r3, [sp, #8]
 800923c:	68e3      	ldr	r3, [r4, #12]
 800923e:	9301      	str	r3, [sp, #4]
 8009240:	68a3      	ldr	r3, [r4, #8]
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009248:	4631      	mov	r1, r6
 800924a:	4628      	mov	r0, r5
 800924c:	f7fc f99c 	bl	8005588 <print_formatted>
		break;
 8009250:	e76f      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009252:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009254:	9308      	str	r3, [sp, #32]
 8009256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009258:	9307      	str	r3, [sp, #28]
 800925a:	6a23      	ldr	r3, [r4, #32]
 800925c:	9306      	str	r3, [sp, #24]
 800925e:	69e3      	ldr	r3, [r4, #28]
 8009260:	9305      	str	r3, [sp, #20]
 8009262:	69a3      	ldr	r3, [r4, #24]
 8009264:	9304      	str	r3, [sp, #16]
 8009266:	6963      	ldr	r3, [r4, #20]
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	6923      	ldr	r3, [r4, #16]
 800926c:	9302      	str	r3, [sp, #8]
 800926e:	68e3      	ldr	r3, [r4, #12]
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	68a3      	ldr	r3, [r4, #8]
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	e9d4 2300 	ldrd	r2, r3, [r4]
 800927a:	4631      	mov	r1, r6
 800927c:	4628      	mov	r0, r5
 800927e:	f7fc f983 	bl	8005588 <print_formatted>
		break;
 8009282:	e756      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009286:	9309      	str	r3, [sp, #36]	; 0x24
 8009288:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800928a:	9308      	str	r3, [sp, #32]
 800928c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800928e:	9307      	str	r3, [sp, #28]
 8009290:	6a23      	ldr	r3, [r4, #32]
 8009292:	9306      	str	r3, [sp, #24]
 8009294:	69e3      	ldr	r3, [r4, #28]
 8009296:	9305      	str	r3, [sp, #20]
 8009298:	69a3      	ldr	r3, [r4, #24]
 800929a:	9304      	str	r3, [sp, #16]
 800929c:	6963      	ldr	r3, [r4, #20]
 800929e:	9303      	str	r3, [sp, #12]
 80092a0:	6923      	ldr	r3, [r4, #16]
 80092a2:	9302      	str	r3, [sp, #8]
 80092a4:	68e3      	ldr	r3, [r4, #12]
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	68a3      	ldr	r3, [r4, #8]
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	e9d4 2300 	ldrd	r2, r3, [r4]
 80092b0:	4631      	mov	r1, r6
 80092b2:	4628      	mov	r0, r5
 80092b4:	f7fc f968 	bl	8005588 <print_formatted>
		break;
 80092b8:	e73b      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80092ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80092bc:	930a      	str	r3, [sp, #40]	; 0x28
 80092be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80092c0:	9309      	str	r3, [sp, #36]	; 0x24
 80092c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80092c4:	9308      	str	r3, [sp, #32]
 80092c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092c8:	9307      	str	r3, [sp, #28]
 80092ca:	6a23      	ldr	r3, [r4, #32]
 80092cc:	9306      	str	r3, [sp, #24]
 80092ce:	69e3      	ldr	r3, [r4, #28]
 80092d0:	9305      	str	r3, [sp, #20]
 80092d2:	69a3      	ldr	r3, [r4, #24]
 80092d4:	9304      	str	r3, [sp, #16]
 80092d6:	6963      	ldr	r3, [r4, #20]
 80092d8:	9303      	str	r3, [sp, #12]
 80092da:	6923      	ldr	r3, [r4, #16]
 80092dc:	9302      	str	r3, [sp, #8]
 80092de:	68e3      	ldr	r3, [r4, #12]
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	68a3      	ldr	r3, [r4, #8]
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80092ea:	4631      	mov	r1, r6
 80092ec:	4628      	mov	r0, r5
 80092ee:	f7fc f94b 	bl	8005588 <print_formatted>
		break;
 80092f2:	e71e      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80092f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80092f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80092fa:	930a      	str	r3, [sp, #40]	; 0x28
 80092fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80092fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009300:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009302:	9308      	str	r3, [sp, #32]
 8009304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009306:	9307      	str	r3, [sp, #28]
 8009308:	6a23      	ldr	r3, [r4, #32]
 800930a:	9306      	str	r3, [sp, #24]
 800930c:	69e3      	ldr	r3, [r4, #28]
 800930e:	9305      	str	r3, [sp, #20]
 8009310:	69a3      	ldr	r3, [r4, #24]
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	6963      	ldr	r3, [r4, #20]
 8009316:	9303      	str	r3, [sp, #12]
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	9302      	str	r3, [sp, #8]
 800931c:	68e3      	ldr	r3, [r4, #12]
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	68a3      	ldr	r3, [r4, #8]
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009328:	4631      	mov	r1, r6
 800932a:	4628      	mov	r0, r5
 800932c:	f7fc f92c 	bl	8005588 <print_formatted>
		break;
 8009330:	e6ff      	b.n	8009132 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8009332:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009334:	930c      	str	r3, [sp, #48]	; 0x30
 8009336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009338:	930b      	str	r3, [sp, #44]	; 0x2c
 800933a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800933c:	930a      	str	r3, [sp, #40]	; 0x28
 800933e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009340:	9309      	str	r3, [sp, #36]	; 0x24
 8009342:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009344:	9308      	str	r3, [sp, #32]
 8009346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009348:	9307      	str	r3, [sp, #28]
 800934a:	6a23      	ldr	r3, [r4, #32]
 800934c:	9306      	str	r3, [sp, #24]
 800934e:	69e3      	ldr	r3, [r4, #28]
 8009350:	9305      	str	r3, [sp, #20]
 8009352:	69a3      	ldr	r3, [r4, #24]
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	6963      	ldr	r3, [r4, #20]
 8009358:	9303      	str	r3, [sp, #12]
 800935a:	6923      	ldr	r3, [r4, #16]
 800935c:	9302      	str	r3, [sp, #8]
 800935e:	68e3      	ldr	r3, [r4, #12]
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	68a3      	ldr	r3, [r4, #8]
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	e9d4 2300 	ldrd	r2, r3, [r4]
 800936a:	4631      	mov	r1, r6
 800936c:	4628      	mov	r0, r5
 800936e:	f7fc f90b 	bl	8005588 <print_formatted>
}
 8009372:	e6de      	b.n	8009132 <std_print+0x78>

08009374 <log_output_flush>:
		     output->control_block->offset,
 8009374:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 8009376:	6881      	ldr	r1, [r0, #8]
{
 8009378:	b510      	push	{r4, lr}
 800937a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 800937c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009380:	6800      	ldr	r0, [r0, #0]
 8009382:	f7ff fe8d 	bl	80090a0 <buffer_write>
	output->control_block->offset = 0;
 8009386:	6863      	ldr	r3, [r4, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
}
 800938c:	bd10      	pop	{r4, pc}

0800938e <out_func>:
{
 800938e:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 8009390:	684b      	ldr	r3, [r1, #4]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	68cb      	ldr	r3, [r1, #12]
 8009396:	429a      	cmp	r2, r3
{
 8009398:	4605      	mov	r5, r0
 800939a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800939c:	d102      	bne.n	80093a4 <out_func+0x16>
		log_output_flush(out_ctx);
 800939e:	4608      	mov	r0, r1
 80093a0:	f7ff ffe8 	bl	8009374 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80093a4:	6863      	ldr	r3, [r4, #4]
 80093a6:	f3bf 8f5b 	dmb	ish
 80093aa:	e853 2f00 	ldrex	r2, [r3]
 80093ae:	1c51      	adds	r1, r2, #1
 80093b0:	e843 1000 	strex	r0, r1, [r3]
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d1f8      	bne.n	80093aa <out_func+0x1c>
 80093b8:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 80093bc:	68a3      	ldr	r3, [r4, #8]
 80093be:	549d      	strb	r5, [r3, r2]
}
 80093c0:	2000      	movs	r0, #0
 80093c2:	bd38      	pop	{r3, r4, r5, pc}

080093c4 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 80093c4:	2200      	movs	r2, #0
{
 80093c6:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 80093c8:	4611      	mov	r1, r2
 80093ca:	2006      	movs	r0, #6
 80093cc:	f7fc fe76 	bl	80060bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80093d0:	2200      	movs	r2, #0
 80093d2:	4611      	mov	r1, r2
 80093d4:	2007      	movs	r0, #7
 80093d6:	f7fc fe71 	bl	80060bc <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 80093da:	2200      	movs	r2, #0
 80093dc:	4611      	mov	r1, r2
 80093de:	2008      	movs	r0, #8
 80093e0:	f7fc fe6c 	bl	80060bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80093e4:	2200      	movs	r2, #0
 80093e6:	4611      	mov	r1, r2
 80093e8:	2009      	movs	r0, #9
 80093ea:	f7fc fe67 	bl	80060bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80093ee:	2200      	movs	r2, #0
 80093f0:	4611      	mov	r1, r2
 80093f2:	200a      	movs	r0, #10
 80093f4:	f7fc fe62 	bl	80060bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 80093f8:	2200      	movs	r2, #0
 80093fa:	4611      	mov	r1, r2
 80093fc:	2017      	movs	r0, #23
 80093fe:	f7fc fe5d 	bl	80060bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8009402:	2200      	movs	r2, #0
 8009404:	4611      	mov	r1, r2
 8009406:	2028      	movs	r0, #40	; 0x28
 8009408:	f7fc fe58 	bl	80060bc <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 800940c:	2200      	movs	r2, #0
 800940e:	4611      	mov	r1, r2
 8009410:	2001      	movs	r0, #1
 8009412:	f7fc fe53 	bl	80060bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8009416:	2200      	movs	r2, #0
 8009418:	4611      	mov	r1, r2
 800941a:	202a      	movs	r0, #42	; 0x2a
 800941c:	f7fc fe4e 	bl	80060bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8009420:	2200      	movs	r2, #0
 8009422:	4611      	mov	r1, r2
 8009424:	2002      	movs	r0, #2
 8009426:	f7fc fe49 	bl	80060bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 800942a:	2200      	movs	r2, #0
 800942c:	4611      	mov	r1, r2
 800942e:	2003      	movs	r0, #3
 8009430:	f7fc fe44 	bl	80060bc <z_arm_irq_priority_set>
}
 8009434:	2000      	movs	r0, #0
 8009436:	bd08      	pop	{r3, pc}

08009438 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 8009438:	6902      	ldr	r2, [r0, #16]
 800943a:	2117      	movs	r1, #23
 800943c:	2016      	movs	r0, #22
 800943e:	f7fc bb17 	b.w	8005a70 <__stm32_exti_isr.isra.0>

08009442 <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 8009442:	6902      	ldr	r2, [r0, #16]
 8009444:	2116      	movs	r1, #22
 8009446:	2015      	movs	r0, #21
 8009448:	f7fc bb12 	b.w	8005a70 <__stm32_exti_isr.isra.0>

0800944c <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 800944c:	6902      	ldr	r2, [r0, #16]
 800944e:	2113      	movs	r1, #19
 8009450:	2012      	movs	r0, #18
 8009452:	f7fc bb0d 	b.w	8005a70 <__stm32_exti_isr.isra.0>

08009456 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 8009456:	6902      	ldr	r2, [r0, #16]
 8009458:	2111      	movs	r1, #17
 800945a:	2010      	movs	r0, #16
 800945c:	f7fc bb08 	b.w	8005a70 <__stm32_exti_isr.isra.0>

08009460 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8009460:	6902      	ldr	r2, [r0, #16]
 8009462:	2110      	movs	r1, #16
 8009464:	200a      	movs	r0, #10
 8009466:	f7fc bb03 	b.w	8005a70 <__stm32_exti_isr.isra.0>

0800946a <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 800946a:	6902      	ldr	r2, [r0, #16]
 800946c:	210a      	movs	r1, #10
 800946e:	2005      	movs	r0, #5
 8009470:	f7fc bafe 	b.w	8005a70 <__stm32_exti_isr.isra.0>

08009474 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8009474:	6902      	ldr	r2, [r0, #16]
 8009476:	2105      	movs	r1, #5
 8009478:	2004      	movs	r0, #4
 800947a:	f7fc baf9 	b.w	8005a70 <__stm32_exti_isr.isra.0>

0800947e <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 800947e:	6902      	ldr	r2, [r0, #16]
 8009480:	2104      	movs	r1, #4
 8009482:	2003      	movs	r0, #3
 8009484:	f7fc baf4 	b.w	8005a70 <__stm32_exti_isr.isra.0>

08009488 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8009488:	6902      	ldr	r2, [r0, #16]
 800948a:	2103      	movs	r1, #3
 800948c:	2002      	movs	r0, #2
 800948e:	f7fc baef 	b.w	8005a70 <__stm32_exti_isr.isra.0>

08009492 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8009492:	6902      	ldr	r2, [r0, #16]
 8009494:	2102      	movs	r1, #2
 8009496:	2001      	movs	r0, #1
 8009498:	f7fc baea 	b.w	8005a70 <__stm32_exti_isr.isra.0>

0800949c <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 800949c:	6902      	ldr	r2, [r0, #16]
 800949e:	2101      	movs	r1, #1
 80094a0:	2000      	movs	r0, #0
 80094a2:	f7fc bae5 	b.w	8005a70 <__stm32_exti_isr.isra.0>

080094a6 <config_pll_init>:
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 80094a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80094aa:	2208      	movs	r2, #8
 80094ac:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(STM32_PLL_P_DIVISOR);
 80094b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094b4:	6083      	str	r3, [r0, #8]
}
 80094b6:	4770      	bx	lr

080094b8 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 80094b8:	4770      	bx	lr

080094ba <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 80094ba:	2100      	movs	r1, #0
 80094bc:	2001      	movs	r0, #1
 80094be:	f7fc bed1 	b.w	8006264 <z_arm_fatal_error>

080094c2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 80094c2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 80094c4:	6800      	ldr	r0, [r0, #0]
 80094c6:	f7fc becd 	b.w	8006264 <z_arm_fatal_error>

080094ca <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 80094ca:	b508      	push	{r3, lr}
	handler();
 80094cc:	f7fc ff3e 	bl	800634c <z_SysNmiOnReset>
	z_arm_int_exit();
}
 80094d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80094d4:	f7fd b9be 	b.w	8006854 <z_arm_exc_exit>

080094d8 <_stdout_hook_default>:
}
 80094d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094dc:	4770      	bx	lr

080094de <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 80094de:	f7fe b93b 	b.w	8007758 <z_impl_z_errno>

080094e2 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80094e2:	6843      	ldr	r3, [r0, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80094e6:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 80094e8:	600b      	str	r3, [r1, #0]
}
 80094ea:	2000      	movs	r0, #0
 80094ec:	4770      	bx	lr

080094ee <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80094ee:	6843      	ldr	r3, [r0, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80094f2:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 80094f4:	4042      	eors	r2, r0
 80094f6:	400a      	ands	r2, r1
 80094f8:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 80094fa:	615a      	str	r2, [r3, #20]
}
 80094fc:	2000      	movs	r0, #0
 80094fe:	4770      	bx	lr

08009500 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009500:	6843      	ldr	r3, [r0, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
}
 8009504:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8009506:	6199      	str	r1, [r3, #24]
}
 8009508:	4770      	bx	lr

0800950a <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800950a:	6843      	ldr	r3, [r0, #4]
 800950c:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800950e:	0409      	lsls	r1, r1, #16
 8009510:	6199      	str	r1, [r3, #24]
}
 8009512:	2000      	movs	r0, #0
 8009514:	4770      	bx	lr

08009516 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009516:	6843      	ldr	r3, [r0, #4]
 8009518:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800951a:	6953      	ldr	r3, [r2, #20]
 800951c:	4059      	eors	r1, r3
 800951e:	6151      	str	r1, [r2, #20]
}
 8009520:	2000      	movs	r0, #0
 8009522:	4770      	bx	lr

08009524 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->data;
 8009524:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8009526:	6898      	ldr	r0, [r3, #8]
{
 8009528:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 800952a:	b158      	cbz	r0, 8009544 <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800952c:	2400      	movs	r4, #0
 800952e:	4281      	cmp	r1, r0
 8009530:	d112      	bne.n	8009558 <gpio_stm32_manage_callback+0x34>
	return node->next;
 8009532:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8009534:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8009536:	b954      	cbnz	r4, 800954e <gpio_stm32_manage_callback+0x2a>
 8009538:	428d      	cmp	r5, r1
	list->head = node;
 800953a:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 800953c:	d100      	bne.n	8009540 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 800953e:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8009540:	2000      	movs	r0, #0
 8009542:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8009544:	b96a      	cbnz	r2, 8009562 <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8009546:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 8009548:	bd30      	pop	{r4, r5, pc}
 800954a:	4628      	mov	r0, r5
 800954c:	e7ef      	b.n	800952e <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 800954e:	428d      	cmp	r5, r1
	parent->next = child;
 8009550:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8009552:	bf08      	it	eq
 8009554:	60dc      	streq	r4, [r3, #12]
}
 8009556:	e7f3      	b.n	8009540 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8009558:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800955a:	4604      	mov	r4, r0
 800955c:	2d00      	cmp	r5, #0
 800955e:	d1f4      	bne.n	800954a <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8009560:	b13a      	cbz	r2, 8009572 <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 8009562:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8009564:	689a      	ldr	r2, [r3, #8]
 8009566:	600a      	str	r2, [r1, #0]
	list->head = node;
 8009568:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 800956a:	2800      	cmp	r0, #0
 800956c:	d1eb      	bne.n	8009546 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 800956e:	60d9      	str	r1, [r3, #12]
}
 8009570:	e7ea      	b.n	8009548 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8009572:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8009576:	e7e7      	b.n	8009548 <gpio_stm32_manage_callback+0x24>

08009578 <gpio_stm32_isr>:
{
 8009578:	460b      	mov	r3, r1
 800957a:	6889      	ldr	r1, [r1, #8]
 800957c:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800957e:	b171      	cbz	r1, 800959e <gpio_stm32_isr+0x26>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8009580:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8009582:	680c      	ldr	r4, [r1, #0]
 8009584:	2301      	movs	r3, #1
 8009586:	fa03 f500 	lsl.w	r5, r3, r0
		if (cb->pin_mask & pins) {
 800958a:	688a      	ldr	r2, [r1, #8]
 800958c:	402a      	ands	r2, r5
 800958e:	d002      	beq.n	8009596 <gpio_stm32_isr+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8009590:	684b      	ldr	r3, [r1, #4]
 8009592:	4630      	mov	r0, r6
 8009594:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8009596:	b114      	cbz	r4, 800959e <gpio_stm32_isr+0x26>
 8009598:	4621      	mov	r1, r4
 800959a:	6824      	ldr	r4, [r4, #0]
 800959c:	e7f5      	b.n	800958a <gpio_stm32_isr+0x12>
}
 800959e:	bd70      	pop	{r4, r5, r6, pc}

080095a0 <gpio_stm32_configure>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80095a0:	6840      	ldr	r0, [r0, #4]
{
 80095a2:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80095a4:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 80095a6:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80095a8:	6867      	ldr	r7, [r4, #4]
 80095aa:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 80095ac:	f3c2 1680 	ubfx	r6, r2, #6, #1
 80095b0:	ea27 0700 	bic.w	r7, r7, r0
 80095b4:	408e      	lsls	r6, r1
 80095b6:	433e      	orrs	r6, r7
 80095b8:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ba:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 80095be:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80095c2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80095c6:	f04f 0e03 	mov.w	lr, #3
 80095ca:	007f      	lsls	r7, r7, #1
 80095cc:	fa0e f707 	lsl.w	r7, lr, r7
 80095d0:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d4:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 80095d8:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 80095dc:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 80095e0:	007f      	lsls	r7, r7, #1
 80095e2:	40be      	lsls	r6, r7
 80095e4:	ea46 060c 	orr.w	r6, r6, ip
 80095e8:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ea:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 80095ee:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80095f2:	68e7      	ldr	r7, [r4, #12]
 80095f4:	0076      	lsls	r6, r6, #1
 80095f6:	fa0e f606 	lsl.w	r6, lr, r6
 80095fa:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095fe:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8009602:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8009606:	f002 0530 	and.w	r5, r2, #48	; 0x30
 800960a:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800960c:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8009610:	40b2      	lsls	r2, r6
 8009612:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8009614:	2d20      	cmp	r5, #32
 8009616:	60e2      	str	r2, [r4, #12]
 8009618:	d115      	bne.n	8009646 <gpio_stm32_configure+0xa6>
		if (pin < 8) {
 800961a:	2907      	cmp	r1, #7
 800961c:	dc2c      	bgt.n	8009678 <gpio_stm32_configure+0xd8>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800961e:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009622:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8009624:	b332      	cbz	r2, 8009674 <gpio_stm32_configure+0xd4>
  return __builtin_clz(value);
 8009626:	fab2 f282 	clz	r2, r2
 800962a:	0092      	lsls	r2, r2, #2
 800962c:	260f      	movs	r6, #15
 800962e:	fa06 f202 	lsl.w	r2, r6, r2
 8009632:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009636:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 800963a:	fab2 f282 	clz	r2, r2
 800963e:	0092      	lsls	r2, r2, #2
 8009640:	4093      	lsls	r3, r2
 8009642:	430b      	orrs	r3, r1
 8009644:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009646:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800964a:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800964e:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009650:	fa90 f0a0 	rbit	r0, r0
 8009654:	2103      	movs	r1, #3
 8009656:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 8009658:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800965c:	092d      	lsrs	r5, r5, #4
 800965e:	fa01 f303 	lsl.w	r3, r1, r3
 8009662:	0040      	lsls	r0, r0, #1
 8009664:	ea22 0303 	bic.w	r3, r2, r3
 8009668:	fa05 f000 	lsl.w	r0, r5, r0
 800966c:	4318      	orrs	r0, r3
 800966e:	6020      	str	r0, [r4, #0]
}
 8009670:	2000      	movs	r0, #0
 8009672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8009674:	462a      	mov	r2, r5
 8009676:	e7d8      	b.n	800962a <gpio_stm32_configure+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009678:	0a02      	lsrs	r2, r0, #8
 800967a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800967c:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8009680:	b181      	cbz	r1, 80096a4 <gpio_stm32_configure+0x104>
  return __builtin_clz(value);
 8009682:	fab1 f181 	clz	r1, r1
 8009686:	0089      	lsls	r1, r1, #2
 8009688:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800968a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800968e:	fab2 f282 	clz	r2, r2
 8009692:	fa07 f101 	lsl.w	r1, r7, r1
 8009696:	0092      	lsls	r2, r2, #2
 8009698:	ea26 0101 	bic.w	r1, r6, r1
 800969c:	4093      	lsls	r3, r2
 800969e:	430b      	orrs	r3, r1
 80096a0:	6263      	str	r3, [r4, #36]	; 0x24
}
 80096a2:	e7d0      	b.n	8009646 <gpio_stm32_configure+0xa6>
    return 32U;
 80096a4:	4629      	mov	r1, r5
 80096a6:	e7ee      	b.n	8009686 <gpio_stm32_configure+0xe6>

080096a8 <gpio_stm32_config>:
	if ((flags & GPIO_OUTPUT) != 0) {
 80096a8:	0593      	lsls	r3, r2, #22
{
 80096aa:	b570      	push	{r4, r5, r6, lr}
 80096ac:	4605      	mov	r5, r0
 80096ae:	460e      	mov	r6, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 80096b0:	d519      	bpl.n	80096e6 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80096b2:	0794      	lsls	r4, r2, #30
 80096b4:	d510      	bpl.n	80096d8 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80096b6:	0750      	lsls	r0, r2, #29
 80096b8:	d531      	bpl.n	800971e <gpio_stm32_config+0x76>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80096ba:	2450      	movs	r4, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 80096bc:	06d1      	lsls	r1, r2, #27
 80096be:	d50d      	bpl.n	80096dc <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80096c0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80096c4:	0513      	lsls	r3, r2, #20
 80096c6:	d41f      	bmi.n	8009708 <gpio_stm32_config+0x60>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 80096c8:	0552      	lsls	r2, r2, #21
 80096ca:	d515      	bpl.n	80096f8 <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 80096cc:	2101      	movs	r1, #1
 80096ce:	40b1      	lsls	r1, r6
 80096d0:	4628      	mov	r0, r5
 80096d2:	f7ff ff1a 	bl	800950a <gpio_stm32_port_clear_bits_raw>
 80096d6:	e00f      	b.n	80096f8 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80096d8:	2410      	movs	r4, #16
 80096da:	e7ef      	b.n	80096bc <gpio_stm32_config+0x14>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80096dc:	0693      	lsls	r3, r2, #26
 80096de:	d5f1      	bpl.n	80096c4 <gpio_stm32_config+0x1c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80096e0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
	if (err != 0) {
 80096e4:	e7ee      	b.n	80096c4 <gpio_stm32_config+0x1c>
	} else if  ((flags & GPIO_INPUT) != 0) {
 80096e6:	05d0      	lsls	r0, r2, #23
 80096e8:	d514      	bpl.n	8009714 <gpio_stm32_config+0x6c>
		if ((flags & GPIO_PULL_UP) != 0) {
 80096ea:	06d1      	lsls	r1, r2, #27
 80096ec:	d414      	bmi.n	8009718 <gpio_stm32_config+0x70>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80096ee:	f012 0420 	ands.w	r4, r2, #32
 80096f2:	bf18      	it	ne
 80096f4:	f44f 6480 	movne.w	r4, #1024	; 0x400
	gpio_stm32_configure(dev, pin, pincfg, 0);
 80096f8:	2300      	movs	r3, #0
 80096fa:	4622      	mov	r2, r4
 80096fc:	4631      	mov	r1, r6
 80096fe:	4628      	mov	r0, r5
 8009700:	f7ff ff4e 	bl	80095a0 <gpio_stm32_configure>
 8009704:	2000      	movs	r0, #0
}
 8009706:	bd70      	pop	{r4, r5, r6, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009708:	686a      	ldr	r2, [r5, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800970a:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800970c:	6852      	ldr	r2, [r2, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800970e:	40b3      	lsls	r3, r6
	WRITE_REG(gpio->BSRR, pins);
 8009710:	6193      	str	r3, [r2, #24]
	return 0;
 8009712:	e7f1      	b.n	80096f8 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8009714:	2430      	movs	r4, #48	; 0x30
 8009716:	e7ef      	b.n	80096f8 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8009718:	f44f 7400 	mov.w	r4, #512	; 0x200
 800971c:	e7ec      	b.n	80096f8 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 800971e:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return err;
 8009722:	e7f0      	b.n	8009706 <gpio_stm32_config+0x5e>

08009724 <gpio_stm32_init>:
 */
static int gpio_stm32_init(const struct device *dev)
{
	struct gpio_stm32_data *data = dev->data;

	data->dev = dev;
 8009724:	6902      	ldr	r2, [r0, #16]
	return 0;
#else
#ifdef CONFIG_PM_DEVICE
	data->power_state = PM_DEVICE_STATE_ACTIVE;
#endif
	return gpio_stm32_clock_request(dev, true);
 8009726:	2101      	movs	r1, #1
	data->dev = dev;
 8009728:	6050      	str	r0, [r2, #4]
	return gpio_stm32_clock_request(dev, true);
 800972a:	f7fd ba45 	b.w	8006bb8 <gpio_stm32_clock_request>

0800972e <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800972e:	2301      	movs	r3, #1
 8009730:	fa03 f101 	lsl.w	r1, r3, r1
 8009734:	6903      	ldr	r3, [r0, #16]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 800973a:	bf18      	it	ne
 800973c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8009740:	b112      	cbz	r2, 8009748 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 8009742:	6883      	ldr	r3, [r0, #8]
 8009744:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8009746:	4718      	bx	r3
 8009748:	6883      	ldr	r3, [r0, #8]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	e7fb      	b.n	8009746 <gpio_pin_set.isra.0+0x18>

0800974e <_spi_context_cs_control>:
{
 800974e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8009750:	6805      	ldr	r5, [r0, #0]
{
 8009752:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8009754:	b1fd      	cbz	r5, 8009796 <_spi_context_cs_control+0x48>
 8009756:	68ab      	ldr	r3, [r5, #8]
 8009758:	b1eb      	cbz	r3, 8009796 <_spi_context_cs_control+0x48>
 800975a:	6818      	ldr	r0, [r3, #0]
 800975c:	b1d8      	cbz	r0, 8009796 <_spi_context_cs_control+0x48>
		if (on) {
 800975e:	b151      	cbz	r1, 8009776 <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8009760:	7a19      	ldrb	r1, [r3, #8]
 8009762:	2201      	movs	r2, #1
 8009764:	f7ff ffe3 	bl	800972e <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	6858      	ldr	r0, [r3, #4]
}
 800976e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8009772:	f7fe be09 	b.w	8008388 <z_impl_k_busy_wait>
			if (!force_off &&
 8009776:	b912      	cbnz	r2, 800977e <_spi_context_cs_control+0x30>
 8009778:	88aa      	ldrh	r2, [r5, #4]
 800977a:	0492      	lsls	r2, r2, #18
 800977c:	d40b      	bmi.n	8009796 <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
 800977e:	6858      	ldr	r0, [r3, #4]
 8009780:	f7fe fe02 	bl	8008388 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	2200      	movs	r2, #0
 800978a:	7a19      	ldrb	r1, [r3, #8]
 800978c:	6818      	ldr	r0, [r3, #0]
}
 800978e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8009792:	f7ff bfcc 	b.w	800972e <gpio_pin_set.isra.0>
}
 8009796:	bd38      	pop	{r3, r4, r5, pc}

08009798 <spi_context_unlock_unconditionally>:
{
 8009798:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 800979a:	2201      	movs	r2, #1
 800979c:	2100      	movs	r1, #0
{
 800979e:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 80097a0:	f7ff ffd5 	bl	800974e <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 80097a4:	6923      	ldr	r3, [r4, #16]
 80097a6:	b933      	cbnz	r3, 80097b6 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 80097a8:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 80097aa:	f104 0008 	add.w	r0, r4, #8
}
 80097ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097b2:	f7fe ba2b 	b.w	8007c0c <z_impl_k_sem_give>
 80097b6:	bd10      	pop	{r4, pc}

080097b8 <spi_stm32_release>:
{
 80097b8:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 80097ba:	6900      	ldr	r0, [r0, #16]
 80097bc:	f7ff ffec 	bl	8009798 <spi_context_unlock_unconditionally>
}
 80097c0:	2000      	movs	r0, #0
 80097c2:	bd08      	pop	{r3, pc}

080097c4 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           PE            LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 80097c4:	b082      	sub	sp, #8
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80097c6:	6803      	ldr	r3, [r0, #0]
 80097c8:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80097ca:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 80097cc:	6843      	ldr	r3, [r0, #4]
 80097ce:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80097d0:	9b01      	ldr	r3, [sp, #4]
}
 80097d2:	b002      	add	sp, #8
 80097d4:	4770      	bx	lr

080097d6 <uart_stm32_poll_in>:
{
 80097d6:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80097d8:	6843      	ldr	r3, [r0, #4]
 80097da:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80097dc:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 80097de:	071a      	lsls	r2, r3, #28
 80097e0:	d501      	bpl.n	80097e6 <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(UartInstance);
 80097e2:	f7ff ffef 	bl	80097c4 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80097e6:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 80097e8:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80097ea:	bf43      	ittte	mi
 80097ec:	6843      	ldrmi	r3, [r0, #4]
 80097ee:	700b      	strbmi	r3, [r1, #0]
	return 0;
 80097f0:	2000      	movmi	r0, #0
		return -1;
 80097f2:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 80097f6:	bd08      	pop	{r3, pc}

080097f8 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80097f8:	6843      	ldr	r3, [r0, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80097fc:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 80097fe:	0612      	lsls	r2, r2, #24
 8009800:	d5fc      	bpl.n	80097fc <uart_stm32_poll_out+0x4>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8009802:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009806:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8009808:	6059      	str	r1, [r3, #4]
}
 800980a:	4770      	bx	lr

0800980c <uart_stm32_err_check>:
{
 800980c:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800980e:	6843      	ldr	r3, [r0, #4]
 8009810:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8009812:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8009814:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8009816:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8009818:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800981a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 800981e:	bf48      	it	mi
 8009820:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8009824:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 8009826:	bf48      	it	mi
 8009828:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 800982c:	07d3      	lsls	r3, r2, #31
 800982e:	d501      	bpl.n	8009834 <uart_stm32_err_check+0x28>
		LL_USART_ClearFlag_ORE(UartInstance);
 8009830:	f7ff ffc8 	bl	80097c4 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8009834:	0791      	lsls	r1, r2, #30
 8009836:	d501      	bpl.n	800983c <uart_stm32_err_check+0x30>
		LL_USART_ClearFlag_PE(UartInstance);
 8009838:	f7ff ffc4 	bl	80097c4 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 800983c:	0753      	lsls	r3, r2, #29
 800983e:	d501      	bpl.n	8009844 <uart_stm32_err_check+0x38>
		LL_USART_ClearFlag_FE(UartInstance);
 8009840:	f7ff ffc0 	bl	80097c4 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 8009844:	f7ff ffbe 	bl	80097c4 <LL_USART_ClearFlag_FE>
}
 8009848:	4610      	mov	r0, r2
 800984a:	bd08      	pop	{r3, pc}

0800984c <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 800984c:	6903      	ldr	r3, [r0, #16]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009852:	6843      	ldr	r3, [r0, #4]
 8009854:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8009856:	68d3      	ldr	r3, [r2, #12]
 8009858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800985c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009860:	d029      	beq.n	80098b6 <uart_stm32_config_get+0x6a>
		return UART_CFG_PARITY_NONE;
 8009862:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8009866:	f1dc 0300 	rsbs	r3, ip, #0
 800986a:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800986e:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8009870:	6913      	ldr	r3, [r2, #16]
 8009872:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8009876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800987a:	d01e      	beq.n	80098ba <uart_stm32_config_get+0x6e>
 800987c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009880:	d01d      	beq.n	80098be <uart_stm32_config_get+0x72>
 8009882:	2b00      	cmp	r3, #0
 8009884:	bf14      	ite	ne
 8009886:	2303      	movne	r3, #3
 8009888:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800988a:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800988c:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800988e:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 8009890:	04c0      	lsls	r0, r0, #19
 8009892:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009896:	d514      	bpl.n	80098c2 <uart_stm32_config_get+0x76>
			return UART_CFG_DATA_BITS_9;
 8009898:	2b00      	cmp	r3, #0
 800989a:	bf14      	ite	ne
 800989c:	2303      	movne	r3, #3
 800989e:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80098a0:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80098a2:	6953      	ldr	r3, [r2, #20]
 80098a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80098a8:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80098ac:	4253      	negs	r3, r2
 80098ae:	4153      	adcs	r3, r2
 80098b0:	71cb      	strb	r3, [r1, #7]
}
 80098b2:	2000      	movs	r0, #0
 80098b4:	4770      	bx	lr
	switch (parity) {
 80098b6:	2302      	movs	r3, #2
 80098b8:	e7d9      	b.n	800986e <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 80098ba:	2300      	movs	r3, #0
 80098bc:	e7e5      	b.n	800988a <uart_stm32_config_get+0x3e>
		return UART_CFG_STOP_BITS_1_5;
 80098be:	2302      	movs	r3, #2
 80098c0:	e7e3      	b.n	800988a <uart_stm32_config_get+0x3e>
			return UART_CFG_DATA_BITS_7;
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	bf0c      	ite	eq
 80098c6:	2303      	moveq	r3, #3
 80098c8:	2302      	movne	r3, #2
 80098ca:	e7e9      	b.n	80098a0 <uart_stm32_config_get+0x54>

080098cc <z_device_state_init>:
}
 80098cc:	4770      	bx	lr

080098ce <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 80098ce:	b138      	cbz	r0, 80098e0 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 80098d0:	68c3      	ldr	r3, [r0, #12]
 80098d2:	8818      	ldrh	r0, [r3, #0]
 80098d4:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80098d8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 80098dc:	4258      	negs	r0, r3
 80098de:	4158      	adcs	r0, r3
}
 80098e0:	4770      	bx	lr

080098e2 <arch_system_halt>:
	__asm__ volatile(
 80098e2:	f04f 0210 	mov.w	r2, #16
 80098e6:	f3ef 8311 	mrs	r3, BASEPRI
 80098ea:	f382 8811 	msr	BASEPRI, r2
 80098ee:	f3bf 8f6f 	isb	sy
	for (;;) {
 80098f2:	e7fe      	b.n	80098f2 <arch_system_halt+0x10>

080098f4 <k_mem_slab_init>:
{
 80098f4:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
 80098f6:	2400      	movs	r4, #0
 80098f8:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
 80098fa:	7204      	strb	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 80098fc:	ea41 0402 	orr.w	r4, r1, r2
 8009900:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
 8009904:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
 8009908:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800990a:	d10c      	bne.n	8009926 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
 800990c:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 800990e:	42a3      	cmp	r3, r4
 8009910:	d103      	bne.n	800991a <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
 8009912:	e9c0 0000 	strd	r0, r0, [r0]
}
 8009916:	2000      	movs	r0, #0
}
 8009918:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
 800991a:	6985      	ldr	r5, [r0, #24]
 800991c:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 800991e:	3401      	adds	r4, #1
		slab->free_list = p;
 8009920:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
 8009922:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
 8009924:	e7f3      	b.n	800990e <k_mem_slab_init+0x1a>
		return -EINVAL;
 8009926:	f06f 0015 	mvn.w	r0, #21
	return rc;
 800992a:	e7f5      	b.n	8009918 <k_mem_slab_init+0x24>

0800992c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	4604      	mov	r4, r0
 8009930:	460d      	mov	r5, r1
 8009932:	f04f 0310 	mov.w	r3, #16
 8009936:	f3ef 8611 	mrs	r6, BASEPRI
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 8009942:	6987      	ldr	r7, [r0, #24]
 8009944:	b977      	cbnz	r7, 8009964 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 8009946:	f000 f8fa 	bl	8009b3e <z_unpend_first_thread>

		if (pending_thread != NULL) {
 800994a:	b158      	cbz	r0, 8009964 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 800994c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800994e:	6142      	str	r2, [r0, #20]
 8009950:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
 8009952:	f000 f8ad 	bl	8009ab0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
 8009956:	4631      	mov	r1, r6
 8009958:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 800995c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
 8009960:	f7fe b9da 	b.w	8007d18 <z_reschedule>
	**(char ***) mem = slab->free_list;
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	69a2      	ldr	r2, [r4, #24]
 8009968:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 800996a:	682b      	ldr	r3, [r5, #0]
 800996c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
 800996e:	69e3      	ldr	r3, [r4, #28]
 8009970:	3b01      	subs	r3, #1
 8009972:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 8009974:	f386 8811 	msr	BASEPRI, r6
 8009978:	f3bf 8f6f 	isb	sy
}
 800997c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800997e <z_impl_k_thread_name_set>:
}
 800997e:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8009982:	4770      	bx	lr

08009984 <k_thread_name_get>:
}
 8009984:	2000      	movs	r0, #0
 8009986:	4770      	bx	lr

08009988 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8009988:	b508      	push	{r3, lr}
	__asm__ volatile(
 800998a:	f04f 0210 	mov.w	r2, #16
 800998e:	f3ef 8311 	mrs	r3, BASEPRI
 8009992:	f382 8811 	msr	BASEPRI, r2
 8009996:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800999a:	f7fc fc55 	bl	8006248 <arch_cpu_idle>
 800999e:	e7f4      	b.n	800998a <idle+0x2>

080099a0 <z_queue_node_peek>:
{
 80099a0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
 80099a2:	4604      	mov	r4, r0
 80099a4:	b130      	cbz	r0, 80099b4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 80099a6:	6802      	ldr	r2, [r0, #0]
 80099a8:	0793      	lsls	r3, r2, #30
 80099aa:	d003      	beq.n	80099b4 <z_queue_node_peek+0x14>
		ret = anode->data;
 80099ac:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 80099ae:	b109      	cbz	r1, 80099b4 <z_queue_node_peek+0x14>
			k_free(anode);
 80099b0:	f000 f949 	bl	8009c46 <k_free>
}
 80099b4:	4620      	mov	r0, r4
 80099b6:	bd10      	pop	{r4, pc}

080099b8 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 80099b8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 80099bc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80099be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80099c0:	2300      	movs	r3, #0
	node->prev = NULL;
 80099c2:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 80099c6:	4770      	bx	lr

080099c8 <unpend_thread_no_timeout>:
{
 80099c8:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 80099ca:	f7ff fff5 	bl	80099b8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80099ce:	7b43      	ldrb	r3, [r0, #13]
 80099d0:	f023 0302 	bic.w	r3, r3, #2
 80099d4:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	6083      	str	r3, [r0, #8]
}
 80099da:	bd08      	pop	{r3, pc}

080099dc <z_unpend_thread_no_timeout>:
{
 80099dc:	b508      	push	{r3, lr}
 80099de:	f04f 0310 	mov.w	r3, #16
 80099e2:	f3ef 8111 	mrs	r1, BASEPRI
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 80099ee:	f7ff ffeb 	bl	80099c8 <unpend_thread_no_timeout>
	__asm__ volatile(
 80099f2:	f381 8811 	msr	BASEPRI, r1
 80099f6:	f3bf 8f6f 	isb	sy
}
 80099fa:	bd08      	pop	{r3, pc}

080099fc <z_unpend_thread>:
{
 80099fc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80099fe:	f04f 0310 	mov.w	r3, #16
 8009a02:	f3ef 8411 	mrs	r4, BASEPRI
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 8009a0e:	f7ff ffdb 	bl	80099c8 <unpend_thread_no_timeout>
	__asm__ volatile(
 8009a12:	f384 8811 	msr	BASEPRI, r4
 8009a16:	f3bf 8f6f 	isb	sy
}
 8009a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a1e:	3018      	adds	r0, #24
 8009a20:	f000 b8b5 	b.w	8009b8e <z_abort_timeout>

08009a24 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8009a24:	4603      	mov	r3, r0
 8009a26:	b920      	cbnz	r0, 8009a32 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a28:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8009a2c:	b90a      	cbnz	r2, 8009a32 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8009a2e:	f7fc bac3 	b.w	8005fb8 <arch_swap>
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
}
 8009a3a:	4770      	bx	lr

08009a3c <z_reschedule_unlocked>:
	__asm__ volatile(
 8009a3c:	f04f 0310 	mov.w	r3, #16
 8009a40:	f3ef 8011 	mrs	r0, BASEPRI
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8009a4c:	f7ff bfea 	b.w	8009a24 <z_reschedule_irqlock>

08009a50 <z_priq_dumb_best>:
	return list->head == list;
 8009a50:	6803      	ldr	r3, [r0, #0]
}
 8009a52:	4298      	cmp	r0, r3
 8009a54:	bf14      	ite	ne
 8009a56:	4618      	movne	r0, r3
 8009a58:	2000      	moveq	r0, #0
 8009a5a:	4770      	bx	lr

08009a5c <add_to_waitq_locked>:
{
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4604      	mov	r4, r0
 8009a60:	460d      	mov	r5, r1
	unready_thread(thread);
 8009a62:	f7fe f99f 	bl	8007da4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8009a66:	7b63      	ldrb	r3, [r4, #13]
 8009a68:	f043 0302 	orr.w	r3, r3, #2
 8009a6c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8009a6e:	b195      	cbz	r5, 8009a96 <add_to_waitq_locked+0x3a>
 8009a70:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8009a72:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009a74:	429d      	cmp	r5, r3
 8009a76:	d015      	beq.n	8009aa4 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009a78:	b1a3      	cbz	r3, 8009aa4 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 8009a7a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8009a7e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8009a82:	4291      	cmp	r1, r2
 8009a84:	d008      	beq.n	8009a98 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 8009a86:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 8009a88:	2a00      	cmp	r2, #0
 8009a8a:	dd05      	ble.n	8009a98 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 8009a8c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8009a8e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8009a92:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8009a94:	605c      	str	r4, [r3, #4]
}
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 8009a98:	686a      	ldr	r2, [r5, #4]
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d002      	beq.n	8009aa4 <add_to_waitq_locked+0x48>
 8009a9e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1ec      	bne.n	8009a7e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 8009aa4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8009aa6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8009aaa:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009aac:	606c      	str	r4, [r5, #4]
}
 8009aae:	e7f2      	b.n	8009a96 <add_to_waitq_locked+0x3a>

08009ab0 <z_ready_thread>:
{
 8009ab0:	b510      	push	{r4, lr}
 8009ab2:	f04f 0310 	mov.w	r3, #16
 8009ab6:	f3ef 8411 	mrs	r4, BASEPRI
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8009ac2:	f7fe fa57 	bl	8007f74 <ready_thread>
	__asm__ volatile(
 8009ac6:	f384 8811 	msr	BASEPRI, r4
 8009aca:	f3bf 8f6f 	isb	sy
}
 8009ace:	bd10      	pop	{r4, pc}

08009ad0 <z_thread_timeout>:
{
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	4601      	mov	r1, r0
	__asm__ volatile(
 8009ad4:	f04f 0310 	mov.w	r3, #16
 8009ad8:	f3ef 8411 	mrs	r4, BASEPRI
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8009ae4:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8009ae8:	f013 0f28 	tst.w	r3, #40	; 0x28
 8009aec:	d10d      	bne.n	8009b0a <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 8009aee:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8009af2:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 8009af4:	b10b      	cbz	r3, 8009afa <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 8009af6:	f7ff ff67 	bl	80099c8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8009afa:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 8009afe:	f023 0314 	bic.w	r3, r3, #20
 8009b02:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 8009b06:	f7fe fa35 	bl	8007f74 <ready_thread>
	__asm__ volatile(
 8009b0a:	f384 8811 	msr	BASEPRI, r4
 8009b0e:	f3bf 8f6f 	isb	sy
}
 8009b12:	bd10      	pop	{r4, pc}

08009b14 <z_unpend1_no_timeout>:
{
 8009b14:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009b16:	f04f 0310 	mov.w	r3, #16
 8009b1a:	f3ef 8411 	mrs	r4, BASEPRI
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8009b26:	f7ff ff93 	bl	8009a50 <z_priq_dumb_best>
		if (thread != NULL) {
 8009b2a:	4601      	mov	r1, r0
 8009b2c:	b108      	cbz	r0, 8009b32 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
 8009b2e:	f7ff ff4b 	bl	80099c8 <unpend_thread_no_timeout>
	__asm__ volatile(
 8009b32:	f384 8811 	msr	BASEPRI, r4
 8009b36:	f3bf 8f6f 	isb	sy
}
 8009b3a:	4608      	mov	r0, r1
 8009b3c:	bd10      	pop	{r4, pc}

08009b3e <z_unpend_first_thread>:
{
 8009b3e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8009b40:	f04f 0310 	mov.w	r3, #16
 8009b44:	f3ef 8511 	mrs	r5, BASEPRI
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8009b50:	f7ff ff7e 	bl	8009a50 <z_priq_dumb_best>
		if (thread != NULL) {
 8009b54:	4604      	mov	r4, r0
 8009b56:	b120      	cbz	r0, 8009b62 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 8009b58:	f7ff ff36 	bl	80099c8 <unpend_thread_no_timeout>
 8009b5c:	3018      	adds	r0, #24
 8009b5e:	f000 f816 	bl	8009b8e <z_abort_timeout>
	__asm__ volatile(
 8009b62:	f385 8811 	msr	BASEPRI, r5
 8009b66:	f3bf 8f6f 	isb	sy
}
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	bd38      	pop	{r3, r4, r5, pc}

08009b6e <z_unpend_all>:
{
 8009b6e:	b538      	push	{r3, r4, r5, lr}
 8009b70:	4605      	mov	r5, r0
	int need_sched = 0;
 8009b72:	2000      	movs	r0, #0
	return list->head == list;
 8009b74:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009b76:	42a5      	cmp	r5, r4
 8009b78:	d000      	beq.n	8009b7c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8009b7a:	b904      	cbnz	r4, 8009b7e <z_unpend_all+0x10>
}
 8009b7c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f7ff ff3c 	bl	80099fc <z_unpend_thread>
		z_ready_thread(thread);
 8009b84:	4620      	mov	r0, r4
 8009b86:	f7ff ff93 	bl	8009ab0 <z_ready_thread>
		need_sched = 1;
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	e7f2      	b.n	8009b74 <z_unpend_all+0x6>

08009b8e <z_abort_timeout>:
{
 8009b8e:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009b90:	f04f 0210 	mov.w	r2, #16
 8009b94:	f3ef 8411 	mrs	r4, BASEPRI
 8009b98:	f382 8811 	msr	BASEPRI, r2
 8009b9c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8009ba0:	6803      	ldr	r3, [r0, #0]
 8009ba2:	b13b      	cbz	r3, 8009bb4 <z_abort_timeout+0x26>
			remove_timeout(to);
 8009ba4:	f7fe faea 	bl	800817c <remove_timeout>
			ret = 0;
 8009ba8:	2000      	movs	r0, #0
	__asm__ volatile(
 8009baa:	f384 8811 	msr	BASEPRI, r4
 8009bae:	f3bf 8f6f 	isb	sy
}
 8009bb2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8009bb4:	f06f 0015 	mvn.w	r0, #21
 8009bb8:	e7f7      	b.n	8009baa <z_abort_timeout+0x1c>

08009bba <z_set_timeout_expiry>:
{
 8009bba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
 8009bc0:	f04f 0310 	mov.w	r3, #16
 8009bc4:	f3ef 8511 	mrs	r5, BASEPRI
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8009bd0:	f7fe faac 	bl	800812c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8009bd4:	2801      	cmp	r0, #1
 8009bd6:	dd05      	ble.n	8009be4 <z_set_timeout_expiry+0x2a>
 8009bd8:	42a0      	cmp	r0, r4
 8009bda:	9901      	ldr	r1, [sp, #4]
 8009bdc:	db02      	blt.n	8009be4 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8009bde:	4620      	mov	r0, r4
 8009be0:	f7fc f946 	bl	8005e70 <sys_clock_set_timeout>
	__asm__ volatile(
 8009be4:	f385 8811 	msr	BASEPRI, r5
 8009be8:	f3bf 8f6f 	isb	sy
}
 8009bec:	b003      	add	sp, #12
 8009bee:	bd30      	pop	{r4, r5, pc}

08009bf0 <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 8009bf0:	f7fe bbb2 	b.w	8008358 <sys_clock_tick_get>

08009bf4 <k_timer_init>:
	timer->status = 0U;
 8009bf4:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 8009bf6:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 8009bfa:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
 8009bfe:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 8009c02:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 8009c06:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 8009c08:	6343      	str	r3, [r0, #52]	; 0x34
}
 8009c0a:	4770      	bx	lr

08009c0c <z_impl_k_timer_stop>:
{
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8009c10:	f7ff ffbd 	bl	8009b8e <z_abort_timeout>
	if (inactive) {
 8009c14:	b9b0      	cbnz	r0, 8009c44 <z_impl_k_timer_stop+0x38>
	if (timer->stop_fn != NULL) {
 8009c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c18:	b10b      	cbz	r3, 8009c1e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	4798      	blx	r3
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8009c1e:	f104 0018 	add.w	r0, r4, #24
 8009c22:	f7ff ff77 	bl	8009b14 <z_unpend1_no_timeout>
		if (pending_thread != NULL) {
 8009c26:	b168      	cbz	r0, 8009c44 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 8009c28:	f7ff ff42 	bl	8009ab0 <z_ready_thread>
	__asm__ volatile(
 8009c2c:	f04f 0310 	mov.w	r3, #16
 8009c30:	f3ef 8011 	mrs	r0, BASEPRI
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
}
 8009c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 8009c40:	f7ff bef0 	b.w	8009a24 <z_reschedule_irqlock>
 8009c44:	bd10      	pop	{r4, pc}

08009c46 <k_free>:

void k_free(void *ptr)
{
	struct k_heap **heap_ref;

	if (ptr != NULL) {
 8009c46:	b120      	cbz	r0, 8009c52 <k_free+0xc>
		heap_ref = ptr;
		ptr = --heap_ref;

		SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_free, *heap_ref);

		k_heap_free(*heap_ref, ptr);
 8009c48:	1f01      	subs	r1, r0, #4
 8009c4a:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8009c4e:	f000 b80a 	b.w	8009c66 <k_heap_free>

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_free, *heap_ref);
	}
}
 8009c52:	4770      	bx	lr

08009c54 <k_heap_init>:
{
 8009c54:	b410      	push	{r4}
 8009c56:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 8009c5a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8009c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
 8009c62:	f7fe bff2 	b.w	8008c4a <sys_heap_init>

08009c66 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
 8009c66:	b538      	push	{r3, r4, r5, lr}
 8009c68:	4604      	mov	r4, r0
 8009c6a:	f04f 0310 	mov.w	r3, #16
 8009c6e:	f3ef 8511 	mrs	r5, BASEPRI
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
 8009c7a:	f7fe ffcd 	bl	8008c18 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
 8009c7e:	f104 000c 	add.w	r0, r4, #12
 8009c82:	f7ff ff74 	bl	8009b6e <z_unpend_all>
 8009c86:	b130      	cbz	r0, 8009c96 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
 8009c88:	4629      	mov	r1, r5
 8009c8a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
 8009c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
 8009c92:	f7fe b841 	b.w	8007d18 <z_reschedule>
	__asm__ volatile(
 8009c96:	f385 8811 	msr	BASEPRI, r5
 8009c9a:	f3bf 8f6f 	isb	sy
}
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}

08009ca0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8009ca0:	4770      	bx	lr

08009ca2 <memcpy>:
 8009ca2:	440a      	add	r2, r1
 8009ca4:	4291      	cmp	r1, r2
 8009ca6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009caa:	d100      	bne.n	8009cae <memcpy+0xc>
 8009cac:	4770      	bx	lr
 8009cae:	b510      	push	{r4, lr}
 8009cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cb8:	4291      	cmp	r1, r2
 8009cba:	d1f9      	bne.n	8009cb0 <memcpy+0xe>
 8009cbc:	bd10      	pop	{r4, pc}

08009cbe <memset>:
 8009cbe:	4402      	add	r2, r0
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d100      	bne.n	8009cc8 <memset+0xa>
 8009cc6:	4770      	bx	lr
 8009cc8:	f803 1b01 	strb.w	r1, [r3], #1
 8009ccc:	e7f9      	b.n	8009cc2 <memset+0x4>

08009cce <strncpy>:
 8009cce:	b510      	push	{r4, lr}
 8009cd0:	3901      	subs	r1, #1
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	b132      	cbz	r2, 8009ce4 <strncpy+0x16>
 8009cd6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009cda:	f803 4b01 	strb.w	r4, [r3], #1
 8009cde:	3a01      	subs	r2, #1
 8009ce0:	2c00      	cmp	r4, #0
 8009ce2:	d1f7      	bne.n	8009cd4 <strncpy+0x6>
 8009ce4:	441a      	add	r2, r3
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d100      	bne.n	8009cee <strncpy+0x20>
 8009cec:	bd10      	pop	{r4, pc}
 8009cee:	f803 1b01 	strb.w	r1, [r3], #1
 8009cf2:	e7f9      	b.n	8009ce8 <strncpy+0x1a>

08009cf4 <strnlen>:
 8009cf4:	b510      	push	{r4, lr}
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	4401      	add	r1, r0
 8009cfa:	428a      	cmp	r2, r1
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	d003      	beq.n	8009d08 <strnlen+0x14>
 8009d00:	781c      	ldrb	r4, [r3, #0]
 8009d02:	3201      	adds	r2, #1
 8009d04:	2c00      	cmp	r4, #0
 8009d06:	d1f8      	bne.n	8009cfa <strnlen+0x6>
 8009d08:	1a18      	subs	r0, r3, r0
 8009d0a:	bd10      	pop	{r4, pc}
