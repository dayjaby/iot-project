
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	20 12 00 20 89 17 00 08 d3 3c 00 08 b5 17 00 08      .. .....<......
 8000010:	b5 17 00 08 b5 17 00 08 b5 17 00 08 00 00 00 00     ................
	...
 800002c:	ed 15 00 08 b5 17 00 08 00 00 00 00 99 15 00 08     ................
 800003c:	a5 13 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000050:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000060:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000070:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000080:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000090:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 80000a0:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 80000b0:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 80000c0:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 80000d0:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 80000e0:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 80000f0:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000100:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000110:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000120:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000130:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000140:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000150:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000160:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000170:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000180:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 8000190:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 80001a0:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 80001b0:	61 17 00 08 61 17 00 08 61 17 00 08 61 17 00 08     a...a...a...a...
 80001c0:	61 17 00 08                                         a...

Disassembly of section text:

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d8:	f000 b978 	b.w	80004cc <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	460e      	mov	r6, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	b152      	cbz	r2, 8000226 <__udivmoddi4+0x32>
 8000210:	fa01 f302 	lsl.w	r3, r1, r2
 8000214:	f1c2 0120 	rsb	r1, r2, #32
 8000218:	fa20 f101 	lsr.w	r1, r0, r1
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	ea41 0e03 	orr.w	lr, r1, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022a:	0c21      	lsrs	r1, r4, #16
 800022c:	fbbe f6f8 	udiv	r6, lr, r8
 8000230:	fa1f f78c 	uxth.w	r7, ip
 8000234:	fb08 e316 	mls	r3, r8, r6, lr
 8000238:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023c:	fb06 f107 	mul.w	r1, r6, r7
 8000240:	4299      	cmp	r1, r3
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0303 	adds.w	r3, ip, r3
 8000248:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024c:	f080 811e 	bcs.w	800048c <__udivmoddi4+0x298>
 8000250:	4299      	cmp	r1, r3
 8000252:	f240 811b 	bls.w	800048c <__udivmoddi4+0x298>
 8000256:	3e02      	subs	r6, #2
 8000258:	4463      	add	r3, ip
 800025a:	1a5b      	subs	r3, r3, r1
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000262:	fb08 3310 	mls	r3, r8, r0, r3
 8000266:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026a:	fb00 f707 	mul.w	r7, r0, r7
 800026e:	42a7      	cmp	r7, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8109 	bcs.w	8000490 <__udivmoddi4+0x29c>
 800027e:	42a7      	cmp	r7, r4
 8000280:	f240 8106 	bls.w	8000490 <__udivmoddi4+0x29c>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	1be4      	subs	r4, r4, r7
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa6>
 8000292:	40d4      	lsrs	r4, r2
 8000294:	2300      	movs	r3, #0
 8000296:	e9c5 4300 	strd	r4, r3, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2d00      	cmp	r5, #0
 80002a4:	f000 80ef 	beq.w	8000486 <__udivmoddi4+0x292>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c5 0600 	strd	r0, r6, [r5]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x15c>
 80002bc:	42b3      	cmp	r3, r6
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80ff 	bhi.w	80004c4 <__udivmoddi4+0x2d0>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb66 0303 	sbc.w	r3, r6, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	469e      	mov	lr, r3
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c5 4e00 	strd	r4, lr, [r5]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	eba1 060c 	sub.w	r6, r1, ip
 80002ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f0:	fa1f f38c 	uxth.w	r3, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb6 fef7 	udiv	lr, r6, r7
 80002fa:	fb07 601e 	mls	r0, r7, lr, r6
 80002fe:	0c26      	lsrs	r6, r4, #16
 8000300:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000304:	fb03 f00e 	mul.w	r0, r3, lr
 8000308:	42b0      	cmp	r0, r6
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x12a>
 800030c:	eb1c 0606 	adds.w	r6, ip, r6
 8000310:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x128>
 8000316:	42b0      	cmp	r0, r6
 8000318:	f200 80d0 	bhi.w	80004bc <__udivmoddi4+0x2c8>
 800031c:	46c6      	mov	lr, r8
 800031e:	1a36      	subs	r6, r6, r0
 8000320:	b2a4      	uxth	r4, r4
 8000322:	fbb6 f0f7 	udiv	r0, r6, r7
 8000326:	fb07 6610 	mls	r6, r7, r0, r6
 800032a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800032e:	fb00 f303 	mul.w	r3, r0, r3
 8000332:	42a3      	cmp	r3, r4
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x154>
 8000336:	eb1c 0404 	adds.w	r4, ip, r4
 800033a:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x152>
 8000340:	42a3      	cmp	r3, r4
 8000342:	f200 80b8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 8000346:	4630      	mov	r0, r6
 8000348:	1ae4      	subs	r4, r4, r3
 800034a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x9c>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	fa22 f407 	lsr.w	r4, r2, r7
 8000358:	408b      	lsls	r3, r1
 800035a:	4323      	orrs	r3, r4
 800035c:	fa06 fc01 	lsl.w	ip, r6, r1
 8000360:	fa26 f407 	lsr.w	r4, r6, r7
 8000364:	fa20 f607 	lsr.w	r6, r0, r7
 8000368:	ea46 060c 	orr.w	r6, r6, ip
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fa00 f801 	lsl.w	r8, r0, r1
 8000374:	fbb4 fef9 	udiv	lr, r4, r9
 8000378:	0c30      	lsrs	r0, r6, #16
 800037a:	fa1f fc83 	uxth.w	ip, r3
 800037e:	fb09 441e 	mls	r4, r9, lr, r4
 8000382:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000386:	fb0e f00c 	mul.w	r0, lr, ip
 800038a:	42a0      	cmp	r0, r4
 800038c:	fa02 f201 	lsl.w	r2, r2, r1
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x1b4>
 8000392:	191c      	adds	r4, r3, r4
 8000394:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000398:	f080 808b 	bcs.w	80004b2 <__udivmoddi4+0x2be>
 800039c:	42a0      	cmp	r0, r4
 800039e:	f240 8088 	bls.w	80004b2 <__udivmoddi4+0x2be>
 80003a2:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a6:	441c      	add	r4, r3
 80003a8:	1a24      	subs	r4, r4, r0
 80003aa:	b2b6      	uxth	r6, r6
 80003ac:	fbb4 f0f9 	udiv	r0, r4, r9
 80003b0:	fb09 4410 	mls	r4, r9, r0, r4
 80003b4:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 80003b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003c0:	191c      	adds	r4, r3, r4
 80003c2:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
 80003c6:	d270      	bcs.n	80004aa <__udivmoddi4+0x2b6>
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d96e      	bls.n	80004aa <__udivmoddi4+0x2b6>
 80003cc:	3802      	subs	r0, #2
 80003ce:	441c      	add	r4, r3
 80003d0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003d4:	fba0 e602 	umull	lr, r6, r0, r2
 80003d8:	eba4 040c 	sub.w	r4, r4, ip
 80003dc:	42b4      	cmp	r4, r6
 80003de:	46f4      	mov	ip, lr
 80003e0:	46b1      	mov	r9, r6
 80003e2:	d359      	bcc.n	8000498 <__udivmoddi4+0x2a4>
 80003e4:	d056      	beq.n	8000494 <__udivmoddi4+0x2a0>
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d06e      	beq.n	80004c8 <__udivmoddi4+0x2d4>
 80003ea:	ebb8 030c 	subs.w	r3, r8, ip
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 7400 	strd	r7, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	f1c2 0020 	rsb	r0, r2, #32
 8000408:	fa24 f100 	lsr.w	r1, r4, r0
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa06 f302 	lsl.w	r3, r6, r2
 8000414:	fa26 f000 	lsr.w	r0, r6, r0
 8000418:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041c:	ea41 0603 	orr.w	r6, r1, r3
 8000420:	fbb0 f1f7 	udiv	r1, r0, r7
 8000424:	fa1f f38c 	uxth.w	r3, ip
 8000428:	fb07 0e11 	mls	lr, r7, r1, r0
 800042c:	0c30      	lsrs	r0, r6, #16
 800042e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000432:	fb01 fe03 	mul.w	lr, r1, r3
 8000436:	4586      	cmp	lr, r0
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x25c>
 800043e:	eb1c 0000 	adds.w	r0, ip, r0
 8000442:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000446:	d232      	bcs.n	80004ae <__udivmoddi4+0x2ba>
 8000448:	4586      	cmp	lr, r0
 800044a:	d930      	bls.n	80004ae <__udivmoddi4+0x2ba>
 800044c:	3902      	subs	r1, #2
 800044e:	4460      	add	r0, ip
 8000450:	eba0 000e 	sub.w	r0, r0, lr
 8000454:	b2b6      	uxth	r6, r6
 8000456:	fbb0 fef7 	udiv	lr, r0, r7
 800045a:	fb07 001e 	mls	r0, r7, lr, r0
 800045e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	42b0      	cmp	r0, r6
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x28a>
 800046a:	eb1c 0606 	adds.w	r6, ip, r6
 800046e:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8000472:	d218      	bcs.n	80004a6 <__udivmoddi4+0x2b2>
 8000474:	42b0      	cmp	r0, r6
 8000476:	d916      	bls.n	80004a6 <__udivmoddi4+0x2b2>
 8000478:	f1ae 0e02 	sub.w	lr, lr, #2
 800047c:	4466      	add	r6, ip
 800047e:	1a36      	subs	r6, r6, r0
 8000480:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
 8000484:	e737      	b.n	80002f6 <__udivmoddi4+0x102>
 8000486:	4629      	mov	r1, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xa6>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e4      	b.n	800025a <__udivmoddi4+0x66>
 8000490:	4618      	mov	r0, r3
 8000492:	e6f9      	b.n	8000288 <__udivmoddi4+0x94>
 8000494:	45f0      	cmp	r8, lr
 8000496:	d2a6      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 8000498:	ebbe 0c02 	subs.w	ip, lr, r2
 800049c:	eb66 0303 	sbc.w	r3, r6, r3
 80004a0:	3801      	subs	r0, #1
 80004a2:	4699      	mov	r9, r3
 80004a4:	e79f      	b.n	80003e6 <__udivmoddi4+0x1f2>
 80004a6:	46c6      	mov	lr, r8
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x28a>
 80004aa:	4630      	mov	r0, r6
 80004ac:	e790      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004ae:	4641      	mov	r1, r8
 80004b0:	e7ce      	b.n	8000450 <__udivmoddi4+0x25c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e778      	b.n	80003a8 <__udivmoddi4+0x1b4>
 80004b6:	4464      	add	r4, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e745      	b.n	8000348 <__udivmoddi4+0x154>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	4466      	add	r6, ip
 80004c2:	e72c      	b.n	800031e <__udivmoddi4+0x12a>
 80004c4:	4608      	mov	r0, r1
 80004c6:	e703      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004c8:	4629      	mov	r1, r5
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0xa6>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_Z17coop_thread_entryv>:

cpp_semaphore sem_main;
cpp_semaphore sem_coop;

void coop_thread_entry(void)
{
 80004d0:	b570      	push	{r4, r5, r6, lr}
	struct k_timer timer;

	k_timer_init(&timer, NULL, NULL);
 80004d2:	2200      	movs	r2, #0
{
 80004d4:	b090      	sub	sp, #64	; 0x40
	k_timer_init(&timer, NULL, NULL);
 80004d6:	4611      	mov	r1, r2
 80004d8:	a802      	add	r0, sp, #8
 80004da:	f004 f864 	bl	80045a6 <k_timer_init>

	while (1) {
		/* wait for main thread to let us have a turn */
		sem_coop.wait();
 80004de:	4e0d      	ldr	r6, [pc, #52]	; (8000514 <_Z17coop_thread_entryv+0x44>)

		/* say "hello" */
		printk("%s: Hello World!\n", __FUNCTION__);
 80004e0:	4d0d      	ldr	r5, [pc, #52]	; (8000518 <_Z17coop_thread_entryv+0x48>)
 80004e2:	4c0e      	ldr	r4, [pc, #56]	; (800051c <_Z17coop_thread_entryv+0x4c>)
		sem_coop.wait();
 80004e4:	4630      	mov	r0, r6
 80004e6:	f003 f856 	bl	8003596 <_ZN13cpp_semaphore4waitEv>
		printk("%s: Hello World!\n", __FUNCTION__);
 80004ea:	4629      	mov	r1, r5
 80004ec:	4620      	mov	r0, r4
 80004ee:	f003 f88c 	bl	800360a <printk>
		arch_syscall_invoke5(*(uintptr_t *)&timer, parm0.split.lo, parm0.split.hi, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	e9cd 2300 	strd	r2, r3, [sp]
 80004fa:	a802      	add	r0, sp, #8
 80004fc:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 8000500:	2300      	movs	r3, #0
 8000502:	f002 ffad 	bl	8003460 <z_impl_k_timer_start>
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke1(*(uintptr_t *)&timer, K_SYSCALL_K_TIMER_STATUS_SYNC);
	}
#endif
	compiler_barrier();
	return z_impl_k_timer_status_sync(timer);
 8000506:	a802      	add	r0, sp, #8
 8000508:	f002 fffa 	bl	8003500 <z_impl_k_timer_status_sync>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <_Z17coop_thread_entryv+0x50>)
 800050e:	f002 fb75 	bl	8002bfc <z_impl_k_sem_give>
 8000512:	e7e7      	b.n	80004e4 <_Z17coop_thread_entryv+0x14>
 8000514:	200003e0 	.word	0x200003e0
 8000518:	08004c46 	.word	0x08004c46
 800051c:	08004c58 	.word	0x08004c58
 8000520:	200003f8 	.word	0x200003f8

08000524 <_ZN13cpp_semaphoreC1Ev>:
cpp_semaphore::cpp_semaphore()
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <_ZN13cpp_semaphoreC1Ev+0x20>)
 8000526:	b510      	push	{r4, lr}
	printk("Create semaphore %p\n", this);
 8000528:	4601      	mov	r1, r0
cpp_semaphore::cpp_semaphore()
 800052a:	6003      	str	r3, [r0, #0]
 800052c:	4604      	mov	r4, r0
	printk("Create semaphore %p\n", this);
 800052e:	4806      	ldr	r0, [pc, #24]	; (8000548 <_ZN13cpp_semaphoreC1Ev+0x24>)
 8000530:	f003 f86b 	bl	800360a <printk>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8000534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000538:	2100      	movs	r1, #0
 800053a:	1d20      	adds	r0, r4, #4
 800053c:	f003 ff45 	bl	80043ca <z_impl_k_sem_init>
}
 8000540:	4620      	mov	r0, r4
 8000542:	bd10      	pop	{r4, pc}
 8000544:	08004a30 	.word	0x08004a30
 8000548:	08004c6a 	.word	0x08004c6a

0800054c <main>:
	};
	spi_transceive(spi, spi_cfg, &tx, &rx);
}

void main(void)
{
 800054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054e:	b0a5      	sub	sp, #148	; 0x94
	console_init();
 8000550:	f000 fcf2 	bl	8000f38 <console_init>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8000554:	484c      	ldr	r0, [pc, #304]	; (8000688 <main+0x13c>)
 8000556:	f002 f913 	bl	8002780 <z_impl_device_get_binding>
	int ret;

	// spi = device_get_binding("dw1000_spi");
	const struct device *spi;
	spi = device_get_binding("SPI_1");
	const spi_cs_control cs_ctrl = {
 800055a:	2600      	movs	r6, #0
 800055c:	ad08      	add	r5, sp, #32
 800055e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000562:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8000566:	4604      	mov	r4, r0
 8000568:	9608      	str	r6, [sp, #32]
 800056a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800056e:	4847      	ldr	r0, [pc, #284]	; (800068c <main+0x140>)
 8000570:	f002 f906 	bl	8002780 <z_impl_device_get_binding>
		.delay = 0,
		.gpio_pin = 6,
		.gpio_dt_flags = GPIO_ACTIVE_LOW,
	};

	struct spi_config spi_cfg {
 8000574:	4a46      	ldr	r2, [pc, #280]	; (8000690 <main+0x144>)
		.frequency = 3600000U,
        	.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB | SPI_OP_MODE_MASTER,
		.cs = &cs_ctrl
    	};
 8000576:	950d      	str	r5, [sp, #52]	; 0x34
	struct spi_config spi_cfg {
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100

	uint8_t rx_buf[32];
	dw_transceive(spi, &spi_cfg, 0x00, rx_buf, sizeof(rx_buf));
 800057c:	2520      	movs	r5, #32
	struct spi_config spi_cfg {
 800057e:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
	};
 8000582:	9008      	str	r0, [sp, #32]
	dw_transceive(spi, &spi_cfg, 0x00, rx_buf, sizeof(rx_buf));
 8000584:	ab0e      	add	r3, sp, #56	; 0x38
 8000586:	4632      	mov	r2, r6
 8000588:	9500      	str	r5, [sp, #0]
 800058a:	a90b      	add	r1, sp, #44	; 0x2c
 800058c:	4620      	mov	r0, r4
 800058e:	f003 f81d 	bl	80035cc <_Z13dw_transceivePK6deviceP10spi_confighPhh>
	printk("Got DW1000 DEVID: %02X\n", *((uint32_t*)rx_buf));
 8000592:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000594:	483f      	ldr	r0, [pc, #252]	; (8000694 <main+0x148>)
 8000596:	f003 f838 	bl	800360a <printk>
	dw_transceive(spi, &spi_cfg, 0x01, rx_buf, sizeof(rx_buf));
 800059a:	a90b      	add	r1, sp, #44	; 0x2c
 800059c:	9500      	str	r5, [sp, #0]
 800059e:	ab0e      	add	r3, sp, #56	; 0x38
 80005a0:	4620      	mov	r0, r4
 80005a2:	2201      	movs	r2, #1
 80005a4:	f003 f812 	bl	80035cc <_Z13dw_transceivePK6deviceP10spi_confighPhh>
	printk("Got DW1000 EUID: %02llX\n", *((uint64_t*)rx_buf));
 80005a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80005ac:	483a      	ldr	r0, [pc, #232]	; (8000698 <main+0x14c>)
 80005ae:	f003 f82c 	bl	800360a <printk>
	dw_transceive(spi, &spi_cfg, 0x03, rx_buf, sizeof(rx_buf));
 80005b2:	ab0e      	add	r3, sp, #56	; 0x38
 80005b4:	9500      	str	r5, [sp, #0]
 80005b6:	2203      	movs	r2, #3
 80005b8:	a90b      	add	r1, sp, #44	; 0x2c
 80005ba:	4620      	mov	r0, r4
 80005bc:	f003 f806 	bl	80035cc <_Z13dw_transceivePK6deviceP10spi_confighPhh>
	printk("Got DW1000 PANID: %02X\n", *((uint32_t*)rx_buf));
 80005c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80005c2:	4836      	ldr	r0, [pc, #216]	; (800069c <main+0x150>)
 80005c4:	f003 f821 	bl	800360a <printk>
	dw_transceive(spi, &spi_cfg, 0x04, rx_buf, sizeof(rx_buf));
 80005c8:	ab0e      	add	r3, sp, #56	; 0x38
 80005ca:	2204      	movs	r2, #4
 80005cc:	9500      	str	r5, [sp, #0]
 80005ce:	a90b      	add	r1, sp, #44	; 0x2c
 80005d0:	4620      	mov	r0, r4
 80005d2:	f002 fffb 	bl	80035cc <_Z13dw_transceivePK6deviceP10spi_confighPhh>
	uint32_t sys_cfg = *((uint32_t*)rx_buf);
 80005d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	printk("sys_cfg: %08X\n", sys_cfg);
 80005d8:	4831      	ldr	r0, [pc, #196]	; (80006a0 <main+0x154>)
 80005da:	4629      	mov	r1, r5
 80005dc:	f003 f815 	bl	800360a <printk>
	if ((sys_cfg >> 9) & 1) {
 80005e0:	05a9      	lsls	r1, r5, #22
		printk("HIRQ_POL enabled\n");
 80005e2:	bf4c      	ite	mi
 80005e4:	482f      	ldrmi	r0, [pc, #188]	; (80006a4 <main+0x158>)
	} else {
		printk("HIRQ_POL disabled\n");
 80005e6:	4830      	ldrpl	r0, [pc, #192]	; (80006a8 <main+0x15c>)
 80005e8:	f003 f80f 	bl	800360a <printk>
	}
	if ((sys_cfg >> 12) & 1) {
 80005ec:	04eb      	lsls	r3, r5, #19
		printk("DIS_DRXB enabled\n");
 80005ee:	bf4c      	ite	mi
 80005f0:	482e      	ldrmi	r0, [pc, #184]	; (80006ac <main+0x160>)
	} else {
		printk("DIS_DRXB disabled\n");
 80005f2:	482f      	ldrpl	r0, [pc, #188]	; (80006b0 <main+0x164>)
 80005f4:	f003 f809 	bl	800360a <printk>
	}

	dw_transceive(spi, &spi_cfg, 0x06, rx_buf, sizeof(rx_buf));
 80005f8:	2320      	movs	r3, #32
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	a90b      	add	r1, sp, #44	; 0x2c
 80005fe:	ab0e      	add	r3, sp, #56	; 0x38
 8000600:	4620      	mov	r0, r4
 8000602:	2206      	movs	r2, #6
 8000604:	f002 ffe2 	bl	80035cc <_Z13dw_transceivePK6deviceP10spi_confighPhh>
	uint64_t sys_time = ((uint64_t)*((uint32_t*)&rx_buf[1]) << 8) + rx_buf[0];
 8000608:	f8dd 2039 	ldr.w	r2, [sp, #57]	; 0x39
 800060c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
	printk("SYS_TIME: %jX\n", sys_time);
 8000610:	4828      	ldr	r0, [pc, #160]	; (80006b4 <main+0x168>)
	uint64_t sys_time = ((uint64_t)*((uint32_t*)&rx_buf[1]) << 8) + rx_buf[0];
 8000612:	0e13      	lsrs	r3, r2, #24
 8000614:	0212      	lsls	r2, r2, #8
 8000616:	1852      	adds	r2, r2, r1
	printk("SYS_TIME: %jX\n", sys_time);
 8000618:	f143 0300 	adc.w	r3, r3, #0
	uint64_t sys_time = ((uint64_t)*((uint32_t*)&rx_buf[1]) << 8) + rx_buf[0];
 800061c:	2400      	movs	r4, #0
	printk("SYS_TIME: %jX\n", sys_time);
 800061e:	f002 fff4 	bl	800360a <printk>
	} else {
		printk("%s: GPIO RSTn is low!\n", __FUNCTION__);
	}*/
	struct k_timer timer;

	k_thread_create(&coop_thread, coop_stack, STACKSIZE,
 8000622:	2600      	movs	r6, #0
 8000624:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8000626:	f06f 0308 	mvn.w	r3, #8
 800062a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800062e:	e9cd 4400 	strd	r4, r4, [sp]
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <main+0x16c>)
 8000634:	4921      	ldr	r1, [pc, #132]	; (80006bc <main+0x170>)
 8000636:	9404      	str	r4, [sp, #16]
 8000638:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800063c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8000640:	481f      	ldr	r0, [pc, #124]	; (80006c0 <main+0x174>)
			(k_thread_entry_t) coop_thread_entry,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
	k_timer_init(&timer, NULL, NULL);

	while (1) {
		printk("%s: Hello World!\n", __FUNCTION__);
 8000642:	4d20      	ldr	r5, [pc, #128]	; (80006c4 <main+0x178>)
 8000644:	f002 f9a8 	bl	8002998 <z_impl_k_thread_create>
	k_timer_init(&timer, NULL, NULL);
 8000648:	4622      	mov	r2, r4
 800064a:	4621      	mov	r1, r4
 800064c:	a816      	add	r0, sp, #88	; 0x58
 800064e:	f003 ffaa 	bl	80045a6 <k_timer_init>
		printk("%s: Hello World!\n", __FUNCTION__);
 8000652:	4c1d      	ldr	r4, [pc, #116]	; (80006c8 <main+0x17c>)
 8000654:	4629      	mov	r1, r5
 8000656:	4620      	mov	r0, r4
 8000658:	f002 ffd7 	bl	800360a <printk>
	z_impl_k_timer_start(timer, duration, period);
 800065c:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 8000660:	2300      	movs	r3, #0
 8000662:	a816      	add	r0, sp, #88	; 0x58
 8000664:	e9cd 6700 	strd	r6, r7, [sp]
 8000668:	f002 fefa 	bl	8003460 <z_impl_k_timer_start>
		k_timer_start(&timer, K_MSEC(SLEEPTIME), K_NO_WAIT);
		printk("%s: Hello World!\n", __FUNCTION__);
 800066c:	4629      	mov	r1, r5
 800066e:	4620      	mov	r0, r4
 8000670:	f002 ffcb 	bl	800360a <printk>
	return z_impl_k_timer_status_sync(timer);
 8000674:	a816      	add	r0, sp, #88	; 0x58
 8000676:	f002 ff43 	bl	8003500 <z_impl_k_timer_status_sync>
	z_impl_k_sem_give(sem);
 800067a:	4814      	ldr	r0, [pc, #80]	; (80006cc <main+0x180>)
 800067c:	f002 fabe 	bl	8002bfc <z_impl_k_sem_give>
		k_timer_status_sync(&timer);
		sem_coop.give();

		/* Wait for coop thread to let us have a turn */
		sem_main.wait();
 8000680:	4813      	ldr	r0, [pc, #76]	; (80006d0 <main+0x184>)
 8000682:	f002 ff88 	bl	8003596 <_ZN13cpp_semaphore4waitEv>
	while (1) {
 8000686:	e7e5      	b.n	8000654 <main+0x108>
 8000688:	08004c7f 	.word	0x08004c7f
 800068c:	08004c85 	.word	0x08004c85
 8000690:	0036ee80 	.word	0x0036ee80
 8000694:	08004c8b 	.word	0x08004c8b
 8000698:	08004ca3 	.word	0x08004ca3
 800069c:	08004cbc 	.word	0x08004cbc
 80006a0:	08004cd4 	.word	0x08004cd4
 80006a4:	08004ce3 	.word	0x08004ce3
 80006a8:	08004cf5 	.word	0x08004cf5
 80006ac:	08004d08 	.word	0x08004d08
 80006b0:	08004d1a 	.word	0x08004d1a
 80006b4:	08004d2d 	.word	0x08004d2d
 80006b8:	080004d1 	.word	0x080004d1
 80006bc:	20000620 	.word	0x20000620
 80006c0:	20000258 	.word	0x20000258
 80006c4:	08004d3c 	.word	0x08004d3c
 80006c8:	08004c58 	.word	0x08004c58
 80006cc:	200003e4 	.word	0x200003e4
 80006d0:	200003f4 	.word	0x200003f4

080006d4 <_GLOBAL__sub_I_coop_thread>:
		//gpio_pin_set(led_tx, LED_RX_PIN, (int)0);
	}
}
 80006d4:	b570      	push	{r4, r5, r6, lr}
cpp_semaphore sem_main;
 80006d6:	4c0b      	ldr	r4, [pc, #44]	; (8000704 <_GLOBAL__sub_I_coop_thread+0x30>)
 80006d8:	4e0b      	ldr	r6, [pc, #44]	; (8000708 <_GLOBAL__sub_I_coop_thread+0x34>)
 80006da:	4d0c      	ldr	r5, [pc, #48]	; (800070c <_GLOBAL__sub_I_coop_thread+0x38>)
 80006dc:	4620      	mov	r0, r4
 80006de:	f7ff ff21 	bl	8000524 <_ZN13cpp_semaphoreC1Ev>
 80006e2:	4620      	mov	r0, r4
cpp_semaphore sem_coop;
 80006e4:	4c0a      	ldr	r4, [pc, #40]	; (8000710 <_GLOBAL__sub_I_coop_thread+0x3c>)
cpp_semaphore sem_main;
 80006e6:	4632      	mov	r2, r6
 80006e8:	4629      	mov	r1, r5
 80006ea:	f003 faf9 	bl	8003ce0 <__aeabi_atexit>
cpp_semaphore sem_coop;
 80006ee:	4620      	mov	r0, r4
 80006f0:	f7ff ff18 	bl	8000524 <_ZN13cpp_semaphoreC1Ev>
 80006f4:	4632      	mov	r2, r6
 80006f6:	4629      	mov	r1, r5
 80006f8:	4620      	mov	r0, r4
}
 80006fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
cpp_semaphore sem_coop;
 80006fe:	f003 baef 	b.w	8003ce0 <__aeabi_atexit>
 8000702:	bf00      	nop
 8000704:	200003f4 	.word	0x200003f4
 8000708:	2000044c 	.word	0x2000044c
 800070c:	08003595 	.word	0x08003595
 8000710:	200003e0 	.word	0x200003e0

08000714 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8000714:	680b      	ldr	r3, [r1, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 800071a:	4b01      	ldr	r3, [pc, #4]	; (8000720 <char_out+0xc>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4718      	bx	r3
 8000720:	200000a0 	.word	0x200000a0

08000724 <__printk_hook_install>:
	_char_out = fn;
 8000724:	4b01      	ldr	r3, [pc, #4]	; (800072c <__printk_hook_install+0x8>)
 8000726:	6018      	str	r0, [r3, #0]
}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	200000a0 	.word	0x200000a0

08000730 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 8000730:	b507      	push	{r0, r1, r2, lr}
 8000732:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8000734:	2100      	movs	r1, #0
{
 8000736:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 8000738:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <vprintk+0x18>)
 800073c:	a901      	add	r1, sp, #4
 800073e:	f000 f805 	bl	800074c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 8000742:	b003      	add	sp, #12
 8000744:	f85d fb04 	ldr.w	pc, [sp], #4
 8000748:	08000715 	.word	0x08000715

0800074c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 800074c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000750:	b091      	sub	sp, #68	; 0x44
 8000752:	468b      	mov	fp, r1
 8000754:	9002      	str	r0, [sp, #8]
 8000756:	4692      	mov	sl, r2
 8000758:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 800075a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 800075c:	f89a 0000 	ldrb.w	r0, [sl]
 8000760:	b908      	cbnz	r0, 8000766 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000762:	4628      	mov	r0, r5
 8000764:	e35d      	b.n	8000e22 <cbvprintf+0x6d6>
		if (*fp != '%') {
 8000766:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000768:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
 800076c:	d007      	beq.n	800077e <cbvprintf+0x32>
			OUTC('%');
 800076e:	9b02      	ldr	r3, [sp, #8]
 8000770:	4659      	mov	r1, fp
 8000772:	4798      	blx	r3
 8000774:	2800      	cmp	r0, #0
 8000776:	f2c0 8354 	blt.w	8000e22 <cbvprintf+0x6d6>
 800077a:	3501      	adds	r5, #1
			break;
 800077c:	e212      	b.n	8000ba4 <cbvprintf+0x458>
		} state = {
 800077e:	2218      	movs	r2, #24
 8000780:	2100      	movs	r1, #0
 8000782:	a80a      	add	r0, sp, #40	; 0x28
 8000784:	f003 faf8 	bl	8003d78 <memset>
	if (*sp == '%') {
 8000788:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800078c:	2b25      	cmp	r3, #37	; 0x25
 800078e:	d078      	beq.n	8000882 <cbvprintf+0x136>
 8000790:	2200      	movs	r2, #0
 8000792:	4610      	mov	r0, r2
 8000794:	4696      	mov	lr, r2
 8000796:	4694      	mov	ip, r2
 8000798:	4616      	mov	r6, r2
 800079a:	4639      	mov	r1, r7
		switch (*sp) {
 800079c:	f817 3b01 	ldrb.w	r3, [r7], #1
 80007a0:	2b2b      	cmp	r3, #43	; 0x2b
 80007a2:	f000 809d 	beq.w	80008e0 <cbvprintf+0x194>
 80007a6:	f200 8094 	bhi.w	80008d2 <cbvprintf+0x186>
 80007aa:	2b20      	cmp	r3, #32
 80007ac:	f000 809b 	beq.w	80008e6 <cbvprintf+0x19a>
 80007b0:	2b23      	cmp	r3, #35	; 0x23
 80007b2:	f000 809b 	beq.w	80008ec <cbvprintf+0x1a0>
 80007b6:	b12e      	cbz	r6, 80007c4 <cbvprintf+0x78>
 80007b8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80007bc:	f046 0604 	orr.w	r6, r6, #4
 80007c0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80007c4:	f1bc 0f00 	cmp.w	ip, #0
 80007c8:	d005      	beq.n	80007d6 <cbvprintf+0x8a>
 80007ca:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80007ce:	f046 0608 	orr.w	r6, r6, #8
 80007d2:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80007d6:	f1be 0f00 	cmp.w	lr, #0
 80007da:	d005      	beq.n	80007e8 <cbvprintf+0x9c>
 80007dc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80007e0:	f046 0610 	orr.w	r6, r6, #16
 80007e4:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80007e8:	b128      	cbz	r0, 80007f6 <cbvprintf+0xaa>
 80007ea:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80007ee:	f040 0020 	orr.w	r0, r0, #32
 80007f2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 80007f6:	b12a      	cbz	r2, 8000804 <cbvprintf+0xb8>
 80007f8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80007fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000800:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 8000804:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000808:	f002 0044 	and.w	r0, r2, #68	; 0x44
 800080c:	2844      	cmp	r0, #68	; 0x44
 800080e:	d103      	bne.n	8000818 <cbvprintf+0xcc>
		conv->flag_zero = false;
 8000810:	f36f 1286 	bfc	r2, #6, #1
 8000814:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
 8000818:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 800081c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 800081e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000822:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 8000826:	d17b      	bne.n	8000920 <cbvprintf+0x1d4>
		conv->width_star = true;
 8000828:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800082c:	f042 0201 	orr.w	r2, r2, #1
			++sp;
 8000830:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 8000832:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	2a2e      	cmp	r2, #46	; 0x2e
 800083a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800083e:	bf0c      	ite	eq
 8000840:	2101      	moveq	r1, #1
 8000842:	2100      	movne	r1, #0
 8000844:	f361 0241 	bfi	r2, r1, #1, #1
 8000848:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 800084c:	d174      	bne.n	8000938 <cbvprintf+0x1ec>
	if (*sp == '*') {
 800084e:	785a      	ldrb	r2, [r3, #1]
 8000850:	2a2a      	cmp	r2, #42	; 0x2a
 8000852:	d06a      	beq.n	800092a <cbvprintf+0x1de>
	++sp;
 8000854:	3301      	adds	r3, #1
	size_t val = 0;
 8000856:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 8000858:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 800085a:	4618      	mov	r0, r3
 800085c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000860:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000864:	2f09      	cmp	r7, #9
 8000866:	f240 808e 	bls.w	8000986 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
 800086a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
 800086e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 8000870:	f3c2 0040 	ubfx	r0, r2, #1, #1
 8000874:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
 8000878:	f361 0241 	bfi	r2, r1, #1, #1
 800087c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 8000880:	e05a      	b.n	8000938 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
 8000882:	f10a 0702 	add.w	r7, sl, #2
 8000886:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
 800088a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800088e:	07d9      	lsls	r1, r3, #31
 8000890:	f140 8149 	bpl.w	8000b26 <cbvprintf+0x3da>
			width = va_arg(ap, int);
 8000894:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
 8000898:	f1b9 0f00 	cmp.w	r9, #0
 800089c:	da07      	bge.n	80008ae <cbvprintf+0x162>
				conv->flag_dash = true;
 800089e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80008a2:	f042 0204 	orr.w	r2, r2, #4
 80008a6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
 80008aa:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
 80008ae:	075a      	lsls	r2, r3, #29
 80008b0:	f140 8142 	bpl.w	8000b38 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
 80008b4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 80008b8:	f1b8 0f00 	cmp.w	r8, #0
 80008bc:	f280 8141 	bge.w	8000b42 <cbvprintf+0x3f6>
				conv->prec_present = false;
 80008c0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80008c4:	f36f 0341 	bfc	r3, #1, #1
 80008c8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 80008cc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80008d0:	e137      	b.n	8000b42 <cbvprintf+0x3f6>
		switch (*sp) {
 80008d2:	2b2d      	cmp	r3, #45	; 0x2d
 80008d4:	d00c      	beq.n	80008f0 <cbvprintf+0x1a4>
 80008d6:	2b30      	cmp	r3, #48	; 0x30
 80008d8:	f47f af6d 	bne.w	80007b6 <cbvprintf+0x6a>
			conv->flag_zero = true;
 80008dc:	2201      	movs	r2, #1
	} while (loop);
 80008de:	e75c      	b.n	800079a <cbvprintf+0x4e>
			conv->flag_plus = true;
 80008e0:	f04f 0c01 	mov.w	ip, #1
 80008e4:	e759      	b.n	800079a <cbvprintf+0x4e>
			conv->flag_space = true;
 80008e6:	f04f 0e01 	mov.w	lr, #1
 80008ea:	e756      	b.n	800079a <cbvprintf+0x4e>
			conv->flag_hash = true;
 80008ec:	2001      	movs	r0, #1
 80008ee:	e754      	b.n	800079a <cbvprintf+0x4e>
		switch (*sp) {
 80008f0:	2601      	movs	r6, #1
 80008f2:	e752      	b.n	800079a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
 80008f4:	fb0c 0202 	mla	r2, ip, r2, r0
 80008f8:	3a30      	subs	r2, #48	; 0x30
 80008fa:	4633      	mov	r3, r6
 80008fc:	461e      	mov	r6, r3
 80008fe:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000902:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000906:	2f09      	cmp	r7, #9
 8000908:	d9f4      	bls.n	80008f4 <cbvprintf+0x1a8>
	if (sp != wp) {
 800090a:	4299      	cmp	r1, r3
 800090c:	d093      	beq.n	8000836 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 800090e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
 8000912:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 8000914:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 8000916:	f362 0141 	bfi	r1, r2, #1, #1
 800091a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 800091e:	e78a      	b.n	8000836 <cbvprintf+0xea>
 8000920:	460b      	mov	r3, r1
	size_t val = 0;
 8000922:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000924:	f04f 0c0a 	mov.w	ip, #10
 8000928:	e7e8      	b.n	80008fc <cbvprintf+0x1b0>
		conv->prec_star = true;
 800092a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800092e:	f042 0204 	orr.w	r2, r2, #4
 8000932:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
 8000936:	3302      	adds	r3, #2
	switch (*sp) {
 8000938:	461f      	mov	r7, r3
 800093a:	f817 2b01 	ldrb.w	r2, [r7], #1
 800093e:	2a6c      	cmp	r2, #108	; 0x6c
 8000940:	d041      	beq.n	80009c6 <cbvprintf+0x27a>
 8000942:	d825      	bhi.n	8000990 <cbvprintf+0x244>
 8000944:	2a68      	cmp	r2, #104	; 0x68
 8000946:	d02b      	beq.n	80009a0 <cbvprintf+0x254>
 8000948:	2a6a      	cmp	r2, #106	; 0x6a
 800094a:	d046      	beq.n	80009da <cbvprintf+0x28e>
 800094c:	2a4c      	cmp	r2, #76	; 0x4c
 800094e:	d04c      	beq.n	80009ea <cbvprintf+0x29e>
 8000950:	461f      	mov	r7, r3
	conv->specifier = *sp++;
 8000952:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000956:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
 800095a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 800095e:	2a78      	cmp	r2, #120	; 0x78
 8000960:	f200 80d9 	bhi.w	8000b16 <cbvprintf+0x3ca>
 8000964:	2a57      	cmp	r2, #87	; 0x57
 8000966:	d84d      	bhi.n	8000a04 <cbvprintf+0x2b8>
 8000968:	2a41      	cmp	r2, #65	; 0x41
 800096a:	d003      	beq.n	8000974 <cbvprintf+0x228>
 800096c:	3a45      	subs	r2, #69	; 0x45
 800096e:	2a02      	cmp	r2, #2
 8000970:	f200 80d1 	bhi.w	8000b16 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
 8000974:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000978:	2204      	movs	r2, #4
 800097a:	f362 0302 	bfi	r3, r2, #0, #3
 800097e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
 8000982:	2301      	movs	r3, #1
			break;
 8000984:	e09e      	b.n	8000ac4 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
 8000986:	fb06 2101 	mla	r1, r6, r1, r2
 800098a:	3930      	subs	r1, #48	; 0x30
 800098c:	4603      	mov	r3, r0
 800098e:	e764      	b.n	800085a <cbvprintf+0x10e>
	switch (*sp) {
 8000990:	2a74      	cmp	r2, #116	; 0x74
 8000992:	d026      	beq.n	80009e2 <cbvprintf+0x296>
 8000994:	2a7a      	cmp	r2, #122	; 0x7a
 8000996:	d1db      	bne.n	8000950 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
 8000998:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800099c:	2206      	movs	r2, #6
 800099e:	e00d      	b.n	80009bc <cbvprintf+0x270>
		if (*++sp == 'h') {
 80009a0:	785a      	ldrb	r2, [r3, #1]
 80009a2:	2a68      	cmp	r2, #104	; 0x68
 80009a4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80009a8:	d106      	bne.n	80009b8 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
 80009aa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 80009ac:	f361 02c6 	bfi	r2, r1, #3, #4
 80009b0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
 80009b4:	1c9f      	adds	r7, r3, #2
 80009b6:	e7cc      	b.n	8000952 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
 80009b8:	4613      	mov	r3, r2
 80009ba:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
 80009bc:	f362 03c6 	bfi	r3, r2, #3, #4
 80009c0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 80009c4:	e7c5      	b.n	8000952 <cbvprintf+0x206>
		if (*++sp == 'l') {
 80009c6:	785a      	ldrb	r2, [r3, #1]
 80009c8:	2a6c      	cmp	r2, #108	; 0x6c
 80009ca:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80009ce:	d101      	bne.n	80009d4 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
 80009d0:	2104      	movs	r1, #4
 80009d2:	e7eb      	b.n	80009ac <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
 80009d4:	4613      	mov	r3, r2
 80009d6:	2203      	movs	r2, #3
 80009d8:	e7f0      	b.n	80009bc <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
 80009da:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80009de:	2205      	movs	r2, #5
 80009e0:	e7ec      	b.n	80009bc <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
 80009e2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80009e6:	2207      	movs	r2, #7
 80009e8:	e7e8      	b.n	80009bc <cbvprintf+0x270>
		conv->unsupported = true;
 80009ea:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80009ee:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80009f2:	f023 0302 	bic.w	r3, r3, #2
 80009f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
 8000a02:	e7a6      	b.n	8000952 <cbvprintf+0x206>
 8000a04:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 8000a08:	2920      	cmp	r1, #32
 8000a0a:	f200 8084 	bhi.w	8000b16 <cbvprintf+0x3ca>
 8000a0e:	a001      	add	r0, pc, #4	; (adr r0, 8000a14 <cbvprintf+0x2c8>)
 8000a10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8000a14:	08000ad9 	.word	0x08000ad9
 8000a18:	08000b17 	.word	0x08000b17
 8000a1c:	08000b17 	.word	0x08000b17
 8000a20:	08000b17 	.word	0x08000b17
 8000a24:	08000b17 	.word	0x08000b17
 8000a28:	08000b17 	.word	0x08000b17
 8000a2c:	08000b17 	.word	0x08000b17
 8000a30:	08000b17 	.word	0x08000b17
 8000a34:	08000b17 	.word	0x08000b17
 8000a38:	08000975 	.word	0x08000975
 8000a3c:	08000b17 	.word	0x08000b17
 8000a40:	08000ad9 	.word	0x08000ad9
 8000a44:	08000a99 	.word	0x08000a99
 8000a48:	08000975 	.word	0x08000975
 8000a4c:	08000975 	.word	0x08000975
 8000a50:	08000975 	.word	0x08000975
 8000a54:	08000b17 	.word	0x08000b17
 8000a58:	08000a99 	.word	0x08000a99
 8000a5c:	08000b17 	.word	0x08000b17
 8000a60:	08000b17 	.word	0x08000b17
 8000a64:	08000b17 	.word	0x08000b17
 8000a68:	08000b17 	.word	0x08000b17
 8000a6c:	08000ae1 	.word	0x08000ae1
 8000a70:	08000ad9 	.word	0x08000ad9
 8000a74:	08000afd 	.word	0x08000afd
 8000a78:	08000b17 	.word	0x08000b17
 8000a7c:	08000b17 	.word	0x08000b17
 8000a80:	08000afd 	.word	0x08000afd
 8000a84:	08000b17 	.word	0x08000b17
 8000a88:	08000ad9 	.word	0x08000ad9
 8000a8c:	08000b17 	.word	0x08000b17
 8000a90:	08000b17 	.word	0x08000b17
 8000a94:	08000ad9 	.word	0x08000ad9
		conv->specifier_cat = SPECIFIER_SINT;
 8000a98:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8000a9c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000a9e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8000aa2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000aa6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8000aa8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
 8000aac:	bf02      	ittt	eq
 8000aae:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
 8000ab2:	f041 0101 	orreq.w	r1, r1, #1
 8000ab6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 8000aba:	2a63      	cmp	r2, #99	; 0x63
 8000abc:	d131      	bne.n	8000b22 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8000abe:	3b00      	subs	r3, #0
 8000ac0:	bf18      	it	ne
 8000ac2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8000ac4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000ac8:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8000acc:	430b      	orrs	r3, r1
 8000ace:	f363 0241 	bfi	r2, r3, #1, #1
 8000ad2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 8000ad6:	e6d8      	b.n	800088a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
 8000ad8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8000adc:	2002      	movs	r0, #2
 8000ade:	e7de      	b.n	8000a9e <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
 8000ae0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000ae4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8000ae8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 8000aec:	2103      	movs	r1, #3
 8000aee:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000af2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 8000af4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000af8:	4143      	adcs	r3, r0
 8000afa:	e7e3      	b.n	8000ac4 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 8000afc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000b00:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 8000b02:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8000b06:	f361 0202 	bfi	r2, r1, #0, #3
 8000b0a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	e7d6      	b.n	8000ac4 <cbvprintf+0x378>
		conv->invalid = true;
 8000b16:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e7ce      	b.n	8000ac4 <cbvprintf+0x378>
		} else if (conv->width_present) {
 8000b26:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 8000b2a:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8000b2c:	bfb4      	ite	lt
 8000b2e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
 8000b32:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
 8000b36:	e6ba      	b.n	80008ae <cbvprintf+0x162>
		} else if (conv->prec_present) {
 8000b38:	079b      	lsls	r3, r3, #30
 8000b3a:	f57f aec7 	bpl.w	80008cc <cbvprintf+0x180>
			precision = conv->prec_value;
 8000b3e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
 8000b42:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
 8000b46:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8000b48:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000b4c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
 8000b50:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8000b54:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8000b56:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8000b5a:	d138      	bne.n	8000bce <cbvprintf+0x482>
			switch (length_mod) {
 8000b5c:	1ecb      	subs	r3, r1, #3
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d822      	bhi.n	8000ba8 <cbvprintf+0x45c>
 8000b62:	e8df f003 	tbb	[pc, r3]
 8000b66:	0903      	.short	0x0903
 8000b68:	2109      	.short	0x2109
 8000b6a:	21          	.byte	0x21
 8000b6b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8000b6c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 8000b70:	17da      	asrs	r2, r3, #31
 8000b72:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 8000b76:	e006      	b.n	8000b86 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
 8000b78:	3407      	adds	r4, #7
 8000b7a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 8000b7e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000b82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 8000b86:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8000b8a:	f013 0603 	ands.w	r6, r3, #3
 8000b8e:	d054      	beq.n	8000c3a <cbvprintf+0x4ee>
			OUTS(sp, fp);
 8000b90:	9802      	ldr	r0, [sp, #8]
 8000b92:	463b      	mov	r3, r7
 8000b94:	4652      	mov	r2, sl
 8000b96:	4659      	mov	r1, fp
 8000b98:	f002 ff2c 	bl	80039f4 <outs>
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	f2c0 8140 	blt.w	8000e22 <cbvprintf+0x6d6>
 8000ba2:	4405      	add	r5, r0
			continue;
 8000ba4:	46ba      	mov	sl, r7
 8000ba6:	e5d9      	b.n	800075c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000ba8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000bac:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000bae:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8000bb2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000bb6:	d105      	bne.n	8000bc4 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
 8000bb8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
 8000bbc:	930a      	str	r3, [sp, #40]	; 0x28
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8000bc2:	e7e0      	b.n	8000b86 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
 8000bc4:	2902      	cmp	r1, #2
 8000bc6:	d1de      	bne.n	8000b86 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
 8000bc8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8000bcc:	e7d0      	b.n	8000b70 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d123      	bne.n	8000c1a <cbvprintf+0x4ce>
			switch (length_mod) {
 8000bd2:	1ecb      	subs	r3, r1, #3
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d813      	bhi.n	8000c00 <cbvprintf+0x4b4>
 8000bd8:	e8df f003 	tbb	[pc, r3]
 8000bdc:	120a0a03 	.word	0x120a0a03
 8000be0:	12          	.byte	0x12
 8000be1:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8000be2:	6822      	ldr	r2, [r4, #0]
 8000be4:	920a      	str	r2, [sp, #40]	; 0x28
 8000be6:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 8000be8:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8000bea:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
 8000bec:	4604      	mov	r4, r0
 8000bee:	e7ca      	b.n	8000b86 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
 8000bf0:	1de0      	adds	r0, r4, #7
 8000bf2:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 8000bf6:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8000bfa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 8000bfe:	e7f5      	b.n	8000bec <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
 8000c00:	f854 3b04 	ldr.w	r3, [r4], #4
 8000c04:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000c06:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 8000c0e:	d0d3      	beq.n	8000bb8 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
 8000c10:	2902      	cmp	r1, #2
 8000c12:	d1b8      	bne.n	8000b86 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
 8000c14:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8000c18:	e7d0      	b.n	8000bbc <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d107      	bne.n	8000c2e <cbvprintf+0x4e2>
					(sint_value_type)va_arg(ap, long long);
 8000c1e:	3407      	adds	r4, #7
 8000c20:	f024 0407 	bic.w	r4, r4, #7
 8000c24:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
 8000c28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000c2c:	e7ab      	b.n	8000b86 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000c2e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8000c30:	bf04      	itt	eq
 8000c32:	f854 3b04 	ldreq.w	r3, [r4], #4
 8000c36:	930a      	streq	r3, [sp, #40]	; 0x28
 8000c38:	e7a5      	b.n	8000b86 <cbvprintf+0x43a>
		switch (conv->specifier) {
 8000c3a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000c3e:	2878      	cmp	r0, #120	; 0x78
 8000c40:	d8b0      	bhi.n	8000ba4 <cbvprintf+0x458>
 8000c42:	2862      	cmp	r0, #98	; 0x62
 8000c44:	d822      	bhi.n	8000c8c <cbvprintf+0x540>
 8000c46:	2825      	cmp	r0, #37	; 0x25
 8000c48:	f43f ad91 	beq.w	800076e <cbvprintf+0x22>
 8000c4c:	2858      	cmp	r0, #88	; 0x58
 8000c4e:	d1a9      	bne.n	8000ba4 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000c50:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000c5a:	ab04      	add	r3, sp, #16
 8000c5c:	aa0c      	add	r2, sp, #48	; 0x30
 8000c5e:	f002 fe83 	bl	8003968 <encode_uint>
 8000c62:	4682      	mov	sl, r0
			if (precision >= 0) {
 8000c64:	f1b8 0f00 	cmp.w	r8, #0
 8000c68:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8000c6c:	db0c      	blt.n	8000c88 <cbvprintf+0x53c>
				conv->flag_zero = false;
 8000c6e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 8000c72:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
 8000c76:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000c7a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8000c7c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 8000c80:	d902      	bls.n	8000c88 <cbvprintf+0x53c>
					conv->pad0_value = precision - (int)len;
 8000c82:	eba8 0303 	sub.w	r3, r8, r3
 8000c86:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 8000c88:	4680      	mov	r8, r0
 8000c8a:	e03d      	b.n	8000d08 <cbvprintf+0x5bc>
 8000c8c:	3863      	subs	r0, #99	; 0x63
 8000c8e:	2815      	cmp	r0, #21
 8000c90:	d888      	bhi.n	8000ba4 <cbvprintf+0x458>
 8000c92:	a201      	add	r2, pc, #4	; (adr r2, 8000c98 <cbvprintf+0x54c>)
 8000c94:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000c98:	08000d19 	.word	0x08000d19
 8000c9c:	08000d7d 	.word	0x08000d7d
 8000ca0:	08000ba5 	.word	0x08000ba5
 8000ca4:	08000ba5 	.word	0x08000ba5
 8000ca8:	08000ba5 	.word	0x08000ba5
 8000cac:	08000ba5 	.word	0x08000ba5
 8000cb0:	08000d7d 	.word	0x08000d7d
 8000cb4:	08000ba5 	.word	0x08000ba5
 8000cb8:	08000ba5 	.word	0x08000ba5
 8000cbc:	08000ba5 	.word	0x08000ba5
 8000cc0:	08000ba5 	.word	0x08000ba5
 8000cc4:	08000dd7 	.word	0x08000dd7
 8000cc8:	08000da5 	.word	0x08000da5
 8000ccc:	08000da9 	.word	0x08000da9
 8000cd0:	08000ba5 	.word	0x08000ba5
 8000cd4:	08000ba5 	.word	0x08000ba5
 8000cd8:	08000cf1 	.word	0x08000cf1
 8000cdc:	08000ba5 	.word	0x08000ba5
 8000ce0:	08000da5 	.word	0x08000da5
 8000ce4:	08000ba5 	.word	0x08000ba5
 8000ce8:	08000ba5 	.word	0x08000ba5
 8000cec:	08000da5 	.word	0x08000da5
			if (precision >= 0) {
 8000cf0:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8000cf4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
 8000cf8:	db0a      	blt.n	8000d10 <cbvprintf+0x5c4>
				len = strnlen(bps, precision);
 8000cfa:	4641      	mov	r1, r8
 8000cfc:	4650      	mov	r0, sl
 8000cfe:	f002 fffb 	bl	8003cf8 <strnlen>
			bpe = bps + len;
 8000d02:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
 8000d06:	2600      	movs	r6, #0
		if (bps == NULL) {
 8000d08:	f1ba 0f00 	cmp.w	sl, #0
 8000d0c:	d10c      	bne.n	8000d28 <cbvprintf+0x5dc>
 8000d0e:	e749      	b.n	8000ba4 <cbvprintf+0x458>
				len = strlen(bps);
 8000d10:	4650      	mov	r0, sl
 8000d12:	f002 ffea 	bl	8003cea <strlen>
 8000d16:	e7f4      	b.n	8000d02 <cbvprintf+0x5b6>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d1a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
 8000d1e:	2600      	movs	r6, #0
			bps = buf;
 8000d20:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
 8000d24:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
 8000d28:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
 8000d2c:	b106      	cbz	r6, 8000d30 <cbvprintf+0x5e4>
			nj_len += 1U;
 8000d2e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8000d30:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000d34:	06d0      	lsls	r0, r2, #27
 8000d36:	d568      	bpl.n	8000e0a <cbvprintf+0x6be>
			nj_len += 2U;
 8000d38:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 8000d3a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 8000d3c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 8000d3e:	bf48      	it	mi
 8000d40:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 8000d42:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8000d44:	bf48      	it	mi
 8000d46:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 8000d48:	f1b9 0f00 	cmp.w	r9, #0
 8000d4c:	dd76      	ble.n	8000e3c <cbvprintf+0x6f0>
			if (!conv->flag_dash) {
 8000d4e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 8000d52:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
 8000d56:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000d5a:	9303      	str	r3, [sp, #12]
 8000d5c:	0753      	lsls	r3, r2, #29
 8000d5e:	d46d      	bmi.n	8000e3c <cbvprintf+0x6f0>
				if (conv->flag_zero) {
 8000d60:	0650      	lsls	r0, r2, #25
 8000d62:	d561      	bpl.n	8000e28 <cbvprintf+0x6dc>
					if (sign != 0) {
 8000d64:	b146      	cbz	r6, 8000d78 <cbvprintf+0x62c>
						OUTC(sign);
 8000d66:	9b02      	ldr	r3, [sp, #8]
 8000d68:	4659      	mov	r1, fp
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	4798      	blx	r3
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	db57      	blt.n	8000e22 <cbvprintf+0x6d6>
						sign = 0;
 8000d72:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8000d74:	3501      	adds	r5, #1
						sign = 0;
 8000d76:	461e      	mov	r6, r3
					pad = '0';
 8000d78:	2330      	movs	r3, #48	; 0x30
 8000d7a:	e056      	b.n	8000e2a <cbvprintf+0x6de>
			if (conv->flag_plus) {
 8000d7c:	071e      	lsls	r6, r3, #28
 8000d7e:	d40f      	bmi.n	8000da0 <cbvprintf+0x654>
				sign = ' ';
 8000d80:	f013 0610 	ands.w	r6, r3, #16
 8000d84:	bf18      	it	ne
 8000d86:	2620      	movne	r6, #32
			sint = value->sint;
 8000d88:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f6bf af5f 	bge.w	8000c50 <cbvprintf+0x504>
				value->uint = (uint_value_type)-sint;
 8000d92:	4252      	negs	r2, r2
 8000d94:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
 8000d9c:	262d      	movs	r6, #45	; 0x2d
 8000d9e:	e757      	b.n	8000c50 <cbvprintf+0x504>
				sign = '+';
 8000da0:	262b      	movs	r6, #43	; 0x2b
 8000da2:	e7f1      	b.n	8000d88 <cbvprintf+0x63c>
		switch (conv->specifier) {
 8000da4:	2600      	movs	r6, #0
 8000da6:	e753      	b.n	8000c50 <cbvprintf+0x504>
			if (value->ptr != NULL) {
 8000da8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000daa:	b340      	cbz	r0, 8000dfe <cbvprintf+0x6b2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000dac:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	aa0c      	add	r2, sp, #48	; 0x30
 8000db4:	ab04      	add	r3, sp, #16
 8000db6:	2100      	movs	r1, #0
 8000db8:	f002 fdd6 	bl	8003968 <encode_uint>
				conv->altform_0c = true;
 8000dbc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8000dc0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000dc4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000dc8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000dcc:	4682      	mov	sl, r0
				conv->altform_0c = true;
 8000dce:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
 8000dd2:	2600      	movs	r6, #0
				goto prec_int_pad0;
 8000dd4:	e746      	b.n	8000c64 <cbvprintf+0x518>
				store_count(conv, value->ptr, count);
 8000dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8000dd8:	2907      	cmp	r1, #7
 8000dda:	f63f aee3 	bhi.w	8000ba4 <cbvprintf+0x458>
 8000dde:	e8df f001 	tbb	[pc, r1]
 8000de2:	040c      	.short	0x040c
 8000de4:	08080c06 	.word	0x08080c06
 8000de8:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 8000dea:	701d      	strb	r5, [r3, #0]
		break;
 8000dec:	e6da      	b.n	8000ba4 <cbvprintf+0x458>
		*(short *)dp = (short)count;
 8000dee:	801d      	strh	r5, [r3, #0]
		break;
 8000df0:	e6d8      	b.n	8000ba4 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
 8000df2:	17ea      	asrs	r2, r5, #31
 8000df4:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8000df8:	e6d4      	b.n	8000ba4 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000dfa:	601d      	str	r5, [r3, #0]
		break;
 8000dfc:	e6d2      	b.n	8000ba4 <cbvprintf+0x458>
			bps = "(nil)";
 8000dfe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000ec8 <cbvprintf+0x77c>
 8000e02:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000e04:	f10a 0805 	add.w	r8, sl, #5
 8000e08:	e78e      	b.n	8000d28 <cbvprintf+0x5dc>
		} else if (conv->altform_0) {
 8000e0a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 8000e0c:	bf48      	it	mi
 8000e0e:	3301      	addmi	r3, #1
 8000e10:	e793      	b.n	8000d3a <cbvprintf+0x5ee>
					OUTC(pad);
 8000e12:	4618      	mov	r0, r3
 8000e14:	9303      	str	r3, [sp, #12]
 8000e16:	4659      	mov	r1, fp
 8000e18:	9b02      	ldr	r3, [sp, #8]
 8000e1a:	4798      	blx	r3
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	9b03      	ldr	r3, [sp, #12]
 8000e20:	da04      	bge.n	8000e2c <cbvprintf+0x6e0>
#undef OUTS
#undef OUTC
}
 8000e22:	b011      	add	sp, #68	; 0x44
 8000e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000e28:	2320      	movs	r3, #32
 8000e2a:	444d      	add	r5, r9
 8000e2c:	464a      	mov	r2, r9
				while (width-- > 0) {
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	eba5 0109 	sub.w	r1, r5, r9
 8000e34:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8000e38:	dceb      	bgt.n	8000e12 <cbvprintf+0x6c6>
 8000e3a:	460d      	mov	r5, r1
		if (sign != 0) {
 8000e3c:	b136      	cbz	r6, 8000e4c <cbvprintf+0x700>
			OUTC(sign);
 8000e3e:	9b02      	ldr	r3, [sp, #8]
 8000e40:	4659      	mov	r1, fp
 8000e42:	4630      	mov	r0, r6
 8000e44:	4798      	blx	r3
 8000e46:	2800      	cmp	r0, #0
 8000e48:	dbeb      	blt.n	8000e22 <cbvprintf+0x6d6>
 8000e4a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000e4c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000e50:	06d9      	lsls	r1, r3, #27
 8000e52:	d401      	bmi.n	8000e58 <cbvprintf+0x70c>
 8000e54:	071a      	lsls	r2, r3, #28
 8000e56:	d506      	bpl.n	8000e66 <cbvprintf+0x71a>
				OUTC('0');
 8000e58:	9b02      	ldr	r3, [sp, #8]
 8000e5a:	4659      	mov	r1, fp
 8000e5c:	2030      	movs	r0, #48	; 0x30
 8000e5e:	4798      	blx	r3
 8000e60:	2800      	cmp	r0, #0
 8000e62:	dbde      	blt.n	8000e22 <cbvprintf+0x6d6>
 8000e64:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000e66:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000e6a:	06db      	lsls	r3, r3, #27
 8000e6c:	d507      	bpl.n	8000e7e <cbvprintf+0x732>
				OUTC(conv->specifier);
 8000e6e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000e72:	9b02      	ldr	r3, [sp, #8]
 8000e74:	4659      	mov	r1, fp
 8000e76:	4798      	blx	r3
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	dbd2      	blt.n	8000e22 <cbvprintf+0x6d6>
 8000e7c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000e7e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8000e80:	442e      	add	r6, r5
 8000e82:	1b73      	subs	r3, r6, r5
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	dc16      	bgt.n	8000eb6 <cbvprintf+0x76a>
			OUTS(bps, bpe);
 8000e88:	9802      	ldr	r0, [sp, #8]
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	4652      	mov	r2, sl
 8000e8e:	4659      	mov	r1, fp
 8000e90:	f002 fdb0 	bl	80039f4 <outs>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	dbc4      	blt.n	8000e22 <cbvprintf+0x6d6>
 8000e98:	4405      	add	r5, r0
		while (width > 0) {
 8000e9a:	44a9      	add	r9, r5
 8000e9c:	eba9 0305 	sub.w	r3, r9, r5
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f77f ae7f 	ble.w	8000ba4 <cbvprintf+0x458>
			OUTC(' ');
 8000ea6:	9b02      	ldr	r3, [sp, #8]
 8000ea8:	4659      	mov	r1, fp
 8000eaa:	2020      	movs	r0, #32
 8000eac:	4798      	blx	r3
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	dbb7      	blt.n	8000e22 <cbvprintf+0x6d6>
 8000eb2:	3501      	adds	r5, #1
			--width;
 8000eb4:	e7f2      	b.n	8000e9c <cbvprintf+0x750>
				OUTC('0');
 8000eb6:	9b02      	ldr	r3, [sp, #8]
 8000eb8:	4659      	mov	r1, fp
 8000eba:	2030      	movs	r0, #48	; 0x30
 8000ebc:	4798      	blx	r3
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	dbaf      	blt.n	8000e22 <cbvprintf+0x6d6>
 8000ec2:	3501      	adds	r5, #1
 8000ec4:	e7dd      	b.n	8000e82 <cbvprintf+0x736>
 8000ec6:	bf00      	nop
 8000ec8:	08004d41 	.word	0x08004d41

08000ecc <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000ecc:	f04f 0210 	mov.w	r2, #16
 8000ed0:	f3ef 8311 	mrs	r3, BASEPRI
 8000ed4:	f382 8811 	msr	BASEPRI, r2
 8000ed8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000edc:	f383 8811 	msr	BASEPRI, r3
 8000ee0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000ee4:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <st_stm32f4_init+0x24>)
 8000ee6:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <st_stm32f4_init+0x28>)
 8000ee8:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000eea:	2000      	movs	r0, #0
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000012c 	.word	0x2000012c
 8000ef4:	00f42400 	.word	0x00f42400

08000ef8 <tty_init>:

	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
 8000ef8:	4602      	mov	r2, r0
 8000efa:	b510      	push	{r4, lr}
	if (!uart_dev) {
 8000efc:	4608      	mov	r0, r1
 8000efe:	b199      	cbz	r1, 8000f28 <tty_init+0x30>
	}

	tty->uart_dev = uart_dev;

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
 8000f00:	2400      	movs	r4, #0
	tty->tx_ringbuf = NULL;
	tty->tx_ringbuf_sz = 0U;

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;

	tty->rx_timeout = SYS_FOREVER_MS;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	tty->tx_timeout = SYS_FOREVER_MS;
 8000f06:	e9c2 430f 	strd	r4, r3, [r2, #60]	; 0x3c
	tty->rx_timeout = SYS_FOREVER_MS;
 8000f0a:	6213      	str	r3, [r2, #32]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 8000f0c:	688b      	ldr	r3, [r1, #8]
	tty->uart_dev = uart_dev;
 8000f0e:	6011      	str	r1, [r2, #0]
	tty->rx_ringbuf_sz = 0U;
 8000f10:	e9c2 4405 	strd	r4, r4, [r2, #20]
	tty->tx_ringbuf_sz = 0U;
 8000f14:	e9c2 440d 	strd	r4, r4, [r2, #52]	; 0x34
	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
 8000f18:	61d4      	str	r4, [r2, #28]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8000f1a:	b143      	cbz	r3, 8000f2e <tty_init+0x36>
 8000f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f1e:	b133      	cbz	r3, 8000f2e <tty_init+0x36>
		api->irq_callback_set(dev, cb, user_data);
 8000f20:	4904      	ldr	r1, [pc, #16]	; (8000f34 <tty_init+0x3c>)
 8000f22:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
 8000f24:	4620      	mov	r0, r4
}
 8000f26:	bd10      	pop	{r4, pc}
		return -ENODEV;
 8000f28:	f06f 0012 	mvn.w	r0, #18
 8000f2c:	e7fb      	b.n	8000f26 <tty_init+0x2e>
	return 0;
 8000f2e:	4618      	mov	r0, r3
 8000f30:	e7f9      	b.n	8000f26 <tty_init+0x2e>
 8000f32:	bf00      	nop
 8000f34:	08003ab1 	.word	0x08003ab1

08000f38 <console_init>:

	return c;
}

int console_init(void)
{
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	480e      	ldr	r0, [pc, #56]	; (8000f74 <console_init+0x3c>)
 8000f3c:	f001 fc20 	bl	8002780 <z_impl_device_get_binding>
	const struct device *uart_dev;
	int ret;

	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	ret = tty_init(&console_serial, uart_dev);
 8000f40:	4601      	mov	r1, r0
 8000f42:	4605      	mov	r5, r0
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <console_init+0x40>)
 8000f46:	f7ff ffd7 	bl	8000ef8 <tty_init>

	if (ret) {
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	b960      	cbnz	r0, 8000f68 <console_init+0x30>

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
 8000f4e:	68ab      	ldr	r3, [r5, #8]
 8000f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f52:	b15b      	cbz	r3, 8000f6c <console_init+0x34>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
 8000f54:	4909      	ldr	r1, [pc, #36]	; (8000f7c <console_init+0x44>)
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <console_init+0x40>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	f002 fe1a 	bl	8003b92 <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <console_init+0x48>)
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <console_init+0x40>)
 8000f62:	2210      	movs	r2, #16
 8000f64:	f002 fdfc 	bl	8003b60 <tty_set_rx_buf>

	return 0;
}
 8000f68:	4620      	mov	r0, r4
 8000f6a:	bd38      	pop	{r3, r4, r5, pc}
			return -ENOTSUP;
 8000f6c:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8000f70:	e7fa      	b.n	8000f68 <console_init+0x30>
 8000f72:	bf00      	nop
 8000f74:	08004d47 	.word	0x08004d47
 8000f78:	20000408 	.word	0x20000408
 8000f7c:	20000604 	.word	0x20000604
 8000f80:	200005f4 	.word	0x200005f4

08000f84 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 8000f84:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
 8000f86:	4c04      	ldr	r4, [pc, #16]	; (8000f98 <__do_init_array_aux+0x14>)
 8000f88:	4d04      	ldr	r5, [pc, #16]	; (8000f9c <__do_init_array_aux+0x18>)
 8000f8a:	42ac      	cmp	r4, r5
 8000f8c:	d300      	bcc.n	8000f90 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
 8000f90:	f854 3b04 	ldr.w	r3, [r4], #4
 8000f94:	4798      	blx	r3
		func++) {
 8000f96:	e7f8      	b.n	8000f8a <__do_init_array_aux+0x6>
 8000f98:	08004970 	.word	0x08004970
 8000f9c:	08004974 	.word	0x08004974

08000fa0 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
 8000fa0:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8000fa2:	4c05      	ldr	r4, [pc, #20]	; (8000fb8 <__do_global_ctors_aux+0x18>)
 8000fa4:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
 8000fa6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8000faa:	b905      	cbnz	r5, 8000fae <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
 8000fac:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
 8000fae:	f854 3904 	ldr.w	r3, [r4], #-4
 8000fb2:	3d01      	subs	r5, #1
 8000fb4:	4798      	blx	r3
 8000fb6:	e7f8      	b.n	8000faa <__do_global_ctors_aux+0xa>
 8000fb8:	08004968 	.word	0x08004968

08000fbc <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <console_out+0x2c>)
{
 8000fbe:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
 8000fc0:	b2c6      	uxtb	r6, r0
 8000fc2:	681b      	ldr	r3, [r3, #0]
{
 8000fc4:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	4798      	blx	r3

	if (handled_by_debug_server) {
 8000fca:	2801      	cmp	r0, #1
 8000fcc:	d00a      	beq.n	8000fe4 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8000fce:	2c0a      	cmp	r4, #10
 8000fd0:	4d06      	ldr	r5, [pc, #24]	; (8000fec <console_out+0x30>)
 8000fd2:	d103      	bne.n	8000fdc <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
 8000fd4:	6828      	ldr	r0, [r5, #0]
 8000fd6:	210d      	movs	r1, #13
 8000fd8:	f002 fdf1 	bl	8003bbe <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
 8000fdc:	6828      	ldr	r0, [r5, #0]
 8000fde:	4631      	mov	r1, r6
 8000fe0:	f002 fded 	bl	8003bbe <uart_poll_out>

	return c;
}
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
 8000fe8:	200000a4 	.word	0x200000a4
 8000fec:	20000450 	.word	0x20000450

08000ff0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	4807      	ldr	r0, [pc, #28]	; (8001010 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
 8000ff4:	4c07      	ldr	r4, [pc, #28]	; (8001014 <uart_console_init+0x24>)
 8000ff6:	f001 fbc3 	bl	8002780 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <uart_console_init+0x28>)
 8000ffc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 8000ffe:	4620      	mov	r0, r4
 8001000:	f000 fdde 	bl	8001bc0 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8001004:	4620      	mov	r0, r4
 8001006:	f7ff fb8d 	bl	8000724 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
 800100a:	2000      	movs	r0, #0
 800100c:	bd10      	pop	{r4, pc}
 800100e:	bf00      	nop
 8001010:	08004d47 	.word	0x08004d47
 8001014:	08000fbd 	.word	0x08000fbd
 8001018:	20000450 	.word	0x20000450

0800101c <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 800101c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001020:	4f0d      	ldr	r7, [pc, #52]	; (8001058 <__stm32_exti_isr.isra.0+0x3c>)
 8001022:	4604      	mov	r4, r0
 8001024:	460e      	mov	r6, r1
 8001026:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001028:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800102c:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8001030:	42b4      	cmp	r4, r6
 8001032:	db01      	blt.n	8001038 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8001034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001038:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800103a:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 800103e:	ea33 0202 	bics.w	r2, r3, r2
 8001042:	d107      	bne.n	8001054 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001044:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8001046:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 800104a:	b11b      	cbz	r3, 8001054 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 800104c:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8001050:	4620      	mov	r0, r4
 8001052:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8001054:	3401      	adds	r4, #1
 8001056:	e7eb      	b.n	8001030 <__stm32_exti_isr.isra.0+0x14>
 8001058:	40013c00 	.word	0x40013c00

0800105c <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 800105e:	2301      	movs	r3, #1
 8001060:	6811      	ldr	r1, [r2, #0]
 8001062:	4083      	lsls	r3, r0
 8001064:	430b      	orrs	r3, r1
 8001066:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <stm32_exti_enable+0x18>)
 800106a:	5618      	ldrsb	r0, [r3, r0]
 800106c:	f000 bace 	b.w	800160c <arch_irq_enable>
 8001070:	40013c00 	.word	0x40013c00
 8001074:	08004d6c 	.word	0x08004d6c

08001078 <stm32_exti_disable>:
	if (line < 32) {
 8001078:	281f      	cmp	r0, #31
 800107a:	dc07      	bgt.n	800108c <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800107c:	4904      	ldr	r1, [pc, #16]	; (8001090 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 800107e:	2201      	movs	r2, #1
 8001080:	680b      	ldr	r3, [r1, #0]
 8001082:	fa02 f000 	lsl.w	r0, r2, r0
 8001086:	ea23 0000 	bic.w	r0, r3, r0
 800108a:	6008      	str	r0, [r1, #0]
}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40013c00 	.word	0x40013c00

08001094 <stm32_exti_trigger>:
	switch (trigger) {
 8001094:	2903      	cmp	r1, #3
 8001096:	d80f      	bhi.n	80010b8 <stm32_exti_trigger+0x24>
 8001098:	e8df f001 	tbb	[pc, r1]
 800109c:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 80010a2:	2201      	movs	r2, #1
 80010a4:	6899      	ldr	r1, [r3, #8]
 80010a6:	fa02 f000 	lsl.w	r0, r2, r0
 80010aa:	ea21 0100 	bic.w	r1, r1, r0
 80010ae:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 80010b6:	60d8      	str	r0, [r3, #12]
}
 80010b8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80010ba:	2301      	movs	r3, #1
 80010bc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <stm32_exti_trigger+0x64>)
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	4302      	orrs	r2, r0
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	e7f2      	b.n	80010b0 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80010ca:	2301      	movs	r3, #1
 80010cc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <stm32_exti_trigger+0x64>)
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	4302      	orrs	r2, r0
 80010d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	ea22 0000 	bic.w	r0, r2, r0
 80010de:	6098      	str	r0, [r3, #8]
}
 80010e0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80010e2:	2301      	movs	r3, #1
 80010e4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <stm32_exti_trigger+0x64>)
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	4302      	orrs	r2, r0
 80010ee:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	4310      	orrs	r0, r2
 80010f4:	e7df      	b.n	80010b6 <stm32_exti_trigger+0x22>
 80010f6:	bf00      	nop
 80010f8:	40013c00 	.word	0x40013c00

080010fc <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <stm32_exti_set_callback+0x20>)
{
 80010fe:	b510      	push	{r4, lr}
 8001100:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 8001102:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8001106:	b928      	cbnz	r0, 8001114 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8001108:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 800110c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001110:	605a      	str	r2, [r3, #4]

	return 0;
}
 8001112:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8001114:	f06f 000f 	mvn.w	r0, #15
 8001118:	e7fb      	b.n	8001112 <stm32_exti_set_callback+0x16>
 800111a:	bf00      	nop
 800111c:	20000458 	.word	0x20000458

08001120 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <stm32_exti_unset_callback+0x10>)
 8001122:	2200      	movs	r2, #0
 8001124:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8001128:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800112c:	605a      	str	r2, [r3, #4]
}
 800112e:	4770      	bx	lr
 8001130:	20000458 	.word	0x20000458

08001134 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8001134:	680b      	ldr	r3, [r1, #0]
{
 8001136:	b086      	sub	sp, #24
 8001138:	2b06      	cmp	r3, #6
 800113a:	d839      	bhi.n	80011b0 <stm32_clock_control_on+0x7c>
 800113c:	e8df f003 	tbb	[pc, r3]
 8001140:	2e241004 	.word	0x2e241004
 8001144:	3838      	.short	0x3838
 8001146:	1a          	.byte	0x1a
 8001147:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <stm32_clock_control_on+0x84>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 800114a:	684b      	ldr	r3, [r1, #4]
 800114c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800114e:	4319      	orrs	r1, r3
 8001150:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001152:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001154:	4013      	ands	r3, r2
 8001156:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001158:	9b01      	ldr	r3, [sp, #4]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800115a:	2000      	movs	r0, #0
}
 800115c:	b006      	add	sp, #24
 800115e:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001160:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <stm32_clock_control_on+0x84>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8001162:	684b      	ldr	r3, [r1, #4]
 8001164:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001166:	4319      	orrs	r1, r3
 8001168:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800116a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800116c:	4013      	ands	r3, r2
 800116e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001170:	9b02      	ldr	r3, [sp, #8]
 8001172:	e7f2      	b.n	800115a <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001174:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <stm32_clock_control_on+0x84>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8001176:	684b      	ldr	r3, [r1, #4]
 8001178:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800117a:	4319      	orrs	r1, r3
 800117c:	6391      	str	r1, [r2, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800117e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001180:	4013      	ands	r3, r2
 8001182:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001184:	9b03      	ldr	r3, [sp, #12]
 8001186:	e7e8      	b.n	800115a <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001188:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <stm32_clock_control_on+0x84>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 800118a:	684b      	ldr	r3, [r1, #4]
 800118c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800118e:	4319      	orrs	r1, r3
 8001190:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001192:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001194:	4013      	ands	r3, r2
 8001196:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001198:	9b04      	ldr	r3, [sp, #16]
 800119a:	e7de      	b.n	800115a <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <stm32_clock_control_on+0x84>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 800119e:	684b      	ldr	r3, [r1, #4]
 80011a0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80011a2:	4319      	orrs	r1, r3
 80011a4:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011a8:	4013      	ands	r3, r2
 80011aa:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 80011ac:	9b05      	ldr	r3, [sp, #20]
 80011ae:	e7d4      	b.n	800115a <stm32_clock_control_on+0x26>
	switch (pclken->bus) {
 80011b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80011b4:	e7d2      	b.n	800115c <stm32_clock_control_on+0x28>
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <stm32_clock_control_get_subsys_rate+0x24>)
 80011be:	6809      	ldr	r1, [r1, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
	uint32_t apb2_clock = get_bus_clock(ahb_clock, STM32_APB2_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80011c2:	2906      	cmp	r1, #6
 80011c4:	d809      	bhi.n	80011da <stm32_clock_control_get_subsys_rate+0x1e>
 80011c6:	e8df f001 	tbb	[pc, r1]
 80011ca:	0505      	.short	0x0505
 80011cc:	08080504 	.word	0x08080504
 80011d0:	05          	.byte	0x05
 80011d1:	00          	.byte	0x00
	return clock / prescaler;
 80011d2:	085b      	lsrs	r3, r3, #1
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 80011d4:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80011d6:	2000      	movs	r0, #0
		break;
 80011d8:	4770      	bx	lr
	switch (pclken->bus) {
 80011da:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80011de:	4770      	bx	lr
 80011e0:	2000012c 	.word	0x2000012c

080011e4 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 80011e4:	b530      	push	{r4, r5, lr}
 80011e6:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 80011e8:	2300      	movs	r3, #0
 80011ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ee:	e9cd 3200 	strd	r3, r2, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 80011f2:	9302      	str	r3, [sp, #8]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80011f4:	f000 f870 	bl	80012d8 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80011f8:	a803      	add	r0, sp, #12
 80011fa:	f002 fd56 	bl	8003caa <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <stm32_clock_control_init+0x7c>)
 8001200:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8001202:	0791      	lsls	r1, r2, #30
 8001204:	d406      	bmi.n	8001214 <stm32_clock_control_init+0x30>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	f042 0201 	orr.w	r2, r2, #1
 800120c:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800120e:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8001210:	0792      	lsls	r2, r2, #30
 8001212:	d5fc      	bpl.n	800120e <stm32_clock_control_init+0x2a>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001214:	4c12      	ldr	r4, [pc, #72]	; (8001260 <stm32_clock_control_init+0x7c>)
 8001216:	68a3      	ldr	r3, [r4, #8]
 8001218:	f023 0303 	bic.w	r3, r3, #3
 800121c:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800121e:	68a3      	ldr	r3, [r4, #8]
 8001220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001224:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001226:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001228:	f015 050c 	ands.w	r5, r5, #12
 800122c:	d1fb      	bne.n	8001226 <stm32_clock_control_init+0x42>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800122e:	6823      	ldr	r3, [r4, #0]

	/* Switch to PLL with HSE as clock source */
#ifdef CONFIG_SOC_SERIES_STM32WLX
	LL_RCC_HSE_EnableTcxo();
#endif
	LL_PLL_ConfigSystemClock_HSE(
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <stm32_clock_control_init+0x80>)
 8001232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001236:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8001238:	6863      	ldr	r3, [r4, #4]
 800123a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800123e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001242:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 8001244:	aa03      	add	r2, sp, #12
 8001246:	466b      	mov	r3, sp
 8001248:	2101      	movs	r1, #1
 800124a:	f001 fa3f 	bl	80026cc <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8001256:	f002 fd31 	bl	8003cbc <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800125a:	4628      	mov	r0, r5
 800125c:	b007      	add	sp, #28
 800125e:	bd30      	pop	{r4, r5, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	007a1200 	.word	0x007a1200

08001268 <stm32_clock_control_off>:
	switch (pclken->bus) {
 8001268:	680b      	ldr	r3, [r1, #0]
{
 800126a:	b082      	sub	sp, #8
 800126c:	2b06      	cmp	r3, #6
 800126e:	d82d      	bhi.n	80012cc <stm32_clock_control_off+0x64>
 8001270:	e8df f003 	tbb	[pc, r3]
 8001274:	251e0d04 	.word	0x251e0d04
 8001278:	2c2c      	.short	0x2c2c
 800127a:	14          	.byte	0x14
 800127b:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 800127c:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <stm32_clock_control_off+0x6c>)
 800127e:	6849      	ldr	r1, [r1, #4]
 8001280:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001282:	ea23 0301 	bic.w	r3, r3, r1
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
	return 0;
 8001288:	2000      	movs	r0, #0
}
 800128a:	b002      	add	sp, #8
 800128c:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <stm32_clock_control_off+0x6c>)
 8001290:	6849      	ldr	r1, [r1, #4]
 8001292:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001294:	ea23 0301 	bic.w	r3, r3, r1
 8001298:	6353      	str	r3, [r2, #52]	; 0x34
 800129a:	e7f5      	b.n	8001288 <stm32_clock_control_off+0x20>
  SET_BIT(RCC->AHB3ENR, Periphs);
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <stm32_clock_control_off+0x6c>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 800129e:	684b      	ldr	r3, [r1, #4]
 80012a0:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80012a2:	4319      	orrs	r1, r3
 80012a4:	6391      	str	r1, [r2, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80012a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012a8:	4013      	ands	r3, r2
 80012aa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80012ac:	9b01      	ldr	r3, [sp, #4]
 80012ae:	e7eb      	b.n	8001288 <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80012b0:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <stm32_clock_control_off+0x6c>)
 80012b2:	6849      	ldr	r1, [r1, #4]
 80012b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012b6:	ea23 0301 	bic.w	r3, r3, r1
 80012ba:	6413      	str	r3, [r2, #64]	; 0x40
 80012bc:	e7e4      	b.n	8001288 <stm32_clock_control_off+0x20>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <stm32_clock_control_off+0x6c>)
 80012c0:	6849      	ldr	r1, [r1, #4]
 80012c2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80012c4:	ea23 0301 	bic.w	r3, r3, r1
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	e7dd      	b.n	8001288 <stm32_clock_control_off+0x20>
	switch (pclken->bus) {
 80012cc:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80012d0:	e7db      	b.n	800128a <stm32_clock_control_off+0x22>
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <config_enable_default_clocks+0x1c>)
 80012da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80012e4:	b082      	sub	sp, #8
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80012ec:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 80012ee:	b002      	add	sp, #8
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 80012f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct device *port_device;
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 80012fc:	460f      	mov	r7, r1
 80012fe:	b911      	cbnz	r1, 8001306 <stm32_dt_pinctrl_configure+0xe>
		/* Empty pinctrl. Exit */
		return 0;
 8001300:	2000      	movs	r0, #0
		ret = pm_device_put(port_device);
#endif
	}

	return ret;
}
 8001302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < list_size; i++) {
 8001306:	2600      	movs	r6, #0
		port_device = gpio_ports[STM32_PORT(pin)];
 8001308:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8001364 <stm32_dt_pinctrl_configure+0x6c>
 800130c:	1d04      	adds	r4, r0, #4
	uint32_t func = 0;
 800130e:	46b3      	mov	fp, r6
		mux = pinctrl[i].pinmux;
 8001310:	f854 5c04 	ldr.w	r5, [r4, #-4]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 8001314:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8001318:	d11e      	bne.n	8001358 <stm32_dt_pinctrl_configure+0x60>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 800131a:	6822      	ldr	r2, [r4, #0]
 800131c:	f042 0b20 	orr.w	fp, r2, #32
		port_device = gpio_ports[STM32_PORT(pin)];
 8001320:	f3c5 3303 	ubfx	r3, r5, #12, #4
		ret = gpio_stm32_clock_request(port_device, true);
 8001324:	2101      	movs	r1, #1
		port_device = gpio_ports[STM32_PORT(pin)];
 8001326:	f859 8023 	ldr.w	r8, [r9, r3, lsl #2]
		ret = gpio_stm32_clock_request(port_device, true);
 800132a:	4640      	mov	r0, r8
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800132c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
		ret = gpio_stm32_clock_request(port_device, true);
 8001330:	f000 fce0 	bl	8001cf4 <gpio_stm32_clock_request>
		if (ret != 0) {
 8001334:	2800      	cmp	r0, #0
 8001336:	d1e4      	bne.n	8001302 <stm32_dt_pinctrl_configure+0xa>
		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 8001338:	b2eb      	uxtb	r3, r5
	if (port_device == NULL) {
 800133a:	f1b8 0f00 	cmp.w	r8, #0
 800133e:	d005      	beq.n	800134c <stm32_dt_pinctrl_configure+0x54>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8001340:	465a      	mov	r2, fp
 8001342:	f00a 010f 	and.w	r1, sl, #15
 8001346:	4640      	mov	r0, r8
 8001348:	f002 fd9a 	bl	8003e80 <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 800134c:	3601      	adds	r6, #1
 800134e:	42b7      	cmp	r7, r6
 8001350:	f104 0408 	add.w	r4, r4, #8
 8001354:	d1dc      	bne.n	8001310 <stm32_dt_pinctrl_configure+0x18>
 8001356:	e7d3      	b.n	8001300 <stm32_dt_pinctrl_configure+0x8>
		} else if (STM32_DT_PINMUX_FUNC(mux) == ANALOG) {
 8001358:	b2eb      	uxtb	r3, r5
			func = STM32_MODER_ANALOG_MODE;
 800135a:	2b10      	cmp	r3, #16
 800135c:	bf08      	it	eq
 800135e:	f04f 0b30 	moveq.w	fp, #48	; 0x30
 8001362:	e7dd      	b.n	8001320 <stm32_dt_pinctrl_configure+0x28>
 8001364:	08004a44 	.word	0x08004a44

08001368 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8001368:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800136c:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 800136e:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001370:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001372:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <elapsed+0x34>)
 8001376:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800137a:	4909      	ldr	r1, [pc, #36]	; (80013a0 <elapsed+0x38>)
 800137c:	d101      	bne.n	8001382 <elapsed+0x1a>
	    || (val1 < val2)) {
 800137e:	4282      	cmp	r2, r0
 8001380:	d206      	bcs.n	8001390 <elapsed+0x28>
		overflow_cyc += last_load;
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	680c      	ldr	r4, [r1, #0]
 8001386:	4422      	add	r2, r4
 8001388:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800138a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800138e:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	680a      	ldr	r2, [r1, #0]
 8001394:	4413      	add	r3, r2
}
 8001396:	1a18      	subs	r0, r3, r0
 8001398:	bd10      	pop	{r4, pc}
 800139a:	bf00      	nop
 800139c:	20000524 	.word	0x20000524
 80013a0:	20000520 	.word	0x20000520

080013a4 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 80013a4:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 80013a6:	f7ff ffdf 	bl	8001368 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <sys_clock_isr+0x38>)
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <sys_clock_isr+0x3c>)
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	6811      	ldr	r1, [r2, #0]
 80013b2:	4408      	add	r0, r1
 80013b4:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <sys_clock_isr+0x40>)
 80013bc:	6813      	ldr	r3, [r2, #0]
 80013be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80013c2:	1ac0      	subs	r0, r0, r3
 80013c4:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 80013c8:	fb01 3300 	mla	r3, r1, r0, r3
 80013cc:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 80013ce:	f001 ffa9 	bl	8003324 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
}
 80013d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80013d6:	f000 bad9 	b.w	800198c <z_arm_exc_exit>
 80013da:	bf00      	nop
 80013dc:	20000524 	.word	0x20000524
 80013e0:	2000051c 	.word	0x2000051c
 80013e4:	20000518 	.word	0x20000518

080013e8 <sys_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <sys_clock_driver_init+0x28>)
 80013ea:	2210      	movs	r2, #16
 80013ec:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <sys_clock_driver_init+0x2c>)
 80013f2:	f242 527f 	movw	r2, #9599	; 0x257f
 80013f6:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <sys_clock_driver_init+0x30>)
 80013fa:	2000      	movs	r0, #0
 80013fc:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 80013fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001402:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001404:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	f042 0207 	orr.w	r2, r2, #7
 800140c:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00
 8001414:	20000520 	.word	0x20000520
 8001418:	20000524 	.word	0x20000524

0800141c <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
 800141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800141e:	4d32      	ldr	r5, [pc, #200]	; (80014e8 <sys_clock_set_timeout+0xcc>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8001420:	b159      	cbz	r1, 800143a <sys_clock_set_timeout+0x1e>
 8001422:	1c43      	adds	r3, r0, #1
 8001424:	d109      	bne.n	800143a <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001426:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800142a:	6913      	ldr	r3, [r2, #16]
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8001432:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001436:	602b      	str	r3, [r5, #0]
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 8001438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800143a:	f240 63d2 	movw	r3, #1746	; 0x6d2
 800143e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001442:	bf08      	it	eq
 8001444:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001446:	1e44      	subs	r4, r0, #1
 8001448:	2c00      	cmp	r4, #0
	uint32_t last_load_ = last_load;
 800144a:	682f      	ldr	r7, [r5, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800144c:	dd32      	ble.n	80014b4 <sys_clock_set_timeout+0x98>
 800144e:	429c      	cmp	r4, r3
 8001450:	bfa8      	it	ge
 8001452:	461c      	movge	r4, r3
	__asm__ volatile(
 8001454:	f04f 0310 	mov.w	r3, #16
 8001458:	f3ef 8611 	mrs	r6, BASEPRI
 800145c:	f383 8811 	msr	BASEPRI, r3
 8001460:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001464:	f7ff ff80 	bl	8001368 <elapsed>
	cycle_count += pending;
 8001468:	4920      	ldr	r1, [pc, #128]	; (80014ec <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 800146a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 800146e:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8001470:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8001474:	680b      	ldr	r3, [r1, #0]
 8001476:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <sys_clock_set_timeout+0xd4>)
	cycle_count += pending;
 800147a:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 800147c:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <sys_clock_set_timeout+0xd8>)
 8001480:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8001482:	1ac2      	subs	r2, r0, r3
 8001484:	d518      	bpl.n	80014b8 <sys_clock_set_timeout+0x9c>
		last_load = MIN_DELAY;
 8001486:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 800148a:	602b      	str	r3, [r5, #0]
	val2 = SysTick->VAL;
 800148c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8001490:	682c      	ldr	r4, [r5, #0]
	val2 = SysTick->VAL;
 8001492:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 8001494:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8001496:	bf38      	it	cc
 8001498:	44bc      	addcc	ip, r7
	SysTick->LOAD = last_load - 1;
 800149a:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 800149c:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 80014a0:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 80014a2:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 80014a4:	2400      	movs	r4, #0
 80014a6:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 80014a8:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 80014aa:	f386 8811 	msr	BASEPRI, r6
 80014ae:	f3bf 8f6f 	isb	sy
 80014b2:	e7c1      	b.n	8001438 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80014b4:	2400      	movs	r4, #0
 80014b6:	e7cd      	b.n	8001454 <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
 80014b8:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
		delay += unannounced;
 80014bc:	fb0e 2404 	mla	r4, lr, r4, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80014c0:	f504 5415 	add.w	r4, r4, #9536	; 0x2540
		delay -= unannounced;
 80014c4:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80014c6:	343f      	adds	r4, #63	; 0x3f
 80014c8:	fbb4 f4fe 	udiv	r4, r4, lr
		delay -= unannounced;
 80014cc:	fb0e 3404 	mla	r4, lr, r4, r3
		delay = MAX(delay, MIN_DELAY);
 80014d0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80014d4:	d904      	bls.n	80014e0 <sys_clock_set_timeout+0xc4>
		if (delay > MAX_CYCLES) {
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <sys_clock_set_timeout+0xdc>)
 80014d8:	429c      	cmp	r4, r3
 80014da:	d8d6      	bhi.n	800148a <sys_clock_set_timeout+0x6e>
			last_load = delay;
 80014dc:	602c      	str	r4, [r5, #0]
 80014de:	e7d5      	b.n	800148c <sys_clock_set_timeout+0x70>
		delay = MAX(delay, MIN_DELAY);
 80014e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80014e4:	e7fa      	b.n	80014dc <sys_clock_set_timeout+0xc0>
 80014e6:	bf00      	nop
 80014e8:	20000520 	.word	0x20000520
 80014ec:	2000051c 	.word	0x2000051c
 80014f0:	20000524 	.word	0x20000524
 80014f4:	20000518 	.word	0x20000518
 80014f8:	00ffc300 	.word	0x00ffc300

080014fc <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 80014fc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80014fe:	f04f 0310 	mov.w	r3, #16
 8001502:	f3ef 8411 	mrs	r4, BASEPRI
 8001506:	f383 8811 	msr	BASEPRI, r3
 800150a:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800150e:	f7ff ff2b 	bl	8001368 <elapsed>
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <sys_clock_elapsed+0x34>)
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <sys_clock_elapsed+0x38>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	4403      	add	r3, r0
	__asm__ volatile(
 800151e:	f384 8811 	msr	BASEPRI, r4
 8001522:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8001526:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800152a:	fbb3 f0f0 	udiv	r0, r3, r0
 800152e:	bd10      	pop	{r4, pc}
 8001530:	2000051c 	.word	0x2000051c
 8001534:	20000518 	.word	0x20000518

08001538 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
 8001538:	b510      	push	{r4, lr}
	__asm__ volatile(
 800153a:	f04f 0310 	mov.w	r3, #16
 800153e:	f3ef 8411 	mrs	r4, BASEPRI
 8001542:	f383 8811 	msr	BASEPRI, r3
 8001546:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 800154a:	f7ff ff0d 	bl	8001368 <elapsed>
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <sys_clock_cycle_get_32+0x28>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4418      	add	r0, r3
	__asm__ volatile(
 8001554:	f384 8811 	msr	BASEPRI, r4
 8001558:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 800155c:	bd10      	pop	{r4, pc}
 800155e:	bf00      	nop
 8001560:	2000051c 	.word	0x2000051c

08001564 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8001564:	4a09      	ldr	r2, [pc, #36]	; (800158c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8001566:	490a      	ldr	r1, [pc, #40]	; (8001590 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8001568:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 800156a:	6809      	ldr	r1, [r1, #0]
 800156c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8001570:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001572:	684b      	ldr	r3, [r1, #4]
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	604b      	str	r3, [r1, #4]
 800157a:	2300      	movs	r3, #0
 800157c:	f383 8811 	msr	BASEPRI, r3
 8001580:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8001584:	6893      	ldr	r3, [r2, #8]
}
 8001586:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200005b8 	.word	0x200005b8
 8001590:	08004c3c 	.word	0x08004c3c
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8001598:	4912      	ldr	r1, [pc, #72]	; (80015e4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 800159a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 800159c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 80015a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 80015a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80015a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80015aa:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80015ac:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 80015b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 80015b4:	4f0c      	ldr	r7, [pc, #48]	; (80015e8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 80015b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 80015ba:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 80015bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 80015be:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80015c0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 80015c2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80015c4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80015c6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80015ca:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80015cc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80015ce:	f000 fa15 	bl	80019fc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80015d2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80015d6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80015da:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80015de:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80015e2:	4770      	bx	lr
    ldr r1, =_kernel
 80015e4:	200005b8 	.word	0x200005b8
    ldr v4, =_SCS_ICSR
 80015e8:	e000ed04 	.word	0xe000ed04

080015ec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 80015ec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80015f0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80015f2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80015f6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80015fa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80015fc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8001600:	2902      	cmp	r1, #2
    beq _oops
 8001602:	d0ff      	beq.n	8001604 <_oops>

08001604 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8001604:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8001606:	f002 fb60 	bl	8003cca <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 800160a:	bd01      	pop	{r0, pc}

0800160c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 800160c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800160e:	2b00      	cmp	r3, #0
 8001610:	db08      	blt.n	8001624 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	2201      	movs	r2, #1
 8001614:	f000 001f 	and.w	r0, r0, #31
 8001618:	fa02 f000 	lsl.w	r0, r2, r0
 800161c:	095b      	lsrs	r3, r3, #5
 800161e:	4a02      	ldr	r2, [pc, #8]	; (8001628 <arch_irq_enable+0x1c>)
 8001620:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e100 	.word	0xe000e100

0800162c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 800162c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800162e:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	bfa8      	it	ge
 8001632:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8001636:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	bfb8      	it	lt
 800163c:	4b06      	ldrlt	r3, [pc, #24]	; (8001658 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8001642:	bfac      	ite	ge
 8001644:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	bfb4      	ite	lt
 8001650:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8001656:	4770      	bx	lr
 8001658:	e000ed14 	.word	0xe000ed14

0800165c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 800165c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8001660:	9b00      	ldr	r3, [sp, #0]
 8001662:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8001666:	490a      	ldr	r1, [pc, #40]	; (8001690 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8001668:	9b01      	ldr	r3, [sp, #4]
 800166a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 800166e:	9b02      	ldr	r3, [sp, #8]
 8001670:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8001674:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8001678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800167c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8001680:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8001684:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8001686:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8001688:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 800168a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	08003625 	.word	0x08003625

08001694 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8001694:	4a09      	ldr	r2, [pc, #36]	; (80016bc <z_check_thread_stack_fail+0x28>)
{
 8001696:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8001698:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 800169a:	b170      	cbz	r0, 80016ba <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800169c:	f113 0f16 	cmn.w	r3, #22
 80016a0:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80016a2:	d005      	beq.n	80016b0 <z_check_thread_stack_fail+0x1c>
 80016a4:	f1a0 0220 	sub.w	r2, r0, #32
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d805      	bhi.n	80016b8 <z_check_thread_stack_fail+0x24>
 80016ac:	4283      	cmp	r3, r0
 80016ae:	d203      	bcs.n	80016b8 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 80016b0:	4281      	cmp	r1, r0
 80016b2:	bf28      	it	cs
 80016b4:	2000      	movcs	r0, #0
 80016b6:	4770      	bx	lr
 80016b8:	2000      	movs	r0, #0
}
 80016ba:	4770      	bx	lr
 80016bc:	200005b8 	.word	0x200005b8

080016c0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80016c0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <arch_switch_to_main_thread+0x28>)
 80016c4:	6098      	str	r0, [r3, #8]
{
 80016c6:	460d      	mov	r5, r1
 80016c8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80016ca:	f000 f997 	bl	80019fc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80016ce:	4620      	mov	r0, r4
 80016d0:	f385 8809 	msr	PSP, r5
 80016d4:	2100      	movs	r1, #0
 80016d6:	b663      	cpsie	if
 80016d8:	f381 8811 	msr	BASEPRI, r1
 80016dc:	f3bf 8f6f 	isb	sy
 80016e0:	2200      	movs	r2, #0
 80016e2:	2300      	movs	r3, #0
 80016e4:	f001 ff9e 	bl	8003624 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 80016e8:	200005b8 	.word	0x200005b8

080016ec <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 80016ec:	4901      	ldr	r1, [pc, #4]	; (80016f4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 80016ee:	2210      	movs	r2, #16
	str	r2, [r1]
 80016f0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 80016f2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 80016f4:	e000ed10 	.word	0xe000ed10

080016f8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 80016f8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 80016fa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 80016fc:	f380 8811 	msr	BASEPRI, r0
	isb
 8001700:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8001704:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8001708:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800170a:	b662      	cpsie	i
	isb
 800170c:	f3bf 8f6f 	isb	sy

	bx	lr
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8001714:	bf30      	wfi
    b z_SysNmiOnReset
 8001716:	f7ff bffd 	b.w	8001714 <z_SysNmiOnReset>
 800171a:	bf00      	nop

0800171c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 800171e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <z_arm_prep_c+0x40>)
 8001722:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001726:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001728:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800172c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8001730:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001734:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800173c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8001740:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001744:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8001748:	f001 f844 	bl	80027d4 <z_bss_zero>
	z_data_copy();
 800174c:	f001 fd0a 	bl	8003164 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8001750:	f000 f92a 	bl	80019a8 <z_arm_interrupt_init>
	z_cstart();
 8001754:	f001 f866 	bl	8002824 <z_cstart>
 8001758:	08000000 	.word	0x08000000
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8001760:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8001762:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001766:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 800176a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800176e:	4904      	ldr	r1, [pc, #16]	; (8001780 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001770:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001772:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001774:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001776:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 800177a:	4902      	ldr	r1, [pc, #8]	; (8001784 <_isr_wrapper+0x24>)
	bx r1
 800177c:	4708      	bx	r1
 800177e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001780:	08004660 	.word	0x08004660
	ldr r1, =z_arm_int_exit
 8001784:	0800198d 	.word	0x0800198d

08001788 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001788:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800178a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800178e:	4808      	ldr	r0, [pc, #32]	; (80017b0 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001790:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8001794:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8001796:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800179a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800179e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80017a0:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80017a2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80017a6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80017aa:	f7ff ffb7 	bl	800171c <z_arm_prep_c>
 80017ae:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 80017b0:	200013a0 	.word	0x200013a0

080017b4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80017b4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80017b8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80017bc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80017be:	4672      	mov	r2, lr
	bl z_arm_fault
 80017c0:	f000 f856 	bl	8001870 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80017c4:	bd01      	pop	{r0, pc}
 80017c6:	bf00      	nop

080017c8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 80017c8:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <mem_manage_fault+0x68>)
{
 80017cc:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80017ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80017d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80017d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 80017d4:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80017d6:	0790      	lsls	r0, r2, #30
 80017d8:	d519      	bpl.n	800180e <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 80017da:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80017dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017de:	0612      	lsls	r2, r2, #24
 80017e0:	d515      	bpl.n	800180e <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 80017e2:	b119      	cbz	r1, 80017ec <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80017e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80017ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80017ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80017f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017f2:	06d1      	lsls	r1, r2, #27
 80017f4:	d40e      	bmi.n	8001814 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80017f8:	079a      	lsls	r2, r3, #30
 80017fa:	d40b      	bmi.n	8001814 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80017fc:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80017fe:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <mem_manage_fault+0x68>)
 8001800:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001802:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001806:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8001808:	2300      	movs	r3, #0
 800180a:	7023      	strb	r3, [r4, #0]

	return reason;
}
 800180c:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
 800180e:	f06f 0015 	mvn.w	r0, #21
 8001812:	e7eb      	b.n	80017ec <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <mem_manage_fault+0x68>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	051b      	lsls	r3, r3, #20
 800181a:	d5ef      	bpl.n	80017fc <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 800181c:	4629      	mov	r1, r5
 800181e:	f7ff ff39 	bl	8001694 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8001822:	2800      	cmp	r0, #0
 8001824:	d0ea      	beq.n	80017fc <mem_manage_fault+0x34>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001826:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 800182a:	2002      	movs	r0, #2
 800182c:	e7e7      	b.n	80017fe <mem_manage_fault+0x36>
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <bus_fault.constprop.0+0x38>)
 8001836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8001838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800183a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800183c:	0592      	lsls	r2, r2, #22
 800183e:	d508      	bpl.n	8001852 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8001840:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8001842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001844:	0412      	lsls	r2, r2, #16
 8001846:	d504      	bpl.n	8001852 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8001848:	b118      	cbz	r0, 8001852 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800184a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <bus_fault.constprop.0+0x38>)
 8001854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8001856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001858:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 800185a:	bf58      	it	pl
 800185c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800185e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8001860:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001862:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001868:	7008      	strb	r0, [r1, #0]

	return reason;
}
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8001870:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001872:	4b41      	ldr	r3, [pc, #260]	; (8001978 <z_arm_fault+0x108>)
 8001874:	685b      	ldr	r3, [r3, #4]
{
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800187a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800187e:	2500      	movs	r5, #0
 8001880:	f385 8811 	msr	BASEPRI, r5
 8001884:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001888:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 800188c:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8001890:	d111      	bne.n	80018b6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8001892:	f002 010c 	and.w	r1, r2, #12
 8001896:	2908      	cmp	r1, #8
 8001898:	d00d      	beq.n	80018b6 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 800189a:	0711      	lsls	r1, r2, #28
 800189c:	d401      	bmi.n	80018a2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 800189e:	4606      	mov	r6, r0
			*nested_exc = true;
 80018a0:	2501      	movs	r5, #1
	*recoverable = false;
 80018a2:	2200      	movs	r2, #0
 80018a4:	3b03      	subs	r3, #3
 80018a6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d85d      	bhi.n	800196a <z_arm_fault+0xfa>
 80018ae:	e8df f003 	tbb	[pc, r3]
 80018b2:	4704      	.short	0x4704
 80018b4:	4f4b      	.short	0x4f4b
		return NULL;
 80018b6:	462e      	mov	r6, r5
 80018b8:	e7f3      	b.n	80018a2 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80018ba:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <z_arm_fault+0x108>)
 80018bc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80018be:	f014 0402 	ands.w	r4, r4, #2
 80018c2:	d152      	bne.n	800196a <z_arm_fault+0xfa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80018c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c6:	0052      	lsls	r2, r2, #1
 80018c8:	d522      	bpl.n	8001910 <z_arm_fault+0xa0>
		if (SCB_MMFSR != 0) {
 80018ca:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80018ce:	b13a      	cbz	r2, 80018e0 <z_arm_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
 80018d0:	f10d 0207 	add.w	r2, sp, #7
 80018d4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80018d6:	4630      	mov	r0, r6
 80018d8:	f7ff ff76 	bl	80017c8 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
 80018dc:	4604      	mov	r4, r0
		break;
 80018de:	e017      	b.n	8001910 <z_arm_fault+0xa0>
		} else if (SCB_BFSR != 0) {
 80018e0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80018e4:	b12a      	cbz	r2, 80018f2 <z_arm_fault+0x82>
			reason = bus_fault(esf, 1, recoverable);
 80018e6:	f10d 0107 	add.w	r1, sp, #7
 80018ea:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80018ec:	f7ff ffa2 	bl	8001834 <bus_fault.constprop.0>
 80018f0:	e7f4      	b.n	80018dc <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
 80018f2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80018f4:	b292      	uxth	r2, r2
 80018f6:	b15a      	cbz	r2, 8001910 <z_arm_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80018f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80018fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80018fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80018fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8001900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001906:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800190a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8001910:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001914:	b993      	cbnz	r3, 800193c <z_arm_fault+0xcc>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8001916:	2220      	movs	r2, #32
 8001918:	4631      	mov	r1, r6
 800191a:	a802      	add	r0, sp, #8
 800191c:	f002 fa01 	bl	8003d22 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8001920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001922:	b325      	cbz	r5, 800196e <z_arm_fault+0xfe>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8001924:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001928:	b922      	cbnz	r2, 8001934 <z_arm_fault+0xc4>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800192a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800192e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001932:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8001934:	a902      	add	r1, sp, #8
 8001936:	4620      	mov	r0, r4
 8001938:	f002 f9c5 	bl	8003cc6 <z_arm_fatal_error>
}
 800193c:	b00a      	add	sp, #40	; 0x28
 800193e:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 8001940:	f10d 0207 	add.w	r2, sp, #7
 8001944:	2100      	movs	r1, #0
 8001946:	e7c6      	b.n	80018d6 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
 8001948:	f10d 0107 	add.w	r1, sp, #7
 800194c:	2000      	movs	r0, #0
 800194e:	e7cd      	b.n	80018ec <z_arm_fault+0x7c>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <z_arm_fault+0x108>)
 8001952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8001954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8001956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800195a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800195c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800195e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001960:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8001964:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8001968:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800196a:	2400      	movs	r4, #0
 800196c:	e7d0      	b.n	8001910 <z_arm_fault+0xa0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800196e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	e7dc      	b.n	8001932 <z_arm_fault+0xc2>
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800197c:	4a02      	ldr	r2, [pc, #8]	; (8001988 <z_arm_fault_init+0xc>)
 800197e:	6953      	ldr	r3, [r2, #20]
 8001980:	f043 0310 	orr.w	r3, r3, #16
 8001984:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800198e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8001990:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
 8001992:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001994:	d003      	beq.n	800199e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8001996:	4903      	ldr	r1, [pc, #12]	; (80019a4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 800199c:	600a      	str	r2, [r1, #0]

0800199e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800199e:	4770      	bx	lr
	ldr r3, =_kernel
 80019a0:	200005b8 	.word	0x200005b8
	ldr r1, =_SCS_ICSR
 80019a4:	e000ed04 	.word	0xe000ed04

080019a8 <z_arm_interrupt_init>:
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	2110      	movs	r1, #16
 80019ae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80019b0:	3301      	adds	r3, #1
 80019b2:	2b61      	cmp	r3, #97	; 0x61
 80019b4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80019b8:	d1f9      	bne.n	80019ae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <z_impl_k_thread_abort+0x1c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4283      	cmp	r3, r0
 80019c6:	d107      	bne.n	80019d8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019c8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80019cc:	b123      	cbz	r3, 80019d8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <z_impl_k_thread_abort+0x20>)
 80019d0:	6853      	ldr	r3, [r2, #4]
 80019d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 80019d8:	f001 bb72 	b.w	80030c0 <z_thread_abort>
 80019dc:	200005b8 	.word	0x200005b8
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80019e4:	4b02      	ldr	r3, [pc, #8]	; (80019f0 <z_arm_configure_static_mpu_regions+0xc>)
 80019e6:	4a03      	ldr	r2, [pc, #12]	; (80019f4 <z_arm_configure_static_mpu_regions+0x10>)
 80019e8:	4803      	ldr	r0, [pc, #12]	; (80019f8 <z_arm_configure_static_mpu_regions+0x14>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	f000 b86e 	b.w	8001acc <arm_core_mpu_configure_static_mpu_regions>
 80019f0:	20020000 	.word	0x20020000
 80019f4:	20000000 	.word	0x20000000
 80019f8:	08004a70 	.word	0x08004a70

080019fc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80019fc:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8001a00:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 8001a02:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8001a06:	2120      	movs	r1, #32
 8001a08:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	2101      	movs	r1, #1
 8001a10:	f000 b866 	b.w	8001ae0 <arm_core_mpu_configure_dynamic_mpu_regions>
 8001a14:	20000528 	.word	0x20000528
 8001a18:	150b0000 	.word	0x150b0000

08001a1c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 8001a1e:	4f1f      	ldr	r7, [pc, #124]	; (8001a9c <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8001a20:	2600      	movs	r6, #0
 8001a22:	428e      	cmp	r6, r1
 8001a24:	db01      	blt.n	8001a2a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8001a26:	4610      	mov	r0, r2
 8001a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 8001a2a:	6844      	ldr	r4, [r0, #4]
 8001a2c:	b39c      	cbz	r4, 8001a96 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
 8001a2e:	b153      	cbz	r3, 8001a46 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8001a30:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8001a34:	ea14 0f0c 	tst.w	r4, ip
 8001a38:	d118      	bne.n	8001a6c <mpu_configure_regions+0x50>
		&&
 8001a3a:	2c1f      	cmp	r4, #31
 8001a3c:	d916      	bls.n	8001a6c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 8001a3e:	6805      	ldr	r5, [r0, #0]
		&&
 8001a40:	ea1c 0f05 	tst.w	ip, r5
 8001a44:	d112      	bne.n	8001a6c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8001a46:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8001a48:	6805      	ldr	r5, [r0, #0]
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8001a4a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8001a4e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 8001a50:	d90f      	bls.n	8001a72 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
 8001a52:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8001a56:	d80e      	bhi.n	8001a76 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8001a58:	3c01      	subs	r4, #1
 8001a5a:	fab4 f484 	clz	r4, r4
 8001a5e:	f1c4 041f 	rsb	r4, r4, #31
 8001a62:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8001a64:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8001a66:	ea4c 0404 	orr.w	r4, ip, r4
 8001a6a:	d906      	bls.n	8001a7a <mpu_configure_regions+0x5e>
			return -EINVAL;
 8001a6c:	f06f 0215 	mvn.w	r2, #21
 8001a70:	e7d9      	b.n	8001a26 <mpu_configure_regions+0xa>
		return REGION_32B;
 8001a72:	2408      	movs	r4, #8
 8001a74:	e7f6      	b.n	8001a64 <mpu_configure_regions+0x48>
		return REGION_4G;
 8001a76:	243e      	movs	r4, #62	; 0x3e
 8001a78:	e7f4      	b.n	8001a64 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001a7a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8001a7e:	4315      	orrs	r5, r2
 8001a80:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001a84:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 8001a88:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001a8c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 8001a90:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001a92:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 8001a96:	3601      	adds	r6, #1
 8001a98:	300c      	adds	r0, #12
 8001a9a:	e7c2      	b.n	8001a22 <mpu_configure_regions+0x6>
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <arm_core_mpu_enable+0x14>)
 8001aa2:	2205      	movs	r2, #5
 8001aa4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8001aa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001aac:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ab8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <arm_core_mpu_disable+0x10>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8001acc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8001ace:	4c03      	ldr	r4, [pc, #12]	; (8001adc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	7822      	ldrb	r2, [r4, #0]
 8001ad4:	f7ff ffa2 	bl	8001a1c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8001ad8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8001ada:	bd10      	pop	{r4, pc}
 8001adc:	20000614 	.word	0x20000614

08001ae0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8001ae0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	7812      	ldrb	r2, [r2, #0]
 8001ae8:	f7ff ff98 	bl	8001a1c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8001aec:	f110 0f16 	cmn.w	r0, #22
 8001af0:	d002      	beq.n	8001af8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8001af2:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8001af4:	2807      	cmp	r0, #7
 8001af6:	dd00      	ble.n	8001afa <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8001af8:	bd08      	pop	{r3, pc}
 8001afa:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8001afe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8001b02:	3001      	adds	r0, #1
 8001b04:	e7f6      	b.n	8001af4 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 8001b06:	bf00      	nop
 8001b08:	20000614 	.word	0x20000614
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8001b10:	4914      	ldr	r1, [pc, #80]	; (8001b64 <z_arm_mpu_init+0x54>)
 8001b12:	6808      	ldr	r0, [r1, #0]
 8001b14:	2808      	cmp	r0, #8
{
 8001b16:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8001b18:	d821      	bhi.n	8001b5e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8001b1a:	f7ff ffcd 	bl	8001ab8 <arm_core_mpu_disable>
	MPU->RNR = index;
 8001b1e:	4c12      	ldr	r4, [pc, #72]	; (8001b68 <z_arm_mpu_init+0x58>)
 8001b20:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8001b22:	2200      	movs	r2, #0
 8001b24:	4290      	cmp	r0, r2
 8001b26:	f101 010c 	add.w	r1, r1, #12
 8001b2a:	d105      	bne.n	8001b38 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <z_arm_mpu_init+0x5c>)
 8001b2e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8001b30:	f7ff ffb6 	bl	8001aa0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8001b34:	2000      	movs	r0, #0
}
 8001b36:	bd10      	pop	{r4, pc}
 8001b38:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001b3c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8001b40:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8001b44:	4313      	orrs	r3, r2
 8001b46:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001b4a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8001b5a:	3201      	adds	r2, #1
 8001b5c:	e7e2      	b.n	8001b24 <z_arm_mpu_init+0x14>
		return -1;
 8001b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b62:	e7e8      	b.n	8001b36 <z_arm_mpu_init+0x26>
 8001b64:	08004a7c 	.word	0x08004a7c
 8001b68:	e000ed00 	.word	0xe000ed00
 8001b6c:	20000614 	.word	0x20000614

08001b70 <malloc_prepare>:

	return ret;
}

static int malloc_prepare(const struct device *unused)
{
 8001b70:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	sys_heap_init(&z_malloc_heap, z_malloc_heap_mem, HEAP_BYTES);
 8001b72:	4c06      	ldr	r4, [pc, #24]	; (8001b8c <malloc_prepare+0x1c>)
 8001b74:	2280      	movs	r2, #128	; 0x80
 8001b76:	4621      	mov	r1, r4
 8001b78:	18a0      	adds	r0, r4, r2
 8001b7a:	f001 fea2 	bl	80038c2 <sys_heap_init>
	return z_impl_k_mutex_init(mutex);
 8001b7e:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8001b82:	f002 fc1b 	bl	80043bc <z_impl_k_mutex_init>
	sys_mutex_init(&z_malloc_heap_mutex);

	return 0;
}
 8001b86:	2000      	movs	r0, #0
 8001b88:	bd10      	pop	{r4, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000000 	.word	0x20000000

08001b90 <free>:

	return ret;
}

void free(void *ptr)
{
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 8001b94:	4e09      	ldr	r6, [pc, #36]	; (8001bbc <free+0x2c>)
 8001b96:	f106 058c 	add.w	r5, r6, #140	; 0x8c
 8001b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	f000 ff70 	bl	8002a88 <z_impl_k_mutex_lock>
	int lock_ret;

	lock_ret = sys_mutex_lock(&z_malloc_heap_mutex, K_FOREVER);
	__ASSERT_NO_MSG(lock_ret == 0);
	sys_heap_free(&z_malloc_heap, ptr);
 8001ba8:	4621      	mov	r1, r4
 8001baa:	f106 0080 	add.w	r0, r6, #128	; 0x80
 8001bae:	f001 fe72 	bl	8003896 <sys_heap_free>
	return z_impl_k_mutex_unlock(mutex);
 8001bb2:	4628      	mov	r0, r5
	(void) sys_mutex_unlock(&z_malloc_heap_mutex);
}
 8001bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001bb8:	f000 bfde 	b.w	8002b78 <z_impl_k_mutex_unlock>
 8001bbc:	20000000 	.word	0x20000000

08001bc0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8001bc0:	4b01      	ldr	r3, [pc, #4]	; (8001bc8 <__stdout_hook_install+0x8>)
 8001bc2:	6018      	str	r0, [r3, #0]
}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	200000bc 	.word	0x200000bc

08001bcc <clock_control_on.constprop.0>:
 *
 * @param dev Device structure whose driver controls the clock.
 * @param sys Opaque data representing the clock.
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
 8001bcc:	b570      	push	{r4, r5, r6, lr}
 8001bce:	4605      	mov	r5, r0
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8001bd0:	4c07      	ldr	r4, [pc, #28]	; (8001bf0 <clock_control_on.constprop.0+0x24>)
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f002 fba7 	bl	8004326 <z_device_ready>
 8001bd8:	b130      	cbz	r0, 8001be8 <clock_control_on.constprop.0+0x1c>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8001bda:	68a3      	ldr	r3, [r4, #8]
 8001bdc:	4629      	mov	r1, r5
 8001bde:	4620      	mov	r0, r4
 8001be0:	681b      	ldr	r3, [r3, #0]
}
 8001be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->on(dev, sys);
 8001be6:	4718      	bx	r3
}
 8001be8:	f06f 0012 	mvn.w	r0, #18
 8001bec:	bd70      	pop	{r4, r5, r6, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000138 	.word	0x20000138

08001bf4 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8001bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bf6:	460c      	mov	r4, r1
 8001bf8:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8001bfa:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 8001bfe:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8001c00:	6902      	ldr	r2, [r0, #16]
{
 8001c02:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001c04:	d123      	bne.n	8001c4e <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001c06:	f004 0303 	and.w	r3, r4, #3
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	009a      	lsls	r2, r3, #2
 8001c0e:	230f      	movs	r3, #15
 8001c10:	4093      	lsls	r3, r2
 8001c12:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	4933      	ldr	r1, [pc, #204]	; (8001ce8 <gpio_stm32_pin_interrupt_configure+0xf4>)
 8001c1a:	3202      	adds	r2, #2
 8001c1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c20:	0c19      	lsrs	r1, r3, #16
 8001c22:	ea02 4313 	and.w	r3, r2, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	fa91 f2a1 	rbit	r2, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001c2a:	fab2 f282 	clz	r2, r2
 8001c2e:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d109      	bne.n	8001c4a <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7ff fa1e 	bl	8001078 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f7ff fa6f 	bl	8001120 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001c42:	2100      	movs	r1, #0
 8001c44:	4620      	mov	r0, r4
 8001c46:	f7ff fa25 	bl	8001094 <stm32_exti_trigger>
	int err = 0;
 8001c4a:	2500      	movs	r5, #0
 8001c4c:	e03e      	b.n	8001ccc <gpio_stm32_pin_interrupt_configure+0xd8>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001c4e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8001c52:	d042      	beq.n	8001cda <gpio_stm32_pin_interrupt_configure+0xe6>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8001c54:	4925      	ldr	r1, [pc, #148]	; (8001cec <gpio_stm32_pin_interrupt_configure+0xf8>)
 8001c56:	4620      	mov	r0, r4
 8001c58:	f7ff fa50 	bl	80010fc <stm32_exti_set_callback>
 8001c5c:	4605      	mov	r5, r0
 8001c5e:	2800      	cmp	r0, #0
 8001c60:	d13e      	bne.n	8001ce0 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 8001c62:	4a23      	ldr	r2, [pc, #140]	; (8001cf0 <gpio_stm32_pin_interrupt_configure+0xfc>)
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8001c64:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 8001c66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c6a:	466b      	mov	r3, sp
 8001c6c:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ffab 	bl	8001bcc <clock_control_on.constprop.0>
	if (ret != 0) {
 8001c76:	b9c0      	cbnz	r0, 8001caa <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001c78:	f004 0103 	and.w	r1, r4, #3
 8001c7c:	3104      	adds	r1, #4
 8001c7e:	008b      	lsls	r3, r1, #2
 8001c80:	210f      	movs	r1, #15
 8001c82:	4099      	lsls	r1, r3
 8001c84:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001c88:	b2ca      	uxtb	r2, r1
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001c90:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8001c94:	0c0b      	lsrs	r3, r1, #16
 8001c96:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 8001ca4:	409f      	lsls	r7, r3
 8001ca6:	430f      	orrs	r7, r1
 8001ca8:	6097      	str	r7, [r2, #8]

	switch (trig) {
 8001caa:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8001cae:	d010      	beq.n	8001cd2 <gpio_stm32_pin_interrupt_configure+0xde>
 8001cb0:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 8001cb4:	d00f      	beq.n	8001cd6 <gpio_stm32_pin_interrupt_configure+0xe2>
 8001cb6:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 8001cba:	bf14      	ite	ne
 8001cbc:	2100      	movne	r1, #0
 8001cbe:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7ff f9e7 	bl	8001094 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f7ff f9c8 	bl	800105c <stm32_exti_enable>

exit:
	return err;
}
 8001ccc:	4628      	mov	r0, r5
 8001cce:	b003      	add	sp, #12
 8001cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	e7f4      	b.n	8001cc0 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	e7f2      	b.n	8001cc0 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 8001cda:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8001cde:	e7f5      	b.n	8001ccc <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 8001ce0:	f06f 050f 	mvn.w	r5, #15
	return err;
 8001ce4:	e7f2      	b.n	8001ccc <gpio_stm32_pin_interrupt_configure+0xd8>
 8001ce6:	bf00      	nop
 8001ce8:	40013800 	.word	0x40013800
 8001cec:	08003e5b 	.word	0x08003e5b
 8001cf0:	08004a00 	.word	0x08004a00

08001cf4 <gpio_stm32_clock_request>:
{
 8001cf4:	b570      	push	{r4, r5, r6, lr}
					(clock_control_subsys_t *)&cfg->pclken);
 8001cf6:	6844      	ldr	r4, [r0, #4]
 8001cf8:	340c      	adds	r4, #12
	if (on) {
 8001cfa:	b121      	cbz	r1, 8001d06 <gpio_stm32_clock_request+0x12>
		ret = clock_control_on(clk,
 8001cfc:	4620      	mov	r0, r4
}
 8001cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = clock_control_on(clk,
 8001d02:	f7ff bf63 	b.w	8001bcc <clock_control_on.constprop.0>
 8001d06:	4d07      	ldr	r5, [pc, #28]	; (8001d24 <gpio_stm32_clock_request+0x30>)
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f002 fb0c 	bl	8004326 <z_device_ready>
 8001d0e:	b130      	cbz	r0, 8001d1e <gpio_stm32_clock_request+0x2a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8001d10:	68ab      	ldr	r3, [r5, #8]
 8001d12:	4621      	mov	r1, r4
 8001d14:	4628      	mov	r0, r5
 8001d16:	685b      	ldr	r3, [r3, #4]
}
 8001d18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001d1c:	4718      	bx	r3
 8001d1e:	f06f 0012 	mvn.w	r0, #18
 8001d22:	bd70      	pop	{r4, r5, r6, pc}
 8001d24:	20000138 	.word	0x20000138

08001d28 <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 8001d28:	b570      	push	{r4, r5, r6, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8001d2a:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8001d2c:	6845      	ldr	r5, [r0, #4]
 8001d2e:	4c0e      	ldr	r4, [pc, #56]	; (8001d68 <spi_stm32_init+0x40>)
 8001d30:	4620      	mov	r0, r4
 8001d32:	f002 faf8 	bl	8004326 <z_device_ready>
 8001d36:	b910      	cbnz	r0, 8001d3e <spi_stm32_init+0x16>
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken) != 0) {
		LOG_ERR("Could not enable SPI clock");
		return -EIO;
 8001d38:	f06f 0004 	mvn.w	r0, #4
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8001d3c:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
 8001d3e:	68a3      	ldr	r3, [r4, #8]
 8001d40:	4620      	mov	r0, r4
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4629      	mov	r1, r5
 8001d46:	4798      	blx	r3
	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8001d48:	4604      	mov	r4, r0
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	d1f4      	bne.n	8001d38 <spi_stm32_init+0x10>
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 8001d4e:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
 8001d52:	68aa      	ldr	r2, [r5, #8]
 8001d54:	f7ff fad0 	bl	80012f8 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	dbef      	blt.n	8001d3c <spi_stm32_init+0x14>
	spi_context_unlock_unconditionally(&data->ctx);
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	f002 f98b 	bl	8004078 <spi_context_unlock_unconditionally>
	return 0;
 8001d62:	4620      	mov	r0, r4
 8001d64:	e7ea      	b.n	8001d3c <spi_stm32_init+0x14>
 8001d66:	bf00      	nop
 8001d68:	20000138 	.word	0x20000138

08001d6c <spi_stm32_transceive>:
{
 8001d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d70:	461f      	mov	r7, r3
	SPI_TypeDef *spi = cfg->spi;
 8001d72:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 8001d74:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8001d76:	689e      	ldr	r6, [r3, #8]
{
 8001d78:	b08d      	sub	sp, #52	; 0x34
 8001d7a:	4605      	mov	r5, r0
 8001d7c:	4688      	mov	r8, r1
	if (!tx_bufs && !rx_bufs) {
 8001d7e:	4691      	mov	r9, r2
 8001d80:	b912      	cbnz	r2, 8001d88 <spi_stm32_transceive+0x1c>
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	f000 814e 	beq.w	8002024 <spi_stm32_transceive+0x2b8>
static inline void spi_context_lock(struct spi_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal,
				    const struct spi_config *spi_cfg)
{
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8001d88:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8001d8c:	045b      	lsls	r3, r3, #17
 8001d8e:	d44b      	bmi.n	8001e28 <spi_stm32_transceive+0xbc>
	return z_impl_k_sem_take(sem, timeout);
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d98:	f104 0008 	add.w	r0, r4, #8
 8001d9c:	f000 ff4e 	bl	8002c3c <z_impl_k_sem_take>
		(ctx->owner == spi_cfg)) {
			return;
	}

	k_sem_take(&ctx->lock, K_FOREVER);
	ctx->owner = spi_cfg;
 8001da0:	f8c4 8004 	str.w	r8, [r4, #4]
	const uint32_t scaler[] = {
 8001da4:	f8df c284 	ldr.w	ip, [pc, #644]	; 800202c <spi_stm32_transceive+0x2c0>
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8001da8:	686b      	ldr	r3, [r5, #4]
 8001daa:	9301      	str	r3, [sp, #4]
	const uint32_t scaler[] = {
 8001dac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	struct spi_stm32_data *data = DEV_DATA(dev);
 8001db0:	f8d5 b010 	ldr.w	fp, [r5, #16]
	const uint32_t scaler[] = {
 8001db4:	ad04      	add	r5, sp, #16
 8001db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001dbc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8001dc0:	f8db 3000 	ldr.w	r3, [fp]
 8001dc4:	4598      	cmp	r8, r3
 8001dc6:	f000 80a4 	beq.w	8001f12 <spi_stm32_transceive+0x1a6>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8001dca:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8001dce:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d002      	beq.n	8001ddc <spi_stm32_transceive+0x70>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8001dd6:	2b10      	cmp	r3, #16
 8001dd8:	f040 812c 	bne.w	8002034 <spi_stm32_transceive+0x2c8>
	SPI_TypeDef *spi = cfg->spi;
 8001ddc:	9b01      	ldr	r3, [sp, #4]
 8001dde:	689d      	ldr	r5, [r3, #8]
 8001de0:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8002030 <spi_stm32_transceive+0x2c4>
 8001de4:	4650      	mov	r0, sl
 8001de6:	f002 fa9e 	bl	8004326 <z_device_ready>
 8001dea:	2800      	cmp	r0, #0
 8001dec:	f000 8118 	beq.w	8002020 <spi_stm32_transceive+0x2b4>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8001df0:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8112 	beq.w	8002020 <spi_stm32_transceive+0x2b4>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8001dfc:	9901      	ldr	r1, [sp, #4]
 8001dfe:	aa03      	add	r2, sp, #12
 8001e00:	4650      	mov	r0, sl
 8001e02:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8001e04:	2800      	cmp	r0, #0
 8001e06:	f2c0 810b 	blt.w	8002020 <spi_stm32_transceive+0x2b4>
		uint32_t clk = clock >> br;
 8001e0a:	9a03      	ldr	r2, [sp, #12]
		if (clk <= config->frequency) {
 8001e0c:	f8d8 1000 	ldr.w	r1, [r8]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8001e10:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 8001e12:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 8001e16:	4288      	cmp	r0, r1
 8001e18:	f240 81e3 	bls.w	80021e2 <spi_stm32_transceive+0x476>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	2b09      	cmp	r3, #9
 8001e20:	d1f7      	bne.n	8001e12 <spi_stm32_transceive+0xa6>
		return -EINVAL;
 8001e22:	f06f 0715 	mvn.w	r7, #21
 8001e26:	e0fd      	b.n	8002024 <spi_stm32_transceive+0x2b8>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8001e28:	6923      	ldr	r3, [r4, #16]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1b0      	bne.n	8001d90 <spi_stm32_transceive+0x24>
		(k_sem_count_get(&ctx->lock) == 0) &&
 8001e2e:	6863      	ldr	r3, [r4, #4]
 8001e30:	4598      	cmp	r8, r3
 8001e32:	d1ad      	bne.n	8001d90 <spi_stm32_transceive+0x24>
 8001e34:	e7b6      	b.n	8001da4 <spi_stm32_transceive+0x38>
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8001e36:	682a      	ldr	r2, [r5, #0]
 8001e38:	f042 0202 	orr.w	r2, r2, #2
 8001e3c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8001e3e:	682a      	ldr	r2, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8001e40:	0758      	lsls	r0, r3, #29
 8001e42:	bf4c      	ite	mi
 8001e44:	f042 0201 	orrmi.w	r2, r2, #1
 8001e48:	f022 0201 	bicpl.w	r2, r2, #1
 8001e4c:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8001e4e:	682a      	ldr	r2, [r5, #0]
 8001e50:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001e54:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8001e56:	682a      	ldr	r2, [r5, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8001e58:	06d9      	lsls	r1, r3, #27
 8001e5a:	bf4c      	ite	mi
 8001e5c:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 8001e60:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 8001e64:	602a      	str	r2, [r5, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8001e66:	682a      	ldr	r2, [r5, #0]
 8001e68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e6c:	602a      	str	r2, [r5, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8001e6e:	f8d8 2008 	ldr.w	r2, [r8, #8]
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8001e72:	6829      	ldr	r1, [r5, #0]
 8001e74:	f003 0001 	and.w	r0, r3, #1
 8001e78:	b15a      	cbz	r2, 8001e92 <spi_stm32_transceive+0x126>
 8001e7a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001e7e:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8001e80:	6869      	ldr	r1, [r5, #4]
 8001e82:	f021 0104 	bic.w	r1, r1, #4
 8001e86:	6069      	str	r1, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8001e88:	b968      	cbnz	r0, 8001ea6 <spi_stm32_transceive+0x13a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8001e8a:	6829      	ldr	r1, [r5, #0]
 8001e8c:	f441 7182 	orr.w	r1, r1, #260	; 0x104
 8001e90:	e00c      	b.n	8001eac <spi_stm32_transceive+0x140>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8001e92:	f421 7100 	bic.w	r1, r1, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8001e96:	2800      	cmp	r0, #0
 8001e98:	f000 80ba 	beq.w	8002010 <spi_stm32_transceive+0x2a4>
 8001e9c:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8001e9e:	6869      	ldr	r1, [r5, #4]
 8001ea0:	f021 0104 	bic.w	r1, r1, #4
 8001ea4:	6069      	str	r1, [r5, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8001ea6:	6829      	ldr	r1, [r5, #0]
 8001ea8:	f421 7182 	bic.w	r1, r1, #260	; 0x104
 8001eac:	6029      	str	r1, [r5, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8001eae:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8001eb2:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8001eb4:	682b      	ldr	r3, [r5, #0]
 8001eb6:	bf0c      	ite	eq
 8001eb8:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 8001ebc:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 8001ec0:	602b      	str	r3, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001ec2:	686b      	ldr	r3, [r5, #4]
 8001ec4:	f023 0310 	bic.w	r3, r3, #16
 8001ec8:	606b      	str	r3, [r5, #4]
	data->ctx.config = config;
 8001eca:	f8cb 8000 	str.w	r8, [fp]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 8001ece:	b302      	cbz	r2, 8001f12 <spi_stm32_transceive+0x1a6>
 8001ed0:	6810      	ldr	r0, [r2, #0]
 8001ed2:	b1f0      	cbz	r0, 8001f12 <spi_stm32_transceive+0x1a6>
		/* Validate CS active levels are equivalent */
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8001ed4:	7a11      	ldrb	r1, [r2, #8]
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 8001ed6:	7a53      	ldrb	r3, [r2, #9]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 8001ed8:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
 8001edc:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8001ee0:	f8de 5000 	ldr.w	r5, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8001ee4:	07da      	lsls	r2, r3, #31
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8001ee6:	bf54      	ite	pl
 8001ee8:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8001eec:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8001ef0:	f04f 0c01 	mov.w	ip, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8001ef4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8001ef8:	fa0c fc01 	lsl.w	ip, ip, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8001efc:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8001efe:	bf4c      	ite	mi
 8001f00:	ea45 050c 	orrmi.w	r5, r5, ip
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8001f04:	ea25 050c 	bicpl.w	r5, r5, ip
	}

	return api->pin_configure(port, pin, flags);
 8001f08:	f8d8 3000 	ldr.w	r3, [r8]
 8001f0c:	f8ce 5000 	str.w	r5, [lr]
 8001f10:	4798      	blx	r3
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	if (tx_bufs) {
 8001f12:	f1b9 0f00 	cmp.w	r9, #0
 8001f16:	f000 8090 	beq.w	800203a <spi_stm32_transceive+0x2ce>
		ctx->current_tx = tx_bufs->buffers;
 8001f1a:	f8d9 3000 	ldr.w	r3, [r9]
		ctx->tx_count = tx_bufs->count;
 8001f1e:	f8d9 2004 	ldr.w	r2, [r9, #4]
		ctx->current_tx = tx_bufs->buffers;
 8001f22:	62e3      	str	r3, [r4, #44]	; 0x2c
		ctx->tx_count = tx_bufs->count;
 8001f24:	6322      	str	r2, [r4, #48]	; 0x30
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8001f26:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
 8001f28:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8001f2a:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_len = ctx->current_tx->len / dfs;
 8001f2c:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count = 0;
		ctx->tx_buf = NULL;
		ctx->tx_len = 0;
	}

	if (rx_bufs) {
 8001f2e:	2f00      	cmp	r7, #0
 8001f30:	f000 8088 	beq.w	8002044 <spi_stm32_transceive+0x2d8>
		ctx->current_rx = rx_bufs->buffers;
 8001f34:	683b      	ldr	r3, [r7, #0]
		ctx->rx_count = rx_bufs->count;
 8001f36:	687a      	ldr	r2, [r7, #4]
		ctx->current_rx = rx_bufs->buffers;
 8001f38:	6363      	str	r3, [r4, #52]	; 0x34
		ctx->rx_count = rx_bufs->count;
 8001f3a:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8001f3c:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
 8001f3e:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8001f40:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_len = ctx->current_rx->len / dfs;
 8001f42:	64a3      	str	r3, [r4, #72]	; 0x48
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001f44:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = 0;
		ctx->rx_buf = NULL;
		ctx->rx_len = 0;
	}

	ctx->sync_status = 0;
 8001f46:	2200      	movs	r2, #0
 8001f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f4c:	62a2      	str	r2, [r4, #40]	; 0x28
	_spi_context_cs_control(ctx, on, false);
 8001f4e:	2101      	movs	r1, #1
 8001f50:	6033      	str	r3, [r6, #0]
 8001f52:	4620      	mov	r0, r4
 8001f54:	f002 f86b 	bl	800402e <_spi_context_cs_control>
	uint16_t operation = data->ctx.config->operation;
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8001f5c:	f013 0101 	ands.w	r1, r3, #1
 8001f60:	f040 80b0 	bne.w	80020c4 <spi_stm32_transceive+0x358>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001f64:	68b2      	ldr	r2, [r6, #8]
 8001f66:	0790      	lsls	r0, r2, #30
 8001f68:	d5fc      	bpl.n	8001f64 <spi_stm32_transceive+0x1f8>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001f6a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8001f6e:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8001f70:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001f72:	d172      	bne.n	800205a <spi_stm32_transceive+0x2ee>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 8001f74:	b112      	cbz	r2, 8001f7c <spi_stm32_transceive+0x210>
 8001f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f78:	b103      	cbz	r3, 8001f7c <spi_stm32_transceive+0x210>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8001f7a:	7811      	ldrb	r1, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8001f7c:	b2c9      	uxtb	r1, r1
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8001f7e:	7331      	strb	r1, [r6, #12]
	if (!ctx->tx_len) {
 8001f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f82:	b183      	cbz	r3, 8001fa6 <spi_stm32_transceive+0x23a>
	ctx->tx_len -= len;
 8001f84:	3b01      	subs	r3, #1
 8001f86:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d160      	bne.n	800204e <spi_stm32_transceive+0x2e2>
		ctx->tx_count--;
 8001f8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d05f      	beq.n	8002056 <spi_stm32_transceive+0x2ea>
			ctx->current_tx++;
 8001f96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f98:	f103 0208 	add.w	r2, r3, #8
 8001f9c:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8001f9e:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8001fa0:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8001fa2:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8001fa4:	6423      	str	r3, [r4, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001fa6:	68b3      	ldr	r3, [r6, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 8001fa8:	07d9      	lsls	r1, r3, #31
 8001faa:	d5fc      	bpl.n	8001fa6 <spi_stm32_transceive+0x23a>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001fac:	6822      	ldr	r2, [r4, #0]
 8001fae:	8892      	ldrh	r2, [r2, #4]
 8001fb0:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8001fb4:	2a08      	cmp	r2, #8
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8001fb6:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
  return (uint8_t)(READ_REG(SPIx->DR));
 8001fba:	68f2      	ldr	r2, [r6, #12]
 8001fbc:	d16a      	bne.n	8002094 <spi_stm32_transceive+0x328>
 8001fbe:	b10b      	cbz	r3, 8001fc4 <spi_stm32_transceive+0x258>
 8001fc0:	b101      	cbz	r1, 8001fc4 <spi_stm32_transceive+0x258>
 8001fc2:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8001fc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001fc6:	b193      	cbz	r3, 8001fee <spi_stm32_transceive+0x282>
	ctx->rx_len -= len;
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->rx_len) {
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f040 80cb 	bne.w	8002168 <spi_stm32_transceive+0x3fc>
		ctx->rx_count--;
 8001fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	63a3      	str	r3, [r4, #56]	; 0x38
		if (ctx->rx_count) {
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80ca 	beq.w	8002172 <spi_stm32_transceive+0x406>
			ctx->current_rx++;
 8001fde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fe0:	f103 0208 	add.w	r2, r3, #8
 8001fe4:	6362      	str	r2, [r4, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8001fe6:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 8001fe8:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8001fea:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
 8001fec:	64a3      	str	r3, [r4, #72]	; 0x48
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8001fee:	68b3      	ldr	r3, [r6, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8001ff0:	f413 7fb8 	tst.w	r3, #368	; 0x170
 8001ff4:	f000 80c5 	beq.w	8002182 <spi_stm32_transceive+0x416>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8001ff8:	68b3      	ldr	r3, [r6, #8]
 8001ffa:	065d      	lsls	r5, r3, #25
 8001ffc:	d505      	bpl.n	800200a <spi_stm32_transceive+0x29e>
  tmpreg = SPIx->DR;
 8001ffe:	68f3      	ldr	r3, [r6, #12]
 8002000:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8002002:	9b03      	ldr	r3, [sp, #12]
  tmpreg = SPIx->SR;
 8002004:	68b3      	ldr	r3, [r6, #8]
 8002006:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8002008:	9b03      	ldr	r3, [sp, #12]
		return -EIO;
 800200a:	f06f 0704 	mvn.w	r7, #4
 800200e:	e0c0      	b.n	8002192 <spi_stm32_transceive+0x426>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8002010:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8002014:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8002016:	6869      	ldr	r1, [r5, #4]
 8002018:	f041 0104 	orr.w	r1, r1, #4
 800201c:	6069      	str	r1, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800201e:	e734      	b.n	8001e8a <spi_stm32_transceive+0x11e>
	if (ret) {
 8002020:	f06f 0704 	mvn.w	r7, #4
}
 8002024:	4638      	mov	r0, r7
 8002026:	b00d      	add	sp, #52	; 0x34
 8002028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800202c:	08004a08 	.word	0x08004a08
 8002030:	20000138 	.word	0x20000138
		return -ENOTSUP;
 8002034:	f06f 0785 	mvn.w	r7, #133	; 0x85
 8002038:	e7f4      	b.n	8002024 <spi_stm32_transceive+0x2b8>
		ctx->tx_count = 0;
 800203a:	e9c4 990b 	strd	r9, r9, [r4, #44]	; 0x2c
		ctx->tx_len = 0;
 800203e:	e9c4 990f 	strd	r9, r9, [r4, #60]	; 0x3c
 8002042:	e774      	b.n	8001f2e <spi_stm32_transceive+0x1c2>
		ctx->rx_count = 0;
 8002044:	e9c4 770d 	strd	r7, r7, [r4, #52]	; 0x34
		ctx->rx_len = 0;
 8002048:	e9c4 7711 	strd	r7, r7, [r4, #68]	; 0x44
 800204c:	e77a      	b.n	8001f44 <spi_stm32_transceive+0x1d8>
	} else if (ctx->tx_buf) {
 800204e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0a8      	beq.n	8001fa6 <spi_stm32_transceive+0x23a>
		ctx->tx_buf += dfs * len;
 8002054:	3301      	adds	r3, #1
			ctx->tx_buf = NULL;
 8002056:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002058:	e7a5      	b.n	8001fa6 <spi_stm32_transceive+0x23a>
	return !!(ctx->tx_len);
 800205a:	6c23      	ldr	r3, [r4, #64]	; 0x40
	return !!(ctx->tx_buf && ctx->tx_len);
 800205c:	b10a      	cbz	r2, 8002062 <spi_stm32_transceive+0x2f6>
 800205e:	b103      	cbz	r3, 8002062 <spi_stm32_transceive+0x2f6>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8002060:	8811      	ldrh	r1, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8002062:	81b1      	strh	r1, [r6, #12]
	if (!ctx->tx_len) {
 8002064:	2b00      	cmp	r3, #0
 8002066:	d09e      	beq.n	8001fa6 <spi_stm32_transceive+0x23a>
	ctx->tx_len -= len;
 8002068:	3b01      	subs	r3, #1
 800206a:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 800206c:	b96b      	cbnz	r3, 800208a <spi_stm32_transceive+0x31e>
		ctx->tx_count--;
 800206e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002070:	3b01      	subs	r3, #1
 8002072:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ee      	beq.n	8002056 <spi_stm32_transceive+0x2ea>
			ctx->current_tx++;
 8002078:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800207a:	f103 0208 	add.w	r2, r3, #8
 800207e:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8002080:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8002082:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8002084:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	e78c      	b.n	8001fa4 <spi_stm32_transceive+0x238>
	} else if (ctx->tx_buf) {
 800208a:	2a00      	cmp	r2, #0
 800208c:	d08b      	beq.n	8001fa6 <spi_stm32_transceive+0x23a>
		ctx->tx_buf += dfs * len;
 800208e:	3202      	adds	r2, #2
 8002090:	63e2      	str	r2, [r4, #60]	; 0x3c
 8002092:	e788      	b.n	8001fa6 <spi_stm32_transceive+0x23a>
	return !!(ctx->rx_buf && ctx->rx_len);
 8002094:	b10b      	cbz	r3, 800209a <spi_stm32_transceive+0x32e>
 8002096:	b101      	cbz	r1, 800209a <spi_stm32_transceive+0x32e>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8002098:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800209a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0a6      	beq.n	8001fee <spi_stm32_transceive+0x282>
	ctx->rx_len -= len;
 80020a0:	3b01      	subs	r3, #1
 80020a2:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->rx_len) {
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d166      	bne.n	8002176 <spi_stm32_transceive+0x40a>
		ctx->rx_count--;
 80020a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020aa:	3b01      	subs	r3, #1
 80020ac:	63a3      	str	r3, [r4, #56]	; 0x38
		if (ctx->rx_count) {
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d05f      	beq.n	8002172 <spi_stm32_transceive+0x406>
			ctx->current_rx++;
 80020b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020b4:	f103 0208 	add.w	r2, r3, #8
 80020b8:	6362      	str	r2, [r4, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 80020ba:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 80020bc:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 80020be:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
 80020c0:	085b      	lsrs	r3, r3, #1
 80020c2:	e793      	b.n	8001fec <spi_stm32_transceive+0x280>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80020c4:	68b2      	ldr	r2, [r6, #8]
 80020c6:	0792      	lsls	r2, r2, #30
 80020c8:	d549      	bpl.n	800215e <spi_stm32_transceive+0x3f2>
	return !!(ctx->tx_len);
 80020ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 80020cc:	2900      	cmp	r1, #0
 80020ce:	d046      	beq.n	800215e <spi_stm32_transceive+0x3f2>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80020d0:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80020d4:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80020d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80020d8:	d12b      	bne.n	8002132 <spi_stm32_transceive+0x3c6>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80020da:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 80020dc:	7333      	strb	r3, [r6, #12]
	if (!ctx->tx_len) {
 80020de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020e0:	b19b      	cbz	r3, 800210a <spi_stm32_transceive+0x39e>
	ctx->tx_len -= len;
 80020e2:	3b01      	subs	r3, #1
 80020e4:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 80020e6:	b963      	cbnz	r3, 8002102 <spi_stm32_transceive+0x396>
		ctx->tx_count--;
 80020e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020ea:	3b01      	subs	r3, #1
 80020ec:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 80020ee:	b15b      	cbz	r3, 8002108 <spi_stm32_transceive+0x39c>
			ctx->current_tx++;
 80020f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020f2:	f103 0208 	add.w	r2, r3, #8
 80020f6:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 80020f8:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 80020fa:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 80020fc:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 80020fe:	6423      	str	r3, [r4, #64]	; 0x40
 8002100:	e003      	b.n	800210a <spi_stm32_transceive+0x39e>
	} else if (ctx->tx_buf) {
 8002102:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002104:	b10b      	cbz	r3, 800210a <spi_stm32_transceive+0x39e>
		ctx->tx_buf += dfs * len;
 8002106:	3301      	adds	r3, #1
 8002108:	63e3      	str	r3, [r4, #60]	; 0x3c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800210a:	68b3      	ldr	r3, [r6, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 800210c:	07df      	lsls	r7, r3, #31
 800210e:	f57f af6e 	bpl.w	8001fee <spi_stm32_transceive+0x282>
	return !!(ctx->rx_buf && ctx->rx_len);
 8002112:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002114:	2b00      	cmp	r3, #0
 8002116:	f43f af6a 	beq.w	8001fee <spi_stm32_transceive+0x282>
 800211a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800211c:	2a00      	cmp	r2, #0
 800211e:	f43f af66 	beq.w	8001fee <spi_stm32_transceive+0x282>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8002122:	6822      	ldr	r2, [r4, #0]
 8002124:	8892      	ldrh	r2, [r2, #4]
 8002126:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800212a:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 800212c:	68f2      	ldr	r2, [r6, #12]
 800212e:	d1b3      	bne.n	8002098 <spi_stm32_transceive+0x32c>
 8002130:	e747      	b.n	8001fc2 <spi_stm32_transceive+0x256>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8002132:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 8002134:	81b3      	strh	r3, [r6, #12]
	ctx->tx_len -= len;
 8002136:	3901      	subs	r1, #1
 8002138:	6421      	str	r1, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 800213a:	b969      	cbnz	r1, 8002158 <spi_stm32_transceive+0x3ec>
		ctx->tx_count--;
 800213c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800213e:	3b01      	subs	r3, #1
 8002140:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0e0      	beq.n	8002108 <spi_stm32_transceive+0x39c>
			ctx->current_tx++;
 8002146:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002148:	f103 0208 	add.w	r2, r3, #8
 800214c:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800214e:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8002150:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8002152:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	e7d2      	b.n	80020fe <spi_stm32_transceive+0x392>
		ctx->tx_buf += dfs * len;
 8002158:	3202      	adds	r2, #2
 800215a:	63e2      	str	r2, [r4, #60]	; 0x3c
 800215c:	e7d5      	b.n	800210a <spi_stm32_transceive+0x39e>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800215e:	6873      	ldr	r3, [r6, #4]
 8002160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002164:	6073      	str	r3, [r6, #4]
    defined(CONFIG_SOC_SERIES_STM32H7X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 8002166:	e7d0      	b.n	800210a <spi_stm32_transceive+0x39e>
	} else if (ctx->rx_buf) {
 8002168:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800216a:	2b00      	cmp	r3, #0
 800216c:	f43f af3f 	beq.w	8001fee <spi_stm32_transceive+0x282>
		ctx->rx_buf += dfs * len;
 8002170:	3301      	adds	r3, #1
 8002172:	6463      	str	r3, [r4, #68]	; 0x44
 8002174:	e73b      	b.n	8001fee <spi_stm32_transceive+0x282>
	} else if (ctx->rx_buf) {
 8002176:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002178:	2b00      	cmp	r3, #0
 800217a:	f43f af38 	beq.w	8001fee <spi_stm32_transceive+0x282>
		ctx->rx_buf += dfs * len;
 800217e:	3302      	adds	r3, #2
 8002180:	e7f7      	b.n	8002172 <spi_stm32_transceive+0x406>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8002182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	f47f aee7 	bne.w	8001f58 <spi_stm32_transceive+0x1ec>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 800218a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800218c:	2f00      	cmp	r7, #0
 800218e:	f47f aee3 	bne.w	8001f58 <spi_stm32_transceive+0x1ec>
	_spi_context_cs_control(ctx, on, false);
 8002192:	2200      	movs	r2, #0
 8002194:	4611      	mov	r1, r2
 8002196:	4620      	mov	r0, r4
 8002198:	f001 ff49 	bl	800402e <_spi_context_cs_control>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800219c:	6833      	ldr	r3, [r6, #0]
 800219e:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 80021a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021a6:	d102      	bne.n	80021ae <spi_stm32_transceive+0x442>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80021a8:	68b3      	ldr	r3, [r6, #8]
 80021aa:	0618      	lsls	r0, r3, #24
 80021ac:	d4fc      	bmi.n	80021a8 <spi_stm32_transceive+0x43c>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 80021ae:	68b3      	ldr	r3, [r6, #8]
 80021b0:	0699      	lsls	r1, r3, #26
 80021b2:	d506      	bpl.n	80021c2 <spi_stm32_transceive+0x456>
  tmpreg_sr = SPIx->SR;
 80021b4:	68b3      	ldr	r3, [r6, #8]
 80021b6:	9304      	str	r3, [sp, #16]
  (void) tmpreg_sr;
 80021b8:	9b04      	ldr	r3, [sp, #16]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80021ba:	6833      	ldr	r3, [r6, #0]
 80021bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021c0:	6033      	str	r3, [r6, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80021c2:	6833      	ldr	r3, [r6, #0]
 80021c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021c8:	6033      	str	r3, [r6, #0]
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	889b      	ldrh	r3, [r3, #4]
 80021ce:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 80021d2:	f47f af27 	bne.w	8002024 <spi_stm32_transceive+0x2b8>
		ctx->owner = NULL;
 80021d6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 80021d8:	f104 0008 	add.w	r0, r4, #8
 80021dc:	f000 fd0e 	bl	8002bfc <z_impl_k_sem_give>
}
 80021e0:	e720      	b.n	8002024 <spi_stm32_transceive+0x2b8>
 80021e2:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 80021e4:	a90c      	add	r1, sp, #48	; 0x30
 80021e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ea:	602a      	str	r2, [r5, #0]
 80021ec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80021f0:	682a      	ldr	r2, [r5, #0]
 80021f2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80021f6:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80021fa:	4313      	orrs	r3, r2
 80021fc:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 80021fe:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8002202:	079a      	lsls	r2, r3, #30
 8002204:	f53f ae17 	bmi.w	8001e36 <spi_stm32_transceive+0xca>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8002208:	682a      	ldr	r2, [r5, #0]
 800220a:	f022 0202 	bic.w	r2, r2, #2
 800220e:	e615      	b.n	8001e3c <spi_stm32_transceive+0xd0>

08002210 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002210:	6843      	ldr	r3, [r0, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	615a      	str	r2, [r3, #20]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 800221c:	4a0f      	ldr	r2, [pc, #60]	; (800225c <uart_stm32_irq_err_enable+0x4c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <uart_stm32_irq_err_enable+0x3a>
 8002222:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8002226:	4293      	cmp	r3, r2
 8002228:	d00f      	beq.n	800224a <uart_stm32_irq_err_enable+0x3a>
 800222a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800222e:	4293      	cmp	r3, r2
 8002230:	d00b      	beq.n	800224a <uart_stm32_irq_err_enable+0x3a>
 8002232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <uart_stm32_irq_err_enable+0x3a>
 800223a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800223e:	4293      	cmp	r3, r2
 8002240:	d003      	beq.n	800224a <uart_stm32_irq_err_enable+0x3a>
 8002242:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8002246:	4293      	cmp	r3, r2
 8002248:	d103      	bne.n	8002252 <uart_stm32_irq_err_enable+0x42>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002250:	611a      	str	r2, [r3, #16]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002258:	60da      	str	r2, [r3, #12]
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 800225a:	4770      	bx	lr
 800225c:	40011000 	.word	0x40011000

08002260 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002260:	6843      	ldr	r3, [r0, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	615a      	str	r2, [r3, #20]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 800226c:	4a0f      	ldr	r2, [pc, #60]	; (80022ac <uart_stm32_irq_err_disable+0x4c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <uart_stm32_irq_err_disable+0x3a>
 8002272:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8002276:	4293      	cmp	r3, r2
 8002278:	d00f      	beq.n	800229a <uart_stm32_irq_err_disable+0x3a>
 800227a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800227e:	4293      	cmp	r3, r2
 8002280:	d00b      	beq.n	800229a <uart_stm32_irq_err_disable+0x3a>
 8002282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <uart_stm32_irq_err_disable+0x3a>
 800228a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800228e:	4293      	cmp	r3, r2
 8002290:	d003      	beq.n	800229a <uart_stm32_irq_err_disable+0x3a>
 8002292:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8002296:	4293      	cmp	r3, r2
 8002298:	d103      	bne.n	80022a2 <uart_stm32_irq_err_disable+0x42>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022a8:	60da      	str	r2, [r3, #12]
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 80022aa:	4770      	bx	lr
 80022ac:	40011000 	.word	0x40011000

080022b0 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 80022b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80022b4:	6847      	ldr	r7, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80022b6:	f8d0 8010 	ldr.w	r8, [r0, #16]
	data->clock = clk;
 80022ba:	4c2c      	ldr	r4, [pc, #176]	; (800236c <uart_stm32_init+0xbc>)
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80022bc:	46b9      	mov	r9, r7
{
 80022be:	4606      	mov	r6, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80022c0:	f859 5b0c 	ldr.w	r5, [r9], #12
	data->clock = clk;
 80022c4:	f8c8 4004 	str.w	r4, [r8, #4]
 80022c8:	4620      	mov	r0, r4
 80022ca:	f002 f82c 	bl	8004326 <z_device_ready>
 80022ce:	b918      	cbnz	r0, 80022d8 <uart_stm32_init+0x28>

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
 80022d0:	f06f 0004 	mvn.w	r0, #4
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 80022d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return api->on(dev, sys);
 80022d8:	68a3      	ldr	r3, [r4, #8]
 80022da:	4620      	mov	r0, r4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4649      	mov	r1, r9
 80022e0:	4798      	blx	r3
	if (clock_control_on(data->clock,
 80022e2:	4604      	mov	r4, r0
 80022e4:	2800      	cmp	r0, #0
 80022e6:	d1f3      	bne.n	80022d0 <uart_stm32_init+0x20>
					 (uint32_t)UART_STRUCT(dev));
 80022e8:	6873      	ldr	r3, [r6, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 80022ea:	e9d7 0107 	ldrd	r0, r1, [r7, #28]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	f7ff f802 	bl	80012f8 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 80022f4:	2800      	cmp	r0, #0
 80022f6:	dbed      	blt.n	80022d4 <uart_stm32_init+0x24>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80022f8:	68eb      	ldr	r3, [r5, #12]
 80022fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022fe:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8002300:	68eb      	ldr	r3, [r5, #12]
 8002302:	f043 030c 	orr.w	r3, r3, #12
 8002306:	60eb      	str	r3, [r5, #12]
	if (config->parity == 2) {
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d023      	beq.n	8002356 <uart_stm32_init+0xa6>
	} else if (config->parity == 1) {
 800230e:	2b01      	cmp	r3, #1
 8002310:	d026      	beq.n	8002360 <uart_stm32_init+0xb0>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8002312:	4623      	mov	r3, r4
		ll_parity = LL_USART_PARITY_NONE;
 8002314:	4620      	mov	r0, r4
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8002316:	68ea      	ldr	r2, [r5, #12]
 8002318:	4303      	orrs	r3, r0
 800231a:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800231e:	4313      	orrs	r3, r2
 8002320:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002322:	692b      	ldr	r3, [r5, #16]
 8002324:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002328:	612b      	str	r3, [r5, #16]
	if (config->hw_flow_control) {
 800232a:	7d3b      	ldrb	r3, [r7, #20]
 800232c:	b12b      	cbz	r3, 800233a <uart_stm32_init+0x8a>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800232e:	6873      	ldr	r3, [r6, #4]
 8002330:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002332:	6953      	ldr	r3, [r2, #20]
 8002334:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002338:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800233a:	f8d8 1000 	ldr.w	r1, [r8]
 800233e:	4630      	mov	r0, r6
 8002340:	f001 ff81 	bl	8004246 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002344:	68eb      	ldr	r3, [r5, #12]
 8002346:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800234a:	60eb      	str	r3, [r5, #12]
	config->uconf.irq_config_func(dev);
 800234c:	4630      	mov	r0, r6
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4798      	blx	r3
	return 0;
 8002352:	2000      	movs	r0, #0
 8002354:	e7be      	b.n	80022d4 <uart_stm32_init+0x24>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8002356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800235a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800235e:	e7da      	b.n	8002316 <uart_stm32_init+0x66>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8002360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8002364:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002368:	e7d5      	b.n	8002316 <uart_stm32_init+0x66>
 800236a:	bf00      	nop
 800236c:	20000138 	.word	0x20000138

08002370 <uart_stm32_configure>:
{
 8002370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8002374:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002376:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8002378:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800237a:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 800237c:	2a01      	cmp	r2, #1
{
 800237e:	460d      	mov	r5, r1
	switch (parity) {
 8002380:	f000 8089 	beq.w	8002496 <uart_stm32_configure+0x126>
		return LL_USART_PARITY_NONE;
 8002384:	2a02      	cmp	r2, #2
 8002386:	bf0c      	ite	eq
 8002388:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 800238c:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800238e:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8002392:	f895 e006 	ldrb.w	lr, [r5, #6]
 8002396:	f1b9 0f02 	cmp.w	r9, #2
 800239a:	bf96      	itet	ls
 800239c:	4b42      	ldrls	r3, [pc, #264]	; (80024a8 <uart_stm32_configure+0x138>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800239e:	f44f 5800 	movhi.w	r8, #8192	; 0x2000
 80023a2:	f833 8019 	ldrhls.w	r8, [r3, r9, lsl #1]
	switch (db) {
 80023a6:	f1be 0f04 	cmp.w	lr, #4
 80023aa:	d077      	beq.n	800249c <uart_stm32_configure+0x12c>
		return LL_USART_DATAWIDTH_9B;
 80023ac:	2a00      	cmp	r2, #0
 80023ae:	bf0c      	ite	eq
 80023b0:	2300      	moveq	r3, #0
 80023b2:	f44f 5380 	movne.w	r3, #4096	; 0x1000
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 80023b6:	79ef      	ldrb	r7, [r5, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80023b8:	f1a2 0a03 	sub.w	sl, r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 80023bc:	2f01      	cmp	r7, #1
 80023be:	bf14      	ite	ne
 80023c0:	f04f 0c00 	movne.w	ip, #0
 80023c4:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80023c8:	f1ba 0f01 	cmp.w	sl, #1
 80023cc:	d969      	bls.n	80024a2 <uart_stm32_configure+0x132>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 80023ce:	b112      	cbz	r2, 80023d6 <uart_stm32_configure+0x66>
 80023d0:	f1be 0f04 	cmp.w	lr, #4
 80023d4:	d065      	beq.n	80024a2 <uart_stm32_configure+0x132>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80023d6:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 80023da:	d062      	beq.n	80024a2 <uart_stm32_configure+0x132>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80023dc:	f1be 0f02 	cmp.w	lr, #2
 80023e0:	d95f      	bls.n	80024a2 <uart_stm32_configure+0x132>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 80023e2:	f1be 0f04 	cmp.w	lr, #4
 80023e6:	d05c      	beq.n	80024a2 <uart_stm32_configure+0x132>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 80023e8:	b1c7      	cbz	r7, 800241c <uart_stm32_configure+0xac>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 80023ea:	4a30      	ldr	r2, [pc, #192]	; (80024ac <uart_stm32_configure+0x13c>)
 80023ec:	4294      	cmp	r4, r2
 80023ee:	d013      	beq.n	8002418 <uart_stm32_configure+0xa8>
 80023f0:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80023f4:	4294      	cmp	r4, r2
 80023f6:	d00f      	beq.n	8002418 <uart_stm32_configure+0xa8>
 80023f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023fc:	4294      	cmp	r4, r2
 80023fe:	d00b      	beq.n	8002418 <uart_stm32_configure+0xa8>
 8002400:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002404:	4294      	cmp	r4, r2
 8002406:	d007      	beq.n	8002418 <uart_stm32_configure+0xa8>
 8002408:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800240c:	4294      	cmp	r4, r2
 800240e:	d003      	beq.n	8002418 <uart_stm32_configure+0xa8>
 8002410:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8002414:	4294      	cmp	r4, r2
 8002416:	d144      	bne.n	80024a2 <uart_stm32_configure+0x132>
 8002418:	2f01      	cmp	r7, #1
 800241a:	d142      	bne.n	80024a2 <uart_stm32_configure+0x132>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800241c:	68e2      	ldr	r2, [r4, #12]
 800241e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002422:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002424:	68e2      	ldr	r2, [r4, #12]
 8002426:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 800242a:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800242c:	bf1f      	itttt	ne
 800242e:	68e7      	ldrne	r7, [r4, #12]
 8002430:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8002434:	430f      	orrne	r7, r1
 8002436:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8002438:	6922      	ldr	r2, [r4, #16]
 800243a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800243e:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002440:	bf1f      	itttt	ne
 8002442:	6921      	ldrne	r1, [r4, #16]
 8002444:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8002448:	ea41 0108 	orrne.w	r1, r1, r8
 800244c:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800244e:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 8002450:	6829      	ldr	r1, [r5, #0]
 8002452:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8002456:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8002458:	bf1f      	itttt	ne
 800245a:	68e2      	ldrne	r2, [r4, #12]
 800245c:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8002460:	431a      	orrne	r2, r3
 8002462:	60e2      	strne	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8002464:	6963      	ldr	r3, [r4, #20]
 8002466:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800246a:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800246c:	bf1f      	itttt	ne
 800246e:	6963      	ldrne	r3, [r4, #20]
 8002470:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8002474:	ea43 030c 	orrne.w	r3, r3, ip
 8002478:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 800247a:	6833      	ldr	r3, [r6, #0]
 800247c:	4299      	cmp	r1, r3
 800247e:	d003      	beq.n	8002488 <uart_stm32_configure+0x118>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8002480:	f001 fee1 	bl	8004246 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8002484:	682b      	ldr	r3, [r5, #0]
 8002486:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002488:	68e3      	ldr	r3, [r4, #12]
 800248a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800248e:	60e3      	str	r3, [r4, #12]
	return 0;
 8002490:	2000      	movs	r0, #0
};
 8002492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (parity) {
 8002496:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800249a:	e778      	b.n	800238e <uart_stm32_configure+0x1e>
		return LL_USART_DATAWIDTH_9B;
 800249c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a0:	e789      	b.n	80023b6 <uart_stm32_configure+0x46>
		return -ENOTSUP;
 80024a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80024a6:	e7f4      	b.n	8002492 <uart_stm32_configure+0x122>
 80024a8:	08004c40 	.word	0x08004c40
 80024ac:	40011000 	.word	0x40011000

080024b0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80024b0:	b530      	push	{r4, r5, lr}
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80024b2:	4c0a      	ldr	r4, [pc, #40]	; (80024dc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80024b4:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
 80024b8:	6865      	ldr	r5, [r4, #4]
 80024ba:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 80024bc:	402a      	ands	r2, r5
 80024be:	4311      	orrs	r1, r2
 80024c0:	4301      	orrs	r1, r0
 80024c2:	6061      	str	r1, [r4, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80024c4:	6862      	ldr	r2, [r4, #4]
 80024c6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80024ca:	431a      	orrs	r2, r3
 80024cc:	6062      	str	r2, [r4, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 80024ce:	6862      	ldr	r2, [r4, #4]
 80024d0:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80024d4:	4313      	orrs	r3, r2
 80024d6:	6063      	str	r3, [r4, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80024d8:	bd30      	pop	{r4, r5, pc}
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	ffbf8000 	.word	0xffbf8000

080024e4 <UTILS_PLL_IsBusy>:
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <UTILS_PLL_IsBusy+0x24>)
 80024e6:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 80024e8:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 80024ea:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80024ec:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 80024f0:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	bf14      	ite	ne
 80024f8:	2001      	movne	r0, #1
 80024fa:	2000      	moveq	r0, #0
    status = ERROR;
  }
#endif /*RCC_PLLSAI_SUPPORT*/
#if defined(RCC_PLLI2S_SUPPORT)
  /* Check if PLLI2S is busy*/
  if(LL_RCC_PLLI2S_IsReady() != 0U)
 80024fc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8002500:	bf18      	it	ne
 8002502:	2001      	movne	r0, #1
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800

0800250c <LL_SetFlashLatency>:
  if(HCLK_Frequency == 0U)
 800250c:	2800      	cmp	r0, #0
 800250e:	d04c      	beq.n	80025aa <LL_SetFlashLatency+0x9e>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8002510:	4b42      	ldr	r3, [pc, #264]	; (800261c <LL_SetFlashLatency+0x110>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8002518:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800251c:	d110      	bne.n	8002540 <LL_SetFlashLatency+0x34>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800251e:	f103 630f 	add.w	r3, r3, #149946368	; 0x8f00000
 8002522:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8002526:	4298      	cmp	r0, r3
 8002528:	4a3d      	ldr	r2, [pc, #244]	; (8002620 <LL_SetFlashLatency+0x114>)
 800252a:	d844      	bhi.n	80025b6 <LL_SetFlashLatency+0xaa>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800252c:	4b3d      	ldr	r3, [pc, #244]	; (8002624 <LL_SetFlashLatency+0x118>)
 800252e:	4298      	cmp	r0, r3
 8002530:	d871      	bhi.n	8002616 <LL_SetFlashLatency+0x10a>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002532:	4290      	cmp	r0, r2
 8002534:	d83d      	bhi.n	80025b2 <LL_SetFlashLatency+0xa6>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002536:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <LL_SetFlashLatency+0x11c>)
 8002538:	4298      	cmp	r0, r3
 800253a:	d803      	bhi.n	8002544 <LL_SetFlashLatency+0x38>
 800253c:	2300      	movs	r3, #0
 800253e:	e040      	b.n	80025c2 <LL_SetFlashLatency+0xb6>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8002540:	2300      	movs	r3, #0
 8002542:	e044      	b.n	80025ce <LL_SetFlashLatency+0xc2>
        latency = LL_FLASH_LATENCY_2;
 8002544:	2302      	movs	r3, #2
 8002546:	e042      	b.n	80025ce <LL_SetFlashLatency+0xc2>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002548:	4a38      	ldr	r2, [pc, #224]	; (800262c <LL_SetFlashLatency+0x120>)
 800254a:	4290      	cmp	r0, r2
 800254c:	d909      	bls.n	8002562 <LL_SetFlashLatency+0x56>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800254e:	4a34      	ldr	r2, [pc, #208]	; (8002620 <LL_SetFlashLatency+0x114>)
        latency = LL_FLASH_LATENCY_4;
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf08      	it	eq
 8002554:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002556:	4290      	cmp	r0, r2
 8002558:	d849      	bhi.n	80025ee <LL_SetFlashLatency+0xe2>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800255a:	4a33      	ldr	r2, [pc, #204]	; (8002628 <LL_SetFlashLatency+0x11c>)
 800255c:	4290      	cmp	r0, r2
 800255e:	d946      	bls.n	80025ee <LL_SetFlashLatency+0xe2>
 8002560:	e003      	b.n	800256a <LL_SetFlashLatency+0x5e>
 8002562:	4a31      	ldr	r2, [pc, #196]	; (8002628 <LL_SetFlashLatency+0x11c>)
 8002564:	4290      	cmp	r0, r2
 8002566:	d942      	bls.n	80025ee <LL_SetFlashLatency+0xe2>
 8002568:	b11b      	cbz	r3, 8002572 <LL_SetFlashLatency+0x66>
 800256a:	2b01      	cmp	r3, #1
 800256c:	bf38      	it	cc
 800256e:	2301      	movcc	r3, #1
 8002570:	e040      	b.n	80025f4 <LL_SetFlashLatency+0xe8>
        latency = LL_FLASH_LATENCY_2;
 8002572:	2302      	movs	r3, #2
 8002574:	e03e      	b.n	80025f4 <LL_SetFlashLatency+0xe8>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002576:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <LL_SetFlashLatency+0x11c>)
 8002578:	4290      	cmp	r0, r2
 800257a:	d903      	bls.n	8002584 <LL_SetFlashLatency+0x78>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d146      	bne.n	800260e <LL_SetFlashLatency+0x102>
        latency = LL_FLASH_LATENCY_2;
 8002580:	2302      	movs	r3, #2
 8002582:	e002      	b.n	800258a <LL_SetFlashLatency+0x7e>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002584:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <LL_SetFlashLatency+0x124>)
 8002586:	4290      	cmp	r0, r2
 8002588:	d841      	bhi.n	800260e <LL_SetFlashLatency+0x102>
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800258a:	492a      	ldr	r1, [pc, #168]	; (8002634 <LL_SetFlashLatency+0x128>)
 800258c:	680a      	ldr	r2, [r1, #0]
 800258e:	f022 020f 	bic.w	r2, r2, #15
 8002592:	431a      	orrs	r2, r3
 8002594:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002596:	680a      	ldr	r2, [r1, #0]
 8002598:	f002 020f 	and.w	r2, r2, #15
    } while ((getlatency != latency) && (timeout > 0));
 800259c:	4293      	cmp	r3, r2
 800259e:	d006      	beq.n	80025ae <LL_SetFlashLatency+0xa2>
 80025a0:	680a      	ldr	r2, [r1, #0]
 80025a2:	f002 020f 	and.w	r2, r2, #15
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d001      	beq.n	80025ae <LL_SetFlashLatency+0xa2>
    status = ERROR;
 80025aa:	2001      	movs	r0, #1
 80025ac:	4770      	bx	lr
      status = SUCCESS;
 80025ae:	2000      	movs	r0, #0
}
 80025b0:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 80025b2:	2303      	movs	r3, #3
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80025b4:	e005      	b.n	80025c2 <LL_SetFlashLatency+0xb6>
        latency = LL_FLASH_LATENCY_5;
 80025b6:	2305      	movs	r3, #5
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80025b8:	4290      	cmp	r0, r2
 80025ba:	d802      	bhi.n	80025c2 <LL_SetFlashLatency+0xb6>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80025bc:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <LL_SetFlashLatency+0x11c>)
 80025be:	4290      	cmp	r0, r2
 80025c0:	d802      	bhi.n	80025c8 <LL_SetFlashLatency+0xbc>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80025c2:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <LL_SetFlashLatency+0x124>)
 80025c4:	4290      	cmp	r0, r2
 80025c6:	d902      	bls.n	80025ce <LL_SetFlashLatency+0xc2>
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	bf38      	it	cc
 80025cc:	2301      	movcc	r3, #1
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <LL_SetFlashLatency+0x110>)
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80025d6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80025da:	d10b      	bne.n	80025f4 <LL_SetFlashLatency+0xe8>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80025dc:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
 80025e0:	f502 42a3 	add.w	r2, r2, #20864	; 0x5180
 80025e4:	4290      	cmp	r0, r2
 80025e6:	d9af      	bls.n	8002548 <LL_SetFlashLatency+0x3c>
        latency = LL_FLASH_LATENCY_5;
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf08      	it	eq
 80025ec:	2305      	moveq	r3, #5
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <LL_SetFlashLatency+0x124>)
 80025f0:	4290      	cmp	r0, r2
 80025f2:	d8ba      	bhi.n	800256a <LL_SetFlashLatency+0x5e>
 80025f4:	4a09      	ldr	r2, [pc, #36]	; (800261c <LL_SetFlashLatency+0x110>)
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 80025fc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002600:	d1c3      	bne.n	800258a <LL_SetFlashLatency+0x7e>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002602:	4a07      	ldr	r2, [pc, #28]	; (8002620 <LL_SetFlashLatency+0x114>)
 8002604:	4290      	cmp	r0, r2
 8002606:	d9b6      	bls.n	8002576 <LL_SetFlashLatency+0x6a>
        latency = LL_FLASH_LATENCY_3;
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf08      	it	eq
 800260c:	2303      	moveq	r3, #3
 800260e:	2b01      	cmp	r3, #1
 8002610:	bf38      	it	cc
 8002612:	2301      	movcc	r3, #1
 8002614:	e7b9      	b.n	800258a <LL_SetFlashLatency+0x7e>
        latency = LL_FLASH_LATENCY_4;
 8002616:	2304      	movs	r3, #4
 8002618:	e7ce      	b.n	80025b8 <LL_SetFlashLatency+0xac>
 800261a:	bf00      	nop
 800261c:	40007000 	.word	0x40007000
 8002620:	055d4a80 	.word	0x055d4a80
 8002624:	07270e00 	.word	0x07270e00
 8002628:	03938700 	.word	0x03938700
 800262c:	00b71b00 	.word	0x00b71b00
 8002630:	01c9c380 	.word	0x01c9c380
 8002634:	40023c00 	.word	0x40023c00

08002638 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8002638:	680b      	ldr	r3, [r1, #0]
 800263a:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 800263c:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8002640:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8002642:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8002644:	4e1f      	ldr	r6, [pc, #124]	; (80026c4 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8002646:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 800264a:	6833      	ldr	r3, [r6, #0]
 800264c:	42a3      	cmp	r3, r4
{
 800264e:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 8002650:	d327      	bcc.n	80026a2 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800265a:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800265c:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 800265e:	0192      	lsls	r2, r2, #6
 8002660:	d5fc      	bpl.n	800265c <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	6829      	ldr	r1, [r5, #0]
 8002666:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800266a:	430a      	orrs	r2, r1
 800266c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	f022 0203 	bic.w	r2, r2, #3
 8002674:	f042 0202 	orr.w	r2, r2, #2
 8002678:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002682:	2a08      	cmp	r2, #8
 8002684:	d1fa      	bne.n	800267c <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	6869      	ldr	r1, [r5, #4]
 800268a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800268e:	430a      	orrs	r2, r1
 8002690:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	68a9      	ldr	r1, [r5, #8]
 8002696:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]
}
 800269e:	2000      	movs	r0, #0
 80026a0:	e004      	b.n	80026ac <UTILS_EnablePLLAndSwitchSystem+0x74>
    status = LL_SetFlashLatency(hclk_frequency);
 80026a2:	4620      	mov	r0, r4
 80026a4:	f7ff ff32 	bl	800250c <LL_SetFlashLatency>
  if(status == SUCCESS)
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d0d2      	beq.n	8002652 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 80026ac:	6833      	ldr	r3, [r6, #0]
 80026ae:	42a3      	cmp	r3, r4
 80026b0:	d902      	bls.n	80026b8 <UTILS_EnablePLLAndSwitchSystem+0x80>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7ff ff2a 	bl	800250c <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 80026b8:	b900      	cbnz	r0, 80026bc <UTILS_EnablePLLAndSwitchSystem+0x84>
  SystemCoreClock = HCLKFrequency;
 80026ba:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 80026bc:	bd70      	pop	{r4, r5, r6, pc}
 80026be:	bf00      	nop
 80026c0:	08004dce 	.word	0x08004dce
 80026c4:	2000012c 	.word	0x2000012c
 80026c8:	40023800 	.word	0x40023800

080026cc <LL_PLL_ConfigSystemClock_HSE>:
{
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	4605      	mov	r5, r0
 80026d0:	460f      	mov	r7, r1
 80026d2:	4614      	mov	r4, r2
 80026d4:	461e      	mov	r6, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 80026d6:	f7ff ff05 	bl	80024e4 <UTILS_PLL_IsBusy>
 80026da:	bb60      	cbnz	r0, 8002736 <LL_PLL_ConfigSystemClock_HSE+0x6a>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 80026dc:	6821      	ldr	r1, [r4, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80026de:	6862      	ldr	r2, [r4, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026e0:	68a3      	ldr	r3, [r4, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80026e2:	4c16      	ldr	r4, [pc, #88]	; (800273c <LL_PLL_ConfigSystemClock_HSE+0x70>)
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 80026e4:	f001 003f 	and.w	r0, r1, #63	; 0x3f
 80026e8:	fbb5 f0f0 	udiv	r0, r5, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80026ec:	f3c2 0508 	ubfx	r5, r2, #0, #9
 80026f0:	4345      	muls	r5, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026f2:	0c18      	lsrs	r0, r3, #16
 80026f4:	3001      	adds	r0, #1
 80026f6:	0040      	lsls	r0, r0, #1
 80026f8:	fbb5 f5f0 	udiv	r5, r5, r0
 80026fc:	6820      	ldr	r0, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 80026fe:	0380      	lsls	r0, r0, #14
 8002700:	d40f      	bmi.n	8002722 <LL_PLL_ConfigSystemClock_HSE+0x56>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002702:	6820      	ldr	r0, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8002704:	2f01      	cmp	r7, #1
 8002706:	bf0c      	ite	eq
 8002708:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800270c:	f420 2080 	bicne.w	r0, r0, #262144	; 0x40000
 8002710:	6020      	str	r0, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002712:	6820      	ldr	r0, [r4, #0]
 8002714:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002718:	6020      	str	r0, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800271a:	4c08      	ldr	r4, [pc, #32]	; (800273c <LL_PLL_ConfigSystemClock_HSE+0x70>)
 800271c:	6820      	ldr	r0, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 800271e:	0380      	lsls	r0, r0, #14
 8002720:	d5fc      	bpl.n	800271c <LL_PLL_ConfigSystemClock_HSE+0x50>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 8002722:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002726:	f7ff fec3 	bl	80024b0 <LL_RCC_PLL_ConfigDomain_SYS>
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800272a:	4631      	mov	r1, r6
 800272c:	4628      	mov	r0, r5
}
 800272e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8002732:	f7ff bf81 	b.w	8002638 <UTILS_EnablePLLAndSwitchSystem>
}
 8002736:	2001      	movs	r0, #1
 8002738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800

08002740 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <z_sys_init_run_level+0x3c>)
{
 8002742:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002744:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002748:	3001      	adds	r0, #1
 800274a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800274e:	42a6      	cmp	r6, r4
 8002750:	d800      	bhi.n	8002754 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8002752:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8002754:	e9d4 3500 	ldrd	r3, r5, [r4]
 8002758:	4628      	mov	r0, r5
 800275a:	4798      	blx	r3
		if (dev != NULL) {
 800275c:	b165      	cbz	r5, 8002778 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 800275e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 8002760:	b130      	cbz	r0, 8002770 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8002762:	2800      	cmp	r0, #0
 8002764:	bfb8      	it	lt
 8002766:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8002768:	28ff      	cmp	r0, #255	; 0xff
 800276a:	bfa8      	it	ge
 800276c:	20ff      	movge	r0, #255	; 0xff
 800276e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8002770:	785a      	ldrb	r2, [r3, #1]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002778:	3408      	adds	r4, #8
 800277a:	e7e8      	b.n	800274e <z_sys_init_run_level+0xe>
 800277c:	08004c28 	.word	0x08004c28

08002780 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8002780:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8002782:	4605      	mov	r5, r0
 8002784:	b910      	cbnz	r0, 800278c <z_impl_device_get_binding+0xc>
		return NULL;
 8002786:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 8002788:	4620      	mov	r0, r4
 800278a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 800278c:	7803      	ldrb	r3, [r0, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f9      	beq.n	8002786 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 8002792:	4c0e      	ldr	r4, [pc, #56]	; (80027cc <z_impl_device_get_binding+0x4c>)
 8002794:	4e0e      	ldr	r6, [pc, #56]	; (80027d0 <z_impl_device_get_binding+0x50>)
 8002796:	42b4      	cmp	r4, r6
 8002798:	d108      	bne.n	80027ac <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 800279a:	4c0c      	ldr	r4, [pc, #48]	; (80027cc <z_impl_device_get_binding+0x4c>)
 800279c:	42b4      	cmp	r4, r6
 800279e:	d0f2      	beq.n	8002786 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 80027a0:	4620      	mov	r0, r4
 80027a2:	f001 fdc0 	bl	8004326 <z_device_ready>
 80027a6:	b950      	cbnz	r0, 80027be <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 80027a8:	3418      	adds	r4, #24
 80027aa:	e7f7      	b.n	800279c <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
 80027ac:	4620      	mov	r0, r4
 80027ae:	f001 fdba 	bl	8004326 <z_device_ready>
 80027b2:	b110      	cbz	r0, 80027ba <z_impl_device_get_binding+0x3a>
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	42ab      	cmp	r3, r5
 80027b8:	d0e6      	beq.n	8002788 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 80027ba:	3418      	adds	r4, #24
 80027bc:	e7eb      	b.n	8002796 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 80027be:	6821      	ldr	r1, [r4, #0]
 80027c0:	4628      	mov	r0, r5
 80027c2:	f001 faa2 	bl	8003d0a <strcmp>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d1ee      	bne.n	80027a8 <z_impl_device_get_binding+0x28>
 80027ca:	e7dd      	b.n	8002788 <z_impl_device_get_binding+0x8>
 80027cc:	20000138 	.word	0x20000138
 80027d0:	20000258 	.word	0x20000258

080027d4 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 80027d4:	4802      	ldr	r0, [pc, #8]	; (80027e0 <z_bss_zero+0xc>)
 80027d6:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <z_bss_zero+0x10>)
 80027d8:	2100      	movs	r1, #0
 80027da:	1a12      	subs	r2, r2, r0
 80027dc:	f001 bacc 	b.w	8003d78 <memset>
 80027e0:	20000258 	.word	0x20000258
 80027e4:	2000061c 	.word	0x2000061c

080027e8 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 80027e8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <bg_thread_main+0x34>)
 80027ec:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80027ee:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 80027f0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80027f2:	f7ff ffa5 	bl	8002740 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 80027f6:	f000 feaf 	bl	8003558 <boot_banner>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
 80027fa:	f7fe fbd1 	bl	8000fa0 <__do_global_ctors_aux>
	__do_init_array_aux();
 80027fe:	f7fe fbc1 	bl	8000f84 <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8002802:	2003      	movs	r0, #3
 8002804:	f7ff ff9c 	bl	8002740 <z_sys_init_run_level>

	z_init_static_threads();
 8002808:	f000 f8f2 	bl	80029f0 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
 800280c:	f7fd fe9e 	bl	800054c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <bg_thread_main+0x38>)
 8002812:	7b13      	ldrb	r3, [r2, #12]
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800281a:	bd08      	pop	{r3, pc}
 800281c:	20000615 	.word	0x20000615
 8002820:	20000358 	.word	0x20000358

08002824 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8002824:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8002828:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800290c <z_cstart+0xe8>
 800282c:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800282e:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8002832:	4d37      	ldr	r5, [pc, #220]	; (8002910 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
 8002834:	4e37      	ldr	r6, [pc, #220]	; (8002914 <z_cstart+0xf0>)
 8002836:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002838:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8002918 <z_cstart+0xf4>
	z_setup_new_thread(thread, stack,
 800283c:	4f37      	ldr	r7, [pc, #220]	; (800291c <z_cstart+0xf8>)
 800283e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002842:	2400      	movs	r4, #0
 8002844:	616b      	str	r3, [r5, #20]
 8002846:	23f0      	movs	r3, #240	; 0xf0
 8002848:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800284c:	77ec      	strb	r4, [r5, #31]
 800284e:	762c      	strb	r4, [r5, #24]
 8002850:	766c      	strb	r4, [r5, #25]
 8002852:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8002854:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002856:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800285a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800285c:	f7ff f88e 	bl	800197c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8002860:	f7fe ff44 	bl	80016ec <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8002864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002868:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800286a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800286c:	f7ff f950 	bl	8001b10 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8002870:	4d2b      	ldr	r5, [pc, #172]	; (8002920 <z_cstart+0xfc>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8002872:	f7ff f8b7 	bl	80019e4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8002876:	f240 1301 	movw	r3, #257	; 0x101
 800287a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 800287e:	ab06      	add	r3, sp, #24
 8002880:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
 8002882:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8002886:	f001 fd4d 	bl	8004324 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff ff58 	bl	8002740 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8002890:	2001      	movs	r0, #1
 8002892:	f7ff ff55 	bl	8002740 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002896:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
 800289a:	f000 fbff 	bl	800309c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <z_cstart+0x100>)
	_kernel.ready_q.cache = &z_main_thread;
 80028a0:	622e      	str	r6, [r5, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80028a2:	4921      	ldr	r1, [pc, #132]	; (8002928 <z_cstart+0x104>)
 80028a4:	9305      	str	r3, [sp, #20]
 80028a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028aa:	4653      	mov	r3, sl
 80028ac:	e9cd 4b03 	strd	r4, fp, [sp, #12]
 80028b0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80028b4:	9400      	str	r4, [sp, #0]
 80028b6:	4630      	mov	r0, r6
 80028b8:	f000 f83c 	bl	8002934 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80028bc:	7b73      	ldrb	r3, [r6, #13]
 80028be:	4680      	mov	r8, r0
 80028c0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 80028c4:	4630      	mov	r0, r6
 80028c6:	7373      	strb	r3, [r6, #13]
 80028c8:	f001 fdf3 	bl	80044b2 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 80028cc:	230f      	movs	r3, #15
 80028ce:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80028d2:	4916      	ldr	r1, [pc, #88]	; (800292c <z_cstart+0x108>)
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <z_cstart+0x10c>)
 80028d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80028da:	e9cd b404 	strd	fp, r4, [sp, #16]
 80028de:	e9cd 5400 	strd	r5, r4, [sp]
 80028e2:	4638      	mov	r0, r7
 80028e4:	f000 f826 	bl	8002934 <z_setup_new_thread>
 80028e8:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 80028ea:	60ef      	str	r7, [r5, #12]
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 80028f2:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
 80028f6:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
 80028fa:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
 80028fc:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8002900:	4652      	mov	r2, sl
 8002902:	4641      	mov	r1, r8
 8002904:	4630      	mov	r0, r6
 8002906:	f7fe fedb 	bl	80016c0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800290a:	bf00      	nop
 800290c:	20001bc0 	.word	0x20001bc0
 8002910:	e000ed00 	.word	0xe000ed00
 8002914:	20000358 	.word	0x20000358
 8002918:	080027e9 	.word	0x080027e9
 800291c:	200002d8 	.word	0x200002d8
 8002920:	200005b8 	.word	0x200005b8
 8002924:	08004d3c 	.word	0x08004d3c
 8002928:	20000e20 	.word	0x20000e20
 800292c:	20001240 	.word	0x20001240
 8002930:	08004395 	.word	0x08004395

08002934 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002934:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8002938:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800293a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800293c:	2604      	movs	r6, #4
 800293e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8002940:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002942:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8002944:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 8002948:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800294a:	1dd6      	adds	r6, r2, #7
 800294c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8002952:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002954:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8002958:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 800295a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 800295e:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 8002962:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8002964:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8002966:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002968:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800296c:	9202      	str	r2, [sp, #8]
 800296e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002970:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8002972:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002976:	9200      	str	r2, [sp, #0]
 8002978:	4642      	mov	r2, r8
{
 800297a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800297c:	f7fe fe6e 	bl	800165c <arch_new_thread>
	if (!_current) {
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 8002982:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	b103      	cbz	r3, 800298a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 800298a:	6723      	str	r3, [r4, #112]	; 0x70
}
 800298c:	4640      	mov	r0, r8
 800298e:	b004      	add	sp, #16
 8002990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002994:	200005b8 	.word	0x200005b8

08002998 <z_impl_k_thread_create>:
{
 8002998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800299c:	2700      	movs	r7, #0
 800299e:	9705      	str	r7, [sp, #20]
 80029a0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80029a2:	9704      	str	r7, [sp, #16]
 80029a4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80029a6:	9703      	str	r7, [sp, #12]
 80029a8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80029aa:	9702      	str	r7, [sp, #8]
{
 80029ac:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80029b0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80029b2:	9701      	str	r7, [sp, #4]
 80029b4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80029b6:	9700      	str	r7, [sp, #0]
{
 80029b8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80029ba:	f7ff ffbb 	bl	8002934 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 80029be:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80029c2:	bf08      	it	eq
 80029c4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 80029c8:	d005      	beq.n	80029d6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80029ca:	ea55 0306 	orrs.w	r3, r5, r6
 80029ce:	d105      	bne.n	80029dc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 80029d0:	4620      	mov	r0, r4
 80029d2:	f000 fafd 	bl	8002fd0 <z_sched_start>
}
 80029d6:	4620      	mov	r0, r4
 80029d8:	b007      	add	sp, #28
 80029da:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <z_impl_k_thread_create+0x54>)
 80029de:	4632      	mov	r2, r6
 80029e0:	462b      	mov	r3, r5
 80029e2:	f104 0018 	add.w	r0, r4, #24
 80029e6:	f000 fc23 	bl	8003230 <z_add_timeout>
 80029ea:	e7f4      	b.n	80029d6 <z_impl_k_thread_create+0x3e>
 80029ec:	080044d3 	.word	0x080044d3

080029f0 <z_init_static_threads>:
{
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f2:	4c22      	ldr	r4, [pc, #136]	; (8002a7c <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 80029f4:	4d22      	ldr	r5, [pc, #136]	; (8002a80 <z_init_static_threads+0x90>)
{
 80029f6:	b087      	sub	sp, #28
 80029f8:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 80029fa:	42ae      	cmp	r6, r5
 80029fc:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8002a00:	d30b      	bcc.n	8002a1a <z_init_static_threads+0x2a>
	k_sched_lock();
 8002a02:	f000 f993 	bl	8002d2c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002a06:	4c1d      	ldr	r4, [pc, #116]	; (8002a7c <z_init_static_threads+0x8c>)
 8002a08:	4f1e      	ldr	r7, [pc, #120]	; (8002a84 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
 8002a0a:	260a      	movs	r6, #10
 8002a0c:	42ac      	cmp	r4, r5
 8002a0e:	d320      	bcc.n	8002a52 <z_init_static_threads+0x62>
}
 8002a10:	b007      	add	sp, #28
 8002a12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8002a16:	f000 ba0f 	b.w	8002e38 <k_sched_unlock>
		z_setup_new_thread(
 8002a1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002a1e:	9305      	str	r3, [sp, #20]
 8002a20:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002a24:	9304      	str	r3, [sp, #16]
 8002a26:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8002a2a:	9303      	str	r3, [sp, #12]
 8002a2c:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8002a30:	9302      	str	r3, [sp, #8]
 8002a32:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8002a42:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8002a46:	f7ff ff75 	bl	8002934 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8002a4a:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8002a4e:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8002a50:	e7d2      	b.n	80029f8 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002a52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a54:	1c53      	adds	r3, r2, #1
 8002a56:	d009      	beq.n	8002a6c <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 8002a58:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002a5c:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002a60:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8002a64:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002a66:	d103      	bne.n	8002a70 <z_init_static_threads+0x80>
	z_sched_start(thread);
 8002a68:	f000 fab2 	bl	8002fd0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002a6c:	3430      	adds	r4, #48	; 0x30
 8002a6e:	e7cd      	b.n	8002a0c <z_init_static_threads+0x1c>
 8002a70:	4639      	mov	r1, r7
 8002a72:	3018      	adds	r0, #24
 8002a74:	f000 fbdc 	bl	8003230 <z_add_timeout>
 8002a78:	e7f8      	b.n	8002a6c <z_init_static_threads+0x7c>
 8002a7a:	bf00      	nop
 8002a7c:	20000258 	.word	0x20000258
 8002a80:	20000258 	.word	0x20000258
 8002a84:	080044d3 	.word	0x080044d3

08002a88 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8002a88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	4617      	mov	r7, r2
 8002a90:	461e      	mov	r6, r3
	__asm__ volatile(
 8002a92:	f04f 0310 	mov.w	r3, #16
 8002a96:	f3ef 8811 	mrs	r8, BASEPRI
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8002aa2:	68c3      	ldr	r3, [r0, #12]
 8002aa4:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <z_impl_k_mutex_lock+0xe8>)
 8002aa6:	b16b      	cbz	r3, 8002ac4 <z_impl_k_mutex_lock+0x3c>
 8002aa8:	6880      	ldr	r0, [r0, #8]
 8002aaa:	6891      	ldr	r1, [r2, #8]
 8002aac:	4288      	cmp	r0, r1
 8002aae:	d019      	beq.n	8002ae4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8002ab0:	ea57 0306 	orrs.w	r3, r7, r6
 8002ab4:	d118      	bne.n	8002ae8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 8002ab6:	f388 8811 	msr	BASEPRI, r8
 8002aba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 8002abe:	f06f 000f 	mvn.w	r0, #15
 8002ac2:	e00c      	b.n	8002ade <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 8002ac4:	6891      	ldr	r1, [r2, #8]
 8002ac6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8002aca:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 8002acc:	3301      	adds	r3, #1
 8002ace:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 8002ad0:	6893      	ldr	r3, [r2, #8]
 8002ad2:	60a3      	str	r3, [r4, #8]
 8002ad4:	f388 8811 	msr	BASEPRI, r8
 8002ad8:	f3bf 8f6f 	isb	sy
		return 0;
 8002adc:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 8002ade:	b002      	add	sp, #8
 8002ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 8002ae4:	6921      	ldr	r1, [r4, #16]
 8002ae6:	e7f0      	b.n	8002aca <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8002ae8:	f991 100e 	ldrsb.w	r1, [r1, #14]
 8002aec:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
 8002af0:	4299      	cmp	r1, r3
 8002af2:	bfa8      	it	ge
 8002af4:	4619      	movge	r1, r3
 8002af6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 8002afa:	4291      	cmp	r1, r2
 8002afc:	bfb8      	it	lt
 8002afe:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8002b00:	428b      	cmp	r3, r1
 8002b02:	dd2e      	ble.n	8002b62 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 8002b04:	f001 fc52 	bl	80043ac <adjust_owner_prio.isra.0>
 8002b08:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8002b0a:	e9cd 7600 	strd	r7, r6, [sp]
 8002b0e:	4819      	ldr	r0, [pc, #100]	; (8002b74 <z_impl_k_mutex_lock+0xec>)
 8002b10:	4622      	mov	r2, r4
 8002b12:	4641      	mov	r1, r8
 8002b14:	f000 f97c 	bl	8002e10 <z_pend_curr>
	if (got_mutex == 0) {
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	d0e0      	beq.n	8002ade <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 8002b1c:	f04f 0310 	mov.w	r3, #16
 8002b20:	f3ef 8611 	mrs	r6, BASEPRI
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002b30:	429c      	cmp	r4, r3
 8002b32:	d00a      	beq.n	8002b4a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8002b34:	b14b      	cbz	r3, 8002b4a <z_impl_k_mutex_lock+0xc2>
 8002b36:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8002b3a:	4299      	cmp	r1, r3
 8002b3c:	bfa8      	it	ge
 8002b3e:	4619      	movge	r1, r3
 8002b40:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8002b44:	4299      	cmp	r1, r3
 8002b46:	bfb8      	it	lt
 8002b48:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8002b4a:	68a0      	ldr	r0, [r4, #8]
 8002b4c:	f001 fc2e 	bl	80043ac <adjust_owner_prio.isra.0>
 8002b50:	b900      	cbnz	r0, 8002b54 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
 8002b52:	b145      	cbz	r5, 8002b66 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 8002b54:	4807      	ldr	r0, [pc, #28]	; (8002b74 <z_impl_k_mutex_lock+0xec>)
 8002b56:	4631      	mov	r1, r6
 8002b58:	f000 f8d6 	bl	8002d08 <z_reschedule>
	return -EAGAIN;
 8002b5c:	f06f 000a 	mvn.w	r0, #10
 8002b60:	e7bd      	b.n	8002ade <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 8002b62:	2500      	movs	r5, #0
 8002b64:	e7d1      	b.n	8002b0a <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
 8002b66:	f386 8811 	msr	BASEPRI, r6
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	e7f5      	b.n	8002b5c <z_impl_k_mutex_lock+0xd4>
 8002b70:	200005b8 	.word	0x200005b8
 8002b74:	20000616 	.word	0x20000616

08002b78 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8002b78:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8002b7a:	6883      	ldr	r3, [r0, #8]
{
 8002b7c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d032      	beq.n	8002be8 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8002b82:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <z_impl_k_mutex_unlock+0x7c>)
 8002b84:	6892      	ldr	r2, [r2, #8]
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d131      	bne.n	8002bee <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8002b8a:	7bda      	ldrb	r2, [r3, #15]
 8002b8c:	3a01      	subs	r2, #1
 8002b8e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
 8002b90:	68c3      	ldr	r3, [r0, #12]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d005      	beq.n	8002ba2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 8002b96:	3b01      	subs	r3, #1
 8002b98:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
 8002b9a:	f000 f94d 	bl	8002e38 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 8002b9e:	2000      	movs	r0, #0
}
 8002ba0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8002ba2:	f04f 0310 	mov.w	r3, #16
 8002ba6:	f3ef 8511 	mrs	r5, BASEPRI
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8002bb2:	6901      	ldr	r1, [r0, #16]
 8002bb4:	6880      	ldr	r0, [r0, #8]
 8002bb6:	f001 fbf9 	bl	80043ac <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f001 fcab 	bl	8004516 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8002bc0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8002bc2:	b158      	cbz	r0, 8002bdc <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
 8002bc4:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8002bc8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8002bca:	2200      	movs	r2, #0
 8002bcc:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
 8002bce:	f001 fc70 	bl	80044b2 <z_ready_thread>
		z_reschedule(&lock, key);
 8002bd2:	4809      	ldr	r0, [pc, #36]	; (8002bf8 <z_impl_k_mutex_unlock+0x80>)
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	f000 f897 	bl	8002d08 <z_reschedule>
 8002bda:	e7de      	b.n	8002b9a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 8002bdc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8002bde:	f385 8811 	msr	BASEPRI, r5
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	e7d8      	b.n	8002b9a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8002be8:	f06f 0015 	mvn.w	r0, #21
 8002bec:	e7d8      	b.n	8002ba0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
 8002bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf2:	e7d5      	b.n	8002ba0 <z_impl_k_mutex_unlock+0x28>
 8002bf4:	200005b8 	.word	0x200005b8
 8002bf8:	20000616 	.word	0x20000616

08002bfc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8002bfc:	b538      	push	{r3, r4, r5, lr}
 8002bfe:	4604      	mov	r4, r0
	__asm__ volatile(
 8002c00:	f04f 0310 	mov.w	r3, #16
 8002c04:	f3ef 8511 	mrs	r5, BASEPRI
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8002c10:	f001 fc81 	bl	8004516 <z_unpend_first_thread>

	if (thread != NULL) {
 8002c14:	b148      	cbz	r0, 8002c2a <z_impl_k_sem_give+0x2e>
 8002c16:	2200      	movs	r2, #0
 8002c18:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8002c1a:	f001 fc4a 	bl	80044b2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8002c1e:	4629      	mov	r1, r5
 8002c20:	4805      	ldr	r0, [pc, #20]	; (8002c38 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8002c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8002c26:	f000 b86f 	b.w	8002d08 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8002c2a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	bf18      	it	ne
 8002c32:	3301      	addne	r3, #1
 8002c34:	60a3      	str	r3, [r4, #8]
}
 8002c36:	e7f2      	b.n	8002c1e <z_impl_k_sem_give+0x22>
 8002c38:	20000617 	.word	0x20000617

08002c3c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8002c3c:	b513      	push	{r0, r1, r4, lr}
 8002c3e:	f04f 0410 	mov.w	r4, #16
 8002c42:	f3ef 8111 	mrs	r1, BASEPRI
 8002c46:	f384 8811 	msr	BASEPRI, r4
 8002c4a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8002c4e:	6884      	ldr	r4, [r0, #8]
 8002c50:	b144      	cbz	r4, 8002c64 <z_impl_k_sem_take+0x28>
		sem->count--;
 8002c52:	3c01      	subs	r4, #1
 8002c54:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8002c56:	f381 8811 	msr	BASEPRI, r1
 8002c5a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8002c5e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8002c60:	b002      	add	sp, #8
 8002c62:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8002c64:	ea52 0403 	orrs.w	r4, r2, r3
 8002c68:	d106      	bne.n	8002c78 <z_impl_k_sem_take+0x3c>
 8002c6a:	f381 8811 	msr	BASEPRI, r1
 8002c6e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8002c72:	f06f 000f 	mvn.w	r0, #15
 8002c76:	e7f3      	b.n	8002c60 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8002c78:	e9cd 2300 	strd	r2, r3, [sp]
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4802      	ldr	r0, [pc, #8]	; (8002c88 <z_impl_k_sem_take+0x4c>)
 8002c80:	f000 f8c6 	bl	8002e10 <z_pend_curr>
	return ret;
 8002c84:	e7ec      	b.n	8002c60 <z_impl_k_sem_take+0x24>
 8002c86:	bf00      	nop
 8002c88:	20000617 	.word	0x20000617

08002c8c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8002c8c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8002c8e:	4c08      	ldr	r4, [pc, #32]	; (8002cb0 <z_reset_time_slice+0x24>)
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	b15b      	cbz	r3, 8002cac <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8002c94:	f7fe fc32 	bl	80014fc <sys_clock_elapsed>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	6820      	ldr	r0, [r4, #0]
 8002c9c:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <z_reset_time_slice+0x28>)
 8002c9e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
 8002ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8002ca4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	f001 bc63 	b.w	8004572 <z_set_timeout_expiry>
}
 8002cac:	bd10      	pop	{r4, pc}
 8002cae:	bf00      	nop
 8002cb0:	200005ec 	.word	0x200005ec
 8002cb4:	200005b8 	.word	0x200005b8

08002cb8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8002cb8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002cba:	f04f 0310 	mov.w	r3, #16
 8002cbe:	f3ef 8411 	mrs	r4, BASEPRI
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8002cca:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <k_sched_time_slice_set+0x44>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8002cd0:	4290      	cmp	r0, r2
			return ((uint32_t)t) * (to_hz / from_hz);
 8002cd2:	f04f 030a 	mov.w	r3, #10
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <k_sched_time_slice_set+0x48>)
 8002cd8:	fb00 f303 	mul.w	r3, r0, r3
 8002cdc:	dc09      	bgt.n	8002cf2 <k_sched_time_slice_set+0x3a>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
 8002cde:	6013      	str	r3, [r2, #0]
		}
		slice_max_prio = prio;
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <k_sched_time_slice_set+0x4c>)
 8002ce2:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8002ce4:	f7ff ffd2 	bl	8002c8c <z_reset_time_slice>
	__asm__ volatile(
 8002ce8:	f384 8811 	msr	BASEPRI, r4
 8002cec:	f3bf 8f6f 	isb	sy
	}
}
 8002cf0:	bd10      	pop	{r4, pc}
			slice_time = MAX(2, slice_time);
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	bfb8      	it	lt
 8002cf6:	2302      	movlt	r3, #2
 8002cf8:	e7f1      	b.n	8002cde <k_sched_time_slice_set+0x26>
 8002cfa:	bf00      	nop
 8002cfc:	200005b8 	.word	0x200005b8
 8002d00:	200005ec 	.word	0x200005ec
 8002d04:	200005e8 	.word	0x200005e8

08002d08 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8002d08:	b949      	cbnz	r1, 8002d1e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d0a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 8002d0e:	b930      	cbnz	r0, 8002d1e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d001      	beq.n	8002d1e <z_reschedule+0x16>
	ret = arch_swap(key);
 8002d1a:	f7fe bc23 	b.w	8001564 <arch_swap>
 8002d1e:	f381 8811 	msr	BASEPRI, r1
 8002d22:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 8002d26:	4770      	bx	lr
 8002d28:	200005b8 	.word	0x200005b8

08002d2c <k_sched_lock>:
	__asm__ volatile(
 8002d2c:	f04f 0310 	mov.w	r3, #16
 8002d30:	f3ef 8111 	mrs	r1, BASEPRI
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <k_sched_lock+0x24>)
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	7bd3      	ldrb	r3, [r2, #15]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8002d46:	f381 8811 	msr	BASEPRI, r1
 8002d4a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8002d4e:	4770      	bx	lr
 8002d50:	200005b8 	.word	0x200005b8

08002d54 <update_cache>:
{
 8002d54:	b538      	push	{r3, r4, r5, lr}
 8002d56:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8002d58:	480c      	ldr	r0, [pc, #48]	; (8002d8c <update_cache+0x38>)
 8002d5a:	4d0d      	ldr	r5, [pc, #52]	; (8002d90 <update_cache+0x3c>)
 8002d5c:	f001 fb79 	bl	8004452 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8002d60:	4604      	mov	r4, r0
 8002d62:	b900      	cbnz	r0, 8002d66 <update_cache+0x12>
 8002d64:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8002d66:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8002d68:	b94a      	cbnz	r2, 8002d7e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 8002d6a:	7b5a      	ldrb	r2, [r3, #13]
 8002d6c:	06d2      	lsls	r2, r2, #27
 8002d6e:	d106      	bne.n	8002d7e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8002d70:	69a2      	ldr	r2, [r4, #24]
 8002d72:	b922      	cbnz	r2, 8002d7e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8002d74:	89da      	ldrh	r2, [r3, #14]
 8002d76:	2a7f      	cmp	r2, #127	; 0x7f
 8002d78:	d901      	bls.n	8002d7e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 8002d7a:	622b      	str	r3, [r5, #32]
}
 8002d7c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8002d7e:	429c      	cmp	r4, r3
 8002d80:	d001      	beq.n	8002d86 <update_cache+0x32>
			z_reset_time_slice();
 8002d82:	f7ff ff83 	bl	8002c8c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8002d86:	622c      	str	r4, [r5, #32]
}
 8002d88:	e7f8      	b.n	8002d7c <update_cache+0x28>
 8002d8a:	bf00      	nop
 8002d8c:	200005dc 	.word	0x200005dc
 8002d90:	200005b8 	.word	0x200005b8

08002d94 <unready_thread>:
{
 8002d94:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8002d96:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8002d9a:	7b43      	ldrb	r3, [r0, #13]
 8002d9c:	2a00      	cmp	r2, #0
{
 8002d9e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8002da0:	da04      	bge.n	8002dac <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002da6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8002da8:	f001 fb1b 	bl	80043e2 <sys_dlist_remove>
	update_cache(thread == _current);
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <unready_thread+0x2c>)
 8002dae:	6898      	ldr	r0, [r3, #8]
 8002db0:	1a43      	subs	r3, r0, r1
 8002db2:	4258      	negs	r0, r3
 8002db4:	4158      	adcs	r0, r3
}
 8002db6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8002dba:	f7ff bfcb 	b.w	8002d54 <update_cache>
 8002dbe:	bf00      	nop
 8002dc0:	200005b8 	.word	0x200005b8

08002dc4 <pend>:
{
 8002dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dc8:	4606      	mov	r6, r0
 8002dca:	4615      	mov	r5, r2
 8002dcc:	461c      	mov	r4, r3
	__asm__ volatile(
 8002dce:	f04f 0310 	mov.w	r3, #16
 8002dd2:	f3ef 8711 	mrs	r7, BASEPRI
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 8002dde:	f001 fb3e 	bl	800445e <add_to_waitq_locked>
	__asm__ volatile(
 8002de2:	f387 8811 	msr	BASEPRI, r7
 8002de6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002dea:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002dee:	bf08      	it	eq
 8002df0:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 8002df4:	d008      	beq.n	8002e08 <pend+0x44>
 8002df6:	462a      	mov	r2, r5
 8002df8:	4623      	mov	r3, r4
 8002dfa:	f106 0018 	add.w	r0, r6, #24
 8002dfe:	4903      	ldr	r1, [pc, #12]	; (8002e0c <pend+0x48>)
}
 8002e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e04:	f000 ba14 	b.w	8003230 <z_add_timeout>
 8002e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e0c:	080044d3 	.word	0x080044d3

08002e10 <z_pend_curr>:
{
 8002e10:	b510      	push	{r4, lr}
	pending_current = _current;
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <z_pend_curr+0x20>)
 8002e14:	6898      	ldr	r0, [r3, #8]
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <z_pend_curr+0x24>)
{
 8002e18:	460c      	mov	r4, r1
	pending_current = _current;
 8002e1a:	6018      	str	r0, [r3, #0]
{
 8002e1c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 8002e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002e22:	f7ff ffcf 	bl	8002dc4 <pend>
 8002e26:	4620      	mov	r0, r4
}
 8002e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e2c:	f7fe bb9a 	b.w	8001564 <arch_swap>
 8002e30:	200005b8 	.word	0x200005b8
 8002e34:	200005e4 	.word	0x200005e4

08002e38 <k_sched_unlock>:
{
 8002e38:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002e3a:	f04f 0310 	mov.w	r3, #16
 8002e3e:	f3ef 8411 	mrs	r4, BASEPRI
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8002e4a:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <k_sched_unlock+0x34>)
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	7bd3      	ldrb	r3, [r2, #15]
 8002e50:	3301      	adds	r3, #1
 8002e52:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7ff ff7d 	bl	8002d54 <update_cache>
	__asm__ volatile(
 8002e5a:	f384 8811 	msr	BASEPRI, r4
 8002e5e:	f3bf 8f6f 	isb	sy
}
 8002e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8002e66:	f001 baea 	b.w	800443e <z_reschedule_unlocked>
 8002e6a:	bf00      	nop
 8002e6c:	200005b8 	.word	0x200005b8

08002e70 <move_thread_to_end_of_prio_q>:
{
 8002e70:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8002e72:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8002e76:	7b43      	ldrb	r3, [r0, #13]
 8002e78:	2a00      	cmp	r2, #0
{
 8002e7a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8002e7c:	da04      	bge.n	8002e88 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e82:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002e84:	f001 faad 	bl	80043e2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8002e88:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 8002e8a:	4a15      	ldr	r2, [pc, #84]	; (8002ee0 <move_thread_to_end_of_prio_q+0x70>)
 8002e8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e90:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8002e92:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002e96:	f102 0524 	add.w	r5, r2, #36	; 0x24
 8002e9a:	42ab      	cmp	r3, r5
 8002e9c:	d01b      	beq.n	8002ed6 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002e9e:	b1d3      	cbz	r3, 8002ed6 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 8002ea0:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8002ea4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 8002ea8:	4286      	cmp	r6, r0
 8002eaa:	d00f      	beq.n	8002ecc <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 8002eac:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	dd0c      	ble.n	8002ecc <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8002eb2:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8002eb4:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8002eb8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8002eba:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8002ebc:	6890      	ldr	r0, [r2, #8]
 8002ebe:	1a43      	subs	r3, r0, r1
 8002ec0:	4258      	negs	r0, r3
}
 8002ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8002ec6:	4158      	adcs	r0, r3
 8002ec8:	f7ff bf44 	b.w	8002d54 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8002ecc:	42a3      	cmp	r3, r4
 8002ece:	d002      	beq.n	8002ed6 <move_thread_to_end_of_prio_q+0x66>
 8002ed0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1e6      	bne.n	8002ea4 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 8002ed6:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 8002eda:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8002edc:	6291      	str	r1, [r2, #40]	; 0x28
}
 8002ede:	e7ed      	b.n	8002ebc <move_thread_to_end_of_prio_q+0x4c>
 8002ee0:	200005b8 	.word	0x200005b8

08002ee4 <z_time_slice>:
{
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	4601      	mov	r1, r0
	__asm__ volatile(
 8002ee8:	f04f 0310 	mov.w	r3, #16
 8002eec:	f3ef 8411 	mrs	r4, BASEPRI
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8002ef8:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <z_time_slice+0x6c>)
 8002efa:	4a16      	ldr	r2, [pc, #88]	; (8002f54 <z_time_slice+0x70>)
 8002efc:	6898      	ldr	r0, [r3, #8]
 8002efe:	6815      	ldr	r5, [r2, #0]
 8002f00:	42a8      	cmp	r0, r5
 8002f02:	d106      	bne.n	8002f12 <z_time_slice+0x2e>
			z_reset_time_slice();
 8002f04:	f7ff fec2 	bl	8002c8c <z_reset_time_slice>
	__asm__ volatile(
 8002f08:	f384 8811 	msr	BASEPRI, r4
 8002f0c:	f3bf 8f6f 	isb	sy
}
 8002f10:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8002f12:	2500      	movs	r5, #0
 8002f14:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8002f16:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <z_time_slice+0x74>)
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	b1ba      	cbz	r2, 8002f4c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8002f1c:	89c2      	ldrh	r2, [r0, #14]
 8002f1e:	2a7f      	cmp	r2, #127	; 0x7f
 8002f20:	d814      	bhi.n	8002f4c <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
 8002f22:	7b42      	ldrb	r2, [r0, #13]
 8002f24:	06d2      	lsls	r2, r2, #27
 8002f26:	d111      	bne.n	8002f4c <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8002f28:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <z_time_slice+0x78>)
 8002f2a:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	4295      	cmp	r5, r2
 8002f32:	db0b      	blt.n	8002f4c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <z_time_slice+0x7c>)
 8002f36:	4290      	cmp	r0, r2
 8002f38:	d008      	beq.n	8002f4c <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	428a      	cmp	r2, r1
 8002f3e:	dc02      	bgt.n	8002f46 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
 8002f40:	f7ff ff96 	bl	8002e70 <move_thread_to_end_of_prio_q>
 8002f44:	e7de      	b.n	8002f04 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
 8002f46:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
 8002f48:	611a      	str	r2, [r3, #16]
 8002f4a:	e7dd      	b.n	8002f08 <z_time_slice+0x24>
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	e7fb      	b.n	8002f48 <z_time_slice+0x64>
 8002f50:	200005b8 	.word	0x200005b8
 8002f54:	200005e4 	.word	0x200005e4
 8002f58:	200005ec 	.word	0x200005ec
 8002f5c:	200005e8 	.word	0x200005e8
 8002f60:	200002d8 	.word	0x200002d8

08002f64 <ready_thread>:
{
 8002f64:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8002f66:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8002f6a:	7b43      	ldrb	r3, [r0, #13]
 8002f6c:	2a00      	cmp	r2, #0
 8002f6e:	db2a      	blt.n	8002fc6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8002f70:	06da      	lsls	r2, r3, #27
 8002f72:	d128      	bne.n	8002fc6 <ready_thread+0x62>
 8002f74:	6982      	ldr	r2, [r0, #24]
 8002f76:	bb32      	cbnz	r2, 8002fc6 <ready_thread+0x62>
	return list->head == list;
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8002f7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f7e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 8002f80:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002f84:	f102 0524 	add.w	r5, r2, #36	; 0x24
 8002f88:	42ab      	cmp	r3, r5
 8002f8a:	d017      	beq.n	8002fbc <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002f8c:	b1b3      	cbz	r3, 8002fbc <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 8002f8e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8002f92:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8002f96:	428e      	cmp	r6, r1
 8002f98:	d00b      	beq.n	8002fb2 <ready_thread+0x4e>
		return b2 - b1;
 8002f9a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002f9c:	2900      	cmp	r1, #0
 8002f9e:	dd08      	ble.n	8002fb2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8002fa0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8002fa2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8002fa6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8002fa8:	6058      	str	r0, [r3, #4]
}
 8002faa:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7ff bed1 	b.w	8002d54 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8002fb2:	42a3      	cmp	r3, r4
 8002fb4:	d002      	beq.n	8002fbc <ready_thread+0x58>
 8002fb6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1ea      	bne.n	8002f92 <ready_thread+0x2e>
	node->prev = tail;
 8002fbc:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 8002fc0:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8002fc2:	6290      	str	r0, [r2, #40]	; 0x28
}
 8002fc4:	e7f1      	b.n	8002faa <ready_thread+0x46>
}
 8002fc6:	bc70      	pop	{r4, r5, r6}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	200005b8 	.word	0x200005b8

08002fd0 <z_sched_start>:
{
 8002fd0:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002fd2:	f04f 0210 	mov.w	r2, #16
 8002fd6:	f3ef 8411 	mrs	r4, BASEPRI
 8002fda:	f382 8811 	msr	BASEPRI, r2
 8002fde:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8002fe2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8002fe4:	0751      	lsls	r1, r2, #29
 8002fe6:	d404      	bmi.n	8002ff2 <z_sched_start+0x22>
	__asm__ volatile(
 8002fe8:	f384 8811 	msr	BASEPRI, r4
 8002fec:	f3bf 8f6f 	isb	sy
}
 8002ff0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002ff2:	f022 0204 	bic.w	r2, r2, #4
 8002ff6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8002ff8:	f7ff ffb4 	bl	8002f64 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4802      	ldr	r0, [pc, #8]	; (8003008 <z_sched_start+0x38>)
}
 8003000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8003004:	f7ff be80 	b.w	8002d08 <z_reschedule>
 8003008:	20000618 	.word	0x20000618

0800300c <z_set_prio>:
{
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	4604      	mov	r4, r0
	__asm__ volatile(
 8003010:	f04f 0310 	mov.w	r3, #16
 8003014:	f3ef 8611 	mrs	r6, BASEPRI
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 8003020:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8003022:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 8003024:	b249      	sxtb	r1, r1
 8003026:	d133      	bne.n	8003090 <z_set_prio+0x84>
		if (need_sched) {
 8003028:	6982      	ldr	r2, [r0, #24]
 800302a:	bb8a      	cbnz	r2, 8003090 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800302c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003030:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003032:	f001 f9d6 	bl	80043e2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8003036:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 8003038:	4a17      	ldr	r2, [pc, #92]	; (8003098 <z_set_prio+0x8c>)
				thread->base.prio = prio;
 800303a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 800303c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003040:	7343      	strb	r3, [r0, #13]
 8003042:	4610      	mov	r0, r2
 8003044:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003048:	4283      	cmp	r3, r0
 800304a:	d01b      	beq.n	8003084 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800304c:	b1d3      	cbz	r3, 8003084 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
 800304e:	6a97      	ldr	r7, [r2, #40]	; 0x28
	int32_t b2 = thread_2->base.prio;
 8003050:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
 8003054:	42a9      	cmp	r1, r5
 8003056:	d010      	beq.n	800307a <z_set_prio+0x6e>
		return b2 - b1;
 8003058:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 800305a:	2d00      	cmp	r5, #0
 800305c:	dd0d      	ble.n	800307a <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
 800305e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8003060:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8003064:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8003066:	605c      	str	r4, [r3, #4]
			update_cache(1);
 8003068:	2001      	movs	r0, #1
 800306a:	f7ff fe73 	bl	8002d54 <update_cache>
 800306e:	2001      	movs	r0, #1
	__asm__ volatile(
 8003070:	f386 8811 	msr	BASEPRI, r6
 8003074:	f3bf 8f6f 	isb	sy
}
 8003078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 800307a:	42bb      	cmp	r3, r7
 800307c:	d002      	beq.n	8003084 <z_set_prio+0x78>
 800307e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e5      	bne.n	8003050 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
 8003084:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->prev = tail;
 8003086:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
 800308a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800308c:	6294      	str	r4, [r2, #40]	; 0x28
}
 800308e:	e7eb      	b.n	8003068 <z_set_prio+0x5c>
			thread->base.prio = prio;
 8003090:	73a1      	strb	r1, [r4, #14]
 8003092:	2000      	movs	r0, #0
 8003094:	e7ec      	b.n	8003070 <z_set_prio+0x64>
 8003096:	bf00      	nop
 8003098:	200005b8 	.word	0x200005b8

0800309c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800309e:	2100      	movs	r1, #0
 80030a0:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 80030a4:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 80030a8:	4608      	mov	r0, r1
 80030aa:	f7ff be05 	b.w	8002cb8 <k_sched_time_slice_set>
 80030ae:	bf00      	nop
 80030b0:	200005b8 	.word	0x200005b8

080030b4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 80030b4:	4b01      	ldr	r3, [pc, #4]	; (80030bc <z_impl_k_current_get+0x8>)
 80030b6:	6898      	ldr	r0, [r3, #8]
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	200005b8 	.word	0x200005b8

080030c0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 80030c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030c4:	4604      	mov	r4, r0
	__asm__ volatile(
 80030c6:	f04f 0310 	mov.w	r3, #16
 80030ca:	f3ef 8611 	mrs	r6, BASEPRI
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 80030d6:	7b43      	ldrb	r3, [r0, #13]
 80030d8:	071a      	lsls	r2, r3, #28
 80030da:	d505      	bpl.n	80030e8 <z_thread_abort+0x28>
	__asm__ volatile(
 80030dc:	f386 8811 	msr	BASEPRI, r6
 80030e0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 80030e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80030e8:	f023 0220 	bic.w	r2, r3, #32
 80030ec:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 80030f0:	09d2      	lsrs	r2, r2, #7
 80030f2:	d120      	bne.n	8003136 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80030f4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 80030f6:	68a3      	ldr	r3, [r4, #8]
 80030f8:	b113      	cbz	r3, 8003100 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 80030fa:	4620      	mov	r0, r4
 80030fc:	f001 f979 	bl	80043f2 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8003100:	f104 0018 	add.w	r0, r4, #24
 8003104:	f001 fa1f 	bl	8004546 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8003108:	f104 0758 	add.w	r7, r4, #88	; 0x58
 800310c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8003110:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003112:	42bd      	cmp	r5, r7
 8003114:	d000      	beq.n	8003118 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8003116:	b9b5      	cbnz	r5, 8003146 <z_thread_abort+0x86>
		update_cache(1);
 8003118:	2001      	movs	r0, #1
 800311a:	f7ff fe1b 	bl	8002d54 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <z_thread_abort+0xa0>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	42a3      	cmp	r3, r4
 8003124:	d1da      	bne.n	80030dc <z_thread_abort+0x1c>
 8003126:	f3ef 8305 	mrs	r3, IPSR
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1d6      	bne.n	80030dc <z_thread_abort+0x1c>
 800312e:	4630      	mov	r0, r6
 8003130:	f7fe fa18 	bl	8001564 <arch_swap>
	return ret;
 8003134:	e7d2      	b.n	80030dc <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003136:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800313a:	f043 0308 	orr.w	r3, r3, #8
 800313e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003140:	f001 f94f 	bl	80043e2 <sys_dlist_remove>
}
 8003144:	e7d7      	b.n	80030f6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 8003146:	4628      	mov	r0, r5
 8003148:	f001 f953 	bl	80043f2 <unpend_thread_no_timeout>
 800314c:	f105 0018 	add.w	r0, r5, #24
 8003150:	f001 f9f9 	bl	8004546 <z_abort_timeout>
 8003154:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 8003158:	4628      	mov	r0, r5
 800315a:	f7ff ff03 	bl	8002f64 <ready_thread>
 800315e:	e7d7      	b.n	8003110 <z_thread_abort+0x50>
 8003160:	200005b8 	.word	0x200005b8

08003164 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8003164:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 8003166:	4806      	ldr	r0, [pc, #24]	; (8003180 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8003168:	4a06      	ldr	r2, [pc, #24]	; (8003184 <z_data_copy+0x20>)
 800316a:	4907      	ldr	r1, [pc, #28]	; (8003188 <z_data_copy+0x24>)
 800316c:	1a12      	subs	r2, r2, r0
 800316e:	f000 fdd8 	bl	8003d22 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8003172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 8003176:	4a05      	ldr	r2, [pc, #20]	; (800318c <z_data_copy+0x28>)
 8003178:	4905      	ldr	r1, [pc, #20]	; (8003190 <z_data_copy+0x2c>)
 800317a:	4806      	ldr	r0, [pc, #24]	; (8003194 <z_data_copy+0x30>)
 800317c:	f000 bdd1 	b.w	8003d22 <memcpy>
 8003180:	20000000 	.word	0x20000000
 8003184:	20000258 	.word	0x20000258
 8003188:	08004e24 	.word	0x08004e24
 800318c:	00000000 	.word	0x00000000
 8003190:	08004e24 	.word	0x08004e24
 8003194:	20000000 	.word	0x20000000

08003198 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <elapsed+0x10>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b90b      	cbnz	r3, 80031a2 <elapsed+0xa>
 800319e:	f7fe b9ad 	b.w	80014fc <sys_clock_elapsed>
}
 80031a2:	2000      	movs	r0, #0
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	200005f0 	.word	0x200005f0

080031ac <next_timeout>:
	return list->head == list;
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
 80031ae:	b510      	push	{r4, lr}
 80031b0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80031b2:	429c      	cmp	r4, r3
 80031b4:	bf08      	it	eq
 80031b6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 80031b8:	f7ff ffee 	bl	8003198 <elapsed>
 80031bc:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
 80031be:	b16c      	cbz	r4, 80031dc <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 80031c0:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80031c4:	1ac0      	subs	r0, r0, r3
 80031c6:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 80031ca:	2801      	cmp	r0, #1
 80031cc:	f173 0200 	sbcs.w	r2, r3, #0
 80031d0:	db0d      	blt.n	80031ee <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 80031d2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80031d6:	f173 0300 	sbcs.w	r3, r3, #0
 80031da:	db01      	blt.n	80031e0 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
 80031dc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <next_timeout+0x4c>)
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	b113      	cbz	r3, 80031ec <next_timeout+0x40>
 80031e6:	4298      	cmp	r0, r3
 80031e8:	bfa8      	it	ge
 80031ea:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 80031ec:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 80031ee:	2000      	movs	r0, #0
 80031f0:	e7f6      	b.n	80031e0 <next_timeout+0x34>
 80031f2:	bf00      	nop
 80031f4:	20000130 	.word	0x20000130
 80031f8:	200005b8 	.word	0x200005b8

080031fc <remove_timeout>:
{
 80031fc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 80031fe:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8003200:	b168      	cbz	r0, 800321e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <remove_timeout+0x30>)
 8003204:	6852      	ldr	r2, [r2, #4]
 8003206:	4290      	cmp	r0, r2
 8003208:	d009      	beq.n	800321e <remove_timeout+0x22>
	if (next(t) != NULL) {
 800320a:	b143      	cbz	r3, 800321e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 800320c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8003210:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8003214:	1912      	adds	r2, r2, r4
 8003216:	eb41 0105 	adc.w	r1, r1, r5
 800321a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800321e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8003220:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8003222:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8003224:	2300      	movs	r3, #0
	node->prev = NULL;
 8003226:	e9c0 3300 	strd	r3, r3, [r0]
}
 800322a:	bd30      	pop	{r4, r5, pc}
 800322c:	20000130 	.word	0x20000130

08003230 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003234:	bf08      	it	eq
 8003236:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800323a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323c:	4604      	mov	r4, r0
 800323e:	461f      	mov	r7, r3
 8003240:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003242:	d067      	beq.n	8003314 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8003244:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8003246:	f04f 0310 	mov.w	r3, #16
 800324a:	f3ef 8611 	mrs	r6, BASEPRI
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8003256:	f06f 0201 	mvn.w	r2, #1
 800325a:	1b53      	subs	r3, r2, r5
 800325c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003260:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8003264:	2b00      	cmp	r3, #0
 8003266:	db1b      	blt.n	80032a0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8003268:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <z_add_timeout+0xe8>)
 800326a:	e9d3 1300 	ldrd	r1, r3, [r3]
 800326e:	1a52      	subs	r2, r2, r1
 8003270:	eb6c 0303 	sbc.w	r3, ip, r3
 8003274:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 8003276:	eb63 0307 	sbc.w	r3, r3, r7
 800327a:	2d01      	cmp	r5, #1
 800327c:	f173 0200 	sbcs.w	r2, r3, #0
 8003280:	bfbc      	itt	lt
 8003282:	2501      	movlt	r5, #1
 8003284:	2300      	movlt	r3, #0
 8003286:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 800328a:	4824      	ldr	r0, [pc, #144]	; (800331c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 800328c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003290:	4283      	cmp	r3, r0
 8003292:	d118      	bne.n	80032c6 <z_add_timeout+0x96>
	node->prev = tail;
 8003294:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8003298:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 800329c:	6044      	str	r4, [r0, #4]
}
 800329e:	e026      	b.n	80032ee <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 80032a0:	f7ff ff7a 	bl	8003198 <elapsed>
 80032a4:	3501      	adds	r5, #1
 80032a6:	f147 0700 	adc.w	r7, r7, #0
 80032aa:	182d      	adds	r5, r5, r0
 80032ac:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 80032b0:	e9c4 5704 	strd	r5, r7, [r4, #16]
 80032b4:	e7e9      	b.n	800328a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 80032b6:	1a52      	subs	r2, r2, r1
 80032b8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 80032bc:	4563      	cmp	r3, ip
 80032be:	e9c4 2504 	strd	r2, r5, [r4, #16]
 80032c2:	d0e7      	beq.n	8003294 <z_add_timeout+0x64>
 80032c4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0e4      	beq.n	8003294 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 80032ca:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 80032ce:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 80032d2:	428a      	cmp	r2, r1
 80032d4:	eb75 0e07 	sbcs.w	lr, r5, r7
 80032d8:	daed      	bge.n	80032b6 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 80032da:	1a8a      	subs	r2, r1, r2
 80032dc:	eb67 0505 	sbc.w	r5, r7, r5
 80032e0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 80032e4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80032e6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 80032ea:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80032ec:	605c      	str	r4, [r3, #4]
	return list->head == list;
 80032ee:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80032f0:	4283      	cmp	r3, r0
 80032f2:	d00b      	beq.n	800330c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80032f4:	429c      	cmp	r4, r3
 80032f6:	d109      	bne.n	800330c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 80032f8:	f7ff ff58 	bl	80031ac <next_timeout>

			if (next_time == 0 ||
 80032fc:	b118      	cbz	r0, 8003306 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	4283      	cmp	r3, r0
 8003304:	d002      	beq.n	800330c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 8003306:	2100      	movs	r1, #0
 8003308:	f7fe f888 	bl	800141c <sys_clock_set_timeout>
	__asm__ volatile(
 800330c:	f386 8811 	msr	BASEPRI, r6
 8003310:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8003314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003316:	bf00      	nop
 8003318:	200003d8 	.word	0x200003d8
 800331c:	20000130 	.word	0x20000130
 8003320:	200005b8 	.word	0x200005b8

08003324 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8003324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003328:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800332a:	f7ff fddb 	bl	8002ee4 <z_time_slice>
	__asm__ volatile(
 800332e:	f04f 0310 	mov.w	r3, #16
 8003332:	f3ef 8411 	mrs	r4, BASEPRI
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800333e:	4e24      	ldr	r6, [pc, #144]	; (80033d0 <sys_clock_announce+0xac>)
	return list->head == list;
 8003340:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80033d4 <sys_clock_announce+0xb0>
 8003344:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8003346:	4d24      	ldr	r5, [pc, #144]	; (80033d8 <sys_clock_announce+0xb4>)
 8003348:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800334c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800334e:	4540      	cmp	r0, r8
		curr_tick += dt;
 8003350:	e9d5 1e00 	ldrd	r1, lr, [r5]
 8003354:	ea4f 77e2 	mov.w	r7, r2, asr #31
 8003358:	d00b      	beq.n	8003372 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800335a:	b150      	cbz	r0, 8003372 <sys_clock_announce+0x4e>
 800335c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 8003360:	429a      	cmp	r2, r3
 8003362:	eb77 090c 	sbcs.w	r9, r7, ip
 8003366:	da16      	bge.n	8003396 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	eb6c 0c07 	sbc.w	ip, ip, r7
 800336e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8003372:	1852      	adds	r2, r2, r1
 8003374:	eb4e 0707 	adc.w	r7, lr, r7
 8003378:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 800337c:	2500      	movs	r5, #0
 800337e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8003380:	f7ff ff14 	bl	80031ac <next_timeout>
 8003384:	4629      	mov	r1, r5
 8003386:	f7fe f849 	bl	800141c <sys_clock_set_timeout>
	__asm__ volatile(
 800338a:	f384 8811 	msr	BASEPRI, r4
 800338e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8003392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8003396:	1859      	adds	r1, r3, r1
 8003398:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 80033a0:	2200      	movs	r2, #0
 80033a2:	2300      	movs	r3, #0
 80033a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 80033a8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 80033ac:	f7ff ff26 	bl	80031fc <remove_timeout>
 80033b0:	f384 8811 	msr	BASEPRI, r4
 80033b4:	f3bf 8f6f 	isb	sy
		t->fn(t);
 80033b8:	6883      	ldr	r3, [r0, #8]
 80033ba:	4798      	blx	r3
	__asm__ volatile(
 80033bc:	f04f 0310 	mov.w	r3, #16
 80033c0:	f3ef 8411 	mrs	r4, BASEPRI
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80033cc:	e7bc      	b.n	8003348 <sys_clock_announce+0x24>
 80033ce:	bf00      	nop
 80033d0:	200005f0 	.word	0x200005f0
 80033d4:	20000130 	.word	0x20000130
 80033d8:	200003d8 	.word	0x200003d8

080033dc <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 80033dc:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 80033de:	4604      	mov	r4, r0
 80033e0:	b178      	cbz	r0, 8003402 <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 80033e2:	f7fe f8a9 	bl	8001538 <sys_clock_cycle_get_32>
 80033e6:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 80033e8:	4806      	ldr	r0, [pc, #24]	; (8003404 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 80033ea:	4a07      	ldr	r2, [pc, #28]	; (8003408 <z_impl_k_busy_wait+0x2c>)
 80033ec:	fba4 0100 	umull	r0, r1, r4, r0
 80033f0:	2300      	movs	r3, #0
 80033f2:	f7fc fee7 	bl	80001c4 <__aeabi_uldivmod>
 80033f6:	4604      	mov	r4, r0
 80033f8:	f7fe f89e 	bl	8001538 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 80033fc:	1b43      	subs	r3, r0, r5
 80033fe:	42a3      	cmp	r3, r4
 8003400:	d3fa      	bcc.n	80033f8 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8003402:	bd38      	pop	{r3, r4, r5, pc}
 8003404:	05b8d800 	.word	0x05b8d800
 8003408:	000f4240 	.word	0x000f4240

0800340c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 800340c:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800340e:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 8003412:	3301      	adds	r3, #1
 8003414:	f142 0200 	adc.w	r2, r2, #0
 8003418:	2b02      	cmp	r3, #2
 800341a:	f172 0300 	sbcs.w	r3, r2, #0
{
 800341e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8003420:	d304      	bcc.n	800342c <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8003422:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8003426:	490d      	ldr	r1, [pc, #52]	; (800345c <z_timer_expiration_handler+0x50>)
 8003428:	f7ff ff02 	bl	8003230 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 800342c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800342e:	3301      	adds	r3, #1
 8003430:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 8003432:	6a23      	ldr	r3, [r4, #32]
 8003434:	b10b      	cbz	r3, 800343a <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
 8003436:	4620      	mov	r0, r4
 8003438:	4798      	blx	r3
	return list->head == list;
 800343a:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800343e:	42a5      	cmp	r5, r4
 8003440:	d00a      	beq.n	8003458 <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8003442:	b14d      	cbz	r5, 8003458 <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
 8003444:	4628      	mov	r0, r5
 8003446:	f000 ffde 	bl	8004406 <z_unpend_thread_no_timeout>
 800344a:	2300      	movs	r3, #0
 800344c:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
 800344e:	4628      	mov	r0, r5
}
 8003450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
 8003454:	f001 b82d 	b.w	80044b2 <z_ready_thread>
}
 8003458:	bd38      	pop	{r3, r4, r5, pc}
 800345a:	bf00      	nop
 800345c:	0800340d 	.word	0x0800340d

08003460 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8003460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003464:	4611      	mov	r1, r2
 8003466:	4605      	mov	r5, r0
 8003468:	4618      	mov	r0, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800346a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800346e:	bf08      	it	eq
 8003470:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
 8003474:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003478:	4688      	mov	r8, r1
 800347a:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800347c:	d03c      	beq.n	80034f8 <z_impl_k_timer_start+0x98>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003482:	bf08      	it	eq
 8003484:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8003488:	4614      	mov	r4, r2
 800348a:	461e      	mov	r6, r3
 800348c:	d013      	beq.n	80034b6 <z_impl_k_timer_start+0x56>
 800348e:	431a      	orrs	r2, r3
 8003490:	d011      	beq.n	80034b6 <z_impl_k_timer_start+0x56>
	    Z_TICK_ABS(period.ticks) < 0) {
 8003492:	f06f 0201 	mvn.w	r2, #1
 8003496:	1b12      	subs	r2, r2, r4
 8003498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800349c:	eb62 0203 	sbc.w	r2, r2, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 80034a0:	2a00      	cmp	r2, #0
 80034a2:	da08      	bge.n	80034b6 <z_impl_k_timer_start+0x56>
		period.ticks = MAX(period.ticks - 1, 1);
 80034a4:	3c01      	subs	r4, #1
 80034a6:	f163 0600 	sbc.w	r6, r3, #0
 80034aa:	2c01      	cmp	r4, #1
 80034ac:	f176 0300 	sbcs.w	r3, r6, #0
 80034b0:	bfbc      	itt	lt
 80034b2:	2401      	movlt	r4, #1
 80034b4:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 80034b6:	f06f 0301 	mvn.w	r3, #1
 80034ba:	1a5b      	subs	r3, r3, r1
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034c0:	eb63 0300 	sbc.w	r3, r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	da08      	bge.n	80034da <z_impl_k_timer_start+0x7a>
		duration.ticks = MAX(duration.ticks - 1, 0);
 80034c8:	1e4a      	subs	r2, r1, #1
 80034ca:	f160 0700 	sbc.w	r7, r0, #0
 80034ce:	2f00      	cmp	r7, #0
 80034d0:	4690      	mov	r8, r2
 80034d2:	bfbc      	itt	lt
 80034d4:	f04f 0800 	movlt.w	r8, #0
 80034d8:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
 80034da:	4628      	mov	r0, r5
 80034dc:	f001 f833 	bl	8004546 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
 80034e4:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80034e8:	4642      	mov	r2, r8
 80034ea:	463b      	mov	r3, r7
 80034ec:	4628      	mov	r0, r5
 80034ee:	4903      	ldr	r1, [pc, #12]	; (80034fc <z_impl_k_timer_start+0x9c>)
		     duration);
}
 80034f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80034f4:	f7ff be9c 	b.w	8003230 <z_add_timeout>
}
 80034f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034fc:	0800340d 	.word	0x0800340d

08003500 <z_impl_k_timer_status_sync>:
}
#include <syscalls/k_timer_status_get_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
 8003500:	b513      	push	{r0, r1, r4, lr}
 8003502:	4604      	mov	r4, r0
 8003504:	f04f 0310 	mov.w	r3, #16
 8003508:	f3ef 8111 	mrs	r1, BASEPRI
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy

		return result;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;
 8003514:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if (result == 0U) {
 8003516:	b9a8      	cbnz	r0, 8003544 <z_impl_k_timer_status_sync+0x44>
		if (!z_is_inactive_timeout(&timer->timeout)) {
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	b19b      	cbz	r3, 8003544 <z_impl_k_timer_status_sync+0x44>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_timer, status_sync, timer, K_FOREVER);

			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
 800351c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003524:	e9cd 2300 	strd	r2, r3, [sp]
 8003528:	480a      	ldr	r0, [pc, #40]	; (8003554 <z_impl_k_timer_status_sync+0x54>)
 800352a:	f104 0218 	add.w	r2, r4, #24
 800352e:	f7ff fc6f 	bl	8002e10 <z_pend_curr>
 8003532:	f04f 0310 	mov.w	r3, #16
 8003536:	f3ef 8111 	mrs	r1, BASEPRI
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
 8003542:	6b20      	ldr	r0, [r4, #48]	; 0x30
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	6323      	str	r3, [r4, #48]	; 0x30
	__asm__ volatile(
 8003548:	f381 8811 	msr	BASEPRI, r1
 800354c:	f3bf 8f6f 	isb	sy
	 * @note	New tracing hook
	 */
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_timer, status_sync, timer, result);

	return result;
}
 8003550:	b002      	add	sp, #8
 8003552:	bd10      	pop	{r4, pc}
 8003554:	20000619 	.word	0x20000619

08003558 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8003558:	4a02      	ldr	r2, [pc, #8]	; (8003564 <boot_banner+0xc>)
 800355a:	4903      	ldr	r1, [pc, #12]	; (8003568 <boot_banner+0x10>)
 800355c:	4803      	ldr	r0, [pc, #12]	; (800356c <boot_banner+0x14>)
 800355e:	f000 b854 	b.w	800360a <printk>
 8003562:	bf00      	nop
 8003564:	08004c69 	.word	0x08004c69
 8003568:	08004dde 	.word	0x08004dde
 800356c:	08004dfa 	.word	0x08004dfa

08003570 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 8003570:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8003572:	4c06      	ldr	r4, [pc, #24]	; (800358c <statics_init+0x1c>)
 8003574:	4d06      	ldr	r5, [pc, #24]	; (8003590 <statics_init+0x20>)
 8003576:	42ac      	cmp	r4, r5
 8003578:	d301      	bcc.n	800357e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 800357a:	2000      	movs	r0, #0
 800357c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800357e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8003582:	4620      	mov	r0, r4
 8003584:	f001 f81b 	bl	80045be <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8003588:	3418      	adds	r4, #24
 800358a:	e7f4      	b.n	8003576 <statics_init+0x6>
 800358c:	20000258 	.word	0x20000258
 8003590:	20000258 	.word	0x20000258

08003594 <_ZN13cpp_semaphoreD1Ev>:
	virtual ~cpp_semaphore() {}
 8003594:	4770      	bx	lr

08003596 <_ZN13cpp_semaphore4waitEv>:
{
 8003596:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
 8003598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800359c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035a0:	3004      	adds	r0, #4
 80035a2:	f7ff fb4b 	bl	8002c3c <z_impl_k_sem_take>
}
 80035a6:	2001      	movs	r0, #1
 80035a8:	bd08      	pop	{r3, pc}

080035aa <_ZN13cpp_semaphore4giveEv>:
	z_impl_k_sem_give(sem);
 80035aa:	3004      	adds	r0, #4
 80035ac:	f7ff bb26 	b.w	8002bfc <z_impl_k_sem_give>

080035b0 <_ZN13cpp_semaphoreD0Ev>:
	virtual ~cpp_semaphore() {}
 80035b0:	b510      	push	{r4, lr}
 80035b2:	4604      	mov	r4, r0
 80035b4:	f000 fb01 	bl	8003bba <_ZdlPv>
 80035b8:	4620      	mov	r0, r4
 80035ba:	bd10      	pop	{r4, pc}

080035bc <_ZN13cpp_semaphore4waitEi>:
	return k_sem_take(&_sema_internal, K_MSEC(timeout));
 80035bc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
			return t * (to_hz / from_hz);
 80035c0:	220a      	movs	r2, #10
 80035c2:	fb81 2302 	smull	r2, r3, r1, r2
	return z_impl_k_sem_take(sem, timeout);
 80035c6:	3004      	adds	r0, #4
 80035c8:	f7ff bb38 	b.w	8002c3c <z_impl_k_sem_take>

080035cc <_Z13dw_transceivePK6deviceP10spi_confighPhh>:
void dw_transceive(const struct device *spi, spi_config* spi_cfg, uint8_t command, uint8_t rx_buf[], uint8_t rx_len) {
 80035cc:	b530      	push	{r4, r5, lr}
 80035ce:	b08d      	sub	sp, #52	; 0x34
    	};
 80035d0:	ad01      	add	r5, sp, #4
	};
 80035d2:	930a      	str	r3, [sp, #40]	; 0x28
			.len = rx_len
 80035d4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    	};
 80035d8:	9502      	str	r5, [sp, #8]
			.len = rx_len
 80035da:	930b      	str	r3, [sp, #44]	; 0x2c
	};
 80035dc:	ad02      	add	r5, sp, #8
	struct spi_buf_set rx = {
 80035de:	2302      	movs	r3, #2
	uint8_t tx_buf[1] = {command};
 80035e0:	f88d 2004 	strb.w	r2, [sp, #4]
	};
 80035e4:	9504      	str	r5, [sp, #16]
	const struct spi_buf spi_buf_tx = {
 80035e6:	2201      	movs	r2, #1
	struct spi_buf spi_buf_rx[] = {
 80035e8:	2500      	movs	r5, #0
	struct spi_buf_set rx = {
 80035ea:	9307      	str	r3, [sp, #28]
	};
 80035ec:	ab08      	add	r3, sp, #32
	struct spi_buf spi_buf_rx[] = {
 80035ee:	e9cd 5208 	strd	r5, r2, [sp, #32]
	const struct spi_buf spi_buf_tx = {
 80035f2:	9203      	str	r2, [sp, #12]
	struct spi_buf_set tx = {
 80035f4:	9205      	str	r2, [sp, #20]
	};
 80035f6:	9306      	str	r3, [sp, #24]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80035f8:	6883      	ldr	r3, [r0, #8]
 80035fa:	aa04      	add	r2, sp, #16
 80035fc:	681c      	ldr	r4, [r3, #0]
 80035fe:	ab06      	add	r3, sp, #24
 8003600:	47a0      	blx	r4
}
 8003602:	b00d      	add	sp, #52	; 0x34
 8003604:	bd30      	pop	{r4, r5, pc}

08003606 <arch_printk_char_out>:
}
 8003606:	2000      	movs	r0, #0
 8003608:	4770      	bx	lr

0800360a <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
 800360a:	b40f      	push	{r0, r1, r2, r3}
 800360c:	b507      	push	{r0, r1, r2, lr}
 800360e:	a904      	add	r1, sp, #16
 8003610:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8003614:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
 8003616:	f7fd f88b 	bl	8000730 <vprintk>
	}
	va_end(ap);
}
 800361a:	b003      	add	sp, #12
 800361c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003620:	b004      	add	sp, #16
 8003622:	4770      	bx	lr

08003624 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8003624:	4604      	mov	r4, r0
 8003626:	b508      	push	{r3, lr}
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 800362c:	461a      	mov	r2, r3
 800362e:	47a0      	blx	r4
	return z_impl_k_current_get();
 8003630:	f7ff fd40 	bl	80030b4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 8003634:	f7fe f9c4 	bl	80019c0 <z_impl_k_thread_abort>

08003638 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8003638:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 800363a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 800363e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 8003642:	bf2c      	ite	cs
 8003644:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 8003648:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 800364c:	4770      	bx	lr

0800364e <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 800364e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 8003652:	6880      	ldr	r0, [r0, #8]
 8003654:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 8003658:	bf2c      	ite	cs
 800365a:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 800365e:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 8003662:	4770      	bx	lr

08003664 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
 8003664:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8003666:	2201      	movs	r2, #1
 8003668:	f7ff ffe6 	bl	8003638 <chunk_field>
}
 800366c:	40d0      	lsrs	r0, r2
 800366e:	bd08      	pop	{r3, pc}

08003670 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8003670:	6883      	ldr	r3, [r0, #8]
 8003672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
 8003676:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 800367a:	d308      	bcc.n	800368e <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800367c:	684b      	ldr	r3, [r1, #4]
		if (used) {
 800367e:	b11a      	cbz	r2, 8003688 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 8003680:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8003684:	604b      	str	r3, [r1, #4]
 8003686:	4770      	bx	lr
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	e7fa      	b.n	8003684 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800368e:	884b      	ldrh	r3, [r1, #2]
		if (used) {
 8003690:	b11a      	cbz	r2, 800369a <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8003692:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8003696:	804b      	strh	r3, [r1, #2]
		}
	}
}
 8003698:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	e7fa      	b.n	8003696 <set_chunk_used+0x26>

080036a0 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80036a0:	0053      	lsls	r3, r2, #1
 80036a2:	2201      	movs	r2, #1
 80036a4:	f7ff bfd3 	b.w	800364e <chunk_set>

080036a8 <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 80036a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80036ac:	bf2c      	ite	cs
 80036ae:	2008      	movcs	r0, #8
 80036b0:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 80036b2:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80036b4:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 80036b6:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
 80036ba:	fab0 f080 	clz	r0, r0
}
 80036be:	f1c0 001f 	rsb	r0, r0, #31
 80036c2:	4770      	bx	lr

080036c4 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 80036c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036c8:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
 80036ca:	2203      	movs	r2, #3
 80036cc:	460e      	mov	r6, r1
 80036ce:	4604      	mov	r4, r0
 80036d0:	f7ff ffb2 	bl	8003638 <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
 80036d4:	4286      	cmp	r6, r0
 80036d6:	4605      	mov	r5, r0
 80036d8:	f107 0804 	add.w	r8, r7, #4
 80036dc:	d10b      	bne.n	80036f6 <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
 80036de:	2301      	movs	r3, #1
 80036e0:	fa03 f707 	lsl.w	r7, r3, r7
 80036e4:	68e3      	ldr	r3, [r4, #12]
 80036e6:	ea23 0307 	bic.w	r3, r3, r7
 80036ea:	60e3      	str	r3, [r4, #12]
		b->next = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
 80036f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
 80036f6:	4631      	mov	r1, r6
 80036f8:	2202      	movs	r2, #2
 80036fa:	4620      	mov	r0, r4
 80036fc:	f7ff ff9c 	bl	8003638 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
 8003700:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
 8003702:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
 8003704:	4601      	mov	r1, r0
		b->next = second;
 8003706:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
 800370a:	4620      	mov	r0, r4
 800370c:	2203      	movs	r2, #3
 800370e:	f7ff ff9e 	bl	800364e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8003712:	4633      	mov	r3, r6
 8003714:	4629      	mov	r1, r5
 8003716:	4620      	mov	r0, r4
 8003718:	2202      	movs	r2, #2
}
 800371a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800371e:	f7ff bf96 	b.w	800364e <chunk_set>

08003722 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
 8003722:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
 8003724:	6886      	ldr	r6, [r0, #8]
 8003726:	460d      	mov	r5, r1
 8003728:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 800372a:	f7ff ff9b 	bl	8003664 <chunk_size>
 800372e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8003732:	4601      	mov	r1, r0
 8003734:	d301      	bcc.n	800373a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
 8003736:	2801      	cmp	r0, #1
 8003738:	d009      	beq.n	800374e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
 800373a:	4630      	mov	r0, r6
 800373c:	f7ff ffb4 	bl	80036a8 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
 8003740:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
 8003742:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
 8003744:	4620      	mov	r0, r4
	}
}
 8003746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
 800374a:	f7ff bfbb 	b.w	80036c4 <free_list_remove_bidx>
}
 800374e:	bd70      	pop	{r4, r5, r6, pc}

08003750 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
 8003750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003754:	4616      	mov	r6, r2
 8003756:	4604      	mov	r4, r0
 8003758:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 800375a:	f7ff ff83 	bl	8003664 <chunk_size>
 800375e:	4631      	mov	r1, r6
 8003760:	4605      	mov	r5, r0
 8003762:	4620      	mov	r0, r4
 8003764:	f7ff ff7e 	bl	8003664 <chunk_size>
 8003768:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
 800376a:	462a      	mov	r2, r5
 800376c:	4639      	mov	r1, r7
 800376e:	4620      	mov	r0, r4
 8003770:	f7ff ff96 	bl	80036a0 <set_chunk_size>
	return c + chunk_size(h, c);
 8003774:	4631      	mov	r1, r6
 8003776:	4620      	mov	r0, r4
 8003778:	f7ff ff74 	bl	8003664 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 800377c:	462b      	mov	r3, r5
 800377e:	1831      	adds	r1, r6, r0
 8003780:	2200      	movs	r2, #0
 8003782:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
 8003784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003788:	f7ff bf61 	b.w	800364e <chunk_set>

0800378c <free_list_add>:
{
 800378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
 8003790:	6886      	ldr	r6, [r0, #8]
 8003792:	460d      	mov	r5, r1
 8003794:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 8003796:	f7ff ff65 	bl	8003664 <chunk_size>
 800379a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800379e:	4601      	mov	r1, r0
 80037a0:	d301      	bcc.n	80037a6 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 80037a2:	2801      	cmp	r0, #1
 80037a4:	d033      	beq.n	800380e <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
 80037a6:	4630      	mov	r0, r6
 80037a8:	f7ff ff7e 	bl	80036a8 <bucket_idx.isra.0>
	if (b->next == 0U) {
 80037ac:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80037b0:	6916      	ldr	r6, [r2, #16]
 80037b2:	b99e      	cbnz	r6, 80037dc <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 80037b4:	2301      	movs	r3, #1
 80037b6:	fa03 f000 	lsl.w	r0, r3, r0
 80037ba:	68e3      	ldr	r3, [r4, #12]
 80037bc:	4303      	orrs	r3, r0
 80037be:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
 80037c0:	4629      	mov	r1, r5
		b->next = c;
 80037c2:	6115      	str	r5, [r2, #16]
 80037c4:	462b      	mov	r3, r5
 80037c6:	2202      	movs	r2, #2
 80037c8:	4620      	mov	r0, r4
 80037ca:	f7ff ff40 	bl	800364e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 80037ce:	2203      	movs	r2, #3
 80037d0:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 80037d2:	4620      	mov	r0, r4
}
 80037d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037d8:	f7ff bf39 	b.w	800364e <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 80037dc:	2202      	movs	r2, #2
 80037de:	4631      	mov	r1, r6
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7ff ff29 	bl	8003638 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 80037e6:	4629      	mov	r1, r5
 80037e8:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 80037ea:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 80037ec:	4620      	mov	r0, r4
 80037ee:	f7ff ff2e 	bl	800364e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 80037f2:	2203      	movs	r2, #3
 80037f4:	4633      	mov	r3, r6
 80037f6:	4629      	mov	r1, r5
 80037f8:	4620      	mov	r0, r4
 80037fa:	f7ff ff28 	bl	800364e <chunk_set>
 80037fe:	4639      	mov	r1, r7
 8003800:	462b      	mov	r3, r5
 8003802:	4620      	mov	r0, r4
 8003804:	f7ff ff23 	bl	800364e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8003808:	2202      	movs	r2, #2
 800380a:	4631      	mov	r1, r6
 800380c:	e7e1      	b.n	80037d2 <free_list_add+0x46>
 800380e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003812 <free_chunk>:

static void free_chunk(struct z_heap *h, chunkid_t c)
{
 8003812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003814:	460c      	mov	r4, r1
 8003816:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
 8003818:	f7ff ff24 	bl	8003664 <chunk_size>
 800381c:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 800381e:	2201      	movs	r2, #1
 8003820:	4631      	mov	r1, r6
 8003822:	4628      	mov	r0, r5
 8003824:	f7ff ff08 	bl	8003638 <chunk_field>
	/* Merge with free right chunk? */
	if (!chunk_used(h, right_chunk(h, c))) {
 8003828:	07c3      	lsls	r3, r0, #31
 800382a:	d40c      	bmi.n	8003846 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
 800382c:	4631      	mov	r1, r6
 800382e:	4628      	mov	r0, r5
 8003830:	f7ff ff77 	bl	8003722 <free_list_remove>
	return c + chunk_size(h, c);
 8003834:	4621      	mov	r1, r4
 8003836:	4628      	mov	r0, r5
 8003838:	f7ff ff14 	bl	8003664 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
 800383c:	4621      	mov	r1, r4
 800383e:	1822      	adds	r2, r4, r0
 8003840:	4628      	mov	r0, r5
 8003842:	f7ff ff85 	bl	8003750 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
 8003846:	2200      	movs	r2, #0
 8003848:	4621      	mov	r1, r4
 800384a:	4628      	mov	r0, r5
 800384c:	f7ff fef4 	bl	8003638 <chunk_field>
 8003850:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8003852:	2201      	movs	r2, #1
 8003854:	4639      	mov	r1, r7
 8003856:	4628      	mov	r0, r5
 8003858:	f7ff feee 	bl	8003638 <chunk_field>
	}

	/* Merge with free left chunk? */
	if (!chunk_used(h, left_chunk(h, c))) {
 800385c:	ea10 0602 	ands.w	r6, r0, r2
 8003860:	d113      	bne.n	800388a <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
 8003862:	4639      	mov	r1, r7
 8003864:	4628      	mov	r0, r5
 8003866:	f7ff ff5c 	bl	8003722 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
 800386a:	4621      	mov	r1, r4
 800386c:	4632      	mov	r2, r6
 800386e:	4628      	mov	r0, r5
 8003870:	f7ff fee2 	bl	8003638 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
 8003874:	4622      	mov	r2, r4
 8003876:	1a21      	subs	r1, r4, r0
 8003878:	4628      	mov	r0, r5
 800387a:	f7ff ff69 	bl	8003750 <merge_chunks>
 800387e:	4621      	mov	r1, r4
 8003880:	4632      	mov	r2, r6
 8003882:	4628      	mov	r0, r5
 8003884:	f7ff fed8 	bl	8003638 <chunk_field>
 8003888:	1a24      	subs	r4, r4, r0
		c = left_chunk(h, c);
	}

	free_list_add(h, c);
 800388a:	4621      	mov	r1, r4
 800388c:	4628      	mov	r0, r5
}
 800388e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
 8003892:	f7ff bf7b 	b.w	800378c <free_list_add>

08003896 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
 8003896:	b510      	push	{r4, lr}
	if (mem == NULL) {
 8003898:	b191      	cbz	r1, 80038c0 <sys_heap_free+0x2a>
 800389a:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
 800389c:	6883      	ldr	r3, [r0, #8]
 800389e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a2:	bf2c      	ite	cs
 80038a4:	2408      	movcs	r4, #8
 80038a6:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 80038a8:	1b0c      	subs	r4, r1, r4
 80038aa:	1a24      	subs	r4, r4, r0
 80038ac:	08e4      	lsrs	r4, r4, #3
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
 80038ae:	4621      	mov	r1, r4
 80038b0:	2200      	movs	r2, #0
 80038b2:	f7ff fedd 	bl	8003670 <set_chunk_used>
	free_chunk(h, c);
 80038b6:	4621      	mov	r1, r4
}
 80038b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
 80038bc:	f7ff bfa9 	b.w	8003812 <free_chunk>
}
 80038c0:	bd10      	pop	{r4, pc}

080038c2 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 80038c2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 80038c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c8:	bf2c      	ite	cs
 80038ca:	2408      	movcs	r4, #8
 80038cc:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 80038ce:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 80038d0:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 80038d2:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 80038d4:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 80038d8:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 80038dc:	1ba4      	subs	r4, r4, r6
 80038de:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 80038e0:	2300      	movs	r3, #0
	heap->heap = h;
 80038e2:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 80038e4:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
 80038e6:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
 80038e8:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 80038ea:	4620      	mov	r0, r4
 80038ec:	f7ff fedc 	bl	80036a8 <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 80038f0:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80038f2:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 80038f4:	1c41      	adds	r1, r0, #1
 80038f6:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 80038f8:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
 80038fc:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
 80038fe:	428b      	cmp	r3, r1
 8003900:	db2e      	blt.n	8003960 <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 8003902:	462a      	mov	r2, r5
 8003904:	4630      	mov	r0, r6
 8003906:	2100      	movs	r1, #0
 8003908:	f7ff feca 	bl	80036a0 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 800390c:	2300      	movs	r3, #0
 800390e:	461a      	mov	r2, r3
 8003910:	4619      	mov	r1, r3
 8003912:	4630      	mov	r0, r6
 8003914:	f7ff fe9b 	bl	800364e <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8003918:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
 800391a:	4619      	mov	r1, r3
 800391c:	4630      	mov	r0, r6
 800391e:	2201      	movs	r2, #1
 8003920:	f7ff fea6 	bl	8003670 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8003924:	463a      	mov	r2, r7
 8003926:	4629      	mov	r1, r5
 8003928:	f7ff feba 	bl	80036a0 <set_chunk_size>
 800392c:	462b      	mov	r3, r5
 800392e:	2200      	movs	r2, #0
 8003930:	4629      	mov	r1, r5
 8003932:	4630      	mov	r0, r6
 8003934:	f7ff fe8b 	bl	800364e <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
 8003938:	4621      	mov	r1, r4
 800393a:	4630      	mov	r0, r6
 800393c:	f7ff feb0 	bl	80036a0 <set_chunk_size>
 8003940:	463b      	mov	r3, r7
 8003942:	4621      	mov	r1, r4
 8003944:	4630      	mov	r0, r6
 8003946:	2200      	movs	r2, #0
 8003948:	f7ff fe81 	bl	800364e <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
 800394c:	4621      	mov	r1, r4
 800394e:	4630      	mov	r0, r6
 8003950:	2201      	movs	r2, #1
 8003952:	f7ff fe8d 	bl	8003670 <set_chunk_used>

	free_list_add(h, chunk0_size);
 8003956:	4629      	mov	r1, r5
}
 8003958:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 800395c:	f7ff bf16 	b.w	800378c <free_list_add>
		h->buckets[i].next = 0;
 8003960:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 8003964:	3301      	adds	r3, #1
 8003966:	e7ca      	b.n	80038fe <sys_heap_init+0x3c>

08003968 <encode_uint>:
{
 8003968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 800396e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 8003970:	2b6f      	cmp	r3, #111	; 0x6f
{
 8003972:	4680      	mov	r8, r0
 8003974:	460f      	mov	r7, r1
 8003976:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8003978:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 800397c:	d029      	beq.n	80039d2 <encode_uint+0x6a>
 800397e:	d824      	bhi.n	80039ca <encode_uint+0x62>
		return 16;
 8003980:	2b58      	cmp	r3, #88	; 0x58
 8003982:	bf14      	ite	ne
 8003984:	260a      	movne	r6, #10
 8003986:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 8003988:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 800398c:	4632      	mov	r2, r6
 800398e:	2300      	movs	r3, #0
 8003990:	4640      	mov	r0, r8
 8003992:	4639      	mov	r1, r7
 8003994:	f7fc fc16 	bl	80001c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003998:	2a09      	cmp	r2, #9
 800399a:	b2d4      	uxtb	r4, r2
 800399c:	d81e      	bhi.n	80039dc <encode_uint+0x74>
 800399e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 80039a0:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80039a2:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 80039a4:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80039a8:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 80039ac:	d301      	bcc.n	80039b2 <encode_uint+0x4a>
 80039ae:	45d1      	cmp	r9, sl
 80039b0:	d811      	bhi.n	80039d6 <encode_uint+0x6e>
	if (conv->flag_hash) {
 80039b2:	782b      	ldrb	r3, [r5, #0]
 80039b4:	069b      	lsls	r3, r3, #26
 80039b6:	d505      	bpl.n	80039c4 <encode_uint+0x5c>
		if (radix == 8) {
 80039b8:	2e08      	cmp	r6, #8
 80039ba:	d115      	bne.n	80039e8 <encode_uint+0x80>
			conv->altform_0 = true;
 80039bc:	78ab      	ldrb	r3, [r5, #2]
 80039be:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 80039c2:	70ab      	strb	r3, [r5, #2]
}
 80039c4:	4648      	mov	r0, r9
 80039c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 80039ca:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 80039ce:	2b70      	cmp	r3, #112	; 0x70
 80039d0:	e7d7      	b.n	8003982 <encode_uint+0x1a>
	switch (specifier) {
 80039d2:	2608      	movs	r6, #8
 80039d4:	e7d8      	b.n	8003988 <encode_uint+0x20>
		value /= radix;
 80039d6:	4680      	mov	r8, r0
 80039d8:	460f      	mov	r7, r1
 80039da:	e7d7      	b.n	800398c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80039dc:	f1bb 0f19 	cmp.w	fp, #25
 80039e0:	bf94      	ite	ls
 80039e2:	3437      	addls	r4, #55	; 0x37
 80039e4:	3457      	addhi	r4, #87	; 0x57
 80039e6:	e7db      	b.n	80039a0 <encode_uint+0x38>
		} else if (radix == 16) {
 80039e8:	2e10      	cmp	r6, #16
 80039ea:	d1eb      	bne.n	80039c4 <encode_uint+0x5c>
			conv->altform_0c = true;
 80039ec:	78ab      	ldrb	r3, [r5, #2]
 80039ee:	f043 0310 	orr.w	r3, r3, #16
 80039f2:	e7e6      	b.n	80039c2 <encode_uint+0x5a>

080039f4 <outs>:
{
 80039f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f8:	4607      	mov	r7, r0
 80039fa:	4688      	mov	r8, r1
 80039fc:	4615      	mov	r5, r2
 80039fe:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8003a00:	4614      	mov	r4, r2
 8003a02:	42b4      	cmp	r4, r6
 8003a04:	eba4 0005 	sub.w	r0, r4, r5
 8003a08:	d302      	bcc.n	8003a10 <outs+0x1c>
 8003a0a:	b93e      	cbnz	r6, 8003a1c <outs+0x28>
 8003a0c:	7823      	ldrb	r3, [r4, #0]
 8003a0e:	b12b      	cbz	r3, 8003a1c <outs+0x28>
		int rc = out((int)*sp++, ctx);
 8003a10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003a14:	4641      	mov	r1, r8
 8003a16:	47b8      	blx	r7
		if (rc < 0) {
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	daf2      	bge.n	8003a02 <outs+0xe>
}
 8003a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a20 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8003a20:	4770      	bx	lr

08003a22 <st_stm32_common_config>:
	/* Enable the SWO pin */
	DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN;
#endif

	return 0;
}
 8003a22:	2000      	movs	r0, #0
 8003a24:	4770      	bx	lr

08003a26 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
 8003a26:	6883      	ldr	r3, [r0, #8]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	b103      	cbz	r3, 8003a2e <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
 8003a2c:	4718      	bx	r3
}
 8003a2e:	4770      	bx	lr

08003a30 <tty_putchar>:
{
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	4604      	mov	r4, r0
 8003a34:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
 8003a36:	f100 0624 	add.w	r6, r0, #36	; 0x24
			 k_is_in_isr() ? K_NO_WAIT :
 8003a3a:	f000 fca5 	bl	8004388 <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
 8003a3e:	bb20      	cbnz	r0, 8003a8a <tty_putchar+0x5a>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
 8003a40:	6c22      	ldr	r2, [r4, #64]	; 0x40
	res = k_sem_take(&tty->tx_sem,
 8003a42:	1c53      	adds	r3, r2, #1
 8003a44:	d022      	beq.n	8003a8c <tty_putchar+0x5c>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
 8003a46:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8003a4a:	230a      	movs	r3, #10
 8003a4c:	fb82 2303 	smull	r2, r3, r2, r3
	return z_impl_k_sem_take(sem, timeout);
 8003a50:	4630      	mov	r0, r6
 8003a52:	f7ff f8f3 	bl	8002c3c <z_impl_k_sem_take>
	if (res < 0) {
 8003a56:	2800      	cmp	r0, #0
 8003a58:	db16      	blt.n	8003a88 <tty_putchar+0x58>
	__asm__ volatile(
 8003a5a:	f04f 0310 	mov.w	r3, #16
 8003a5e:	f3ef 8211 	mrs	r2, BASEPRI
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
 8003a6a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
	if (tx_next >= tty->tx_ringbuf_sz) {
 8003a6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	tx_next = tty->tx_put + 1;
 8003a6e:	1c4b      	adds	r3, r1, #1
		tx_next = 0;
 8003a70:	4298      	cmp	r0, r3
 8003a72:	bf98      	it	ls
 8003a74:	2300      	movls	r3, #0
	if (tx_next == tty->tx_get) {
 8003a76:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8003a78:	4298      	cmp	r0, r3
 8003a7a:	d109      	bne.n	8003a90 <tty_putchar+0x60>
	__asm__ volatile(
 8003a7c:	f382 8811 	msr	BASEPRI, r2
 8003a80:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
 8003a84:	f06f 001b 	mvn.w	r0, #27
}
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
	res = k_sem_take(&tty->tx_sem,
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	e7df      	b.n	8003a50 <tty_putchar+0x20>
	tty->tx_ringbuf[tty->tx_put] = c;
 8003a90:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003a92:	5445      	strb	r5, [r0, r1]
	tty->tx_put = tx_next;
 8003a94:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003a96:	f382 8811 	msr	BASEPRI, r2
 8003a9a:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
 8003a9e:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_enable != NULL) {
 8003aa0:	6883      	ldr	r3, [r0, #8]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	b113      	cbz	r3, 8003aac <tty_putchar+0x7c>
		api->irq_tx_enable(dev);
 8003aa6:	4798      	blx	r3
	return 0;
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	e7ed      	b.n	8003a88 <tty_putchar+0x58>
 8003aac:	4618      	mov	r0, r3
 8003aae:	e7eb      	b.n	8003a88 <tty_putchar+0x58>

08003ab0 <tty_uart_isr>:
{
 8003ab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ab2:	4605      	mov	r5, r0
 8003ab4:	460c      	mov	r4, r1
	if (api->irq_update == NULL) {
 8003ab6:	6883      	ldr	r3, [r0, #8]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	b103      	cbz	r3, 8003abe <tty_uart_isr+0xe>
	return api->irq_update(dev);
 8003abc:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
 8003abe:	68ab      	ldr	r3, [r5, #8]
 8003ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac2:	b9bb      	cbnz	r3, 8003af4 <tty_uart_isr+0x44>
	k_sem_give(&tty->rx_sem);
 8003ac4:	1d26      	adds	r6, r4, #4
	if (api->fifo_read != NULL) {
 8003ac6:	68ab      	ldr	r3, [r5, #8]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	b1bb      	cbz	r3, 8003afc <tty_uart_isr+0x4c>
		return api->fifo_read(dev, rx_data, size);
 8003acc:	2201      	movs	r2, #1
 8003ace:	f10d 0107 	add.w	r1, sp, #7
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
 8003ad6:	b188      	cbz	r0, 8003afc <tty_uart_isr+0x4c>
	int rx_next = tty->rx_put + 1;
 8003ad8:	8be2      	ldrh	r2, [r4, #30]
	if (rx_next >= tty->rx_ringbuf_sz) {
 8003ada:	69a1      	ldr	r1, [r4, #24]
	int rx_next = tty->rx_put + 1;
 8003adc:	1c53      	adds	r3, r2, #1
		rx_next = 0;
 8003ade:	4299      	cmp	r1, r3
 8003ae0:	bf98      	it	ls
 8003ae2:	2300      	movls	r3, #0
	if (rx_next == tty->rx_get) {
 8003ae4:	8ba1      	ldrh	r1, [r4, #28]
 8003ae6:	4299      	cmp	r1, r3
 8003ae8:	d118      	bne.n	8003b1c <tty_uart_isr+0x6c>
		tty_putchar(tty, '~');
 8003aea:	217e      	movs	r1, #126	; 0x7e
 8003aec:	4620      	mov	r0, r4
 8003aee:	f7ff ff9f 	bl	8003a30 <tty_putchar>
		return 1;
 8003af2:	e7e8      	b.n	8003ac6 <tty_uart_isr+0x16>
	return api->irq_rx_ready(dev);
 8003af4:	4628      	mov	r0, r5
 8003af6:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d1e3      	bne.n	8003ac4 <tty_uart_isr+0x14>
	if (api->irq_tx_ready != NULL) {
 8003afc:	68ab      	ldr	r3, [r5, #8]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	b363      	cbz	r3, 8003b5c <tty_uart_isr+0xac>
		return api->irq_tx_ready(dev);
 8003b02:	4628      	mov	r0, r5
 8003b04:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
 8003b06:	b348      	cbz	r0, 8003b5c <tty_uart_isr+0xac>
		if (tty->tx_get == tty->tx_put) {
 8003b08:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8003b0a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d10e      	bne.n	8003b2e <tty_uart_isr+0x7e>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
 8003b10:	4628      	mov	r0, r5
}
 8003b12:	b002      	add	sp, #8
 8003b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b18:	f7ff bf85 	b.w	8003a26 <z_impl_uart_irq_tx_disable>
	tty->rx_ringbuf[tty->rx_put] = c;
 8003b1c:	6961      	ldr	r1, [r4, #20]
			tty_irq_input_hook(tty, c);
 8003b1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
	tty->rx_ringbuf[tty->rx_put] = c;
 8003b22:	5488      	strb	r0, [r1, r2]
	tty->rx_put = rx_next;
 8003b24:	83e3      	strh	r3, [r4, #30]
	z_impl_k_sem_give(sem);
 8003b26:	4630      	mov	r0, r6
 8003b28:	f7ff f868 	bl	8002bfc <z_impl_k_sem_give>
}
 8003b2c:	e7cb      	b.n	8003ac6 <tty_uart_isr+0x16>
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	87a2      	strh	r2, [r4, #60]	; 0x3c
	if (api->fifo_fill != NULL) {
 8003b32:	68aa      	ldr	r2, [r5, #8]
 8003b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b36:	6956      	ldr	r6, [r2, #20]
 8003b38:	b11e      	cbz	r6, 8003b42 <tty_uart_isr+0x92>
		return api->fifo_fill(dev, tx_data, size);
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4419      	add	r1, r3
 8003b3e:	4628      	mov	r0, r5
 8003b40:	47b0      	blx	r6
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
 8003b42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b44:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8003b46:	429a      	cmp	r2, r3
				tty->tx_get = 0U;
 8003b48:	bf24      	itt	cs
 8003b4a:	2300      	movcs	r3, #0
 8003b4c:	87a3      	strhcs	r3, [r4, #60]	; 0x3c
	z_impl_k_sem_give(sem);
 8003b4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
 8003b52:	b002      	add	sp, #8
 8003b54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b58:	f7ff b850 	b.w	8002bfc <z_impl_k_sem_give>
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}

08003b60 <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4604      	mov	r4, r0
 8003b64:	460e      	mov	r6, r1
	uart_irq_rx_disable(tty->uart_dev);
 8003b66:	6800      	ldr	r0, [r0, #0]
{
 8003b68:	4615      	mov	r5, r2
	if (api->irq_rx_disable != NULL) {
 8003b6a:	6883      	ldr	r3, [r0, #8]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	b103      	cbz	r3, 8003b72 <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
 8003b70:	4798      	blx	r3

	tty->rx_ringbuf = buf;
	tty->rx_ringbuf_sz = size;
 8003b72:	e9c4 6505 	strd	r6, r5, [r4, #20]

	if (size > 0) {
 8003b76:	b155      	cbz	r5, 8003b8e <tty_set_rx_buf+0x2e>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8003b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	1d20      	adds	r0, r4, #4
 8003b80:	f000 fc23 	bl	80043ca <z_impl_k_sem_init>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
 8003b84:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable != NULL) {
 8003b86:	6883      	ldr	r3, [r0, #8]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	b103      	cbz	r3, 8003b8e <tty_set_rx_buf+0x2e>
		api->irq_rx_enable(dev);
 8003b8c:	4798      	blx	r3
	}

	return 0;
}
 8003b8e:	2000      	movs	r0, #0
 8003b90:	bd70      	pop	{r4, r5, r6, pc}

08003b92 <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
 8003b92:	b570      	push	{r4, r5, r6, lr}
 8003b94:	4604      	mov	r4, r0
 8003b96:	460e      	mov	r6, r1
 8003b98:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
 8003b9a:	6800      	ldr	r0, [r0, #0]
 8003b9c:	f7ff ff43 	bl	8003a26 <z_impl_uart_irq_tx_disable>

	tty->tx_ringbuf = buf;
	tty->tx_ringbuf_sz = size;
 8003ba0:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ba8:	18a9      	adds	r1, r5, r2
 8003baa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003bae:	f000 fc0c 	bl	80043ca <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	bd70      	pop	{r4, r5, r6, pc}

08003bb6 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	4770      	bx	lr

08003bba <_ZdlPv>:
	return malloc(size);
}

void operator delete(void* ptr) NOEXCEPT
{
	free(ptr);
 8003bba:	f7fd bfe9 	b.w	8001b90 <free>

08003bbe <uart_poll_out>:
	api->poll_out(dev, out_char);
 8003bbe:	6883      	ldr	r3, [r0, #8]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4718      	bx	r3

08003bc4 <debug_hook_out_nop>:
}
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	4770      	bx	lr

08003bc8 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8003bc8:	2200      	movs	r2, #0
{
 8003bca:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8003bcc:	4611      	mov	r1, r2
 8003bce:	2006      	movs	r0, #6
 8003bd0:	f7fd fd2c 	bl	800162c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	2007      	movs	r0, #7
 8003bda:	f7fd fd27 	bl	800162c <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8003bde:	2200      	movs	r2, #0
 8003be0:	4611      	mov	r1, r2
 8003be2:	2008      	movs	r0, #8
 8003be4:	f7fd fd22 	bl	800162c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8003be8:	2200      	movs	r2, #0
 8003bea:	4611      	mov	r1, r2
 8003bec:	2009      	movs	r0, #9
 8003bee:	f7fd fd1d 	bl	800162c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	200a      	movs	r0, #10
 8003bf8:	f7fd fd18 	bl	800162c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	4611      	mov	r1, r2
 8003c00:	2017      	movs	r0, #23
 8003c02:	f7fd fd13 	bl	800162c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8003c06:	2200      	movs	r2, #0
 8003c08:	4611      	mov	r1, r2
 8003c0a:	2028      	movs	r0, #40	; 0x28
 8003c0c:	f7fd fd0e 	bl	800162c <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8003c10:	2200      	movs	r2, #0
 8003c12:	4611      	mov	r1, r2
 8003c14:	2001      	movs	r0, #1
 8003c16:	f7fd fd09 	bl	800162c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	202a      	movs	r0, #42	; 0x2a
 8003c20:	f7fd fd04 	bl	800162c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8003c24:	2200      	movs	r2, #0
 8003c26:	4611      	mov	r1, r2
 8003c28:	2002      	movs	r0, #2
 8003c2a:	f7fd fcff 	bl	800162c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8003c2e:	2200      	movs	r2, #0
 8003c30:	4611      	mov	r1, r2
 8003c32:	2003      	movs	r0, #3
 8003c34:	f7fd fcfa 	bl	800162c <z_arm_irq_priority_set>
}
 8003c38:	2000      	movs	r0, #0
 8003c3a:	bd08      	pop	{r3, pc}

08003c3c <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 8003c3c:	6902      	ldr	r2, [r0, #16]
 8003c3e:	2117      	movs	r1, #23
 8003c40:	2016      	movs	r0, #22
 8003c42:	f7fd b9eb 	b.w	800101c <__stm32_exti_isr.isra.0>

08003c46 <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 8003c46:	6902      	ldr	r2, [r0, #16]
 8003c48:	2116      	movs	r1, #22
 8003c4a:	2015      	movs	r0, #21
 8003c4c:	f7fd b9e6 	b.w	800101c <__stm32_exti_isr.isra.0>

08003c50 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 8003c50:	6902      	ldr	r2, [r0, #16]
 8003c52:	2113      	movs	r1, #19
 8003c54:	2012      	movs	r0, #18
 8003c56:	f7fd b9e1 	b.w	800101c <__stm32_exti_isr.isra.0>

08003c5a <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 8003c5a:	6902      	ldr	r2, [r0, #16]
 8003c5c:	2111      	movs	r1, #17
 8003c5e:	2010      	movs	r0, #16
 8003c60:	f7fd b9dc 	b.w	800101c <__stm32_exti_isr.isra.0>

08003c64 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8003c64:	6902      	ldr	r2, [r0, #16]
 8003c66:	2110      	movs	r1, #16
 8003c68:	200a      	movs	r0, #10
 8003c6a:	f7fd b9d7 	b.w	800101c <__stm32_exti_isr.isra.0>

08003c6e <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8003c6e:	6902      	ldr	r2, [r0, #16]
 8003c70:	210a      	movs	r1, #10
 8003c72:	2005      	movs	r0, #5
 8003c74:	f7fd b9d2 	b.w	800101c <__stm32_exti_isr.isra.0>

08003c78 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8003c78:	6902      	ldr	r2, [r0, #16]
 8003c7a:	2105      	movs	r1, #5
 8003c7c:	2004      	movs	r0, #4
 8003c7e:	f7fd b9cd 	b.w	800101c <__stm32_exti_isr.isra.0>

08003c82 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8003c82:	6902      	ldr	r2, [r0, #16]
 8003c84:	2104      	movs	r1, #4
 8003c86:	2003      	movs	r0, #3
 8003c88:	f7fd b9c8 	b.w	800101c <__stm32_exti_isr.isra.0>

08003c8c <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8003c8c:	6902      	ldr	r2, [r0, #16]
 8003c8e:	2103      	movs	r1, #3
 8003c90:	2002      	movs	r0, #2
 8003c92:	f7fd b9c3 	b.w	800101c <__stm32_exti_isr.isra.0>

08003c96 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8003c96:	6902      	ldr	r2, [r0, #16]
 8003c98:	2102      	movs	r1, #2
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f7fd b9be 	b.w	800101c <__stm32_exti_isr.isra.0>

08003ca0 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8003ca0:	6902      	ldr	r2, [r0, #16]
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	f7fd b9b9 	b.w	800101c <__stm32_exti_isr.isra.0>

08003caa <config_pll_init>:
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 8003caa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003cae:	2208      	movs	r2, #8
 8003cb0:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(STM32_PLL_P_DIVISOR);
 8003cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cb8:	6083      	str	r3, [r0, #8]
}
 8003cba:	4770      	bx	lr

08003cbc <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 8003cbc:	4770      	bx	lr

08003cbe <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f000 b800 	b.w	8003cc6 <z_arm_fatal_error>

08003cc6 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8003cc6:	f000 bb44 	b.w	8004352 <z_fatal_error>

08003cca <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8003cca:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8003ccc:	6800      	ldr	r0, [r0, #0]
 8003cce:	f000 bb40 	b.w	8004352 <z_fatal_error>

08003cd2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8003cd2:	b508      	push	{r3, lr}
	handler();
 8003cd4:	f7fd fd1e 	bl	8001714 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8003cd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8003cdc:	f7fd be56 	b.w	800198c <z_arm_exc_exit>

08003ce0 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
 8003ce0:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
 8003ce2:	4601      	mov	r1, r0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff bf66 	b.w	8003bb6 <__cxa_atexit>

08003cea <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8003cea:	4603      	mov	r3, r0
	size_t n = 0;
 8003cec:	2000      	movs	r0, #0

	while (*s != '\0') {
 8003cee:	5c1a      	ldrb	r2, [r3, r0]
 8003cf0:	b902      	cbnz	r2, 8003cf4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8003cf2:	4770      	bx	lr
		n++;
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	e7fa      	b.n	8003cee <strlen+0x4>

08003cf8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8003cf8:	4603      	mov	r3, r0
	size_t n = 0;
 8003cfa:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8003cfc:	5c1a      	ldrb	r2, [r3, r0]
 8003cfe:	b10a      	cbz	r2, 8003d04 <strnlen+0xc>
 8003d00:	4288      	cmp	r0, r1
 8003d02:	d100      	bne.n	8003d06 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8003d04:	4770      	bx	lr
		n++;
 8003d06:	3001      	adds	r0, #1
 8003d08:	e7f8      	b.n	8003cfc <strnlen+0x4>

08003d0a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8003d0a:	1e43      	subs	r3, r0, #1
 8003d0c:	3901      	subs	r1, #1
 8003d0e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8003d12:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003d16:	4282      	cmp	r2, r0
 8003d18:	d101      	bne.n	8003d1e <strcmp+0x14>
 8003d1a:	2a00      	cmp	r2, #0
 8003d1c:	d1f7      	bne.n	8003d0e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8003d1e:	1a10      	subs	r0, r2, r0
 8003d20:	4770      	bx	lr

08003d22 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 8003d22:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 8003d24:	ea81 0400 	eor.w	r4, r1, r0
 8003d28:	07a5      	lsls	r5, r4, #30
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	d00b      	beq.n	8003d46 <memcpy+0x24>
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8003d32:	4291      	cmp	r1, r2
 8003d34:	d11b      	bne.n	8003d6e <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8003d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 8003d38:	2a00      	cmp	r2, #0
 8003d3a:	d0fc      	beq.n	8003d36 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 8003d3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d40:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 8003d44:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
 8003d46:	079c      	lsls	r4, r3, #30
 8003d48:	d1f6      	bne.n	8003d38 <memcpy+0x16>
 8003d4a:	f022 0403 	bic.w	r4, r2, #3
 8003d4e:	1f1d      	subs	r5, r3, #4
 8003d50:	0896      	lsrs	r6, r2, #2
 8003d52:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 8003d54:	42b9      	cmp	r1, r7
 8003d56:	d105      	bne.n	8003d64 <memcpy+0x42>
 8003d58:	f06f 0503 	mvn.w	r5, #3
 8003d5c:	fb05 2206 	mla	r2, r5, r6, r2
		d_byte = (unsigned char *)d_word;
 8003d60:	4423      	add	r3, r4
 8003d62:	e7e4      	b.n	8003d2e <memcpy+0xc>
			*(d_word++) = *(s_word++);
 8003d64:	f851 cb04 	ldr.w	ip, [r1], #4
 8003d68:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
 8003d6c:	e7f2      	b.n	8003d54 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
 8003d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d72:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8003d76:	e7dc      	b.n	8003d32 <memcpy+0x10>

08003d78 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 8003d78:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8003d7a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 8003d7c:	4604      	mov	r4, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 8003d7e:	07a3      	lsls	r3, r4, #30
 8003d80:	d111      	bne.n	8003da6 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 8003d82:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
 8003d86:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 8003d8a:	f022 0303 	bic.w	r3, r2, #3
 8003d8e:	0896      	lsrs	r6, r2, #2
 8003d90:	4423      	add	r3, r4
 8003d92:	429c      	cmp	r4, r3
 8003d94:	d10d      	bne.n	8003db2 <memset+0x3a>
 8003d96:	f06f 0403 	mvn.w	r4, #3
 8003d9a:	fb04 2206 	mla	r2, r4, r6, r2
 8003d9e:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d109      	bne.n	8003db8 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8003da4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	d0fc      	beq.n	8003da4 <memset+0x2c>
		*(d_byte++) = c_byte;
 8003daa:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
 8003dae:	3a01      	subs	r2, #1
 8003db0:	e7e5      	b.n	8003d7e <memset+0x6>
		*(d_word++) = c_word;
 8003db2:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
 8003db6:	e7ec      	b.n	8003d92 <memset+0x1a>
		*(d_byte++) = c_byte;
 8003db8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8003dbc:	e7f0      	b.n	8003da0 <memset+0x28>

08003dbe <_stdout_hook_default>:
}
 8003dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dc2:	4770      	bx	lr

08003dc4 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003dc4:	6843      	ldr	r3, [r0, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8003dc8:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8003dca:	600b      	str	r3, [r1, #0]
}
 8003dcc:	2000      	movs	r0, #0
 8003dce:	4770      	bx	lr

08003dd0 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003dd0:	6843      	ldr	r3, [r0, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8003dd4:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8003dd6:	4042      	eors	r2, r0
 8003dd8:	400a      	ands	r2, r1
 8003dda:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8003ddc:	615a      	str	r2, [r3, #20]
}
 8003dde:	2000      	movs	r0, #0
 8003de0:	4770      	bx	lr

08003de2 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003de2:	6843      	ldr	r3, [r0, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
}
 8003de6:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8003de8:	6199      	str	r1, [r3, #24]
}
 8003dea:	4770      	bx	lr

08003dec <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003dec:	6843      	ldr	r3, [r0, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003df0:	0409      	lsls	r1, r1, #16
 8003df2:	6199      	str	r1, [r3, #24]
}
 8003df4:	2000      	movs	r0, #0
 8003df6:	4770      	bx	lr

08003df8 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003df8:	6843      	ldr	r3, [r0, #4]
 8003dfa:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8003dfc:	6953      	ldr	r3, [r2, #20]
 8003dfe:	404b      	eors	r3, r1
 8003e00:	6153      	str	r3, [r2, #20]
}
 8003e02:	2000      	movs	r0, #0
 8003e04:	4770      	bx	lr

08003e06 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->data;
 8003e06:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8003e08:	6898      	ldr	r0, [r3, #8]
{
 8003e0a:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8003e0c:	b158      	cbz	r0, 8003e26 <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8003e0e:	2400      	movs	r4, #0
 8003e10:	4281      	cmp	r1, r0
 8003e12:	d112      	bne.n	8003e3a <gpio_stm32_manage_callback+0x34>
	return node->next;
 8003e14:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8003e16:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8003e18:	b954      	cbnz	r4, 8003e30 <gpio_stm32_manage_callback+0x2a>
 8003e1a:	428d      	cmp	r5, r1
	list->head = node;
 8003e1c:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8003e1e:	d100      	bne.n	8003e22 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8003e20:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8003e22:	2000      	movs	r0, #0
 8003e24:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8003e26:	b96a      	cbnz	r2, 8003e44 <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8003e28:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 8003e2a:	bd30      	pop	{r4, r5, pc}
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	e7ef      	b.n	8003e10 <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8003e30:	428d      	cmp	r5, r1
	parent->next = child;
 8003e32:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8003e34:	bf08      	it	eq
 8003e36:	60dc      	streq	r4, [r3, #12]
}
 8003e38:	e7f3      	b.n	8003e22 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8003e3a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	2d00      	cmp	r5, #0
 8003e40:	d1f4      	bne.n	8003e2c <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8003e42:	b13a      	cbz	r2, 8003e54 <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 8003e44:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	600a      	str	r2, [r1, #0]
	list->head = node;
 8003e4a:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d1eb      	bne.n	8003e28 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8003e50:	60d9      	str	r1, [r3, #12]
}
 8003e52:	e7ea      	b.n	8003e2a <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8003e54:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8003e58:	e7e7      	b.n	8003e2a <gpio_stm32_manage_callback+0x24>

08003e5a <gpio_stm32_isr>:
{
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	6889      	ldr	r1, [r1, #8]
 8003e5e:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003e60:	b169      	cbz	r1, 8003e7e <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8003e62:	2501      	movs	r5, #1
 8003e64:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8003e66:	680c      	ldr	r4, [r1, #0]
 8003e68:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8003e6a:	688a      	ldr	r2, [r1, #8]
 8003e6c:	402a      	ands	r2, r5
 8003e6e:	d002      	beq.n	8003e76 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8003e70:	684b      	ldr	r3, [r1, #4]
 8003e72:	4630      	mov	r0, r6
 8003e74:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003e76:	b114      	cbz	r4, 8003e7e <gpio_stm32_isr+0x24>
 8003e78:	4621      	mov	r1, r4
 8003e7a:	6824      	ldr	r4, [r4, #0]
 8003e7c:	e7f5      	b.n	8003e6a <gpio_stm32_isr+0x10>
}
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}

08003e80 <gpio_stm32_configure>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003e80:	6840      	ldr	r0, [r0, #4]
{
 8003e82:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003e84:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8003e86:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003e88:	6867      	ldr	r7, [r4, #4]
 8003e8a:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8003e8c:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8003e90:	ea27 0700 	bic.w	r7, r7, r0
 8003e94:	408e      	lsls	r6, r1
 8003e96:	433e      	orrs	r6, r7
 8003e98:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8003e9e:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003ea2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8003ea6:	f04f 0e03 	mov.w	lr, #3
 8003eaa:	007f      	lsls	r7, r7, #1
 8003eac:	fa0e f707 	lsl.w	r7, lr, r7
 8003eb0:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8003eb8:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8003ebc:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8003ec0:	007f      	lsls	r7, r7, #1
 8003ec2:	40be      	lsls	r6, r7
 8003ec4:	ea46 060c 	orr.w	r6, r6, ip
 8003ec8:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8003ece:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003ed2:	68e7      	ldr	r7, [r4, #12]
 8003ed4:	0076      	lsls	r6, r6, #1
 8003ed6:	fa0e f606 	lsl.w	r6, lr, r6
 8003eda:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8003ee2:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8003ee6:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8003eea:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8003eec:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8003ef0:	40b2      	lsls	r2, r6
 8003ef2:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8003ef4:	2d20      	cmp	r5, #32
 8003ef6:	60e2      	str	r2, [r4, #12]
 8003ef8:	d115      	bne.n	8003f26 <gpio_stm32_configure+0xa6>
		if (pin < 8) {
 8003efa:	2907      	cmp	r1, #7
 8003efc:	dc2c      	bgt.n	8003f58 <gpio_stm32_configure+0xd8>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003f02:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8003f04:	b332      	cbz	r2, 8003f54 <gpio_stm32_configure+0xd4>
  return __builtin_clz(value);
 8003f06:	fab2 f282 	clz	r2, r2
 8003f0a:	0092      	lsls	r2, r2, #2
 8003f0c:	260f      	movs	r6, #15
 8003f0e:	fa06 f202 	lsl.w	r2, r6, r2
 8003f12:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8003f1a:	fab2 f282 	clz	r2, r2
 8003f1e:	0092      	lsls	r2, r2, #2
 8003f20:	4093      	lsls	r3, r2
 8003f22:	430b      	orrs	r3, r1
 8003f24:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8003f2a:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003f2e:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	fa90 f0a0 	rbit	r0, r0
 8003f34:	2103      	movs	r1, #3
 8003f36:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 8003f38:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8003f3c:	092d      	lsrs	r5, r5, #4
 8003f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f42:	0040      	lsls	r0, r0, #1
 8003f44:	ea22 0303 	bic.w	r3, r2, r3
 8003f48:	fa05 f000 	lsl.w	r0, r5, r0
 8003f4c:	4318      	orrs	r0, r3
 8003f4e:	6020      	str	r0, [r4, #0]
}
 8003f50:	2000      	movs	r0, #0
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8003f54:	462a      	mov	r2, r5
 8003f56:	e7d8      	b.n	8003f0a <gpio_stm32_configure+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003f58:	0a02      	lsrs	r2, r0, #8
 8003f5a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8003f60:	b181      	cbz	r1, 8003f84 <gpio_stm32_configure+0x104>
  return __builtin_clz(value);
 8003f62:	fab1 f181 	clz	r1, r1
 8003f66:	0089      	lsls	r1, r1, #2
 8003f68:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8003f6e:	fab2 f282 	clz	r2, r2
 8003f72:	fa07 f101 	lsl.w	r1, r7, r1
 8003f76:	0092      	lsls	r2, r2, #2
 8003f78:	ea26 0101 	bic.w	r1, r6, r1
 8003f7c:	4093      	lsls	r3, r2
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003f82:	e7d0      	b.n	8003f26 <gpio_stm32_configure+0xa6>
    return 32U;
 8003f84:	4629      	mov	r1, r5
 8003f86:	e7ee      	b.n	8003f66 <gpio_stm32_configure+0xe6>

08003f88 <gpio_stm32_config>:
{
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	460d      	mov	r5, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 8003f8c:	0591      	lsls	r1, r2, #22
{
 8003f8e:	4604      	mov	r4, r0
 8003f90:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8003f92:	d519      	bpl.n	8003fc8 <gpio_stm32_config+0x40>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8003f94:	079a      	lsls	r2, r3, #30
 8003f96:	d510      	bpl.n	8003fba <gpio_stm32_config+0x32>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8003f98:	0758      	lsls	r0, r3, #29
 8003f9a:	d530      	bpl.n	8003ffe <gpio_stm32_config+0x76>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8003f9c:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8003f9e:	06d9      	lsls	r1, r3, #27
 8003fa0:	d50d      	bpl.n	8003fbe <gpio_stm32_config+0x36>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8003fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8003fa6:	0519      	lsls	r1, r3, #20
 8003fa8:	d41e      	bmi.n	8003fe8 <gpio_stm32_config+0x60>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8003faa:	0558      	lsls	r0, r3, #21
 8003fac:	d515      	bpl.n	8003fda <gpio_stm32_config+0x52>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8003fae:	2101      	movs	r1, #1
 8003fb0:	40a9      	lsls	r1, r5
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7ff ff1a 	bl	8003dec <gpio_stm32_port_clear_bits_raw>
 8003fb8:	e00f      	b.n	8003fda <gpio_stm32_config+0x52>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8003fba:	2210      	movs	r2, #16
 8003fbc:	e7ef      	b.n	8003f9e <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8003fbe:	0698      	lsls	r0, r3, #26
 8003fc0:	d5f1      	bpl.n	8003fa6 <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8003fc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8003fc6:	e7ee      	b.n	8003fa6 <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8003fc8:	05d1      	lsls	r1, r2, #23
 8003fca:	d513      	bpl.n	8003ff4 <gpio_stm32_config+0x6c>
		if ((flags & GPIO_PULL_UP) != 0) {
 8003fcc:	06da      	lsls	r2, r3, #27
 8003fce:	d413      	bmi.n	8003ff8 <gpio_stm32_config+0x70>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8003fd0:	f013 0220 	ands.w	r2, r3, #32
 8003fd4:	bf18      	it	ne
 8003fd6:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure(dev, pin, pincfg, 0);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	4629      	mov	r1, r5
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f7ff ff4e 	bl	8003e80 <gpio_stm32_configure>
 8003fe4:	2000      	movs	r0, #0
}
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003fe8:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003fea:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003fec:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003fee:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 8003ff0:	618b      	str	r3, [r1, #24]
	return 0;
 8003ff2:	e7f2      	b.n	8003fda <gpio_stm32_config+0x52>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8003ff4:	2230      	movs	r2, #48	; 0x30
 8003ff6:	e7f0      	b.n	8003fda <gpio_stm32_config+0x52>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8003ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffc:	e7ed      	b.n	8003fda <gpio_stm32_config+0x52>
				return -ENOTSUP;
 8003ffe:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return err;
 8004002:	e7f0      	b.n	8003fe6 <gpio_stm32_config+0x5e>

08004004 <gpio_stm32_init>:
 */
static int gpio_stm32_init(const struct device *dev)
{
	struct gpio_stm32_data *data = dev->data;

	data->dev = dev;
 8004004:	6902      	ldr	r2, [r0, #16]
	return 0;
#else
#ifdef CONFIG_PM_DEVICE
	data->power_state = PM_DEVICE_STATE_ACTIVE;
#endif
	return gpio_stm32_clock_request(dev, true);
 8004006:	2101      	movs	r1, #1
	data->dev = dev;
 8004008:	6050      	str	r0, [r2, #4]
	return gpio_stm32_clock_request(dev, true);
 800400a:	f7fd be73 	b.w	8001cf4 <gpio_stm32_clock_request>

0800400e <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800400e:	2301      	movs	r3, #1
 8004010:	fa03 f101 	lsl.w	r1, r3, r1
 8004014:	6903      	ldr	r3, [r0, #16]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 800401a:	bf18      	it	ne
 800401c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8004020:	b112      	cbz	r2, 8004028 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 8004022:	6883      	ldr	r3, [r0, #8]
 8004024:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8004026:	4718      	bx	r3
 8004028:	6883      	ldr	r3, [r0, #8]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	e7fb      	b.n	8004026 <gpio_pin_set.isra.0+0x18>

0800402e <_spi_context_cs_control>:
{
 800402e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8004030:	6805      	ldr	r5, [r0, #0]
{
 8004032:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8004034:	b1fd      	cbz	r5, 8004076 <_spi_context_cs_control+0x48>
 8004036:	68ab      	ldr	r3, [r5, #8]
 8004038:	b1eb      	cbz	r3, 8004076 <_spi_context_cs_control+0x48>
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	b1d8      	cbz	r0, 8004076 <_spi_context_cs_control+0x48>
		if (on) {
 800403e:	b151      	cbz	r1, 8004056 <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8004040:	7a19      	ldrb	r1, [r3, #8]
 8004042:	2201      	movs	r2, #1
 8004044:	f7ff ffe3 	bl	800400e <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	6858      	ldr	r0, [r3, #4]
}
 800404e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8004052:	f7ff b9c3 	b.w	80033dc <z_impl_k_busy_wait>
			if (!force_off &&
 8004056:	b912      	cbnz	r2, 800405e <_spi_context_cs_control+0x30>
 8004058:	88aa      	ldrh	r2, [r5, #4]
 800405a:	0492      	lsls	r2, r2, #18
 800405c:	d40b      	bmi.n	8004076 <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
 800405e:	6858      	ldr	r0, [r3, #4]
 8004060:	f7ff f9bc 	bl	80033dc <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2200      	movs	r2, #0
 800406a:	7a19      	ldrb	r1, [r3, #8]
 800406c:	6818      	ldr	r0, [r3, #0]
}
 800406e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8004072:	f7ff bfcc 	b.w	800400e <gpio_pin_set.isra.0>
}
 8004076:	bd38      	pop	{r3, r4, r5, pc}

08004078 <spi_context_unlock_unconditionally>:
{
 8004078:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 800407a:	2201      	movs	r2, #1
 800407c:	2100      	movs	r1, #0
{
 800407e:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 8004080:	f7ff ffd5 	bl	800402e <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 8004084:	6923      	ldr	r3, [r4, #16]
 8004086:	b933      	cbnz	r3, 8004096 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 8004088:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 800408a:	f104 0008 	add.w	r0, r4, #8
}
 800408e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004092:	f7fe bdb3 	b.w	8002bfc <z_impl_k_sem_give>
 8004096:	bd10      	pop	{r4, pc}

08004098 <spi_stm32_release>:
{
 8004098:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 800409a:	6900      	ldr	r0, [r0, #16]
 800409c:	f7ff ffec 	bl	8004078 <spi_context_unlock_unconditionally>
}
 80040a0:	2000      	movs	r0, #0
 80040a2:	bd08      	pop	{r3, pc}

080040a4 <LL_USART_ClearFlag_FE>:
{
 80040a4:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 80040a6:	6803      	ldr	r3, [r0, #0]
 80040a8:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80040aa:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 80040ac:	6843      	ldr	r3, [r0, #4]
 80040ae:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80040b0:	9b01      	ldr	r3, [sp, #4]
}
 80040b2:	b002      	add	sp, #8
 80040b4:	4770      	bx	lr

080040b6 <uart_stm32_poll_in>:
{
 80040b6:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80040b8:	6843      	ldr	r3, [r0, #4]
 80040ba:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80040bc:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 80040be:	071a      	lsls	r2, r3, #28
 80040c0:	d501      	bpl.n	80040c6 <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(UartInstance);
 80040c2:	f7ff ffef 	bl	80040a4 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80040c6:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 80040c8:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80040ca:	bf43      	ittte	mi
 80040cc:	6843      	ldrmi	r3, [r0, #4]
 80040ce:	700b      	strbmi	r3, [r1, #0]
	return 0;
 80040d0:	2000      	movmi	r0, #0
		return -1;
 80040d2:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 80040d6:	bd08      	pop	{r3, pc}

080040d8 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80040d8:	6843      	ldr	r3, [r0, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80040dc:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 80040de:	0612      	lsls	r2, r2, #24
 80040e0:	d5fc      	bpl.n	80040dc <uart_stm32_poll_out+0x4>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80040e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040e6:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80040e8:	6059      	str	r1, [r3, #4]
}
 80040ea:	4770      	bx	lr

080040ec <uart_stm32_err_check>:
{
 80040ec:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80040ee:	6843      	ldr	r3, [r0, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80040f2:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 80040f4:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 80040f6:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80040f8:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 80040fa:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 80040fe:	bf48      	it	mi
 8004100:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8004104:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 8004106:	bf48      	it	mi
 8004108:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 800410c:	07d3      	lsls	r3, r2, #31
 800410e:	d501      	bpl.n	8004114 <uart_stm32_err_check+0x28>
		LL_USART_ClearFlag_ORE(UartInstance);
 8004110:	f7ff ffc8 	bl	80040a4 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8004114:	0791      	lsls	r1, r2, #30
 8004116:	d501      	bpl.n	800411c <uart_stm32_err_check+0x30>
		LL_USART_ClearFlag_PE(UartInstance);
 8004118:	f7ff ffc4 	bl	80040a4 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 800411c:	0753      	lsls	r3, r2, #29
 800411e:	d501      	bpl.n	8004124 <uart_stm32_err_check+0x38>
		LL_USART_ClearFlag_FE(UartInstance);
 8004120:	f7ff ffc0 	bl	80040a4 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 8004124:	f7ff ffbe 	bl	80040a4 <LL_USART_ClearFlag_FE>
}
 8004128:	4610      	mov	r0, r2
 800412a:	bd08      	pop	{r3, pc}

0800412c <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800412c:	6843      	ldr	r3, [r0, #4]
{
 800412e:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004130:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 8004132:	2300      	movs	r3, #0
 8004134:	b2d8      	uxtb	r0, r3
 8004136:	1a15      	subs	r5, r2, r0
 8004138:	2d00      	cmp	r5, #0
 800413a:	dd04      	ble.n	8004146 <uart_stm32_fifo_fill+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800413c:	6825      	ldr	r5, [r4, #0]
 800413e:	062d      	lsls	r5, r5, #24
 8004140:	f103 0301 	add.w	r3, r3, #1
 8004144:	d400      	bmi.n	8004148 <uart_stm32_fifo_fill+0x1c>
}
 8004146:	bd30      	pop	{r4, r5, pc}
  USARTx->DR = Value;
 8004148:	5c08      	ldrb	r0, [r1, r0]
 800414a:	6060      	str	r0, [r4, #4]
}
 800414c:	e7f2      	b.n	8004134 <uart_stm32_fifo_fill+0x8>

0800414e <uart_stm32_fifo_read>:
{
 800414e:	b538      	push	{r3, r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004150:	6843      	ldr	r3, [r0, #4]
 8004152:	681c      	ldr	r4, [r3, #0]
	while ((size - num_rx > 0) &&
 8004154:	2500      	movs	r5, #0
 8004156:	b2e8      	uxtb	r0, r5
 8004158:	1a13      	subs	r3, r2, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	dd02      	ble.n	8004164 <uart_stm32_fifo_read+0x16>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	069b      	lsls	r3, r3, #26
 8004162:	d400      	bmi.n	8004166 <uart_stm32_fifo_read+0x18>
}
 8004164:	bd38      	pop	{r3, r4, r5, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004166:	6863      	ldr	r3, [r4, #4]
 8004168:	540b      	strb	r3, [r1, r0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800416a:	6823      	ldr	r3, [r4, #0]
		if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800416c:	0718      	lsls	r0, r3, #28
 800416e:	d502      	bpl.n	8004176 <uart_stm32_fifo_read+0x28>
			LL_USART_ClearFlag_ORE(UartInstance);
 8004170:	4620      	mov	r0, r4
 8004172:	f7ff ff97 	bl	80040a4 <LL_USART_ClearFlag_FE>
 8004176:	3501      	adds	r5, #1
 8004178:	e7ed      	b.n	8004156 <uart_stm32_fifo_read+0x8>

0800417a <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800417a:	6843      	ldr	r3, [r0, #4]
 800417c:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800417e:	68d3      	ldr	r3, [r2, #12]
 8004180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004184:	60d3      	str	r3, [r2, #12]
}
 8004186:	4770      	bx	lr

08004188 <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004188:	6843      	ldr	r3, [r0, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800418c:	68d3      	ldr	r3, [r2, #12]
 800418e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004192:	60d3      	str	r3, [r2, #12]
}
 8004194:	4770      	bx	lr

08004196 <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004196:	6843      	ldr	r3, [r0, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800419a:	6818      	ldr	r0, [r3, #0]
	return LL_USART_IsActiveFlag_TXE(UartInstance) &&
 800419c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 80041a0:	bf1c      	itt	ne
 80041a2:	68d8      	ldrne	r0, [r3, #12]
 80041a4:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 80041a8:	4770      	bx	lr

080041aa <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80041aa:	6843      	ldr	r3, [r0, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80041ae:	6818      	ldr	r0, [r3, #0]
}
 80041b0:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80041b4:	4770      	bx	lr

080041b6 <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80041b6:	6843      	ldr	r3, [r0, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80041ba:	68d3      	ldr	r3, [r2, #12]
 80041bc:	f043 0320 	orr.w	r3, r3, #32
 80041c0:	60d3      	str	r3, [r2, #12]
}
 80041c2:	4770      	bx	lr

080041c4 <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80041c4:	6843      	ldr	r3, [r0, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80041c8:	68d3      	ldr	r3, [r2, #12]
 80041ca:	f023 0320 	bic.w	r3, r3, #32
 80041ce:	60d3      	str	r3, [r2, #12]
}
 80041d0:	4770      	bx	lr

080041d2 <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80041d2:	6843      	ldr	r3, [r0, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80041d6:	6818      	ldr	r0, [r3, #0]
}
 80041d8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80041dc:	4770      	bx	lr

080041de <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80041de:	6843      	ldr	r3, [r0, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80041e4:	0691      	lsls	r1, r2, #26
 80041e6:	d502      	bpl.n	80041ee <uart_stm32_irq_is_pending+0x10>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80041e8:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
 80041ea:	0692      	lsls	r2, r2, #26
 80041ec:	d407      	bmi.n	80041fe <uart_stm32_irq_is_pending+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80041ee:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80041f0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80041f4:	d004      	beq.n	8004200 <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 80041f6:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(UartInstance) &&
 80041f8:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80041fc:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80041fe:	2001      	movs	r0, #1
}
 8004200:	4770      	bx	lr

08004202 <uart_stm32_irq_update>:
}
 8004202:	2001      	movs	r0, #1
 8004204:	4770      	bx	lr

08004206 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004206:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 8004208:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 800420c:	4770      	bx	lr

0800420e <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 800420e:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 8004210:	6893      	ldr	r3, [r2, #8]
 8004212:	b10b      	cbz	r3, 8004218 <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 8004214:	68d1      	ldr	r1, [r2, #12]
 8004216:	4718      	bx	r3
}
 8004218:	4770      	bx	lr

0800421a <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,	\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 800421a:	b508      	push	{r3, lr}
 800421c:	2200      	movs	r2, #0
 800421e:	2025      	movs	r0, #37	; 0x25
 8004220:	4611      	mov	r1, r2
 8004222:	f7fd fa03 	bl	800162c <z_arm_irq_priority_set>
 8004226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800422a:	2025      	movs	r0, #37	; 0x25
 800422c:	f7fd b9ee 	b.w	800160c <arch_irq_enable>

08004230 <uart_stm32_irq_config_func_1>:
 8004230:	b508      	push	{r3, lr}
 8004232:	2200      	movs	r2, #0
 8004234:	2026      	movs	r0, #38	; 0x26
 8004236:	4611      	mov	r1, r2
 8004238:	f7fd f9f8 	bl	800162c <z_arm_irq_priority_set>
 800423c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004240:	2026      	movs	r0, #38	; 0x26
 8004242:	f7fd b9e3 	b.w	800160c <arch_irq_enable>

08004246 <uart_stm32_set_baudrate>:
{
 8004246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (clock_control_get_rate(data->clock,
 8004248:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800424a:	6847      	ldr	r7, [r0, #4]
	if (clock_control_get_rate(data->clock,
 800424c:	685e      	ldr	r6, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800424e:	f857 4b0c 	ldr.w	r4, [r7], #12
{
 8004252:	460d      	mov	r5, r1
 8004254:	4630      	mov	r0, r6
 8004256:	f000 f866 	bl	8004326 <z_device_ready>
 800425a:	b308      	cbz	r0, 80042a0 <uart_stm32_set_baudrate+0x5a>
	if (api->get_rate == NULL) {
 800425c:	68b3      	ldr	r3, [r6, #8]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	b1f3      	cbz	r3, 80042a0 <uart_stm32_set_baudrate+0x5a>
	return api->get_rate(dev, sys, rate);
 8004262:	aa01      	add	r2, sp, #4
 8004264:	4639      	mov	r1, r7
 8004266:	4630      	mov	r0, r6
 8004268:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 800426a:	2800      	cmp	r0, #0
 800426c:	db18      	blt.n	80042a0 <uart_stm32_set_baudrate+0x5a>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800426e:	68e3      	ldr	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004270:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8004272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004276:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8004278:	60e3      	str	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800427a:	00aa      	lsls	r2, r5, #2
 800427c:	0fab      	lsrs	r3, r5, #30
 800427e:	fba0 0101 	umull	r0, r1, r0, r1
 8004282:	f7fb ff9f 	bl	80001c4 <__aeabi_uldivmod>
 8004286:	2264      	movs	r2, #100	; 0x64
 8004288:	fbb0 f1f2 	udiv	r1, r0, r2
 800428c:	fb02 0311 	mls	r3, r2, r1, r0
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	3332      	adds	r3, #50	; 0x32
 8004294:	fbb3 f3f2 	udiv	r3, r3, r2
 8004298:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800429c:	b29b      	uxth	r3, r3
 800429e:	60a3      	str	r3, [r4, #8]
}
 80042a0:	b003      	add	sp, #12
 80042a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042a4 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 80042a4:	6903      	ldr	r3, [r0, #16]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80042aa:	6843      	ldr	r3, [r0, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80042ae:	68d3      	ldr	r3, [r2, #12]
 80042b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 80042b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b8:	d029      	beq.n	800430e <uart_stm32_config_get+0x6a>
		return UART_CFG_PARITY_NONE;
 80042ba:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 80042be:	f1dc 0300 	rsbs	r3, ip, #0
 80042c2:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 80042c6:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80042c8:	6913      	ldr	r3, [r2, #16]
 80042ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 80042ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d2:	d01e      	beq.n	8004312 <uart_stm32_config_get+0x6e>
 80042d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042d8:	d01d      	beq.n	8004316 <uart_stm32_config_get+0x72>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bf14      	ite	ne
 80042de:	2303      	movne	r3, #3
 80042e0:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80042e2:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80042e4:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80042e6:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 80042e8:	04c0      	lsls	r0, r0, #19
 80042ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042ee:	d514      	bpl.n	800431a <uart_stm32_config_get+0x76>
			return UART_CFG_DATA_BITS_9;
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf14      	ite	ne
 80042f4:	2303      	movne	r3, #3
 80042f6:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80042f8:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80042fa:	6953      	ldr	r3, [r2, #20]
 80042fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8004300:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8004304:	4253      	negs	r3, r2
 8004306:	4153      	adcs	r3, r2
 8004308:	71cb      	strb	r3, [r1, #7]
}
 800430a:	2000      	movs	r0, #0
 800430c:	4770      	bx	lr
	switch (parity) {
 800430e:	2302      	movs	r3, #2
 8004310:	e7d9      	b.n	80042c6 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 8004312:	2300      	movs	r3, #0
 8004314:	e7e5      	b.n	80042e2 <uart_stm32_config_get+0x3e>
		return UART_CFG_STOP_BITS_1_5;
 8004316:	2302      	movs	r3, #2
 8004318:	e7e3      	b.n	80042e2 <uart_stm32_config_get+0x3e>
			return UART_CFG_DATA_BITS_7;
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf0c      	ite	eq
 800431e:	2303      	moveq	r3, #3
 8004320:	2302      	movne	r3, #2
 8004322:	e7e9      	b.n	80042f8 <uart_stm32_config_get+0x54>

08004324 <z_device_state_init>:
}
 8004324:	4770      	bx	lr

08004326 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8004326:	b138      	cbz	r0, 8004338 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8004328:	68c3      	ldr	r3, [r0, #12]
 800432a:	8818      	ldrh	r0, [r3, #0]
 800432c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8004330:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8004334:	4258      	negs	r0, r3
 8004336:	4158      	adcs	r0, r3
}
 8004338:	4770      	bx	lr

0800433a <arch_system_halt>:
	__asm__ volatile(
 800433a:	f04f 0210 	mov.w	r2, #16
 800433e:	f3ef 8311 	mrs	r3, BASEPRI
 8004342:	f382 8811 	msr	BASEPRI, r2
 8004346:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 800434a:	e7fe      	b.n	800434a <arch_system_halt+0x10>

0800434c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800434c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 800434e:	f7ff fff4 	bl	800433a <arch_system_halt>

08004352 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8004352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004354:	4605      	mov	r5, r0
 8004356:	460e      	mov	r6, r1
 8004358:	f04f 0310 	mov.w	r3, #16
 800435c:	f3ef 8711 	mrs	r7, BASEPRI
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 8004368:	f7fe fea4 	bl	80030b4 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800436c:	4631      	mov	r1, r6
 800436e:	4604      	mov	r4, r0
 8004370:	4628      	mov	r0, r5
 8004372:	f7ff ffeb 	bl	800434c <k_sys_fatal_error_handler>
	__asm__ volatile(
 8004376:	f387 8811 	msr	BASEPRI, r7
 800437a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800437e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8004380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004384:	f7fd bb1c 	b.w	80019c0 <z_impl_k_thread_abort>

08004388 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004388:	f3ef 8005 	mrs	r0, IPSR
}
 800438c:	3800      	subs	r0, #0
 800438e:	bf18      	it	ne
 8004390:	2001      	movne	r0, #1
 8004392:	4770      	bx	lr

08004394 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8004394:	b508      	push	{r3, lr}
	__asm__ volatile(
 8004396:	f04f 0210 	mov.w	r2, #16
 800439a:	f3ef 8311 	mrs	r3, BASEPRI
 800439e:	f382 8811 	msr	BASEPRI, r2
 80043a2:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 80043a6:	f7fd f9a7 	bl	80016f8 <arch_cpu_idle>
 80043aa:	e7f4      	b.n	8004396 <idle+0x2>

080043ac <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 80043ac:	f990 300e 	ldrsb.w	r3, [r0, #14]
 80043b0:	428b      	cmp	r3, r1
 80043b2:	d001      	beq.n	80043b8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 80043b4:	f7fe be2a 	b.w	800300c <z_set_prio>
}
 80043b8:	2000      	movs	r0, #0
 80043ba:	4770      	bx	lr

080043bc <z_impl_k_mutex_init>:
{
 80043bc:	4603      	mov	r3, r0
	mutex->owner = NULL;
 80043be:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
 80043c0:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
 80043c4:	e9c3 3300 	strd	r3, r3, [r3]
}
 80043c8:	4770      	bx	lr

080043ca <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 80043ca:	b13a      	cbz	r2, 80043dc <z_impl_k_sem_init+0x12>
 80043cc:	428a      	cmp	r2, r1
 80043ce:	d305      	bcc.n	80043dc <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 80043d0:	e9c0 1202 	strd	r1, r2, [r0, #8]
 80043d4:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 80043d8:	2000      	movs	r0, #0
 80043da:	4770      	bx	lr
		return -EINVAL;
 80043dc:	f06f 0015 	mvn.w	r0, #21
}
 80043e0:	4770      	bx	lr

080043e2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 80043e2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 80043e6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80043e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80043ea:	2300      	movs	r3, #0
	node->prev = NULL;
 80043ec:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 80043f0:	4770      	bx	lr

080043f2 <unpend_thread_no_timeout>:
{
 80043f2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 80043f4:	f7ff fff5 	bl	80043e2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80043f8:	7b43      	ldrb	r3, [r0, #13]
 80043fa:	f023 0302 	bic.w	r3, r3, #2
 80043fe:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	6083      	str	r3, [r0, #8]
}
 8004404:	bd08      	pop	{r3, pc}

08004406 <z_unpend_thread_no_timeout>:
{
 8004406:	b508      	push	{r3, lr}
 8004408:	f04f 0310 	mov.w	r3, #16
 800440c:	f3ef 8111 	mrs	r1, BASEPRI
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 8004418:	f7ff ffeb 	bl	80043f2 <unpend_thread_no_timeout>
	__asm__ volatile(
 800441c:	f381 8811 	msr	BASEPRI, r1
 8004420:	f3bf 8f6f 	isb	sy
}
 8004424:	bd08      	pop	{r3, pc}

08004426 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8004426:	4603      	mov	r3, r0
 8004428:	b920      	cbnz	r0, 8004434 <z_reschedule_irqlock+0xe>
 800442a:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 800442e:	b90a      	cbnz	r2, 8004434 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8004430:	f7fd b898 	b.w	8001564 <arch_swap>
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
}
 800443c:	4770      	bx	lr

0800443e <z_reschedule_unlocked>:
	__asm__ volatile(
 800443e:	f04f 0310 	mov.w	r3, #16
 8004442:	f3ef 8011 	mrs	r0, BASEPRI
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800444e:	f7ff bfea 	b.w	8004426 <z_reschedule_irqlock>

08004452 <z_priq_dumb_best>:
{
 8004452:	4603      	mov	r3, r0
	return list->head == list;
 8004454:	6800      	ldr	r0, [r0, #0]
}
 8004456:	4283      	cmp	r3, r0
 8004458:	bf08      	it	eq
 800445a:	2000      	moveq	r0, #0
 800445c:	4770      	bx	lr

0800445e <add_to_waitq_locked>:
{
 800445e:	b538      	push	{r3, r4, r5, lr}
 8004460:	4604      	mov	r4, r0
 8004462:	460d      	mov	r5, r1
	unready_thread(thread);
 8004464:	f7fe fc96 	bl	8002d94 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8004468:	7b63      	ldrb	r3, [r4, #13]
 800446a:	f043 0302 	orr.w	r3, r3, #2
 800446e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8004470:	b195      	cbz	r5, 8004498 <add_to_waitq_locked+0x3a>
 8004472:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8004474:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004476:	429d      	cmp	r5, r3
 8004478:	d015      	beq.n	80044a6 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800447a:	b1a3      	cbz	r3, 80044a6 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 800447c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8004480:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8004484:	4291      	cmp	r1, r2
 8004486:	d008      	beq.n	800449a <add_to_waitq_locked+0x3c>
		return b2 - b1;
 8004488:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 800448a:	2a00      	cmp	r2, #0
 800448c:	dd05      	ble.n	800449a <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 800448e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8004490:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8004494:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8004496:	605c      	str	r4, [r3, #4]
}
 8004498:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 800449a:	686a      	ldr	r2, [r5, #4]
 800449c:	4293      	cmp	r3, r2
 800449e:	d002      	beq.n	80044a6 <add_to_waitq_locked+0x48>
 80044a0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1ec      	bne.n	8004480 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 80044a6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 80044a8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 80044ac:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80044ae:	606c      	str	r4, [r5, #4]
}
 80044b0:	e7f2      	b.n	8004498 <add_to_waitq_locked+0x3a>

080044b2 <z_ready_thread>:
{
 80044b2:	b510      	push	{r4, lr}
 80044b4:	f04f 0310 	mov.w	r3, #16
 80044b8:	f3ef 8411 	mrs	r4, BASEPRI
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 80044c4:	f7fe fd4e 	bl	8002f64 <ready_thread>
	__asm__ volatile(
 80044c8:	f384 8811 	msr	BASEPRI, r4
 80044cc:	f3bf 8f6f 	isb	sy
}
 80044d0:	bd10      	pop	{r4, pc}

080044d2 <z_thread_timeout>:
{
 80044d2:	b510      	push	{r4, lr}
 80044d4:	4601      	mov	r1, r0
	__asm__ volatile(
 80044d6:	f04f 0310 	mov.w	r3, #16
 80044da:	f3ef 8411 	mrs	r4, BASEPRI
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
		if (!killed) {
 80044e6:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 80044ea:	f013 0f28 	tst.w	r3, #40	; 0x28
 80044ee:	d10d      	bne.n	800450c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 80044f0:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 80044f4:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 80044f6:	b10b      	cbz	r3, 80044fc <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 80044f8:	f7ff ff7b 	bl	80043f2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80044fc:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 8004500:	f023 0314 	bic.w	r3, r3, #20
 8004504:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 8004508:	f7fe fd2c 	bl	8002f64 <ready_thread>
	__asm__ volatile(
 800450c:	f384 8811 	msr	BASEPRI, r4
 8004510:	f3bf 8f6f 	isb	sy
}
 8004514:	bd10      	pop	{r4, pc}

08004516 <z_unpend_first_thread>:
{
 8004516:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8004518:	f04f 0310 	mov.w	r3, #16
 800451c:	f3ef 8511 	mrs	r5, BASEPRI
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8004528:	f7ff ff93 	bl	8004452 <z_priq_dumb_best>
		if (thread != NULL) {
 800452c:	4604      	mov	r4, r0
 800452e:	b120      	cbz	r0, 800453a <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 8004530:	f7ff ff5f 	bl	80043f2 <unpend_thread_no_timeout>
 8004534:	3018      	adds	r0, #24
 8004536:	f000 f806 	bl	8004546 <z_abort_timeout>
	__asm__ volatile(
 800453a:	f385 8811 	msr	BASEPRI, r5
 800453e:	f3bf 8f6f 	isb	sy
}
 8004542:	4620      	mov	r0, r4
 8004544:	bd38      	pop	{r3, r4, r5, pc}

08004546 <z_abort_timeout>:
{
 8004546:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004548:	f04f 0210 	mov.w	r2, #16
 800454c:	f3ef 8411 	mrs	r4, BASEPRI
 8004550:	f382 8811 	msr	BASEPRI, r2
 8004554:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8004558:	6803      	ldr	r3, [r0, #0]
 800455a:	b13b      	cbz	r3, 800456c <z_abort_timeout+0x26>
			remove_timeout(to);
 800455c:	f7fe fe4e 	bl	80031fc <remove_timeout>
			ret = 0;
 8004560:	2000      	movs	r0, #0
	__asm__ volatile(
 8004562:	f384 8811 	msr	BASEPRI, r4
 8004566:	f3bf 8f6f 	isb	sy
}
 800456a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 800456c:	f06f 0015 	mvn.w	r0, #21
 8004570:	e7f7      	b.n	8004562 <z_abort_timeout+0x1c>

08004572 <z_set_timeout_expiry>:
{
 8004572:	b570      	push	{r4, r5, r6, lr}
 8004574:	4604      	mov	r4, r0
 8004576:	460d      	mov	r5, r1
	__asm__ volatile(
 8004578:	f04f 0310 	mov.w	r3, #16
 800457c:	f3ef 8611 	mrs	r6, BASEPRI
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8004588:	f7fe fe10 	bl	80031ac <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800458c:	2801      	cmp	r0, #1
 800458e:	dd05      	ble.n	800459c <z_set_timeout_expiry+0x2a>
 8004590:	42a0      	cmp	r0, r4
 8004592:	db03      	blt.n	800459c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8004594:	4629      	mov	r1, r5
 8004596:	4620      	mov	r0, r4
 8004598:	f7fc ff40 	bl	800141c <sys_clock_set_timeout>
	__asm__ volatile(
 800459c:	f386 8811 	msr	BASEPRI, r6
 80045a0:	f3bf 8f6f 	isb	sy
}
 80045a4:	bd70      	pop	{r4, r5, r6, pc}

080045a6 <k_timer_init>:
	timer->status = 0U;
 80045a6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 80045a8:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 80045ac:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
 80045b0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 80045b4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 80045b8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 80045ba:	6343      	str	r3, [r0, #52]	; 0x34
}
 80045bc:	4770      	bx	lr

080045be <k_heap_init>:
{
 80045be:	b410      	push	{r4}
 80045c0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 80045c4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 80045c8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 80045ca:	f7ff b97a 	b.w	80038c2 <sys_heap_init>

080045ce <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 80045ce:	4770      	bx	lr
